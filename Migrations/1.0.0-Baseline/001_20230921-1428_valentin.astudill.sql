-- <Migration ID="c52142ea-e278-448d-867c-bf32de49ffcd" />
GO

DECLARE @associate bit
SELECT @associate = CASE SERVERPROPERTY('EngineEdition') WHEN 5 THEN 1 ELSE 0 END
IF @associate = 0 EXEC sp_executesql N'SELECT @count = COUNT(*) FROM master.dbo.syslogins WHERE loginname = N''AxBusServiceAccount''', N'@count bit OUT', @associate OUT
IF @associate = 1
BEGIN
    PRINT N'Creating user [AxBusServiceAccount] and mapping to the login [AxBusServiceAccount]'
    CREATE USER [AxBusServiceAccount] FOR LOGIN [AxBusServiceAccount] WITH DEFAULT_SCHEMA=[axbus]
END
ELSE
BEGIN
    PRINT N'Creating user [AxBusServiceAccount] without login'
    CREATE USER [AxBusServiceAccount] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[axbus]
END
GO
DECLARE @associate bit
SELECT @associate = CASE SERVERPROPERTY('EngineEdition') WHEN 5 THEN 1 ELSE 0 END
IF @associate = 0 EXEC sp_executesql N'SELECT @count = COUNT(*) FROM master.dbo.syslogins WHERE loginname = N''Joan_Ruiz''', N'@count bit OUT', @associate OUT
IF @associate = 1
BEGIN
    PRINT N'Creating user [Joan_Ruiz] and mapping to the login [Joan_Ruiz]'
    CREATE USER [Joan_Ruiz] FOR LOGIN [Joan_Ruiz] WITH DEFAULT_SCHEMA=[ext]
END
ELSE
BEGIN
    PRINT N'Creating user [Joan_Ruiz] without login'
    CREATE USER [Joan_Ruiz] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[ext]
END
GO
DECLARE @associate bit
SELECT @associate = CASE SERVERPROPERTY('EngineEdition') WHEN 5 THEN 1 ELSE 0 END
IF @associate = 0 EXEC sp_executesql N'SELECT @count = COUNT(*) FROM master.dbo.syslogins WHERE loginname = N''joelbjorck''', N'@count bit OUT', @associate OUT
IF @associate = 1
BEGIN
    PRINT N'Creating user [JoelBjorck] and mapping to the login [joelbjorck]'
    CREATE USER [JoelBjorck] FOR LOGIN [joelbjorck] WITH DEFAULT_SCHEMA=[ext]
END
ELSE
BEGIN
    PRINT N'Creating user [JoelBjorck] without login'
    CREATE USER [JoelBjorck] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[ext]
END
GO
DECLARE @associate bit
SELECT @associate = CASE SERVERPROPERTY('EngineEdition') WHEN 5 THEN 1 ELSE 0 END
IF @associate = 0 EXEC sp_executesql N'SELECT @count = COUNT(*) FROM master.dbo.syslogins WHERE loginname = N''PowerbiServiceAccount''', N'@count bit OUT', @associate OUT
IF @associate = 1
BEGIN
    PRINT N'Creating user [PowerbiServiceAccount] and mapping to the login [PowerbiServiceAccount]'
    CREATE USER [PowerbiServiceAccount] FOR LOGIN [PowerbiServiceAccount]
END
ELSE
BEGIN
    PRINT N'Creating user [PowerbiServiceAccount] without login'
    CREATE USER [PowerbiServiceAccount] WITHOUT LOGIN
END
GO
DECLARE @associate bit
SELECT @associate = CASE SERVERPROPERTY('EngineEdition') WHEN 5 THEN 1 ELSE 0 END
IF @associate = 0 EXEC sp_executesql N'SELECT @count = COUNT(*) FROM master.dbo.syslogins WHERE loginname = N''RebeckaNystrom''', N'@count bit OUT', @associate OUT
IF @associate = 1
BEGIN
    PRINT N'Creating user [RebeckaNystrom] and mapping to the login [RebeckaNystrom]'
    CREATE USER [RebeckaNystrom] FOR LOGIN [RebeckaNystrom] WITH DEFAULT_SCHEMA=[ext]
END
ELSE
BEGIN
    PRINT N'Creating user [RebeckaNystrom] without login'
    CREATE USER [RebeckaNystrom] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[ext]
END
GO
DECLARE @associate bit
SELECT @associate = CASE SERVERPROPERTY('EngineEdition') WHEN 5 THEN 1 ELSE 0 END
IF @associate = 0 EXEC sp_executesql N'SELECT @count = COUNT(*) FROM master.dbo.syslogins WHERE loginname = N''joel_bjorck''', N'@count bit OUT', @associate OUT
IF @associate = 1
BEGIN
    PRINT N'Creating user [joel_bjorck] and mapping to the login [joel_bjorck]'
    CREATE USER [joel_bjorck] FOR LOGIN [joel_bjorck] WITH DEFAULT_SCHEMA=[ext]
END
ELSE
BEGIN
    PRINT N'Creating user [joel_bjorck] without login'
    CREATE USER [joel_bjorck] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[ext]
END
GO
DECLARE @associate bit
SELECT @associate = CASE SERVERPROPERTY('EngineEdition') WHEN 5 THEN 1 ELSE 0 END
IF @associate = 0 EXEC sp_executesql N'SELECT @count = COUNT(*) FROM master.dbo.syslogins WHERE loginname = N''servicewriteuser_bri''', N'@count bit OUT', @associate OUT
IF @associate = 1
BEGIN
    PRINT N'Creating user [servicewriteuser_bri] and mapping to the login [servicewriteuser_bri]'
    CREATE USER [servicewriteuser_bri] FOR LOGIN [servicewriteuser_bri] WITH DEFAULT_SCHEMA=[guest]
END
ELSE
BEGIN
    PRINT N'Creating user [servicewriteuser_bri] without login'
    CREATE USER [servicewriteuser_bri] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[guest]
END
GO
DECLARE @associate bit
SELECT @associate = CASE SERVERPROPERTY('EngineEdition') WHEN 5 THEN 1 ELSE 0 END
IF @associate = 0 EXEC sp_executesql N'SELECT @count = COUNT(*) FROM master.dbo.syslogins WHERE loginname = N''sql-admin-ALL''', N'@count bit OUT', @associate OUT
IF @associate = 1
BEGIN
    PRINT N'Creating user [sql-admin-ALL] and mapping to the login [sql-admin-ALL]'
    CREATE USER [sql-admin-ALL] FOR LOGIN [sql-admin-ALL] WITH DEFAULT_SCHEMA=[dm_ALL]
END
ELSE
BEGIN
    PRINT N'Creating user [sql-admin-ALL] without login'
    CREATE USER [sql-admin-ALL] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dm_ALL]
END
GO
DECLARE @associate bit
SELECT @associate = CASE SERVERPROPERTY('EngineEdition') WHEN 5 THEN 1 ELSE 0 END
IF @associate = 0 EXEC sp_executesql N'SELECT @count = COUNT(*) FROM master.dbo.syslogins WHERE loginname = N''sql-admin-AX''', N'@count bit OUT', @associate OUT
IF @associate = 1
BEGIN
    PRINT N'Creating user [sql-admin-AX] and mapping to the login [sql-admin-AX]'
    CREATE USER [sql-admin-AX] FOR LOGIN [sql-admin-AX] WITH DEFAULT_SCHEMA=[dm_AX]
END
ELSE
BEGIN
    PRINT N'Creating user [sql-admin-AX] without login'
    CREATE USER [sql-admin-AX] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dm_AX]
END
GO
DECLARE @associate bit
SELECT @associate = CASE SERVERPROPERTY('EngineEdition') WHEN 5 THEN 1 ELSE 0 END
IF @associate = 0 EXEC sp_executesql N'SELECT @count = COUNT(*) FROM master.dbo.syslogins WHERE loginname = N''sql-admin-DEMO''', N'@count bit OUT', @associate OUT
IF @associate = 1
BEGIN
    PRINT N'Creating user [sql-admin-DEMO] and mapping to the login [sql-admin-DEMO]'
    CREATE USER [sql-admin-DEMO] FOR LOGIN [sql-admin-DEMO] WITH DEFAULT_SCHEMA=[dm_DEMO]
END
ELSE
BEGIN
    PRINT N'Creating user [sql-admin-DEMO] without login'
    CREATE USER [sql-admin-DEMO] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dm_DEMO]
END
GO
DECLARE @associate bit
SELECT @associate = CASE SERVERPROPERTY('EngineEdition') WHEN 5 THEN 1 ELSE 0 END
IF @associate = 0 EXEC sp_executesql N'SELECT @count = COUNT(*) FROM master.dbo.syslogins WHERE loginname = N''sql-admin-DS''', N'@count bit OUT', @associate OUT
IF @associate = 1
BEGIN
    PRINT N'Creating user [sql-admin-DS] and mapping to the login [sql-admin-DS]'
    CREATE USER [sql-admin-DS] FOR LOGIN [sql-admin-DS] WITH DEFAULT_SCHEMA=[dm_DS]
END
ELSE
BEGIN
    PRINT N'Creating user [sql-admin-DS] without login'
    CREATE USER [sql-admin-DS] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dm_DS]
END
GO
DECLARE @associate bit
SELECT @associate = CASE SERVERPROPERTY('EngineEdition') WHEN 5 THEN 1 ELSE 0 END
IF @associate = 0 EXEC sp_executesql N'SELECT @count = COUNT(*) FROM master.dbo.syslogins WHERE loginname = N''sql-admin-FH''', N'@count bit OUT', @associate OUT
IF @associate = 1
BEGIN
    PRINT N'Creating user [sql-admin-FH] and mapping to the login [sql-admin-FH]'
    CREATE USER [sql-admin-FH] FOR LOGIN [sql-admin-FH] WITH DEFAULT_SCHEMA=[dm_FH]
END
ELSE
BEGIN
    PRINT N'Creating user [sql-admin-FH] without login'
    CREATE USER [sql-admin-FH] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dm_FH]
END
GO
DECLARE @associate bit
SELECT @associate = CASE SERVERPROPERTY('EngineEdition') WHEN 5 THEN 1 ELSE 0 END
IF @associate = 0 EXEC sp_executesql N'SELECT @count = COUNT(*) FROM master.dbo.syslogins WHERE loginname = N''sql-admin-IN''', N'@count bit OUT', @associate OUT
IF @associate = 1
BEGIN
    PRINT N'Creating user [sql-admin-IN] and mapping to the login [sql-admin-IN]'
    CREATE USER [sql-admin-IN] FOR LOGIN [sql-admin-IN] WITH DEFAULT_SCHEMA=[dm_IN]
END
ELSE
BEGIN
    PRINT N'Creating user [sql-admin-IN] without login'
    CREATE USER [sql-admin-IN] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dm_IN]
END
GO
DECLARE @associate bit
SELECT @associate = CASE SERVERPROPERTY('EngineEdition') WHEN 5 THEN 1 ELSE 0 END
IF @associate = 0 EXEC sp_executesql N'SELECT @count = COUNT(*) FROM master.dbo.syslogins WHERE loginname = N''sql-admin-LS''', N'@count bit OUT', @associate OUT
IF @associate = 1
BEGIN
    PRINT N'Creating user [sql-admin-LS] and mapping to the login [sql-admin-LS]'
    CREATE USER [sql-admin-LS] FOR LOGIN [sql-admin-LS] WITH DEFAULT_SCHEMA=[dm_LS]
END
ELSE
BEGIN
    PRINT N'Creating user [sql-admin-LS] without login'
    CREATE USER [sql-admin-LS] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dm_LS]
END
GO
DECLARE @associate bit
SELECT @associate = CASE SERVERPROPERTY('EngineEdition') WHEN 5 THEN 1 ELSE 0 END
IF @associate = 0 EXEC sp_executesql N'SELECT @count = COUNT(*) FROM master.dbo.syslogins WHERE loginname = N''sql-admin-PT''', N'@count bit OUT', @associate OUT
IF @associate = 1
BEGIN
    PRINT N'Creating user [sql-admin-PT] and mapping to the login [sql-admin-PT]'
    CREATE USER [sql-admin-PT] FOR LOGIN [sql-admin-PT] WITH DEFAULT_SCHEMA=[dm_PT]
END
ELSE
BEGIN
    PRINT N'Creating user [sql-admin-PT] without login'
    CREATE USER [sql-admin-PT] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dm_PT]
END
GO
DECLARE @associate bit
SELECT @associate = CASE SERVERPROPERTY('EngineEdition') WHEN 5 THEN 1 ELSE 0 END
IF @associate = 0 EXEC sp_executesql N'SELECT @count = COUNT(*) FROM master.dbo.syslogins WHERE loginname = N''sql-admin-TS''', N'@count bit OUT', @associate OUT
IF @associate = 1
BEGIN
    PRINT N'Creating user [sql-admin-TS] and mapping to the login [sql-admin-TS]'
    CREATE USER [sql-admin-TS] FOR LOGIN [sql-admin-TS] WITH DEFAULT_SCHEMA=[dm_TS]
END
ELSE
BEGIN
    PRINT N'Creating user [sql-admin-TS] without login'
    CREATE USER [sql-admin-TS] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dm_TS]
END
GO
PRINT N'Creating role AxBusUsers'
GO
CREATE ROLE [AxBusUsers]
AUTHORIZATION [dbo]
GO
PRINT N'Creating role CoC_InternalUsers'
GO
CREATE ROLE [CoC_InternalUsers]
AUTHORIZATION [guest]
GO
PRINT N'Creating role ConsultantUser'
GO
CREATE ROLE [ConsultantUser]
AUTHORIZATION [guest]
GO
PRINT N'Creating role PowerbiServiceUSER'
GO
CREATE ROLE [PowerbiServiceUSER]
AUTHORIZATION [guest]
GO
PRINT N'Creating role ReadAndWrite_bri'
GO
CREATE ROLE [ReadAndWrite_bri]
AUTHORIZATION [guest]
GO
PRINT N'Altering members of role AxBusUsers'
GO
ALTER ROLE [AxBusUsers] ADD MEMBER [AxBusServiceAccount]
GO
PRINT N'Altering members of role CoC_InternalUsers'
GO
ALTER ROLE [CoC_InternalUsers] ADD MEMBER [Joan_Ruiz]
GO
ALTER ROLE [CoC_InternalUsers] ADD MEMBER [joel_bjorck]
GO
PRINT N'Altering members of role ConsultantUser'
GO
ALTER ROLE [ConsultantUser] ADD MEMBER [JoelBjorck]
GO
ALTER ROLE [ConsultantUser] ADD MEMBER [RebeckaNystrom]
GO
PRINT N'Altering members of role PowerbiServiceUSER'
GO
ALTER ROLE [PowerbiServiceUSER] ADD MEMBER [PowerbiServiceAccount]
GO
PRINT N'Altering members of role ReadAndWrite_bri'
GO
ALTER ROLE [ReadAndWrite_bri] ADD MEMBER [servicewriteuser_bri]
GO
PRINT N'Altering members of role db_datareader'
GO
ALTER ROLE [db_datareader] ADD MEMBER [sql-admin-ALL]
GO
ALTER ROLE [db_datareader] ADD MEMBER [sql-admin-AX]
GO
ALTER ROLE [db_datareader] ADD MEMBER [sql-admin-DS]
GO
ALTER ROLE [db_datareader] ADD MEMBER [sql-admin-FH]
GO
ALTER ROLE [db_datareader] ADD MEMBER [sql-admin-IN]
GO
ALTER ROLE [db_datareader] ADD MEMBER [sql-admin-LS]
GO
ALTER ROLE [db_datareader] ADD MEMBER [sql-admin-PT]
GO
ALTER ROLE [db_datareader] ADD MEMBER [sql-admin-TS]
GO
PRINT N'Creating schemas'
GO
CREATE SCHEMA [DS]
AUTHORIZATION [dbo]
GO
CREATE SCHEMA [Dim]
AUTHORIZATION [dbo]
GO
CREATE SCHEMA [IN]
AUTHORIZATION [dbo]
GO
CREATE SCHEMA [LS]
AUTHORIZATION [dbo]
GO
CREATE SCHEMA [PT]
AUTHORIZATION [dbo]
GO
CREATE SCHEMA [PT2]
AUTHORIZATION [dbo]
GO
CREATE SCHEMA [TS]
AUTHORIZATION [dbo]
GO
CREATE SCHEMA [audit]
AUTHORIZATION [dbo]
GO
CREATE SCHEMA [axbus]
AUTHORIZATION [dbo]
GO
CREATE SCHEMA [demo]
AUTHORIZATION [dbo]
GO
CREATE SCHEMA [dm]
AUTHORIZATION [dbo]
GO
CREATE SCHEMA [dm_ALL]
AUTHORIZATION [dbo]
GO
CREATE SCHEMA [dm_AX]
AUTHORIZATION [dbo]
GO
CREATE SCHEMA [dm_CS_PT]
AUTHORIZATION [dbo]
GO
CREATE SCHEMA [dm_DEMO]
AUTHORIZATION [dbo]
GO
CREATE SCHEMA [dm_DS]
AUTHORIZATION [dbo]
GO
CREATE SCHEMA [dm_FH]
AUTHORIZATION [dbo]
GO
CREATE SCHEMA [dm_IN]
AUTHORIZATION [dbo]
GO
CREATE SCHEMA [dm_LS]
AUTHORIZATION [dbo]
GO
CREATE SCHEMA [dm_PT]
AUTHORIZATION [dbo]
GO
CREATE SCHEMA [dm_PT2]
AUTHORIZATION [dbo]
GO
CREATE SCHEMA [dm_TS]
AUTHORIZATION [dbo]
GO
CREATE SCHEMA [dnb]
AUTHORIZATION [dbo]
GO
CREATE SCHEMA [dw]
AUTHORIZATION [dbo]
GO
CREATE SCHEMA [ext]
AUTHORIZATION [dbo]
GO
CREATE SCHEMA [fnc]
AUTHORIZATION [dbo]
GO
CREATE SCHEMA [hist]
AUTHORIZATION [dbo]
GO
CREATE SCHEMA [meta]
AUTHORIZATION [dbo]
GO
CREATE SCHEMA [prepare]
AUTHORIZATION [dbo]
GO
CREATE SCHEMA [prestage]
AUTHORIZATION [dbo]
GO
CREATE SCHEMA [sp]
AUTHORIZATION [dbo]
GO
CREATE SCHEMA [stage]
AUTHORIZATION [dbo]
GO
CREATE SCHEMA [test]
AUTHORIZATION [dbo]
GO
PRINT N'Creating [ext].[ManualMatchLog]'
GO
CREATE TABLE [ext].[ManualMatchLog]
(
[dw_id] [bigint] NOT NULL,
[is_customer] [bit] NOT NULL,
[duns] [int] NOT NULL,
[modified_date] [datetime] NOT NULL,
[user_name] [nvarchar] (100) NULL,
[Company] [nvarchar] (12) NOT NULL,
[previous_duns] [int] NULL
)
GO
PRINT N'Creating [dnb].[DnBCustomerAndSupplier]'
GO
CREATE TABLE [dnb].[DnBCustomerAndSupplier]
(
[PartitionKey] [varchar] (50) NULL,
[dw_id] [binary] (32) NULL,
[is_customer] [bit] NULL,
[DUNS] [int] NULL,
[BusinessName1] [varchar] (100) NULL,
[BusinessName2] [varchar] (100) NULL,
[VisitStreetAddress] [varchar] (200) NULL,
[MailStreetAddress] [varchar] (100) NULL,
[VisitPostalCode] [varchar] (100) NULL,
[ProvinceName] [varchar] (100) NULL,
[CountryCode] [varchar] (100) NULL,
[TelephoneNumber] [varchar] (100) NULL,
[LocalRegistrationNumber] [varchar] (100) NULL,
[Email] [varchar] (100) NULL,
[lastDateDetected] [date] NULL,
[sent_date] [datetime] NULL,
[match_date] [datetime] NULL,
[enrich_date] [datetime] NULL,
[last_modified_date] [datetime] NULL,
[confidence_code] [int] NULL,
[is_monitored] [bit] NULL,
[monitor_date] [datetime] NULL,
[Company] [nvarchar] (15) NULL,
[match_status] [nvarchar] (12) NULL,
[enrich_status] [nvarchar] (12) NULL,
[error_detail] [nvarchar] (2000) NULL,
[manual_date] [datetime] NULL,
[monitor_status] [nvarchar] (12) NULL
)
GO
PRINT N'Creating index [IX_DnBCustomerAndSupplier_duns] on [dnb].[DnBCustomerAndSupplier]'
GO
CREATE NONCLUSTERED INDEX [IX_DnBCustomerAndSupplier_duns] ON [dnb].[DnBCustomerAndSupplier] ([DUNS])
GO
PRINT N'Creating index [IX_DnBCustomerAndSupplier_dwId-isCustomer] on [dnb].[DnBCustomerAndSupplier]'
GO
CREATE NONCLUSTERED INDEX [IX_DnBCustomerAndSupplier_dwId-isCustomer] ON [dnb].[DnBCustomerAndSupplier] ([dw_id], [is_customer])
GO
PRINT N'Creating trigger [ext].[Trigger_ManualMatchLog] on [ext].[ManualMatchLog]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO

CREATE TRIGGER [ext].[Trigger_ManualMatchLog]
    ON [ext].[ManualMatchLog]
    AFTER INSERT
    AS
    BEGIN
        UPDATE dnb
		SET 
			 dnb.DUNS = (SELECT duns FROM inserted)
			,dnb.is_monitored = null
			,dnb.manual_date = GETDATE()
		FROM dnb.DnBCustomerAndSupplier dnb
		WHERE cast(dnb.dw_id as bigint) = (SELECT dw_id FROM inserted) 
		and dnb.is_customer = (SELECT is_customer FROM inserted)
		and dnb.Company = (SELECT Company FROM inserted);
    END
GO
PRINT N'Creating [prestage].[CYE_ES_PurchaseInvoice]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [prestage].[CYE_ES_PurchaseInvoice]
(
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaseOrderType] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[PurchaseInvoiceLine] [nvarchar] (50) NULL,
[PurchaseInvoiceType] [nvarchar] (50) NULL,
[PurchaseInvoiceDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PurchaseInvoiceQty] [nvarchar] (50) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [nvarchar] (50) NULL,
[DiscountPercent] [nvarchar] (50) NULL,
[DiscountAmount] [nvarchar] (50) NULL,
[TotalMiscChrg] [nvarchar] (50) NULL,
[VATAmount] [nvarchar] (50) NULL,
[ExchangeRate] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (max) NULL,
[PurchaserName] [nvarchar] (100) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[PurchaseChannel] [nvarchar] (50) NULL,
[Comment] [nvarchar] (max) NULL,
[PIRes1] [nvarchar] (50) NULL,
[PIRes2] [nvarchar] (50) NULL,
[PIRes3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [prestage].[vCYE_ES_PurchaseInvoice]'
GO



CREATE view [prestage].[vCYE_ES_PurchaseInvoice] AS
SELECT
	CONVERT(nvarchar(50), CONCAT(CONVERT (date, SYSDATETIME()), ' 00:00:00')) AS PartitionKey,
	[Company],
	PurchaseOrderNum,
	PurchaseOrderLine,
	PurchaseOrderSubLine,
	PurchaseOrderType,
	PurchaseInvoiceNum,
	PurchaseInvoiceLine,
	PurchaseInvoiceType,
	PurchaseInvoiceDate,
	ActualDelivDate,
	[SupplierNum],
	[PartNum],
	PurchaseInvoiceQty,
	UoM,
	[UnitPrice],
	DiscountPercent,
	DiscountAmount,
	TotalMiscChrg,
	VATAmount,
	ExchangeRate,
	Currency,
	'0' AS CreditMemo,
	PurchaserName,
	WarehouseCode,
	PurchaseChannel,
	Comment,
	PIRes1,
	PIRes2,
	PIRes3
FROM [prestage].CYE_ES_PurchaseInvoice
GO
PRINT N'Creating [stage].[MIT_UK_Warehouse]'
GO
CREATE TABLE [stage].[MIT_UK_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseID] [nvarchar] (50) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL,
[WarehouseDistrict] [nvarchar] (50) NULL,
[WarehouseAddress] [nvarchar] (100) NULL,
[WarehouseDescription] [nvarchar] (100) NULL,
[WarehouseType] [nvarchar] (50) NULL,
[WarehouseCountry] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vMIT_UK_Warehouse]'
GO
CREATE VIEW [stage].[vMIT_UK_Warehouse] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([WarehouseCode])) AS [WarehouseCode]
	,[WarehouseName]
	,[WarehouseDistrict]
	,[WarehouseAddress]
	,[WarehouseDescription]
	,[WarehouseType]
	,[WarehouseCountry]
	--,'' AS [WarehouseSite]
FROM [stage].[MIT_UK_Warehouse]

GROUP BY 
	PartitionKey,[Company],[WarehouseCode],[WarehouseName],[WarehouseDistrict],[WarehouseAddress],[WarehouseDescription],[WarehouseType],[WarehouseCountry]
GO
PRINT N'Creating [dw].[SalesLedger]'
GO
CREATE TABLE [dw].[SalesLedger]
(
[SalesLedgerID] [binary] (32) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[SalesInvoiceNum] [nvarchar] (50) NULL,
[SalesInvoiceDate] [date] NULL,
[SalesDueDate] [date] NULL,
[SalesLastPaymentDate] [date] NULL,
[InvoiceAmount] [decimal] (18, 4) NULL,
[RemainingInvoiceAmount] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 8) NULL,
[Currency] [nvarchar] (10) NULL,
[VATAmount] [decimal] (18, 4) NULL,
[VATCode] [nvarchar] (50) NULL,
[PayToName] [nvarchar] (100) NULL,
[PayToCity] [nvarchar] (50) NULL,
[PayToContact] [nvarchar] (50) NULL,
[PaymentTerms] [nvarchar] (50) NULL,
[SLRes1] [nvarchar] (100) NULL,
[SLRes2] [nvarchar] (100) NULL,
[SLRes3] [nvarchar] (100) NULL,
[SalesLedgerCode] [nvarchar] (500) NULL,
[CompanyID] [binary] (32) NOT NULL,
[PartitionKey] [varchar] (50) NOT NULL,
[PaidInvoiceAmount] [decimal] (18, 4) NULL,
[AccountingDate] [date] NULL,
[AgingPeriod] [nvarchar] (100) NULL,
[VATCodeDesc] [nvarchar] (300) NULL,
[CustomerID] [binary] (32) NULL,
[AgingSort] [int] NULL,
[LinkToOriginalInvoice] [nvarchar] (500) MASKED WITH (FUNCTION = 'default()') NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[WarehouseID] [binary] (32) NULL,
[is_deleted] [bit] NULL,
[SalesOrderNum] [nvarchar] (50) NULL,
[IsInvoiceClosed] [bit] NULL,
[PaymentEvents] [int] NULL,
[IsActiveRecord] [bit] NULL
)
GO
PRINT N'Creating primary key [PK_SalesLedger] on [dw].[SalesLedger]'
GO
ALTER TABLE [dw].[SalesLedger] ADD CONSTRAINT [PK_SalesLedger] PRIMARY KEY CLUSTERED ([SalesLedgerID])
GO
PRINT N'Creating index [IX_Company_SalesDueDate] on [dw].[SalesLedger]'
GO
CREATE NONCLUSTERED INDEX [IX_Company_SalesDueDate] ON [dw].[SalesLedger] ([Company], [SalesDueDate] DESC)
GO
PRINT N'Creating index [IX_Company_SalesInvoiceDate] on [dw].[SalesLedger]'
GO
CREATE NONCLUSTERED INDEX [IX_Company_SalesInvoiceDate] ON [dw].[SalesLedger] ([Company], [SalesInvoiceDate] DESC)
GO
PRINT N'Creating [dm].[FactSalesLedger]'
GO
CREATE VIEW [dm].[FactSalesLedger] AS

SELECT 
	  CONVERT(bigint, [SalesLedgerID]) AS [SalesLedgerID]
	  ,CONVERT(BIGINT,HASHBYTES('SHA2_256',CONCAT(Company,'#',NULLIF(TRIM(SalesPersonName),'')))) AS SalesPersonNameID
      ,[Company]
      ,[CustomerNum]
      ,[SalesInvoiceNum]
      ,[SalesInvoiceDate]
      ,[SalesDueDate]
      ,[SalesLastPaymentDate]
      ,[InvoiceAmount]
      ,[RemainingInvoiceAmount]
      ,[ExchangeRate]
      ,[Currency]
      ,[VATAmount]
      ,[VATCode]
      ,[PayToName]
      ,[PayToCity]
      ,[PayToContact]
      ,[PaymentTerms]
      ,[SLRes1]
      ,[SLRes2]
      ,[SLRes3]
      ,[SalesLedgerCode]
      ,CONVERT(bigint,[CompanyID]) AS CompanyID
      ,[PartitionKey]
      ,[PaidInvoiceAmount]
      ,[AccountingDate]
      ,CASE WHEN ABS([RemainingInvoiceAmount]) > 0.1 AND DATEDIFF(DAY, [SalesDueDate], GETDATE())<-7 THEN 'Not Due Yet'
		WHEN     ABS([RemainingInvoiceAmount]) > 0.1 AND DATEDIFF(DAY, [SalesDueDate], GETDATE()) BETWEEN -7 AND 0 THEN 'Due in (0-7)'
		WHEN     ABS([RemainingInvoiceAmount]) > 0.1 AND DATEDIFF(DAY, [SalesDueDate], GETDATE())BETWEEN 1 AND 14 THEN 'Overdue (1-14)'
		WHEN     ABS([RemainingInvoiceAmount]) > 0.1 AND DATEDIFF(DAY, [SalesDueDate], GETDATE())BETWEEN 15 AND 30 THEN 'Overdue (15-30)'
		WHEN     ABS([RemainingInvoiceAmount]) > 0.1 AND DATEDIFF(DAY, [SalesDueDate], GETDATE())BETWEEN 31 AND 60 THEN 'Overdue (31-60)'
		WHEN     ABS([RemainingInvoiceAmount]) > 0.1 AND DATEDIFF(DAY, [SalesDueDate], GETDATE())> 60 THEN 'Overdue (60>)'
		WHEN     ABS([RemainingInvoiceAmount]) <=  0.1 THEN 'Settled'
		ELSE NULL END AS [AgingPeriod]
	,CASE WHEN   ABS([RemainingInvoiceAmount]) > 0.1 AND DATEDIFF(DAY, [SalesDueDate], GETDATE())<-7 THEN 0
		WHEN     ABS([RemainingInvoiceAmount]) > 0.1 AND DATEDIFF(DAY, [SalesDueDate], GETDATE()) BETWEEN -7 AND 0 THEN 1
		WHEN     ABS([RemainingInvoiceAmount]) > 0.1 AND DATEDIFF(DAY, [SalesDueDate], GETDATE()) BETWEEN 1 AND 14 THEN 2
		WHEN     ABS([RemainingInvoiceAmount]) > 0.1 AND DATEDIFF(DAY, [SalesDueDate], GETDATE()) BETWEEN 15 AND 30 THEN 3
		WHEN     ABS([RemainingInvoiceAmount]) > 0.1 AND DATEDIFF(DAY, [SalesDueDate], GETDATE()) BETWEEN 31 AND 60 THEN 4
		WHEN     ABS([RemainingInvoiceAmount]) > 0.1 AND DATEDIFF(DAY, [SalesDueDate], GETDATE())>60 THEN 5
		WHEN     ABS([RemainingInvoiceAmount]) <=  0.1 THEN 6
		ELSE NULL END AS [AgingSort]
      ,[VATCodeDesc]
      ,CONVERT(bigint,[CustomerID])	AS CustomerID
	  ,LinkToOriginalInvoice
	  ,COALESCE(YEAR([SalesInvoiceDate])*10000 + MONTH([SalesInvoiceDate])*100 + DAY([SalesInvoiceDate]), 19000101) AS SalesInvoiceDateID
	  ,CASE   
		WHEN ABS([RemainingInvoiceAmount]) <= 0.1
			THEN 'Paid'
        WHEN SalesLastPaymentDate <= '1900-01-01'
            OR SalesLastPaymentDate IS NULL
            OR SalesLastPaymentDate = ''
            THEN 'Not Paid'
        WHEN ABS([RemainingInvoiceAmount]) > 0.1
            THEN 'Partially Paid'
       ELSE 'check out!'
       END AS PaymentStatus
	   ,CONVERT(bigint, WarehouseID) AS WarehouseID
  FROM [dw].[SalesLedger]
GO
PRINT N'Creating [dm_IN].[fctSalesLedger]'
GO

CREATE VIEW [dm_IN].[fctSalesLedger] AS 
SELECT 
 sl.[SalesLedgerID]
,sl.[SalesPersonNameID]
,sl.[Company]
,sl.[CustomerNum]
,sl.[SalesInvoiceNum]
,sl.[SalesInvoiceDate]
,sl.[SalesDueDate]
,sl.[SalesLastPaymentDate]
,sl.[InvoiceAmount]
,sl.[RemainingInvoiceAmount]
,sl.[ExchangeRate]
,sl.[Currency]
,sl.[VATAmount]
,sl.[VATCode]
,sl.[PayToName]
,sl.[PayToCity]
,sl.[PayToContact]
,sl.[PaymentTerms]
,sl.[SLRes1]
,sl.[SLRes2]
,sl.[SLRes3]
,sl.[SalesLedgerCode]
,sl.[CompanyID]
,sl.[PartitionKey]
,sl.[PaidInvoiceAmount]
,sl.[AccountingDate]
,sl.[AgingPeriod]
,sl.[AgingSort]
,sl.[VATCodeDesc]
,sl.[CustomerID]
,sl.[LinkToOriginalInvoice]
,sl.[SalesInvoiceDateID]
,sl.[PaymentStatus]
,sl.[WarehouseID]
  FROM [dm].[FactSalesLedger] as sl
  WHERE Company  IN ('OCSSE')
GO
PRINT N'Creating [stage].[SVE_SE_SOLine]'
GO
CREATE TABLE [stage].[SVE_SE_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartType] [nvarchar] (50) NULL,
[SalesOrderNum] [nvarchar] (50) NULL,
[SalesOrderLine] [nvarchar] (50) NULL,
[SalesOrderSubLine] [nvarchar] (50) NULL,
[SalesOrderType] [nvarchar] (50) NULL,
[SalesInvoiceNum] [nvarchar] (50) NULL,
[SalesInvoiceDate] [nvarchar] (50) NULL,
[ActualDelivDate] [nvarchar] (50) NULL,
[SalesInvoiceQty] [decimal] (18, 4) NULL,
[UoM] [nvarchar] (50) NULL,
[LinePrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[VATAmount] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[Department] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[CostBearerNum] [nvarchar] (50) NULL,
[CostUnitNum] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (max) NULL,
[ReturnNum] [nvarchar] (50) NULL,
[ProjectNum] [nvarchar] (50) NULL,
[IndexKey] [nvarchar] (50) NULL,
[SIRes1] [nvarchar] (100) NULL,
[SIRes2] [nvarchar] (100) NULL,
[SIRes3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating index [IX_SVE_SE_SOLine_1] on [stage].[SVE_SE_SOLine]'
GO
CREATE NONCLUSTERED INDEX [IX_SVE_SE_SOLine_1] ON [stage].[SVE_SE_SOLine] ([SalesInvoiceNum])
GO
PRINT N'Creating [stage].[vSVE_SE_SOLine]'
GO

CREATE VIEW [stage].[vSVE_SE_SOLine] AS
--COMMENT EMPTY FIELDS //ADD TRIM()UPPER() INTO PartID,WarehouseID 23-01-03 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustomerNum), '#', TRIM(SalesOrderNum), '#', TRIM(SalesOrderLine), '#', TRIM(SalesOrderSubLine), '#', TRIM(PartNum), '#', TRIM(SalesInvoiceNum), '#', TRIM(SalesOrderType), '#', TRIM(WarehouseCode)))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(SalesOrderNum), '#', TRIM(SalesOrderLine)))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(SalesInvoiceNum)))) AS SalesLedgerID --, '#', TRIM(CustomerNum)
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(SalesOrderNum)))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(CustomerNum IS NULL OR CustomerNum = '', 'MISSINGCUSTOMER', CustomerNum))))) AS CustomerID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WareHouseID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', WarehouseCode))) AS WareHouseID
	,CONCAT(Company, '#', TRIM(CustomerNum), '#', TRIM(SalesOrderNum), '#', TRIM(SalesOrderLine), '#', SUBSTRING(TRIM(SalesInvoiceNum), 2, 50)) AS SalesOrderCode 
	-- CONCAT(Company, '#', TRIM(SalesOrderNum), '#', TRIM(SalesOrderLine), '#', SUBSTRING(TRIM(SalesInvoiceNum), PATINDEX('%[0-9]%', SalesInvoiceNum ), 50)) AS SalesOrderCode --otiginal; Added substring + patindex to fix the needbydate etc. in dm salesInvoice /SM 2021-05-31
	,CONVERT(int, replace(convert(date,SalesInvoiceDate), '-', '')) AS SalesInvoiceDateID  --Redundant?
	,CONCAT(Company, '#', TRIM(REPLACE(SalesInvoiceNum, ' ', ''))) AS SalesInvoiceCode --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT( Company, '#', '') ))	AS ProjectID
	,PartitionKey

	,TRIM(Company) AS Company
	,TRIM(SalesPersonName) AS SalesPersonName
	,TRIM(CustomerNum) AS CustomerNum
	,TRIM(PartNum) AS PartNum
	,TRIM(PartType) AS PartType
	,TRIM(SalesOrderNum) AS SalesOrderNum
	,TRIM(SalesOrderLine) AS SalesOrderLine
	,TRIM(SalesOrderSubLine) AS SalesOrderSubLine
	,TRIM(SalesOrderType) AS SalesOrderType
	,TRIM(REPLACE(SalesInvoiceNum, ' ', '')) AS SalesInvoiceNum -- Added substring + patindex to fix the needbydate etc. in dm salesInvoice /SM 2021-05-31
	--,'' AS SalesInvoiceLine
	--,'' AS SalesInvoiceType
	,CASE WHEN SalesInvoiceDate = '' THEN '1900-01-01' ELSE TRY_CONVERT(date, SalesInvoiceDate) END AS SalesInvoiceDate
	,TRY_CONVERT(date, ActualDelivDate) as ActualDelivDate
	,UoM
	,SUM(SalesInvoiceQty) AS SalesInvoiceQty
	,IIF(SUM(SalesInvoiceQty) <> 0, SUM(LinePrice)/SUM(SalesInvoiceQty), NULL ) AS UnitPrice
	,IIF(SUM(SalesInvoiceQty) <> 0, (CONVERT(decimal(18,4), SUM(UnitCost)/SUM(SalesInvoiceQty))), NULL) AS UnitCost
	--,0 AS DiscountPercent --AVG(CONVERT(decimal(18,4), DiscountPercent))
	--,0 AS DiscountAmount --SUM(CONVERT(decimal(18,4), ABS(DiscountAmount)))
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	,(TotalMiscChrg) AS TotalMiscChrg
	,(VATAmount) AS VATAmount
	,Currency
	,(ExchangeRate) AS ExchangeRate
	,IIF(SalesOrderType = 'Kredit', 1, 0) AS CreditMemo
	,TRIM(SalesChannel) AS SalesChannel
	,TRIM(Department) AS Department
	,TRIM(WarehouseCode) AS WarehouseCode
	--,NULL AS DeliveryAddress
	,CostBearerNum
	,CostUnitNum
	,ReturnComment
	,TRIM(ReturnNum) AS ReturnNum
	,TRIM(ProjectNum) AS ProjectNum
	,TRIM(IndexKey) AS IndexKey
	,SIRes1
	,SIRes2
	,SIRes3
FROM stage.SVE_SE_SOLine

GROUP BY
	PartitionKey, Company, SalesPersonName, CustomerNum, PartNum, PartType, SalesOrderNum, SalesOrderLine, SalesOrderSubLine, SalesOrderType, SalesInvoiceNum, SalesInvoiceDate, ActualDelivDate, UoM, WarehouseCode, Currency, CreditMemo, Indexkey, SalesChannel, Department, CostBearerNum, CostUnitNum, ReturnComment, ReturnNum, ProjectNum, SIRes1, SIRes2, SIRes3, TotalMiscChrg, VATAmount, ExchangeRate--, UnitCost, LinePrice, SalesInvoiceQty
GO
PRINT N'Creating [stage].[CER_FI_SalesOrderLog]'
GO
CREATE TABLE [stage].[CER_FI_SalesOrderLog]
(
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[DelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[CurrExchRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (50) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[NeedbyDate] [date] NULL,
[SalesPerson] [nvarchar] (100) NULL,
[ReturnComment] [nvarchar] (500) NULL,
[SalesReturnInvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[CancellationCode] [nvarchar] (50) NULL,
[IndexKey] [nvarchar] (50) NOT NULL,
[PartitionKey] [varchar] (50) NULL,
[TransactionDate] [date] NULL
)
GO
PRINT N'Creating [stage].[vCER_FI_SalesOrderLog]'
GO
CREATE VIEW [stage].[vCER_FI_SalesOrderLog] As
--COMMENT EMPTY FIELD // ADD TRIM() INTO CustomerID,PartID,WarehouseID 2022-12-20 VA
SELECT 
	  CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', IndexKey)))) AS SalesOrderLogID
	  ,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM(Company))) AS CompanyID
	  ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	  --,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	  ,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	  --,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(UPPER(PartNum))))) AS PartID
	  ,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	  --,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(UPPER(WarehouseCode))))) AS WarehouseID
	  --,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(UPPER(PartNum)))) AS SalesOrderCode 
	  ,CONVERT(int, replace(convert(date, OrderDate),'-','')) AS SalesOrderDateID   --redundent
	  ,PartitionKey

	  ,[Company]
      ,[CustNum]	AS CustomerNum
      ,[OrderNum]	AS SalesOrderNum
      ,[OrderLine]	AS SalesOrderLine
      ,[OrderSubLine]	AS SalesOrderSubLine
      ,[OrderType]		AS SalesOrderType
	  --,'' AS SalesOrderLogType
      ,[OrderDate]		AS SalesOrderDate
	  ,[TransactionDate]	AS SalesOrderLogDate
--      ,[DelivDate]		AS ExpDelivDate
      ,[InvoiceNum]		AS SalesInvoiceNum
      ,[OrderQty]		AS SalesOrderQty
	  --,''				AS UoM
      ,[UnitPrice]
      ,[UnitCost]
      ,[Currency]
      ,[CurrExchRate]	AS ExchangeRate
      ,[OpenRelease]
      ,[DiscountPercent]
      ,[DiscountAmount]
      ,[PartNum]
	  ,IIF(OrderSubLine = '000000', 'Main', 'Sub' ) AS PartType
--      ,[NeedbyDate]
      ,[SalesPerson]	AS SalesPersonName
	  --,''				AS Department
      ,[ReturnComment]
      ,[SalesReturnInvoiceNum]
      ,[WarehouseCode]
      ,[CancellationCode]
      ,[IndexKey]
	  --,'' AS SORes1
	  --,'' AS SORes2
	  --,'' AS SORes3
	  
  FROM [stage].[CER_FI_SalesOrderLog]
GO
PRINT N'Creating [stage].[WID_EE_SOLine]'
GO
CREATE TABLE [stage].[WID_EE_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NOT NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderRel] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (100) NULL,
[PartNum] [nvarchar] (50) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Indexkey] [nvarchar] (50) NULL,
[Site] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[UnitPriceOCY] [decimal] (18, 4) NULL,
[UnitCostOCY] [decimal] (18, 4) NULL,
[DiscountAmountOCY] [decimal] (18, 4) NULL,
[ReturnComment] [nvarchar] (max) NULL,
[ReturnNum] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vWID_EE_SOLine]'
GO


CREATE VIEW [stage].[vWID_EE_SOLine] AS
--COMMENT EMPTY FIELDS // ADD UPPER() TRIM() INTO WarehouseID,PartID,CustomerID 2022-12-23 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(InvoiceNum), '#', TRIM(Indexkey)))) AS SalesInvoiceID --, '#', TRIM(OrderLine), '#', TRIM(PartNum)
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(InvoiceNum)))) AS SalesOrderID --, '#', OrderRel
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(InvoiceNum)))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum)))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(WarehouseCode)))) AS WarehouseID
	,CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(InvoiceNum)) AS SalesOrderCode
	,CONVERT(int, replace(convert(date,InvoiceDate), '-', '')) AS SalesInvoiceDateID  --Redundant?
	,CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine)) AS SalesInvoiceCode --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey

	,TRIM(Company) AS Company
	,TRIM(SalesPerson) AS SalesPersonName
	,TRIM(CustNum) AS CustomerNum 
	,TRIM(PartNum) AS PartNum
	,IIF(OrderRel = '000000', 'Main', 'Sub' )  AS PartType
	,TRIM(OrderNum) AS SalesOrderNum
	,TRIM(OrderLine) AS SalesOrderLine
	,TRIM(OrderRel) AS SalesOrderSubLine
	,TRIM(OrderType) AS SalesOrderType
	,TRIM(InvoiceNum) AS SalesInvoiceNum
	,TRIM(InvoiceLine) AS SalesInvoiceLine
	--,'' AS SalesInvoiceType
	,CASE WHEN InvoiceDate = '' THEN '1900-01-01' ELSE CONVERT(date, InvoiceDate) END AS SalesInvoiceDate
	,ActualDeliveryDate	AS ActualDelivDate
	,SellingShipQty	AS SalesInvoiceQty
	--,'' AS UoM
	,UnitPrice
	,UnitCost
	,IIF(UnitPrice*SellingShipQty = 0, 0, DiscountAmount/UnitPrice*SellingShipQty) AS DiscountPercent
	,DiscountAmount
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	,TotalMiscChrg
	--,NULL AS VATAmount
	,Currency
	,ExchangeRate
	,CreditMemo
	,TRIM(WarehouseCode) AS WarehouseCode
	--,NULL AS DeliveryAddress
	,IndexKey
	,CASE WHEN TRIM(CustNum) = 'CFIN' THEN 'Cash Customer' 
		WHEN TRIM(CustNum) = 'CEX' THEN 'Cash Customer Export'
		WHEN TRIM(CustNum) = 'CEU' THEN 'Cash Customer EU'
		ELSE 'Normal' END AS SalesChannel
	--,'' AS Department
	--,'' AS CostBearerNum
	--,'' AS CostUnitNum
	--,'' AS ReturnComment
	--,'' AS ReturnNum
	--,'' AS ProjectNum
	--,'' AS SIRes1
	--,'' AS SIRes2
	--,'' AS SIRes3

FROM stage.WID_EE_SOLine AS SO

--GROUP BY
--	PartitionKey, Company, SalesPerson, CustNum, PartNum, OrderNum, OrderLine, OrderType, InvoiceNum, InvoiceLine, InvoiceDate, SellingShipQty, UnitPrice, UnitCost, DiscountAmount, TotalMiscChrg, WarehouseCode, CreditMemo, ActualDeliveryDate,Indexkey, OrderRel,Currency,ExchangeRate
GO
PRINT N'Creating [stage].[JEN_SE_StockBalance]'
GO
CREATE TABLE [stage].[JEN_SE_StockBalance]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PartNum] [nvarchar] (70) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[FIFOValue] [decimal] (18, 4) NULL,
[StockBalance] [decimal] (18, 4) NULL,
[ReservedQty] [decimal] (18, 4) NULL,
[OptimalOrderQty] [decimal] (18, 4) NULL,
[BackOrderQty] [decimal] (18, 4) NULL,
[QtyOrdered] [decimal] (18, 4) NULL,
[StockTakDiff] [decimal] (18, 4) NULL,
[ReOrderLevel] [decimal] (18, 4) NULL,
[AvgWeightedCost] [decimal] (18, 4) NULL,
[AvgCost] [decimal] (18, 4) NULL,
[LandedCost] [decimal] (18, 4) NULL,
[DelivTimeDesc] [nvarchar] (50) NULL,
[DelivTimeUnit] [int] NULL,
[DelivTimeToWHS] [int] NULL,
[SupplierNum] [nvarchar] (50) NULL,
[DefaultBinNo] [nvarchar] (12) NULL,
[BatchNumber] [nvarchar] (50) NULL,
[StockTakDate] [date] NULL,
[StdCostLaCaD] [date] NULL,
[DelivDateSupplier] [date] NULL,
[DelivDateCust] [date] NULL,
[OrderDateSupplier] [date] NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[MaxStockQty] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vJEN_SE_StockBalance]'
GO
CREATE VIEW [stage].[vJEN_SE_StockBalance] AS
--COMMENT EMPTY FIELDS / ADD UPPER() TRIM() INTO PartID,WarehouseID 2022-12-19 VA 
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM(UPPER([PartNum])),'#',TRIM(UPPER([WarehouseCode]))))) AS ItemWarehouseID
	,CONCAT([Company],'#',TRIM(UPPER([PartNum])),'#',TRIM(UPPER([WarehouseCode]))) AS ItemWarehouseCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',TRIM([Company]))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM(UPPER([SupplierNum]))))) AS SupplierID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM(UPPER([PartNum]))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM(UPPER([WarehouseCode]))))) AS WarehouseID
	,[PartitionKey]

	,TRIM(UPPER([WarehouseCode])) AS WarehouseCode
	,TRIM(UPPER(CurrencyCode)) AS Currency
	,[Company]
	,TRIM(UPPER([DefaultBinNo])) AS BinNum
	,TRIM(UPPER(BatchNumber)) AS BatchNum
	,TRIM(UPPER([SupplierNum])) AS [SupplierNum]
	,TRIM(UPPER([PartNum])) AS PartNum
	,[DelivTimeUnit] AS [DelivTime]
	,convert(date, [StockTakDate]) AS LastStockTakeDate
	,convert(date, [StdCostLaCaD]) AS LastStdCostCalDate
	--,Null AS SafetyStock
	,MaxStockQty
	,[StockBalance]
	,AvgCost*StockBalance AS StockValue
	,AvgCost
--	,LandedCost
	,[ReservedQty] AS ReserveQty
	,[BackOrderQty]	AS BackOrderQty
	,[QtyOrdered] AS OrderQty
	,[StockTakDiff]	AS StockTakeDiff
	,[ReOrderLevel]
	,[OptimalOrderQty]
	--,'' AS SBRes1
	--,'' AS SBRes2
	--,'' AS SBRes3
FROM 
	[stage].[JEN_SE_StockBalance]
GROUP BY
	PartitionKey, Company, WarehouseCode, CurrencyCode, Company, DefaultBinNo, BatchNumber, SupplierNum, PartNum, DelivTimeUnit, StockTakDate, StdCostLaCaD, MaxStockQty, StockBalance, ReservedQty, BackOrderQty, QtyOrdered, StockTakDiff, ReOrderLevel, OptimalOrderQty, AvgCost
GO
PRINT N'Creating [stage].[NOM_NO_SalesLedger]'
GO
CREATE TABLE [stage].[NOM_NO_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (25) NULL,
[InvoiceDate] [datetime] NULL,
[DueDate] [datetime] NULL,
[LastPaymentDate] [datetime] NULL
)
GO
PRINT N'Creating [stage].[vNOM_NO_SalesLedger]'
GO
CREATE VIEW [stage].[vNOM_NO_SalesLedger] AS
--COMMENT EMPTY FIELDS 23-01-09 VA
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#', TRIM(CustNum), '#', TRIM(InvoiceNum))))) AS SalesLedgerID,
	CONVERT([binary](32),HASHBYTES('SHA2_256', UPPER(TRIM(Company)))) AS CompanyID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustNum))))) AS CustomerID,
	UPPER(CONCAT(TRIM(Company),'#', TRIM(CustNum), '#', TRIM(InvoiceNum))) AS SalesLedgerCode,
	PartitionKey,

	UPPER(TRIM(Company)) AS Company,
	UPPER(TRIM(CustNum)) as CustomerNum,
	UPPER(TRIM(InvoiceNum)) as SalesInvoiceNum,
	CONVERT(DATE, InvoiceDate) AS SalesInvoiceDate,
	CONVERT(date, DueDate) AS SalesDueDate,
	CONVERT(date, LastPaymentDate) AS SalesLastPaymentDate,
	--0 AS InvoiceAmount,
	--0 AS RemainingInvoiceAmount,
	--0 AS ExchangeRate,
	--'' AS Currency,
	--0 AS VATAmount,
	--'' AS VATCode,
	--'' AS PayToName,
	--'' AS PayToCity,
	--'' AS PayToContact,
	--'' AS PaymentTerms,
	--'' AS SLRes1,
	--'' AS SLRes2,
	--'' AS SLRes3
	--,NULL			AS PaidInvoiceAmount
	'1900-01-01' AS AccountingDate
	--,NULL AS AgingPeriod
	--,NULL AS AgingSort
	--,NULL AS VATCodeDesc
	--,NULL AS LinkToOriginalInvoice
FROM 
	stage.NOM_NO_SalesLedger
GO
PRINT N'Creating [dw].[Department]'
GO
CREATE TABLE [dw].[Department]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[DepartmentID] [binary] (32) NOT NULL,
[DepartmentCode] [nvarchar] (50) NULL,
[DepartmentName] [nvarchar] (100) NULL,
[DepartmentSite] [nvarchar] (50) NULL,
[Address] [nvarchar] (100) NULL,
[ZipCode] [nvarchar] (8) NULL,
[City] [nvarchar] (100) NULL,
[State] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[DepartmentType] [nvarchar] (50) NULL,
[DepartmentDescription] [nvarchar] (1000) NULL,
[IsActiveRecord] [bit] NULL,
[DptRes1] [nvarchar] (1000) NULL,
[DptRes2] [nvarchar] (1000) NULL,
[DptRes3] [nvarchar] (1000) NULL,
[is_deleted] [bit] NULL,
[is_inferred] [bit] NULL,
[CompanyID] [binary] (32) NULL
)
GO
PRINT N'Creating primary key [PK__Departme__B2079BCD8511F3DA] on [dw].[Department]'
GO
ALTER TABLE [dw].[Department] ADD CONSTRAINT [PK__Departme__B2079BCD8511F3DA] PRIMARY KEY CLUSTERED ([DepartmentID])
GO
PRINT N'Creating [dm].[dimDepartment]'
GO


CREATE view [dm].[dimDepartment] as

select 
	CONVERT(BIGINT, DepartmentID) AS DepartmentID
	,CONVERT(BIGINT, CompanyID) AS CompanyID
	, Company
	, DepartmentCode
	, DepartmentName
	, DepartmentSite
	, Address
	, ZipCode
	, City
	, State
	, CountryCode
	, CountryName
	, DepartmentType
	, DepartmentDescription
	, DptRes1
	, DptRes2
	, DptRes3
from dw.Department;
GO
PRINT N'Creating [dbo].[Company]'
GO
CREATE TABLE [dbo].[Company]
(
[Company] [nvarchar] (8) NOT NULL,
[CompanyName] [nvarchar] (max) NULL,
[CompanyLegalName] [nvarchar] (max) NULL,
[CompanyERPGroup] [nvarchar] (50) NULL,
[CompanyGroup] [nvarchar] (50) NULL,
[CompanyOwnerGroup] [nvarchar] (50) NULL,
[BusinessArea] [nvarchar] (50) NULL,
[Division] [nvarchar] (50) NULL,
[Country] [nvarchar] (150) NULL,
[Currency] [nvarchar] (50) NULL,
[CompanyShortO365] [nvarchar] (50) NULL,
[CompanyShort] [nvarchar] (50) NULL,
[CompanyShortAD] [nvarchar] (50) NULL,
[CompanyCode] [nvarchar] (50) NULL,
[FromPeriod] [nvarchar] (8) NULL,
[Status] [nvarchar] (50) NULL,
[DateAdd] [date] NULL,
[ValidatedSales] [nvarchar] (50) NULL,
[ValidatedPurchase] [nvarchar] (50) NULL,
[Comments] [nvarchar] (max) NULL,
[CompanyLogo] [nvarchar] (max) NULL
)
GO
PRINT N'Creating primary key [PK_Company] on [dbo].[Company]'
GO
ALTER TABLE [dbo].[Company] ADD CONSTRAINT [PK_Company] PRIMARY KEY CLUSTERED ([Company])
GO
PRINT N'Creating [dm_IN].[dimDepartment]'
GO



create view [dm_IN].[dimDepartment] as

select 
	 dpt.[DepartmentID]
,dpt.CompanyID
,dpt.[Company]
,dpt.[DepartmentCode]
,dpt.[DepartmentName]
,dpt.[DepartmentSite]
,dpt.[Address]
,dpt.[ZipCode]
,dpt.[City]
,dpt.[State]
,dpt.[CountryCode]
,dpt.[CountryName]
,dpt.[DepartmentType]
,dpt.[DepartmentDescription]
,dpt.[DptRes1]
,dpt.[DptRes2]
,dpt.[DptRes3]
from dm.dimDepartment as dpt
LEFT JOIN DBO.Company as company
	on dpt.Company = company.Company
WHERE company.BusinessArea = 'Industrial Solutions' AND company.[Status] = 'Active';
GO
PRINT N'Creating [stage].[TRA_SE_SOLine]'
GO
CREATE TABLE [stage].[TRA_SE_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (10) NOT NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartType] [nvarchar] (50) NULL,
[SalesOrderNum] [nvarchar] (50) NULL,
[SalesOrderLine] [nvarchar] (50) NULL,
[SalesOrderSubLine] [nvarchar] (50) NULL,
[SalesOrderType] [nvarchar] (50) NULL,
[SalesInvoiceNum] [nvarchar] (50) NULL,
[SalesInvoiceLine] [nvarchar] (50) NULL,
[fakturatypbeskr] [nvarchar] (50) NULL,
[SalesInvoiceDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[SalesInvoiceQty] [decimal] (18, 4) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[VATAmount] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[SalesInvoiceType] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vTRA_SE_SOLine]'
GO
CREATE VIEW [stage].[vTRA_SE_SOLine] AS
--COMMENT EMPTY FIELDS // ADD TRIM() UPPER() INTO WarehouseID,PartID,CustomerID 2022-12-27 VA
-- DELETE GROUP BY CLAUSE UPPER() IN COMPANY
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(UPPER(Company), '#', TRIM(CustomerNum), '#', TRIM(SalesOrderNum), '#', TRIM(SalesOrderLine), '#', TRIM(SalesInvoiceNum), '#', TRIM(SalesInvoiceLine)))) AS SalesInvoiceID --, '#', TRIM(fakturatypbeskr), '#', TRIM(SalesChannel), '#', TRIM(SalesPersonName), '#', TRIM(WarehouseCode)
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(UPPER(Company), '#', TRIM(SalesOrderNum), '#', TRIM(SalesOrderLine)))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(UPPER(Company), '#', TRIM(CustomerNum), '#', TRIM(SalesInvoiceNum)))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(UPPER(Company), '#', TRIM(SalesOrderNum)))) AS SalesOrderNumID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(UPPER(Company), '#', TRIM(CustomerNum)))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID 
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(UPPER(Company), '#', UPPER(TRIM(PartNum))))) AS PartID 	
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WareHouseID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(UPPER(Company), '#', TRIM(WarehouseCode)))) AS WareHouseID
	,CONCAT(UPPER(Company), '#', TRIM(SalesOrderNum), '#', TRIM(SalesOrderLine), '#', TRIM(SalesOrderSubLine), '#', TRIM(SalesInvoiceNum)) AS SalesOrderCode
	,CONVERT(int, replace(convert(date,SalesInvoiceDate), '-', '')) AS SalesInvoiceDateID  --Redundant?
	,CONCAT(UPPER(Company), '#', TRIM(SalesInvoiceNum)) AS SalesInvoiceCode --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( UPPER(Company),'#','') ))	AS ProjectID
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(SalesPersonName) AS SalesPersonName
	,TRIM(CustomerNum) AS CustomerNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,PartType
	,TRIM(SalesOrderNum) AS SalesOrderNum
	,TRIM(SalesOrderLine) AS SalesOrderLine
	,TRIM(SalesOrderSubLine) AS SalesOrderSubLine
	,SalesOrderType
	,TRIM(SalesInvoiceNum) AS SalesInvoiceNum
	,TRIM(SalesInvoiceLine) AS SalesInvoiceLine
	,fakturatypbeskr AS SalesInvoiceType
	,CASE WHEN SalesInvoiceDate = '' THEN '1900-01-01' ELSE CONVERT(date, SalesInvoiceDate) END AS SalesInvoiceDate
	,ActualDelivDate
	,UoM
	,SalesInvoiceQty
	,UnitPrice	
	,UnitCost
	,DiscountPercent
	,DiscountAmount
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	--,NULL AS TotalMiscChrg
	,VATAmount
	,Currency
	,ExchangeRate
	--,'' AS CreditMemo
	,TRIM(SalesChannel) AS SalesChannel
	--,'' AS Department
	,TRIM(WarehouseCode) AS WarehouseCode
	--,NULL AS DeliveryAddress
	--,'' AS CostBearerNum
	--,'' AS CostUnitNum
	--,'' AS ReturnComment
	--,'' AS ReturnNum
	--,'' AS ProjectNum
	--,'' AS IndexKey
	--,'' AS SIRes1
	--,'' AS SIRes2
	--,'' AS SIRes3

FROM stage.TRA_SE_SOLine

GROUP BY
	PartitionKey, Company, SalesPersonName, CustomerNum, PartNum, PartType, SalesOrderNum, SalesOrderLine, SalesOrderSubLine, SalesOrderType, SalesInvoiceNum, SalesInvoiceLine, fakturatypbeskr, SalesInvoiceDate, ActualDelivDate, UoM, SalesInvoiceQty, UnitPrice, UnitCost ,DiscountAmount, DiscountPercent, WarehouseCode, Currency, ExchangeRate, VATAmount, SalesChannel --, Department, CostBearerNum, CostUnitNum, ReturnComment, ReturnNum, ProjectNum, SIRes1, SIRes2, SIRes3, CreditMemo, Indexkey
GO
PRINT N'Creating [stage].[CER_NO_StockBalance]'
GO
CREATE TABLE [stage].[CER_NO_StockBalance]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[Currency] [nvarchar] (50) NULL,
[BinNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (70) NOT NULL,
[DelivTime] [int] NULL,
[LastStockTakeDate] [date] NULL,
[LastStdCostCalDate] [date] NULL,
[MaxStockQty] [decimal] (18, 4) NULL,
[StockBalance] [decimal] (18, 4) NULL,
[StockValue] [decimal] (18, 4) NULL,
[ReserveQty] [decimal] (18, 4) NULL,
[BackOrderQty] [decimal] (18, 4) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[StockTakeDiff] [decimal] (18, 4) NULL,
[ReOrderLevel] [decimal] (18, 4) NULL,
[OptimalOrderQty] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vCER_NO_StockBalance]'
GO

CREATE   VIEW [stage].[vCER_NO_StockBalance] AS

SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]),'#',TRIM([WarehouseCode]) /*,'#',TRIM(BatchNum),'#', BinNum, '#', [LastStockTakeDate]*/)))) AS ItemWarehouseID
	,UPPER(CONCAT([Company],'#',TRIM([PartNum]),'#',TRIM([WarehouseCode]))) AS ItemWarehouseCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID -- var '0000000'
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([WarehouseCode])) AS WarehouseCode
	,Currency
	,Max(BinNum)	AS BinNum --Currently there are some duplicates here and BinNum needs to be aggregated. It is only around 6 duplicate rows /SM 2021-05-21
	,BatchNum
	,UPPER(TRIM([SupplierNum])) AS SupplierNum
	,UPPER(TRIM([PartNum])) AS PartNum
	,[DelivTime]
	,convert(date, [LastStockTakeDate]) AS LastStockTakeDate
	,LastStdCostCalDate
	--,0 AS SafetyStock
	,MaxStockQty
	,[StockBalance]
	,StockValue
	--,0 AS AvgCost
	,[ReserveQty]
	,[BackOrderQty]
	,[OrderQty]
	,[StockTakeDiff]
	,[ReOrderLevel]
	,[OptimalOrderQty]
	--,'' AS SBRes1
	--,'' AS SBRes2
	--,'' AS SBRes3
	--,0 AS [FIFOValue]
	--,'' AS [DelivTimeToWHS]-- will not be sent out to new companies, not delete in DW for that use as reservation
	--,'' AS [DelivTimeDesc]-- will not be sent out to new companies, not delete in DW for that use as reservation
	--,'' AS [DaysOnStock]
	,convert(date, '') AS OrderDateSupplier
	,convert(date, '') AS OrderDateCust
	--,'' AS BatchNoPrefix-- will not be sent out to new companies, not delete in DW for that use as reservation
	--,'' AS BatchNoSuffix-- will not be sent out to new companies, not delete in DW for that use as reservation
	
FROM 
	[stage].[CER_NO_StockBalance]
GROUP BY
	[PartitionKey],[Company],[PartNum],[WarehouseCode],[StockBalance],[ReserveQty],[BackOrderQty],[OrderQty],[StockTakeDiff],[ReOrderLevel],/*BinNum,*/[SupplierNum],[DelivTime], [LastStockTakeDate],LastStdCostCalDate,
	BatchNum, StockValue,[OptimalOrderQty], MaxStockQty,Currency --BatchNoPrefix,BatchNoSuffix,,[DelivTimeToWHS]
GO
PRINT N'Creating [stage].[OCS_SE_SalesLedger]'
GO
CREATE TABLE [stage].[OCS_SE_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[SalesOrderNum] [nvarchar] (50) NULL,
[SalesInvoiceNum] [nvarchar] (50) NULL,
[InvoiceAmount] [decimal] (18, 8) NULL,
[InvoiceAmountSEK] [nvarchar] (50) NULL,
[PaidInvoiceAmount] [decimal] (18, 8) NULL,
[PaidInvoiceAmountSEK] [nvarchar] (50) NULL,
[RemainingInvoiceAmountSEK] [nvarchar] (50) NULL,
[RemainingInvoiceAmount] [decimal] (18, 8) NULL,
[AccountingDate] [nvarchar] (50) NULL,
[SalesInvoiceDate] [nvarchar] (50) NULL,
[SalesInvoiceDueDate] [nvarchar] (50) NULL,
[SalesInvoiceLastPaymentDate] [nvarchar] (50) NULL,
[IsInvoiceClosed] [nvarchar] (8) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [nvarchar] (50) NULL,
[VATAmount] [decimal] (18, 8) NULL,
[VATCode] [nvarchar] (50) NULL,
[VATCodeDesc] [nvarchar] (50) NULL,
[PaymentEvents] [nvarchar] (50) NULL,
[ProjectNum] [nvarchar] (50) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL,
[LinktoOriginalInvoice] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vOCS_SE_SalesLedger]'
GO


CREATE VIEW [stage].[vOCS_SE_SalesLedger] AS
--COMMENT EMPTY FIELDS // ADD UPPER() TRIM() INTO CustomerID 2022-12-21 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(UPPER(CustomerNum)), '#', TRIM(UPPER(SalesInvoiceNum)) ))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustomerID)))) AS CustomerID
	,CONCAT(Company, '#', TRIM(UPPER(CustomerNum)), '#', TRIM(UPPER(SalesInvoiceNum)) ) AS SalesLedgerCode
	,PartitionKey

	,Company
	,TRIM(UPPER(CustomerNum)) AS CustomerNum
	,TRIM(UPPER(SalesInvoiceNum)) AS SalesInvoiceNum
	,CONVERT(date,SalesInvoiceDate)  AS SalesInvoiceDate
	,CONVERT(date,SalesInvoiceDueDate) AS SalesDueDate --,CONVERT(date, Min(SalesInvoiceDueDate)) 2023-04-04
	,CONVERT(date, SalesInvoiceLastPaymentDate) AS SalesLastPaymentDate -- min
	,TRIM(SalesOrderNum) as SalesOrderNum
	,InvoiceAmount 
	,PaidInvoiceAmount -- max(PaidInvoiceAmount)	
	,RemainingInvoiceAmount --MIN(RemainingInvoiceAmount)
	,IIF(Currency = 'SEK', 1, CONVERT(decimal(18,4), Replace(ExchangeRate, ',', '.'))) AS ExchangeRate
	,IIF(Currency = '€UR','EUR', Currency) AS Currency
	,VATAmount -- max
	,PaymentEvents
	,IsInvoiceClosed
	,VATCode
	,VatCodeDesc
	--,'' AS PayToName
	--,'' AS PayToCity
	--,'' AS PayToContact
	--,'' AS PaymentTerms
	--,'' AS SLRes1
	--,'' AS SLRes2
	--,'' AS SLRes3
	,CONVERT(date, AccountingDate) AS AccountingDate 
	--,NULL AS AgingPeriod
	--,NULL AS AgingSort
	,LinktoOriginalInvoice AS LinkToOriginalInvoice
FROM 
	stage.OCS_SE_SalesLedger
--GROUP BY PartitionKey, Company, CustomerNum, TRIM(UPPER(SalesInvoiceNum))
GO
PRINT N'Creating [stage].[AXI_HQ_PurchaseLedger]'
GO
CREATE TABLE [stage].[AXI_HQ_PurchaseLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NOT NULL,
[PurchaseInvoiceDate] [date] NULL,
[PurchaseDueDate] [date] NULL,
[PurchaseLastPaymentDate] [date] NULL,
[InvoiceAmount] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (10) NOT NULL,
[VATAmount] [decimal] (18, 4) NULL,
[VATCode] [nvarchar] (10) NULL,
[PayToName] [nvarchar] (100) NULL,
[PayToCity] [nvarchar] (50) NULL,
[PayToContact] [nvarchar] (50) NULL,
[PaymentTerms] [nvarchar] (10) NULL,
[PrePaymentNum] [nvarchar] (50) NULL,
[LastPaymentNum] [nvarchar] (50) NULL,
[PaidInvoiceAmount] [decimal] (18, 4) NULL,
[AccountingDate] [date] NULL,
[AgingPeriod] [nvarchar] (50) NULL,
[VATCodeDesc] [nvarchar] (300) NULL,
[RemainingInvoiceAmount] [decimal] (18, 4) NULL,
[PLRes1] [nvarchar] (100) NULL,
[PLRes2] [nvarchar] (100) NULL,
[PLRes3] [nvarchar] (100) NULL,
[LinkToOriginalInvoice] [nvarchar] (500) NULL,
[InvoiceAmountLC] [decimal] (18, 4) NULL,
[VATAmountLC] [decimal] (18, 4) NULL,
[PaidInvoiceAmountLC] [decimal] (18, 4) NULL,
[RemainingInvoiceAmountLC] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vAXHSE_HQ_PurchaseLedger]'
GO




CREATE VIEW [stage].[vAXHSE_HQ_PurchaseLedger] AS
SELECT 

	  CONVERT(binary(32), HASHBYTES('SHA2_256', CONCAT(Company, '#', PurchaseInvoiceNum, '#', SupplierNum ))) AS PurchaseLedgerID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', SupplierNum ))) AS SupplierID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', '' ))) AS ProjectID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256', CONCAT(Company, '#', PurchaseInvoiceNum ))) AS PurchaseInvoiceID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256', CONCAT(Company, '#', '' ))) AS PurchaseOrderNumID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',Company)) AS CompanyID
	  ,CONVERT([binary](32), HASHBYTES('SHA2_256', Currency)) AS CurrencyID
	  ,CONVERT(int, replace(convert(date, PurchaseInvoiceDate), '-', '')) AS PurchaseInvoiceDateID
	  ,CONCAT(Company, '#', PurchaseInvoiceNum, '#', SupplierNum ) AS PurchaseLedgerCode
	  ,CONVERT(varchar, GETDATE(), 23) AS PartitionKey

      ,[Company]
      ,[SupplierNum]
      ,[PurchaseInvoiceNum]
      ,[PurchaseInvoiceDate]
	  ,'' AS PurchaseOrderNum
      ,[PurchaseDueDate]
      ,[PurchaseLastPaymentDate]
      ,[InvoiceAmount]
      ,CAST(COALESCE(InvoiceAmountLC/NULLIF([InvoiceAmount],0),[ExchangeRate]) AS decimal(18,8)) AS  [ExchangeRate]
      ,IIF([ExchangeRate] = 1, 'SEK', [Currency]) AS [Currency]
      ,[VATAmount]
      ,[VATCode]
      ,[PayToName]
      ,[PayToCity]
      ,[PayToContact]
      ,[PaymentTerms]
      ,[PrePaymentNum]
      ,[LastPaymentNum]
      ,-1*[PaidInvoiceAmount]	AS [PaidInvoiceAmount]
      ,[AccountingDate]
      ,CASE WHEN [InvoiceAmount] + [PaidInvoiceAmount] <> 0 AND DATEDIFF(DAY, [PurchaseDueDate], GETDATE())< -7 THEN 'Not Due Yet'
	WHEN [InvoiceAmount] + [PaidInvoiceAmount] <> 0 AND DATEDIFF(DAY, [PurchaseDueDate], GETDATE()) BETWEEN -7 AND 0 THEN 'Due in (0-7)'
	WHEN [InvoiceAmount] + [PaidInvoiceAmount] <> 0 AND DATEDIFF(DAY, [PurchaseDueDate], GETDATE())BETWEEN 1 AND 14 THEN 'Overdue (1-14)'
	WHEN [InvoiceAmount] + [PaidInvoiceAmount] <> 0 AND DATEDIFF(DAY, [PurchaseDueDate], GETDATE())BETWEEN 15 AND 30 THEN 'Overdue (15-30)'
	WHEN [InvoiceAmount] + [PaidInvoiceAmount] <> 0 AND DATEDIFF(DAY, [PurchaseDueDate], GETDATE())BETWEEN 31 AND 60 THEN 'Overdue (31-60)'
	WHEN [InvoiceAmount] + [PaidInvoiceAmount] <> 0 AND DATEDIFF(DAY, [PurchaseDueDate], GETDATE())> 60 THEN 'Overdue (60>)'
	WHEN [InvoiceAmount] + [PaidInvoiceAmount] = 0 THEN 'Settled'
	ELSE '' END AS [AgingPeriod]
	,CASE WHEN [InvoiceAmount] + [PaidInvoiceAmount] = 0 THEN 0
	WHEN [InvoiceAmount] + [PaidInvoiceAmount] <> 0 AND DATEDIFF(DAY, [PurchaseDueDate], GETDATE())<-7 THEN 1
	WHEN [InvoiceAmount] + [PaidInvoiceAmount] <> 0 AND DATEDIFF(DAY, [PurchaseDueDate], GETDATE())BETWEEN -7 AND 0 THEN 2
	WHEN [InvoiceAmount] + [PaidInvoiceAmount] <> 0 AND DATEDIFF(DAY, [PurchaseDueDate], GETDATE())BETWEEN 1 AND 14 THEN 3
	WHEN [InvoiceAmount] + [PaidInvoiceAmount] <> 0 AND DATEDIFF(DAY, [PurchaseDueDate], GETDATE())BETWEEN 15 AND 30 THEN 4
	WHEN [InvoiceAmount] + [PaidInvoiceAmount] <> 0 AND DATEDIFF(DAY, [PurchaseDueDate], GETDATE())BETWEEN 31 AND 60 THEN 5
	WHEN [InvoiceAmount] + [PaidInvoiceAmount] <> 0 AND DATEDIFF(DAY, [PurchaseDueDate], GETDATE())>'60' THEN 6
	ELSE 7 END AS [AgingSort]
      ,[VATCodeDesc]
      ,[InvoiceAmount] + [PaidInvoiceAmount] AS [RemainingInvoiceAmount]
--	  ,PLLink.LinkToOriginalInvoice --don't un-comment this line before you have a solution for duplication.
      ,[PLRes1]
      ,[PLRes2]
      ,[PLRes3]
  FROM [stage].[AXI_HQ_PurchaseLedger] PL
  where UPPER(pl.company) = 'AXHSE'
  --LEFT JOIN ( SELECT DISTINCT		--don't un-comment this line before you have a solution for duplication.
		--	PurchaseInvoiceNum AS PIM
		--	,LinkToOriginalInvoice 
		--	FROM [stage].[AXI_HQ_GeneralLedger]
		--	where PurchaseInvoiceNum IS NOT NULL ) AS PLLink	ON PLLink.PIM = PL.PurchaseInvoiceNum
GO
PRINT N'Creating [stage].[Jen_DK_StocktransactionOB]'
GO
CREATE TABLE [stage].[Jen_DK_StocktransactionOB]
(
[Company] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[TransactionCode] [nvarchar] (50) NULL,
[TransactionDescription] [nvarchar] (50) NULL,
[IssuerReceiverNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[BinNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[TransactionDate] [nvarchar] (50) NULL,
[TransactionTime] [nvarchar] (50) NULL,
[TransactionQty] [nvarchar] (50) NULL,
[TransactionValue] [nvarchar] (50) NULL,
[CostPrice] [nvarchar] (50) NULL,
[SalesUnitPrice] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[Reference] [nvarchar] (50) NULL,
[AdjustmentDate] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vJEN_DK_StockTransactionOB]'
GO
CREATE VIEW [stage].[vJEN_DK_StockTransactionOB] AS 

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', ([WarehouseCode]), '#', ([PartNum]), '#', (TransactionCode), '#', (IssuerReceiverNum)))) AS StockTransactionID
	,[Company]
	,TRIM([WarehouseCode]) AS WarehouseCode
	,TransactionCode
	,TransactionDescription
	,IIF(TRIM(IssuerReceiverNum)='', NULL,TRIM(IssuerReceiverNum)) AS IssuerReceiverNum
	,IIF(TRIM([OrderNum])='', NULL,TRIM(OrderNum)) AS OrderNum
	,OrderLine
	,IIF(TRIM([InvoiceNum])='', NULL,TRIM(InvoiceNum)) AS InvoiceNum
	,InvoiceLine
	,UPPER(TRIM([PartNum])) AS [PartNum]
	,IIF(TRIM([BinNum])='', NULL,TRIM(BinNum)) AS BinNum
	,IIF(TRIM([BatchNum])='', NULL,TRIM(BatchNum)) AS BatchNum
	,CONVERT(date, TransactionDate) AS TransactionDate
	,TransactionTime
	,IIF(TransactionQty IS NULL, 0, TRY_CONVERT(decimal(18,2), REPLACE(REPLACE(TransactionQty, ' ', ''), ',', '.'))) AS TransactionQty --TRY_CONVERT(decimal(18,0), REPLACE(TransactionQty, '.', ','))
	,IIF(TransactionValue IS NULL, 0, TRY_CONVERT(decimal(18,2), REPLACE(REPLACE(TransactionValue, ' ', ''), ',', '.'))) AS TransactionValue --TRY_CONVERT(decimal(18,2), REPLACE(TransactionValue, '.', ','))
	,IIF(TransactionQty IS NULL, 0, TRY_CONVERT(decimal(18,2), REPLACE(REPLACE(CostPrice, ' ', ''), ',', '.'))) AS [CostPrice] --TRY_CONVERT(decimal(18,2),  REPLACE([CostPrice], '.', ','))
	,IIF(SalesUnitPrice IS NULL, 0, TRY_CONVERT(decimal(18,2), REPLACE(REPLACE(SalesUnitPrice, ' ', ''), ',', '.'))) AS SalesUnitPrice --TRY_CONVERT(decimal(18,2),  REPLACE(SalesUnitPrice, '.', ','))
	,'DKK' AS Currency -- IIF(TRIM([Currency])='', NULL, TRIM(Currency)) changed 2023-05-16 SB
	,[Reference]
	,CONVERT(date, AdjustmentDate) AS AdjustmentDate
	,InternalExternal
	,'2022-10-10' AS CreateDate
	,'' AS STRes1
	,'' AS STRes2
	,'' AS STRes3

	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER([Company]))) AS CompanyID
    ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT([Company],'#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,IIF(TransactionCode in ('00'), CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([InvoiceNum])))), NULL) AS PurchaseInvoiceID
	,IIF(TransactionCode in ('00'), CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([OrderNum])))), NULL) AS PurchaseOrderNumID
	,IIF(TransactionCode in ('01'), CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([OrderNum])))), NULL) AS SalesOrderNumID
	,IIF(TransactionCode in ('01'), CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([InvoiceNum])))), NULL) AS SalesInvoiceID
	,IIF(TransactionCode in ('00'), CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM(IssuerReceiverNum)))), NULL) AS CustomerID
	,IIF(TransactionCode in ('01'), CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM(IssuerReceiverNum)))), NULL) AS SupplierID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',TRIM([Currency]))) AS CurrencyID
	,'2023-05-16 10:00' AS PartitionKey
	,'' AS IndexKey

FROM [stage].[Jen_DK_StockTransactionOB]
GO
PRINT N'Creating [dw].[PurchaseLedger]'
GO
CREATE TABLE [dw].[PurchaseLedger]
(
[PurchaseLedgerID] [binary] (32) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NOT NULL,
[PurchaseInvoiceDate] [date] NULL,
[PurchaseDueDate] [date] NULL,
[PurchaseLastPaymentDate] [date] NULL,
[InvoiceAmount] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 8) NULL,
[Currency] [nvarchar] (10) NOT NULL,
[VATAmount] [decimal] (18, 4) NULL,
[VATCode] [nvarchar] (10) NULL,
[PayToName] [nvarchar] (100) NULL,
[PayToCity] [nvarchar] (50) NULL,
[PayToContact] [nvarchar] (50) NULL,
[PaymentTerms] [nvarchar] (100) NULL,
[PrePaymentNum] [nvarchar] (50) NULL,
[LastPaymentNum] [nvarchar] (50) NULL,
[PLRes1] [nvarchar] (100) NULL,
[PLRes2] [nvarchar] (100) NULL,
[PLRes3] [nvarchar] (100) NULL,
[PurchaseLedgerCode] [nvarchar] (500) NULL,
[CompanyID] [binary] (32) NULL,
[SupplierID] [binary] (32) NULL,
[PurchaseInvoiceID] [binary] (32) NULL,
[PurchaseOrderNumID] [binary] (32) NULL,
[CurrencyID] [binary] (32) NULL,
[PurchaseInvoiceDateID] [nvarchar] (50) NULL,
[PartitionKey] [varchar] (50) NOT NULL,
[PaidInvoiceAmount] [decimal] (18, 4) NULL,
[AccountingDate] [date] NULL,
[AgingPeriod] [nvarchar] (50) NULL,
[VATCodeDesc] [nvarchar] (300) NULL,
[RemainingInvoiceAmount] [decimal] (18, 4) NULL,
[AgingSort] [int] NULL,
[LinkToOriginalInvoice] [nvarchar] (500) NULL,
[is_deleted] [bit] NULL,
[SupplierInvoiceNum] [nvarchar] (50) NULL,
[IsInvoiceClosed] [bit] NULL,
[CostUnitNum] [nvarchar] (50) NULL,
[PaymentEvents] [int] NULL,
[IsActiveRecord] [bit] NULL
)
GO
PRINT N'Creating primary key [PK_PurchaseLedger] on [dw].[PurchaseLedger]'
GO
ALTER TABLE [dw].[PurchaseLedger] ADD CONSTRAINT [PK_PurchaseLedger] PRIMARY KEY CLUSTERED ([PurchaseLedgerID])
GO
PRINT N'Creating index [IX_Company_PurchaseDueDate] on [dw].[PurchaseLedger]'
GO
CREATE NONCLUSTERED INDEX [IX_Company_PurchaseDueDate] ON [dw].[PurchaseLedger] ([Company], [PurchaseDueDate] DESC)
GO
PRINT N'Creating index [IX_Company_PurchaseInvoiceDate] on [dw].[PurchaseLedger]'
GO
CREATE NONCLUSTERED INDEX [IX_Company_PurchaseInvoiceDate] ON [dw].[PurchaseLedger] ([Company], [PurchaseInvoiceDate] DESC)
GO
PRINT N'Creating [dm].[FactPurchaseLedger]'
GO





/****** Script for SelectTopNRows command from SSMS  ******/
CREATE VIEW [dm].[FactPurchaseLedger] AS
SELECT CONVERT(bigint, [PurchaseLedgerID]) AS PurchaseLedgerID
      ,[Company]
      ,[SupplierNum]
      ,[PurchaseOrderNum]
      ,[PurchaseInvoiceNum]
      ,[PurchaseInvoiceDate]
      ,[PurchaseDueDate]
      ,[PurchaseLastPaymentDate]
      ,[InvoiceAmount]
      ,[ExchangeRate]
      ,[Currency]
      ,[VATAmount]
      ,[VATCode]
      ,[PayToName]
      ,[PayToCity]
      ,[PayToContact]
      ,[PaymentTerms]
      ,[PrePaymentNum]
      ,[LastPaymentNum]
      ,[PLRes1]
      ,[PLRes2]
      ,[PLRes3]
      ,[PurchaseLedgerCode]
      ,CONVERT(bigint, [CompanyID]) AS CompanyID
      ,CONVERT(bigint, [SupplierID])	AS SupplierID
      ,CONVERT(bigint, [PurchaseInvoiceID])	AS PurchaseInvoiceID
      ,CONVERT(bigint, [PurchaseOrderNumID])	AS PurchaseOrderNumID
      ,CONVERT(bigint, [CurrencyID])	AS CurrencyID
      ,[PurchaseInvoiceDateID]
      ,[PartitionKey]
      ,[PaidInvoiceAmount]
	  ,[RemainingInvoiceAmount]
      ,[AccountingDate]
      ,CASE WHEN [RemainingInvoiceAmount] <> 0 AND DATEDIFF(DAY, [PurchaseDueDate], GETDATE())< -7 THEN 'Not Due Yet'
	WHEN [RemainingInvoiceAmount] <> 0 AND DATEDIFF(DAY, [PurchaseDueDate], GETDATE()) BETWEEN -7 AND 0 THEN 'Due in (0-7)'
	WHEN [RemainingInvoiceAmount] <> 0 AND DATEDIFF(DAY, [PurchaseDueDate], GETDATE())BETWEEN 1 AND 14 THEN 'Overdue (1-14)'
	WHEN [RemainingInvoiceAmount] <> 0 AND DATEDIFF(DAY, [PurchaseDueDate], GETDATE())BETWEEN 15 AND 30 THEN 'Overdue (15-30)'
	WHEN [RemainingInvoiceAmount] <> 0 AND DATEDIFF(DAY, [PurchaseDueDate], GETDATE())BETWEEN 31 AND 60 THEN 'Overdue (31-60)'
	WHEN [RemainingInvoiceAmount] <> 0 AND DATEDIFF(DAY, [PurchaseDueDate], GETDATE())> 60 THEN 'Overdue (60>)'
	WHEN [RemainingInvoiceAmount] = 0 THEN 'Settled'
	ELSE '' END AS [AgingPeriod]
	,CASE WHEN [RemainingInvoiceAmount] = 0 THEN 0
	WHEN [RemainingInvoiceAmount] <> 0 AND DATEDIFF(DAY, [PurchaseDueDate], GETDATE())<-7 THEN 1
	WHEN [RemainingInvoiceAmount] <> 0 AND DATEDIFF(DAY, [PurchaseDueDate], GETDATE())BETWEEN -7 AND 0 THEN 2
	WHEN [RemainingInvoiceAmount] <> 0 AND DATEDIFF(DAY, [PurchaseDueDate], GETDATE())BETWEEN 1 AND 14 THEN 3
	WHEN [RemainingInvoiceAmount] <> 0 AND DATEDIFF(DAY, [PurchaseDueDate], GETDATE())BETWEEN 15 AND 30 THEN 4
	WHEN [RemainingInvoiceAmount] <> 0 AND DATEDIFF(DAY, [PurchaseDueDate], GETDATE())BETWEEN 31 AND 60 THEN 5
	WHEN [RemainingInvoiceAmount] <> 0 AND DATEDIFF(DAY, [PurchaseDueDate], GETDATE())>'60' THEN 6
	ELSE 7 END AS [AgingSort]
      ,[VATCodeDesc]
	  ,LinkToOriginalInvoice
  FROM [dw].[PurchaseLedger]
GO
PRINT N'Creating [dm_IN].[fctPurchaseLedger]'
GO

CREATE VIEW [dm_IN].[fctPurchaseLedger] AS
SELECT
 pl.[PurchaseLedgerID]
,pl.[Company]
,pl.[SupplierNum]
,pl.[PurchaseOrderNum]
,pl.[PurchaseInvoiceNum]
,pl.[PurchaseInvoiceDate]
,pl.[PurchaseDueDate]
,pl.[PurchaseLastPaymentDate]
,pl.[InvoiceAmount]
,pl.[ExchangeRate]
,pl.[Currency]
,pl.[VATAmount]
,pl.[VATCode]
,pl.[PayToName]
,pl.[PayToCity]
,pl.[PayToContact]
,pl.[PaymentTerms]
,pl.[PrePaymentNum]
,pl.[LastPaymentNum]
,pl.[PLRes1]
,pl.[PLRes2]
,pl.[PLRes3]
,pl.[PurchaseLedgerCode]
,pl.[CompanyID]
,pl.[SupplierID]
,pl.[PurchaseInvoiceID]
,pl.[PurchaseOrderNumID]
,pl.[CurrencyID]
,pl.[PurchaseInvoiceDateID]
,pl.[PartitionKey]
,pl.[PaidInvoiceAmount]
,pl.[RemainingInvoiceAmount]
,pl.[AccountingDate]
,pl.[AgingPeriod]
,pl.[AgingSort]
,pl.[VATCodeDesc]
,pl.[LinkToOriginalInvoice]
FROM [dm].[FactPurchaseLedger] pl
LEFT JOIN dbo.Company com ON pl.Company = com.Company
WHERE com.BusinessArea = 'Industrial Solutions' AND com.[Status] = 'Active'
GO
PRINT N'Creating [stage].[JEN_DK_PurchaseInvoice]'
GO
CREATE TABLE [stage].[JEN_DK_PurchaseInvoice]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaserName] [nvarchar] (100) NULL,
[OrderType] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[InvoiceType] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[PurchaseInvoiceQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CreditMemo] [nvarchar] (1) NULL,
[WarehouseCode] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vJEN_DK_PurchaseInvoice]'
GO
CREATE VIEW [stage].[vJEN_DK_PurchaseInvoice] AS
--COMMENT EMPTY FIELD // ADD TRIM() INTO PatID,WarehouseID 22-12-29 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(OrderType), '#', TRIM(InvoiceNum), '#', TRIM(InvoiceType), '#', TRIM(WarehouseCode))))) AS PurchaseInvoiceID --'#', OrderType
	,UPPER(CONCAT(Company, '#', TRIM(InvoiceNum))) AS PurchaseInvoiceCode --Redundant?
	,UPPER(CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(PurchaseOrderNum))) AS PurchaseOrderCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(InvoiceNum))))) AS PurchaseOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierCode))))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierCode))))) AS SupplierID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(WarehouseCode))))) AS WareHouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WareHouseID
	,CONVERT(int, replace(InvoiceDate,'-','')) AS PurchaseInvoiceDateID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(InvoiceNum))))) AS PurchaseLedgerID
	,PartitionKey

	,TRIM(UPPER(Company)) AS Company
	,TRIM(PurchaseOrderNum) AS PurchaseOrderNum
	,TRIM(PurchaseOrderLine) AS PurchaseOrderLine
	,TRIM(PurchaseOrderSubLine) AS PurchaseOrderSubLine
	,TRIM(OrderType) AS PurchaseOrderType
	,TRIM(InvoiceNum) AS PurchaseInvoiceNum
	,TRIM(InvoiceLine) AS PurchaseInvoiceLine
	,TRIM(InvoiceType) AS PurchaseInvoiceType
	,InvoiceDate AS PurchaseInvoiceDate
	,MAX(ActualDeliveryDate) AS ActualDelivDate
	,TRIM(SupplierCode) AS SupplierNum
	,TRIM(PartNum) AS PartNum
	,SUM(PurchaseInvoiceQty) AS PurchaseInvoiceQty
	--,'' AS UoM
	,AVG(UnitPrice) AS UnitPrice
	--,0 AS DiscounPurchaseInvoiceQtytPercent
	,SUM(DiscountAmount) AS DiscountAmount
	,SUM(TotalMiscChrg) AS TotalMiscChrg
	--,0 AS VATAmount
	,AVG(ExchangeRate) AS ExchangeRate
	,TRIM(CurrencyCode) AS Currency
	,TRIM(CreditMemo) AS CreditMemo
	,TRIM(PurchaserName) AS PurchaserName
	,TRIM(WarehouseCode) AS WarehouseCode
	--,'' AS PurchaseChannel
	--,'' AS Comment
	--,'' AS PIRes1
	--,'' AS PIRes2
	--,'' AS PIRes3
	--,'' AS LineType
	--,'' AS OrderDelivLineNum
FROM stage.JEN_DK_PurchaseInvoice

GROUP BY
	PartitionKey, Company, PurchaseOrderNum, InvoiceNum, SupplierCode, PartNum, PurchaseOrderLine, PurchaseOrderSubLine, PurchaserName, InvoiceLine, InvoiceType, InvoiceDate, CreditMemo, WarehouseCode, CurrencyCode, OrderType --,LineType --
GO
PRINT N'Creating [stage].[NOM_FI_SOLine]'
GO
CREATE TABLE [stage].[NOM_FI_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (100) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[PartClass] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (10) NULL,
[PartNum] [nvarchar] (50) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Indexkey] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[UpdateStock] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vNOM_FI_SOLine]'
GO








CREATE VIEW [stage].[vNOM_FI_SOLine] AS
-- NomoFI data occasionally has duplicate rows due to "illegal price posts", meaning a part will get two prices for the same day/duration creating duplicate rows.
-- Not including UnitPrice in PK will result in merge error and no daily data is loaded.
-- Including UnitPrice in PK will result in about the double Order Amount for affected orders
-- This method wi
WITH CTE AS (
SELECT 
	--CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(InvoiceNum),'#',TRIM(InvoiceLine)))) AS SalesOrderID
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(PartNum), '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine))))) AS SalesInvoiceID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(OrderNum),'#',TRIM(OrderLine),'#',TRIM(InvoiceNum))))) AS SalesOrderID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustNum), '#', TRIM(InvoiceNum))))) AS SalesLedgerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(OrderNum))))) AS SalesOrderNumID  
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID 
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(OrderNum),'#',TRIM(OrderLine))) AS SalesOrderCode 
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(InvoiceNum))))) AS SalesInvoiceNumID --Redundant?
	,CONVERT(int, replace(convert(date,InvoiceDate),'-','')) AS SalesInvoiceDateID										--Redundant?
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(InvoiceNum),'#',TRIM(InvoiceLine))) AS SalesInvoiceCode						--Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey

	,UPPER(TRIM(Company)) AS Company
	,SalesPerson AS SalesPersonName
	,UPPER(TRIM(CustNum)) AS CustomerNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,CASE WHEN TRIM(OrderNum) = '0' THEN 'PrimaryPart' ELSE 'SubPart' END  AS PartType
	,UPPER(TRIM(OrderNum)) AS SalesOrderNum
	,UPPER(TRIM(OrderLine)) AS SalesOrderLine
	,UPPER(TRIM(OrderSubLine)) AS SalesOrderSubLine-- '0' as OrderSubLine
	,OrderType AS SalesOrderType
	,InvoiceNum AS SalesInvoiceNum
	,UPPER(TRIM(InvoiceLine)) AS SalesInvoiceLine
	,'' AS SalesInvoiceType
	,CONVERT(date, InvoiceDate) AS SalesInvoiceDate
	,CONVERT(date, ActualDeliveryDate) AS ActualDelivDate
	,CASE WHEN CreditMemo = '1' THEN -1*ABS(SellingShipQty)
--		WHEN UnitCost = 0 THEN 0 
		ELSE SellingShipQty END AS SalesInvoiceQty
	,ABS(UnitPrice) AS UnitPrice 
	,ABS(UnitCost) AS UnitCost 
	,'' AS UoM
	,0 AS DiscountPercent
	,DiscountAmount --CASE WHEN UnitPrice < 0 THEN ABS(DiscountAmount) ELSE -1*ABS(DiscountAmount) END AS 
	,0 AS CashDiscountOffered
	,0 AS CashDiscountUsed
	,TotalMiscChrg
	,0 AS VATAmount
	,Currency
	,ExchangeRate
	,CreditMemo
	,SalesChannel
	,UpdateStock AS IsUpdatingStock
	,'' AS Department
	,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
	,NULL AS DeliveryAddress
	,'' AS CostBearerNum
	,'' AS CostUnitNum
	,'' AS ReturnComment
	,'' AS ReturnNum
	,TRIM(PartClass) AS ProjectNum
	,MAX(Indexkey) AS IndexKey
	,'' AS SIRes1
	,'' AS SIRes2
	,'' AS SIRes3
	,ROW_NUMBER() OVER (PARTITION BY Company,CustNum,OrderNum,PartNum,InvoiceNum,InvoiceLine ORDER BY UnitPrice) AS RowNum
FROM 
	stage.NOM_FI_SOLine AS SO
GROUP BY
	PartitionKey, Company, CustNum, OrderNum, OrderLine, OrderSubLine, OrderType, InvoiceNum, InvoiceLine, InvoiceDate, SellingShipQty, UnitPrice, UnitCost, Currency, ExchangeRate, TotalMiscChrg, DiscountAmount,PartNum, SalesPerson,  WarehouseCode, CreditMemo, SalesChannel, UpdateStock, PartClass, ActualDeliveryDate
)

SELECT [SalesInvoiceID], [SalesOrderID], [SalesLedgerID], [SalesOrderNumID], [CompanyID], [CustomerID], [PartID], [WarehouseID], [SalesOrderCode], [SalesInvoiceNumID], [SalesInvoiceDateID], [SalesInvoiceCode], [ProjectID], [PartitionKey], [Company], [SalesPersonName], [CustomerNum], [PartNum], [PartType], [SalesOrderNum], [SalesOrderLine], [SalesOrderSubLine], [SalesOrderType], [SalesInvoiceNum], [SalesInvoiceLine], [SalesInvoiceType], [SalesInvoiceDate], [ActualDelivDate], [SalesInvoiceQty], [UnitPrice], [UnitCost], [UoM], [DiscountPercent], [DiscountAmount], [CashDiscountOffered], [CashDiscountUsed], [TotalMiscChrg], [VATAmount], [Currency], [ExchangeRate], [CreditMemo], [SalesChannel], [IsUpdatingStock], [Department], [WarehouseCode], [DeliveryAddress], [CostBearerNum], [CostUnitNum], [ReturnComment], [ReturnNum], [ProjectNum], [IndexKey], [SIRes1], [SIRes2], [SIRes3], [RowNum]
FROM CTE
WHERE RowNum = 1
GO
PRINT N'Creating [stage].[NOM_FI_CustomerAgreement]'
GO
CREATE TABLE [stage].[NOM_FI_CustomerAgreement]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[AgreementCode] [nvarchar] (50) NULL,
[AgreementDescription] [nvarchar] (50) NULL,
[DiscountPercent] [nvarchar] (50) NULL,
[UnitPrice] [nvarchar] (50) NULL,
[UoM] [nvarchar] (50) NULL,
[AgreementQty] [nvarchar] (50) NULL,
[DelivTime] [nvarchar] (50) NULL,
[Currency] [nvarchar] (10) NULL,
[CustomerTerms] [nvarchar] (100) NULL,
[AgreementStart] [date] NULL,
[AgreementEnd] [date] NULL,
[CARes1] [nvarchar] (100) NULL,
[CARes2] [nvarchar] (100) NULL,
[CARes3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vNOM_FI_CustomerAgreement]'
GO
CREATE VIEW [stage].[vNOM_FI_CustomerAgreement] AS 
--COMMENT EMPTY FIELDS 2022-12-15 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM(AgreementCode),'#',TRIM([PartNum]),'#',TRIM(CustomerNum),'#',AgreementStart)))) AS CustomerAgreementID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID  
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM([Currency])))) AS CurrencyID
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM(CustomerNum)) AS CustomerNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,AgreementCode
	,AgreementDescription
	--,NULL AS DiscountPercent
	,CONVERT(decimal(18,4), [UnitPrice]) AS [UnitPrice]
	,AgreementQty
	,UPPER(TRIM([Currency])) AS Currency
	,[DelivTime]
	,AgreementStart
	,AgreementEnd
	,CustomerTerms
	--,0	AS FulfilledQty
	--,0  AS RemainingQty
	--,''	AS UoM
	--,'' AS CARes1
	--,'' AS CARes2
	--,'' AS CARes3
FROM 
	[stage].[NOM_FI_CustomerAgreement]
GROUP BY [PartitionKey], [Company], AgreementCode, AgreementDescription, [Currency], [PartNum], [DelivTime], AgreementStart, AgreementEnd, CustomerTerms, [UnitPrice], CustomerNum, AgreementQty
GO
PRINT N'Creating [stage].[FOR_SE_StockBalance]'
GO
CREATE TABLE [stage].[FOR_SE_StockBalance]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PartNum] [nvarchar] (70) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[StockBalance] [decimal] (18, 4) NULL,
[ReservedQty] [decimal] (18, 4) NULL,
[BackOrderQty] [decimal] (18, 4) NULL,
[QtyOrdered] [decimal] (18, 4) NULL,
[OptimalOrderQty] [decimal] (18, 4) NULL,
[ReOrderLevel] [decimal] (18, 4) NULL,
[StockTakDiff] [decimal] (18, 4) NULL,
[SafetyStock] [decimal] (18, 4) NULL,
[DelivTimeToWHS] [int] NULL,
[DefaultBinNo] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[StockTakDate] [date] NULL,
[DelivDateSupplier] [date] NULL,
[DelivDateCust] [date] NULL,
[BatchNoPrefix] [nvarchar] (50) NULL,
[BatchNoSuffix] [nvarchar] (50) NULL,
[BatchNumber] [nvarchar] (50) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[BatchQty] [decimal] (18, 4) NULL,
[MaxStockQty] [decimal] (18, 4) NULL,
[CostPrice] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vFOR_SE_StockBalance]'
GO
CREATE VIEW [stage].[vFOR_SE_StockBalance] AS
--COMMENT EMPTY FIELD 2022-12-20 VA
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]),'#',TRIM([WarehouseCode]),'#',TRIM(BatchNumber),'#',[StockTakDate])))) AS ItemWarehouseID
	,UPPER(CONCAT([Company],'#',TRIM([PartNum]),'#',TRIM([WarehouseCode]))) AS ItemWarehouseCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID -- var '0000000'
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	,[PartitionKey]
	,UPPER(TRIM([WarehouseCode])) AS WarehouseCode
	,CurrencyCode AS Currency
	,UPPER(TRIM([Company])) AS Company
	,DefaultBinNo AS BinNum
	,BatchNumber AS BatchNum
	,UPPER(TRIM([SupplierNum])) AS SupplierNum
	,UPPER(TRIM([PartNum])) AS PartNum
	--,0 AS [DelivTime]
	,convert(date, [StockTakDate]) AS LastStockTakeDate
	,'' AS LastStdCostCalDate
	,SafetyStock
	,MaxStockQty
	,[StockBalance]
	--,0 AS StockValue
	,CostPrice AS AvgCost
	,[ReservedQty] AS ReserveQty
	,[BackOrderQty] AS BackOrderQty
	,[QtyOrdered] AS OrderQty
	,[StockTakDiff] AS StockTakeDiff
	,[ReOrderLevel]
	--,0 AS [OptimalOrderQty]
	--,'' AS SBRes1
	--,'' AS SBRes2
	--,'' AS SBRes3


	,0 AS [FIFOValue]
	,'' AS [DelivTimeToWHS]-- will not be sent out to new companies, not delete in DW for that use as reservation
	,'' AS [DelivTimeDesc]-- will not be sent out to new companies, not delete in DW for that use as reservation
	,'' AS [DaysOnStock]
	,DelivDateSupplier
	,DelivDateCust
	,convert(date, '') AS OrderDateSupplier
	,convert(date, '') AS OrderDateCust
	,BatchNumber
	,'' AS BatchNoPrefix-- will not be sent out to new companies, not delete in DW for that use as reservation
	,'' AS BatchNoSuffix-- will not be sent out to new companies, not delete in DW for that use as reservation
	
	
FROM 
	[stage].[FOR_SE_StockBalance]
GROUP BY [PartitionKey], [Company], [PartNum], [WarehouseCode], [StockBalance], [ReservedQty], [BackOrderQty], [QtyOrdered], [StockTakDiff], [ReOrderLevel], CostPrice, DefaultBinNo, [SupplierNum], [StockTakDate], BatchNumber, MaxStockQty, CurrencyCode, DelivDateSupplier, DelivDateCust, SafetyStock --re-introduced GROUP BY 20210928, otherwise many duplications, should check the source query JOINS. /DZ
GO
PRINT N'Creating [stage].[WID_FI_Supplier]'
GO
CREATE TABLE [stage].[WID_FI_Supplier]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[Name] [nvarchar] (100) NULL,
[Addressline1] [nvarchar] (100) NULL,
[Addressline2] [nvarchar] (100) NULL,
[Addressline3] [nvarchar] (100) NULL,
[City] [nvarchar] (50) NULL,
[ZIP] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (100) NULL,
[Region] [nvarchar] (50) NULL,
[SupplierCategory] [nvarchar] (100) NULL,
[Reference] [nvarchar] (100) NULL,
[BankAccountNum] [nvarchar] (50) NULL,
[VATNum] [nvarchar] (50) NULL,
[OrganizationNum] [nvarchar] (100) NULL,
[ABCCode] [nvarchar] (50) NULL,
[CustomerCode] [nvarchar] (50) NULL,
[TelephoneNum] [nvarchar] (50) NULL,
[Email] [nvarchar] (200) NULL,
[CodeOfConduct] [nvarchar] (500) NULL,
[MinOrderQty] [int] NULL,
[InternalName] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [dbo].[CountryCodes]'
GO
CREATE TABLE [dbo].[CountryCodes]
(
[CountryName] [nvarchar] (100) NOT NULL,
[Alpha-2 code] [char] (2) NULL,
[Alpha-3 code] [char] (3) NULL,
[ISO Numeric code] [int] NULL,
[WorldBase-2 code] [char] (2) NULL,
[WorldBase Numeric Code] [int] NULL,
[WorldBase CountryName] [nvarchar] (100) NULL,
[Comments] [nvarchar] (200) NULL
)
GO
PRINT N'Creating [stage].[vWID_FI_Supplier]'
GO
CREATE VIEW [stage].[vWID_FI_Supplier] AS
--ADD TRIM() UPPER()INTO SupplierID 23-01-24 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([SupplierNum]))))) AS SupplierID
--	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', TRIM([SupplierNum])))) AS SupplierID
    ,CONCAT([Company], '#', TRIM([SupplierNum])) AS SupplierCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [Company])) AS CompanyID
	,[PartitionKey]
	,[Company]
	,TRIM([SupplierNum]) AS [SupplierNum]
	,TRIM([Name]) AS SupplierName
	--,'' AS [MainSupplierName]
	,[AddressLine1]
    ,[AddressLine2]
    ,IIF([AddressLine3] = '', [AddressLine2], [AddressLine3]) AS [AddressLine3]
	,[TelephoneNum]
	,[Email]
	,IIF(supplier.CountryName = 'FINLAND', TRIM(substring(REPLACE(IIF([AddressLine3] = '', [AddressLine2], [AddressLine3]),' ', ''), 0, 6)), NULL) AS [ZipCode]
	,TRIM(substring(REPLACE(IIF(IIF([AddressLine3] = '', [AddressLine2], [AddressLine3]) = '', [AddressLine2], IIF([AddressLine3] = '', [AddressLine2], [AddressLine3])),' ', ''), 6, 100)) AS [City]
	--,'' AS [District]
	,CASE WHEN LEN(TRIM(CountryCode)) = 3 THEN cc.[Alpha-2 code]
	ELSE TRIM(CountryCode)
	END AS CountryCode
	,supplier.CountryName
	--,'' AS [Region]
	,[SupplierCategory]
	,[Reference] AS [SupplierResponsible]
	,TRIM(concat(IIF([AddressLine3] = '', [AddressLine2], [AddressLine3]) + ', ' + addressline1, NULL)) AS AddressLine
	,TRIM(concat_ws(', ', supplier.CountryName, addressline2, IIF([AddressLine3] = '', [AddressLine2], [AddressLine3]))) AS FullAddressLine
	,BankAccountNum AS [AccountNum] --required by Ian M & approved by Emil T on 20200630 -- HASHBYTES('SHA2_256', [BankAccountNum]) AS 
	,[VATNum]
	,OrganizationNum
	,[ABCCode] AS [SupplierScore]
	,[CustomerCode] AS CustomerNum
	--,'' AS [Website]
	,[CodeOfConduct]
	,[MinOrderQty]
	,NULL AS [MinOrderValue]
	--,'' AS [InternalExternal]
	--,'' AS [Comments]
	--,'' AS [SRes1]
	--,'' AS [SRes2]
	--,'' AS [SRes3]
FROM [stage].[WID_FI_Supplier] as supplier
	left join dbo.CountryCodes as cc
		on TRIM(supplier.CountryCode) = cc.[Alpha-3 code]
GO
PRINT N'Creating [dw].[StockTransaction]'
GO
CREATE TABLE [dw].[StockTransaction]
(
[StockTransactionID] [binary] (32) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[TransactionCode] [nvarchar] (50) NULL,
[TransactionDescription] [nvarchar] (max) NULL,
[IssuerReceiverNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NOT NULL,
[BinNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[TransactionDate] [date] NULL,
[TransactionTime] [nvarchar] (10) NULL,
[TransactionQty] [decimal] (18, 4) NULL,
[TransactionValue] [decimal] (18, 4) NULL,
[CostPrice] [decimal] (18, 4) NULL,
[SalesUnitPrice] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (10) NULL,
[Reference] [nvarchar] (50) NULL,
[AdjustmentDate] [date] NULL,
[STRes1] [nvarchar] (100) NULL,
[STRes2] [nvarchar] (100) NULL,
[STRes3] [nvarchar] (100) NULL,
[CompanyID] [binary] (32) NULL,
[PartID] [binary] (32) NULL,
[WarehouseID] [binary] (32) NULL,
[PurchaseInvoiceID] [binary] (32) NULL,
[PurchaseOrderNumID] [binary] (32) NULL,
[SalesOrderNumID] [binary] (32) NULL,
[SalesInvoiceID] [binary] (32) NULL,
[CustomerID] [binary] (32) NULL,
[SupplierID] [binary] (32) NULL,
[CurrencyID] [binary] (32) NULL,
[PartitionKey] [nvarchar] (50) NOT NULL,
[IndexKey] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[is_deleted] [bit] NULL,
[IsInternalTransaction] [bit] NULL,
[CustomerNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[SalesOrderNum] [nvarchar] (50) NULL,
[SalesOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[SalesInvoiceNum] [nvarchar] (50) NULL,
[SalesInvoiceLine] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[PurchaseInvoiceLine] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[IsActiveRecord] [bit] NULL
)
GO
PRINT N'Creating primary key [PK_StockTransaction] on [dw].[StockTransaction]'
GO
ALTER TABLE [dw].[StockTransaction] ADD CONSTRAINT [PK_StockTransaction] PRIMARY KEY CLUSTERED ([StockTransactionID])
GO
PRINT N'Creating index [nci_wi_Company] on [dw].[StockTransaction]'
GO
CREATE NONCLUSTERED INDEX [nci_wi_Company] ON [dw].[StockTransaction] ([Company])
GO
PRINT N'Creating index [IX_Company_TransactionDate] on [dw].[StockTransaction]'
GO
CREATE NONCLUSTERED INDEX [IX_Company_TransactionDate] ON [dw].[StockTransaction] ([Company], [TransactionDate] DESC)
GO
PRINT N'Creating index [nci_wi_StockTransaction] on [dw].[StockTransaction]'
GO
CREATE NONCLUSTERED INDEX [nci_wi_StockTransaction] ON [dw].[StockTransaction] ([PartitionKey])
GO
PRINT N'Creating [dm].[FactStockTransaction]'
GO

CREATE VIEW [dm].[FactStockTransaction] AS

SELECT 
	CONVERT(bigint, StockTransactionID) AS StockTransactionID
    ,CONVERT(bigint, CompanyID ) AS CompanyID
    ,CONVERT(bigint, PartID ) AS PartID
    ,CONVERT(bigint, WarehouseID ) AS WarehouseID
	,CONVERT(bigint, CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM(Currency))) ) AS CurrencyID
	,CONVERT(int, replace(CONVERT(date, [TransactionDate]), '-', '')) AS TransactionDateID
	,IIF(([TransactionDescription] = 'Incoming goods' OR [TransactionDescription] =  'Incomming Goods' OR [TransactionDescription] =  'purchase'), CONVERT(bigint, SupplierID ), NULL) AS SupplierID
	,IIF(([TransactionDescription] = 'Incoming goods' OR [TransactionDescription] =  'Incomming Goods' OR [TransactionDescription] =  'purchase'), CONVERT(bigint, PurchaseOrderNumID ), NULL) AS PurchaseOrderNumID
	,IIF(([TransactionDescription] = 'Incoming goods' OR [TransactionDescription] =  'Incomming Goods' OR [TransactionDescription] =  'purchase'), CONVERT(bigint, PurchaseInvoiceID ), NULL) AS PurchaseInvoiceID
	,IIF([TransactionDescription] = 'Outgoing goods' OR [TransactionDescription] = 'Sales', CONVERT(bigint, CustomerID ), NULL) AS CustomerID
	,IIF([TransactionDescription] = 'Outgoing goods' OR [TransactionDescription] = 'Sales', CONVERT(bigint, SalesOrderNumID ), NULL) AS SalesOrderNumID
	,IIF([TransactionDescription] = 'Outgoing goods' OR [TransactionDescription] = 'Sales', CONVERT(bigint, SalesInvoiceID ), NULL) AS SalesInvoiceID
	,CONCAT(Right(Year([TransactionDate]), 2), RIGHT(CONCAT('0', Month( [TransactionDate]) ),2), '-', Currency) AS CurrencyMonthKey

	,[Company]
	,[WarehouseCode]
	,[TransactionCode]
	,[TransactionDescription]
	,[IssuerReceiverNum]
	,IIF(Company = 'ACZARKOV', STRes3, '') AS IssuerReceiverName
	,[OrderNum]
	,[OrderLine]
	,[InvoiceNum]
	,[InvoiceLine]
	,[PartNum]
	,[BinNum]
	,[BatchNum]
	,[TransactionDate]
	,[TransactionTime]
	,[TransactionQty]
	,[TransactionValue]
	,[CostPrice]
	,[SalesUnitPrice]
	,[Currency]
	,[Reference]
	,[AdjustmentDate]
	,[IndexKey]
	,[InternalExternal]
FROM 
	[dw].[StockTransaction] st
--WHERE [TransactionDate] >= DATEADD(year, DATEDIFF(YEAR, 0, dateadd(year, - 5, GETDATE())), 0)
GO
PRINT N'Creating [dm_IN].[fctStockTransaction]'
GO

CREATE VIEW [dm_IN].[fctStockTransaction] AS

SELECT 
 st.[StockTransactionID]
,st.[CompanyID]
,st.[PartID]
,st.[WarehouseID]
,st.[CurrencyID]
,st.[TransactionDateID]
,st.[SupplierID]
,st.[PurchaseOrderNumID]
,st.[PurchaseInvoiceID]
,st.[CustomerID]
,st.[SalesOrderNumID]
,st.[SalesInvoiceID]
,st.[CurrencyMonthKey]
,st.[Company]
,st.[WarehouseCode]
,st.[TransactionCode]
,st.[TransactionDescription]
,st.[IssuerReceiverNum]
,st.[IssuerReceiverName]
,st.[OrderNum]
,st.[OrderLine]
,st.[InvoiceNum]
,st.[InvoiceLine]
,st.[PartNum]
,st.[BinNum]
,st.[BatchNum]
,st.[TransactionDate]
,st.[TransactionTime]
,st.[TransactionQty]
,st.[TransactionValue]
,st.[CostPrice]
,st.[SalesUnitPrice]
,st.[Currency]
,st.[Reference]
,st.[AdjustmentDate]
,st.[IndexKey]
,st.[InternalExternal]

FROM dm.FactStockTransaction st
LEFT JOIN dbo.Company com ON st.Company = com.Company
WHERE com.BusinessArea = 'Industrial Solutions' AND com.[Status] = 'Active'
GO
PRINT N'Creating [stage].[AXL_SF_SOLine]'
GO
CREATE TABLE [stage].[AXL_SF_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[InvoiceType] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (22, 8) NULL,
[UnitCost] [decimal] (22, 8) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[VAT] [decimal] (18, 4) NULL,
[CashDiscountOffered] [decimal] (18, 4) NULL,
[CashDiscountUsed] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OrderType] [nvarchar] (50) NULL,
[SalesChannel] [varchar] (10) NULL,
[BusinessChain] [varchar] (10) NULL,
[Res1] [varchar] (100) NULL,
[Res2] [varchar] (100) NULL,
[Res3] [varchar] (100) NULL,
[PartDesc] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[vAXL_SF_SOLine]'
GO
CREATE VIEW [stage].[vAXL_SF_SOLine] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine), '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(PartNum), '#', TRIM(PartDesc))))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(PartDesc))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(InvoiceNum))))) AS SalesLedgerID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum), '#', (IIF(TRIM([PartNum]) LIKE 'IACO%' , 'MISC. CHARGES', TRIM([PartDesc]))))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT(int, IIF(InvoiceDate = '', 19900101, replace(convert(date, InvoiceDate), '-', ''))) AS SalesInvoiceDateID
	,UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine))) AS SalesInvoiceCode
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine))) AS SalesOrderCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(SalesPerson) AS SalesPersonName
	,TRIM(CustNum) AS [CustomerNum]
	,TRIM(PartNum) AS PartNum
	,UPPER(PartDesc) AS PartDesc
	,'' AS [PartType]
	,TRIM(OrderNum) AS [SalesOrderNum]
	,CAST(OrderLine AS text) AS [SalesOrderLine]
	,TRIM(OrderSubLine) AS [SalesOrderSubLine]
	,TRIM(OrderType) AS [SalesOrderType]
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,TRIM(InvoiceLine) AS [SalesInvoiceLine]
	,TRIM(InvoiceType) AS [SalesInvoiceType]
	,CASE WHEN InvoiceDate = '' THEN '1900-01-01' ELSE CONVERT(date, InvoiceDate) END AS [SalesInvoiceDate]
	,ActualDeliveryDate AS [ActualDelivDate]
	,SellingShipQty AS [SalesInvoiceQty]
	,TRIM(Unit) AS [UoM]
	,UnitPrice
	,UnitCost
	,DiscountAmount
	,IIF(UnitPrice*SellingShipQty = 0, 0, DiscountAmount/UnitPrice*SellingShipQty) AS DiscountPercent
	,CONVERT(decimal(18,4), CashDiscountOffered) AS [CashDiscOffered] 
	,CONVERT(decimal(18,4), CashDiscountUsed) AS [CashDiscUsed] 
	,TotalMiscChrg
	,VAT AS [VATAmount]
	,Currency
	,ExchangeRate
	,TRIM(CreditMemo) AS CreditMemo
	,TRIM([SalesChannel]) AS [SalesChannel]
	,TRIM([BusinessChain]) AS [Department]
	,TRIM(WarehouseCode) AS WarehouseCode
	,NULL AS [CostBearerNum]
	,NULL AS [CostUnitNum]
	,NULL AS [ReturnComment]
	,NULL AS [ReturnNum]
	,NULL AS [ProjectNum]
	,'' AS [IndexKey]
	,Res1 AS SIRes1
	,Res2 AS SIRes2
	,Res3 AS SIRes3
FROM stage.AXL_SF_SOLine


	--,CASE WHEN OrderType = 'MD' THEN 1 
	--		WHEN OrderType = 'MT' THEN 2
	--		WHEN OrderType = 'MR' THEN 3
	--		WHEN OrderType = 'IV' THEN 4
	--		WHEN OrderType = 'Misc. Charges' THEN 5 --added after Ulf changes in the night /DZ
	--	ELSE OrderType END AS [SalesOrderType]

--GROUP BY
--	PartitionKey, Company, SalesPerson, CustNum, PartNum, PartDesc, OrderNum, OrderLine, OrderSubLine,OrderType, InvoiceNum, InvoiceLine, InvoiceDate, SellingShipQty, UnitPrice, UnitCost, DiscountAmount, TotalMiscChrg, WarehouseCode, CreditMemo, ActualDeliveryDate, Currency, ExchangeRate, InvoiceType, Res1, Res2, Res3, Unit, VAT, SalesChannel, BusinessChain, CashDiscountOffered, CashDiscountUsed
GO
PRINT N'Creating [stage].[LEX_FR_SOLine]'
GO
CREATE TABLE [stage].[LEX_FR_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderRel] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Site] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[IndexKey] [varchar] (10) NULL
)
GO
PRINT N'Creating [stage].[vLEX_FR_SOLine]'
GO
CREATE VIEW [stage].[vLEX_FR_SOLine] AS
--COMMENT EMPTY FIELD / ADD TRIM()UPPER() INTO PartID,CustomerID 2022-12-14 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine)))) AS SalesInvoiceID --
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum), '#', OrderLine))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustomerNum), '#', TRIM(InvoiceNum)))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum)))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustomerNum)))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(PartNum)))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(InvoiceNum)) AS SalesOrderCode
	--CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(InvoiceNum)) AS SalesOrderCode --OLine
	,CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine)) AS SalesInvoiceCode  --redundent?
	,CONVERT(int, replace(convert(date, InvoiceDate), '-', '')) AS SalesInvoiceDateID  --redundent?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey

	,Company
	,SalesPersonName
	,TRIM(CustomerNum) AS [CustomerNum]
	,TRIM(PartNum) AS [PartNum]
	,CASE WHEN TRIM(OrderNum) = '0' THEN 'Main' ELSE 'Sub' END  AS PartType
	,TRIM(OrderNum) AS [SalesOrderNum]
	,TRIM(OrderLine) AS [SalesOrderLine]
	,TRIM([OrderSubLine]) AS [SalesOrderSubLine]
	,OrderType AS [SalesOrderType]
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,TRIM(InvoiceLine) AS [SalesInvoiceLine]
	--,'' AS [SalesInvoiceType]
	,CONVERT(date, InvoiceDate) AS [SalesInvoiceDate]
	,ActualDeliveryDate AS [ActualDelivDate]
	,SellingShipQty AS [SalesInvoiceQty]
	--,'' AS [UoM]
	,UnitPrice
	,UnitCost
	--,0 AS DiscountAmount
	,IIF((UnitPrice*SellingShipQty) <> 0, DiscountAmount/(UnitPrice*SellingShipQty), 0) AS [DiscountPercent]
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	--,0 AS TotalMiscChrg
	--,0 AS [VATAmount]
	,'EUR' AS Currency
	,CONVERT(decimal (18,4), 1) AS ExchangeRate
	,CreditMemo
	--,'' AS [SalesChannel]
	--,'' AS [Department]
	,TRIM([WarehouseCode]) AS WarehouseCode
	--,NULL AS DeliveryAddress
	--,'' AS [CostBearerNum]
	--,'' AS [CostUnitNum]
	--,'' AS [ReturnComment]
	--,'' AS [ReturnNum]
	--,'' AS [ProjectNum]
	,[IndexKey]
	--,'' AS SIRes1
	--,'' AS SIRes2
	--,'' AS SIRes3

FROM stage.LEX_FR_SOLine
WHERE PartNum NOT IN  ('ND1', 'ENLEVEMENT L-EX OUEST', 'MAILING SEPT 17 RENTREE', 'ND4') --AND TRIM(OrderNum) <> '0' -- not like the sub
GROUP BY
	PartitionKey,Company,SalesPersonName,CustomerNum,PartNum,OrderNum,OrderLine,OrderSubLine,OrderType,InvoiceNum,InvoiceLine, InvoiceDate,SellingShipQty,UnitPrice,UnitCost,DiscountAmount,TotalMiscChrg,WarehouseCode,CreditMemo, [IndexKey], ActualDeliveryDate--,OrderSubLine --,OrderRel, 
GO
PRINT N'Creating [stage].[FOR_ES_SOLine]'
GO
CREATE TABLE [stage].[FOR_ES_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartType] [nvarchar] (50) NULL,
[DocumentNum] [nvarchar] (50) NULL,
[DocumentLine] [nvarchar] (50) NULL,
[DOCUMENTKIND] [nvarchar] (50) NULL,
[OrderSaleNumber] [nvarchar] (50) NULL,
[OrderSaleLineNumber] [nvarchar] (50) NULL,
[SalesInvoiceNum] [nvarchar] (50) NULL,
[SalesInvoiceLine] [nvarchar] (50) NULL,
[SalesInvoiceDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[SalesInvoiceQty] [decimal] (18, 8) NULL,
[UnitPrice] [decimal] (18, 8) NULL,
[UnitCost] [decimal] (18, 8) NULL,
[DiscountPercent] [decimal] (18, 8) NULL,
[DiscountAmount] [decimal] (18, 8) NULL,
[VATAmount] [decimal] (18, 8) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 8) NULL,
[SalesPerson] [nvarchar] (50) NULL,
[CreditMemo] [int] NULL,
[DeliveryNoteNum] [nvarchar] (50) NULL,
[Warehouse] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vFOR_ES_SOLine]'
GO


CREATE VIEW [stage].[vFOR_ES_SOLine] AS
--COMMENT EMPTY FIELDS 2022-12-21 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SalesInvoiceNum),'#',TRIM(SalesInvoiceLine))))) AS SalesInvoiceID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(OrderSaleNumber),'#',TRIM(OrderSaleLineNumber))))) AS SalesOrderID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum), '#', TRIM(SalesInvoiceNum))))) AS SalesLedgerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',OrderSaleNumber)))) AS SalesOrderNumID  
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID  
	,CASE WHEN PartNum IS NOT NULL THEN	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum)))))
			ELSE CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT('FSEFORA','#','TEXTLINE')))) END	AS PartID --Added Coalesce and Nullif to take care of empty partnum so they are included in report after RLS  /SM 20210325
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([Warehouse]))))) AS WarehouseID
	,UPPER(CONCAT(Company,'#',OrderSaleNumber,'#',OrderSaleLineNumber)) as SalesOrderCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SalesInvoiceNum))))) AS SalesInvoiceNumID -- Redundant
	,CONVERT(int, replace(convert(date,SalesInvoiceDate),'-','')) AS SalesInvoiceDateID  --Redundant?
	,UPPER(CONCAT(Company,'#',TRIM(SalesInvoiceNum),'#',TRIM(SalesInvoiceLine))) AS SalesInvoiceCode --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID

	,PartitionKey
	,UPPER(TRIM(Company)) AS Company
	,SalesPerson AS SalesPersonName
	,UPPER(TRIM(CustomerNum)) AS CustomerNum
	,UPPER(TRIM(PartNum)) AS PartNum 
	,PartType
	,UPPER(TRIM(OrderSaleNumber)) AS SalesOrderNum
	,UPPER(TRIM(OrderSaleLineNumber)) AS SalesOrderLine
	--,'' AS SalesOrderSubLine
	,DOCUMENTKIND AS SalesOrderType
	,UPPER(TRIM(SalesInvoiceNum)) AS SalesInvoiceNum
	,UPPER(TRIM(SalesInvoiceLine)) AS SalesInvoiceLine
	--,'' AS SalesInvoiceType
	,convert(date, SalesInvoiceDate) as SalesInvoiceDate
	,ActualDelivDate
	,SalesInvoiceQty
	--,'' AS UoM
	,UnitPrice
	,UnitCost  
	,DiscountPercent
	,DiscountAmount
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	, 0 as TotalMiscChrg
	, VATAmount as VATAmount
	,'EUR' AS Currency
	, ExchangeRate
	, CreditMemo
	--,'' AS SalesChannel
	--,'' Department
	,Warehouse AS WarehouseCode
	--,NULL AS DeliveryAddress
	--,'' AS CostBearerNum
	--,'' AS CostUnitNum
	--,'' AS ReturnComment
	--,'' AS ReturnNum
	--,'' AS ProjectNum
	,CONCAT(DocumentNum,'-', DocumentLine) AS IndexKey
	,DeliveryNoteNum AS SIRes1
	,[DOCUMENTKIND] AS SIRes2
	--,'' AS SIRes3
FROM stage.FOR_ES_SOLine AS SO
--GROUP BY PartitionKey, Company, SalesPerson, CustomerNum, SalesOrderNum, SalesOrderLine, OrderSubLine, OrderRel, OrderType, SalesInvoiceNum, SalesInvoiceLine, SalesInvoiceDate, SellingShipQty, UnitPrice, UnitCost, DiscountAmount, TotalMiscChrg, PartNum, WarehouseCode, CreditMemo, Indexkey, ActualDeliveryDate --, [Site]
GO
PRINT N'Creating [stage].[CER_EE_SOLine]'
GO
CREATE TABLE [stage].[CER_EE_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (100) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Indexkey] [nvarchar] (50) NULL,
[Site] [nvarchar] (50) NULL,
[Department] [nvarchar] (200) NULL,
[OrderType] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (max) NULL,
[ReturnNum] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [nvarchar] (50) NULL,
[VATRate] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vCER_EE_SOLine]'
GO

CREATE VIEW [stage].[vCER_EE_SOLine] AS
--COMMENT EMPTY FIELDS / ADJUST PartID,CustomerID 2022-12-14 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', Indexkey))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', OrderNum, '#', OrderLine, '#', InvoiceNum))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', CustNum, '#', InvoiceNum))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum)))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) ))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', WarehouseCode))) AS WarehouseID
	,CONCAT(Company, '#', OrderNum, '#', PartNum, '#', InvoiceNum) AS SalesOrderCode
	,CONVERT(int, replace(convert(date,InvoiceDate),'-','')) AS SalesInvoiceDateID  
	,CONCAT(Company, '#', OrderNum, '#', OrderLine) AS SalesInvoiceCode --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT( Company, '#', '') ))	AS ProjectID
	,PartitionKey

	,UPPER(TRIM(Company)) AS Company
	,TRIM(SalesPerson) AS SalesPersonName
	,UPPER(TRIM(CustNum)) AS CustomerNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,IIF(OrderSubLine = '000000',  'Main',  'Sub' ) AS PartType -- changed on 20210422 /DZ
	,TRIM(OrderNum) AS SalesOrderNum
	,TRIM(OrderLine) AS SalesOrderLine
	,TRIM(OrderSubLine) AS SalesOrderSubLine 
	,TRIM(OrderType) AS SalesOrderType
	,TRIM(InvoiceNum) AS SalesInvoiceNum
	,TRIM(InvoiceLine) AS SalesInvoiceLine
	--,'' AS SalesInvoiceType
	,convert(date, InvoiceDate) AS SalesInvoiceDate
	,[ActualDeliveryDate] AS ActualDelivDate
	,SellingShipQty	AS SalesInvoiceQty
	--,'' AS UoM
	,UnitPrice
	,UnitCost
	,CONVERT(decimal (18,4), IIF(SellingShipQty*UnitPrice = 0, 0, DiscountAmount/SellingShipQty*UnitPrice)) AS DiscountPercent
	,DiscountAmount
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	,TotalMiscChrg
	,COALESCE(VATRate,0)/100 * (UnitPrice * SellingShipQty - DiscountAmount)  AS VATAmount
	,'EUR' AS Currency
	,CONVERT(decimal (18,4), 1) AS ExchangeRate
	,CreditMemo
	--,'' AS SalesChannel
	,Department
	,TRIM(WarehouseCode) AS WarehouseCode
	--,NULL AS DeliveryAddress
	--,'' AS CostBearerNum
	--,'' AS CostUnitNum
	,ReturnComment
	,TRIM(ReturnNum) AS ReturnNum
	--,'' AS ProjectNum
	,Indexkey AS IndexKey
	--,'' AS SIRes1
	--,'' AS SIRes2
	--,'' AS SIRes3
FROM stage.CER_EE_SOLine
--GROUP BY
--	PartitionKey, Company, SalesPerson, CustNum, PartNum, OrderNum, OrderLine, OrderSubLine, OrderType, InvoiceNum, InvoiceLine, InvoiceDate, SellingShipQty, UnitPrice, UnitCost, DiscountAmount, TotalMiscChrg, WarehouseCode, CreditMemo, [ActualDeliveryDate], Indexkey, ReturnComment, ReturnNum, VATRate, Department
GO
PRINT N'Creating [stage].[CER_SE_SalesOrderLog]'
GO
CREATE TABLE [stage].[CER_SE_SalesOrderLog]
(
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[DelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[CurrExchRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (50) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[NeedbyDate] [date] NULL,
[SalesPerson] [nvarchar] (100) NULL,
[ReturnComment] [nvarchar] (500) NULL,
[SalesReturnInvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[CancellationCode] [nvarchar] (50) NULL,
[IndexKey] [nvarchar] (50) NOT NULL,
[PartitionKey] [varchar] (50) NULL,
[TransactionDate] [date] NULL
)
GO
PRINT N'Creating [stage].[vCER_SE_SalesOrderLog]'
GO








/****** Script for SelectTopNRows command from SSMS  ******/
CREATE VIEW [stage].[vCER_SE_SalesOrderLog] As
SELECT 
		
	  CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', IndexKey)))) AS SalesOrderLogID
	  ,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM(Company))) AS CompanyID
	  ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	  ,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(UPPER(PartNum))))) AS PartID
	  ,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(UPPER(WarehouseCode))))) AS WarehouseID
	  --,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(UPPER(PartNum)))) AS SalesOrderCode 
	  ,CONVERT(int, replace(convert(date, OrderDate),'-','')) AS SalesOrderDateID   --redundent
	  ,PartitionKey

	  ,[Company]
      ,[CustNum]	AS CustomerNum
      ,[OrderNum]	AS SalesOrderNum
      ,[OrderLine]	AS SalesOrderLine
      ,[OrderSubLine]	AS SalesOrderSubLine
      ,[OrderType]		AS SalesOrderType
      ,[OrderDate]		AS SalesOrderDate
	  ,[TransactionDate]	AS SalesOrderLogDate
	  ,'' AS SalesOrderLogType
--      ,[DelivDate]		AS ExpDelivDate
      ,[InvoiceNum]		AS SalesInvoiceNum
      ,[OrderQty]		AS SalesOrderQty
	  ,''				AS UoM
      ,[UnitPrice]
      ,[UnitCost]
      ,[Currency]
      ,[CurrExchRate]	AS ExchangeRate
      ,[OpenRelease]
      ,[DiscountPercent]
      ,[DiscountAmount]
      ,[PartNum]
	  ,IIF(OrderSubLine = '000000', 'Main', 'Sub' ) AS PartType
--      ,[NeedbyDate]
      ,[SalesPerson]	AS SalesPersonName
	  ,''				AS Department
      ,[ReturnComment]
      ,[SalesReturnInvoiceNum]
      ,[WarehouseCode]
      ,[CancellationCode]
      ,[IndexKey]
	  ,'' AS SORes1
	  ,'' AS SORes2
	  ,'' AS SORes3
	  
  FROM [stage].[CER_SE_SalesOrderLog]
GO
PRINT N'Creating [dw].[ProductionOrder]'
GO
CREATE TABLE [dw].[ProductionOrder]
(
[PartitionKey] [varchar] (50) NOT NULL,
[ProductionOrderID] [binary] (32) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[ProductionOrderNum] [nvarchar] (100) NULL,
[ProductionOrderLineNum] [nvarchar] (100) NULL,
[ProductionOrderSubLineNum] [nvarchar] (100) NULL,
[PartNum] [nvarchar] (100) NULL,
[Version] [nvarchar] (100) NULL,
[UoM] [nvarchar] (100) NULL,
[PartType] [nvarchar] (100) NULL,
[OrderQuantity] [decimal] (18, 4) NULL,
[ScrappedQty] [decimal] (18, 4) NULL,
[CompletedQuantity] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[Status] [nvarchar] (100) NULL,
[CurrentOperationStage] [nvarchar] (100) NULL,
[CurrentResourceGroup] [nvarchar] (100) NULL,
[OrderCreateDate] [date] NULL,
[RequestedEndDate] [date] NULL,
[PlannedStartDate] [date] NULL,
[PlannedEndDate] [date] NULL,
[StartDate] [date] NULL,
[EndDate] [date] NULL,
[OrderType] [nvarchar] (100) NULL,
[TotalHoursPlanned] [decimal] (18, 4) NULL,
[TotalHoursSpent] [decimal] (18, 4) NULL,
[SetupHoursSpent] [decimal] (18, 4) NULL,
[MaterialCost] [decimal] (18, 4) NULL,
[LabourCost] [decimal] (18, 4) NULL,
[OtherCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (100) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (100) NULL,
[BinNum] [nvarchar] (100) NULL,
[CostUnitNum] [nvarchar] (100) NULL,
[SalesOrderNum] [nvarchar] (100) NULL,
[CustomerNum] [nvarchar] (100) NULL,
[ProductionOrderCreaterName] [nvarchar] (100) NULL,
[BatchNum] [nvarchar] (100) NULL,
[CreatedTimeStamp] [datetime] NULL,
[ModifiedTimeStamp] [datetime] NULL,
[is_deleted] [bit] NULL,
[is_inferred] [bit] NULL,
[CustomerID] [binary] (32) NULL,
[PartID] [binary] (32) NULL,
[WarehouseID] [binary] (32) NULL,
[SalesOrderNumID] [binary] (32) NULL,
[CostUnitID] [binary] (32) NULL,
[CompanyID] [binary] (32) NULL
)
GO
PRINT N'Creating primary key [PK_ProductionOrder] on [dw].[ProductionOrder]'
GO
ALTER TABLE [dw].[ProductionOrder] ADD CONSTRAINT [PK_ProductionOrder] PRIMARY KEY CLUSTERED ([ProductionOrderID])
GO
PRINT N'Creating [dm].[FactProductionOrder]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [dm].[FactProductionOrder] AS
	 SELECT --[PartitionKey]
       CAST([ProductionOrderID] AS bigint) AS ProductionOrderID
	  ,CAST(CustomerID	   as bigint) as CustomerID
	  ,CAST(PartID		   as bigint) as PartID
	  ,CAST(WarehouseID	   as bigint) as WarehouseID
	  ,CAST(SalesOrderNumID as bigint) as SalesOrderNumID
	  ,CAST(CostUnitID	   as bigint) as CostUnitID
	  ,CAST(CompanyID	   as bigint) as CompanyID
      ,[Company]
      ,[ProductionOrderNum]
      ,[ProductionOrderLineNum]
      ,[ProductionOrderSubLineNum]
      ,[PartNum]
      ,[Version]
      ,[UoM]
      ,[PartType]
      ,[OrderQuantity]
      ,[ScrappedQty]
      ,[CompletedQuantity]
      ,[RemainingQty]
      ,[Status]
      ,[CurrentOperationStage]
      ,[CurrentResourceGroup]
      ,[OrderCreateDate]
      ,[RequestedEndDate]
      ,[PlannedStartDate]
      ,[PlannedEndDate]
      ,[StartDate]
      ,[EndDate]
      ,[OrderType]
      ,[TotalHoursPlanned]
      ,[TotalHoursSpent]
      ,[SetupHoursSpent]
      ,[MaterialCost]
      ,[LabourCost]
      ,[OtherCost]
      ,[Currency]
      ,[ExchangeRate]
      ,[WarehouseCode]
      ,[BinNum]
      ,[CostUnitNum]
      ,[SalesOrderNum]
      ,[CustomerNum]
      ,[ProductionOrderCreaterName]
      ,[BatchNum]
      --,[CreatedTimeStamp]
      --,[ModifiedTimeStamp]
      --,[is_deleted]
      --,[is_inferred]
  FROM [dw].[ProductionOrder]
  WHERE is_deleted = '0' or is_deleted IS NULL;
GO
PRINT N'Creating [dm_IN].[fctProductionOrder]'
GO
CREATE VIEW [dm_IN].[fctProductionOrder]
AS
SELECT ProductionOrderID
	  ,CustomerID
	  ,PartID
	  ,WarehouseID
	  ,SalesOrderNumID
	  ,CostUnitID
	  ,CompanyID
      ,dm.[Company]
      ,[ProductionOrderNum]
      ,[ProductionOrderLineNum]
      ,[ProductionOrderSubLineNum]
      ,[PartNum]
      ,[Version]
      ,[UoM]
      ,[PartType]
      ,[OrderQuantity]
      ,[ScrappedQty]
      ,[CompletedQuantity]
      ,[RemainingQty]
      ,[Status]
      ,[CurrentOperationStage]
      ,[CurrentResourceGroup]
      ,[OrderCreateDate]
      ,[RequestedEndDate]
      ,[PlannedStartDate]
      ,[PlannedEndDate]
      ,[StartDate]
      ,[EndDate]
      ,[OrderType]
      ,[TotalHoursPlanned]
      ,[TotalHoursSpent]
      ,[SetupHoursSpent]
      ,[MaterialCost]
      ,[LabourCost]
      ,[OtherCost]
      ,[Currency]
      ,[ExchangeRate]
      ,[WarehouseCode]
      ,[BinNum]
      ,[CostUnitNum]
      ,[SalesOrderNum]
      ,[CustomerNum]
      ,[ProductionOrderCreaterName]
      ,[BatchNum]
FROM dm.FactProductionOrder as dm
INNER JOIN (
select distinct Company
from dbo.Company com
WHERE com.BusinessArea = 'Industrial Solutions' AND com.[Status] = 'Active'
) AS aux
	ON dm.Company = aux.Company;
GO
PRINT N'Creating [stage].[TRA_SE_Part]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[TRA_SE_Part]
(
[PartitionKey] [nvarchar] (50) NULL,
[Company] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartName] [nvarchar] (max) NULL,
[PartDescription] [nvarchar] (max) NULL,
[ProductGroup] [nvarchar] (100) NULL,
[ProductGroup2] [nvarchar] (100) NULL,
[CommodityCode] [nvarchar] (50) NULL,
[PartReplacementNum] [nvarchar] (max) NULL,
[PartStatus] [nvarchar] (50) NULL,
[CountryOfOrigin] [nvarchar] (max) NULL,
[NetWeight] [nvarchar] (50) NULL,
[UoM] [nvarchar] (50) NULL,
[ReOrderLevel] [nvarchar] (50) NULL,
[StartDate] [nvarchar] (50) NULL,
[MainSupplier] [nvarchar] (max) NULL,
[AlternativeSupplier] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vTRA_SE_Part]'
GO
CREATE VIEW [stage].[vTRA_SE_Part] AS
--COMMENT EMPTY FIELDS // ADD UPPER() TRIM() INTO PartID
SELECT
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(UPPER(Company), '#', UPPER(TRIM([PartNum]))))) AS PartID
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONCAT(UPPER(Company), '#', TRIM([PartNum])) AS PartCode
	,PartitionKey

	,UPPER(Company) AS Company
	,UPPER(TRIM([PartNum])) AS [PartNum]
	,TRIM([PartName]) AS [PartName]
	,TRIM(([PartDescription])) AS [PartDescription] --MAX
	--,'' AS [PartDescription2]
	--,'' AS [PartDescription3]
	--,NULL AS MainSupplier
	--,NULL AS AlternativeSupplier
	,TRIM([ProductGroup]) AS [ProductGroup]
	,[ProductGroup2]
	--,'' AS [ProductGroup3]
	--,'' AS [ProductGroup4]
	--,'' AS [Brand]
	,TRIM([CommodityCode]) AS [CommodityCode]
	,TRIM(([PartReplacementNum])) AS [PartReplacementNum] --MIN
	,TRIM([PartStatus]) AS [PartStatus]
	,TRIM([CountryOfOrigin]) AS [CountryOfOrigin]
	--,NULL AS [NetWeight] --MAX --CONVERT(decimal (18,4), ([NetWeight]))
	,TRIM([UoM]) AS [UoM]
	--,'' AS [Material]
	--,'' AS [Barcode]
	--,NULL AS [ReOrderLevel] --CONVERT(decimal (18,4), [ReOrderLevel])
	--,'' AS [PartResponsible]
	,CONVERT(date, [StartDate]) AS [StartDate]
	--,'' AS [EndDate]
FROM [stage].[TRA_SE_Part]

--GROUP BY
--	PartitionKey, Company, [PartNum], [PartName], [ProductGroup], [ProductGroup2], [CommodityCode], [PartStatus], [CountryOfOrigin], [UoM], [ReOrderLevel], [StartDate]
GO
PRINT N'Creating [stage].[JEN_NO_StockTransaction]'
GO
CREATE TABLE [stage].[JEN_NO_StockTransaction]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[SysRowID] [nvarchar] (20) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[BinNumber] [nvarchar] (50) NULL,
[BatchID] [nvarchar] (50) NULL,
[FIFOBatchID] [nvarchar] (50) NULL,
[SupplierBatchID] [nvarchar] (50) NULL,
[TranDate] [date] NULL,
[CreateDate] [date] NULL,
[CreateTime] [nvarchar] (10) NULL,
[TranDT] [nvarchar] (50) NULL,
[TranType] [nvarchar] (50) NULL,
[TranTypeDesc] [nvarchar] (500) NULL,
[TranSource] [nvarchar] (50) NULL,
[Reference] [nvarchar] (50) NULL,
[TranQty] [decimal] (18, 4) NULL,
[PartStatus] [nvarchar] (50) NULL,
[IssuerReceiverCode] [nvarchar] (50) NULL,
[CostPrice] [decimal] (18, 4) NULL,
[SellingPrice] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[TranValue] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vJEN_NO_StockTransaction]'
GO

CREATE VIEW [stage].[vJEN_NO_StockTransaction] AS 
--COMMENT EMPTY FIELDS // ADD UPPER()TRIM() INTO WarehouseID,PartID 2022-12-22 VA
SELECT 
--	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM([Company]),'#',TRIM([SysRowID])))) AS StockTransactionID
--	,CONCAT([Company],'#',TRIM([SysRowID])) AS StockTransactionCode --StockTransactionCode
--	,CONVERT([binary](32), HASHBYTES('SHA2_256', [Company])) AS CompanyID
--	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
--    --,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM([Company]),'#',TRIM([PartNum])))) AS PartID
--	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
-- 	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode])))) AS WarehouseID
--	,IIF(TranSource = '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM([Company]),'#',TRIM([OrderNum])))), NULL) AS SalesOrderID
--	,IIF(TranSource <> '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM([Company]),'#',TRIM([OrderNum])))), NULL) AS PurchaseOrderID
----	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([OrderNum])))) AS PurchaseOrderID
--	,IIF(TranSource = '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM([Company]),'#',TRIM([InvoiceNum])))), NULL) AS SalesInvoiceID
--	,IIF(TranSource <> '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM([Company]),'#',TRIM([InvoiceNum])))), NULL) AS PurchaseInvoiceID
--	,IIF(TranSource = '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([IssuerReceiverCode]))))), NULL) AS CustomerID
--	--,IIF(TranSource = '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM([Company]),'#',TRIM([IssuerReceiverCode])))), NULL) AS CustomerID
--	,IIF(TranSource <> '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM([Company]),'#',TRIM([IssuerReceiverCode])))), NULL) AS SupplierID
--	,CONVERT([binary](32),HASHBYTES('SHA2_256',TRIM([CurrencyCode]))) AS CurrencyID
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM([Company]),'#',TRIM([SysRowID])))) AS StockTransactionID
	,CONCAT([Company],'#',TRIM([SysRowID])) AS StockTransactionCode --StockTransactionCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',TRIM([Company]))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
 	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',TRIM([CurrencyCode]))) AS CurrencyID

	,IIF([TranTypeDesc] = 'Outgoing goods', CONVERT([binary](32), HASHBYTES('SHA2_256', Upper(CONCAT(TRIM([Company]),'#',TRIM([IssuerReceiverCode]))))), NULL) AS CustomerID
	,IIF([TranTypeDesc] = 'Outgoing goods', CONVERT([binary](32), HASHBYTES('SHA2_256', Upper(CONCAT(TRIM([Company]),'#',TRIM([OrderNum]))))), NULL) AS SalesOrderNumID
	,IIF([TranTypeDesc] = 'Outgoing goods', CONVERT([binary](32), HASHBYTES('SHA2_256', Upper(CONCAT(TRIM([Company]),'#',TRIM([InvoiceNum]))))), NULL) AS SalesInvoiceID
	,IIF([TranTypeDesc] = 'Incoming goods', CONVERT([binary](32), HASHBYTES('SHA2_256', Upper(CONCAT(TRIM([Company]),'#',TRIM([IssuerReceiverCode]))))), NULL) AS SupplierID
	,IIF([TranTypeDesc] = 'Incoming goods', CONVERT([binary](32), HASHBYTES('SHA2_256', Upper(CONCAT(TRIM([Company]),'#',TRIM([OrderNum]))))), NULL) AS PurchaseOrderNumID
	,IIF([TranTypeDesc] = 'Incoming goods', CONVERT([binary](32), HASHBYTES('SHA2_256', Upper(CONCAT(TRIM([Company]),'#',TRIM([InvoiceNum]))))), NULL) AS PurchaseInvoiceID
	,[PartitionKey]
    ,[SysRowID] AS IndexKey
    ,TRIM([Company]) AS Company -- 
	,TRIM([WarehouseCode]) AS WarehouseCode
	,[TranType]		AS TransactionCode
	,[TranTypeDesc]	AS TransactionDescription
	,IIF(TRIM([IssuerReceiverCode])='', NULL,TRIM(IssuerReceiverCode)) AS IssuerReceiverCode
	,IIF(TRIM([OrderNum])='', NULL, TRIM(OrderNum)) AS OrderNum 
    ,IIF(TRIM([InvoiceNum])='', NULL,TRIM(InvoiceNum)) AS InvoiceNum
	--,'' AS InvoiceLine
    ,TRIM([PartNum]) AS PartNum
    ,IIF(TRIM([BinNumber])='', NULL,TRIM(BinNumber)) AS BinNum
    ,IIF(TRIM([BatchID])='', NULL,TRIM(BatchID)) AS BatchNum
	,convert(date, [TranDate]) AS TransactionDate
	,[CreateTime] AS TransactionTime
	,[TranQty]		AS TransactionQty
	,[TranValue]	AS TransactionValue
	,[CostPrice]  
	,[SellingPrice] AS SalesUnitPrice  -- Converted to local value (NOK) as Exchange rate has been included
	,'NOK' AS Currency --TRIM(CurrencyCode) changed 2023-05-16 SB
	,CONVERT(decimal(18,4), ExchangeRate) AS ExchangeRate
	,[Reference]
	,convert(date, [CreateDate]) AS AdjustmentDate
	,IIF(TRIM([TranTypeDesc]) IN ('Incoming goods','Outgoing goods'),'External','Internal') AS InternalExternal
	,PartStatus AS STRes1
	--,'' AS STRes2
	--,'' AS STRes3
    ,IIF(TRIM([FIFOBatchID])='', NULL,TRIM(FIFOBatchID)) AS FIFOBatchID
    ,IIF(TRIM([SupplierBatchID])='', NULL,TRIM(SupplierBatchID)) AS SupplierBatchID
	,[TranDT]
    ,[TranSource]
--	Simple logic for counting StockBalance, maybe to simple ?
--	,SUM(TranQty) OVER (PARTITION BY  WarehouseCode , PartNum, BatchID ORDER BY TranDate asc ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) 
--	,SUM(TranQty) OVER (PARTITION BY  WarehouseCode , PartNum, BatchID ORDER BY TranDate asc) AS StockBalanceCount --Original
--	,SUM(TranQty) OVER (PARTITION BY  WarehouseCode , PartNum, BatchID ORDER BY TranDT ASC) AS StockBalanceCount -- DZ modified  -- ET 20200916 decision, solution in measures
--	,SUM(TranValue) OVER (PARTITION BY  WarehouseCode , PartNum, BatchID ORDER BY TranDate asc) AS StockBalanceValue --Original
--	,SUM(TranValue) OVER (PARTITION BY  WarehouseCode , PartNum, BatchID ORDER BY TranDT ASC) AS StockBalanceValue -- DZ modified  -- ET 20200916 decision, solution in measures
				 
FROM 
	[stage].[JEN_NO_StockTransaction]
GO
PRINT N'Creating [stage].[STE_SE_Salesledger]'
GO
CREATE TABLE [stage].[STE_SE_Salesledger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (500) NULL,
[InvoiceNum] [nvarchar] (500) NULL,
[CustNum] [nvarchar] (500) NULL,
[InvoiceDate] [nvarchar] (500) NULL,
[DueDate] [nvarchar] (500) NULL,
[LastPaymentDate] [nvarchar] (500) NULL,
[IsInvoiceClosed] [nvarchar] (500) NULL,
[InvoiceAmount] [nvarchar] (500) NULL,
[PaidInvoiceAmount] [nvarchar] (500) NULL,
[RemainingInvoiceAmount] [nvarchar] (500) NULL,
[Currency] [nvarchar] (500) NULL,
[ExchangeRate] [nvarchar] (500) NULL,
[PaymentTerms] [nvarchar] (500) NULL
)
GO
PRINT N'Creating [stage].[vSTE_SE_Salesledger]'
GO

CREATE view [stage].[vSTE_SE_Salesledger] AS
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(UPPER(TRIM(Company)), '#', UPPER(TRIM(CustNum)), '#', UPPER(TRIM(InvoiceNum)) ))) AS SalesLedgerID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustNum))))) AS CustomerID
	,CONCAT(UPPER(TRIM(Company)), '#', UPPER(TRIM(CustNum)), '#', UPPER(TRIM(InvoiceNum))) AS SalesLedgerCode

	,[PartitionKey] 
	,UPPER(TRIM("Company")) AS "Company"
	,UPPER(TRIM("CustNum" )) AS "CustomerNum"
	,"InvoiceNum"  AS "SalesInvoiceNum"
	,"InvoiceDate" AS "SalesInvoiceDate"
	,"DueDate"  AS "SalesDueDate"
	,"LastPaymentDate"  AS "SalesLastPaymentDate"
	,[IsInvoiceClosed]		
	,[InvoiceAmount]			
	,[PaidInvoiceAmount]		
	,[RemainingInvoiceAmount]
	,[Currency]				
	,[ExchangeRate]			
	,[PaymentTerms]			
from
	stage.STE_SE_Salesledger
GO
PRINT N'Creating [stage].[AXL_IT_OLine]'
GO
CREATE TABLE [stage].[AXL_IT_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[NeedbyDate] [date] NULL,
[ExpDelivDate] [date] NULL,
[EDCExpDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (10) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[SalesPerson] [nvarchar] (50) NULL,
[WareHouseCode] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[BusinessChain] [nvarchar] (50) NULL,
[SalesOrderCategory] [nvarchar] (100) NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL,
[PartDesc] [nvarchar] (max) NULL,
[APV_Cost_EUR] [nvarchar] (50) NULL,
[APV_Item] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXL_IT_OLine]'
GO

CREATE VIEW [stage].[vAXL_IT_OLine] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(PartDesc))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum), '#', (IIF(TRIM([PartNum]) LIKE 'IACO%' , 'MISC. CHARGES', TRIM(PartDesc) )) )))) AS PartID
	,CONVERT(int, replace(convert(date, OrderDate), '-', '')) AS SalesOrderDateID
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine))) AS SalesOrderCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(CustNum) AS CustomerNum 
	,TRIM(OrderNum) AS [SalesOrderNum]
	,TRIM(OrderLine) AS [SalesOrderLine]
	,TRIM(OrderSubLine) AS [SalesOrderSubLine]
	,CONVERT(nvarchar(50), TRIM(OrderType)) AS [SalesOrderType]
	,TRIM([SalesOrderCategory]) AS [SalesOrderCategory]
	,OrderDate AS [SalesOrderDate]
	,NeedbyDate
	,ExpDelivDate AS [ExpDelivDate]
	,EDCExpDelivDate
	,ActualDelivDate
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,OrderQty AS [SalesOrderQty]
	,DelivQty
	,RemainingQty
	,Unit AS [UoM]
	,UnitPrice
	,UnitCost
	,LEFT(TRIM(Currency), 3) AS Currency
	,ExchangeRate
	,LEFT(TRIM(OpenRelease), 1) AS OpenRelease
	,DiscountAmount
	,DiscountPercent
	,NULL AS CashDiscOffered
	,NULL AS CashDiscUsed
	,TRIM(PartNum) AS PartNum
	,UPPER(PartDesc) AS PartDesc
	,'' AS [PartType]
	,CONVERT(nvarchar(50), PartStatus) AS PartStatus
	,TRIM(SalesPerson) AS [SalesPersonName]
	,TRIM(WareHouseCode) AS WarehouseCode
	,'' AS IndexKey
	,TRIM(SalesChannel) AS SalesChannel
	,TRIM(BusinessChain) AS [Department]
	,Res3 AS [ProjectNum] -- = FreeOfCharge: Y = yes, N = no
	,'' AS Cancellation
	,Res1 AS SORes1
	,Res2 AS SORes2
	,Res3 AS SORes3
FROM stage.AXL_IT_OLine
WHERE OrderDate >= '2015-01-01'
GO
PRINT N'Creating [stage].[SPR_NL_Part]'
GO
CREATE TABLE [stage].[SPR_NL_Part]
(
[PartitionKey] [nvarchar] (50) NULL,
[Company] [nvarchar] (8) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartName] [nvarchar] (max) NULL,
[PartDescription] [nvarchar] (max) NULL,
[PartDescription2] [nvarchar] (max) NULL,
[PartDescription3] [nvarchar] (max) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[ProductGroup2] [nvarchar] (50) NULL,
[ProductGroup3] [nvarchar] (50) NULL,
[ProductGroup4] [nvarchar] (50) NULL,
[Brand] [nvarchar] (50) NULL,
[ComodityCode] [nvarchar] (50) NULL,
[PartReplaceMentNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[CountryOfOrigin] [nvarchar] (50) NULL,
[NetWeight] [nvarchar] (50) NULL,
[UoM] [nvarchar] (50) NULL,
[Material] [nvarchar] (50) NULL,
[Barcode] [nvarchar] (50) NULL,
[Reorderlevel] [nvarchar] (50) NULL,
[PartResponsible] [nvarchar] (max) NULL,
[MainSupplier] [nvarchar] (50) NULL,
[AlternativeSupplier] [nvarchar] (50) NULL,
[StartDate] [nvarchar] (50) NULL,
[EndDate] [nvarchar] (50) NULL,
[PARes1] [nvarchar] (50) NULL,
[PARes2] [nvarchar] (50) NULL,
[PARes3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vSPR_NL_Part]'
GO
CREATE VIEW [stage].[vSPR_NL_Part] AS
--COMMENT EMPTY FIELDS // ADD TRIM()UPPER() INTO
SELECT
--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company,'#', TRIM(PartNum)))) AS PartID
	CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#', TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONCAT(Company, '#', TRIM([PartNum])) AS PartCode
	,PartitionKey

	,[Company]
	,TRIM(PartNum) AS [PartNum]
--	,PartNum AS [PartNum1]
	,TRIM([PartName]) AS [PartName]
	,TRIM([PartDescription]) AS [PartDescription]
	--,'' AS [PartDescription2]
	--,'' AS [PartDescription3]
	,TRIM((MainSupplier)) AS MainSupplier
	--,'' AS AlternativeSupplier
	,TRIM([ProductGroup]) AS [ProductGroup]
	--,'' AS [ProductGroup2]
	--,'' AS [ProductGroup3]
	--,'' AS [ProductGroup4]
	,TRIM([Brand]) AS [Brand]
	,TRIM([ComodityCode]) AS [CommodityCode]
	--,'' AS [PartReplacementNum]
	--,'' AS [PartStatus]
	,TRIM(([CountryOfOrigin])) AS [CountryOfOrigin]
	--,NULL AS [NetWeight] --REPLACE(REPLACE(REPLACE([NetWeight], '0 kg', 0), ',', '.'), ';', '')
	,TRIM(MAX([UoM])) AS [UoM]
	--,'' AS [Material]
	--,'' AS [Barcode]
	--,NULL AS [ReOrderLevel] --CAST(REPLACE([ReOrderLevel], 'na', null) AS decimal(18,4))
	--,'' AS [PartResponsible]
	,CONVERT(date, '1900-01-01') AS [StartDate]
	,CONVERT(date, '1900-01-01') AS [EndDate]
FROM [stage].[SPR_NL_Part]
GROUP BY
	PartitionKey, Company, [PartNum], [PartName], [PartDescription], [ProductGroup], [Brand], [ComodityCode], [CountryOfOrigin], MainSupplier
GO
PRINT N'Creating [dw].[Supplier]'
GO
CREATE TABLE [dw].[Supplier]
(
[SupplierID] [binary] (32) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (100) NULL,
[MainSupplierName] [nvarchar] (100) NULL,
[SupplierName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[AddressLine3] [nvarchar] (100) NULL,
[TelephoneNum] [nvarchar] (50) NULL,
[Email] [nvarchar] (200) NULL,
[ZipCode] [nvarchar] (50) NULL,
[City] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (200) NULL,
[Region] [nvarchar] (200) NULL,
[SupplierCategory] [nvarchar] (200) NULL,
[SupplierResponsible] [nvarchar] (100) NULL,
[AddressLine] [nvarchar] (250) NULL,
[FullAddressLine] [nvarchar] (500) NULL,
[AccountNum] [nvarchar] (50) NULL,
[VATNum] [nvarchar] (50) NULL,
[OrganizationNum] [nvarchar] (100) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[CodeOfConduct] [nvarchar] (20) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[SupplierScore] [nvarchar] (20) NULL,
[MinOrderQty] [decimal] (18, 4) NULL,
[MinOrderValue] [decimal] (18, 4) NULL,
[Website] [nvarchar] (100) NULL,
[Comments] [nvarchar] (max) NULL,
[SRes1] [nvarchar] (100) NULL,
[SRes2] [nvarchar] (100) NULL,
[SRes3] [nvarchar] (100) NULL,
[SupplierCode] [nvarchar] (200) NULL,
[CompanyID] [binary] (32) NOT NULL,
[PartitionKey] [varchar] (50) NOT NULL,
[CountryCode] [nvarchar] (10) NULL,
[SupplierGroup] [nvarchar] (50) NULL,
[SupplierSubGroup] [nvarchar] (50) NULL,
[SupplierIndustry] [nvarchar] (50) NULL,
[SupplierSubIndustry] [nvarchar] (50) NULL,
[PurchaserPersonCode] [nvarchar] (50) NULL,
[PurchaserPersonName] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[SupplierStatus] [nvarchar] (50) NULL,
[IsActiveRecord] [bit] NULL,
[IsBusinessGroupInternal] [bit] NULL,
[IsCompanyGroupInternal] [bit] NULL,
[is_deleted] [bit] NULL,
[is_inferred] [bit] NULL,
[TelephoneNum1] [nvarchar] (50) NULL,
[TelephoneNum2] [nvarchar] (50) NULL,
[SupplierType] [nvarchar] (50) NULL,
[MinOrderValueCurrency] [nchar] (3) NULL,
[IsMaterialSupplier] [bit] NULL
)
GO
PRINT N'Creating primary key [PK_Supplier] on [dw].[Supplier]'
GO
ALTER TABLE [dw].[Supplier] ADD CONSTRAINT [PK_Supplier] PRIMARY KEY NONCLUSTERED ([SupplierID])
GO
PRINT N'Creating [dw].[PurchaseOrder]'
GO
CREATE TABLE [dw].[PurchaseOrder]
(
[PurchaseOrderID] [binary] (32) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NOT NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaseOrderType] [nvarchar] (50) NULL,
[PurchaseOrderDate] [date] NULL,
[PurchaseOrderStatus] [nvarchar] (50) NULL,
[OrgReqDelivDate] [date] NULL,
[CommittedDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[ReqDelivDate] [date] NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[SupplierPartNum] [nvarchar] (50) NULL,
[SupplierInvoiceNum] [nvarchar] (100) NULL,
[DelivCustomerNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[PurchaseOrderQty] [decimal] (18, 4) NULL,
[ReceiveQty] [decimal] (18, 4) NULL,
[InvoiceQty] [decimal] (18, 4) NULL,
[MinOrderQty] [decimal] (18, 4) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[LandedCost] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (10) NULL,
[PurchaserName] [nvarchar] (100) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[ReceivingNum] [nvarchar] (50) NULL,
[DelivTime] [int] NULL,
[PurchaseChannel] [nvarchar] (50) NULL,
[Documents] [nvarchar] (50) NULL,
[Comments] [nvarchar] (max) NULL,
[PORes1] [nvarchar] (100) NULL,
[PORes2] [nvarchar] (100) NULL,
[PORes3] [nvarchar] (100) NULL,
[PurchaseOrderCode] [nvarchar] (500) NOT NULL,
[PurchaseOrderNumID] [binary] (32) NULL,
[PurchaseInvoiceID] [binary] (32) NULL,
[CurrencyID] [binary] (32) NULL,
[CustomerID] [binary] (32) NULL,
[SupplierID] [binary] (32) NULL,
[PartID] [binary] (32) NULL,
[WarehouseID] [binary] (32) NULL,
[CompanyID] [binary] (32) NULL,
[PartitionKey] [nvarchar] (50) NOT NULL,
[OrgCommittedDelivDate] [date] NULL,
[OrgCommittedShipDate] [date] NULL,
[ActualShipDate] [date] NULL,
[IsClosed] [bit] NULL,
[IsActiveRecord] [bit] NULL,
[is_deleted] [bit] NULL,
[CommittedShipDate] [date] NULL
)
GO
PRINT N'Creating primary key [PK_PurchaseOrder] on [dw].[PurchaseOrder]'
GO
ALTER TABLE [dw].[PurchaseOrder] ADD CONSTRAINT [PK_PurchaseOrder] PRIMARY KEY CLUSTERED ([PurchaseOrderID])
GO
PRINT N'Creating [dm].[FactPurchaseOrderDistinct]'
GO



CREATE VIEW [dm].[FactPurchaseOrderDistinct] AS
-- TO 2023-01-20 Making sure we will never bring two values and break all the AS models
with remove_duplicates as (
SELECT 
	convert(bigint, POL.[PurchaseOrderNumID]) AS [PurchaseOrderNumID]
	,convert(bigint, POL.[CompanyID]) AS [CompanyID]
	,MIN(convert(bigint, POL.[SupplierID])) AS [SupplierID]
	,MIN(POL.PurchaseOrderNum) AS PurchaseOrderNum
	,MIN(POL.Company) AS Company
	,MIN(CONCAT(S.SupplierNum, '-', S.SupplierName)) AS Supplier
	,row_number() over(Partition by convert(bigint, POL.[PurchaseOrderNumID]) order by convert(bigint, POL.[PurchaseOrderNumID])) as rn
FROM 
	[dw].[PurchaseOrder] AS POL
		LEFT JOIN dw.Supplier AS S 
		ON POL.CompanyID = S.CompanyID
		AND POL.SupplierID = S.SupplierID
where POL.is_deleted != 1 Or POL.is_deleted is null
GROUP BY 
	POL.PurchaseOrderNumID, POL.CompanyID
)
SELECT 
 [PurchaseOrderNumID]
 ,[CompanyID]
 ,[SupplierID]
 ,PurchaseOrderNum
 ,Company
 ,Supplier
 from remove_duplicates
 where rn = 1

	--,MIN(convert(bigint, POL.[CustomerID])) AS [CustomerID]
	--,MIN(convert(bigint, [WarehouseID])) AS [WarehouseID]
GO
PRINT N'Creating [dm_IN].[fctPurchaseOrderDistinct]'
GO

CREATE VIEW [dm_IN].[fctPurchaseOrderDistinct] AS

SELECT pod.[PurchaseOrderNumID]
,pod.[CompanyID]
,pod.[SupplierID]
,pod.[PurchaseOrderNum]
,pod.[Company]
,pod.[Supplier]

FROM dm.FactPurchaseOrderDistinct as pod
WHERE pod.Company  in ('OCSSE')
GO
PRINT N'Creating [stage].[AXL_CZ_SOLine]'
GO
CREATE TABLE [stage].[AXL_CZ_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[InvoiceType] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (22, 8) NULL,
[UnitCost] [decimal] (22, 8) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[VAT] [decimal] (18, 4) NULL,
[CashDiscountOffered] [decimal] (18, 4) NULL,
[CashDiscountUsed] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OrderType] [nvarchar] (50) NULL,
[SalesChannel] [varchar] (10) NULL,
[BusinessChain] [varchar] (10) NULL,
[Res1] [varchar] (100) NULL,
[Res2] [varchar] (100) NULL,
[Res3] [varchar] (100) NULL,
[PartDesc] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[AXL_AU_SalesLedger]'
GO
CREATE TABLE [stage].[AXL_AU_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceAmount] [decimal] (18, 4) NULL,
[RemainAmount] [decimal] (18, 4) NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vAXL_CZ_SalesLedger]'
GO
CREATE VIEW [stage].[vAXL_CZ_SalesLedger] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(sl.Company, '#', TRIM(sl.CustNum), '#', TRIM(sl.InvoiceNum))))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(sl.Company))) AS CompanyID
	,UPPER(CONCAT(sl.Company, '#', TRIM(sl.CustNum), '#', TRIM(sl.InvoiceNum))) AS SalesLedgerCode
	,sl.PartitionKey

	,UPPER(sl.Company) AS Company
	,UPPER(TRIM(sl.CustNum)) AS CustomerNum
	,TRIM(sl.InvoiceNum) AS [SalesInvoiceNum]
	,IIF(so.InvoiceDate = '' OR so.InvoiceDate IS NULL, '1900-01-01', so.InvoiceDate) AS [SalesInvoiceDate] --
	,CONVERT(date, DueDate) AS SalesDueDate
	,CONVERT(date, LastPaymentDate) AS LastPaymentDate
	,[InvoiceAmount]
	,[RemainAmount] AS [RemainingInvoiceAmount]
	,NULL AS CashDiscOffered
	,NULL AS CashDiscUsed
	,NULL AS [ExchangeRate]
	,NULL AS [Currency]
	,NULL AS [VATAmount]
	,NULL AS [VATCode]
	,NULL AS [PayToName]
	,NULL AS [PayToCity]
	,NULL AS [PayToContact]
	,NULL AS [PaymentTerms]
	,sl.Res1 AS SLRes1
	,sl.Res2 AS SLRes2
	,sl.Res3 AS SLRes3
FROM stage.AXL_AU_SalesLedger sl
	LEFT JOIN stage.AXL_CZ_SOLine so ON TRIM(sl.InvoiceNum) = TRIM(so.InvoiceNum)
WHERE DueDate > '2015-01-01'
GROUP BY
	sl.PartitionKey, sl.Company, sl.CustNum, sl.InvoiceNum, sl.Res2, sl.Res1, sl.Res3, sl.[InvoiceAmount], sl.[RemainAmount], so.InvoiceDate, DueDate, LastPaymentDate
GO
PRINT N'Creating [stage].[WID_EE_StockBalance]'
GO
CREATE TABLE [stage].[WID_EE_StockBalance]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (70) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[StockBalance] [decimal] (18, 4) NULL,
[ReservedQty] [decimal] (18, 4) NULL,
[BackOrderQty] [decimal] (18, 4) NULL,
[QtyOrdered] [decimal] (18, 4) NULL,
[FIFOValue] [decimal] (18, 4) NULL,
[StockTakDiff] [decimal] (18, 4) NULL,
[DelivTime] [int] NULL,
[DelivTimeUnit] [int] NULL,
[DelivTimeDesc] [nvarchar] (50) NULL,
[ReOrderLevel] [decimal] (18, 4) NULL,
[OptimalOrderQty] [decimal] (18, 4) NULL,
[BinNum] [nvarchar] (12) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[LastStockTakeDate] [date] NULL,
[LastStdCostCalDate] [date] NULL,
[DelivDateSupplier] [date] NULL,
[DelivDateCust] [date] NULL,
[OrderDateSupplier] [date] NULL,
[BatchNum] [nvarchar] (50) NULL,
[AvgCost] [decimal] (18, 4) NULL,
[MaxStockQty] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (10) NULL
)
GO
PRINT N'Creating [stage].[vWID_EE_StockBalance]'
GO
CREATE VIEW [stage].[vWID_EE_StockBalance] AS
--COMMENT EMPTY FIELDS // ADD UPPER() TRIM() INTO PartID 2022-12-23 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([PartNum]),'#',TRIM([WarehouseCode])))) AS ItemWarehouseID
	,TRIM(WarehouseCode) AS WarehouseCode
	,CONCAT([Company],'#',TRIM([PartNum]),'#',TRIM([WarehouseCode])) AS ItemWarehouseCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',[Company])) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([SupplierNum])))) AS SupplierID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([PartNum])))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey

	,Company
	,CASE WHEN TRIM(BinNum) like '' OR BinNum like ' ' THEN NULL ELSE TRIM(BinNum) END AS BinNum
	,BatchNum
	,TRIM(SupplierNum) AS SupplierNum
	,TRIM(PartNum) AS PartNum
	,CASE WHEN [DelivTimeDesc] = 'Weeks' THEN [DelivTime]*7
		WHEN [DelivTimeDesc] = 'Months' THEN [DelivTime]*30
		ELSE [DelivTime]
		END AS [DelivTime]-- convert to days
--	,[DelivTimeUnit] AS [DeliveryTime]
--	,[DelivTimeDesc] 
--	,'' AS DaysOnStock
	,CONVERT(date, LastStockTakeDate) AS LastStockTakeDate
	,CONVERT(date, LastStdCostCalDate) AS LastStdCostCalDate
	,CONVERT(date, [DelivDateSupplier]) AS DelivDateSupplier
	,CONVERT(date, [DelivDateCust]) AS DelivDateCust
	,CONVERT(date, [OrderDateSupplier]) AS OrderDateSupplier
	,CONVERT(date, '') AS OrderDateCust
	,TRIM(Currency) AS Currency
	--,NULL AS SafetyStock
	,MaxStockQty
	,StockBalance
	,FIFOValue AS StockValue
	,AvgCost
	,ReservedQty AS ReserveQty
	,BackOrderQty
	,QtyOrdered AS OrderQty
	,StockTakDiff AS StockTakeDiff
	,ReOrderLevel
	,OptimalOrderQty
	--,'' AS SBRes1
	--,'' AS SBRes2
	--,'' AS SBRes3
FROM 
	[stage].[WID_EE_StockBalance]
GO
PRINT N'Creating [dnb].[MasterTable]'
GO
CREATE TABLE [dnb].[MasterTable]
(
[duns] [int] NULL,
[organization.controlOwnershipDate] [nvarchar] (100) NULL,
[organization.controlOwnershipType.description] [nvarchar] (100) NULL,
[organization.corporateLinkage.domesticUltimate.duns] [nvarchar] (100) NULL,
[organization.corporateLinkage.domesticUltimate.primaryName] [nvarchar] (250) NULL,
[organization.corporateLinkage.globalUltimate.duns] [nvarchar] (100) NULL,
[organization.corporateLinkage.globalUltimate.primaryName] [nvarchar] (250) NULL,
[organization.corporateLinkage.parent.duns] [nvarchar] (100) NULL,
[organization.corporateLinkage.parent.primaryName] [nvarchar] (250) NULL,
[organization.legalForm.description] [nvarchar] (100) NULL,
[organization.legalForm.startDate] [nvarchar] (100) NULL,
[organization.primaryName] [nvarchar] (250) NULL,
[organization.registeredDetails.legalForm.description] [nvarchar] (100) NULL,
[organization.registeredName] [nvarchar] (300) NULL,
[organization.corporateLinkage.headQuarter.duns] [nvarchar] (100) NULL,
[organization.corporateLinkage.headQuarter.primaryName] [nvarchar] (250) NULL,
[organization.legalForm.registrationLocation.addressRegion] [nvarchar] (100) NULL,
[organization.primaryAddress] [nvarchar] (200) NULL,
[organization.primaryAddress.addressCountry.name] [nvarchar] (100) NULL,
[organization.primaryAddress.addressCounty.name] [nvarchar] (100) NULL,
[organization.primaryAddress.addressLocality.name] [nvarchar] (100) NULL,
[organization.primaryAddress.addressRegion.name] [nvarchar] (100) NULL,
[organization.primaryAddress.continentalRegion.name] [nvarchar] (100) NULL,
[organization.primaryAddress.latitude] [nvarchar] (25) NULL,
[organization.primaryAddress.longitude] [nvarchar] (25) NULL,
[organization.primaryAddress.postalCode] [nvarchar] (30) NULL,
[organization.corporateLinkage.hierarchyLevel] [nvarchar] (10) NULL,
[organization.corporateLinkage.role] [nvarchar] (35) NULL,
[organization.isStandalone] [bit] NULL,
[organization.dunsControlStatus.operatingStatus.description] [nvarchar] (80) NULL
)
GO
PRINT N'Creating [meta].[GetTableColumnList_test]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE PROCEDURE [meta].[GetTableColumnList_test] (@tableName varchar(50), 
											@sourceTable varchar(100),
											@ignoreColumns varchar(max), 
											@columnList varchar(max) output, 
											@updateList varchar(max) output,
											@checkForChangeList varchar(max) output)
AS
BEGIN
	SET NOCOUNT ON;
	set @columnList=''
	set @updateList=''
	set @checkForChangeList=''
	set @ignoreColumns = ',' + @ignoreColumns + ','
	declare @schemaName varchar(50) = substring(@tableName, 1, nullif(charindex('.', @tableName), 0)-1) 
	declare @tableOnlyName varchar(50) = replace(@tableName, isnull(@schemaName, '')+'.', '')
	declare @columnName varchar(100)
	declare @columnDataType varchar(200)
	declare @collationType varchar(150)
	declare columnCursor cursor for
	
	---------------------------------------------------------------
	with stage_view_columns as (
	select c.name
	FROM sys.columns c WITH(NOLOCK)  
	JOIN sys.types tp WITH(NOLOCK) ON c.user_type_id = tp.user_type_id  
	LEFT JOIN sys.check_constraints cc WITH(NOLOCK)   
			ON c.[object_id] = cc.parent_object_id   
		AND cc.parent_column_id = c.column_id  
	--WHERE c.[object_id] = (SELECT [object_id] = OBJECT_ID(@sourceTable, 'V') )
	WHERE c.[object_id] = (SELECT [object_id] = OBJECT_ID(@sourceTable) )
	)
	SELECT [target_table_columns].[name], [target_table_columns].[datatype], [target_table_columns].[collation] FROM stage_view_columns
	INNER JOIN (
 		 		select c.name,
				CASE WHEN c.is_computed = 1  
			THEN 'AS ' + OBJECT_DEFINITION(c.[object_id], c.column_id)  
			ELSE   
				CASE WHEN c.system_type_id != c.user_type_id   
					THEN  + SCHEMA_NAME(tp.[schema_id]) + '].[' + tp.name + ']'   
					ELSE  + UPPER(tp.name)   
				END  +   
				CASE   
					WHEN tp.name IN ('varchar', 'char', 'varbinary', 'binary')  
						THEN '(' + CASE WHEN c.max_length = -1   
										THEN 'MAX'   
										ELSE CAST(c.max_length AS VARCHAR(5))   
									END + ')'  
					WHEN tp.name IN ('nvarchar', 'nchar')  
						THEN '(' + CASE WHEN c.max_length = -1   
										THEN 'MAX'   
										ELSE CAST(c.max_length / 2 AS VARCHAR(5))   
									END + ')'  
					WHEN tp.name IN ('datetime2', 'time2', 'datetimeoffset')   
						THEN '(' + CAST(c.scale AS VARCHAR(5)) + ')'  
					WHEN tp.name = 'decimal'  
						THEN '(' + CAST(c.[precision] AS VARCHAR(5)) + ',' + CAST(c.scale AS VARCHAR(5)) + ')'  
					ELSE ''  
				END  
		END  as datatype,
		CASE WHEN c.collation_name IS NOT NULL AND c.system_type_id = c.user_type_id 
			THEN ' COLLATE ' + c.collation_name  
			ELSE ''  
		END as collation
	FROM sys.columns c WITH(NOLOCK)  
	JOIN sys.types tp WITH(NOLOCK) ON c.user_type_id = tp.user_type_id  
	LEFT JOIN sys.check_constraints cc WITH(NOLOCK)   
			ON c.[object_id] = cc.parent_object_id   
		AND cc.parent_column_id = c.column_id  
	--WHERE c.[object_id] = (SELECT [object_id] = OBJECT_ID(@tableName, 'U') )
	WHERE c.[object_id] = (SELECT [object_id] = OBJECT_ID(@tableName) )
	) AS target_table_columns ON stage_view_columns.name = target_table_columns.name
	---------------------------------------------------------------
	open columnCursor
	fetch next from	columnCursor
		into @columnName, @columnDataType, @collationType

	WHILE @@FETCH_STATUS = 0
	BEGIN
		if CHARINDEX(','+@columnName+',', @ignoreColumns)=0 
		Begin
			set @columnList=@columnList+@columnName +','
			set @updateList = @updateList + @columnName + ' = source.'+@columnName + ','+Char(10)
			set @checkForChangeList = @checkForChangeList + 'isnull(cast(convert(' + @columnDataType + ',' +'target.'+@columnName + ')' + @collationType + ' as varchar(max))' + ', '''' ) '+
														  '= isnull(cast(convert(' + @columnDataType + ',' +'source.'+@columnName + ')' + @collationType + ' as varchar(max))' + ', '''' )  And'+Char(10)
		End
		fetch next from	columnCursor
		into @columnName, @columnDataType, @collationType
	END

	close columnCursor
	deallocate columnCursor
	set @columnList = left(@columnList, len(@columnList)-1)
	set @updateList = left(@updateList, len(@updateList)-2)	
	set @checkForChangeList = left(@checkForChangeList, len(@checkForChangeList)-4)
	
	--print('-------------------------')
	--print('columnList')
	--print(@columnList)
	--print('-------------------------')
	--print('updateList')
	--print(@updateList)
	--print('-------------------------')
	--print('checkForChangeList')
	--print(@checkForChangeList)
	--print('-------------------------')
	--print('ignoreColumns')
	--print(@ignoreColumns)
END
GO
PRINT N'Creating [dnb].[DunsHierarchy]'
GO
CREATE PROCEDURE [dnb].[DunsHierarchy] 

AS

BEGIN TRY
	DECLARE @ds_bloque NVARCHAR(80);
    

	DECLARE @MergeStatement varchar(max);
	DECLARE @targetTable varchar(100) = 'dnb.dimDUNSHierarchy'
	DECLARE @sourceTable varchar(100) = 'stage.dimDUNSHierarchy'
	DECLARE @ignoreColumns varchar(100) = 'duns'
	DECLARE @columns			VARCHAR(MAX);
	DECLARE @updateColumns		VARCHAR(MAX);
	DECLARE @checkChangeColumns VARCHAR(MAX);
	DECLARE @sourceUnionColumn varchar(50) = 'duns';
	DECLARE @targetUnionColumn varchar(50) = 'duns';
	DECLARE @date varchar(20) = cast(getdate() as date)

	SET @ds_bloque = 'Merge source and target tables';
	BEGIN TRAN @ds_bloque;

		exec meta.GetTableColumnList_test
			@targetTable, 
			@sourceTable,
			@ignoreColumns,
			@ColumnList=        @columns			output,
			@updateList=		@updateColumns		output ,
			@checkForChangeList=@checkChangeColumns output

		SET @MergeStatement = 'MERGE ' + @targetTable + ' as target
								Using ' + @sourceTable + ' as source 
								ON target.' + @targetUnionColumn + ' = source.' + @sourceUnionColumn + CHAR(10) +
								' WHEN MATCHED AND ('
								+ CHAR(10)
								+ ' NOT (' + @checkChangeColumns + '))'
								+ ' THEN UPDATE SET ' + @updateColumns  + ','
								+ CHAR(10)
								+ 'last_modified_date = ''' + @date + ''''
								+ ' WHEN NOT MATCHED BY TARGET THEN'
								+ CHAR(10)
								+ ' INSERT (' + @targetUnionColumn + ',' + @columns + ',last_modified_date)'
								+ ' VALUES (' + @sourceUnionColumn + ',' + @columns + ',''' + @date +''')'
								+ ' WHEN NOT MATCHED BY SOURCE THEN DELETE'
								+ ';' 
		EXEC(@MergeStatement)

	COMMIT TRAN @ds_bloque;

	SET @ds_bloque = 'Update dnb.dimDUNS_Names';
	BEGIN TRAN @ds_bloque;

		with tmp as (
		select distinct duns from dnb.DnBCustomerAndSupplier 
		where last_modified_date = (
		select MAX(last_modified_date)
		from dnb.DnBCustomerAndSupplier)
		)
		, parent as 
		(
		select distinct m.[organization.corporateLinkage.parent.duns] as duns, m.[organization.corporateLinkage.parent.primaryName] as name
		from dnb.MasterTable as m
		INNER JOIN tmp as t
			ON m.duns = t.duns
		group by m.[organization.corporateLinkage.parent.duns], m.[organization.corporateLinkage.parent.primaryName]
		)
		, hq as 
		(
		select distinct m.[organization.corporateLinkage.headQuarter.duns] as duns, m.[organization.corporateLinkage.headQuarter.primaryName] as name
		from dnb.MasterTable as m
		INNER JOIN tmp as t
			ON m.duns = t.duns
		group by m.[organization.corporateLinkage.headQuarter.duns], m.[organization.corporateLinkage.headQuarter.primaryName]
		)
		, gu as 
		(
		select distinct m.[organization.corporateLinkage.globalUltimate.duns] as duns, m.[organization.corporateLinkage.globalUltimate.primaryName] as name
		from dnb.MasterTable as m
		INNER JOIN tmp as t
			ON m.duns = t.duns
		group by m.[organization.corporateLinkage.globalUltimate.duns], m.[organization.corporateLinkage.globalUltimate.primaryName]
		)
		, normal_duns as 
		(
		select distinct m.duns as duns, m.[organization.primaryName] as name
		from dnb.MasterTable as m
		INNER JOIN tmp as t
			ON m.duns = t.duns
		group by m.duns, m.[organization.primaryName]
		)
		, all_together as 
		(
		select duns,name
		from parent
		union
		select duns,name
		from hq
		union
		select duns,name
		from gu
		union
		select duns,name
		from normal_duns
		)
		, duns_unique as (
		select duns
		from all_together
		group by duns
		having COUNT(1) = 1 )
		MERGE dnb.dimDUNS_Names as target
		USING (select duns,name	from all_together where duns in (select duns from duns_unique)) as source
			ON target.duns = source.duns
		WHEN MATCHED and target.name != source.name THEN UPDATE SET
			target.name = source.name
		WHEN NOT MATCHED BY TARGET THEN
			INSERT (duns,name)
			VALUES (source.duns,source.name)
		;

	COMMIT TRAN @ds_bloque;

END TRY

BEGIN CATCH
	IF @@TRANCOUNT > 0
	ROLLBACK;
	DECLARE @ErrorMessage NVARCHAR(4000), @Bloque NVARCHAR(80),@ErrorLine INT;
	SET @Bloque = @ds_bloque;
	SET @ErrorLine = ERROR_LINE();
	SELECT @ErrorMessage = ERROR_MESSAGE();
	RAISERROR('Error en la transacción %s, línea %d: %s',16,1,@Bloque, @ErrorLine, @ErrorMessage);
END CATCH
GO
PRINT N'Creating [stage].[AXL_DK_SalesLedger]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[AXL_DK_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceAmount] [decimal] (18, 4) NULL,
[RemainAmount] [decimal] (18, 4) NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vAXL_DK_SalesLedger]'
GO
CREATE VIEW [stage].[vAXL_DK_SalesLedger] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(sl.Company, '#', TRIM(sl.CustNum), '#', TRIM(sl.InvoiceNum))))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(sl.Company))) AS CompanyID
	,UPPER(CONCAT(sl.Company, '#', TRIM(sl.CustNum), '#', TRIM(sl.InvoiceNum))) AS SalesLedgerCode
	,sl.PartitionKey

	,UPPER(sl.Company) AS Company
	,UPPER(TRIM(sl.CustNum)) AS CustomerNum
	,TRIM(sl.InvoiceNum) AS [SalesInvoiceNum]
	,IIF(so.InvoiceDate = '' OR so.InvoiceDate IS NULL, '1900-01-01', so.InvoiceDate) AS [SalesInvoiceDate] --
	,CONVERT(date, DueDate) AS SalesDueDate
	,CONVERT(date, LastPaymentDate) AS LastPaymentDate
	,[InvoiceAmount]
	,[RemainAmount] AS [RemainingInvoiceAmount]
	,NULL AS CashDiscOffered
	,NULL AS CashDiscUsed
	,NULL AS [ExchangeRate]
	,NULL AS [Currency]
	,NULL AS [VATAmount]
	,NULL AS [VATCode]
	,NULL AS [PayToName]
	,NULL AS [PayToCity]
	,NULL AS [PayToContact]
	,NULL AS [PaymentTerms]
	,sl.Res1 AS SLRes1
	,sl.Res2 AS SLRes2
	,sl.Res3 AS SLRes3
FROM stage.AXL_DK_SalesLedger sl
	LEFT JOIN stage.AXL_CZ_SOLine so ON TRIM(sl.InvoiceNum) = TRIM(so.InvoiceNum)
WHERE DueDate > '2015-01-01'
GROUP BY
	sl.PartitionKey, sl.Company, sl.CustNum, sl.InvoiceNum, sl.Res2, sl.Res1, sl.Res3, sl.[InvoiceAmount], sl.[RemainAmount], so.InvoiceDate, DueDate, LastPaymentDate
GO
PRINT N'Creating [stage].[TRA_SE_StockTransaction]'
GO
CREATE TABLE [stage].[TRA_SE_StockTransaction]
(
[PartitionKey] [nvarchar] (25) NULL,
[Company] [nvarchar] (8) NULL,
[IndexKey] [nvarchar] (60) NULL,
[WarehouseCode] [nvarchar] (8) NULL,
[TransactionCode] [nvarchar] (60) NULL,
[TransactionCodeDescription] [nvarchar] (50) NULL,
[IsInternalTransaction] [nvarchar] (1) NULL,
[CustomerNum] [nvarchar] (20) NULL,
[SupplierNum] [nvarchar] (20) NULL,
[SalesOrderNum] [nvarchar] (60) NULL,
[SalesOrderLine] [nvarchar] (60) NULL,
[PurchaseOrderNum] [nvarchar] (60) NULL,
[PurchaseOrderLine] [nvarchar] (60) NULL,
[SalesInvoiceNum] [nvarchar] (60) NULL,
[SalesInvoiceLine] [nvarchar] (60) NULL,
[PurchaseInvoiceNum] [nvarchar] (25) NULL,
[PurchaseInvoiceLine] [nvarchar] (60) NULL,
[PartNum] [nvarchar] (30) NULL,
[BinNum] [nvarchar] (20) NULL,
[TransactionDate] [nvarchar] (60) NULL,
[TransactionQty] [nvarchar] (60) NULL,
[Stockbalance] [nvarchar] (60) NULL,
[TransactionValue] [nvarchar] (60) NULL,
[Currency] [nvarchar] (3) NULL,
[ExchangeRate] [nvarchar] (1) NULL,
[CreatedTimeStamp] [nvarchar] (38) NULL,
[ModifiedTimeStamp] [nvarchar] (60) NULL,
[RecordIsActive] [nvarchar] (1) NULL
)
GO
PRINT N'Creating [stage].[vTRA_SE_StockTransaction]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vTRA_SE_StockTransaction]
	AS select 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(PartNum),'#',TRIM(WarehouseCode),'#',IndexKey)))) AS StockTransactionID,
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Company])))) AS CompanyID,
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM(CustomerNum))))) AS CustomerID,
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM([PartNum]))))) AS PartID,
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([SupplierNum]))))) AS SupplierID,
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM([WarehouseCode]))))) AS WarehouseID

	,PartitionKey
	,UPPER(Company) as Company
	,trim(IndexKey) as IndexKey
	,trim(WarehouseCode) as WarehouseCode
	,trim(TransactionCode) as TransactionCode
	,trim(TransactionCodeDescription) as TransactionCodeDescription
	,cast(IsInternalTransaction as bit) as IsInternalTransaction
	,trim(CustomerNum) as CustomerNum
	,trim(SupplierNum) as SupplierNum
	,trim(SalesOrderNum) as SalesOrderNum
	,trim(SalesOrderLine) as SalesOrderLine
	,trim(PurchaseOrderNum) as PurchaseOrderNum
	,trim(PurchaseOrderLine) as PurchaseOrderLine
	,trim(SalesInvoiceNum) as SalesInvoiceNum
	,trim(SalesInvoiceLine) as SalesInvoiceLine
	,trim(PurchaseInvoiceLine) as PurchaseInvoiceLine
	,trim(PurchaseInvoiceNum) as PurchaseInvoiceNum
	,trim(PartNum) as PartNum
	, trim(BinNum) as BinNum
	,cast(TransactionDate as date) as TransactionDate
	,cast(TransactionQty as decimal(18,4)) as TransactionQty
	,cast(TransactionValue as decimal(18,4)) as TransactionValue
	,Currency
	,CAST(ExchangeRate as decimal(18,4)) as ExchangeRate
	,cast(RecordIsActive as bit) as IsActiveRecord
from stage.TRA_SE_StockTransaction
;
GO
PRINT N'Creating [axbus].[IOW_PL_Customer]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [axbus].[IOW_PL_Customer]
(
[PartitionKey] [nvarchar] (50) NULL,
[Company] [nvarchar] (50) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[MainCustomerName] [nvarchar] (max) NULL,
[CustomerName] [nvarchar] (max) NULL,
[AddressLine1] [nvarchar] (max) NULL,
[AddressLine2] [nvarchar] (max) NULL,
[AddressLine3] [nvarchar] (max) NULL,
[TelephoneNum1] [nvarchar] (max) NULL,
[TelephoneNum2] [nvarchar] (max) NULL,
[Email] [nvarchar] (max) NULL,
[ZipCode] [nvarchar] (50) NULL,
[City] [nvarchar] (max) NULL,
[State] [nvarchar] (max) NULL,
[CountryName] [nvarchar] (max) NULL,
[CountryCode] [nvarchar] (max) NULL,
[Division] [nvarchar] (max) NULL,
[CustomerIndustry] [nvarchar] (max) NULL,
[CustomerSubIndustry] [nvarchar] (max) NULL,
[CustomerGroup] [nvarchar] (max) NULL,
[CustomerSubGroup] [nvarchar] (max) NULL,
[SalesPersonCode] [nvarchar] (max) NULL,
[SalesPersonName] [nvarchar] (max) NULL,
[SalesPersonResponsible] [nvarchar] (max) NULL,
[CustomerScore] [nvarchar] (max) NULL,
[CustomerType] [nvarchar] (max) NULL,
[VATNum] [nvarchar] (50) NULL,
[AccountNum] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[SalesDistrict] [nvarchar] (max) NULL,
[CRes1] [nvarchar] (max) NULL,
[CRes2] [nvarchar] (max) NULL,
[CRes3] [nvarchar] (max) NULL,
[CreatedTimeStamp] [nvarchar] (max) NULL,
[ModifiedTimeStamp] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[vIOW_PL_Customer]'
GO

CREATE VIEW [stage].[vIOW_PL_Customer] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustomerNum))))) AS CustomerID
	,UPPER(CONCAT(Company, '#', TRIM(CustomerNum))) AS CustomerCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,PartitionKey --getdate() AS 

	,UPPER(TRIM(Company)) AS Company
	,UPPER(TRIM([CustomerNum])) AS [CustomerNum]
	,TRIM(MainCustomerName) AS MainCustomerName
    ,TRIM(CustomerName) AS CustomerName
	,TRIM([AddressLine1]) AS [AddressLine1]
	,TRIM([AddressLine2]) AS [AddressLine2]
	,TRIM([AddressLine3]) AS [AddressLine3]
	,TRIM(TelephoneNum1) AS TelephoneNum1
	,TRIM(TelephoneNum2) AS TelephoneNum2
	,TRIM([Email]) AS [Email]
	,TRIM(ZIPCode) AS [ZipCode]
	,TRIM(City) AS City
	,TRIM([State]) AS [State]
	,TRIM(SalesDistrict) AS SalesDistrict
	,TRIM([CountryName]) AS [CountryName]
	,TRIM([CountryCode]) AS [CountryCode]
	,TRIM(Division) AS Division
	,TRIM(CustomerIndustry) AS CustomerIndustry
	,TRIM(CustomerSubIndustry) AS CustomerSubIndustry
	,[AddressLine1] AS [AddressLine]
	,CONCAT(COALESCE(Countryname, Countryname), ', ' + trim([City]),  ', ' + TRIM(ZIPCode),', ' + trim(addressline1)) AS [FullAddressLine]
	,TRIM([CustomerGroup]) AS [CustomerGroup]
	,(TRIM([CustomerSubGroup])) AS [CustomerSubGroup] --MAX
	,TRIM([SalesPersonCode]) AS [SalesPersonCode]
	,TRIM([SalesPersonName]) AS [SalesPersonName]
	,TRIM([SalesPersonResponsible]) AS [SalesPersonResponsible]
	,TRIM([VATNum]) AS [VATNum]
	,TRIM([VATNum]) AS OrganizationNum
	,TRIM([AccountNum]) AS [AccountNum]
	,TRIM([InternalExternal]) AS [InternalExternal]
	,TRIM([CustomerScore]) AS [CustomerScore]
	,TRIM([CustomerType]) AS [CustomerType]
	,CONVERT(Date,'1900-01-01') AS [ValidFrom]
	,CONVERT(Date,'1900-01-01') AS [ValidTo]
FROM axbus.IOW_PL_Customer
--GROUP BY 
--	PartitionKey
--	,Company
--	,[CustomerNum]
--	,MainCustomerName
--    ,CustomerName
--	,[AddressLine1]
--	,[AddressLine2]
--	,[AddressLine3]
--	,TelephoneNum1
--	,TelephoneNum2
--	,[Email]
--	,ZIPCode
--	,City
--	,[State]
--	,SalesDistrict
--	,[CountryName]
--	,Division
--	,CustomerIndustry
--	,CustomerSubIndustry
--	,[CustomerGroup]
----	,[CustomerSubGroup]
--	,[SalesPersonCode]
--	,[SalesPersonName]
--	,[SalesPersonResponsible]
--	,[VATNum]
--	,[AccountNum]
--	,[InternalExternal]
--	,[CustomerScore]
--	,[CustomerType]
GO
PRINT N'Creating [dw].[SalesOrder]'
GO
CREATE TABLE [dw].[SalesOrder]
(
[SalesOrderID] [binary] (32) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NULL,
[SalesOrderNum] [nvarchar] (50) NOT NULL,
[SalesOrderLine] [nvarchar] (50) NULL,
[SalesOrderSubLine] [nvarchar] (50) NULL,
[SalesOrderType] [nvarchar] (50) NULL,
[SalesOrderCategory] [nvarchar] (50) NULL,
[SalesOrderDate] [date] NULL,
[NeedbyDate] [date] NULL,
[ExpDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[SalesInvoiceNum] [nvarchar] (50) NULL,
[SalesOrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (20) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartType] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (100) NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[Department] [nvarchar] (50) NULL,
[ProjectNum] [nvarchar] (50) NULL,
[IndexKey] [nvarchar] (50) NULL,
[Cancellation] [nvarchar] (50) NULL,
[SORes1] [nvarchar] (100) NULL,
[SORes2] [nvarchar] (100) NULL,
[SORes3] [nvarchar] (100) NULL,
[CompanyID] [binary] (32) NULL,
[CustomerID] [binary] (32) NULL,
[PartID] [binary] (32) NULL,
[WarehouseID] [binary] (32) NULL,
[SalesOrderNumID] [binary] (32) NULL,
[SalesOrderCode] [nvarchar] (300) NULL,
[SalesOrderDateID] [int] NULL,
[PartitionKey] [varchar] (50) NOT NULL,
[ConfirmedDelivDate] [date] NULL CONSTRAINT [DF__SalesOrde__Confi__0559BDD1] DEFAULT ('1900-01-01'),
[ProjectID] [binary] (32) NULL,
[AxInterSalesChannel] [nvarchar] (50) NULL,
[SalesInvoiceQty] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[IsUpdatingStock] [nvarchar] (50) NULL,
[SORes4] [decimal] (18, 4) NULL,
[SORes5] [decimal] (18, 4) NULL,
[SORes6] [decimal] (18, 4) NULL,
[is_deleted] [bit] NULL,
[DepartmentID] [binary] (32) NULL,
[ActualShipDate] [date] NULL,
[CommittedDelivDate] [date] NULL,
[DepartmentCode] [nvarchar] (50) NULL,
[ExpShipDate] [date] NULL,
[IsActiveRecord] [bit] NULL,
[IsOrderClosed] [bit] NULL,
[OrderHandler] [nvarchar] (100) NULL,
[OrgCommittedDelivDate] [date] NULL,
[OrgExpDelivDate] [date] NULL,
[OrgExpShipDate] [date] NULL,
[OrgReqDelivDate] [date] NULL,
[ReqDelivDate] [date] NULL
)
GO
PRINT N'Creating primary key [PK_SalesOrder] on [dw].[SalesOrder]'
GO
ALTER TABLE [dw].[SalesOrder] ADD CONSTRAINT [PK_SalesOrder] PRIMARY KEY CLUSTERED ([SalesOrderID])
GO
PRINT N'Creating index [IX_Company] on [dw].[SalesOrder]'
GO
CREATE NONCLUSTERED INDEX [IX_Company] ON [dw].[SalesOrder] ([Company])
GO
PRINT N'Creating index [IX_Company_SalesOrderDate] on [dw].[SalesOrder]'
GO
CREATE NONCLUSTERED INDEX [IX_Company_SalesOrderDate] ON [dw].[SalesOrder] ([Company], [SalesOrderDate] DESC)
GO
PRINT N'Creating index [nci_wi_SalesOrder_PartitionKey] on [dw].[SalesOrder]'
GO
CREATE NONCLUSTERED INDEX [nci_wi_SalesOrder_PartitionKey] ON [dw].[SalesOrder] ([PartitionKey])
GO
PRINT N'Creating [dw].[Customer]'
GO
CREATE TABLE [dw].[Customer]
(
[CustomerID] [binary] (32) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NULL,
[MainCustomerName] [nvarchar] (100) NULL,
[CustomerName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[AddressLine3] [nvarchar] (100) NULL,
[TelephoneNum1] [nvarchar] (50) NULL,
[TelephoneNum2] [nvarchar] (50) NULL,
[Email] [nvarchar] (100) NULL,
[ZipCode] [nvarchar] (50) NULL,
[City] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[SalesDistrict] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[Division] [nvarchar] (50) NULL,
[CustomerIndustry] [nvarchar] (50) NULL,
[CustomerSubIndustry] [nvarchar] (50) NULL,
[AddressLine] [nvarchar] (250) NULL,
[FullAddressLine] [nvarchar] (500) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (50) NULL,
[SalesPersonCode] [nvarchar] (50) NULL,
[SalesPersonName] [varchar] (100) NULL,
[SalesPersonResponsible] [nvarchar] (100) NULL,
[VATNum] [nvarchar] (50) NULL,
[OrganizationNum] [nvarchar] (100) NULL,
[AccountNum] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[CustomerScore] [nvarchar] (20) NULL,
[CustomerType] [nvarchar] (50) NULL,
[CustomerCode] [nvarchar] (200) NULL,
[CompanyID] [binary] (32) NOT NULL,
[PartitionKey] [varchar] (50) NOT NULL,
[CountryCode] [nvarchar] (10) NULL,
[is_deleted] [bit] NULL,
[is_inferred] [bit] NULL,
[IsBusinessAreaInternal] [bit] NULL,
[IsCompanyGroupInternal] [bit] NULL,
[IsActiveRecord] [bit] NULL,
[Comments] [nvarchar] (600) NULL,
[CRes1] [nvarchar] (100) NULL,
[CRes2] [nvarchar] (100) NULL,
[CRes3] [nvarchar] (100) NULL,
[CreditLimit] [decimal] (18, 4) NULL,
[PaymentTerms] [nvarchar] (50) NULL
)
GO
PRINT N'Creating primary key [PK_Customer] on [dw].[Customer]'
GO
ALTER TABLE [dw].[Customer] ADD CONSTRAINT [PK_Customer] PRIMARY KEY CLUSTERED ([CustomerID])
GO
PRINT N'Creating index [nci_wi_Company] on [dw].[Customer]'
GO
CREATE NONCLUSTERED INDEX [nci_wi_Company] ON [dw].[Customer] ([Company])
GO
PRINT N'Creating [dm].[DimSalesOrderDistinct]'
GO
CREATE VIEW [dm].[DimSalesOrderDistinct] AS
--based on the [dm].[FactSalesOrderDistinctExt]
WITH SalesOrderDistinct AS
(SELECT
	CONVERT (bigint, o.CompanyID ) AS CompanyID
	,CONVERT(bigint, o.SalesOrderNumID) AS SalesOrderNumID
	,MIN(CONVERT(bigint, o.CustomerID)) AS CustomerID  --MIN(CONVERT(bigint, o.CustomerID)) AS CustomerID removed 2022-08-23 -- 29/8 re-installed, must have
	,MIN(o.Company) AS Company
	,MIN(o.SalesOrderNum) AS SalesOrderNum
	,MIN(CONCAT(c.CustomerNum, '-', c.CustomerName)) AS Customer -- must remain, ST needs
	,'' AS SalesPersonName -- o.SalesPersonName  AS SalesPersonName
	,o.SalesChannel AS SalesChannel
	,o.AxInterSalesChannel AS AxInterSalesChannel
	,o.Department AS Department  --Sam/DZ 20221111
FROM 
	dw.SalesOrder AS o
	LEFT JOIN dw.Customer AS c ON o.CompanyID = c.CompanyID AND o.CustomerID = c.CustomerID
WHERE o.SalesOrderNumID is not null  --o.Company not like 'MEN%' and Mennen has gaven duplications and CERNO had Null in SalesOrderNumID
GROUP BY
		o.CompanyID, SalesOrderNumID, SalesChannel, AxInterSalesChannel, o.Department
)
	SELECT 
		CompanyID
		,Company
		,MIN(SalesOrderNumID) AS SalesOrderNumID
		,SalesOrderNum
		,MIN(CustomerID) AS CustomerID -- MIN(CustomerID) AS CustomerID removed 2022-08-23-- 29/8 re-installed, must have
		,MIN(Customer) AS Customer -- MIN(Customer) AS Customer removed 2022-08-23 -- 29/8 re-installed, must have
		,'' AS SalesPersonName --MIN(SalesPersonName) AS SalesPersonName --added 2022-04-27, there are cases (eg.SalesOrderNum = '1982017029') where one order can connect to several salesperson, but in total is a small percentage (0,05% = 2804/5114219), we choose one so that 1:* relationship is valid
		,MIN(SalesChannel) AS SalesChannel --added 2022-04-27, there are cases (eg.SalesOrderNum = '1982017029') where one order can connect to several SalesChannel, but in total is a small percentage (0,05% = 2804/5114219), we choose one so that 1:* relationship is valid
		,MIN(AxInterSalesChannel) AS AxInterSalesChannel --the same as SalesChannel & SalesPersonName
		,MIN(Department) AS Department
	FROM SalesOrderDistinct
	WHERE SalesOrderNumID is not NULL 

	--SalesOrderDate >= DATEADD(year, DATEDIFF(YEAR, 0, dateadd(year, - 4, GETDATE())), 0)
	GROUP BY CompanyID, Company, SalesOrderNum--, Department --, CustomerID, Customer --, SalesOrderNumID
GO
PRINT N'Creating [dm_IN].[dimSalesOrderDistinct]'
GO




CREATE VIEW [dm_IN].[dimSalesOrderDistinct] AS

SELECT sod.[CompanyID]
,sod.[Company]
,sod.[SalesOrderNumID]
,sod.[SalesOrderNum]
,sod.[CustomerID]
,sod.[Customer]
,sod.[SalesPersonName]
,sod.[SalesChannel]
,sod.[AxInterSalesChannel]
,sod.[Department]

FROM dm.DimSalesOrderDistinct as sod

WHERE sod.Company  in ('OCSSE')  -- Industry basket
GO
PRINT N'Creating [stage].[MEN_NL_SalesLedger]'
GO
CREATE TABLE [stage].[MEN_NL_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[CustomerNum] [nvarchar] (50) NULL,
[SalesInvoiceNum] [nvarchar] (50) NULL,
[SalesInvoiceDate] [date] NULL,
[SalesDueDate] [date] NULL,
[SalesLastPaymentDate] [date] NULL,
[InvoiceAmount] [decimal] (18, 8) NULL,
[PaidInvoiceAmount] [decimal] (18, 8) NULL,
[RemainingInvoiceAmount] [decimal] (18, 8) NULL,
[AccountingDate] [date] NULL,
[Currency] [nvarchar] (50) NULL,
[VATAmount] [decimal] (18, 8) NULL,
[VATCode] [nvarchar] (50) NULL,
[PayToName] [nvarchar] (50) NULL,
[PayToCity] [nvarchar] (50) NULL,
[PayToContact] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 8) NULL,
[Agingperiod] [nvarchar] (50) NULL,
[AgingSort] [nvarchar] (50) NULL,
[VATCodeDesc] [nvarchar] (200) NULL,
[PaymentTerms] [nvarchar] (100) NULL,
[SLRes1] [nvarchar] (100) NULL,
[SLRes2] [nvarchar] (100) NULL,
[SLRes3] [nvarchar] (100) NULL,
[AmountExclVAT] [decimal] (18, 8) NULL,
[DebiteurKey] [nvarchar] (50) NULL,
[DW_TimeStamp] [date] NULL
)
GO
PRINT N'Creating [stage].[vMEN_NL_SalesLedger]'
GO








/****** Script for SelectTopNRows command from SSMS  ******/

CREATE VIEW [stage].[vMEN_NL_SalesLedger] AS
WITH CTE AS (
SELECT	
		CASE WHEN Company = '14' THEN  CONCAT(N'MENBE',Company) 
			ELSE  CONCAT(N'MENNL',Company)  END AS CompanyCode	
	  ,[PartitionKey], [Company], [CustomerNum], [SalesInvoiceNum], [SalesInvoiceDate], [SalesDueDate], [SalesLastPaymentDate], [InvoiceAmount], [PaidInvoiceAmount], [RemainingInvoiceAmount], [AccountingDate], [Currency], [VATAmount], [VATCode], [PayToName], [PayToCity], [PayToContact], [ExchangeRate], [Agingperiod], [AgingSort], [VATCodeDesc], [PaymentTerms], [SLRes1], [SLRes2], [SLRes3], [AmountExclVAT], [DebiteurKey], [DW_TimeStamp]
	  ,ROW_NUMBER() OVER (PARTITION BY Company, SalesInvoiceNum ORDER BY SalesLastPaymentDate) AS rownum
  FROM [stage].[MEN_NL_SalesLedger]
)
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(CompanyCode, '#', TRIM(SalesInvoiceNum)))) AS SalesLedgerID,
	CONVERT([binary](32),HASHBYTES('SHA2_256', CompanyCode)) AS CompanyID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(CompanyCode,'#',CustomerNum))) AS CustomerID,
	CONCAT(CompanyCode,'#', SalesInvoiceNum) AS SalesLedgerCode,
	PartitionKey,

	CompanyCode	AS Company,
	TRIM(CustomerNum) AS CustomerNum,
	TRIM(SalesInvoiceNum) AS SalesInvoiceNum,
	SalesInvoiceDate		AS SalesInvoiceDate,
	SalesDueDate,
	SalesLastPaymentDate,
	InvoiceAmount,
	RemainingInvoiceAmount,
    ExchangeRate,
	case when currency is null 
	         then 'EUR'
		 ELSE Currency 
		 END AS Currency,
	VATAmount,
	''AS VATCode,
	PayToName,
	PayToCity,
	PayToContact,
	PaymentTerms,
	'' AS SLRes1,
	'' AS SLRes2,
	'' AS SLRes3,
	PaidInvoiceAmount,
	AccountingDate
	,NULL AS AgingPeriod
	,NULL AS AgingSort
	,NULL AS VATCodeDesc
	,NULL AS LinkToOriginalInvoice
FROM CTE
where rownum = 1
GO
PRINT N'Creating [stage].[JEN_SE_Part]'
GO
CREATE TABLE [stage].[JEN_SE_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartDescription] [nvarchar] (100) NULL,
[PartDescription2] [nvarchar] (100) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[ProductGroup2] [nvarchar] (50) NULL,
[CommodityCode] [nvarchar] (50) NULL,
[CountryOfOrigin] [nvarchar] (50) NULL,
[NetWeight] [decimal] (18, 4) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[ReorderLevel] [decimal] (18, 4) NULL,
[EAN] [nvarchar] (50) NULL,
[StockItemStatus] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vJEN_SE_Part]'
GO
CREATE VIEW [stage].[vJEN_SE_Part] AS
--COMMENT EMPTY FIELD / ADD UPPER() TRIM() INTO PartID 2022-12-19 VA
SELECT 
	--CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',[PartNum]))) AS PartID
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',[Company])) AS CompanyID
	,CONCAT([Company],'#',[PartNum]) AS PartCode
	,PartitionKey

	,[Company]
	,[PartNum]
	--,'' AS [PartName]
	,[PartDescription]
	,[PartDescription2]
	--,'' AS [PartDescription3]
	,SupplierCode AS MainSupplier
	--,NULL AS AlternativeSupplier
	,[ProductGroup]
	,[ProductGroup2]
	--,'' AS [ProductGroup3]
	--,'' AS [ProductGroup4]
	--,'' AS [Brand]
	,[CommodityCode]
	--,'' AS PartReplacementNum
	,StockItemStatus AS PartStatus
	,[CountryOfOrigin]
	,[NetWeight]
	--,'' AS UoM
	--,'' AS [Material]
	,EAN AS [Barcode]
	,[ReOrderLevel]
	--,'' AS PartResponsible
	--,'' AS [StartDate]
	--,'' AS [EndDate]

FROM [stage].[JEN_SE_Part]
GO
PRINT N'Creating [audit].[RunLog]'
GO
CREATE TABLE [audit].[RunLog]
(
[RunLogId] [uniqueidentifier] NOT NULL CONSTRAINT [DF_RunLog_RunLogId] DEFAULT (newid()),
[PartitionKey] [varchar] (50) NULL,
[ProcName] [varchar] (100) NOT NULL,
[FromTable] [varchar] (100) NULL,
[ToTable] [varchar] (100) NULL,
[StartTime] [datetime] NOT NULL CONSTRAINT [DF_RunLog_StartTime] DEFAULT (getdate()),
[EndTime] [datetime] NOT NULL,
[DurationSeconds] AS (datediff(second,[StartTime],[EndTime])),
[RowsAffected] [int] NULL,
[StatusName] [varchar] (10) NOT NULL,
[ErrorMessage] [varchar] (max) NULL,
[MergeExecuted] [varchar] (50) NULL,
[Date] [date] NULL
)
GO
PRINT N'Creating [audit].[WriteLog]'
GO


-- =============================================
-- Author:		Richard Lautmann
-- Create date: 2016-04-18
-- Description:	Execution logs from stored procedures within the database
-- =============================================
CREATE PROCEDURE [audit].[WriteLog] (
									@PartitionKey varchar(50), 
									@ProcName varchar(50), 
									@FromTable varchar(50), 
									@ToTable varchar(50), 
									@StartTime datetime, 
									@EndTime datetime,
									@rowsAffected int,
									@StatusName varchar(50), 
									@ErrorMessage varchar(max),
									@MergeExecuted varchar(50),
									@Date date)
AS
BEGIN
	SET NOCOUNT ON;

	insert into audit.RunLog ( PartitionKey, ProcName, FromTable, ToTable, StartTime, EndTime,rowsAffected, StatusName, ErrorMessage, MergeExecuted, Date)
	values ( @PartitionKey, @ProcName, @FromTable, @ToTable, @StartTime, @EndTime,@rowsAffected,@StatusName, @ErrorMessage, @MergeExecuted, @Date)

END
GO
PRINT N'Creating [audit].[TmpTableLog]'
GO
CREATE TABLE [audit].[TmpTableLog]
(
[sourceTable] [nvarchar] (100) NULL,
[timeInSeconds] [int] NULL
)
GO
PRINT N'Creating [meta].[LoadTableAndHistory_dev_tomas]'
GO
-- =============================================
-- Author:		Richard Lautmann
-- Create date: 2012-03-01
-- Description:	Generic procedure for insert/update 

-- Basically how it works:
-- The procedure looks at the target table and dynamically finds the columns, except those deinfed to be
-- igored and the insert audit columns, and creates a merge statement based on those conditions.   
-- It expects the source to have the same columns, and based on that it creates a merge statement. It also requires
-- rows to have a natural key, a code in one column. 

-- How to Use 
-- exec meta.LoadTableAndHistory @targetTable='Airport', @sourceTable='KS_Import..vAirport', @targetNKColumn='AirportCode',@PartitionId=1

-- Required parameters are: PartitionId, targetTable, sourceTable and targetNKColumn. 
-- You can override the names of the source audit column, source natural key column, the insert audit column and the 
-- update audit column. You can also define columns to ignore in the comparison, default is to compare all columns
-- except audit, primary keys and natural keys.   
-- =============================================

/*

exec [meta].[LoadTableAndHistory_dev_tomas] 
@PartitionKey = '2023-03-14 00:00:00', 
@targetTable = 'dw.SalesOrder', 
@sourceTable = 'stage.vTRA_FR_OLine', 
@targetNKColumn = 'SalesOrderID',
@debugOnly = ,
@dwFilterColumnName = null,
@deltaLoadStatement = 'WHERE 1 = 1',
@dateFilter = ''

*/
-- 

-- If stageView is empty then crashes.

CREATE PROCEDURE [meta].[LoadTableAndHistory_dev_tomas] (
	@PartitionKey varchar(50),
	@targetTable varchar(50), 
	@sourceTable varchar(50), 
	@targetNKColumn varchar(50),
	@sourceNKColumn varchar(50)='',
	@sourceAuditColumn varchar(50)='PartitionKey', 
	@updateAuditColumn varchar(50)='PartitionKey',
	@insertAuditColumn varchar(50)='PartitionKey',
	@ignoreColumns varchar(500)= '', 
	@debugOnly int = 0,
	@dwFilterColumnName varchar(50),
	@deltaLoadStatement varchar(600),
	@dateFilter varchar(50)
	)
AS
BEGIN

	IF @targetTable is not null and LOWER(substring(@targetTable, CHARINDEX('.', @targetTable) + 1, len(@targetTable) - CHARINDEX('.', @targetTable))) != 'stage'
	BEGIN
		--**** Declare variables *******
		Declare  @ProcName varchar(100) = OBJECT_NAME(@@PROCID)
				, @FromTable varchar(100) = @sourceTable
				, @ToTable varchar(100)  = @targetTable
				, @startTime datetime = getdate() AT TIME ZONE 'UTC' AT TIME ZONE 'Central Europe Standard Time' -- Added double conversion to make sure we get the swedish timestamp /SM 2021-10-07
				, @endTime datetime
				, @rowsAffected int
				, @StatusName varchar(10)='OK'
				, @ErrorMessage varchar(max)	
				, @sSql varchar(max)
				, @sSql2 varchar(max)
				, @sSql_detective varchar(max)
				, @columns varchar(max), @updateColumns varchar(max), @checkChangeColumns varchar(max)
				, @tmpTableName varchar(500) = 'stage.[__tmp_LoadTableAndHistory_'+@sourceTable+'_'+@PartitionKey+']' --Changed to @sourceTable instead of @targetTable here to to avoid the error of tmp table already exists with same name when multiple parallel loads are active. /Sm 2021-10-06
				, @minDateQuery varchar(max)
				, @factList varchar(2000) = ', dw.SalesOrder, dw.SalesOrderLog, dw.SalesInvoice, dw.PurchaseOrder, dw.PurchaseInvoice, dw.SalesLedger, dw.StockTransaction, dw.ProductionOrder'
				, @dimList varchar(200) = ', dw.Part, dw.Customer, dw.Supplier, dw.Warehouse, dw.CustomerAgreement, dw.SupplierAgreement, dw.Department, dw.Account, dw.CostUnit, dw.CostBearer, dw.StockBalance'
				, @MergeExecuted varchar(50)
				, @st datetime
				, @et datetime

		declare @date date;

		set @date = CASE 
					WHEN DATEPART(HOUR, @startTime) >= 21
						THEN cast(dateadd(dd,1,@startTime ) as date)
					ELSE cast(@startTime as date) 
					end
		--**** Declare variables *******	

		-- The way we are working now, we should never receive a LEN(@dateFilter) = 0.
		if LEN(@dateFilter) = 0
			begin
				set @minDateQuery = (select concat('Select ',right(@deltaLoadStatement, charindex('=', reverse(@deltaLoadStatement)) - 1)))
			end
		else 
			begin
				set @minDateQuery = 'SELECT CAST( ' + @dateFilter + ' AS DATE )'
			end

		print('@minDateQuery: ' + @minDateQuery)
		print(char(10))

		if @sourceNKColumn = '' 
			set @sourceNKColumn = @targetNKColumn

		set @ignoreColumns = @ignoreColumns + 'ValidFrom,ValidTo,'+
								@insertAuditColumn+','+
								@updateAuditColumn+','+
								@targetNKColumn+','+
								@sourceNKColumn
	
		-- Stage some strings for audit columns
		if @updateAuditColumn <> ''
			set @updateAuditColumn = ','+@updateAuditColumn+' = source.'+@sourceAuditColumn
		if @sourceAuditColumn <> ''
			set @sourceAuditColumn = ', source.'+@sourceAuditColumn
		if @insertAuditColumn <> ''
			set @insertAuditColumn =  ','+@insertAuditColumn

		-- ******* Exclude specific fields ******* --
		-- We can include specific columns that we want to avoid checking in the merge statement for each company. TO
		-- Was done specially because there are some cases on which there is a change due to their internal ERP
		-- that changes records everytime we pull again. But there is no reason that for instance all part changes
		-- in a gap of 3 minutes between one pipeline run and another one.
		declare @ignore_sqlStatement nvarchar(max)
		declare @append_ignoreColumns varchar(500) = ''

		declare @paramDefinition nvarchar(300) = N'@append_ignoreColumns varchar(600) OUTPUT, @sourceTable varchar(60)'
		set @ignore_sqlStatement = 'select @append_ignoreColumns = @append_ignoreColumns + '','' + columnName 
									from dbo.ignoreTableColumns where stageTableName = ' + '''' + @sourceTable + ''''

		EXEC sp_executesql @ignore_sqlStatement,
					@paramDefinition,
					@append_ignoreColumns = @append_ignoreColumns OUTPUT,
					@sourceTable = @sourceTable;

		if len(@append_ignoreColumns) > 0
			begin
				set @ignoreColumns = @ignoreColumns + @append_ignoreColumns
			end

		-- ******* Exclude specific fields ******* --

		-- ******* Get column list ******* --
		-- We call the procedure to get the list of columns that are going to be used in the final merge statement.
		-- The test one is being used but actually is the one that works
		exec meta.GetTableColumnList_test
			@targetTable, 
			@sourceTable,
			@ignoreColumns,
			@ColumnList=@columns output,
			@updateList=@updateColumns output ,
			@checkForChangeList=@checkChangeColumns output

		-- ******* Get column list ******* --

		if @debugOnly = 1

		begin
			print('@updateAuditColumn '+ @updateAuditColumn)
			print(char(10))
			print('@sourceAuditColumn '+ @sourceAuditColumn)
			print(char(10))
			print('@insertAuditColumn '+ @insertAuditColumn)
			print(char(10))
			print('@columns: ' + @columns)
			print(char(10))
			print('@updateColumns ' + @updateColumns)
			print(char(10))
			print('Left @checkChangeColumns ' + @checkChangeColumns)
			print(char(10))
			print('Right @checkChangeColumns' + right(@checkChangeColumns,3999))
			print(char(10))
			print('@ignoreColumns: ' + @ignoreColumns)
			print(char(10))
		end


		-- ******* Generate @tmpTableName from @sourceTable (stage view) ******* --

		-- If I'm not debugging, I will materialize @tmpTableName and use it then for the cursor
		-- otherwise, I will use the cursor with the @sourceTable cause I know there will be no issues
		if @debugOnly = 0

		Begin
			-- *** For performance reason, create a temp table to work with. Temp storage is too small to use.
			if object_id(@tmpTableName) is not null
				exec ('drop table ' + @tmpTableName)
			
			
			set @sSql = 'select * into ' + @tmpTableName + ' from ' + @sourceTable 
			
			print('Creating tmp table ' + @tmpTableName)
			set @st = GETDATE()
			exec (@sSql)
			set @et = GETDATE()

			if @@ROWCOUNT=0
			begin
				exec ('drop table ' + @tmpTableName)
				print('Table dropped')
				return
			end

			BEGIN TRY
				INSERT INTO audit.TmpTableLog (sourceTable, timeInSeconds)
				VALUES (@sourceTable, DATEDIFF(SECOND, @st, @et));
			END TRY
			BEGIN CATCH
				-- Log or handle the error as needed.
				-- For example, you can use PRINT to display an error message or write to an error log table.

				PRINT 'An error occurred during the INSERT statement: ' + ERROR_MESSAGE();
			END CATCH


		End
		else 
			print @sSql
		-- ******* Generate @tmpTableName from @sourceTable (stage view) ******* --


		-- ******* Generate dynamic company in () ******* --
		-- In order to filter the target table in a proper way, I need to see all the distinct values on Company field
		-- that the source table has and store it in a variable for future use.

		-- When I'm not debugging, the cursor will use the table created above. Otherwise we use
		-- the stage view as we described before
		declare @cursor_success bit = 0;
		Declare @sqlStatement_Cursor nvarchar(600)
		Declare @companyNameIterator varchar(50)
		declare @companyPiece varchar(2000)


		if @debugOnly = 0
		begin
			set @cursor_success = 1;

			begin try
				set @sqlStatement_Cursor = 'DECLARE companyCursor cursor for SELECT DISTINCT Company FROM ' + @tmpTableName
				set @companyPiece = ''

				exec sp_executesql @sqlStatement_Cursor

				OPEN companyCursor
				FETCH NEXT FROM companyCursor
					INTO @companyNameIterator

				WHILE @@FETCH_STATUS = 0
				BEGIN
					set @companyPiece = @companyPiece + '''' + @companyNameIterator + '''' + ','

					fetch next FROM companyCursor
						INTO @companyNameIterator
				END

				close companyCursor
				deallocate companyCursor

				if len(@companyPiece) > 0
					begin
						set @companyPiece = left(@companyPiece, len(@companyPiece)-1)
						-- set @companyPiece = ' when  not matched by source and target.company IN (' + @companyPiece + ')' es el anterior
						--set @companyPiece = ' where target.company IN (' + @companyPiece + ')' -- CAMBIO PROBANDO
						set @companyPiece = ' target.company IN (' + @companyPiece + ')' -- CAMBIO PROBANDO
					end

			end try

			begin catch
				set @cursor_success = 0;
			end catch
		end
		else
			begin
				set @cursor_success = 1;

				begin try
					set @sqlStatement_Cursor = 'DECLARE companyCursor cursor for SELECT DISTINCT Company FROM ' + @sourceTable
					set @companyPiece = ''

					exec sp_executesql @sqlStatement_Cursor

					OPEN companyCursor
					FETCH NEXT FROM companyCursor
						INTO @companyNameIterator

					WHILE @@FETCH_STATUS = 0
					BEGIN
						set @companyPiece = @companyPiece + '''' + @companyNameIterator + '''' + ','

						fetch next FROM companyCursor
							INTO @companyNameIterator
					END

					close companyCursor
					deallocate companyCursor

					if len(@companyPiece) > 0
						begin
							set @companyPiece = left(@companyPiece, len(@companyPiece)-1)
							-- set @companyPiece = ' when  not matched by source and target.company IN (' + @companyPiece + ')' es el anterior
							--set @companyPiece = ' where target.company IN (' + @companyPiece + ')' -- CAMBIO PROBANDO
							set @companyPiece = ' target.company IN (' + @companyPiece + ')' -- CAMBIO PROBANDO
						end

				end try

				begin catch
					set @cursor_success = 0;
				end catch
			end

		-- ******* Generate dynamic company in () ******* --

		print('@cursor_success: ' + cast(@cursor_success as varchar(10)))
		print(char(10))

		-- ******* Check if dim and create the merge statement ******* --
		/*
		If it's a dimension we will use is_inferred field.
		Due to that reason, we will have two roads.
		Step_1) For dimensions included in @dimList
		Step_2) For all the other tables thar are not included in @dimList

		-- If we failed in generating the dynamic, we will not disable enable things (@cursor_success = 0). We delete "WHEN NOT MATCHED BY SOURCE part"
		-- We should log that the cursor did not work, or stop the process (Better logging)

		*/

		if CHARINDEX(@targetTable,@dimList) > 0
		begin
		-- Step_1)
			if @cursor_success = 0
				-- Option 1
				begin
					print('Step_1 @cursor_success = 0')
					Set @sSql = 'MERGE '+@targetTable+' as Target 
						Using (Select * from '+@tmpTableName+' ) source
							on target.'+@targetNKColumn+' = source.'+@sourceNKColumn+'
						When matched And (' + CHAR(10) + 'Not ('+@checkChangeColumns+') or (target.is_deleted = 1 or target.is_deleted is null or target.is_inferred = 1 or target.is_inferred is null)'+CHAR(10)+')
						then  update  
								SET '+@updateColumns+'
										'+@updateAuditColumn+ +
									', is_deleted = 0, is_inferred = 0'
									+' 
						When Not matched by target then 
							insert ('+@targetNKColumn+','+@columns+''+REPLACE(@insertAuditColumn, 'source.', '')+ ', is_deleted, is_inferred'+')
							Values ('+@sourceNKColumn+','+@columns+' '+@sourceAuditColumn+ ', 0, 0' +');'

					set @MergeExecuted = 'Step_1 - Option 1'
				end
			-- We can't filter dimensions since it's not a transactional table. We should never filter them unless we have the last time a record was modified,
			-- but we will take that in future.

			--else if @cursor_success = 1 and @deltaLoadStatement != 'WHERE 1 = 1'
			--	begin
			--
			--		Set @sSql = 'MERGE '+@targetTable+' as Target
			--		Using (Select * from '+@tmpTableName+' ) source
			--			on target.'+@targetNKColumn+' = source.'+@sourceNKColumn+'
			--		When matched And (' + CHAR(10) + 'Not ('+@checkChangeColumns+') or (target.is_deleted = 1 or target.is_deleted is null or target.is_inferred = 1 or target.is_inferred is null)'+CHAR(10)+')
			--		then  update  
			--				SET '+@updateColumns+'
			--						'+@updateAuditColumn +
			--						', is_deleted = 0, is_inferred = 0'
			--						+'
			--		When Not matched by target 
			--		then 
			--			insert ('+@targetNKColumn+','+@columns+''+REPLACE(@insertAuditColumn, 'source.', '')+ ', is_deleted, is_inferred' +            ')
			--			Values ('+@sourceNKColumn+','+@columns+' '+@sourceAuditColumn+ ', 0, 0' + ')'
			--			+ ' WHEN NOT MATCHED BY SOURCE AND ' + @companyPiece 
			--			+ ' AND target.' + @dwFilterColumnName + ' != CAST(''1900-01-01'' as DATE)' 
			--			+ ' AND target.' + @dwFilterColumnName + ' >= (' + @minDateQuery + ')'
			--			+ ' AND (is_inferred = 0 or is_inferred is null) THEN UPDATE SET is_deleted = 1'
			--			+';'
			--	end
			else if @cursor_success = 1 and @deltaLoadStatement = 'WHERE 1 = 1'
				-- Option 2
				begin
					print('Step_1 @cursor_success = 1 and @deltaLoadStatement = WHERE 1 = 1')
					Set @sSql = 'MERGE '+@targetTable+' as Target
					Using (Select * from '+@tmpTableName+' ) source
						on target.'+@targetNKColumn+' = source.'+@sourceNKColumn+'
					When matched And (' + CHAR(10) + 'Not ('+@checkChangeColumns+') or (target.is_deleted = 1 or target.is_deleted is null or target.is_inferred = 1 or target.is_inferred is null)'+CHAR(10)+')
					then  update  
							SET '+@updateColumns+'
									'+@updateAuditColumn +
									', is_deleted = 0, is_inferred = 0'
									+'
					When Not matched by target 
					then 
						insert ('+@targetNKColumn+','+@columns+''+REPLACE(@insertAuditColumn, 'source.', '')+ ', is_deleted, is_inferred' +            ')
						Values ('+@sourceNKColumn+','+@columns+' '+@sourceAuditColumn+ ', 0, 0' + ')'
						+ CHAR(10) + ' WHEN NOT MATCHED BY SOURCE AND ' + @companyPiece 
						+ ' AND (is_inferred = 0 or is_inferred is null) THEN UPDATE SET is_deleted = 1'
						+';'

					set @MergeExecuted = 'Step_1 - Option 2'
				end
		end

		else

		begin
		--Step_2)	
		-- We will now treat the fact tables that we want in a special way.
		-- The special way means that there it is not clear on which field to filter from.
		-- Then the decision is just to insert or update the existing values
		-- There will be no action for the rest, meaning deleted records will not be catched
		-- When they are in the factList we manage deleted records, else Step_3)

			if CHARINDEX(@targetTable,@factList) > 0

			begin

				if @cursor_success = 0
					-- Option 1
					begin
						PRINT('Step_2 @cursor_success = 0')
						Set @sSql = 'MERGE '+@targetTable+' as Target 
							Using (Select * from '+@tmpTableName+' ) source
								on target.'+@targetNKColumn+' = source.'+@sourceNKColumn+'
							When matched And Not ('+@checkChangeColumns+') or (target.is_deleted = 1 or target.is_deleted is null)
							then  update  
									SET '+@updateColumns+'
											'+@updateAuditColumn+ +
										', is_deleted = 0'
										+' 
							When Not matched by target then 
								insert ('+@targetNKColumn+','+@columns+''+REPLACE(@insertAuditColumn, 'source.', '')+ ', is_deleted'+')
								Values ('+@sourceNKColumn+','+@columns+' '+@sourceAuditColumn+ ', 0' +');'

						set @MergeExecuted = 'Step_2 - Option 1'
					end
				else if @cursor_success = 1 and @deltaLoadStatement != 'WHERE 1 = 1'
					-- Option 2
					begin
						PRINT('Step_2 @cursor_success = 1 and @deltaLoadStatement != WHERE 1 = 1')
						Set @sSql = 'MERGE '+@targetTable+' as Target
						Using (Select * from '+@tmpTableName+' ) source
							on target.'+@targetNKColumn+' = source.'+@sourceNKColumn+'
						When matched And Not ('+@checkChangeColumns+') or (target.is_deleted = 1 or target.is_deleted is null)
						then  update  
								SET '+@updateColumns+'
										'+@updateAuditColumn +
										', is_deleted = 0'
										+'
						When Not matched by target 
						then 
							insert ('+@targetNKColumn+','+@columns+''+REPLACE(@insertAuditColumn, 'source.', '')+ ', is_deleted' +            ')
							Values ('+@sourceNKColumn+','+@columns+' '+@sourceAuditColumn+ ', 0' + ')'
							+ CHAR(10) + ' WHEN NOT MATCHED BY SOURCE AND ' + @companyPiece 
							+ ' AND target.' + @dwFilterColumnName + ' != CAST(''1900-01-01'' as DATE)' 
							+ ' AND target.' + @dwFilterColumnName + ' >= (' + @minDateQuery + ')'
							+ ' THEN UPDATE SET is_deleted = 1'
							+';'
						set @MergeExecuted = 'Step_2 - Option 2'
					end
				else if @cursor_success = 1 and @deltaLoadStatement = 'WHERE 1 = 1'
					-- Option 3
					begin

						-- In the cases we don't know what is the exact date from where we get data from (We dont have @dateFilter)
						-- we will take the earliest date of the stage view and use that one as the start point
						/* This was done mainly for TRACLEV, IOWTRADE and CYESA*/
						-- Then we need to set a new logic for @minDateQuery
						PRINT('Step_2 @cursor_success = 1 and @deltaLoadStatement = WHERE 1 = 1')
						set @minDateQuery = 'SELECT MIN(CAST( ' + @dwFilterColumnName + ' AS DATE )) FROM ' + @tmpTableName

						Set @sSql = 'MERGE '+@targetTable+' as Target
						Using (Select * from '+@tmpTableName+' ) source
							on target.'+@targetNKColumn+' = source.'+@sourceNKColumn+'
						When matched And Not ('+@checkChangeColumns+') or (target.is_deleted = 1 or target.is_deleted is null)
						then  update  
								SET '+@updateColumns+'
										'+@updateAuditColumn +
										', is_deleted = 0'
										+'
						When Not matched by target 
						then 
							insert ('+@targetNKColumn+','+@columns+''+REPLACE(@insertAuditColumn, 'source.', '')+ ', is_deleted' +            ')
							Values ('+@sourceNKColumn+','+@columns+' '+@sourceAuditColumn+ ', 0' + ')'
							+ CHAR(10) + ' WHEN NOT MATCHED BY SOURCE AND ' + @companyPiece 
							 + ' AND target.' + @dwFilterColumnName + ' >= (' + @minDateQuery + ')'
							 + ' AND target.' + @dwFilterColumnName + ' != CAST(''1900-01-01'' as DATE)' 
							 + ' THEN UPDATE SET is_deleted = 1'

							+';'
						set @MergeExecuted = 'Step_2 - Option 3'
					

					end
			end
			else
			-- Step_3)
			begin
				-- Option 1
				PRINT('Step_3')
				Set @sSql = 'MERGE '+@targetTable+' as Target
					Using (Select * from '+@tmpTableName+' ) source
						on target.'+@targetNKColumn+' = source.'+@sourceNKColumn+'
					When matched And Not ('+@checkChangeColumns+') or (target.is_deleted = 1 or target.is_deleted is null)
					then  update  
							SET '+@updateColumns+'
									'+@updateAuditColumn +
									', is_deleted = 0'
									+'
					When Not matched by target 
					then 
						insert ('+@targetNKColumn+','+@columns+''+REPLACE(@insertAuditColumn, 'source.', '')+ ', is_deleted' +            ')
						Values ('+@sourceNKColumn+','+@columns+' '+@sourceAuditColumn+ ', 0' + ');'

				set @MergeExecuted = 'Step_2 - Option 1'
			end
		end


		-- ******* Check if dim and create the merge statement ******* --


		-- ******* Create sql detective query ******* --
		/*
		We can copy the result and change all the = into != to see which are actually the changes
		between the stage view and the target
		*/

		set @sSql_detective = 'SELECT target.' + @targetNKColumn + 
								' FROM ' + @targetTable + ' AS target
									INNER JOIN ' + @sourceTable + ' AS source ON target.' + @targetNKColumn + ' = source.' + @sourceNKColumn + 
									' WHERE ' + @checkChangeColumns;
		-- ******* Create sql detective query ******* --



		-- ******* Execute statements ******* --

		begin try 
			if @debugOnly = 0
				begin
					exec (@sSql)
					set @rowsAffected = @@rowcount
				end 
			else 
				begin
					print ('@sqlStatement_Cursor: ' + @sqlStatement_Cursor)
					print(char(10))
					print ('@companyPiece: ' + @companyPiece)
					print(char(10))
					print('--------------------------------------------------------------------------------------------------------------------------------')
					print('--------------------------------------------------------------------------------------------------------------------------------')
					print ('Left @sSql: ' + @sSql)
					print(char(10))
					print('Right @sSql: ' + right(@sSql,3999))
					print('--------------------------------------------------------------------------------------------------------------------------------')
					print('--------------------------------------------------------------------------------------------------------------------------------')
					print(char(10))
					print('--------------------------------------------------------------------------------------------------------------------------------')
					print('--------------------------------------------------------------------------------------------------------------------------------')
					print('Left @sSql_detective: ' + @sSql_detective)
					print(char(10))
					print('Right @sSql_detective: ' + RIGHT(@sSql_detective,3999))
					print('--------------------------------------------------------------------------------------------------------------------------------')
					print('--------------------------------------------------------------------------------------------------------------------------------')
					print(char(10))
				end
		End Try
		Begin Catch
			set @StatusNAme = 'FAIL'
			set @ErrorMessage = @ToTable+':'+ERROR_MESSAGE()
		End Catch

		-- ******* Execute statements ******* --
	
	
	
		-- ******* Cleaning and logging ******* --
		set @endTime = getdate() AT TIME ZONE 'UTC' AT TIME ZONE 'Central Europe Standard Time' -- Added double conversion to make sure we get the swedish timestamp /SM 2021-10-07
		if @debugOnly = 0
		begin
			--Drop temp table
			if object_id(@tmpTableName) is not null
			begin
				exec ('drop table ' + @tmpTableName)
				print('Drop table at the end')

			end

			exec audit.writeLog @PartitionKey=@PartitionKey
			, @ProcName = @ProcName
			, @FromTable =@FromTable
			, @ToTable=@ToTable
			, @startTime=@startTime
			, @endTime=@endTime
			, @rowsAffected=@rowsAffected
			, @StatusName=@StatusName
			, @ErrorMessage=@ErrorMessage
			, @MergeExecuted = @MergeExecuted
			, @Date = @date

			if @StatusName <> 'OK'
			begin
				RAISERROR(@ErrorMessage, 16, 1)
			end
		end
		-- ******* Cleaning and logging ******* --
	END
END
GO
PRINT N'Creating [stage].[ABK_SE_RLS]'
GO
CREATE TABLE [stage].[ABK_SE_RLS]
(
[Name] [nvarchar] (200) NULL,
[Email] [nvarchar] (200) NOT NULL,
[All] [smallint] NULL,
[SalesPersonName] [nvarchar] (200) NULL
)
GO
PRINT N'Creating [stage].[vABK_SE_RLS]'
GO






CREATE VIEW [stage].[vABK_SE_RLS] AS

WITH base as (
SELECT UPPER(CONCAT('ABKSE', '-', TRIM(Email),'-' + SalesPersonName , '-' + [All])) AS EmailID
	,FORMAT(GETDATE(),'yyyy-MM-dd hh:mm:ss') AS PartitionKey
	,'ABKSE' AS Company
	,[Email]
	,[Name]
	,SalesPersonName
	,[All]
	
FROM [stage].[ABK_SE_RLS]
  
)

SELECT 
	EmailID
	,PartitionKey
	,Company
	,[Email]
	,SalesPersonName AS [Name]
	,'SalesPersonName'	AS RLSType
	FROM base
	Where SalesPersonName IS NOT NULL

UNION ALL
SELECT 
	EmailID
	,PartitionKey
	,Company
	,[Email]
	,'ALL' AS [Name]
	,'All'	AS RLSType
	FROM base
	Where [All] = 1
GO
PRINT N'Creating [stage].[WID_FI_PurchaseInvoice]'
GO
CREATE TABLE [stage].[WID_FI_PurchaseInvoice]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[LineType] [nvarchar] (50) NULL,
[OrderDelivLineNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaserName] [nvarchar] (100) NULL,
[OrderType] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[InvoiceType] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[ReqDelivDate] [date] NULL,
[PurchaseShipQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CreditMemo] [nvarchar] (1) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[IndexKey] [nvarchar] (50) NULL,
[FullyShipp01] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vWID_FI_PurchaseInvoice]'
GO
CREATE VIEW [stage].[vWID_FI_PurchaseInvoice] AS
--COMMENT EMPTY FIELDS / ADD UPPER()TRIM() INTO PartID 2022-12-15 VA
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IndexKey)))) AS PurchaseInvoiceID
	,CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(InvoiceNum)) AS PurchaseInvoiceCode
	,CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(PurchaseOrderNum), '#', TRIM(PartNum), '#', TRIM(InvoiceNum)) AS PurchaseOrderCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(PurchaseOrderNum)))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(PurchaseOrderNum), '#', TRIM(InvoiceNum)))) AS PurchaseOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierCode))))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(SupplierCode)))) AS SupplierID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(PartNum)))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT(int, replace(convert(date, InvoiceDate), '-', '')) AS PurchaseInvoiceDateID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(InvoiceNum), '#', TRIM(PurchaseOrderNum)))) AS PurchaseLedgerID
	,PartitionKey

	,Company
	,TRIM(PurchaseOrderNum) AS PurchaseOrderNum
	,TRIM(PurchaseOrderLine) AS PurchaseOrderLine
	,TRIM(PurchaseOrderSubLine) AS PurchaseOrderSubLine
	,TRIM(OrderType) AS PurchaseOrderType
	,TRIM(InvoiceNum) AS PurchaseInvoiceNum
	,InvoiceLine AS PurchaseInvoiceLine
	,InvoiceType AS PurchaseInvoiceType
	,InvoiceDate AS PurchaseInvoiceDate
	,ActualDeliveryDate AS ActualDelivDate
	,TRIM(SupplierCode) AS SupplierNum
	,TRIM(PartNum) AS PartNum
	,PurchaseShipQty AS PurchaseInvoiceQty
	--,NULL AS UoM
	,UnitPrice
	,DiscountAmount -- since it is invoiceed price, not listed price, so the discount should be zero
	,IIF(PurchaseShipQty*UnitPrice = 0, 0, DiscountAmount/(PurchaseShipQty*UnitPrice)) AS DiscountPercent -- since it is invoiceed price, not listed price, so the discount should be zero
	,TotalMiscChrg
	--,NULL AS VATAmount
	,Currency
	,ExchangeRate
	,TRIM(CreditMemo) AS CreditMemo
	,TRIM(PurchaserName) AS PurchaserName
	,TRIM(WarehouseCode) AS WarehouseCode
	,LineType AS PurchaseChannel
	--,'' AS Comment
	,IndexKey AS PIRes1
	,FullyShipp01 AS PIRes2
	,ReqDelivDate AS PIRes3
FROM stage.WID_FI_PurchaseInvoice

--GROUP BY
--	PartitionKey, Company, PurchaseOrderNum, InvoiceNum, SupplierCode, PartNum, OrderDelivLineNum, PurchaseOrderLine, PurchaseOrderSubLine, PurchaserName, InvoiceLine, InvoiceType, InvoiceDate, ActualDeliveryDate, PurchaseShipQty, UnitPrice, DiscountAmount, TotalMiscChrg, CreditMemo, WarehouseCode, Currency, ExchangeRate, OrderType, LineType, IndexKey, FullyShipp01, ReqDelivDate
  --, OrderType, [Site]
GO
PRINT N'Creating [stage].[ARK_PI_Customer]'
GO
CREATE TABLE [stage].[ARK_PI_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[CustomerName] [nvarchar] (200) NULL,
[AddressLine1] [nvarchar] (200) NULL,
[AddressLine2] [nvarchar] (200) NULL,
[AddressLine3] [nvarchar] (200) NULL,
[TelephoneNumber1] [nvarchar] (50) NULL,
[TelephoneNumber2] [nvarchar] (50) NULL,
[Email] [nvarchar] (100) NULL,
[CustomerABC] [nchar] (10) NULL,
[City] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[SalesPersonResponsible] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (50) NULL,
[Division] [nvarchar] (50) NULL,
[SalesRepCode] [varchar] (50) NULL,
[VATRegNr] [nvarchar] (20) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (2) NULL,
[SalesPersonName] [varchar] (50) NULL,
[CustomerType] [nvarchar] (50) NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL,
[Disctrict] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vARK_PI_Customer]'
GO
CREATE VIEW [stage].[vARK_PI_Customer] AS
--COMMENT EMPTY FIELDS // ADD TRIM()UPPER() INTO CustomerID 2022-12-16 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#' ,TRIM(CustomerNum))))) AS CustomerID
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#' ,TRIM(CustomerNum)))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [Company])) AS CompanyID
	,CONCAT([Company], '#', TRIM([CustomerNum])) AS CustomerCode
	,PartitionKey

	,Company
    ,TRIM(CustomerNum) AS CustomerNum
	--,'' AS MainCustomerName
    ,CustomerName
    ,[AddressLine1]
    ,[AddressLine2]
    ,[AddressLine3]
	,[TelephoneNumber1] AS [TelephoneNum1]
	,[TelephoneNumber2] AS [TelephoneNum2]
	,[Email]
	,ZipCode
	,[City]
    ,IIF([State]= ' ',null,[State]) AS [State]
	,[District] AS SalesDistrict
	,TRIM(CountryCode) AS CountryCode
    ,CASE WHEN CountryName is null THEN 'Czech Republic' ELSE CountryName END AS CountryName
	,Division
	--,'' AS CustomerIndustry
	--,'' AS CustomerSubIndustry
	,TRIM(CONCAT(AddressLine1,', ',AddressLine2)) AS AddressLine
	,CONCAT(CASE WHEN CountryName is null THEN 'Czech Republic' ELSE CountryName END, + ',' + ZipCode, + ',' + City) AS FullAddressLine
    ,CustomerGroup AS CustomerGroup
	,CustomerSubGroup AS CustomerSubGroup
    ,[SalesRepCode]	AS SalesPersonCode
	,CONVERT(varchar(50), SalesPersonName) AS SalesPersonName --[dbo].[ProperCase](SalesPersonName) AS --SERVERPROPERTY('Czech_CI_AS'), 
	,[SalesPersonResponsible]
    ,TRIM([VATRegNr]) AS [VATNum]
	--,'' AS OrganizationNum
	,[AccountString] AS AccountNum
	,[InternalExternal]
	,[CustomerABC] AS CustomerScore
	,CustomerType
FROM [stage].[ARK_PI_Customer]
GO
PRINT N'Creating [dm].[DimSupplier]'
GO










CREATE VIEW [dm].[DimSupplier] AS

SELECT 
  	DISTINCT(CONVERT(bigint, [SupplierID])) AS SupplierID
	,CONVERT(bigint, [CompanyID]) AS CompanyID --CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM(Company)))
	,s.[Company]
	,[SupplierNum]
	,[MainSupplierName]
	,[SupplierName]
	,CONCAT(TRIM(SupplierNum), '-', TRIM(SupplierName)) AS Supplier
	,[TelephoneNum]
	,s.[Email]
	,[ZipCode]
	,[City]
	,[District]
	,s.[CountryCode]
	,s.[CountryName]
	,[Region]
	,[SupplierCategory]
	,[SupplierResponsible]
	,[AddressLine]
	,[FullAddressLine]
	,[AccountNum]
	,[OrganizationNum]
	,[VATNum]
	,[InternalExternal]
	,CASE WHEN [CodeOfConduct] = '0' THEN 'No'
		  WHEN [CodeOfConduct] = '1' THEN  'Yes'
		  ELSE [CodeOfConduct] END AS CodeOfConduct
	,[CustomerNum]
	,[SupplierScore]
	,[MinOrderQty]
	,[MinOrderValue]
	,[Website]
	,s.[Comments]
	,[IsMaterialSupplier]
	,dnb.DUNS
	,dnb.confidence_code as DUNS_MatchScore
	,s.is_inferred
	,s.is_deleted
	,case
	when cc.[Alpha-2 code] is null then 'No' else 'Yes' 
	end as is_validCountryCode
	,case   when dnb.sent_date is not null and dnb.match_status is null and DATEDIFF(hh,sent_date,GETDATE()) > 16 then 'No Reference'
			when dnb.sent_date is not null and dnb.match_status is not null and DUNS is not null then 'Success'
			when	(dnb.sent_date is not null and dnb.match_status is not null and DUNS is null) 
				or 
				(dnb.sent_date is null and dnb.CountryCode is null)
			then 'Needs improvement'
			when dnb.sent_date is null and dnb.CountryCode is not null then 'Match in progress'
	end as DUNS_Status
FROM 
	[dw].[Supplier] as s
LEFT JOIN dnb.DnBCustomerAndSupplier as dnb
	ON dnb.dw_id = s.SupplierID and dnb.is_customer = 0
LEFT JOIN dbo.CountryCodes as cc
	on s.CountryCode = cc.[Alpha-2 code]
--Group by 
--	[SupplierID], [CompanyID], s.[Company], [SupplierNum], [SupplierName], [AddressLine], [TelephoneNum], s.[Email], [ZipCode], [City], [CountryName], [SupplierResponsible], [InternalExternal], [Region], [FullAddressLine], [SupplierCategory], [SupplierResponsible], [AccountNum], [VATNum], [SupplierScore],[CustomerNum], [MinOrderQty], [CodeOfConduct], [District], [MainSupplierName], [MinOrderValue], [Website], [Comments]
GO
PRINT N'Creating [dm_IN].[dimSupplier]'
GO


CREATE VIEW [dm_IN].[dimSupplier] AS 

SELECT 
 sup.[SupplierID]
,sup.[CompanyID]
,sup.[Company]
,sup.[SupplierNum]
,sup.[MainSupplierName]
,sup.[SupplierName]
,sup.[Supplier]
,sup.[TelephoneNum]
,sup.[Email]
,sup.[ZipCode]
,sup.[City]
,sup.[District]
,sup.[CountryCode]
,sup.[CountryName]
,sup.[Region]
,sup.[SupplierCategory]
,sup.[SupplierResponsible]
,sup.[AddressLine]
,sup.[FullAddressLine]
,sup.[AccountNum]
,sup.[OrganizationNum]
,sup.[VATNum]
,sup.[InternalExternal]
,sup.[CodeOfConduct]
,sup.[CustomerNum]
,sup.[SupplierScore]
,sup.[MinOrderQty]
,sup.[MinOrderValue]
,sup.[Website]
,sup.[Comments]
,sup.[IsMaterialSupplier]
,sup.[DUNS]
,sup.[DUNS_MatchScore]
,sup.[is_inferred]
,sup.[is_deleted]
,sup.[is_validCountryCode]
,sup.[DUNS_Status]
FROM [dm].[DimSupplier] sup
LEFT JOIN dbo.Company com ON sup.Company = com.Company
WHERE com.BusinessArea = 'Industrial Solutions' AND com.[Status] = 'Active'
GO
PRINT N'Creating [stage].[NOM_FI_PurchaseInvoice]'
GO
CREATE TABLE [stage].[NOM_FI_PurchaseInvoice]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaseOrderType] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[PurchaseInvoiceLine] [nvarchar] (50) NULL,
[PurchaseInvoiceType] [nvarchar] (50) NULL,
[PurchaseInvoiceDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PurchaseInvoiceQty] [decimal] (18, 4) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[VATAmount] [decimal] (18, 4) NULL,
[CreditMemo] [nvarchar] (1) NULL,
[PurchaserName] [nvarchar] (100) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[PurchaseChannel] [nvarchar] (50) NULL,
[Comment] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[vNOM_FI_PurchaseInvoice]'
GO
CREATE VIEW [stage].[vNOM_FI_PurchaseInvoice] AS
--COMMENT EMPTY FIELDS 2022-12-15 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum), '#', TRIM(PurchaseInvoiceLine))))) AS PurchaseInvoiceID --,'#', TRIM(PurchaseOrderNum),'#', TRIM(PurchaseOrderLine),'#', TRIM(PurchaseOrderSubLine)
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseInvoiceNum), '#', TRIM(PurchaseInvoiceLine), '#', PartNum)) AS PurchaseInvoiceCode
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum))) AS PurchaseOrderNumCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum),'#',TRIM(PurchaseOrderLine),'#',TRIM(PurchaseInvoiceNum))))) AS PurchaseOrderID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum))))) AS SupplierID
    ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT(int, replace(PurchaseInvoiceDate,'-','')) AS PurchaseInvoiceDateID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#', TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum),'#',TRIM(PurchaseOrderNum))))) AS PurchaseLedgerID --match PurchaseLedgerID in [vSCM_FI_PurchaseLedger]
	,UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine) )) AS PurchaseOrderCode
	,PartitionKey
	,UPPER(TRIM(Company)) AS Company
	,UPPER(TRIM(PurchaseOrderNum)) AS PurchaseOrderNum
	,UPPER(TRIM(PurchaseOrderLine)) AS PurchaseOrderLine
	,UPPER(TRIM(PurchaseOrderSubLine)) AS PurchaseOrderSubLine
	,PurchaseOrderType
	,UPPER(TRIM(PurchaseInvoiceNum)) AS PurchaseInvoiceNum
	,UPPER(TRIM(PurchaseInvoiceLine)) AS PurchaseInvoiceLine
	,PurchaseInvoiceType
	,PurchaseInvoiceDate
	,ActualDelivDate
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,PurchaseInvoiceQty
	,UoM
	,UnitPrice
	,DiscountPercent
	,DiscountAmount
	,TotalMiscChrg
	,VATAmount
	,ExchangeRate
	,Currency
	,CreditMemo
	,PurchaserName
	,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
	,PurchaseChannel
	--,'' AS Comment
	--,'' AS PIRes1
	--,'' AS PIRes2
	--,'' AS PIRes3
	--,'' AS LineType
	--,'' AS OrderDelivLineNum
FROM stage.NOM_FI_PurchaseInvoice

GROUP BY
	PartitionKey, Company, PurchaseOrderNum, PurchaseInvoiceNum, SupplierNum, PartNum, PurchaseOrderLine, PurchaseOrderSubLine, PurchaseInvoiceQty, UnitPrice, WarehouseCode,PurchaserName, PurchaseInvoiceLine, PurchaseInvoiceType, PurchaseInvoiceDate, ActualDelivDate, TotalMiscChrg, CreditMemo, PurchaseOrderType,DiscountAmount,Currency,ExchangeRate, UoM, VATAmount, PurchaseChannel, DiscountPercent, DiscountAmount
GO
PRINT N'Creating [stage].[AXL_N1_OLine]'
GO
CREATE TABLE [stage].[AXL_N1_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[NeedbyDate] [date] NULL,
[ExpDelivDate] [date] NULL,
[EDCExpDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (10) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[SalesPerson] [nvarchar] (50) NULL,
[WareHouseCode] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[BusinessChain] [nvarchar] (50) NULL,
[SalesOrderCategory] [nvarchar] (100) NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL,
[PartDesc] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[vAXL_N1_OLine]'
GO

CREATE VIEW [stage].[vAXL_N1_OLine] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(PartDesc))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum), '#', (IIF(TRIM([PartNum]) LIKE 'IACO%' , 'MISC. CHARGES', TRIM(PartDesc) )) )))) AS PartID
	,CONVERT(int, replace(convert(date, OrderDate), '-', '')) AS SalesOrderDateID
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine))) AS SalesOrderCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(CustNum) AS CustomerNum 
	,TRIM(OrderNum) AS [SalesOrderNum]
	,TRIM(OrderLine) AS [SalesOrderLine]
	,TRIM(OrderSubLine) AS [SalesOrderSubLine]
	,CONVERT(nvarchar(50), TRIM(OrderType)) AS [SalesOrderType]
	,TRIM([SalesOrderCategory]) AS [SalesOrderCategory]
	,OrderDate AS [SalesOrderDate]
	,NeedbyDate
	,ExpDelivDate AS [ExpDelivDate]
	,EDCExpDelivDate
	,ActualDelivDate
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,OrderQty AS [SalesOrderQty]
	,DelivQty
	,RemainingQty
	,Unit AS [UoM]
	,UnitPrice
	,UnitCost
	,LEFT(TRIM(Currency), 3) AS Currency
	,ExchangeRate
	,LEFT(TRIM(OpenRelease), 1) AS OpenRelease
	,DiscountAmount
	,DiscountPercent
	,NULL AS CashDiscOffered
	,NULL AS CashDiscUsed
	,TRIM(PartNum) AS PartNum
	,UPPER(PartDesc) AS PartDesc
	,'' AS [PartType]
	,CONVERT(nvarchar(50), PartStatus) AS PartStatus
	,TRIM(SalesPerson) AS [SalesPersonName]
	,TRIM(WareHouseCode) AS WarehouseCode
	,'' AS IndexKey
	,TRIM(SalesChannel) AS SalesChannel
	,TRIM(BusinessChain) AS [Department]
	,Res3 AS [ProjectNum] -- = FreeOfCharge: Y = yes, N = no
	,'' AS Cancellation
	,Res1 AS SORes1
	,Res2 AS SORes2
	,Res3 AS SORes3
FROM stage.AXL_N1_OLine
WHERE OrderDate >= '2015-01-01'
GO
PRINT N'Creating [sp].[Global_load]'
GO

/*

exec [sp].[Global_load] 
@PartitionKey = '2023-02-17 07:14:14', 
@targetTable = 'dw.CostBearer', 
@sourcetable = 'stage.vFOR_SE_CostBearer', 
@dwFilterColumnName = 'null',
@deltaLoadStatement = 'where 1 = 1',
@debug = 1
*/

-- stage -> filter field mmedjrev
-- dw -> SalesOrderDate

CREATE PROCEDURE [sp].[Global_load] (
		@PartitionKey varchar(50), 
		@targetTable varchar(50), 
		@sourcetable varchar(50),
		@dwFilterColumnName varchar(50),
		@deltaLoadStatement varchar(600),
		@debug bit = 0,
		@dateFilter varchar(50) = ''
		) AS

BEGIN

	declare @targetNKColumn varchar(50);

	declare @targetTableColumnIdQuery nvarchar(max) = 

	'select @targetNKColumn = columnName
			from (
    SELECT schema_name(t.schema_id) + ''.'' + t.[name] as table_view, 
        case when t.[type] = ''U'' then ''Table''
            when t.[type] = ''V'' then ''View''
            end as [object_type],
        case when c.[type] = ''PK'' then ''Primary key''
            when c.[type] = ''UQ'' then ''Unique constraint''
            when i.[type] = 1 then ''Unique clustered index''
            when i.type = 2 then ''Unique index''
            end as constraint_type, 
        isnull(c.[name], i.[name]) as constraint_name,
        substring(column_names, 1, len(column_names)-1) as columnName
    FROM sys.objects t
        left outer join sys.indexes i
            on t.object_id = i.object_id
        left outer join sys.key_constraints c
            on i.object_id = c.parent_object_id 
            AND i.index_id = c.unique_index_id
       cross apply (select col.[name] + '', ''
                        from sys.index_columns ic
                            inner join sys.columns col
                                on ic.object_id = col.object_id
                                and ic.column_id = col.column_id
                        where ic.object_id = t.object_id
                            AND ic.index_id = i.index_id
                                order by col.column_id
                                for xml path ('''') ) D (column_names)
    WHERE is_unique = 1
        AND t.is_ms_shipped <> 1
    UNION ALL
    SELECT schema_name(fk_tab.schema_id) + ''.'' + fk_tab.name as foreign_table,
        ''Table'',
        ''Foreign key'',
        fk.name as fk_constraint_name,
        schema_name(pk_tab.schema_id) + ''.'' + pk_tab.name
    FROM sys.foreign_keys fk
        inner join sys.tables fk_tab
            on fk_tab.object_id = fk.parent_object_id
        inner join sys.tables pk_tab
            on pk_tab.object_id = fk.referenced_object_id
        inner join sys.foreign_key_columns fk_cols
            on fk_cols.constraint_object_id = fk.object_id
    UNION ALL
    SELECT schema_name(t.schema_id) + ''.'' + t.[name],
        ''Table'',
        ''Check constraint'',
        con.[name] as constraint_name,
        con.[definition]
    FROM sys.check_constraints con
        left outer join sys.objects t
            on con.parent_object_id = t.object_id
        left outer join sys.all_columns col
            on con.parent_column_id = col.column_id
            AND con.parent_object_id = col.object_id
    UNION ALL
    SELECT schema_name(t.schema_id) + ''.'' + t.[name],
        ''Table'',
        ''Default constraint'',
        con.[name],
        col.[name] + '' = '' + con.[definition]
    FROM sys.default_constraints con
        left outer join sys.objects t
            on con.parent_object_id = t.object_id
        left outer join sys.all_columns col
            on con.parent_column_id = col.column_id
            and con.parent_object_id = col.object_id
			) a
		where constraint_type = ''Primary key''
		and table_view = ' + ''''  + @targetTable + ''''

	-- Ejecuto el procedure para asignar @targetNKColumn
	exec sp_executesql @targetTableColumnIdQuery, N'@targetTable varchar(50), @targetNKColumn varchar(50) OUTPUT', @targetTable = @targetTable, @targetNKColumn = @targetNKColumn output;
	
	-- Verifico que funcione correctamente
	--print( @targetNKColumn )

	-- Re asigno para mandarselo correctamente al otro procedure
	--set @sourceTable = 'stage.v' + @sourceTable;
	--set @targetTable = 'dw.' + @targetTable;

	if @debug = 1
		begin
			print('Target table: '+ @targetTable		  )
			print('Source Table: '+ @sourceTable		  )
			print('Target NK Column: '+ @targetNKColumn	  )
			print('PartitionKey: '+ @PartitionKey		  )
			print('dwFilterColumnName: '+ @dwFilterColumnName)
			print('deltaLoadStatement: '+ @deltaLoadStatement)
			print('dateFilter: '+ @dateFilter)

            print(char(10))

            exec [meta].[LoadTableAndHistory_dev_tomas] 
				@targetTable=@targetTable,
				@sourceTable=@sourceTable,
				@targetNKColumn=@targetNKColumn,
				@PartitionKey=@PartitionKey,
				@debugOnly = 1,
				@dwFilterColumnName = @dwFilterColumnName,
				@deltaLoadStatement = @deltaLoadStatement,
				@dateFilter = @dateFilter
		end
	else
		begin
			-- Llamo al procedure final con los parametros que corresponden
			exec [meta].[LoadTableAndHistory_dev_tomas] 
				@targetTable=@targetTable,
				@sourceTable=@sourceTable,
				@targetNKColumn=@targetNKColumn,
				@PartitionKey=@PartitionKey,
				@debugOnly = 0,
				@dwFilterColumnName = @dwFilterColumnName,
				@deltaLoadStatement = @deltaLoadStatement,
				@dateFilter = @dateFilter
				--, @MetadataSourceTable = @MetadataSourceTable
		end


END
GO
PRINT N'Creating [stage].[JEN_DK_Warehouse]'
GO
CREATE TABLE [stage].[JEN_DK_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseNum] [nvarchar] (50) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL,
[Addressline1] [nvarchar] (200) NULL,
[Addressline2] [nvarchar] (200) NULL,
[Addressline3] [nvarchar] (200) NULL,
[City] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vJEN_DK_Warehouse]'
GO
CREATE VIEW [stage].[vJEN_DK_Warehouse] AS
--COMMENT EMPTY FIELD 22-12-29 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseNum]))))) AS WarehouseID
	,PartitionKey

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([WarehouseNum])) AS [WarehouseCode]
	,[WarehouseName]
	,Addressline3 AS [WarehouseDistrict]
	,LEFT(CONCAT(Addressline1, ', ', Addressline2, ', ', Addressline3)  , 200) AS [WarehouseAddress]
	--,'' AS [WarehouseDescription]
	--,'' AS [WarehouseType]
	--,'' AS [WarehouseCountry]
	--,'' AS [WarehouseSite]
FROM [stage].[JEN_DK_Warehouse]
GO
PRINT N'Creating [dbo].[Country]'
GO
CREATE TABLE [dbo].[Country]
(
[CountryName] [nvarchar] (80) NULL,
[CountryNameFormer] [varchar] (50) NULL,
[ISOAlpha3Code] [varchar] (3) NULL,
[ISOAlpha2Code] [varchar] (2) NULL,
[M49Code] [varchar] (20) NULL,
[Continent] [varchar] (30) NULL,
[Region] [varchar] (40) NULL,
[Region2] [varchar] (50) NULL,
[RiskLevel] [varchar] (20) NULL,
[EUMember] [bit] NULL,
[CurrencyDescription] [varchar] (50) NULL,
[CurencyCode] [varchar] (5) NULL,
[CurrencyDescription2] [varchar] (25) NULL,
[CurrencyCode2] [varchar] (8) NULL,
[CurrencyDescription3] [varchar] (25) NULL,
[CurrencyCode3] [varchar] (8) NULL
)
GO
PRINT N'Creating [stage].[AXL_FR_Customer]'
GO
CREATE TABLE [stage].[AXL_FR_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[MainCustomerName] [nvarchar] (100) NULL,
[CustomerName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[AddressLine] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (20) NULL,
[TelephoneNumber2] [nvarchar] (20) NULL,
[Email] [nvarchar] (100) NULL,
[City] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[Division] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (50) NULL,
[CustomerIndustry] [nvarchar] (50) NULL,
[CustomerSubIndustry] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNo] [nvarchar] (50) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[CustomerABC] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[SalesPersonResponsible] [nvarchar] (50) NULL,
[CustomerType] [nvarchar] (50) NULL,
[Res1] [nvarchar] (50) NULL,
[Res2] [nvarchar] (50) NULL,
[Res3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXL_FR_Customer]'
GO


CREATE VIEW [stage].[vAXL_FR_Customer] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustomerNum))) )) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,UPPER(CONCAT([Company], '#', TRIM([CustomerNum]))) AS CustomerCode
	,PartitionKey

	,UPPER(Company) AS Company
	,UPPER(TRIM(CustomerNum)) AS [CustomerNum]
	,TRIM(MainCustomerName) AS MainCustomerName
	,TRIM(CustomerName) AS  [CustomerName]
	,TRIM([AddressLine1]) AS [AddressLine1]
	,TRIM([AddressLine2]) AS [AddressLine2]
	,TRIM([AddressLine3]) AS [AddressLine3]
	,TRIM([TelephoneNumber1]) AS [TelephoneNum1]
	,TRIM([TelephoneNumber2]) AS [TelephoneNum2]
	,TRIM([Email]) AS [Email]
	,TRIM([ZipCode]) AS [ZipCode]
	,TRIM([City]) AS [City]
	,TRIM([State]) AS [State]
	,TRIM([District]) AS [SalesDistrict]
	,TRIM(con.CountryName) AS CountryName
	,TRIM([ISOAlpha2Code]) AS [CountryCode]
	,TRIM([Division]) AS [Division]
	,TRIM([CustomerIndustry]) AS [CustomerIndustry]
	,TRIM([CustomerSubIndustry]) AS [CustomerSubIndustry]
	,TRIM([AddressLine3]) AS [AddressLine]
	,CONCAT(TRIM(con.CountryName), + ',  ' + TRIM([City]), + ',  ' + TRIM([ZipCode]), + ',  ' + TRIM(addressline3)) AS [FullAddressLine]
	,TRIM(CustomerGroup) AS [CustomerGroup]
	,TRIM(CustomerGroup) AS [CustomerSubGroup]
	,TRIM([SalesRepCode]) AS [SalesPersonCode]
	,TRIM(SalesPersonName) AS [SalesPersonName]
	,TRIM([SalesPersonResponsible]) AS [SalesPersonResponsible]
	,TRIM([VATRegNo]) AS [VATNum]
	,TRIM([AccountString]) AS [AccountNum]
	,TRIM([InternalExternal]) AS [InternalExternal]
	,TRIM([CustomerABC]) AS [CustomerScore]
	,TRIM([CustomerType]) AS [CustomerType]
FROM [stage].[AXL_FR_Customer] com
	LEFT JOIN dbo.Country con ON com.CountryName = con.[ISOAlpha2Code]

--GROUP BY
--	PartitionKey, Company, CustomerNum, CustomerName, MainCustomerName, [AddressLine1], [AddressLine2], [AddressLine3], [TelephoneNumber1], [TelephoneNumber2], [Email], [ZipCode], [City], [State], [District], [CountryName], [Division], [CustomerIndustry], [CustomerSubIndustry], CustomerGroup, [SalesRepCode], SalesPersonName, [SalesPersonResponsible], [VATRegNo], [AccountString], [InternalExternal], [CustomerABC], [CustomerType]

--	Stagetablename in ('AXL_AU_Customer', 'AXL_DC_Customer', 'AXL_HU_Customer', 'AXL_IE_Customer', 'AXL_PL_Customer', 'AXL_PT_Customer', 'AXL_UK_Customer')
GO
PRINT N'Creating [stage].[FOR_ES_PurchaseOrder]'
GO
CREATE TABLE [stage].[FOR_ES_PurchaseOrder]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderDate] [datetime] NULL,
[OpenRelease] [varchar] (3) NULL,
[OrgCommittedDelivDate] [datetime] NULL,
[PartNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[SupplierPartNum] [nvarchar] (50) NULL,
[PurchaseOrderQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (10) NULL,
[PurchaserName] [nvarchar] (100) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[PORes1] [nvarchar] (100) NULL,
[PORes2] [nvarchar] (100) NULL,
[ReqDelivDate] [date] NULL,
[ActualDelivDate] [nvarchar] (60) NULL,
[PurchaseInvoiceNum] [nvarchar] (60) NULL,
[DiscountAmount] [nvarchar] (60) NULL,
[ExchangeRate] [nvarchar] (60) NULL,
[PurchaseOrderSubLine] [nvarchar] (100) NULL,
[IsClosed] [bit] NULL,
[SupplierInvoiceNum] [nvarchar] (100) NULL,
[PartStatus] [nvarchar] (100) NULL,
[ReceiveQty] [decimal] (18, 4) NULL,
[InvoiceQty] [decimal] (18, 4) NULL,
[UoM] [nvarchar] (100) NULL,
[LandedCost] [decimal] (18, 4) NULL,
[Comments] [nvarchar] (max) NULL,
[datetime_created_at] [datetime] NULL,
[datetime_modified_at] [datetime] NULL
)
GO
PRINT N'Creating [stage].[vFOR_ES_PurchaseOrder]'
GO



CREATE VIEW [stage].[vFOR_ES_PurchaseOrder] AS 
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM(PurchaseOrderNum),'#',TRIM(PurchaseOrderLine),'#',TRIM(PurchaseOrderSubLine))))) AS PurchaseOrderID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(PurchaseOrderNum)))) AS PurchaseOrderNumID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(SupplierNum)))) AS SupplierID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',TRIM([Company]))) AS CompanyID,
	UPPER(CONCAT(TRIM(Company), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine),'#',TRIM(PurchaseOrderSubLine))) as PurchaseOrderCode,
	PartitionKey,
	Company,
	PurchaseOrderNum		,
	PurchaseOrderLine		,
	PurchaseOrderSubLine ,
	PurchaseOrderDate	  ,
	IIF(OpenRelease = 'C', 'Closed', 'Open') AS  PurchaseOrderStatus, -- SB 2022-11-22
	OrgCommittedDelivDate ,
	cast(isnull(nullif(OrgCommittedDelivDate,''),'1900-01-01') as date) as CommittedDelivDate,
	PartNum               ,
	SupplierNum           ,
	SupplierPartNum       ,
	PurchaseOrderQty      ,
	--PurchaseRemainingQty,
	UnitPrice             ,
	DiscountPercent       ,
	Currency              ,
	PurchaserName         ,
	WarehouseCode         ,
	PORes1                , -- Its representing Supplier Name
	PORes2                , -- Its representing PartNum Description
	cast(ReqDelivDate as date) as ReqDelivDate,
	cast(ActualDelivDate as date) as ActualDelivDate,
	cast(PurchaseInvoiceNum as nvarchar(100)) as PurchaseInvoiceNum,
	cast(DiscountAmount as decimal(18,4)) as DiscountAmount,
	cast(ExchangeRate as decimal(18,4)) as ExchangeRate,
	ReceiveQty,
	IsClosed
	,SupplierInvoiceNum
	,PartStatus
	, InvoiceQty
	, UoM
	, LandedCost
	, Comments
	--cast(PurchaseOrderQty as decimal(18,4)) - cast(PurchaseRemainingQty as decimal(18,4)) as ReceiveQty
FROM 
	 [stage].[FOR_ES_PurchaseOrder]
	 where PartNum != '0' -- Special request to remove since there are payments in advance and not actually an article/part
GO
PRINT N'Creating [dm].[FactPurchaseOrder]'
GO
CREATE VIEW [dm].[FactPurchaseOrder]
AS
SELECT CONVERT(BIGINT, PORD.PurchaseOrderID) AS [PurchaseOrderID]
	,CONVERT(BIGINT, PORD.PurchaseOrderNumID) AS [PurchaseOrderNumID]
	,CONVERT(BIGINT, PORD.[PurchaseInvoiceID]) AS [PurchaseInvoiceID]
	,CONVERT(BIGINT, PORD.[CompanyID]) AS [CompanyID]
	,CONVERT(BIGINT, PORD.[SupplierID]) AS [SupplierID]
	,CONVERT(BIGINT, PORD.[CustomerID]) AS [CustomerID]
	,CONVERT(BIGINT, PORD.[PartID]) AS [PartID]
	,CONVERT(BIGINT, PORD.[WarehouseID]) AS [WarehouseID]
	,CONVERT(BIGINT, PORD.[CurrencyID]) AS [CurrencyID]
	,CONVERT(INT, replace(CONVERT(DATE, [PurchaseOrderDate]), '-', '')) AS PurchaseOrderDateID
	,CONVERT(INT, replace(CONVERT(DATE, [PurchaseInvoiceDate]), '-', '')) AS PurchaseInvoiceDateID
	,PORD.Company
	,TRIM(PORD.[PurchaseOrderNum]) AS [PurchaseOrderNum]
	,TRIM(PORD.[PurchaseOrderLine]) AS [PurchaseOrderLine]
	,PORD.[PurchaseOrderSubLine]
	,PORD.[PurchaseOrderType]
	,PORD.[PurchaseOrderDate]
	/*	,CASE WHEN NULLIF(TRIM(PORD.[PurchaseOrderStatus]),'') IS NULL THEN IIF(PORD.[PurchaseOrderQty] - PORD.[ReceiveQty] > 0, 'Open', 'Closed')  
			ELSE PORD.[PurchaseOrderStatus] END AS PurchaseOrderStatus			*/ --
	,CASE 
		WHEN PORD.[PurchaseOrderStatus] NOT IN ('Open', 'Closed', '1') THEN IIF(PORD.[PurchaseOrderQty] - PORD.[ReceiveQty] > 0, 'Open', 'Closed')
		WHEN PORD.IsClosed = '1' THEN 'Closed'
		ELSE PORD.[PurchaseOrderStatus]	END AS PurchaseOrderStatus
	,IIF(PORD.[OrgReqDelivDate] < '1900-01-01'
		OR PORD.[OrgReqDelivDate] IS NULL, '1900-01-01', PORD.[OrgReqDelivDate]) AS [OrgReqDelivDate]
	,IIF(PORD.[CommittedDelivDate] < '1900-01-01'
		OR PORD.[CommittedDelivDate] IS NULL, '1900-01-01', PORD.[CommittedDelivDate]) AS CommittedDelivDate
	,PORD.[CommittedShipDate]
	,PORD.ActualDelivDate
	,PORD.[ReqDelivDate]
	,PORD.[PurchaseInvoiceNum]
	,PORD.[PartNum]
	,PORD.[SupplierNum]
	,PORD.SupplierPartNum
	,PORD.[SupplierInvoiceNum]
	,PORD.[DelivCustomerNum]
	,PORD.[PartStatus]
	,PORD.[PurchaseOrderQty] AS [OrderQty]
	,PORD.[ReceiveQty]
	,PORD.[InvoiceQty]
	,PORD.MinOrderQty
	,PORD.[UoM]
	,PORD.[UnitPrice]
	,PORD.[DiscountPercent]
	,PORD.[DiscountAmount]
	,PORD.[ExchangeRate]
	,PORD.[Currency]
	,PORD.[PurchaserName]
	,PORD.[WarehouseCode]
	,PORD.[ReceivingNum]
	,PORD.[DelivTime]
	,PORD.[PurchaseChannel]
	,PORD.Documents
	,PORD.[Comments]
	,PORD.PORes1
	,PORD.PORes2
	,PORD.PORes3
	,CASE 
		WHEN PLED.[LastPaymentDate] = '1900-01-01'
			THEN 'Not Paid'
		WHEN PLED.[LastPaymentDate] > '1900-01-01'
			THEN 'Paid'
		END AS InvoiceStatus
	,DATEDIFF(day, [PurchaseOrderDate], GETDATE()) AS DaysSinceOrder
	,PORD.OrgCommittedDelivDate
	,PORD.IsClosed as IsOrderClosed --added 2023-06-12 SB. DW name needs to be changed to "IsOrderClosed".
FROM [dw].[PurchaseOrder] AS PORD
--LEFT JOIN dw.PurchaseLedger AS PLED  --Changed to the join below to avoid duplicates
LEFT JOIN (
	SELECT PurchaseOrderNumID
		,PurchaseInvoiceID
		,SupplierID
		,PurchaseInvoiceDate
		,MAX([PurchaseLastPaymentDate]) AS LastPaymentDate
	FROM dw.PurchaseLedger
	GROUP BY PurchaseOrderNumID
		,PurchaseInvoiceID
		,SupplierID
		,PurchaseInvoiceDate
	) AS PLED ON PORD.PurchaseOrderNumID = PLED.PurchaseOrderNumID
	AND PORD.PurchaseInvoiceID = PLED.PurchaseInvoiceID
	AND PORD.SupplierID = PLED.SupplierID
where PORD.is_deleted != 1 or PORD.is_deleted is null
GO
PRINT N'Creating [dm_IN].[fctPurchaseOrder]'
GO

CREATE VIEW [dm_IN].[fctPurchaseOrder] AS

SELECT 

 po.[PurchaseOrderID]
,po.[PurchaseOrderNumID]
,po.[PurchaseInvoiceID]
,po.[CompanyID]
,po.[SupplierID]
,po.[CustomerID]
,po.[PartID]
,po.[WarehouseID]
,po.[CurrencyID]
,po.[PurchaseOrderDateID]
,po.[PurchaseInvoiceDateID]
,po.[Company]
,po.[PurchaseOrderNum]
,po.[PurchaseOrderLine]
,po.[PurchaseOrderSubLine]
,po.[PurchaseOrderType]
,po.[PurchaseOrderDate]
,po.[PurchaseOrderStatus]
,po.[OrgReqDelivDate]
,po.[CommittedDelivDate]
,po.[CommittedShipDate]
,po.[ActualDelivDate]
,po.[ReqDelivDate]
,po.[PurchaseInvoiceNum]
,po.[PartNum]
,po.[SupplierNum]
,po.[SupplierPartNum]
,po.[SupplierInvoiceNum]
,po.[DelivCustomerNum]
,po.[PartStatus]
,po.[OrderQty]
,po.[ReceiveQty]
,po.[InvoiceQty]
,po.[MinOrderQty]
,po.[UoM]
,po.[UnitPrice]
,po.[DiscountPercent]
,po.[DiscountAmount]
,po.[ExchangeRate]
,po.[Currency]
,po.[PurchaserName]
,po.[WarehouseCode]
,po.[ReceivingNum]
,po.[DelivTime]
,po.[PurchaseChannel]
,po.[Documents]
,po.[Comments]
,po.[PORes1]
,po.[PORes2]
,po.[PORes3]
,po.[InvoiceStatus]
,po.[DaysSinceOrder]
,po.[OrgCommittedDelivDate]
,po.[IsOrderClosed]

FROM [dm].[FactPurchaseOrder] po
LEFT JOIN dbo.Company com ON po.Company = com.Company
WHERE com.BusinessArea = 'Industrial Solutions' AND com.[Status] = 'Active'
GO
PRINT N'Creating [stage].[NOM_NO_Supplier]'
GO
CREATE TABLE [stage].[NOM_NO_Supplier]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[MainSupplierName] [nvarchar] (100) NULL,
[SupplierName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[AddressLine3] [nvarchar] (100) NULL,
[City] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[TelephoneNum] [nvarchar] (50) NULL,
[Email] [nvarchar] (100) NULL,
[District] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (100) NULL,
[Region] [nvarchar] (50) NULL,
[SupplierCategory] [nvarchar] (50) NULL,
[SupplierResponsible] [nvarchar] (100) NULL,
[AccountNum] [nvarchar] (50) NULL,
[VATNum] [nvarchar] (50) NULL,
[OrganisationNum] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[CodeOfConduct] [nvarchar] (50) NULL,
[SupplierScore] [nvarchar] (50) NULL,
[MinOrderQty] [decimal] (18, 4) NULL,
[MinOrderValue] [decimal] (18, 4) NULL,
[Website] [nvarchar] (100) NULL,
[Comments] [nvarchar] (max) NULL,
[SRes1] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vNOM_NO_Supplier]'
GO
CREATE VIEW [stage].[vNOM_NO_Supplier] AS

SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID
    ,UPPER(CONCAT([Company],'#',TRIM([SupplierNum]))) AS SupplierCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([SupplierNum])) AS SupplierNum
	,TRIM(MainSupplierName) AS MainSupplierName
	,TRIM(SupplierName) AS SupplierName
	,TRIM([AddressLine1]) AS AddressLine1
    ,TRIM([AddressLine2]) AS AddressLine2
    ,TRIM([AddressLine3]) AS AddressLine3
	,TRIM([TelephoneNum]) AS [TelephoneNum]
	,[Email]
	,TRIM(ZipCode) AS ZipCode
	,TRIM([City]) AS City
	,District
	,TRIM(CountryCode) AS CountryCode
	,TRIM(CountryName) AS CountryName
	,[Region] 
	,TRIM([SupplierCategory]) AS SupplierCategory 
	,TRIM(SupplierResponsible) AS SupplierResponsible
	,IIF(AddressLine1 = '', TRIM([AddressLine2]), TRIM([AddressLine1])) AS AddressLine
	,Concat(TRIM(CountryName), ', ', TRIM([City]), ', ', TRIM(ZipCode), ', ', IIF(AddressLine1 = '', TRIM([AddressLine2]), TRIM([AddressLine1]))) AS FullAddressLine
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [AccountNum])) AS [AccountNum]
	,[VATNum]
	,OrganisationNum as OrganizationNum
	,InternalExternal AS InternalExternal
	,[CodeOfConduct]
	,'' AS CustomerNum
	,TRIM(SupplierScore) AS SupplierScore
	,[MinOrderQty]
	,MinOrderValue	
	,[Website]
	,TRIM(Comments) AS Comments
	,SRes1
	--,'' AS SRes2
	--,'' AS SRes3
FROM [stage].[NOM_NO_Supplier]
/*GROUP BY 
      [PartitionKey],[Company],[SupplierNum],[SupplierName],[AddressLine1],[AddressLine2],[AddressLine3],[City],[ZIP],[Region],[CountryName]
	  ,[SupplierCategory],[Reference],[BankAccountNum],[VATNum],[SupplierABC],[CustomerCode],[TelephoneNum],[Email],[Website],[CodeOfConduct]
	  ,[MinOrderQty],[InternalName],[Comment] */
GO
PRINT N'Creating [dw].[StockBalance]'
GO
CREATE TABLE [dw].[StockBalance]
(
[ItemWarehouseID] [binary] (32) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[Currency] [nvarchar] (10) NULL,
[Company] [nvarchar] (8) NOT NULL,
[BinNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[DelivTime] [smallint] NULL,
[LastStockTakeDate] [date] NULL,
[LastStdCostCalDate] [date] NULL,
[SafetyStock] [decimal] (18, 4) NULL,
[MaxStockQty] [decimal] (18, 4) NULL,
[StockBalance] [decimal] (18, 4) NULL,
[StockValue] [decimal] (18, 4) NULL,
[ReserveQty] [decimal] (18, 4) NULL,
[BackOrderQty] [decimal] (18, 4) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[StockTakeDiff] [decimal] (18, 4) NULL,
[ReOrderLevel] [decimal] (18, 4) NULL,
[OptimalOrderQty] [decimal] (18, 4) NULL,
[AvgCost] [decimal] (18, 4) NULL CONSTRAINT [DF__StockBala__AvgCo__32DFF7D2] DEFAULT ((0)),
[ItemWarehouseCode] [nvarchar] (200) NULL,
[SBRes1] [nvarchar] (100) NULL,
[SBRes2] [nvarchar] (100) NULL,
[SBRes3] [nvarchar] (100) NULL,
[CompanyID] [binary] (32) NULL,
[SupplierID] [binary] (32) NULL,
[PartID] [binary] (32) NULL,
[WarehouseID] [binary] (32) NULL,
[PartitionKey] [nvarchar] (50) NOT NULL,
[is_deleted] [bit] NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[SalesRemainingQty] [decimal] (18, 4) NULL,
[PurchaseRemainingqty] [decimal] (18, 4) NULL,
[IsActiveRecord] [bit] NULL,
[is_inferred] [bit] NULL
)
GO
PRINT N'Creating primary key [PK_StockBalance] on [dw].[StockBalance]'
GO
ALTER TABLE [dw].[StockBalance] ADD CONSTRAINT [PK_StockBalance] PRIMARY KEY CLUSTERED ([ItemWarehouseID])
GO
PRINT N'Creating [dw].[SalesOrderLog]'
GO
CREATE TABLE [dw].[SalesOrderLog]
(
[SalesOrderLogID] [binary] (32) NOT NULL,
[CompanyID] [binary] (32) NULL,
[CustomerID] [binary] (32) NULL,
[PartID] [binary] (32) NULL,
[WarehouseID] [binary] (32) NULL,
[SalesOrderDateID] [int] NOT NULL,
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (8) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[SalesOrderNum] [nvarchar] (50) NULL,
[SalesOrderLine] [nvarchar] (50) NULL,
[SalesOrderSubLine] [nvarchar] (50) NULL,
[SalesOrderType] [nvarchar] (50) NULL,
[SalesOrderLogType] [nvarchar] (50) NULL,
[SalesOrderDate] [date] NULL,
[SalesOrderLogDate] [date] NOT NULL,
[SalesInvoiceNum] [nvarchar] (50) NULL,
[SalesOrderQty] [decimal] (18, 4) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (50) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartType] [nvarchar] (100) NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[Department] [nvarchar] (100) NULL,
[ReturnComment] [nvarchar] (max) NULL,
[SalesReturnInvoiceNum] [nvarchar] (50) NULL,
[CancellationCode] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[IndexKey] [nvarchar] (50) NOT NULL,
[SORes1] [nvarchar] (100) NULL,
[SORes2] [nvarchar] (100) NULL,
[SORes3] [nvarchar] (100) NULL,
[is_deleted] [bit] NULL
)
GO
PRINT N'Creating primary key [PK_SalesOrderLog_1] on [dw].[SalesOrderLog]'
GO
ALTER TABLE [dw].[SalesOrderLog] ADD CONSTRAINT [PK_SalesOrderLog_1] PRIMARY KEY CLUSTERED ([SalesOrderLogID])
GO
PRINT N'Creating index [IX_Company_SalesOrderLogDate] on [dw].[SalesOrderLog]'
GO
CREATE NONCLUSTERED INDEX [IX_Company_SalesOrderLogDate] ON [dw].[SalesOrderLog] ([Company], [SalesOrderLogDate] DESC)
GO
PRINT N'Creating [dw].[SalesInvoice]'
GO
CREATE TABLE [dw].[SalesInvoice]
(
[SalesInvoiceID] [binary] (32) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartType] [nvarchar] (50) NULL,
[SalesOrderNum] [nvarchar] (50) NULL,
[SalesOrderLine] [nvarchar] (50) NULL,
[SalesOrderSubLine] [nvarchar] (50) NULL,
[SalesOrderType] [nvarchar] (50) NULL,
[SalesInvoiceNum] [nvarchar] (50) NOT NULL,
[SalesInvoiceLine] [nvarchar] (50) NULL,
[SalesInvoiceType] [nvarchar] (50) NULL,
[SalesInvoiceDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[SalesInvoiceQty] [decimal] (18, 4) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[VATAmount] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[Department] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[CostBearerNum] [nvarchar] (50) NULL,
[CostUnitNum] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (max) NULL,
[ReturnNum] [nvarchar] (50) NULL,
[ProjectNum] [nvarchar] (50) NULL,
[IndexKey] [nvarchar] (50) NULL,
[SIRes1] [nvarchar] (100) NULL,
[SIRes2] [nvarchar] (100) NULL,
[SIRes3] [nvarchar] (100) NULL,
[SalesOrderID] [binary] (32) NULL,
[SalesLedgerID] [binary] (32) NULL,
[SalesOrderNumID] [binary] (32) NULL,
[CompanyID] [binary] (32) NULL,
[CustomerID] [binary] (32) NULL,
[PartID] [binary] (32) NULL,
[WarehouseID] [binary] (32) NULL,
[SalesOrderCode] [nvarchar] (200) NULL,
[SalesInvoiceDateID] [int] NULL,
[SalesInvoiceCode] [nvarchar] (500) NULL,
[PartitionKey] [nvarchar] (50) NOT NULL,
[CashDiscountOffered] [decimal] (18, 4) NULL CONSTRAINT [DF__SalesInvo__CashD__0371755F] DEFAULT ((0)),
[CashDiscountUsed] [decimal] (18, 4) NULL CONSTRAINT [DF__SalesInvo__CashD__04659998] DEFAULT ((0)),
[ProjectID] [binary] (32) NULL,
[DeliveryAddress] [nvarchar] (255) NULL,
[IsUpdatingStock] [nvarchar] (50) NULL,
[SIRes4] [decimal] (18, 4) NULL,
[SIRes5] [decimal] (18, 4) NULL,
[SIRes6] [decimal] (18, 4) NULL,
[is_deleted] [bit] NULL,
[DepartmentID] [binary] (32) NULL,
[SalesInvoiceSubLine] [nvarchar] (50) NULL,
[IsInvoiceClosed] [bit] NULL,
[InvoiceHandler] [nvarchar] (100) NULL,
[IsCreditMemo] [nvarchar] (50) NULL,
[DepartmentCode] [nvarchar] (50) NULL,
[DeliveryZipCode] [nvarchar] (50) NULL,
[DeliveryCity] [nvarchar] (50) NULL,
[DeliveryCountry] [nvarchar] (50) NULL,
[IsActiveRecord] [bit] NULL
)
GO
PRINT N'Creating primary key [PK_SalesInvoice] on [dw].[SalesInvoice]'
GO
ALTER TABLE [dw].[SalesInvoice] ADD CONSTRAINT [PK_SalesInvoice] PRIMARY KEY CLUSTERED ([SalesInvoiceID])
GO
PRINT N'Creating index [nci_wi_Company] on [dw].[SalesInvoice]'
GO
CREATE NONCLUSTERED INDEX [nci_wi_Company] ON [dw].[SalesInvoice] ([Company])
GO
PRINT N'Creating index [IX_Company_SalesInvoiceDate] on [dw].[SalesInvoice]'
GO
CREATE NONCLUSTERED INDEX [IX_Company_SalesInvoiceDate] ON [dw].[SalesInvoice] ([Company], [SalesInvoiceDate] DESC)
GO
PRINT N'Creating [dw].[PurchaseInvoice]'
GO
CREATE TABLE [dw].[PurchaseInvoice]
(
[PurchaseInvoiceID] [binary] (32) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaseOrderType] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NOT NULL,
[PurchaseInvoiceLine] [nvarchar] (50) NULL,
[PurchaseInvoiceType] [nvarchar] (50) NULL,
[PurchaseInvoiceDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[PurchaseInvoiceQty] [decimal] (18, 4) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[VATAmount] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (10) NULL,
[CreditMemo] [nvarchar] (100) NULL,
[PurchaserName] [nvarchar] (100) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[PurchaseChannel] [nvarchar] (50) NULL,
[PIRes1] [nvarchar] (100) NULL,
[PIRes2] [nvarchar] (100) NULL,
[PIRes3] [nvarchar] (100) NULL,
[PurchaseInvoiceCode] [nvarchar] (300) NULL,
[PurchaseOrderCode] [nvarchar] (300) NULL,
[PurchaseOrderNumID] [binary] (32) NULL,
[PurchaseOrderID] [binary] (32) NULL,
[SupplierID] [binary] (32) NULL,
[CompanyID] [binary] (32) NULL,
[PartID] [binary] (32) NULL,
[WarehouseID] [binary] (32) NULL,
[PurchaseInvoiceDateID] [nvarchar] (50) NULL,
[PurchaseLedgerID] [binary] (32) NULL,
[PartitionKey] [nvarchar] (50) NULL,
[Comment] [nvarchar] (500) NULL,
[is_deleted] [bit] NULL,
[PurchaseInvoiceSubLine] [nvarchar] (50) NULL,
[ActualShipDate] [date] NULL,
[ActualRecieveDate] [date] NULL,
[IsInvoiceClosed] [bit] NULL,
[IsActiveRecord] [bit] NULL,
[PIRes4] [decimal] (18, 4) NULL,
[PurchaseInvoiceAmountOC] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating primary key [PK_PurchaseInvoice] on [dw].[PurchaseInvoice]'
GO
ALTER TABLE [dw].[PurchaseInvoice] ADD CONSTRAINT [PK_PurchaseInvoice] PRIMARY KEY CLUSTERED ([PurchaseInvoiceID])
GO
PRINT N'Creating index [IX_Company_PurchaseInvoiceDate] on [dw].[PurchaseInvoice]'
GO
CREATE NONCLUSTERED INDEX [IX_Company_PurchaseInvoiceDate] ON [dw].[PurchaseInvoice] ([Company], [PurchaseInvoiceDate] DESC)
GO
PRINT N'Creating [dw].[Part]'
GO
CREATE TABLE [dw].[Part]
(
[PartID] [binary] (32) NOT NULL,
[PartCode] [nvarchar] (max) NULL,
[Company] [nvarchar] (8) NOT NULL,
[PartNum] [nvarchar] (100) NULL,
[PartName] [nvarchar] (200) NULL,
[PartDescription] [nvarchar] (max) NULL,
[PartDescription2] [nvarchar] (max) NULL,
[PartDescription3] [nvarchar] (max) NULL,
[ProductGroup] [nvarchar] (200) NULL,
[ProductGroup2] [nvarchar] (200) NULL,
[ProductGroup3] [nvarchar] (200) NULL,
[ProductGroup4] [nvarchar] (200) NULL,
[Brand] [nvarchar] (200) NULL,
[CommodityCode] [nvarchar] (50) NULL,
[PartReplacementNum] [nvarchar] (100) NULL,
[PartStatus] [nvarchar] (100) NULL,
[CountryOfOrigin] [nvarchar] (100) NULL,
[NetWeight] [decimal] (18, 4) NULL,
[UoM] [nvarchar] (50) NULL,
[Material] [nvarchar] (200) NULL,
[Barcode] [nvarchar] (50) NULL,
[ReOrderLevel] [decimal] (18, 4) NULL,
[PartResponsible] [nvarchar] (100) NULL,
[StartDate] [date] NULL,
[EndDate] [date] NULL,
[CompanyID] [binary] (32) NULL,
[PartitionKey] [varchar] (50) NOT NULL,
[MainSupplier] [nvarchar] (100) NULL,
[AlternativeSupplier] [nvarchar] (100) NULL,
[is_deleted] [bit] NULL,
[is_inferred] [bit] NULL,
[PARes1] [nvarchar] (100) NULL,
[PARes2] [nvarchar] (100) NULL,
[PARes3] [nvarchar] (100) NULL,
[IsActiveRecord] [bit] NULL
)
GO
PRINT N'Creating primary key [PK_Part] on [dw].[Part]'
GO
ALTER TABLE [dw].[Part] ADD CONSTRAINT [PK_Part] PRIMARY KEY CLUSTERED ([PartID])
GO
PRINT N'Creating index [nci_wi_Company] on [dw].[Part]'
GO
CREATE NONCLUSTERED INDEX [nci_wi_Company] ON [dw].[Part] ([Company])
GO
PRINT N'Creating index [nci_wi_Part] on [dw].[Part]'
GO
CREATE NONCLUSTERED INDEX [nci_wi_Part] ON [dw].[Part] ([PartitionKey])
GO
PRINT N'Creating [audit].[dw_space_used_by_company]'
GO

CREATE view [audit].[dw_space_used_by_company] as

SELECT 'dw.SalesOrder' AS TableName, [Company], COUNT(1) AS [Rows]--, SUM(COUNT(1)) OVER ()  as [RowsTotal]
  FROM [dw].[SalesOrder]
  GROUP BY Company

UNION ALL

SELECT 'dw.SalesInvoice' AS TableName, [Company], COUNT(1) AS [Rows]--, SUM(COUNT(1)) OVER ()  as [RowsTotal]
FROM [dw].[SalesInvoice]
GROUP BY Company

UNION ALL

SELECT 'dw.StockTransaction' AS TableName, [Company], COUNT(1) AS [Rows]--, SUM(COUNT(1)) OVER ()  as [RowsTotal]
FROM [dw].StockTransaction
GROUP BY Company

UNION ALL

SELECT 'dw.SalesOrderLog' AS TableName, [Company], COUNT(1) AS [Rows]--, SUM(COUNT(1)) OVER ()  as [RowsTotal]
FROM [dw].SalesOrderLog
GROUP BY Company

UNION ALL

SELECT 'dw.SalesLedger' AS TableName, [Company], COUNT(1) AS [Rows]--, SUM(COUNT(1)) OVER ()  as [RowsTotal]
FROM [dw].SalesLedger
GROUP BY Company

UNION ALL

SELECT 'dw.Part' AS TableName, [Company], COUNT(1) AS [Rows]--, SUM(COUNT(1)) OVER ()  as [RowsTotal]
FROM [dw].Part
GROUP BY Company

UNION ALL

SELECT 'dw.PurchaseInvoice' AS TableName, [Company], COUNT(1) AS [Rows]--, SUM(COUNT(1)) OVER ()  as [RowsTotal]
FROM [dw].PurchaseInvoice
GROUP BY Company

UNION ALL

SELECT 'dw.PurchaseOrder' AS TableName, [Company], COUNT(1) AS [Rows]--, SUM(COUNT(1)) OVER ()  as [RowsTotal]
FROM [dw].PurchaseOrder
GROUP BY Company

UNION ALL

SELECT 'dw.Customer' AS TableName, [Company], COUNT(1) AS [Rows]--, SUM(COUNT(1)) OVER ()  as [RowsTotal]
FROM [dw].Customer
GROUP BY Company

UNION ALL

SELECT 'dw.StockBalance' AS TableName, [Company], COUNT(1) AS [Rows]--, SUM(COUNT(1)) OVER ()  as [RowsTotal]
FROM [dw].StockBalance
GROUP BY Company
GO
PRINT N'Creating [stage].[CER_UK_Part]'
GO
CREATE TABLE [stage].[CER_UK_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartDescription] [nvarchar] (25) NULL,
[PartDescription2] [nvarchar] (25) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[ProductGroup2] [nvarchar] (50) NULL,
[CommodityCode] [nvarchar] (14) NULL,
[CountryOfOrigin] [nvarchar] (50) NULL,
[NetWeight] [decimal] (18, 8) NULL,
[SupplierCode] [nvarchar] (10) NULL,
[ReorderLevel] [decimal] (20, 8) NULL,
[Barcode] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_UK_Part]'
GO
CREATE VIEW [stage].[vCER_UK_Part] AS
--COMMENT EMPTY FIELDS // ADD UPPER() TRIM() 2022-12-20 va
SELECT 
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', [PartNum]))) AS PartID
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([PartNum]))))) AS PartID
	,CONCAT([Company], '#', [PartNum]) AS PartCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [Company])) AS CompanyID
	,PartitionKey

	,[Company]
	,[PartNum]
	--,'' AS [PartName]
	,[PartDescription]
	,[PartDescription2]
	--,'' AS [PartDescription3]
	--,NULL AS MainSupplier
	--,NULL AS AlternativeSupplier
	,[ProductGroup]
	,[ProductGroup2]
	--,'' AS [ProductGroup3]
	--,'' AS [ProductGroup4]
	--,'' AS [Brand]
	,[Barcode]
	,[CommodityCode]
	--,'' AS [PartReplacementNum]
	--,'' AS [PartStatus]
	,[CountryOfOrigin]
	,[NetWeight]
	--,'' AS [UoM]
	--,'' AS [Material]
	--,'' AS [PartResponsible]
	,[ReorderLevel] AS [ReOrderLevel]
	--,'' AS [StartDate]
	--,'' AS [EndDate]

FROM [stage].[CER_UK_Part]
GO
PRINT N'Creating [audit].[PipelinesActivitiesLog]'
GO
CREATE TABLE [audit].[PipelinesActivitiesLog]
(
[PipelineRunID] [varchar] (100) NULL,
[PipelineTriggerRunID] [varchar] (100) NULL,
[Company] [varchar] (25) NULL,
[TableName] [nvarchar] (60) NULL,
[Stage] [varchar] (25) NULL,
[StartTime] [datetime] NULL,
[EndTime] [datetime] NULL,
[Status] [varchar] (25) NULL,
[ErrorMessage] [varchar] (max) NULL,
[rowsCopied] [varchar] (25) NULL,
[Date] [date] NULL,
[Period] [nvarchar] (40) NULL,
[Triggered] [bit] NULL,
[PartitionKey] [varchar] (50) NULL
)
GO
PRINT N'Creating [sp].[MergeView]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE PROCEDURE [sp].[MergeView]
	 @PartitionKey		nvarchar(50)
	,@TableName			nvarchar(50)
	,@SchemaName		nvarchar(50)
	,@SourcetableName	nvarchar(80)
	,@Debug				bit
	,@Company			nvarchar(50)

AS
	DECLARE @SQLStatement		nvarchar(max)
	DECLARE @dwFilterColumnName nvarchar(60)
	DECLARE @deltaLoadStatement nvarchar(100)
	DECLARE @Period				nvarchar(50)
	DECLARE @TargetTable		nvarchar(100)
	DECLARE @StageView			nvarchar(100)
	DECLARE @RowCount			int 



	SET @SQLStatement = N'SELECT @dwFilterColumnName = isnull(dwFilterColumnName,''null''), @deltaLoadStatement = DeltaLoadStatement, @StageView = Stagetablename
						FROM dbo.' + @SourcetableName +' WHERE dwtablename = @TableName and Company = @Company'

	EXEC sp_executesql @SQLStatement,
					   N'@TableName NVARCHAR(50),
						 @Company NVARCHAR(50),
						 @dwFilterColumnName NVARCHAR(60) OUTPUT,
						 @deltaLoadStatement NVARCHAR(100) OUTPUT,
						 @StageView NVARCHAR(100) OUTPUT',
						 @TableName,
						 @Company,
						 @dwFilterColumnName OUTPUT,
						 @deltaLoadStatement OUTPUT,
						 @StageView OUTPUT;

	SELECT @RowCount = @@ROWCOUNT;

	IF @RowCount = 1
	BEGIN

		SELECT @Period = isnull(Period,'')
		from audit.PipelinesActivitiesLog
		WHERE PartitionKey = @PartitionKey
		and TableName = @TableName
		and Company = @Company

		SET @TargetTable = concat(@SchemaName,'.',@TableName)
		SET @StageView = concat('stage.v',@StageView)
		IF @Period IS NOT NULL
		BEGIN
			IF len(@Period) > 0
				begin
					SET @Period = '''' + @Period + ''''
				end	

			EXEC [sp].[Global_load] 
			   @PartitionKey = @PartitionKey
			  ,@targetTable  = @TargetTable
			  ,@sourcetable  = @StageView
			  ,@dwFilterColumnName = @dwFilterColumnName
			  ,@deltaLoadStatement = @deltaLoadStatement
			  ,@debug = @Debug
			  ,@dateFilter = @Period
		END
		ELSE
		BEGIN
			PRINT('Period not found. Cant execute the procedure without it')
		END
	END
	ELSE
	BEGIN
		PRINT('There where 0 or > 1 rows found in the SourceTable with those conditions')
	END
GO
PRINT N'Creating [stage].[AXI_HQ_CostUnit]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[AXI_HQ_CostUnit]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (8) NOT NULL,
[CostUnitNum] [nvarchar] (50) NOT NULL,
[CostUnitName] [nvarchar] (100) NULL,
[CostUnitStatus] [nvarchar] (100) NULL,
[CostUnitGroup] [nvarchar] (100) NULL,
[CostUnitGroup2] [nvarchar] (100) NULL,
[CostUnitGroup3] [nvarchar] (100) NULL,
[CURes1] [nvarchar] (100) NULL,
[CURes2] [nvarchar] (100) NULL,
[CURes3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vAXI_HQ_CostUnit]'
GO



/****** Script for SelectTopNRows command from SSMS  ******/
CREATE VIEW [stage].[vAXI_HQ_CostUnit] AS
SELECT
	   CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', IIF(CostUnitNum='000---',N'000000',CostUnitNum))) )AS CostUnitID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',Company)) AS CompanyID
	  ,CONCAT(Company,'#',IIF(CostUnitNum='000---',N'000000',CostUnitNum)) AS CostUnitCode
	  ,CONVERT(varchar, GETDATE(), 23) AS PartitionKey

      ,[Company]
      ,IIF(CostUnitNum='000---',N'000000',CostUnitNum)	AS [CostUnitNum]
      ,[CostUnitName]
      ,[CostUnitStatus]
      ,[CostUnitGroup]
      ,[CostUnitGroup2]
      ,[CostUnitGroup3]
      ,[CURes1]
      ,[CURes2]
      ,[CURes3]
  FROM [stage].[AXI_HQ_CostUnit]
  where upper(Company) = 'AXISE'
GO
PRINT N'Creating [dbo].[ProperCase]'
GO
CREATE function [dbo].[ProperCase](@Text as nvarchar(4000))
returns nvarchar(4000)
as
begin
  declare @Reset bit;
  declare @Ret nvarchar(4000);
  declare @i int;
  declare @c nchar(1);

  if @Text is null
    return null;

  select @Reset = 1, @i = 1, @Ret = '';

  while (@i <= len(@Text))
    select @c = substring(@Text, @i, 1),
      @Ret = @Ret + case when @Reset = 1 then UPPER(@c) else LOWER(@c) end,
      @Reset = case when @c like '[a-zA-Z]' then 0 else 1 end,
      @i = @i + 1
  return @Ret
end
GO
PRINT N'Creating [dw].[PIM]'
GO
CREATE TABLE [dw].[PIM]
(
[PimID] [binary] (32) NOT NULL,
[PartID] [binary] (32) NULL,
[CompanyID] [binary] (32) NULL,
[ProductID] [nvarchar] (50) NULL,
[Manufacturer_Id] [nvarchar] (50) NULL,
[Brand] [nvarchar] (50) NULL,
[Heading] [nvarchar] (50) NULL,
[Original_Description] [nvarchar] (max) NULL,
[Last_category_name] [nvarchar] (500) NULL,
[Category_name] [nvarchar] (500) NULL,
[Category_name2] [nvarchar] (500) NULL,
[Category_name3] [nvarchar] (500) NULL,
[Category_name4] [nvarchar] (500) NULL,
[Category_name5] [nvarchar] (500) NULL,
[Category_name6] [nvarchar] (500) NULL,
[PartNum] [nvarchar] (50) NULL,
[Company] [nvarchar] (50) NULL,
[PartitionKey] [nvarchar] (50) NULL,
[is_deleted] [bit] NULL,
[is_inferred] [bit] NULL
)
GO
PRINT N'Creating primary key [PK_PIM] on [dw].[PIM]'
GO
ALTER TABLE [dw].[PIM] ADD CONSTRAINT [PK_PIM] PRIMARY KEY CLUSTERED ([PimID])
GO
PRINT N'Creating [dm].[DimPIM]'
GO



CREATE VIEW [dm].[DimPIM] AS

with remove_duplicates as (
SELECT  
	   CONVERT(bigint,[PimID]) AS     PimID
      ,CONVERT(bigint,[PartID]) AS    PartID
      ,CONVERT(bigint,[CompanyID]) AS CompanyID
      ,[ProductID]
      ,[Manufacturer_Id]
      ,[Brand]
	  ,[Heading]
	  ,[Original_Description]
      ,[Last_category_name]
      ,[Category_name]
      ,[Category_name2]
      ,[Category_name3]
      ,[Category_name4]
      ,[Category_name5]
      ,[Category_name6]
      ,[PartNum]
      ,[Company]
	  ,ROW_NUMBER() OVER (PARTITION BY PimID, PartID order by PartitionKey asc) as rn
  FROM [dw].[PIM] 
  )
  select 
	PimID					
	,PartID					
	,CompanyID				
	,[ProductID]				
	,[Manufacturer_Id]		
	,[Brand]					
	,[Heading]				
	,[Original_Description]	
	,[Last_category_name]	
	,[Category_name]			
	,[Category_name2]		
	,[Category_name3]		
	,[Category_name4]		
	,[Category_name5]		
	,[Category_name6]		
	,[PartNum]				
	,[Company]
	from remove_duplicates
  where rn = 1
GO
PRINT N'Creating [dw].[CustomerAgreement]'
GO
CREATE TABLE [dw].[CustomerAgreement]
(
[CustomerAgreementID] [binary] (32) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NOT NULL,
[AgreementCode] [nvarchar] (50) NULL,
[AgreementDescription] [nvarchar] (max) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[AgreementQty] [decimal] (18, 4) NULL,
[FulfilledQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (10) NULL,
[DelivTime] [smallint] NULL,
[AgreementStart] [date] NULL,
[AgreementEnd] [date] NULL,
[CustomerTerms] [nvarchar] (max) NULL,
[CompanyID] [binary] (32) NULL,
[CustomerID] [binary] (32) NULL,
[CurrencyID] [binary] (32) NULL,
[PartID] [binary] (32) NULL,
[PartitionKey] [nvarchar] (50) NULL,
[CARes1] [nvarchar] (100) NULL,
[CARes2] [nvarchar] (100) NULL,
[CARes3] [nvarchar] (100) NULL,
[UoM] [nvarchar] (50) NULL,
[is_deleted] [bit] NULL,
[is_inferred] [bit] NULL,
[AgreementResponsible] [nvarchar] (100) NULL,
[IsActiveRecord] [bit] NULL
)
GO
PRINT N'Creating primary key [PK_CustomerAgreement] on [dw].[CustomerAgreement]'
GO
ALTER TABLE [dw].[CustomerAgreement] ADD CONSTRAINT [PK_CustomerAgreement] PRIMARY KEY CLUSTERED ([CustomerAgreementID])
GO
PRINT N'Creating [dm].[DimPart]'
GO

CREATE VIEW [dm].[DimPart] AS

SELECT CONVERT(BIGINT, PART.PartID) AS PartID
	,CONVERT(BIGINT, PART.CompanyID) AS CompanyID
	,PART.[Company]
	,PART.[PartNum]
	,MAX(PART.[PartName]) AS [PartName]
	,CONCAT (
		TRIM(PART.[PartNum])
		,' - '
		,COALESCE(NULLIF(TRIM(MAX(PART.[PartName])), ''), TRIM(MAX(PART.[PartDescription])))
		) AS Part
	,MAX(PART.[PartDescription]) AS [PartDescription]
	,MAX(PART.[PartDescription2]) AS [PartDescription2]
	,MAX(PART.[PartDescription3]) AS [PartDescription3]
	,MAX(PART.MainSupplier) AS MainSupplier
	,MAX(PART.AlternativeSupplier) AS AlternativeSupplier
	,MAX(PART.[ProductGroup]) AS ProductGroup --took away propercase 2023-03-31 SB
	,MAX(PART.[ProductGroup2]) AS [ProductGroup2]
	,MAX(PART.[ProductGroup3]) AS [ProductGroup3]
	,MAX(PART.[ProductGroup4]) AS [ProductGroup4]
	,MAX(PART.[Brand]) AS [Brand]
	,MAX(PART.[CommodityCode]) AS [CommodityCode]
	,MAX(PART.[PartReplacementNum]) AS [PartReplacementNum]
	,MAX(PART.[PartStatus]) AS [PartStatus]
	,[dbo].[ProperCase](MAX(PART.[CountryOfOrigin])) AS CountryOfOrigin
	,MAX(PART.[NetWeight]) AS [NetWeight]
	,MAX(PART.[UoM]) AS [UoM]
	,MAX(PART.[Material]) AS [Material]
	,MAX(PART.[ReOrderLevel]) AS [ReOrderlevel]
	,MAX(PART.[Barcode]) AS [Barcode]
	,MAX(PART.[PartResponsible]) AS [PartResponsible]
	,ProductID
	,PimID
	,PIM_Category1
	,PIM_Category2
	,PIM_Category3
	,PIM_Category4
	,PIM_Category5
	,PIM_Category6
	,PIM_Brand
	,PIM_Heading
	,PIM_Original_Description
	,PIM_LCName
	,ManufacturerID
	,MAX(PART.[StartDate]) AS [StartDate]
	,MAX(PART.[EndDate]) AS [EndDate]
	,PART.PARes1
	,PART.is_inferred
	

	------------------------------------------------ Inventory Age Analysis --------------------------------------------------------
	,CASE WHEN PART.Company in ('AFISCM', 'CSECERT', 'CDKCERT', 'ACZARKOV', 'SCOFI', 'SMKFI','NomoSE', 'NomoFI', 'NomoDK', 'NomoNO', 'NINSE','FSEFORA', 'FESFORA', 'IEEWIDN', 'IFIWIDN', 'JDKJENSS', 'JNOJENSS', 'JSEJENSS', 'NORNO', 'SSWSE', 'FITMT', 'ABKSE', 'SVESE', 'ROROSE','CERNO')
		THEN (
		CASE WHEN DATEDIFF(day, MAX(PINV.MaxPurchaseDelivDate), GETDATE()) <= 90 OR DATEDIFF(day, MAX(PROD1.MAXPoductionEndDate), GETDATE()) <= 90
			THEN '1: 0-3 Month'
		WHEN DATEDIFF(day, MAX(PINV.MaxPurchaseDelivDate), GETDATE()) <= 180 OR DATEDIFF(day, MAX(PROD1.MAXPoductionEndDate), GETDATE()) <= 180
			THEN '2: 3-6 Month'
		WHEN DATEDIFF(day, MAX(PINV.MaxPurchaseDelivDate), GETDATE()) <= 365 OR DATEDIFF(day, MAX(PROD1.MAXPoductionEndDate), GETDATE()) <= 365
			THEN '3: 6-12 Month'
		WHEN DATEDIFF(day, MAX(PINV.MaxPurchaseDelivDate), GETDATE()) <= 730 OR DATEDIFF(day, MAX(PROD1.MAXPoductionEndDate), GETDATE()) <= 730
			THEN '4: 12-24 Month'
		WHEN DATEDIFF(day, MAX(PINV.MaxPurchaseDelivDate), GETDATE()) <= 1095 OR DATEDIFF(day, MAX(PROD1.MAXPoductionEndDate), GETDATE()) <= 1095
			THEN '5: 24-36 Month'
		ELSE '6: 36+ Month'
		END)
	END AS PartAge --Hej David, vet du vad denna post är i PartAge? Är det när vi saknar lagertransaktioner? Borde den inte ligga på 36+månader då? 2022-07-05 TÖ
	--		  WHEN DATEDIFF(day, MIN(PINV.MaxPurchaseDelivDate), GETDATE()) > 1095  THEN '6: 36+ Month'
	--		  ELSE 'Unclassified' END AS PartAge
	/* for that 'where company='NOMOse' and partnum='24026 CJ W33-TIMKEN' ' should be classified as 36+ NOT currently as Unclassified, according to Åsa (20220519 meeting). We may should add one more table/condition of purchaseOrder, since this item has an internal order on the 20160203, but not in the PurchaseInvoice (PINV), therefore it is "mis-classified". What do you think Emil? /DZ  */
	------------------------------------------------ Part Activity Analysis --------------------------------------------------------
	,CASE WHEN PART.Company in ('AFISCM', 'CSECERT', 'CDKCERT', 'ACZARKOV', 'SCOFI', 'SMKFI','NomoSE', 'NomoFI', 'NomoDK', 'NomoNO', 'NINSE', 'FSEFORA', 'FESFORA', 'IEEWIDN', 'IFIWIDN', 'JDKJENSS', 'JNOJENSS', 'JSEJENSS', 'NORNO', 'SSWSE', 'FITMT', 'ABKSE', 'SVESE', 'ROROSE','CERNO')
		THEN (
		CASE WHEN DATEDIFF(day, MAX(STRA.TransactionDate), GETDATE()) <= 180
			THEN '1: 0-6 Month'
		WHEN DATEDIFF(day, MAX(STRA.TransactionDate), GETDATE()) <= 365
			THEN '2: 6-12 Month'
		WHEN DATEDIFF(day, MAX(STRA.TransactionDate), GETDATE()) <= 730
			THEN '3: 12-24 Month'
		WHEN DATEDIFF(day, MAX(STRA.TransactionDate), GETDATE()) <= 1095
			THEN '4: 24-36 Month'
		WHEN DATEDIFF(day, MAX(STRA.TransactionDate), GETDATE()) > 1095
			THEN '5: 36+ Month'
		ELSE 'Unclassified'
		END)
	END AS PartActivity
	--,CASE WHEN DATEDIFF(day, MAX(po.OrderDate), GETDATE()) > 730 or MAX(po.OrderDate) is NULL THEN 'Y' ELSE 'N' END AS "2YearPOItem" --Items NOT added to the product range during the last 24 months is included from the assessment
	--,CASE WHEN DATEDIFF(day, MAX(STRA.TransactionDate), GETDATE()) > 730 or MAX(STRA.TransactionDate) is NULL THEN 'Y' ELSE 'N' END AS "2YearStockTransaction"
	--,CASE WHEN DATEDIFF(day, MAX(CAGR.ValidToDate), GETDATE()) > 730 or MAX(CAGR.ValidToDate) is NULL THEN 'Y' ELSE 'N' END AS "2YearOldAgreement"
	--,CASE WHEN DATEDIFF(day, MAX(SINV.InvoiceDate), GETDATE()) > 730 or MAX(InvoiceDate) is NULL THEN 'Y' ELSE 'N' END AS Obsolete
	--,CASE WHEN STRA2.StockBalanceQTY > SINV2.TwoYearSellingShipQty THEN 'Y' ELSE 'N' END AS ExcessStock --For Items with inventory on hand exceeding the last 24months 
	
	------------------------------------------- Model for Excess and Obsolete Stock -------------------------------------------------
	,CASE 
		WHEN PART.Company in ('AFISCM', 'CSECERT', 'CDKCERT', 'ACZARKOV', 'SCOFI', 'SMKFI','NomoSE', 'NomoFI', 'NomoDK', 'NomoNO', 'NINSE', 'FSEFORA', 'FESFORA', 'IEEWIDN', 'IFIWIDN', 'JDKJENSS', 'JNOJENSS', 'JSEJENSS', 'NORNO', 'SSWSE', 'FITMT', 'ABKSE', 'SVESE', 'ROROSE','CERNO')
		THEN (
			CASE WHEN ABS(DATEDIFF(day, GETDATE(), MAX(STRA.MinTransactionDate))) <= 730 /* or MAX(STRA.TransactionDate) is NULL */ --MAX  
			THEN 'New Parts' /* 'Exist in last 24 month Stock transactions' + left(DATEDIFF(day, MAX(STRA.TransactionDate), GETDATE()),6) */
			ELSE (/* CASE WHEN DATEDIFF(day, MAX(CAGR.ValidToDate), GETDATE()) <= 730 OR  MAX(CAGR.ValidToDate NULL */ 
					CASE /* If an item/Part's agreemnet date has not expired, then this item is 'Fully Agreed Parts'  */
						WHEN MAX(CAGR.ValidToDate) >= GETDATE()
							AND AgreedQty >= StockBalanceQTY
							OR (
								MAX(SINV.InvoiceDate) IS NULL
								AND MAX(SORD.OrderDate) IS NULL
								AND MAX(STRA.TransactionDate) IS NULL
								AND MAX(CAGR.ValidToDate) IS NOT NULL
								)
						THEN 'Fully Agreed Parts' /* 'Exist in active customer agreement' + left(DATEDIFF(day, MAX(CAGR.ValidToDate), GETDATE()),6) */
					ELSE ( /* Many items are without the above agreement, this block is to look from Sales (invoice), Orders and production orders    */
							CASE --some sales in the last 2 yrs may be mistake, retured or only a quation but no qty, here is the mistake correction scenario
								WHEN (-- There are cases where an order has been placed by mistake and then corrected with a credit. In such cases we might find an INVOICE within the last 2 years and the part will not get obsolete. This line will minimize that risk.
										ABS(DATEDIFF(day, MAX(SINV.InvoiceDate), GETDATE())) > 730
										OR MAX(SINV.InvoiceDate) IS NULL OR SINV2.TwoYearSellingShipQty <= 0 
										)
									AND (-- There are cases where an order has been placed by mistake and then corrected with a credit. In such cases we might find an ORDER within the last 2 years and the part will not get obsolete. This line will minimize that risk.
										ABS(DATEDIFF(day, MAX(SORD.OrderDate), GETDATE())) > 730
										OR MAX(SORD.OrderDate) IS NULL OR SORD2.TwoYearOrderQty <= 0 
										)
									AND (--sales Order Backlog
										SORD3.TotalRemainingQty = 0	OR SORD3.TotalRemainingQty IS NULL
										)
									AND (--Production information in the past two years, after production order scenario TÖ/DZ 20230509
												SUM(PROD.TwoYearPoductionConsumedQty) = 0 OR SUM(PROD.TwoYearPoductionConsumedQty) IS NULL
										)
									AND AgreedQty < StockBalanceQTY
									--OR (MAX(SINV.InvoiceDate) is NULL AND MAX(SORD.OrderDate) is NULL AND AgreedQty < StockBalanceQTY)  
									--OR MAX(InvoiceDate) is NULL 
									-- Think about Backlog and creditnotes. Jiri comment 2021-11-23. WHCODE 901. Returns?
								THEN 'Agreed Obsolete Parts' /* + left(DATEDIFF(day, MAX(SINV.InvoiceDate), GETDATE()),6) */
							ELSE ( -- Full Obsolete scenarios:
									CASE -- Full Obsolete scenarios:
										WHEN (-- There are cases where an order has been placed by mistake and then corrected with a credit. In such cases we might find an INVOICE within the last 2 years and the part will not get obsolete. This code line will minimize that risk.
												ABS(DATEDIFF(day, MAX(SINV.InvoiceDate), GETDATE())) > 730
												OR MAX(SINV.InvoiceDate) IS NULL OR SINV2.TwoYearSellingShipQty <= 0 
											  )
											AND (-- There are cases where an order has been placed by mistake and then corrected with a credit. In such cases we might find an ORDER within the last 2 years and the part will not get obsolete. This code line will minimize that risk.
												ABS(DATEDIFF(day, MAX(SORD.OrderDate), GETDATE())) > 730
												OR MAX(SORD.OrderDate) IS NULL OR SORD2.TwoYearOrderQty <= 0 
												)
											AND (--sales Order Backlog
												SORD3.TotalRemainingQty = 0	OR SORD3.TotalRemainingQty IS NULL
												)
											AND (--Production information in the past two years, after production order scenario TÖ/DZ 20230509
												SUM(PROD.TwoYearPoductionConsumedQty) = 0 OR SUM(PROD.TwoYearPoductionConsumedQty) IS NULL
												)
											--OR (MAX(SINV.InvoiceDate) is NULL AND MAX(SORD.OrderDate) is NULL AND SORD3.TotalRemainingQty is NULL)
											--OR MAX(InvoiceDate) is NULL 
											-- Think about Backlog and creditnotes. Jiri comment 2021-11-23. WHCODE 901. Returns?									
										THEN 'Fully Obsolete Parts'
									ELSE ( --Excess scenarios:
											CASE --Agreed excess: 24 Month Sales Invoice Quantity less than current stock OHB, include not invoiced but in the order backlog
												WHEN STRA2.StockBalanceQTY > (COALESCE(SINV2.TwoYearSellingShipQty, 0) + COALESCE(SORD3.TotalRemainingQty, 0)+COALESCE(SUM(PROD.TwoYearPoductionConsumedQty), 0))
													AND STRA2.StockBalanceQTY > COALESCE(SORD2.TwoYearOrderQty, 0) + COALESCE(SUM(PROD.TwoYearPoductionConsumedQty), 0) -- after TÖ/DZ
													--AND STRA2.StockBalanceQTY > COALESCE(SUM(PROD.TwoYearPoductionConsumedQty), 0) -- after production order scenario TÖ/DZ 20230509
													AND AgreedQty < COALESCE(StockBalanceQTY, 0) --For Items with inventory on hand exceeding the last 24months 
												THEN 'Agreed Excess Parts' /* + left(STRA.StockBalanceQTY,6)+'>'+left(SINV2.TwoYearSellingShipQty,6) */
											ELSE ( --Fully excess: 
													CASE 
														WHEN STRA2.StockBalanceQTY > (COALESCE(SINV2.TwoYearSellingShipQty, 0) + COALESCE(SORD3.TotalRemainingQty, 0)+COALESCE(SUM(PROD.TwoYearPoductionConsumedQty), 0))
															AND STRA2.StockBalanceQTY > COALESCE(SORD2.TwoYearOrderQty, 0) + COALESCE(SUM(PROD.TwoYearPoductionConsumedQty), 0) -- after TÖ/DZ
															--AND STRA2.StockBalanceQTY > COALESCE(SUM(PROD.TwoYearPoductionConsumedQty), 0) -- after production order scenario TÖ/DZ 20230509
														THEN 'Fully Excess Parts' /* + left(STRA.StockBalanceQTY,6)+'>'+left(SINV2.TwoYearSellingShipQty,6) */
													ELSE 'Active Parts' -- ET Added 20220228 --if none above scenarios
													END
												 )
											END
										 )
									END
								 )
							END
						 )
					END
				 )
		END )
	END AS StockMovement

FROM dw.Part AS PART
--------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------- Tables for Obsolecense Model -----------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------
------------------------------------- First/Last Date of External Stocktransaction ---------------------------------------------
LEFT JOIN (
	SELECT PartID
		,MAX(TransactionDate) AS TransactionDate
		,MIN(TransactionDate) AS MinTransactionDate
	FROM dw.StockTransaction
	WHERE LEFT(InternalExternal, 1) = 'E' -- There is currently a mix of Arkov use I for internal E for External transactions, and those should be excluded; Widni, has "InternalAxInter" & "InternalCompany" -- were REFERENCE <> 'I'
		AND is_deleted != 1 -- added after major function update in dw, after discusstion between Tobias & David 20230302
	GROUP BY PartID
	) STRA ON PART.partid = STRA.partid -- Checking stocktransactions if part has been added during the last 24 month
------------------------------------------------ Current Stock Balance ---------------------------------------------------------
LEFT JOIN (
	SELECT PartID
		,SUM(TransactionQty) AS StockBalanceQTY
	FROM dw.StockTransaction
	WHERE is_deleted IS NULL OR is_deleted = '0' -- added after major function update in dw, after discusstion between Tobias & David 20230302
	GROUP BY PartID
	) STRA2 ON PART.partid = STRA2.partid
---------------------------------------------- Active Customer Agreement -------------------------------------------------------
LEFT JOIN (
	SELECT PartID
		,MAX(AgreementEnd) AS ValidToDate
		,SUM(AgreementQty) AS AgreedQty
	FROM dw.CustomerAgreement
	WHERE AgreementQty > 0 and AgreementEnd > GETDATE()
			AND (is_deleted IS NULL OR is_deleted = '0') -- added after major function update in dw, after discusstion between Tobias & David 20230302
	GROUP BY PartID
	) CAGR ON PART.partid = CAGR.partid -- Checking that the part does not have any customer liabilities during the last 24 month. Should only take Agreements that has a future End Date. 
----------------------------------------------- Last Sales Invoice Date --------------------------------------------------------
LEFT JOIN (
	SELECT Company
		,PartID
		,MAX(SalesInvoiceDate) AS InvoiceDate
	FROM dw.SalesInvoice
	WHERE IsUpdatingStock IS NULL OR IsUpdatingStock = '1' -- added 2022-11-10 BY TÖ/DZ
		AND is_deleted != 1 -- added after major function update in dw, after discusstion between Tobias & David 20230302
	GROUP BY Company
		,PartID
	) SINV ON PART.partid = SINV.partid
	AND PART.Company = SINV.Company -- Checking that the part has no allocated sales during the last 24 month
-------------------------------------------- 24 Month Sales Invoice Quantity ---------------------------------------------------
LEFT JOIN (
	SELECT Company
		,PartID
		,SUM(SalesInvoiceQty) AS TwoYearSellingShipQty
	FROM dw.SalesInvoice
	WHERE SalesInvoiceDate > DATEADD(YEAR, - 2, GETDATE())  AND (IsUpdatingStock IS NULL OR IsUpdatingStock='1') -- added 2022-11-10 BY TÖ/DZ
		AND (is_deleted IS NULL OR is_deleted = '0') -- added after major function update in dw, after discusstion between Tobias & David 20230302
	GROUP BY Company
		,PartID
	) SINV2 ON PART.partid = SINV2.partid
	AND PART.Company = SINV2.Company -- Checking that the part has no allocated sales during the last 24 month
------------------------------------------------ Last Sales Order Date ---------------------------------------------------------
LEFT JOIN (
	SELECT Company
		,PartID
		,MAX(SalesOrderDate) AS OrderDate
	FROM dw.SalesOrder
	WHERE SalesOrderType != 'Internal Order' AND (IsUpdatingStock IS NULL OR IsUpdatingStock='1') -- added 2022-11-10 TÖ/DZ
		AND (is_deleted IS NULL OR is_deleted = '0') -- added after major function update in dw, after discusstion between Tobias & David 20230302
	GROUP BY Company
		,PartID
	) SORD ON PART.partid = SORD.partid
	AND PART.Company = SORD.Company -- Checking that the part has no allocated sales during the last 24 month
--------------------------------------------- 24 Month Sales Order Quantity ----------------------------------------------------
LEFT JOIN (
	SELECT Company
		,PartID
		,SUM(SalesOrderQty) AS TwoYearOrderQty
	FROM dw.SalesOrder
	WHERE SalesOrderDate > DATEADD(YEAR, - 2, GETDATE()) AND SalesOrderType != 'Internal Order'  AND (IsUpdatingStock IS NULL OR IsUpdatingStock='1') -- added 2022-11-10 TÖ/DZ
		AND (is_deleted IS NULL OR is_deleted = '0') -- added after major function update in dw, after discusstion between Tobias & David 20230302
	GROUP BY Company
		,PartID
	) SORD2 ON PART.partid = SORD2.partid
	AND PART.Company = SORD2.Company -- Added to also use in the excess stock definition. ET 2022-03-09. 
-------------------------------------------------- Total sales Order Backlog ---------------------------------------------------------
LEFT JOIN (
	SELECT Company
		,PartID
		,SUM(remainingqty) AS TotalRemainingQty
	FROM dw.SalesOrder
	WHERE SalesOrderType != 'Internal Order'  AND (IsUpdatingStock IS NULL OR IsUpdatingStock='1') AND year(SalesOrderDate) >= YEAR(Dateadd(Year, -4, Getdate())) -- added 2022-11-10 TÖ/DZ
		AND (is_deleted IS NULL OR is_deleted = '0') -- added after major function update in dw, after discusstion between Tobias & David 20230302
	GROUP BY Company
		,PartID--, SalesOrderDate
	) SORD3 ON PART.partid = SORD3.partid
	AND PART.Company = SORD3.Company -- Added to also use in the excess stock definition. ET 2022-04-12. 
------------------------------------------ Purchase Invoice to Determine PartAge --------------------------------------------------
LEFT JOIN (
	SELECT Company
		,PartID
		,MAX(ActualDelivDate) AS MaxPurchaseDelivDate
	FROM dw.PurchaseInvoice
	WHERE (is_deleted IS NULL OR is_deleted = '0') -- added after major function update in dw, after discusstion between Tobias & David 20230302
	GROUP BY Company
		,PartID
	) PINV ON PART.partid = PINV.partid
	AND PART.Company = PINV.Company -- Added to use in the PartAge definition (Inventory Age Analysis). ET 2022-04-07. 
------------------------------------------ Production information in the past two years-----------------------------------------------
LEFT JOIN (
	SELECT Company
		,PartID
		,SUM(ABS(CompletedQuantity)) AS TwoYearPoductionConsumedQty -- TMT use negative sign for component out take from storage
	FROM dw.ProductionOrder
	WHERE EndDate > DATEADD(YEAR, - 2, GETDATE()) AND PartType = 'Component' AND Status in('Completed', 'Closed') AND (is_deleted IS NULL OR is_deleted = '0')
	GROUP BY Company, PartID
	) PROD ON PART.partid = PROD.PartID	AND PART.Company = PROD.Company -- Added to for use in the Model for Obsolescence 2023-05-09 TÖ/DZ 

--------------------------------------------Production for PartAge------------------------------------------------------------
LEFT JOIN (
	SELECT Company
		,PartID
		,MAX(EndDate) AS MAXPoductionEndDate 
	FROM dw.ProductionOrder
	WHERE PartType = 'Assembly' AND Status in ('Processing') AND (is_deleted IS NULL OR is_deleted = '0')
	GROUP BY Company, PartID
	) PROD1 ON PART.partid = PROD1.partid	AND PART.Company = PROD1.Company 
---------------------------------------------------PIM inormation---------------------------------------------------------------------
LEFT JOIN (
	SELECT
		ProductID
		,PimID
		,PartID
		,IIF(Category_name IS NULL, '#Missing Category#', Category_name) AS PIM_Category1
		,IIF(Category_name2 IS NULL, '#Missing Category#', Category_name2) AS PIM_Category2
		,IIF(Category_name3 IS NULL, '#Missing Category#', Category_name3) AS PIM_Category3
		,IIF(Category_name4 IS NULL, '#Missing Category#', Category_name4) AS PIM_Category4
		,IIF(Category_name5 IS NULL, '#Missing Category#', Category_name5) AS PIM_Category5
		,IIF(Category_name6 IS NULL, '#Missing Category#', Category_name6) AS PIM_Category6
		,IIF(Brand IS NULL, '#Missing Brand#', Brand) AS PIM_Brand 
		,IIF(Heading IS NULL, '#Missing Brand#', Heading) AS PIM_Heading 
		,IIF(Original_Description IS NULL, '#Missing Brand#', Original_Description) AS PIM_Original_Description 
		,IIF(Last_category_name IS NULL, '#Missing LCName#', Last_category_name) AS PIM_LCName
		,IIF(Manufacturer_Id IS NULL, '#Missing Category#', Manufacturer_Id) AS ManufacturerID
	FROM dm.DimPIM) PIM ON PART.PartID = pim.PartID


GROUP BY PART.PartID
	,CompanyID
	,PART.[Company]
	,PART.[PartNum]
	,StockBalanceQTY
	,TwoYearSellingShipQty
	,TwoYearOrderQty
	,TotalRemainingQty
	,AgreedQty
	,ProductID
	,PimID
	,PIM_Category1
	,PIM_Category2
	,PIM_Category3
	,PIM_Category4
	,PIM_Category5
	,PIM_Category6
	,PIM_Brand
	,PIM_Heading
	,PIM_Original_Description
	,PIM_LCName
	,ManufacturerID
	,PART.PARes1
	,PART.is_inferred
GO
PRINT N'Creating [stage].[BELL_SI_SalesLedger]'
GO
CREATE TABLE [stage].[BELL_SI_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceDate] [datetime] NULL,
[DueDate] [datetime] NULL,
[LastPaymentDate] [datetime] NULL
)
GO
PRINT N'Creating [stage].[vBELL_SI_SalesLedger]'
GO
CREATE VIEW [stage].[vBELL_SI_SalesLedger] AS 
--COMMENT EMPTY FIELD // ADD TRIM()UPPER() INTO CustomerID 2022-12-27 VA
SELECT
	DISTINCT(MAX(CONVERT([binary](32),HASHBYTES('SHA2_256', CONCAT(Company,'#', CustNum, '#', InvoiceNum) ) ))) AS SalesLedgerID, --, '#', DueDate, '#', LastPaymentDate
	--CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',CustNum, '#', InvoiceNum))) AS SalesLedgerID, -- In Bell, this combi is not unique
	CONVERT([binary](32),HASHBYTES('SHA2_256', Company)) AS CompanyID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustNum))))) AS CustomerID,
	--CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(CustNum)))) AS CustomerID,
	CONCAT(Company,'#', CustNum, '#', InvoiceNum) AS SalesLedgerCode,
	PartitionKey,

	Company,
	CustNum AS CustomerNum,
	MAX(InvoiceNum) AS SalesInvoiceNum,
	InvoiceDate AS SalesInvoiceDate,
	CONVERT(date, DueDate) AS SalesDueDate,
	CONVERT(date, LastPaymentDate) AS SalesLastPaymentDate,
	--0 AS InvoiceAmount,
	--0 AS RemainingInvoiceAmount,
	1 AS ExchangeRate,
	--'' AS Currency,
	--0 AS VATAmount,
	--'' AS VATCode,
	--'' AS PayToName,
	--'' AS PayToCity,
	--'' AS PayToContact,
	--'' AS PaymentTerms,
	--'' AS SLRes1,
	--'' AS SLRes2,
	--'' AS SLRes3
	--,NULL			AS PaidInvoiceAmount
	'1900-01-01' AS AccountingDate
	--,NULL AS AgingPeriod
	--,NULL AS AgingSort
	--,NULL AS VATCodeDesc
	--,NULL AS LinkToOriginalInvoice
FROM stage.BELL_SI_SalesLedger
GROUP BY Company, CustNum, InvoiceNum, PartitionKey, DueDate, LastPaymentDate, InvoiceDate
GO
PRINT N'Creating [axbus].[IOW_PL_OLine]'
GO
CREATE TABLE [axbus].[IOW_PL_OLine]
(
[PartitionKey] [nvarchar] (50) NULL,
[Company] [nvarchar] (50) NOT NULL,
[CustomerNum] [nvarchar] (100) NULL,
[SalesOrderNum] [nvarchar] (100) NULL,
[SalesOrderLine] [nvarchar] (100) NULL,
[SalesOrderSubLine] [nvarchar] (100) NULL,
[SalesOrderType] [nvarchar] (max) NULL,
[SalesOrderCategory] [nvarchar] (max) NULL,
[SalesOrderStatus] [nvarchar] (max) NULL,
[SalesOrderDate] [nvarchar] (max) NULL,
[NeedbyDate] [nvarchar] (max) NULL,
[ExpDelivDate] [nvarchar] (max) NULL,
[ActualDelivDate] [nvarchar] (max) NULL,
[SalesInvoiceNum] [nvarchar] (max) NULL,
[SalesOrderQty] [nvarchar] (max) NULL,
[DelivQty] [nvarchar] (max) NULL,
[RemainingQty] [nvarchar] (max) NULL,
[InvoiceQty] [nvarchar] (max) NULL,
[UoM] [nvarchar] (max) NULL,
[UnitPrice] [nvarchar] (max) NULL,
[UnitCost] [nvarchar] (max) NULL,
[Currency] [nvarchar] (max) NULL,
[ExchangeRate] [nvarchar] (max) NULL,
[DiscountPercent] [nvarchar] (max) NULL,
[DiscountAmount] [nvarchar] (max) NULL,
[PartNum] [nvarchar] (max) NULL,
[PartType] [nvarchar] (max) NULL,
[PartStatus] [nvarchar] (max) NULL,
[OrderHandler] [nvarchar] (max) NULL,
[WarehouseCode] [nvarchar] (max) NULL,
[SalesChannel] [nvarchar] (max) NULL,
[Department] [nvarchar] (max) NULL,
[ProjectNum] [nvarchar] (max) NULL,
[Cancellation] [nvarchar] (max) NULL,
[IndexKey] [nvarchar] (max) NULL,
[SORes1] [nvarchar] (max) NULL,
[SORes2] [nvarchar] (max) NULL,
[SORes3] [nvarchar] (max) NULL,
[UnitCost2] [nvarchar] (max) NULL,
[UnitCost2Curr] [nvarchar] (max) NULL,
[ExchangeRate2] [nvarchar] (max) NULL,
[sysCurrency] [nvarchar] (max) NULL,
[CreatedTimeStamp] [nvarchar] (max) NULL,
[ModifiedTimeStamp] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[vIOW_PL_OLine]'
GO

CREATE VIEW [stage].[vIOW_PL_OLine] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([SalesOrderNum]), '#', TRIM([SalesOrderLine])) ))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustomerNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SalesOrderNum))))) AS SalesOrderNumID --, '#', TRIM(Department)
	,UPPER(CONCAT(Company, '#', TRIM(CustomerNum), '#', TRIM(SalesOrderNum), '#', TRIM(SalesOrderLine), '#', TRIM(SalesInvoiceNum))) AS SalesOrderCode
	,CONVERT(int, REPLACE([SalesOrderDate], '-', '')) AS SalesOrderDateID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT( Company,'#','') )))	AS ProjectID
	,PartitionKey --

	,UPPER([Company]) AS[Company]
	,UPPER(LEFT(TRIM([CustomerNum]), 50)) AS [CustomerNum]
	,UPPER(LEFT(TRIM([PartNum]), 50)) AS [PartNum]
	,LEFT(TRIM([SalesOrderNum]), 50) AS [SalesOrderNum]
	,LEFT(TRIM(SalesOrderLine), 50) AS [SalesOrderLine]
	,LEFT(TRIM([SalesOrderSubLine]), 50) AS [SalesOrderSubLine]
	,LEFT([SalesOrderType], 50) AS [SalesOrderType]
	,LEFT(TRIM([SalesOrderCategory]), 50) AS [SalesOrderCategory]
	,CONVERT(date, iif([SalesOrderDate] is null, '1900-01-01', [SalesOrderDate])) AS [SalesOrderDate]
	,CONVERT(date, iif([NeedbyDate] is null, '1900-01-01', IIF([NeedbyDate] IN ('02-02-0023', '03-07-0023', '11-08-0023', '29-05-0233'), [SalesOrderDate], [NeedbyDate]))) AS [NeedbyDate]
	,CONVERT(date, iif([ExpDelivDate] is null, '1900-01-01', IIF([ExpDelivDate] IN ('23-08-0022'), [NeedbyDate], [ExpDelivDate]) )) AS [ExpDelivDate]
	,CONVERT(date, iif(ActualDelivDate is null, '1900-01-01', ActualDelivDate) ) AS ActualDelivDate
	,CONVERT(DATE, '1900-01-01') AS ConfirmedDelivDate 
	--,CONVERT(date, iif([SalesOrderDate] is null, '1900-01-01', CONCAT(RIGHT([SalesOrderDate],4), '-', substring([SalesOrderDate],4,2), '-', LEFT([SalesOrderDate], 2)))) AS [SalesOrderDate]
	--,CONVERT(date, iif([NeedbyDate] is null, '1900-01-01', CONCAT(RIGHT([NeedbyDate],4), '-', substring([NeedbyDate],4,2), '-', LEFT([NeedbyDate], 2)))) AS [NeedbyDate]
	--,CONVERT(date, iif([ExpDelivDate] is null, '1900-01-01', CONCAT(RIGHT([ExpDelivDate],4), '-', substring([ExpDelivDate],4,2), '-', LEFT([ExpDelivDate], 2)))) AS [ExpDelivDate]
	--,CONVERT(date, iif(ActualDelivDate is null, '1900-01-01', CONCAT(RIGHT(ActualDelivDate,4), '-', substring(ActualDelivDate,4,2), '-', LEFT(ActualDelivDate, 2))) ) AS ActualDelivDate
	--,CONVERT(DATE, '1900-01-01') AS ConfirmedDelivDate 
	,LEFT(TRIM([SalesInvoiceNum]), 50) AS [SalesInvoiceNum]
	,CONVERT(decimal(18,4), REPLACE([SalesOrderQty], ',', '.')) AS [SalesOrderQty]
	,CONVERT(decimal(18,4), REPLACE([DelivQty], ',', '.')) AS [DelivQty]
	,CONVERT(decimal(18,4), REPLACE(RemainingQty, ',', '.')) AS [RemainingQty]
	,CONVERT(decimal(18,4), REPLACE(InvoiceQty, ',', '.')) AS SalesInvoiceQty
	,CONVERT(decimal(18,4), REPLACE([UnitPrice], ',', '.')) AS [UnitPrice]
	,CONVERT(decimal(18,4), REPLACE([UnitCost], ',', '.')) AS [UnitCost]
	,NULL AS TotalMiscChrg -- the differences between UnitCost and Unitcost2, taken in consideration of its currency rate to PLN AS [TotalMiscChrg] --CONVERT(decimal(18,4), (CONVERT(decimal(18,4), REPLACE(UnitCost, ',', '.'))/IIF(ExchangeRate2 IS NULL, NULL, CONVERT(decimal(18,4), REPLACE(ExchangeRate2, ',', '.'))) - CONVERT(decimal(18,4), REPLACE(UnitCost, ',', '.'))/CONVERT(decimal(18,4), REPLACE(ExchangeRate, ',', '.'))))*-1 -- see comments in soline /DZ
	,CONVERT(decimal(18,4), REPLACE([DiscountPercent], ',', '.')) AS [DiscountPercent]
	,CONVERT(decimal(18,4), REPLACE([DiscountAmount], ',', '.')) AS [DiscountAmount]
	,LEFT(TRIM([UoM]), 50) AS [UoM]
	,SalesOrderStatus AS [OpenRelease]  
	,LEFT(TRIM([PartType]), 50) AS [PartType]
	,LEFT(TRIM([PartStatus]), 50) AS [PartStatus]
	,LEFT(TRIM(OrderHandler), 50) AS [SalesPersonName]
	,LEFT(TRIM([WarehouseCode]), 50) AS [WarehouseCode]
	,LEFT([Currency], 50) AS [Currency]
	,CONVERT(decimal(18,4), REPLACE([ExchangeRate], ',', '.')) AS [ExchangeRate]
	,LEFT(TRIM([SalesChannel]), 50) AS [SalesChannel]
	,LEFT(TRIM([SalesChannel]), 50) AS AxInterSalesChannel
	,LEFT(TRIM([Department]), 50) AS [Department]
	,LEFT([ProjectNum], 50) AS [ProjectNum]
	,LEFT([IndexKey], 50) AS [IndexKey]
	,LEFT(Cancellation, 50) AS Cancellation
	,UnitCost2Curr AS [SORes1]
	,'' AS [SORes2]
	,'' AS [SORes3]
	,IIF(UnitCost2 IS NULL, NULL, CONVERT(decimal(18,4), REPLACE(UnitCost2, ',', '.'))) AS [SORes4]
	,IIF(ExchangeRate2 IS NULL, NULL, CONVERT(decimal(18,4), REPLACE(ExchangeRate2, ',', '.'))) AS [SORes5]
	,sysCurrency AS [SORes6] --for system currency
FROM axbus.[IOW_PL_OLine]
GROUP BY
	PartitionKey, Company, CustomerNum, PartNum, PartType, SalesOrderNum, SalesOrderLine,SalesOrderSubLine, SalesOrderType, SalesInvoiceNum, [SalesOrderDate], UoM, WarehouseCode, Currency, ExchangeRate, Indexkey, SalesChannel, Department,  ProjectNum, SORes1, SORes2, SORes3, [SalesOrderCategory], [NeedbyDate], [ExpDelivDate], [PartStatus], [DelivQty], [SalesOrderQty], [RemainingQty], ActualDelivDate, InvoiceQty, UnitPrice, UnitCost, DiscountPercent, DiscountAmount, SalesOrderStatus, OrderHandler, Cancellation, UnitCost2Curr, UnitCost2,ExchangeRate2,sysCurrency
GO
PRINT N'Creating [dw].[SalesPersonName]'
GO
CREATE TABLE [dw].[SalesPersonName]
(
[SalesPersonNameID] [binary] (32) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SalesPersonName] [nvarchar] (100) NULL
)
GO
PRINT N'Creating primary key [PK__SalesPer__E5AA2C108D2F5219] on [dw].[SalesPersonName]'
GO
ALTER TABLE [dw].[SalesPersonName] ADD CONSTRAINT [PK__SalesPer__E5AA2C108D2F5219] PRIMARY KEY CLUSTERED ([SalesPersonNameID])
GO
PRINT N'Creating [dm].[DimSalesPersonName]'
GO

CREATE VIEW [dm].[DimSalesPersonName]
AS
SELECT
	CONVERT(bigint,SalesPersonNameID) as SalesPersonNameID,
	Company,
	SalesPersonName
FROM dw.SalesPersonName;
GO
PRINT N'Creating [dm_IN].[DimSalesPersonName]'
GO

CREATE VIEW [dm_IN].[DimSalesPersonName]
AS
SELECT sp.[SalesPersonNameID]
,sp.[Company]
,sp.[SalesPersonName]
FROM dm.DimSalesPersonName as sp
WHERE sp.Company IN ('OCSSE');
GO
PRINT N'Creating [stage].[ABK_SE_StockBalance]'
GO
CREATE TABLE [stage].[ABK_SE_StockBalance]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (100) NOT NULL,
[LastStdCostCalDate] [nvarchar] (50) NULL,
[MaxStockQty] [decimal] (18, 4) NULL,
[StockBalance] [decimal] (18, 4) NULL,
[StockValue] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[SalesRemainingQty] [decimal] (18, 4) NULL,
[PurchaseRemainingqty] [decimal] (18, 4) NULL,
[SafetyStock] [decimal] (18, 4) NULL,
[AvgCost] [decimal] (18, 4) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vABK_SE_StockBalance]'
GO

CREATE VIEW [stage].[vABK_SE_StockBalance] AS
--COMMENT EMPTY FIELDS // ADD UPPER()TRIM() INTO PartID 2022-12-21 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', TRIM([PartNum]), '#', TRIM([WarehouseCode])))) AS ItemWarehouseID
	,CONCAT([Company], '#', TRIM([PartNum]), '#', TRIM([WarehouseCode])) AS ItemWarehouseCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [Company])) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', '')))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', ''))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,getdate() AS  PartitionKey

	,Company
	,TRIM(PartNum) AS PartNum
	,TRIM(WarehouseCode) AS WarehouseCode
	--,'' AS BinNum
	--,'' BatchNum
	--,'' AS SupplierNum
	--,'' [DelivTime]-- convert to days
	,CONVERT(Date, '1900-01-01') AS LastStockTakeDate
	,CONVERT(Date, IIF(LastStdCostCalDate = '0', '1900-01-01', LastStdCostCalDate)) AS LastStdCostCalDate
	,CONVERT(date, '1900-01-01') AS DelivDateSupplier
	,CONVERT(date, '1900-01-01') AS DelivDateCust
	,CONVERT(date, '1900-01-01') AS OrderDateSupplier
	,CONVERT(date, '1900-01-01') AS OrderDateCust
	,CONVERT(decimal(18,4), StockBalance) AS StockBalance
	,CONVERT(decimal(18,4), StockValue) AS StockValue
	,AvgCost
	,TRIM(Currency) AS Currency
	,ExchangeRate
	--,NULL SafetyStock
	--,NULL MaxStockQty
	--,NULL ReserveQty
	--,NULL BackOrderQty
	--,NULL OrderQty
	--,NULL StockTakeDiff
	--,NULL ReOrderLevel
	--,NULL OptimalOrderQty
	,CreatedTimeStamp AS SBRes1
	,ModifiedTimeStamp AS SBRes2
	--,'' AS SBRes3
FROM 
	[stage].[ABK_SE_StockBalance]
GO
PRINT N'Creating [audit].[TableCoverage]'
GO
CREATE TABLE [audit].[TableCoverage]
(
[DateRef] [date] NOT NULL,
[DwTable] [nvarchar] (50) NULL,
[Company] [nvarchar] (20) NULL,
[Field] [nvarchar] (50) NULL,
[PercentageNull] [decimal] (4, 3) NULL
)
GO
PRINT N'Creating [audit].[CoverageAudit]'
GO









--------------------- Script for identifying percent null & empty string values per column and company ----------------------------------------



--Data types 
	 -- VARCHAR  CAST(cast(count(NULLIF(,'')) as decimal) /count(*) AS decimal(10,3)) as ,
	 -- DATE  CAST(cast(count(NULLIF(,'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as ,
	-- DECIMAL/Interger   CAST(cast(count() as decimal) /count(*) AS decimal(10,3)) as ,

CREATE view [audit].[CoverageAudit] AS 


SELECT 
tc.DateRef
,tc.Company
, tc.DwTable as SMSSTable
, tc.Field
, cast(tc.PercentageNull as decimal(4,3)) as PercentageNull
, comp.BusinessArea
, Comp.CompanyGroup
, Comp.CompanyName
, comp.ValidatedPurchase
, Comp.ValidatedSales
from audit.TableCoverage AS tc
LEFT JOIN dbo.Company AS Comp
ON    tc.Company    = Comp.Company
GO
PRINT N'Creating [stage].[NOM_DK_Supplier]'
GO
CREATE TABLE [stage].[NOM_DK_Supplier]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[MainSupplierName] [nvarchar] (100) NULL,
[SupplierName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[AddressLine3] [nvarchar] (100) NULL,
[City] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[TelephoneNum] [nvarchar] (50) NULL,
[Email] [nvarchar] (100) NULL,
[District] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (100) NULL,
[Region] [nvarchar] (50) NULL,
[SupplierCategory] [nvarchar] (50) NULL,
[SupplierResponsible] [nvarchar] (100) NULL,
[AccountNum] [nvarchar] (50) NULL,
[VATNum] [nvarchar] (50) NULL,
[OrganisationNum] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[CodeOfConduct] [nvarchar] (50) NULL,
[SupplierScore] [nvarchar] (50) NULL,
[MinOrderQty] [decimal] (18, 4) NULL,
[MinOrderValue] [decimal] (18, 4) NULL,
[Website] [nvarchar] (100) NULL,
[Comments] [nvarchar] (max) NULL,
[SRes1] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vNOM_DK_Supplier]'
GO
CREATE VIEW [stage].[vNOM_DK_Supplier] AS

SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID
    ,UPPER(CONCAT([Company],'#',TRIM([SupplierNum]))) AS SupplierCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([SupplierNum])) AS SupplierNum
	,TRIM(MainSupplierName) AS MainSupplierName
	,TRIM(SupplierName) AS SupplierName
	,TRIM([AddressLine1]) AS AddressLine1
    ,TRIM([AddressLine2]) AS AddressLine2
    ,TRIM([AddressLine3]) AS AddressLine3
	,TRIM([TelephoneNum]) AS [TelephoneNum]
	,[Email]
	,TRIM(ZipCode) AS ZipCode
	,TRIM([City]) AS City
	,District
	,TRIM(CountryCode) AS CountryCode
	,TRIM(CountryName) AS CountryName
	,[Region] 
	,TRIM([SupplierCategory]) AS SupplierCategory 
	,TRIM(SupplierResponsible) AS SupplierResponsible
	,IIF(AddressLine1 = '', TRIM([AddressLine2]), TRIM([AddressLine1])) AS AddressLine
	,Concat(TRIM(CountryName), ', ', TRIM([City]), ', ', TRIM(ZipCode), ', ', IIF(AddressLine1 = '', TRIM([AddressLine2]), TRIM([AddressLine1]))) AS FullAddressLine
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [AccountNum])) AS [AccountNum]
	,[VATNum]
	,OrganisationNum as OrganizationNum
	,InternalExternal AS InternalExternal
	,[CodeOfConduct]
	,'' AS CustomerNum
	,TRIM(SupplierScore) AS SupplierScore
	,[MinOrderQty]
	,MinOrderValue	
	,[Website]
	,TRIM(Comments) AS Comments
	,SRes1
	--,'' AS SRes2
	--,'' AS SRes3
FROM [stage].[NOM_DK_Supplier]
/*GROUP BY 
      [PartitionKey],[Company],[SupplierNum],[SupplierName],[AddressLine1],[AddressLine2],[AddressLine3],[City],[ZIP],[Region],[CountryName]
	  ,[SupplierCategory],[Reference],[BankAccountNum],[VATNum],[SupplierABC],[CustomerCode],[TelephoneNum],[Email],[Website],[CodeOfConduct]
	  ,[MinOrderQty],[InternalName],[Comment] */
GO
PRINT N'Creating [stage].[SVE_SE_Part]'
GO
CREATE TABLE [stage].[SVE_SE_Part]
(
[PartitionKey] [nvarchar] (50) NULL,
[Company] [nvarchar] (8) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartName] [nvarchar] (max) NULL,
[PartDescription] [nvarchar] (max) NULL,
[PartDescription2] [nvarchar] (max) NULL,
[PartDescription3] [nvarchar] (max) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[ProductGroup2] [nvarchar] (50) NULL,
[ProductGroup3] [nvarchar] (50) NULL,
[ProductGroup4] [nvarchar] (max) NULL,
[PrimarySupplier] [nvarchar] (50) NULL,
[Brand] [nvarchar] (50) NULL,
[CommodityCode] [nvarchar] (50) NULL,
[PartReplacementNum] [nvarchar] (max) NULL,
[PartStatus] [nvarchar] (50) NULL,
[CountryOfOrigin] [nvarchar] (max) NULL,
[NetWeight] [nvarchar] (50) NULL,
[UoM] [nvarchar] (50) NULL,
[Material] [nvarchar] (50) NULL,
[Barcode] [nvarchar] (50) NULL,
[ReOrderLevel] [nvarchar] (max) NULL,
[PartResponsible] [nvarchar] (max) NULL,
[StartDate] [nvarchar] (8) NULL,
[EndDate] [nvarchar] (max) NULL,
[PARes1] [nvarchar] (max) NULL,
[PARes2] [nvarchar] (max) NULL,
[PARes3] [nvarchar] (max) NULL
)
GO
PRINT N'Creating index [IX_SVE_SE_Part] on [stage].[SVE_SE_Part]'
GO
CREATE NONCLUSTERED INDEX [IX_SVE_SE_Part] ON [stage].[SVE_SE_Part] ([PartNum])
GO
PRINT N'Creating [stage].[vSVE_SE_Part]'
GO

CREATE VIEW [stage].[vSVE_SE_Part] AS
--COMMENT EMPTY FIELDS // ADD TRIM() UPPER() INTO  PartID 23-01-03 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company),'#', TRIM([PartNum]))))) AS PartID
--	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company,'#', TRIM([PartNum])))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONCAT(Company, '#', TRIM([PartNum])) AS PartCode
	,PartitionKey

	,[Company]
	,TRIM([PartNum]) AS [PartNum]
	,TRIM([PartName]) AS [PartName]
	,TRIM([PartDescription]) AS [PartDescription]
	,TRIM([PartDescription2]) AS [PartDescription2]
	,TRIM([PartDescription3]) AS [PartDescription3]
	,TRIM(PrimarySupplier) AS MainSupplier
	--,NULL AS AlternativeSupplier
	,TRIM([ProductGroup]) AS [ProductGroup]
	,TRIM([ProductGroup2]) AS [ProductGroup2]
	,TRIM([ProductGroup3]) AS [ProductGroup3]
	,TRIM([ProductGroup4]) AS [ProductGroup4]
	,TRIM([Brand]) AS [Brand]
	,TRIM([CommodityCode]) AS [CommodityCode]
	,TRIM([PartReplacementNum]) AS [PartReplacementNum]
	,IIF(TRIM([PartStatus]) = '', 'Aktiv', TRIM([PartStatus])) AS [PartStatus]
	,TRIM([CountryOfOrigin]) AS [CountryOfOrigin]
	,TRY_CONVERT(decimal (18,4), [NetWeight]) AS [NetWeight]
	,TRIM([UoM]) AS [UoM]
	,TRIM([Material]) AS [Material]
	,TRIM([Barcode]) AS [Barcode]
	,[ReOrderLevel]
	,[PartResponsible]
	,CONVERT(date, [StartDate]) AS [StartDate]
	,CONVERT(date, [EndDate]) AS [EndDate]
FROM [stage].[SVE_SE_Part]
GO
PRINT N'Creating [dm].[DimPart0]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [dm].[DimPart0] AS

SELECT CONVERT(BIGINT, PART.PartID) AS PartID
	,CONVERT(BIGINT, PART.CompanyID) AS CompanyID
	,PART.[Company]
	,PART.[PartNum]
	,MAX(PART.[PartName]) AS [PartName]
	,CONCAT (
		TRIM(PART.[PartNum])
		,' - '
		,COALESCE(NULLIF(TRIM(MAX(PART.[PartName])), ''), TRIM(MAX(PART.[PartDescription])))
		) AS Part
	,MAX(PART.[PartDescription]) AS [PartDescription]
	,MAX(PART.[PartDescription2]) AS [PartDescription2]
	,MAX(PART.[PartDescription3]) AS [PartDescription3]
	,MAX(PART.MainSupplier) AS MainSupplier
	,MAX(PART.AlternativeSupplier) AS AlternativeSupplier
	,MAX(PART.[ProductGroup]) AS ProductGroup --took away propercase 2023-03-31 SB
	,MAX(PART.[ProductGroup2]) AS [ProductGroup2]
	,MAX(PART.[ProductGroup3]) AS [ProductGroup3]
	,MAX(PART.[ProductGroup4]) AS [ProductGroup4]
	,MAX(PART.[Brand]) AS [Brand]
	,MAX(PART.[CommodityCode]) AS [CommodityCode]
	,MAX(PART.[PartReplacementNum]) AS [PartReplacementNum]
	,MAX(PART.[PartStatus]) AS [PartStatus]
	,[dbo].[ProperCase](MAX(PART.[CountryOfOrigin])) AS CountryOfOrigin
	,MAX(PART.[NetWeight]) AS [NetWeight]
	,MAX(PART.[UoM]) AS [UoM]
	,MAX(PART.[Material]) AS [Material]
	,MAX(PART.[ReOrderLevel]) AS [ReOrderlevel]
	,MAX(PART.[Barcode]) AS [Barcode]
	,MAX(PART.[PartResponsible]) AS [PartResponsible]
	,ProductID
	,PimID
	,PIM_Category1
	,PIM_Category2
	,PIM_Category3
	,PIM_Category4
	,PIM_Category5
	,PIM_Category6
	,PIM_Brand
	,PIM_Heading
	,PIM_Original_Description
	,PIM_LCName
	,ManufacturerID
	,MAX(PART.[StartDate]) AS [StartDate]
	,MAX(PART.[EndDate]) AS [EndDate]
	,PART.PARes1
	

	------------------------------------------------ Inventory Age Analysis --------------------------------------------------------
	,CASE WHEN PART.Company in ('AFISCM', 'CSECERT', 'CDKCERT', 'ACZARKOV', 'SCOFI', 'SMKFI','NomoSE', 'NomoFI', 'NomoDK', 'NomoNO','FSEFORA', 'FESFORA', 'IEEWIDN', 'IFIWIDN', 'JDKJENSS', 'JNOJENSS', 'JSEJENSS', 'NORNO', 'SSWSE', 'FITMT', 'ABKSE', 'SVESE', 'ROROSE','CERNO')
		THEN (
		CASE WHEN DATEDIFF(day, MAX(PINV.MaxPurchaseDelivDate), GETDATE()) <= 90 OR DATEDIFF(day, MAX(PROD1.MAXPoductionEndDate), GETDATE()) <= 90
			THEN '1: 0-3 Month'
		WHEN DATEDIFF(day, MAX(PINV.MaxPurchaseDelivDate), GETDATE()) <= 180 OR DATEDIFF(day, MAX(PROD1.MAXPoductionEndDate), GETDATE()) <= 180
			THEN '2: 3-6 Month'
		WHEN DATEDIFF(day, MAX(PINV.MaxPurchaseDelivDate), GETDATE()) <= 365 OR DATEDIFF(day, MAX(PROD1.MAXPoductionEndDate), GETDATE()) <= 365
			THEN '3: 6-12 Month'
		WHEN DATEDIFF(day, MAX(PINV.MaxPurchaseDelivDate), GETDATE()) <= 730 OR DATEDIFF(day, MAX(PROD1.MAXPoductionEndDate), GETDATE()) <= 730
			THEN '4: 12-24 Month'
		WHEN DATEDIFF(day, MAX(PINV.MaxPurchaseDelivDate), GETDATE()) <= 1095 OR DATEDIFF(day, MAX(PROD1.MAXPoductionEndDate), GETDATE()) <= 1095
			THEN '5: 24-36 Month'
		ELSE '6: 36+ Month'
		END)
	END AS PartAge --Hej David, vet du vad denna post är i PartAge? Är det när vi saknar lagertransaktioner? Borde den inte ligga på 36+månader då? 2022-07-05 TÖ
	--		  WHEN DATEDIFF(day, MIN(PINV.MaxPurchaseDelivDate), GETDATE()) > 1095  THEN '6: 36+ Month'
	--		  ELSE 'Unclassified' END AS PartAge
	/* for that 'where company='NOMOse' and partnum='24026 CJ W33-TIMKEN' ' should be classified as 36+ NOT currently as Unclassified, according to Åsa (20220519 meeting). We may should add one more table/condition of purchaseOrder, since this item has an internal order on the 20160203, but not in the PurchaseInvoice (PINV), therefore it is "mis-classified". What do you think Emil? /DZ  */
	------------------------------------------------ Part Activity Analysis --------------------------------------------------------
	,CASE WHEN PART.Company in ('AFISCM', 'CSECERT', 'CDKCERT', 'ACZARKOV', 'SCOFI', 'SMKFI','NomoSE', 'NomoFI', 'NomoDK', 'NomoNO', 'FSEFORA', 'FESFORA', 'IEEWIDN', 'IFIWIDN', 'JDKJENSS', 'JNOJENSS', 'JSEJENSS', 'NORNO', 'SSWSE', 'FITMT', 'ABKSE', 'SVESE', 'ROROSE','CERNO')
		THEN (
		CASE WHEN DATEDIFF(day, MAX(STRA.TransactionDate), GETDATE()) <= 180
			THEN '1: 0-6 Month'
		WHEN DATEDIFF(day, MAX(STRA.TransactionDate), GETDATE()) <= 365
			THEN '2: 6-12 Month'
		WHEN DATEDIFF(day, MAX(STRA.TransactionDate), GETDATE()) <= 730
			THEN '3: 12-24 Month'
		WHEN DATEDIFF(day, MAX(STRA.TransactionDate), GETDATE()) <= 1095
			THEN '4: 24-36 Month'
		WHEN DATEDIFF(day, MAX(STRA.TransactionDate), GETDATE()) > 1095
			THEN '5: 36+ Month'
		ELSE 'Unclassified'
		END)
	END AS PartActivity
	--,CASE WHEN DATEDIFF(day, MAX(po.OrderDate), GETDATE()) > 730 or MAX(po.OrderDate) is NULL THEN 'Y' ELSE 'N' END AS "2YearPOItem" --Items NOT added to the product range during the last 24 months is included from the assessment
	--,CASE WHEN DATEDIFF(day, MAX(STRA.TransactionDate), GETDATE()) > 730 or MAX(STRA.TransactionDate) is NULL THEN 'Y' ELSE 'N' END AS "2YearStockTransaction"
	--,CASE WHEN DATEDIFF(day, MAX(CAGR.ValidToDate), GETDATE()) > 730 or MAX(CAGR.ValidToDate) is NULL THEN 'Y' ELSE 'N' END AS "2YearOldAgreement"
	--,CASE WHEN DATEDIFF(day, MAX(SINV.InvoiceDate), GETDATE()) > 730 or MAX(InvoiceDate) is NULL THEN 'Y' ELSE 'N' END AS Obsolete
	--,CASE WHEN STRA2.StockBalanceQTY > SINV2.TwoYearSellingShipQty THEN 'Y' ELSE 'N' END AS ExcessStock --For Items with inventory on hand exceeding the last 24months 
	
	------------------------------------------- Model for Excess and Obsolete Stock -------------------------------------------------
	,CASE 
		WHEN PART.Company in ('AFISCM', 'CSECERT', 'CDKCERT', 'ACZARKOV', 'SCOFI', 'SMKFI','NomoSE', 'NomoFI', 'NomoDK', 'NomoNO', 'FSEFORA', 'FESFORA', 'IEEWIDN', 'IFIWIDN', 'JDKJENSS', 'JNOJENSS', 'JSEJENSS', 'NORNO', 'SSWSE', 'FITMT', 'ABKSE', 'SVESE', 'ROROSE','CERNO')
		THEN (
			CASE WHEN ABS(DATEDIFF(day, GETDATE(), MAX(STRA.MinTransactionDate))) <= 730 /* or MAX(STRA.TransactionDate) is NULL */ --MAX  
			THEN 'New Parts' /* 'Exist in last 24 month Stock transactions' + left(DATEDIFF(day, MAX(STRA.TransactionDate), GETDATE()),6) */
			ELSE (/* CASE WHEN DATEDIFF(day, MAX(CAGR.ValidToDate), GETDATE()) <= 730 OR  MAX(CAGR.ValidToDate NULL */ 
					CASE /* If an item/Part's agreemnet date has not expired, then this item is 'Fully Agreed Parts'  */
						WHEN MAX(CAGR.ValidToDate) >= GETDATE()
							AND AgreedQty >= StockBalanceQTY
							OR (
								MAX(SINV.InvoiceDate) IS NULL
								AND MAX(SORD.OrderDate) IS NULL
								AND MAX(STRA.TransactionDate) IS NULL
								AND MAX(CAGR.ValidToDate) IS NOT NULL
								)
						THEN 'Fully Agreed Parts' /* 'Exist in active customer agreement' + left(DATEDIFF(day, MAX(CAGR.ValidToDate), GETDATE()),6) */
					ELSE ( /* Many items are without the above agreement, this block is to look from Sales (invoice), Orders and production orders    */
							CASE --some sales in the last 2 yrs may be mistake, retured or only a quation but no qty, here is the mistake correction scenario
								WHEN (-- There are cases where an order has been placed by mistake and then corrected with a credit. In such cases we might find an INVOICE within the last 2 years and the part will not get obsolete. This line will minimize that risk.
										ABS(DATEDIFF(day, MAX(SINV.InvoiceDate), GETDATE())) > 730
										OR MAX(SINV.InvoiceDate) IS NULL OR SINV2.TwoYearSellingShipQty <= 0 
										)
									AND (-- There are cases where an order has been placed by mistake and then corrected with a credit. In such cases we might find an ORDER within the last 2 years and the part will not get obsolete. This line will minimize that risk.
										ABS(DATEDIFF(day, MAX(SORD.OrderDate), GETDATE())) > 730
										OR MAX(SORD.OrderDate) IS NULL OR SORD2.TwoYearOrderQty <= 0 
										)
									AND (--sales Order Backlog
										SORD3.TotalRemainingQty = 0	OR SORD3.TotalRemainingQty IS NULL
										)
									AND (--Production information in the past two years, after production order scenario TÖ/DZ 20230509
												SUM(PROD.TwoYearPoductionConsumedQty) = 0 OR SUM(PROD.TwoYearPoductionConsumedQty) IS NULL
										)
									AND AgreedQty < StockBalanceQTY
									--OR (MAX(SINV.InvoiceDate) is NULL AND MAX(SORD.OrderDate) is NULL AND AgreedQty < StockBalanceQTY)  
									--OR MAX(InvoiceDate) is NULL 
									-- Think about Backlog and creditnotes. Jiri comment 2021-11-23. WHCODE 901. Returns?
								THEN 'Agreed Obsolete Parts' /* + left(DATEDIFF(day, MAX(SINV.InvoiceDate), GETDATE()),6) */
							ELSE ( -- Full Obsolete scenarios:
									CASE -- Full Obsolete scenarios:
										WHEN (-- There are cases where an order has been placed by mistake and then corrected with a credit. In such cases we might find an INVOICE within the last 2 years and the part will not get obsolete. This code line will minimize that risk.
												ABS(DATEDIFF(day, MAX(SINV.InvoiceDate), GETDATE())) > 730
												OR MAX(SINV.InvoiceDate) IS NULL OR SINV2.TwoYearSellingShipQty <= 0 
											  )
											AND (-- There are cases where an order has been placed by mistake and then corrected with a credit. In such cases we might find an ORDER within the last 2 years and the part will not get obsolete. This code line will minimize that risk.
												ABS(DATEDIFF(day, MAX(SORD.OrderDate), GETDATE())) > 730
												OR MAX(SORD.OrderDate) IS NULL OR SORD2.TwoYearOrderQty <= 0 
												)
											AND (--sales Order Backlog
												SORD3.TotalRemainingQty = 0	OR SORD3.TotalRemainingQty IS NULL
												)
											AND (--Production information in the past two years, after production order scenario TÖ/DZ 20230509
												SUM(PROD.TwoYearPoductionConsumedQty) = 0 OR SUM(PROD.TwoYearPoductionConsumedQty) IS NULL
												)
											--OR (MAX(SINV.InvoiceDate) is NULL AND MAX(SORD.OrderDate) is NULL AND SORD3.TotalRemainingQty is NULL)
											--OR MAX(InvoiceDate) is NULL 
											-- Think about Backlog and creditnotes. Jiri comment 2021-11-23. WHCODE 901. Returns?									
										THEN 'Fully Obsolete Parts'
									ELSE ( --Excess scenarios:
											CASE --Agreed excess: 24 Month Sales Invoice Quantity less than current stock OHB, include not invoiced but in the order backlog
												WHEN STRA2.StockBalanceQTY > (COALESCE(SINV2.TwoYearSellingShipQty, 0) + COALESCE(SORD3.TotalRemainingQty, 0) + COALESCE(SUM(PROD.TwoYearPoductionConsumedQty), 0) )
													AND STRA2.StockBalanceQTY > COALESCE(SORD2.TwoYearOrderQty, 0) + COALESCE(SUM(PROD.TwoYearPoductionConsumedQty), 0) -- after TÖ/DZ
													--AND STRA2.StockBalanceQTY > COALESCE(SUM(PROD.TwoYearPoductionConsumedQty), 0) -- after production order scenario TÖ/DZ 20230509
													AND AgreedQty < COALESCE(StockBalanceQTY, 0) --For Items with inventory on hand exceeding the last 24months 
												THEN 'Agreed Excess Parts' /* + left(STRA.StockBalanceQTY,6)+'>'+left(SINV2.TwoYearSellingShipQty,6) */
											ELSE ( --Fully excess: 
													CASE 
														WHEN STRA2.StockBalanceQTY > (COALESCE(SINV2.TwoYearSellingShipQty, 0) + COALESCE(SORD3.TotalRemainingQty, 0) + COALESCE(SUM(PROD.TwoYearPoductionConsumedQty), 0) )
															AND STRA2.StockBalanceQTY > COALESCE(SORD2.TwoYearOrderQty, 0) + COALESCE(SUM(PROD.TwoYearPoductionConsumedQty), 0) -- after TÖ/DZ
															--AND STRA2.StockBalanceQTY > COALESCE(SUM(PROD.TwoYearPoductionConsumedQty), 0) -- after production order scenario TÖ/DZ 20230509
														THEN 'Fully Excess Parts' /* + left(STRA.StockBalanceQTY,6)+'>'+left(SINV2.TwoYearSellingShipQty,6) */
													ELSE 'Active Parts' -- ET Added 20220228 --if none above scenarios
													END
												 )
											END
										 )
									END
								 )
							END
						 )
					END
				 )
		END )
	END AS StockMovement

FROM dw.Part AS PART
--------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------- Tables for Obsolecense Model -----------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------
------------------------------------- First/Last Date of External Stocktransaction ---------------------------------------------
LEFT JOIN (
	SELECT PartID
		,MAX(TransactionDate) AS TransactionDate
		,MIN(TransactionDate) AS MinTransactionDate
	FROM dw.StockTransaction
	WHERE LEFT(InternalExternal, 1) = 'E' -- There is currently a mix of Arkov use I for internal E for External transactions, and those should be excluded; Widni, has "InternalAxInter" & "InternalCompany" -- were REFERENCE <> 'I'
		AND is_deleted != 1 -- added after major function update in dw, after discusstion between Tobias & David 20230302
	GROUP BY PartID
	) STRA ON PART.partid = STRA.partid -- Checking stocktransactions if part has been added during the last 24 month
------------------------------------------------ Current Stock Balance ---------------------------------------------------------
LEFT JOIN (
	SELECT PartID
		,SUM(TransactionQty) AS StockBalanceQTY
	FROM dw.StockTransaction
	WHERE is_deleted IS NULL OR is_deleted = '0' -- added after major function update in dw, after discusstion between Tobias & David 20230302
	GROUP BY PartID
	) STRA2 ON PART.partid = STRA2.partid
---------------------------------------------- Active Customer Agreement -------------------------------------------------------
LEFT JOIN (
	SELECT PartID
		,MAX(AgreementEnd) AS ValidToDate
		,SUM(AgreementQty) AS AgreedQty
	FROM dw.CustomerAgreement
	WHERE AgreementQty > 0 and AgreementEnd > GETDATE()
			AND (is_deleted IS NULL OR is_deleted = '0') -- added after major function update in dw, after discusstion between Tobias & David 20230302
	GROUP BY PartID
	) CAGR ON PART.partid = CAGR.partid -- Checking that the part does not have any customer liabilities during the last 24 month. Should only take Agreements that has a future End Date. 
----------------------------------------------- Last Sales Invoice Date --------------------------------------------------------
LEFT JOIN (
	SELECT Company
		,PartID
		,MAX(SalesInvoiceDate) AS InvoiceDate
	FROM dw.SalesInvoice
	WHERE IsUpdatingStock IS NULL OR IsUpdatingStock='1' -- added 2022-11-10 BY TÖ/DZ
		AND is_deleted != 1 -- added after major function update in dw, after discusstion between Tobias & David 20230302
	GROUP BY Company
		,PartID
	) SINV ON PART.partid = SINV.partid
	AND PART.Company = SINV.Company -- Checking that the part has no allocated sales during the last 24 month
-------------------------------------------- 24 Month Sales Invoice Quantity ---------------------------------------------------
LEFT JOIN (
	SELECT Company
		,PartID
		,SUM(SalesInvoiceQty) AS TwoYearSellingShipQty
	FROM dw.SalesInvoice
	WHERE SalesInvoiceDate > DATEADD(YEAR, - 2, GETDATE())  AND (IsUpdatingStock IS NULL OR IsUpdatingStock='1') -- added 2022-11-10 BY TÖ/DZ
		AND (is_deleted IS NULL OR is_deleted = '0') -- added after major function update in dw, after discusstion between Tobias & David 20230302
	GROUP BY Company
		,PartID
	) SINV2 ON PART.partid = SINV2.partid
	AND PART.Company = SINV2.Company -- Checking that the part has no allocated sales during the last 24 month
------------------------------------------------ Last Sales Order Date ---------------------------------------------------------
LEFT JOIN (
	SELECT Company
		,PartID
		,MAX(SalesOrderDate) AS OrderDate
	FROM dw.SalesOrder
	WHERE SalesOrderType != 'Internal Order' AND (IsUpdatingStock IS NULL OR IsUpdatingStock='1') -- added 2022-11-10 TÖ/DZ
		AND (is_deleted IS NULL OR is_deleted = '0') -- added after major function update in dw, after discusstion between Tobias & David 20230302
	GROUP BY Company
		,PartID
	) SORD ON PART.partid = SORD.partid
	AND PART.Company = SORD.Company -- Checking that the part has no allocated sales during the last 24 month
--------------------------------------------- 24 Month Sales Order Quantity ----------------------------------------------------
LEFT JOIN (
	SELECT Company
		,PartID
		,SUM(SalesOrderQty) AS TwoYearOrderQty
	FROM dw.SalesOrder
	WHERE SalesOrderDate > DATEADD(YEAR, - 2, GETDATE()) AND SalesOrderType != 'Internal Order'  AND (IsUpdatingStock IS NULL OR IsUpdatingStock='1') -- added 2022-11-10 TÖ/DZ
		AND (is_deleted IS NULL OR is_deleted = '0') -- added after major function update in dw, after discusstion between Tobias & David 20230302
	GROUP BY Company
		,PartID
	) SORD2 ON PART.partid = SORD2.partid
	AND PART.Company = SORD2.Company -- Added to also use in the excess stock definition. ET 2022-03-09. 
-------------------------------------------------- Total sales Order Backlog ---------------------------------------------------------
LEFT JOIN (
	SELECT Company
		,PartID
		,SUM(remainingqty) AS TotalRemainingQty
	FROM dw.SalesOrder
	WHERE SalesOrderType != 'Internal Order'  AND (IsUpdatingStock IS NULL OR IsUpdatingStock='1') AND year(SalesOrderDate) >= YEAR(Dateadd(Year, -4, Getdate())) -- added 2022-11-10 TÖ/DZ
		AND (is_deleted IS NULL OR is_deleted = '0') -- added after major function update in dw, after discusstion between Tobias & David 20230302
	GROUP BY Company
		,PartID--, SalesOrderDate
	) SORD3 ON PART.partid = SORD3.partid
	AND PART.Company = SORD3.Company -- Added to also use in the excess stock definition. ET 2022-04-12. 
------------------------------------------ Purchase Invoice to Determine PartAge --------------------------------------------------
LEFT JOIN (
	SELECT Company
		,PartID
		,MAX(ActualDelivDate) AS MaxPurchaseDelivDate
	FROM dw.PurchaseInvoice
	WHERE (is_deleted IS NULL OR is_deleted = '0') -- added after major function update in dw, after discusstion between Tobias & David 20230302
	GROUP BY Company
		,PartID
	) PINV ON PART.partid = PINV.partid
	AND PART.Company = PINV.Company -- Added to use in the PartAge definition (Inventory Age Analysis). ET 2022-04-07. 
------------------------------------------ Production information in the past two years-----------------------------------------------
LEFT JOIN (
	SELECT Company
		,PartID
		,SUM(ABS(CompletedQuantity)) AS TwoYearPoductionConsumedQty -- TMT use negative sign for component out take from storage
	FROM dw.ProductionOrder
	WHERE EndDate > DATEADD(YEAR, - 2, GETDATE()) AND PartType = 'Component' AND Status in ('Completed', 'Closed') AND (is_deleted IS NULL OR is_deleted = '0')
	GROUP BY Company, PartID
	) PROD ON PART.partid = PROD.partid	AND PART.Company = PROD.Company -- Added to for use in the Model for Obsolescence 2023-05-09 TÖ/DZ 
--------------------------------------------Production for PartAge------------------------------------------------------------
LEFT JOIN (
	SELECT Company
		,PartID
		,MAX(EndDate) AS MAXPoductionEndDate 
	FROM dw.ProductionOrder
	WHERE PartType = 'Assembly' AND Status in ('Processing') AND (is_deleted IS NULL OR is_deleted = '0')
	GROUP BY Company, PartID
	) PROD1 ON PART.partid = PROD1.partid	AND PART.Company = PROD1.Company 

---------------------------------------------------PIM inormation---------------------------------------------------------------------
LEFT JOIN (
	SELECT
		ProductID
		,PimID
		,PartID
		,IIF(Category_name IS NULL, '#Missing Category#', Category_name) AS PIM_Category1
		,IIF(Category_name2 IS NULL, '#Missing Category#', Category_name2) AS PIM_Category2
		,IIF(Category_name3 IS NULL, '#Missing Category#', Category_name3) AS PIM_Category3
		,IIF(Category_name4 IS NULL, '#Missing Category#', Category_name4) AS PIM_Category4
		,IIF(Category_name5 IS NULL, '#Missing Category#', Category_name5) AS PIM_Category5
		,IIF(Category_name6 IS NULL, '#Missing Category#', Category_name6) AS PIM_Category6
		,IIF(Brand IS NULL, '#Missing Brand#', Brand) AS PIM_Brand 
		,IIF(Heading IS NULL, '#Missing Brand#', Heading) AS PIM_Heading 
		,IIF(Original_Description IS NULL, '#Missing Brand#', Original_Description) AS PIM_Original_Description 
		,IIF(Last_category_name IS NULL, '#Missing LCName#', Last_category_name) AS PIM_LCName
		,IIF(Manufacturer_Id IS NULL, '#Missing Category#', Manufacturer_Id) AS ManufacturerID
	FROM dm.DimPIM) PIM ON PART.PartID = pim.PartID


GROUP BY PART.PartID
	,CompanyID
	,PART.[Company]
	,PART.[PartNum]
	,StockBalanceQTY
	,TwoYearSellingShipQty
	,TwoYearOrderQty
	,TotalRemainingQty
	,AgreedQty
	,ProductID
	,PimID
	,PIM_Category1
	,PIM_Category2
	,PIM_Category3
	,PIM_Category4
	,PIM_Category5
	,PIM_Category6
	,PIM_Brand
	,PIM_Heading
	,PIM_Original_Description
	,PIM_LCName
	,ManufacturerID
	,PART.PARes1
GO
PRINT N'Creating [stage].[CER_UK_OLine]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[CER_UK_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (30) NULL,
[OrderNum] [nvarchar] (30) NULL,
[OrderLine] [nvarchar] (30) NULL,
[OrderSubLine] [nvarchar] (30) NULL,
[OrderType] [nvarchar] (30) NULL,
[OrderRelNum] [nvarchar] (30) NULL,
[OrderDate] [date] NULL,
[DelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (30) NULL,
[OrderQty] [decimal] (38, 8) NULL,
[DelivQty] [decimal] (38, 8) NULL,
[RemainingQty] [decimal] (38, 8) NULL,
[UnitPrice] [numeric] (28, 8) NULL,
[UnitCost] [numeric] (28, 8) NULL,
[SumUnitCost] [numeric] (38, 6) NULL,
[SumUnitPrice] [numeric] (38, 6) NULL,
[CurrencyCode] [nvarchar] (30) NULL,
[CurrExchRate] [decimal] (28, 8) NULL,
[OpenRelease] [nvarchar] (1) NULL,
[DiscountPercent] [decimal] (38, 6) NULL,
[DiscountAmount] [numeric] (38, 6) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[NeedbyDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (50) NULL,
[SalesReturnOrderNum] [nvarchar] (30) NULL,
[SalesReturnInvoiceNum] [nvarchar] (30) NULL,
[WarehouseCode] [nvarchar] (30) NULL
)
GO
PRINT N'Creating [stage].[vCER_UK_OLine]'
GO

CREATE VIEW [stage].[vCER_UK_OLine] AS
--COMMENT EMPTY FIELDS // ADD  TRIP() UPPER() INTO CustomerID,PartID 2022-12-19 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', OrderNum, '#', OrderLine, '#', OrderSubLine, '#', InvoiceNum))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM((IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) )))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum)))) AS SalesOrderNumID
	,CONCAT(Company, '#', OrderNum, '#', OrderLine, '#', OrderSubLine, '#', InvoiceNum) AS SalesOrderCode
	,CONVERT(int, replace(convert(date, OrderDate), '-', '')) AS SalesOrderDateID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey

	,UPPER(TRIM(Company)) AS Company 
	,UPPER(TRIM(CustNum)) AS CustomerNum
	--,UPPER(TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum))) AS CustomerNum
	,TRIM(OrderNum) AS [SalesOrderNum]
	,TRIM(OrderLine) AS [SalesOrderLine]
	,TRIM(OrderSubLine) AS [SalesOrderSubLine]
	,TRIM(OrderType) AS [SalesOrderType]
	--,'' AS [SalesOrderCategory]
	,OrderDate AS [SalesOrderDate]
	,NeedbyDate AS [NeedbyDate]
	,DelivDate AS [ExpDelivDate]
	,CAST('1900-01-01' AS date) AS ActualDelivDate
	,CAST('1900-01-01' AS date) AS ConfirmedDelivDate
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,OrderQty AS [SalesOrderQty]
	,DelivQty
	,RemainingQty
	--,NULL AS SalesInvoiceQty
	--,'' AS [UoM]
	,UnitPrice 
	,UnitCost
	,TRIM(CurrencyCode) AS Currency
	,[CurrExchRate] AS [ExchangeRate]
	,OpenRelease
	,DiscountAmount
	,DiscountPercent
	,UPPER(TRIM(PartNum)) AS PartNum
	--,UPPER(TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum))) AS PartNum
	,IIF(OrderSubLine = '000000', 'Main', 'Sub' ) AS [PartType]
	,PartStatus
	,TRIM(SalesPerson) AS [SalesPersonName]
	,TRIM(WarehouseCode) AS WarehouseCode
	,'' AS SalesChannel
	,CASE WHEN LEFT(OrderNum, 4) = '0006' AND SalesPerson = 'Website' OR LEFT(OrderNum, 4) = '0001' AND SalesPerson = 'House - Pritchard/TRS' THEN 'Webshop' -- uncertain
		  WHEN LEFT(OrderNum, 4) = '0006' AND SalesPerson = 'Blake Barlow' OR LEFT(OrderNum, 4) = '0006' AND SalesPerson = 'Ashley Grist' THEN  'RFQ'  -- very uncertain
		  -- Patric Cummins thinks other "Normal" Sales also from quotation, so, the classification is not exact 
		  WHEN LEFT(OrderNum, 4) = '0002' AND SalesPerson = 'Imported' THEN 'PDF Scan' --updated according to PM email 2022-05-10
		  ELSE 'Normal Order Handling' END AS AxInterSalesChannel
	--,'' AS [Department]
	--,'' AS [ProjectNum]
	--,'' AS [IndexKey]
	--,'0' AS Cancellation
	--,'' AS SORes1
	--,'' AS SORes2
	--,'' AS SORes3
	--,NULL AS [TotalMiscChrg]
FROM stage.CER_UK_OLine
GO
PRINT N'Creating [stage].[JEN_NO_SalesLedger]'
GO
CREATE TABLE [stage].[JEN_NO_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[VATPaidInvoiceLCU] [numeric] (18, 2) NULL,
[InvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL
)
GO
PRINT N'Creating [stage].[vJEN_NO_SalesLedger]'
GO


CREATE VIEW [stage].[vJEN_NO_SalesLedger] AS
--COMMENT EMPTY FIELDS 2022-12-22 VA
--ADD UPPER()TRIM() INTO SalesLedgerID CUSTOMER_ID / SalesLedgerCode /   23-02-17 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(InvoiceNum))))) AS SalesLedgerID,
	CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID,
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(trim(Company), '#', TRIM(CustNum))))) AS CustomerID,
	CONCAT(Company,'#', TRIM(CustNum), '#', TRIM(InvoiceNum)) AS SalesLedgerCode,
	PartitionKey,

	Company,
	TRIM(CustNum) AS CustomerNum,
	InvoiceNum AS SalesInvoiceNum,
	InvoiceDate		AS SalesInvoiceDate,
	CONVERT(date, DueDate) AS SalesDueDate,
	CONVERT(date, LastPaymentDate) AS SalesLastPaymentDate,
	--NULL AS InvoiceAmount,
	--NULL AS PaidInvoiceAmount,
	--NULL AS RemainingInvoiceAmount,
	1 AS ExchangeRate,
	'NOK' AS Currency,
	VATPaidInvoiceLCU AS VATAmount,
	--'' AS VATCode,
	--'' AS PayToName,
	--'' AS PayToCity,
	--'' AS PayToContact,
	--'' AS PaymentTerms,
	--'' AS SLRes1,
	--'' AS SLRes2,
	--'' AS SLRes3
	'1900-01-01' AS AccountingDate
	--,'' AS AgingPeriod
	--,'' AS AgingSort
	--,'' AS VATCodeDesc
	--,'' AS LinkToOriginalInvoice
FROM 
	stage.JEN_NO_SalesLedger
GO
PRINT N'Creating [dm].[DimCustomer]'
GO








CREATE VIEW [dm].[DimCustomer] AS

SELECT 
  	CONVERT(bigint, c.[CustomerID]) AS CustomerID
	,CONVERT(bigint, [CompanyID]) AS CompanyID
	,c.[Company]
	,[CustomerNum]
	,[MainCustomerName]
	,[CustomerName]
	,CONCAT(TRIM(CustomerNum), '-', TRIM(CustomerName)) AS Customer
	,[AddressLine1]
	,[AddressLine2]
	,[AddressLine3]
	,[TelephoneNum1]
	,[TelephoneNum2]
	,c.[Email]
	,[ZipCode]
	,[City]
	,[State]
	,[SalesDistrict]
	,c.[CountryCode]
	,c.[CountryName]
	,[Division]
	,[CustomerIndustry]
	,[CustomerSubIndustry]
	,[AddressLine]
	,[FullAddressLine]
	,[CustomerGroup]
	,[CustomerSubGroup]
	,[SalesPersonCode]
	,[SalesPersonName]
	,[SalesPersonResponsible]
	,[VATNum]
	,[OrganizationNum] --test column in adding column in VS
	,[AccountNum]
	,[InternalExternal]
	,[CustomerScore]
	,[CustomerType]
	,[CustomerCode]
	,CASE WHEN DATEDIFF(day, so.SalesOrderDate, GETDATE()) <= 90 THEN 'Active 0-3 Month'
		  WHEN DATEDIFF(day, so.SalesOrderDate, GETDATE()) <= 180 THEN 'Active 3-6 Month'
		  WHEN DATEDIFF(day, so.SalesOrderDate, GETDATE()) <= 365 THEN 'Active 6-12 Month' 
		  ELSE 'Passive' END AS CustomerStatus 
	,dnb.DUNS
	,dnb.confidence_code as DUNS_MatchScore
	,CRes1
	,CRes2
	,CRes3
	,c.is_inferred
	,c.is_deleted
	,case
		when cc.[Alpha-2 code] is null then 'No' else 'Yes' 
	end as is_validCountryCode
	,case when dnb.sent_date is not null and dnb.match_status is null and DATEDIFF(hh,sent_date,GETDATE()) > 16 then 'No Reference'
		  when dnb.sent_date is not null and dnb.match_status is not null and DUNS is not null then 'Success'
		  when	(dnb.sent_date is not null and dnb.match_status is not null and DUNS is null) 
				or 
				(dnb.sent_date is null and dnb.CountryCode is null)
		  then 'Needs improvement'
		  when dnb.sent_date is null and dnb.CountryCode is not null then 'Match in progress'
	end as DUNS_Status
FROM [dw].[Customer] c
/* Added to enable filtering in Power BI /SM 2021-04-21 */
LEFT JOIN (SELECT CustomerID
				, MAX(SalesOrderDate) AS SalesOrderDate 
			FROM [dw].[SalesOrder] GROUP BY CustomerID ) SO on c.CustomerID = so.CustomerID
LEFT JOIN dnb.DnBCustomerAndSupplier as dnb
	ON dnb.dw_id = c.CustomerID and dnb.is_customer = 1
--WHERE c.is_deleted != 1 AND c.is_deleted IS NOT NULL --VA
LEFT JOIN dbo.CountryCodes as cc
	on c.CountryCode = cc.[Alpha-2 code]
GO
PRINT N'Creating [dm_IN].[dimCustomer]'
GO






CREATE VIEW [dm_IN].[dimCustomer] AS

SELECT 
       [CustomerID]
      ,[CompanyID]
      ,[Company]
      ,[CustomerNum]
      ,[MainCustomerName]
      ,[CustomerName]
      ,[Customer]
      ,[AddressLine1]
      ,[AddressLine2]
      ,[AddressLine3]
      ,[TelephoneNum1]
      ,[TelephoneNum2]
      ,[Email]
      ,[ZipCode]
      ,[City]
      ,[State]
      ,[SalesDistrict]
      ,[CountryCode]
      ,[CountryName]
      ,[Division]
      ,[CustomerIndustry]
      ,[CustomerSubIndustry]
      ,[AddressLine]
      ,[FullAddressLine]
      ,[CustomerGroup]
      ,[CustomerSubGroup]
      ,[SalesPersonCode]
      ,[SalesPersonName]
      ,[SalesPersonResponsible]
      ,[VATNum]
      ,[OrganizationNum]
      ,[AccountNum]
      ,[InternalExternal]
      ,[CustomerScore]
      ,[CustomerType]
      ,[CustomerCode]
      ,[CustomerStatus]
      ,[DUNS]
      ,[DUNS_MatchScore]
      ,[CRes1]
      ,[CRes2]
      ,[CRes3]
      ,[is_inferred]
      ,[is_deleted]
      ,[is_validCountryCode]
      ,[DUNS_Status]
FROM [dm].[DimCustomer]
WHERE [Company] in ('OCSSE')  -- Industry basket
GO
PRINT N'Creating [stage].[FOR_PL_SalesLedger]'
GO
CREATE TABLE [stage].[FOR_PL_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[CustomerNum] [nvarchar] (50) NULL,
[SalesInvoiceNum] [nvarchar] (50) NOT NULL,
[SalesInvoiceDate] [date] NULL,
[SalesDueDate] [date] NULL,
[SalesLastPaymentDate] [date] NULL,
[InvoiceAmount] [decimal] (18, 8) NULL,
[PaidInvoiceAmount] [decimal] (18, 8) NULL,
[RemainingInvoiceAmount] [decimal] (18, 8) NULL,
[Currency] [nvarchar] (50) NULL,
[VATAmount] [decimal] (18, 8) NULL,
[ExchangeRate] [decimal] (18, 8) NULL,
[VATCode] [nvarchar] (50) NULL,
[PaymentTerms] [nvarchar] (50) NULL,
[ObjType] [nvarchar] (6) NULL,
[SalesPersonName] [nvarchar] (60) NULL
)
GO
PRINT N'Creating [stage].[vFOR_PL_SalesLedger]'
GO
CREATE VIEW [stage].[vFOR_PL_SalesLedger] AS 
--ADD UPPER() TRIM() INTO CustomerID 23-01-11 VA
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#', TRIM(SalesInvoiceNum),'#', TRIM(CAST(ObjType AS VARCHAR(10)))))) AS SalesLedgerID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',Company)) AS CompanyID,
	--CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(CustomerNum)))) AS CustomerID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID,
	CONCAT(Company,'#', TRIM(SalesInvoiceNum)) AS SalesLedgerCode,
	PartitionKey,
	Company,
	CustomerNum,
	SalesInvoiceNum,
	SalesInvoiceDate,
	SalesDueDate,
	SalesLastPaymentDate,
	InvoiceAmount,
	RemainingInvoiceAmount,
	ExchangeRate,
	Currency,
	VATAmount,
	VATCode,
	PaymentTerms,
	--ObjType AS SLRes1, -- I will use this field to map ObjType
	case when ObjType = '13'  THEN  'FA'
	     when ObjType = '14'  THEN  'AF'
	     when ObjType = '165' THEN 'FK'
	     when ObjType = '166' THEN 'SK'
	ELSE NULL end as SLRes1,
	InvoiceAmount - RemainingInvoiceAmount	AS PaidInvoiceAmount,
	'1900-01-01' AS AccountingDate,
	SalesPersonName
FROM 
	stage.FOR_PL_SalesLedger
--GROUP BY [PartitionKey],[Company],CustomerNum,SalesInvoiceNum,[DueDate],[LastPaymentDate]
GO
PRINT N'Creating [audit].[vfactTableLatestDate]'
GO





CREATE VIEW [audit].[vfactTableLatestDate] AS
----The [Status] field  might need revision. Maybe switch to PartitionKey instead or check the SourceTables potentially. /SM

SELECT Company
	,'SalesInvoice' AS TableName
	,MAX(SalesInvoiceDate) AS LatestDate
	,'SalesInvoiceDate'	AS [DateName]
	,IIF( CAST(DATEADD(day, -1 ,GETDATE()) AS date) > MAX(SalesInvoiceDate), 'Not up-to-date', 'Updated'  ) AS [Status] 
	,MAX(TRY_CAST(PartitionKey AS date)) AS LatestPartitionKey
FROM dw.SalesInvoice
WHERE  DATEADD(day, -1 ,GETDATE()) >= SalesInvoiceDate 
GROUP BY Company


--SalesOrder
UNION ALL
SELECT Company
	,'SalesOrder' AS TableName
	,MAX(SalesOrderDate) AS LatestDate
	,'SalesOrderDate'	AS [DateName]
	,IIF( CAST(DATEADD(day, -1 ,GETDATE()) AS date) > MAX(SalesOrderDate), 'Not up-to-date', 'Updated'  ) AS [Status]
	,MAX(TRY_CAST(PartitionKey AS date)) AS LatestPartitionKey
FROM dw.SalesOrder
WHERE  DATEADD(day, -1 ,GETDATE()) >= SalesOrderDate
GROUP BY Company


--SalesLedger
UNION ALL
SELECT Company
	,'SalesLedger' AS TableName
	,MAX(SalesInvoiceDate) AS LatestDate
	,'SalesInvoiceDate'	AS [DateName]
	,IIF( CAST(DATEADD(day, -1 ,GETDATE()) AS date) > MAX(SalesInvoiceDate), 'Not up-to-date', 'Updated'  ) AS [Status]
	,MAX(TRY_CAST(PartitionKey AS date)) AS LatestPartitionKey
FROM dw.SalesLedger
WHERE  DATEADD(day, -1 ,GETDATE()) >= SalesInvoiceDate 
GROUP BY Company


--PurchaseInvoice
UNION ALL
SELECT Company
	,'PurchaseInvoice' AS TableName
	,MAX(PurchaseInvoiceDate) AS LatestDate
	,'PurchaseInvoiceDate'	AS [DateName]
	,IIF( CAST(DATEADD(day, -1 ,GETDATE()) AS date) > MAX(PurchaseInvoiceDate), 'Not up-to-date', 'Updated'  ) AS [Status] 
	,MAX(TRY_CAST(PartitionKey AS date)) AS LatestPartitionKey
FROM dw.PurchaseInvoice
WHERE  DATEADD(day, -1 ,GETDATE()) >= PurchaseInvoiceDate
GROUP BY Company


--PurchaseOrder
UNION ALL
SELECT Company
	,'PurchaseOrder' AS TableName
	,MAX(PurchaseOrderDate) AS LatestDate
	,'PurchaseOrderDate'	AS [DateName]
	,IIF( CAST(DATEADD(day, -1 ,GETDATE()) AS date) > MAX(PurchaseOrderDate), 'Not up-to-date', 'Updated'  ) AS [Status]
	,MAX(TRY_CAST(PartitionKey AS date)) AS LatestPartitionKey
FROM dw.PurchaseOrder
WHERE  DATEADD(day, -1 ,GETDATE()) >= PurchaseOrderDate 
GROUP BY Company


--PurchaseLedger
UNION ALL
SELECT Company
	,'PurchaseLedger' AS TableName
	,MAX(PurchaseInvoiceDate) AS LatestDate
	,'PurchaseInvoiceDate'	AS [DateName]
	,IIF( CAST(DATEADD(day, -1 ,GETDATE()) AS date) > MAX(PurchaseInvoiceDate), 'Not up-to-date', 'Updated'  ) AS [Status]
	,MAX(TRY_CAST(PartitionKey AS date)) AS LatestPartitionKey
FROM dw.PurchaseLedger
WHERE  DATEADD(day, -1 ,GETDATE()) >= PurchaseInvoiceDate 
GROUP BY Company

--StockTransaction
UNION ALL
SELECT Company
	,'StockTransaction' AS TableName
	,MAX(TransactionDate) AS LatestDate
	,'TransactionDate'	AS [DateName]
	,IIF( CAST(DATEADD(day, -1 ,GETDATE()) AS date) > MAX(TransactionDate), 'Not up-to-date', 'Updated'  ) AS [Status]
	,MAX(TRY_CAST(PartitionKey AS date)) AS LatestPartitionKey
FROM dw.StockTransaction
WHERE  DATEADD(day, -1 ,GETDATE()) >= TransactionDate 
GROUP BY Company
GO
PRINT N'Creating [stage].[FOR_SE_CostUnit]'
GO
CREATE TABLE [stage].[FOR_SE_CostUnit]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CostUnitNum] [nvarchar] (50) NULL,
[CostUnitName] [nvarchar] (100) NULL,
[CostUnitStatus] [nvarchar] (50) NULL,
[CostUnitGroup] [nvarchar] (50) NULL,
[CostUnitGroup2] [nvarchar] (50) NULL,
[CostUnitGroup3] [nvarchar] (50) NULL,
[RecordIsActive] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vFOR_SE_CostUnit]'
GO

CREATE VIEW [stage].[vFOR_SE_CostUnit] AS

SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company, '#', [CostUnitNum]))) AS CostUnitID,
	CONCAT(Company,'#',[CostUnitNum]) AS CostUnitCode,
	CONVERT([binary](32),HASHBYTES('SHA2_256',Company)) AS CompanyID,
	PartitionKey,

	Company,
	[CostUnitNum],
	[CostUnitName],
	[CostUnitStatus],
	[CostUnitGroup],
	[CostUnitGroup2],
	[CostUnitGroup3],
	RecordIsActive AS CURes1,
	'' AS CURes2,
	'' AS CURes3

FROM 
	stage.FOR_SE_CostUnit
--GROUP BY
--	PartitionKey, Company, [CostUnitNum],[CostUnitName],[CostUnitStatus],[CostUnitGroup],[CostUnitGroup2],[CostUnitGroup3]
GO
PRINT N'Creating [stage].[ROR_SE_SOLine]'
GO
CREATE TABLE [stage].[ROR_SE_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartType] [nvarchar] (50) NULL,
[SalesOrderNum] [nvarchar] (50) NULL,
[SalesOrderLine] [nvarchar] (50) NULL,
[SalesOrderSubLine] [nvarchar] (50) NULL,
[SalesOrderType] [nvarchar] (50) NULL,
[SalesInvoiceNum] [nvarchar] (50) NULL,
[SalesInvoiceLine] [nvarchar] (50) NULL,
[SalesInvoiceType] [nvarchar] (50) NULL,
[SalesInvoiceDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[SalesInvoiceQty] [decimal] (18, 4) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[CashDiscountOffered] [decimal] (18, 4) NULL,
[CashDiscountUsed] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[VATAmount] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[ReturnNum] [nvarchar] (50) NULL,
[Adressline1] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[City] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (500) NULL,
[IndexKey] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vROR_SE_SOLine]'
GO



CREATE VIEW [stage].[vROR_SE_SOLine] AS
--COMMENT EMPTY FIELDS // ADD UPPER() TRIM() INTO CustomerID,WarehouseID 2022-12-22 VA
--CUSTOMERNUM / PARTNUM 23-02-17 VA
SELECT 

	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustomerNum), '#', TRIM(SalesOrderNum), '#', TRIM(SalesOrderLine), '#', TRIM(SalesOrderSubLine), '#', TRIM(PartNum), '#', TRIM(SalesInvoiceNum), '#', TRIM(SalesOrderType), '#', TRIM(WarehouseCode)))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SalesOrderNum), '#', TRIM(SalesOrderLine))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(SalesInvoiceNum)))) AS SalesLedgerID --, '#', TRIM(CustomerNum)
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SalesOrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(CustomerNum IS NULL OR CustomerNum = '', 'MISSINGCUSTOMER', CustomerNum))))) AS CustomerID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WareHouseID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', WarehouseCode))) AS WareHouseID

	,CONCAT(Company, '#', TRIM(CustomerNum), '#', TRIM(SalesOrderNum), '#', TRIM(SalesOrderLine), '#', TRIM(PartNum)) AS SalesOrderCode 

	,CONVERT(int, replace(convert(date,SalesInvoiceDate), '-', '')) AS SalesInvoiceDateID  --Redundant?
	,CONCAT(Company, '#', TRIM(REPLACE(SalesInvoiceNum, ' ', ''))) AS SalesInvoiceCode --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT( Company, '#', '') ))	AS ProjectID
	,PartitionKey

	,TRIM(Company) AS Company
	,TRIM(SalesPersonName) AS SalesPersonName
	,TRIM(CustomerNum) AS CustomerNum
	,TRIM(PartNum) AS PartNum
	,TRIM(PartType) AS PartType
	,TRIM(SalesOrderNum) AS SalesOrderNum
	,TRIM(SalesOrderLine) AS SalesOrderLine
	,TRIM(SalesOrderSubLine) AS SalesOrderSubLine
	,TRIM(SalesOrderType) AS SalesOrderType
	,SalesInvoiceNum 
	,SalesInvoiceLine
	,SalesInvoiceType
	,CASE WHEN SalesInvoiceDate = '' THEN '1900-01-01' ELSE TRY_CONVERT(date, SalesInvoiceDate) END AS SalesInvoiceDate
	,ActualDelivDate
	,UoM
	,IIF(UnitPrice < 0, -1*SalesInvoiceQty, SalesInvoiceQty) AS SalesInvoiceQty
	,ABS(UnitPrice) AS UnitPrice
	,ABS(UnitCost) AS UnitCost 
	,DiscountPercent 
	,DiscountAmount 
	,CashDiscountOffered
	,CashDiscountUsed
	,(TotalMiscChrg) AS TotalMiscChrg
	,(VATAmount) AS VATAmount
	,IIF([ExchangeRate] = 1, 'SEK', [Currency]) AS [Currency] --'SEK' AS 
	,ExchangeRate --(ExchangeRate/ExchangeRate) AS 
	,CreditMemo
	,SalesChannel
	,SalesChannel AS AxInterSalesChannel
	--,'' AS Department
	,TRIM(WarehouseCode) AS WarehouseCode
	--,NULL AS DeliveryAddress
	--,'' AS CostBearerNum
	--,'' AS CostUnitNum
	,ReturnComment
	,ReturnNum
	--,'' AS ProjectNum
	,IndexKey
	--,'' AS SIRes1
	--,'' AS SIRes2
	--,'' AS SIRes3

FROM stage.ROR_SE_SOLine
where SalesInvoiceNum is not null
--GROUP BY
--	PartitionKey, Company, SalesPersonName, CustomerNum, PartNum, PartType, SalesOrderNum, SalesOrderLine, SalesOrderSubLine, SalesOrderType, SalesInvoiceNum, SalesInvoiceDate, ActualDelivDate, UoM, WarehouseCode, Currency, CreditMemo, Indexkey, SalesChannel, Department, CostBearerNum, CostUnitNum, ReturnComment, ReturnNum, ProjectNum, SIRes1, SIRes2, SIRes3, TotalMiscChrg, VATAmount, ExchangeRate--, UnitCost, LinePrice, SalesInvoiceQty
GO
PRINT N'Creating [dm_ALL].[dimPart]'
GO

CREATE VIEW [dm_ALL].[dimPart] AS 

SELECT 
        [PartID]
      ,[CompanyID]
      ,[Company]
      ,[PartNum]
      ,[PartName]
      ,[Part]
      ,[PartDescription]
      ,[PartDescription2]
      ,[PartDescription3]
      ,[MainSupplier]
      ,[AlternativeSupplier]
      ,[ProductGroup]
      ,[ProductGroup2]
      ,[ProductGroup3]
      ,[ProductGroup4]
      ,[Brand]
      ,[CommodityCode]
      ,[PartReplacementNum]
      ,[PartStatus]
      ,[CountryOfOrigin]
      ,[NetWeight]
      ,[UoM]
      ,[Material]
      ,[ReOrderlevel]
      ,[Barcode]
      ,[PartResponsible]
      ,[ProductID]
      ,[PimID]
      ,[PIM_Category1]
      ,[PIM_Category2]
      ,[PIM_Category3]
      ,[PIM_Category4]
      ,[PIM_Category5]
      ,[PIM_Category6]
      ,[PIM_Brand]
      ,[PIM_Heading]
      ,[PIM_Original_Description]
      ,[PIM_LCName]
      ,[ManufacturerID]
      ,[StartDate]
      ,[EndDate]
      ,[PARes1]
      ,[is_inferred]
      ,[PartAge]
      ,[PartActivity]
      ,[StockMovement]
FROM [dm].[DimPart]
GO
PRINT N'Creating [stage].[NOM_SE_PurchaseOrder]'
GO
CREATE TABLE [stage].[NOM_SE_PurchaseOrder]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [varchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaseOrderType] [nvarchar] (50) NULL,
[PurchaseOrderDate] [date] NULL,
[PurchaseOrderStatus] [nvarchar] (50) NULL,
[OpenRelease] [nvarchar] (50) NULL,
[OrgReqDelivDate] [date] NULL,
[CommittedDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[ReqDelivDate] [date] NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[SupplierPartNum] [nvarchar] (50) NULL,
[SupplierInvoiceNum] [nvarchar] (50) NULL,
[DelivCustomerNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[PurchaseOrderQty] [decimal] (18, 4) NULL,
[ReceiveQty] [decimal] (18, 4) NULL,
[PurchaseInvoiceQty] [decimal] (18, 4) NULL,
[MinOrderQty] [decimal] (18, 4) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[LandedCost] [decimal] (18, 4) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[PurchaserName] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[RecievingNum] [nvarchar] (50) NULL,
[DelivTimeWorkDays] [nvarchar] (50) NULL,
[DelivTime] [nvarchar] (50) NULL,
[PurchaseChannel] [nvarchar] (50) NULL,
[Documents] [nvarchar] (50) NULL,
[Comments] [nvarchar] (max) NULL,
[PORes1] [nvarchar] (50) NULL,
[PORes2] [nvarchar] (50) NULL,
[PORes3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vNOM_SE_PurchaseOrder]'
GO
CREATE VIEW [stage].[vNOM_SE_PurchaseOrder] AS
--COMMENT EMPTY FIELD // ADD TRIM() INTO CustomerID 2022-12-20 VA
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(PurchaseInvoiceNum))))) AS PurchaseOrderID
	,UPPER(CONCAT(Company, '#', TRIM(SupplierNum), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine))) AS PurchaseOrderCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseInvoiceNum))))) AS PurchaseInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(Currency)))) AS CurrencyID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(DelivCustomerNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(DelivCustomerNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum))))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierNum))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,PartitionKey AS PartitionKey

	,UPPER(Company) AS Company
	,UPPER(TRIM(SupplierNum)) AS [SupplierNum]
	,UPPER(TRIM(PartNum)) AS PartNum
	,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
	,UPPER(TRIM(PurchaseOrderNum)) AS PurchaseOrderNum
	,UPPER(TRIM(PurchaseOrderLine)) AS PurchaseOrderLine
	--,'' AS PurchaseOrderSubLine
	,TRIM(PurchaseOrderType) AS PurchaseOrderType
	,PurchaseOrderDate
	,PurchaseOrderStatus
	,OpenRelease
	,OrgReqDelivDate
	,CommittedDelivDate
	,ActualDelivDate
	,ReqDelivDate
	,UPPER(TRIM(PurchaseInvoiceNum)) AS [PurchaseInvoiceNum]
	,TRIM(SupplierPartNum) AS SupplierPartNum
	,TRIM(SupplierInvoiceNum) AS SupplierInvoiceNum
	,TRIM(DelivCustomerNum) AS [DelivCustomerNum]
	,TRIM(PurchaserName) AS PurchaserName
	,TRIM(RecievingNum) AS ReceivingNum
	,PartStatus
	,PurchaseOrderQty
	,ReceiveQty
	,PurchaseInvoiceQty AS InvoiceQty
	,MinOrderQty
	,[UoM]
	,UnitPrice
	,DiscountPercent
	,DiscountAmount
	,LandedCost
	,ExchangeRate
	,Currency
	,DelivTime
	,PurchaseChannel
	,Documents
	,TRIM(Comments) AS Comments
	,DelivTimeWorkDays AS PORes1 
	--,'' AS PORes2 
	--,'' AS PORes3
FROM 
	[stage].[NOM_SE_PurchaseOrder]
	
GROUP BY
	PartitionKey, Company, PurchaseOrderNum, PurchaseOrderLine, SupplierNum, DelivCustomerNum, PurchaseOrderStatus, PurchaseInvoiceNum, PartNum, OpenRelease, PurchaseOrderType, UnitPrice, PurchaseOrderQty, ReceiveQty, PurchaseInvoiceQty, MinOrderQty, UoM,  ExchangeRate, Currency, PurchaseOrderDate, ActualDelivDate, OrgReqDelivDate, CommittedDelivDate, ReqDelivDate, PurchaserName, WarehouseCode, DiscountPercent, DiscountAmount, RecievingNum, DelivTime, DelivTimeWorkDays, PurchaseChannel, SupplierPartNum, SupplierInvoiceNum,PartStatus,Documents, Comments,LandedCost --, SysRowID, LeadTime
GO
PRINT N'Creating [stage].[FOR_FR_SalesLedger]'
GO
CREATE TABLE [stage].[FOR_FR_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustomerNum] [nvarchar] (10) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL
)
GO
PRINT N'Creating [stage].[vFOR_FR_SalesLedger]'
GO
CREATE VIEW [stage].[vFOR_FR_SalesLedger] AS 
--COMMENT EMPTY FIELDS / ADD UPPER()TRIM() INTO CustomerID 2022-12-13 VA
SELECt
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustomerNum), '#', TRIM(InvoiceNum)))) AS SalesLedgerID
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustomerNum), '#', TRIM(InvoiceNum)))) AS SalesLedgerID --SOLine
	,CONCAT(Company, '#', TRIM(CustomerNum), '#', TRIM(InvoiceNum)) AS SalesLedgerCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustomerNum)))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,PartitionKey

	,Company
	,TRIM(CustomerNum) AS CustomerNum
	,TRIM(InvoiceNum) AS SalesInvoiceNum
	,CONVERT(date, InvoiceDate) AS [SalesInvoiceDate]
	,CONVERT(date, DueDate) AS SalesDueDate
	,CONVERT(date, DueDate) AS SalesLastPaymentDate -- 20210906 /DZ. before CONVERT(date, LastPaymentDate) AS LastPaymentDate, if it is NULL, the in DM stage it gives bias results -- no LatPaymentdate, work around
	--,NULL AS [InvoiceAmount]
	--,NULL AS [RemainingInvoiceAmount]
	,1 AS [ExchangeRate]
	,'EUR' AS [Currency]
	--,NULL AS [VATAmount]
	--,'' AS [VATCode]
	--,'' AS [PayToName]
	--,'' AS [PayToCity]
	--,'' AS [PayToContact]
	--,'' AS [PaymentTerms]
	--,'' AS SLRes1
	--,'' AS SLRes2
	--,'' AS SLRes3
	--,NULL			AS PaidInvoiceAmount
	,'1900-01-01' AS AccountingDate
	--,'' AS AgingPeriod
	--,'' AS AgingSort
	--,'' AS VATCodeDesc
	--,'' AS LinkToOriginalInvoice
FROM 
	stage.FOR_FR_SalesLedger
GO
PRINT N'Creating [dw].[RLS]'
GO
CREATE TABLE [dw].[RLS]
(
[id] [binary] (32) NULL,
[Company] [nvarchar] (50) NOT NULL,
[Email] [nvarchar] (50) NOT NULL,
[RLSTable] [nvarchar] (50) NOT NULL,
[RLSField] [nvarchar] (50) NOT NULL,
[RLSValue] [nvarchar] (50) NOT NULL,
[AccessType] [nvarchar] (50) NOT NULL,
[SourceList] [nvarchar] (100) NOT NULL,
[Modified_at] [datetime] NOT NULL,
[Author] [nvarchar] (50) NOT NULL
)
GO
PRINT N'Adding constraints to [dw].[RLS]'
GO
ALTER TABLE [dw].[RLS] ADD CONSTRAINT [UC_Company_Email] UNIQUE NONCLUSTERED ([Company], [Email], [RLSTable], [RLSField], [RLSValue])
GO
PRINT N'Creating [dm].[DimRLS]'
GO



CREATE VIEW [dm].[DimRLS] AS
SELECT 
 RLS.[id]
,RLS.[Company]
,RLS.[Email]
,RLS.[RLSTable]
,RLS.[RLSField]
,RLS.[RLSValue]
,RLS.[AccessType]
,RLS.[SourceList]
,RLS.[Modified_at]
,RLS.[Author]
, COMPANY.BusinessArea
FROM [dw].RLS AS RLS
	LEFT JOIN DBO.Company AS COMPANY
		ON RLS.COMPANY = COMPANY.COMPANY
GO
PRINT N'Creating [dm_IN].[DimRLS]'
GO

CREATE VIEW [dm_IN].[DimRLS] AS
SELECT 
	 [id]
,[Company]
,[Email]
,[RLSTable]
,[RLSField]
,[RLSValue]
,[AccessType]
,[SourceList]
,[Modified_at]
,[Author]
,[BusinessArea]
FROM [dm].DimRLS AS RLS
WHERE BusinessArea = 'Industrial Solutions'
GO
PRINT N'Creating [stage].[FOR_ES_SupplierAgreement]'
GO
CREATE TABLE [stage].[FOR_ES_SupplierAgreement]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[AgreementCode] [nvarchar] (20) NULL,
[AgreementDescription] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[DiscountPercent] [decimal] (9, 2) NULL,
[UnitPrice] [decimal] (9, 2) NULL,
[AgreementQty] [decimal] (9, 2) NULL,
[Currency] [nvarchar] (10) NULL,
[AgreementStart] [date] NULL,
[AgreementEnd] [date] NULL,
[SupplierTerms] [nvarchar] (100) NULL,
[SARes1] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vFOR_ES_SupplierAgreement]'
GO
CREATE VIEW [stage].[vFOR_ES_SupplierAgreement] AS 
--COMMENT EMPTY FIELD 2022-12-21 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(TRIM([Company]), '#', TRIM(AgreementCode), '#', TRIM([PartNum]), '#', TRIM([SupplierNum])))) AS SupplierAgreementID --CustomerAgreementID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM([Company]))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM([SupplierNum])))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM(Currency))) AS CurrencyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM([PartNum]))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM([PartNum])))) AS PartID
	,[PartitionKey]

	,[Company]
	,[AgreementCode]
	,[AgreementDescription]
	,TRIM([SupplierNum]) AS SupplierNum
	,TRIM([PartNum]) AS PartNum
	,[DiscountPercent]
	,[UnitPrice] AS [UnitPrice]
	,[AgreementQty]
	,[Currency]
	,[AgreementStart]
	,[AgreementEnd]
	,[SupplierTerms]
	,[SARes1]
FROM 
	 [stage].[FOR_ES_SupplierAgreement]
GO
PRINT N'Creating [dnb].[IndustryCodes]'
GO
CREATE TABLE [dnb].[IndustryCodes]
(
[duns] [int] NULL,
[organization.industryCodes.code] [nvarchar] (100) NULL,
[organization.industryCodes.description] [nvarchar] (300) NULL,
[organization.industryCodes.typeDescription] [nvarchar] (100) NULL,
[organization.industryCodes.priority] [nvarchar] (100) NULL,
[organization.industryCodes.typeDnBCode] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [dnb].[dimIndustryCode_3599_Hierarchy]'
GO
CREATE TABLE [dnb].[dimIndustryCode_3599_Hierarchy]
(
[Level_1_Code] [nvarchar] (100) NULL,
[Level_1_Description] [nvarchar] (4000) NULL,
[Level_2_Code] [nvarchar] (100) NULL,
[Level_2_Description] [nvarchar] (4000) NULL,
[Level_3_Code] [nvarchar] (100) NULL,
[Level_3_Description] [nvarchar] (4000) NULL,
[Level_4_Code] [nvarchar] (100) NULL,
[Level_4_Description] [nvarchar] (4000) NULL,
[Level_5_Code] [nvarchar] (100) NULL,
[Level_5_Description] [nvarchar] (4000) NULL
)
GO
PRINT N'Creating [axbus].[CompaniesSegmentation]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [axbus].[CompaniesSegmentation]
	AS 
	
with baseline as (
select Company,CustomerNum as ERP_Num,CustomerID as dw_id, 1 as is_customer 
from dw.Customer

union

select Company,SupplierNum as ERP_Num,SupplierID as dw_id, 0 as is_customer
from dw.Supplier
)
select b.Company, b.ERP_Num, b.is_customer, dnb.DUNS,
  ic.[organization.industryCodes.code]					as IndustryCode,							-- IndustryCode
  indSeg.Level_1_Description							as IndustrySegment_Level_1,					-- IndustrySegment_Level_1
  indSeg.Level_2_Description							as IndustrySegment_Level_2,					-- IndustrySegment_Level_2
  indSeg.Level_3_Description							as IndustrySegment_Level_3,					-- IndustrySegment_Level_3
  indSeg.Level_4_Description							as IndustrySegment_Level_4,					-- IndustrySegment_Level_4
  indSeg.Level_5_Description							as IndustrySegment_Level_5					-- IndustrySegment_Level_5
  
from baseline as b
left join dnb.DnBCustomerAndSupplier as dnb
	on b.Company = dnb.Company
	and b.dw_id = dnb.dw_id
	and b.is_customer = dnb.is_customer
inner join dnb.MasterTable as m
	on dnb.DUNS = m.duns
LEFT JOIN (
	select 
	duns,
	[organization.industryCodes.code]
	from dnb.IndustryCodes
	where [organization.industryCodes.typeDnBCode] is not null
	and [organization.industryCodes.typeDnBCode] = '3599'
	and [organization.industryCodes.priority] = '1'
) AS ic 
LEFT JOIN dnb.dimIndustryCode_3599_Hierarchy AS indSeg
	on ic.[organization.industryCodes.code] = indSeg.Level_5_Code
	on m.duns = ic.duns
where dnb.DUNS is not null
--order by 1
;
GO
PRINT N'Creating [stage].[WID_EE_SalesLedger]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[WID_EE_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[InvAmoLocCur] [decimal] (18, 4) NULL,
[InvAmoOriCur] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[VATAmount] [decimal] (18, 4) NULL,
[PayToCity] [nvarchar] (50) NULL,
[PaymentTerms] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vWID_EE_SalesLedger]'
GO

CREATE VIEW [stage].[vWID_EE_SalesLedger] AS
--COMMENT EMPTY FIELD // ADD TRIM() UPPEER() INTO CustomerID 2022-12-23 VA
--change salesledgercode / customernum 23-02-17 va
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(InvoiceNum)))) AS SalesLedgerID,
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum)), '#', TRIM(InvoiceNum)))) AS SalesLedgerID,
	CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID,
	CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID,
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum))))) AS CustomerID,
	CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(InvoiceNum)) AS SalesLedgerCode,
	PartitionKey,

	TRIM(Company) AS Company,
	TRIM(CustNum) AS CustomerNum,
	TRIM(InvoiceNum) AS SalesInvoiceNum,
	InvoiceDate AS SalesInvoiceDate,
	CONVERT(date, DueDate) AS SalesDueDate,
	CONVERT(date, LastPaymentDate) AS SalesLastPaymentDate,
	InvAmoLocCur AS InvoiceAmount, --local
	--NULL AS PaidInvoiceAmount,
	--NULL AS RemainingInvoiceAmount,
	ExchangeRate AS ExchangeRate,
	Currency AS Currency,
	VATAmount AS VATAmount,
	--'' AS VATCode,
	--'' AS PayToName,
	PayToCity AS PayToCity,
	--'' AS PayToContact,
	PaymentTerms AS PaymentTerms,
	--'' AS SLRes1,
	--'' AS SLRes2,
	--'' AS SLRes3
	'1900-01-01' AS AccountingDate
	--,'' AS AgingPeriod
	--,'' AS AgingSort
	--,'' AS VATCodeDesc
	--,'' AS LinkToOriginalInvoice
FROM 
	stage.WID_EE_SalesLedger
GO
PRINT N'Creating [stage].[OCS_SE_StockBalance]'
GO
CREATE TABLE [stage].[OCS_SE_StockBalance]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[WarehousCode] [nvarchar] (50) NOT NULL,
[BinNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[DelivTime] [nvarchar] (50) NULL,
[LastStockTakeDate] [nvarchar] (50) NULL,
[StockTakeDiff] [nvarchar] (50) NULL,
[LastStdCostCalDate] [nvarchar] (50) NULL,
[MaxStockQty] [nvarchar] (50) NULL,
[StockBalance] [nvarchar] (50) NULL,
[StockValue] [nvarchar] (50) NULL,
[SalesRemainingQty] [nvarchar] (50) NULL,
[PurchaseRemainingQty] [nvarchar] (50) NULL,
[ProductionRemainingQty] [nvarchar] (50) NULL,
[ForProductionRemainingQty] [nvarchar] (50) NULL,
[ReOrderLevel] [nvarchar] (50) NULL,
[SafetyStock] [nvarchar] (50) NULL,
[OptimalOrderQty] [nvarchar] (50) NULL,
[AvgCost] [nvarchar] (50) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL,
[PhysicalStockBalance] [nvarchar] (50) NULL,
[PhysicalStockValue] [nvarchar] (50) NULL,
[AvailableStock] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vOCS_SE_StockBalance]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vOCS_SE_StockBalance] AS 
SELECT 
CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum),'#',TRIM(WarehousCode))))) AS ItemWarehouseID
,UPPER(CONCAT(Company,'#',TRIM(PartNum),'#',TRIM(WarehousCode))) AS ItemWarehouseCode
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum))))) AS SupplierID
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(WarehousCode))))) AS WarehouseID
,PartitionKey
--Mandatory Fields ---
,UPPER(TRIM(Company)) AS Company
,UPPER(TRIM(WarehousCode)) AS WarehouseCode
,UPPER(TRIM(PartNum)) AS PartNum
,CONVERT(decimal(18,4), Replace(PhysicalStockBalance, ',', '.')) AS StockBalance
,CONVERT(decimal(18,4), Replace(PhysicalStockValue, ',', '.')) AS StockValue
,UPPER(TRIM('SEK')) AS Currency
,cast(1 as decimal(18,4)) as ExchangeRate


---Valuable Fields ---
,UPPER(TRIM(BinNum)) AS BinNum
,UPPER(TRIM(SupplierNum)) AS SupplierNum
,DelivTime AS DelivTime
,CASE WHEN LastStockTakeDate = '' OR LastStockTakeDate is NULL or LastStockTakeDate = 0 THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, LastStockTakeDate, 112) END AS LastStockTakeDate
,CONVERT(decimal(18,4), Replace(StockTakeDiff, ',', '.')) AS StockTakeDiff
,CONVERT(decimal(18,4), Replace(SalesRemainingQty, ',', '.')) AS SalesRemainingQty
,CONVERT(decimal(18,4), Replace(PurchaseRemainingqty, ',', '.')) AS PurchaseRemainingqty
,CONVERT(decimal(18,4), Replace(AvgCost, ',', '.')) AS AvgCost

---Good-to-have Fields ---
,CASE WHEN LastStdCostCalDate = '' OR LastStdCostCalDate is NULL or LastStdCostCalDate = 0 THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, LastStdCostCalDate, 112) END AS LastStdCostCalDate
,CONVERT(decimal(18,4), Replace(MaxStockQty, ',', '.')) AS MaxStockQty
,CONVERT(decimal(18,4), Replace(ReOrderLevel, ',', '.')) AS ReOrderLevel
,CONVERT(decimal(18,4), Replace(SafetyStock, ',', '.')) AS SafetyStock
,CONVERT(decimal(18,4), Replace(OptimalOrderQty, ',', '.')) AS OptimalOrderQty

--------------------------------------------- Meta Data ---------------------------------------------
,CONVERT(date, ModifiedTimeStamp) AS ModifiedTimeStamp
,CONVERT(date, CreatedTimeStamp) AS CreatedTimeStamp
--,TRIM(IsActiveRecord) AS IsActiveRecord

--------------------------------------------- Extra Fields ---------------------------------------------
--,UPPER(TRIM(SBRes1)) AS SBRes1
--,UPPER(TRIM(SBRes2)) AS SBRes2
--,UPPER(TRIM(SBRes3)) AS SBRes3

	FROM [stage].[OCS_SE_StockBalance]
GO
PRINT N'Creating [dm_DEMO].[dimPart]'
GO
CREATE VIEW [dm_DEMO].[dimPart] AS 

SELECT 
[PartID]
,[CompanyID]
,[Company]
,[PartNum]
,[PartName]
,[Part]
,[PartDescription]
,[PartDescription2]
,[PartDescription3]
,[MainSupplier]
,[AlternativeSupplier]
,[ProductGroup]
,[ProductGroup2]
,[ProductGroup3]
,[ProductGroup4]
,[Brand]
,[CommodityCode]
,[PartReplacementNum]
,[PartStatus]
,[CountryOfOrigin]
,[NetWeight]
,[UoM]
,[Material]
,[ReOrderlevel]
,[Barcode]
,[PartResponsible]
,[ProductID]
,[PimID]
,[PIM_Category1]
,[PIM_Category2]
,[PIM_Category3]
,[PIM_Category4]
,[PIM_Category5]
,[PIM_Category6]
,[PIM_Brand]
,[PIM_Heading]
,[PIM_Original_Description]
,[PIM_LCName]
,[ManufacturerID]
,[StartDate]
,[EndDate]
,[PARes1]
,[is_inferred]
,[PartAge]
,[PartActivity]
,[StockMovement]
FROM [dm].[DimPart] /*temp putting (CERPL) Certex PL here such that they see the data in same company*/
WHERE [Company] in ('DEMO')
GO
PRINT N'Creating [stage].[JEN_SK_SOLine]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[JEN_SK_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderRel] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (100) NULL,
[PartNum] [nvarchar] (50) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Indexkey] [nvarchar] (50) NULL,
[Site] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[UnitPriceOCY] [decimal] (18, 4) NULL,
[UnitCostOCY] [decimal] (18, 4) NULL,
[DiscountAmountOCY] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vJEN_SK_SOLine]'
GO
CREATE VIEW [stage].[vJEN_SK_SOLine] AS
--COMMENT empty fields // ADD UPPER()TRIM() INTO PartID,CustomerID,WarehouseID 2022-12-13 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(PartNum), '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine), '#', Indexkey))) AS SalesInvoiceID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',OrderNum,'#',OrderLine,'#',InvoiceNum))) AS SalesOrderID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ), '#', InvoiceNum))) AS SalesLedgerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(OrderNum)))) AS SalesOrderNumID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) )))) AS CustomerID
    ,CONVERT([binary](32),HASHBYTES('SHA2_256',Company)) AS CompanyID
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) )))) AS PartID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID 
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(WarehouseCode)))) AS WareHouseID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(WarehouseCode))))) AS WareHouseID
	,CONCAT(Company,'#',OrderNum,'#',OrderLine,'#',OrderSubLine, '#',InvoiceNum) AS SalesOrderCode
	,CONVERT(int, replace(convert(date,InvoiceDate),'-','')) AS SalesInvoiceDateID  --Redundant?
	,CONCAT(Company,'#',TRIM(InvoiceNum),'#',TRIM(InvoiceLine)) AS SalesInvoiceCode --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey

	,Company
	,TRIM(SalesPerson) AS SalesPersonName
	,TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ) AS CustomerNum
	,TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) ) AS PartNum
	,CASE WHEN TRIM(OrderNum) = '0' THEN 'PrimaryPart' ELSE 'SubPart' END  AS PartType
	,TRIM(OrderNum) AS SalesOrderNum
	,OrderLine		AS SalesOrderLine
	,OrderSubLine	AS SalesOrderSubLine
	,OrderType AS SalesOrderType
	,InvoiceNum	AS SalesInvoiceNum
	,InvoiceLine	AS SalesInvoiceLine
	--,'' AS SalesInvoiceType
	,CASE WHEN InvoiceDate = '' THEN '1901-01-01' ELSE CONVERT(date, InvoiceDate) END AS SalesInvoiceDate
	,ActualDeliveryDate		AS ActualDelivDate
	--,'' AS UoM
	,SellingShipQty			AS SalesInvoiceQty
	,UnitPrice	
	,UnitCost
	--,NULL AS DiscountPercent
	,DiscountAmount
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	,TotalMiscChrg
	--,NULL AS VATAmount
	,[CurrencyCode] AS Currency
	,[ExchangeRate] AS ExchangeRate
	,CreditMemo
	,CASE WHEN TRIM(SalesPerson) = 'EDI - Digital Order' THEN 'EDI'
		ELSE 'Normal Order Handling' END AS SalesChannel
	--,'' AS Department
	,TRIM(WarehouseCode) AS WarehouseCode
	--,NULL AS DeliveryAddress
	--,'' AS CostBearerNum
	--,'' AS CostUnitNum
	--,'' AS ReturnComment
	--,'' AS ReturnNum
	--,'' AS ProjectNum
	,IndexKey
	--,'' AS SIRes1
	--,'' AS SIRes2
	--,'' AS SIRes3

FROM stage.JEN_SK_SOLine

--GROUP BY
--	PartitionKey,Company,SalesPerson, CustNum, PartNum, OrderNum,OrderLine,OrderSubLine, OrderType,InvoiceNum,InvoiceLine, InvoiceDate,ActualDeliveryDate,SellingShipQty,UnitPrice ,UnitCost ,DiscountAmount,TotalMiscChrg,WarehouseCode, [CurrencyCode], [ExchangeRate], CreditMemo, Indexkey, OrderType
GO
PRINT N'Creating [stage].[ARK_CZ_PurchaseLedger]'
GO
CREATE TABLE [stage].[ARK_CZ_PurchaseLedger]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[PLRes1] [nvarchar] (50) NULL,
[PLRes2] [nvarchar] (50) NULL,
[PLRes3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vARK_CZ_PurchaseLedger]'
GO


CREATE VIEW [stage].[vARK_CZ_PurchaseLedger] AS 
--ADD UPPER() TRIM() INTO SupplierID 23-01-23 VA // COMMENT EMPTY FIELDS 
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(SupplierNum), '#', TRIM(InvoiceNum)))) AS PurchaseLedgerID
	,CONCAT(Company, '#', TRIM(SupplierNum), '#', TRIM(InvoiceNum)) AS PurchaseLedgerCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum))))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(SupplierNum)))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(InvoiceNum)))) AS PurchaseInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', ''))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', '')) AS CurrencyID
	,CONVERT(int, replace(convert(date,InvoiceDate), '-', '')) AS PurchaseInvoiceDateID 
	,[PartitionKey]

	,[Company]
	,TRIM(SupplierNum) AS SupplierNum
	,'' AS [PurchaseOrderNum]
	,InvoiceNum AS [PurchaseInvoiceNum]
	,CONVERT(date, [InvoiceDate]) AS [PurchaseInvoiceDate]
	,CONVERT(date, [DueDate]) AS PurchaseDueDate
	,CONVERT(date, [LastPaymentDate]) AS PurchaseLastPaymentDate
	--,NULL AS [InvoiceAmount]
	,1 AS [ExchangeRate]
	,'CZK' AS [Currency]
	--,NULL AS [VATAmount]
	--,'' AS [VATcode]
	--,'' AS [PayToName]
	--,'' AS [PayToCity]
	--,'' AS PayToContact
	--,'' AS [PaymentTerms]
	--,'' AS [PrepaymentNum]
	--,'' AS LastPaymentNum
	,PLRES1
	,PLRES2
	,PLRES3
	--,NULL AS PaidInvoiceAmount
	--,NULL AS RemainingInvoiceAmount
	--,NULL AS LinkToOriginalInvoice
	,CAST('1900-01-01'AS date) AS AccountingDate
	--,NULL AS AgingPeriod
	--,NULL AS AgingSort
	--,NULL AS VATCodeDesc
FROM 
	[stage].[ARK_CZ_PurchaseLedger]
--WHERE [InvoiceDate] >= DATEADD(year, -1, GETDATE()) --Added this where clause as semi-incremental load functinoality since it doesn't work easily on meta-param table. /SM 2021-10-01
--GROUP BY
--	[Company],[SupplierNum],[InvoiceNum],InvoiceDate,DueDate,LastPaymentDate,[PartitionKey],PLRES1,PLRES2,PLRES3
GO
PRINT N'Creating [dw].[Budget]'
GO
CREATE TABLE [dw].[Budget]
(
[BudgetID] [binary] (32) NOT NULL,
[CustomerID] [binary] (32) NULL,
[CompanyID] [binary] (32) NOT NULL,
[PartID] [binary] (32) NULL,
[WarehouseID] [binary] (32) NULL,
[ProjectID] [binary] (32) NULL,
[BudgetPeriodDateID] [int] NULL,
[PartitionKey] [varchar] (50) NULL,
[BudgetType] [nvarchar] (50) NULL,
[BudgetName] [nvarchar] (100) NULL,
[BudgetDescription] [nvarchar] (500) NULL,
[Company] [nvarchar] (8) NULL,
[BudgetPeriod] [nvarchar] (100) NULL,
[BudgetPeriodDate] [date] NULL,
[PeriodType] [nvarchar] (100) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (100) NULL,
[PartNum] [nvarchar] (100) NULL,
[ProductGroup] [nvarchar] (100) NULL,
[SalesPersonCode] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[BudgetSales] [decimal] (22, 4) NULL,
[BudgetCost] [decimal] (22, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[GrossProfitInvoiced] [decimal] (18, 4) NULL,
[GrossMarginInvoicedPercent] [decimal] (18, 4) NULL,
[BudgetFinance] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[CostBearerNum] [nvarchar] (50) NULL,
[CostUnitNum] [nvarchar] (50) NULL,
[ProjectNum] [nvarchar] (50) NULL,
[AccountNum] [nvarchar] (50) NULL,
[AccountGroupNum] [nvarchar] (100) NULL,
[BRes1] [nvarchar] (100) NULL,
[BRes2] [nvarchar] (100) NULL,
[BRes3] [nvarchar] (100) NULL,
[Department] [nvarchar] (100) NULL,
[is_deleted] [bit] NULL,
[DepartmentID] [binary] (32) NULL,
[ExchangeRate] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating primary key [PK_Budget] on [dw].[Budget]'
GO
ALTER TABLE [dw].[Budget] ADD CONSTRAINT [PK_Budget] PRIMARY KEY CLUSTERED ([BudgetID])
GO
PRINT N'Creating [dm].[FactBudget]'
GO








/****** Script for SelectTopNRows command from SSMS  ******/

CREATE   VIEW [dm].[FactBudget] AS


SELECT CONVERT(bigint, [BudgetID]) AS [BudgetID]
      ,CONVERT(bigint, [CustomerID]) AS [CustomerID]
      ,CONVERT(bigint, [CompanyID]) AS [CompanyID]
      ,CONVERT(bigint, [PartID]) AS [PartID]
      ,CONVERT(bigint, [WarehouseID]) AS [WarehouseID]
      ,CONVERT(bigint, [ProjectID]) AS [ProjectID]
	  ,CONVERT(bigint, [DepartmentID]) AS [DepartmentID]
      ,[BudgetPeriodDateID]
      ,[PartitionKey]
      ,[BudgetType]
      ,[BudgetName]
      ,[BudgetDescription]
      ,[Company]
      ,[BudgetPeriod]
      ,[BudgetPeriodDate]
      ,[PeriodType]
      ,[CustomerNum]
      ,[PartNum]
      ,[SalesPersonCode]
      ,[SalesPersonName]
      ,[BudgetSales]
      ,[BudgetCost]
      ,[GrossProfitInvoiced]
      ,[GrossMarginInvoicedPercent]
      ,[BudgetFinance]
      ,[WarehouseCode]
      ,[CostBearerNum]
      ,[CostUnitNum]
      ,[ProjectNum]
	  ,AccountNum
	  ,AccountGroupNum
  FROM [dw].[Budget]
GO
PRINT N'Creating [dm_IN].[fctBudget]'
GO



CREATE VIEW [dm_IN].[fctBudget] AS

SELECT bdg.[BudgetID]
,bdg.[CustomerID]
,bdg.[CompanyID]
,bdg.[PartID]
,bdg.[WarehouseID]
,bdg.[ProjectID]
,bdg.[DepartmentID]
,bdg.[BudgetPeriodDateID]
,bdg.[PartitionKey]
,bdg.[BudgetType]
,bdg.[BudgetName]
,bdg.[BudgetDescription]
,bdg.[Company]
,bdg.[BudgetPeriod]
,bdg.[BudgetPeriodDate]
,bdg.[PeriodType]
,bdg.[CustomerNum]
,bdg.[PartNum]
,bdg.[SalesPersonCode]
,bdg.[SalesPersonName]
,bdg.[BudgetSales]
,bdg.[BudgetCost]
,bdg.[GrossProfitInvoiced]
,bdg.[GrossMarginInvoicedPercent]
,bdg.[BudgetFinance]
,bdg.[WarehouseCode]
,bdg.[CostBearerNum]
,bdg.[CostUnitNum]
,bdg.[ProjectNum]
,bdg.[AccountNum]
,bdg.[AccountGroupNum]
FROM dm.FactBudget as bdg
WHERE bdg.Company in ('OCSSE')

--GROUP BY   -- Aggregate those fields in dw.FactOrder which have more than one values, such as different NeedbyDate & DelivDate and different discountPercent, left over fields should by in GROUP BY
GO
PRINT N'Creating [stage].[MEN_NL_StockBalance]'
GO
CREATE TABLE [stage].[MEN_NL_StockBalance]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[WareHouseCode] [nvarchar] (50) NULL,
[LotNum] [nvarchar] (50) NULL,
[TranDate] [date] NULL,
[QtyDec12.5] [nvarchar] (50) NULL,
[QtyFloat] [float] NULL,
[ProductKey] [nvarchar] (50) NOT NULL,
[DW_TimeStamp] [date] NULL
)
GO
PRINT N'Creating [stage].[vMEN_NL_StockBalance]'
GO
CREATE VIEW [stage].[vMEN_NL_StockBalance]	AS
WITH CTE AS (
SELECT	
		CASE WHEN Company = '14' THEN  CONCAT(N'MENBE',Company) 
			ELSE  CONCAT(N'MENNL',Company)  END AS CompanyCode		
	  ,[PartitionKey], [Company], [PartNum], [WareHouseCode], [LotNum], [TranDate], [QtyDec12.5], [QtyFloat], [ProductKey], [DW_TimeStamp]
  FROM [stage].[MEN_NL_StockBalance]
)
SELECT 
--ADD TRIM() UPPER() INTO WarehouseID 23-01-12 VA
--ADD TRIM() INTO SupplierID 23-01-24 VA

	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(CompanyCode,'#',ProductKey,'#',UPPER([WarehouseCode]) ))) AS ItemWarehouseID 
	,CONCAT([CompanyCode],'#',[PartNum],'#',[WarehouseCode]) AS ItemWarehouseCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([CompanyCode],'#',PartNum))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([CompanyCode])))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([CompanyCode]),'#','')))) AS SupplierID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([CompanyCode],'#',''))) AS SupplierID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([CompanyCode]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([CompanyCode],'#',UPPER([WarehouseCode])))) AS WarehouseID
	  ,[PartitionKey]

      ,[CompanyCode]			AS Company
	  ,'EUR'					AS Currency
      	
	  ,[LotNum]					AS BinNum
	  ,NULL						AS BatchNum
      ,UPPER([WareHouseCode])	AS WarehouseCode
      ,NULL						AS SupplierNum
	  ,[PartNum]
	  ,NULL						AS DelivTime
	  ,'1900-01-01'				AS LastStockTakeDate
--      ,[TranDate]
--      ,[QtyDec12.5]

	  ,'1900-01-01'				AS LastStdCostCalDate
	  ,NULL						AS SafetyStock
	  ,NULL						AS MaxStockQty
	  ,TRY_CAST(ROUND(TRY_CAST([QtyDec12.5] as float),4) AS decimal(18,4))	AS StockBalance
	  ,NULL						AS StockValue
	  ,NULL						AS AvgCost
	  ,NULL						AS [ReserveQty]
	  ,NULL						AS [BackOrderQty]
	  ,NULL						AS [OrderQty]
	  ,NULL						AS [StockTakeDiff]
	  ,NULL						AS [ReOrderLevel]
	  ,NULL						AS [OptimalOrderQty]
	  ,''						AS SBRes1
	  ,''						AS SBRes2
	  ,''						AS SBRes3
  FROM CTE
GO
PRINT N'Creating [dw].[OpenBalance]'
GO
CREATE TABLE [dw].[OpenBalance]
(
[OpenBalanceID] [binary] (32) NOT NULL,
[CostUnitID] [binary] (32) NULL,
[CostBearerID] [binary] (32) NULL,
[ProjectID] [binary] (32) NULL,
[CompanyID] [binary] (32) NOT NULL,
[AccountID] [binary] (32) NULL,
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[AccountNum] [nvarchar] (50) NULL,
[CostUnitNum] [nvarchar] (50) NULL,
[CostBearerNum] [nvarchar] (50) NULL,
[ProjectNum] [nvarchar] (50) NULL,
[JournalType] [nvarchar] (50) NULL,
[JournalDate] [date] NULL,
[AccountingDate] [date] NULL,
[Description] [nvarchar] (500) NULL,
[OpeningBalance] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OBRes1] [nvarchar] (100) NULL,
[OBRes2] [nvarchar] (100) NULL,
[OBRes3] [nvarchar] (100) NULL,
[is_deleted] [bit] NULL,
[IsActiveRecord] [bit] NULL
)
GO
PRINT N'Creating primary key [PK_OpenBalance] on [dw].[OpenBalance]'
GO
ALTER TABLE [dw].[OpenBalance] ADD CONSTRAINT [PK_OpenBalance] PRIMARY KEY CLUSTERED ([OpenBalanceID])
GO
PRINT N'Creating [dm].[FactFinanceOpeningBalance]'
GO




/****** Script for SelectTopNRows command from SSMS  ******/

CREATE VIEW [dm].[FactFinanceOpeningBalance] AS
SELECT CONVERT(bigint, [OpenBalanceID]) AS [OpenBalanceID]
	  ,CONVERT(bigint, [AccountID]) AS [AccountID]
      ,CONVERT(bigint, [CostUnitID]) AS [CostUnitID]
      ,CONVERT(bigint, [CostBearerID]) AS [CostBearerID]
      ,CONVERT(bigint, [ProjectID]) AS [ProjectID]
      ,CONVERT(bigint, [CompanyID]) AS [CompanyID]
      ,[PartitionKey]
      ,[Company]
      ,[AccountNum]
      ,[CostUnitNum]
      ,[CostBearerNum]
      ,[ProjectNum]
      ,[JournalType]
      ,[JournalDate]
      ,[Description]
      ,[OpeningBalance]
	  ,[AccountingDate]
  FROM [dw].[OpenBalance]  -- was [fnc].
GO
PRINT N'Creating [stage].[OCS_SE_PurchaseInvoice]'
GO
CREATE TABLE [stage].[OCS_SE_PurchaseInvoice]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NOT NULL,
[PurchaseInvoiceLine] [nvarchar] (50) NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderType] [nvarchar] (50) NULL,
[PurchaseInvoiceDate] [nvarchar] (50) NULL,
[ActualShipDate] [nvarchar] (50) NULL,
[ActualRecieveDate] [nvarchar] (50) NULL,
[IsInvoiceClosed] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PurchaseInvoiceQty] [nvarchar] (50) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [nvarchar] (50) NULL,
[DiscountPercent] [nvarchar] (50) NULL,
[DiscountAmount] [nvarchar] (50) NULL,
[VATAmount] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [nvarchar] (50) NULL,
[PurchaserName] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL,
[IndexKey] [nvarchar] (50) NULL,
[IsCreditMemo] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vOCS_SE_PurchaseInvoice]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO


CREATE VIEW [stage].[vOCS_SE_PurchaseInvoice] as
	SELECT

--------------------------------------------- Keys/ IDs ---------------------------------------------
CONVERT(binary(32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company),'#', TRIM(PurchaseOrderNum),'#', TRIM(PurchaseOrderLine),'#',TRIM(PurchaseInvoiceNum), '#', TRIM(PurchaseInvoiceLine), '#', TRIM(IndexKey))))) AS PurchaseInvoiceID
,UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseInvoiceNum), '#', TRIM(PurchaseInvoiceLine), '#', PartNum)) AS PurchaseInvoiceCode
,UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum))) AS PurchaseOrderNumCode
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum),'#',TRIM(PurchaseOrderLine),'#',TRIM(PurchaseInvoiceNum))))) AS PurchaseOrderID
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum))))) AS SupplierID
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(WarehouseCode))))) AS WarehouseID
,CONVERT(int, replace(PurchaseInvoiceDate,'-','')) AS PurchaseInvoiceDateID
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#', TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum),'#',TRIM(PurchaseOrderNum))))) AS PurchaseLedgerID
,UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine) )) AS PurchaseOrderCode
,PartitionKey

----------------------------------------------- Regular Fields ---------------------------------------------
-----Mandatory Fields ---
,UPPER(TRIM(Company)) AS Company
,UPPER(TRIM(PurchaseOrderNum)) AS PurchaseOrderNum
,UPPER(TRIM(PurchaseOrderLine)) AS PurchaseOrderLine
--,UPPER(TRIM(PurchaseOrderSubLine)) AS PurchaseOrderSubLine
,UPPER(TRIM(PurchaseInvoiceNum)) AS PurchaseInvoiceNum
,UPPER(TRIM(PurchaseInvoiceLine)) AS PurchaseInvoiceLine
,CASE WHEN PurchaseInvoiceDate = '' OR PurchaseInvoiceDate is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, PurchaseInvoiceDate) END AS PurchaseInvoiceDate
--,CASE WHEN ActualDelivDate = '' OR ActualDelivDate is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, ActualDelivDate) END AS ActualDelivDate
,UPPER(TRIM(PartNum)) AS PartNum
,CONVERT(decimal(18,4), Replace(PurchaseInvoiceQty, ',', '.')) AS PurchaseInvoiceQty
,CONVERT(decimal(18,4), Replace(UnitPrice, ',', '.')) AS UnitPrice
,CONVERT(decimal(18,4), Replace(ExchangeRate, ',', '.')) AS ExchangeRate
,UPPER(TRIM(Currency)) AS Currency
,UPPER(TRIM(IsCreditMemo)) AS CreditMemo
,UPPER(TRIM(SupplierNum)) AS SupplierNum
--
----Valuable Fields ---
,UPPER(TRIM(PurchaseOrderType)) AS PurchaseOrderType
--,UPPER(TRIM(PurchaseInvoiceType)) AS PurchaseInvoiceType
,CASE WHEN ActualRecieveDate = '' OR ActualRecieveDate is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, ActualRecieveDate) END AS ActualDelivDate
,CONVERT(decimal(18,4), Replace(DiscountPercent, ',', '.')) AS DiscountPercent
,CAST(((CAST(PurchaseInvoiceQty AS float) * (CAST(UnitPrice AS FLOAT)))*(CAST(DiscountPercent AS FLOAT))/100) AS DECIMAL(18,4)) AS DiscountAmount
--,CONVERT(decimal(18,4), Replace(TotalMiscChrg, ',', '.')) AS TotalMiscChrg
,[IsInvoiceClosed] as [IsInvoiceClosed]
,UPPER(TRIM(PurchaserName)) AS PurchaserName
,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
--
----- Good-to-have Fields ---
,CONVERT(decimal(18,4), Replace(VATAmount, ',', '.')) AS VATAmount
,UPPER(TRIM(UoM)) AS UoM
--,UPPER(TRIM(PurchaseChannel)) AS PurchaseChannel
--,UPPER(TRIM(Comment)) AS Comment
--
----------------------------------------------- Meta Data ---------------------------------------------
,CONVERT(date, CreatedTimeStamp) AS CreatedTimeStamp
,CONVERT(date, ModifiedTimeStamp) AS ModifiedTimeStamp
,'1' AS IsActiveRecord
--
----------------------------------------------- Extra Fields ---------------------------------------------
,UPPER(TRIM(IndexKey)) AS PIRes1
--,UPPER(TRIM(PIRes2)) AS PIRes2
--,UPPER(TRIM(PIRes3)) AS PIRes3

FROM
[stage].[OCS_SE_PurchaseInvoice]
GO
PRINT N'Creating [stage].[CER_LV_StockBalance]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[CER_LV_StockBalance]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[Currency] [nvarchar] (50) NULL,
[BinNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (70) NOT NULL,
[DelivTime] [int] NULL,
[LastStockTakeDate] [date] NULL,
[LastStdCostCalDate] [date] NULL,
[MaxStockQty] [decimal] (18, 4) NULL,
[StockBalance] [decimal] (18, 4) NULL,
[StockValue] [decimal] (18, 4) NULL,
[ReserveQty] [decimal] (18, 4) NULL,
[BackOrderQty] [decimal] (18, 4) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[StockTakeDiff] [decimal] (18, 4) NULL,
[ReOrderLevel] [decimal] (18, 4) NULL,
[OptimalOrderQty] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vCER_LV_StockBalance]'
GO
CREATE VIEW [stage].[vCER_LV_StockBalance] AS
--COMMENT EMPTY FIELDS 2022-12-21 VA
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]),'#',TRIM([WarehouseCode]) /*,'#',TRIM(BatchNum),'#', BinNum, '#', [LastStockTakeDate]  Comented due to history/duplicate rows /SM 2021-04-16*/)))) AS ItemWarehouseID
	,UPPER(CONCAT([Company],'#',TRIM([PartNum]),'#',TRIM([WarehouseCode]))) AS ItemWarehouseCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID -- var '0000000'
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([WarehouseCode])) AS WarehouseCode
	,Currency
	,BinNum
	,BatchNum
	,UPPER(TRIM([SupplierNum])) AS SupplierNum
	,UPPER(TRIM([PartNum])) AS PartNum
	,[DelivTime]
	,convert(date, [LastStockTakeDate]) AS LastStockTakeDate
	,convert(date, LastStdCostCalDate) AS LastStdCostCalDate
	--,0 AS SafetyStock
	,MaxStockQty
	,[StockBalance]
	,StockValue
	--,0 AS AvgCost
	,[ReserveQty]
	,[BackOrderQty]
	,[OrderQty]
	,[StockTakeDiff]
	,[ReOrderLevel]
	,[OptimalOrderQty]
	--,'' AS SBRes1
	--,'' AS SBRes2
	--,'' AS SBRes3
FROM 
	[stage].[CER_LV_StockBalance]
GROUP BY
	[PartitionKey], [Company], [PartNum], [WarehouseCode], [StockBalance], [ReserveQty], [BackOrderQty], [OrderQty], [StockTakeDiff], [ReOrderLevel], BinNum, [SupplierNum], [DelivTime], [LastStockTakeDate], LastStdCostCalDate,
	BatchNum, StockValue, [OptimalOrderQty], MaxStockQty,Currency
GO
PRINT N'Creating [dm_DS].[dimPart]'
GO



CREATE VIEW [dm_DS].[dimPart] AS 

SELECT 
		p.[PartID]
      ,p.[CompanyID]
      ,p.[Company]
      ,p.[PartNum]
      ,p.[PartName]
      ,p.[Part]
      ,p.[PartDescription]
      ,p.[PartDescription2]
      ,p.[PartDescription3]
      ,p.[MainSupplier]
      ,p.[AlternativeSupplier]
      ,p.[ProductGroup]
      ,p.[ProductGroup2]
      ,p.[ProductGroup3]
      ,p.[ProductGroup4]
      ,p.[Brand]
      ,p.[CommodityCode]
      ,p.[PartReplacementNum]
      ,p.[PartStatus]
      ,p.[CountryOfOrigin]
      ,p.[NetWeight]
      ,p.[UoM]
      ,p.[Material]
      ,p.[ReOrderlevel]
      ,p.[Barcode]
      ,p.[PartResponsible]
      ,p.[ProductID]
      ,p.[PimID]
      ,p.[PIM_Category1]
      ,p.[PIM_Category2]
      ,p.[PIM_Category3]
      ,p.[PIM_Category4]
      ,p.[PIM_Category5]
      ,p.[PIM_Category6]
      ,p.[PIM_Brand]
      ,p.[PIM_Heading]
      ,p.[PIM_Original_Description]
      ,p.[PIM_LCName]
      ,p.[ManufacturerID]
      ,p.[StartDate]
      ,p.[EndDate]
      ,p.[PARes1]
      ,p.[is_inferred]
      ,p.[PartAge]
      ,p.[PartActivity]
      ,p.[StockMovement]


FROM [dm].[DimPart] as p
LEFT JOIN dbo.Company as com ON p.Company = com.Company
WHERE com.BusinessArea = 'Driveline Solutions' AND com.[Status] = 'Active' 
--WHERE [Company] in ('MIT', 'ATZ', 'Transaut', 'IPLIOWTR')
GO
PRINT N'Creating [stage].[TMT_FI_PurchaseInvoice]'
GO
CREATE TABLE [stage].[TMT_FI_PurchaseInvoice]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaseOrderType] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[PurchaseInvoiceLine] [nvarchar] (50) NULL,
[PurchaseInvoiceType] [nvarchar] (50) NULL,
[PurchaseInvoiceDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[Version] [nvarchar] (50) NULL,
[PurchaseInvoiceQty] [decimal] (18, 4) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[TransportFee] [decimal] (18, 4) NULL,
[VATAmount] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (1) NULL,
[PurchaserName] [nvarchar] (100) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[PurchaseChannel] [nvarchar] (50) NULL,
[Comment] [nvarchar] (50) NULL,
[IsInvoiceClosed] [nvarchar] (50) NULL,
[PIRes1] [nvarchar] (50) NULL,
[PIRes2] [nvarchar] (50) NULL,
[PIRes3] [nvarchar] (50) NULL,
[NoVatCurrPrice] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vTMT_FI_PurchaseInvoice]'
GO
CREATE VIEW [stage].[vTMT_FI_PurchaseInvoice] AS
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(PurchaseInvoiceNum), '#', TRIM(PurchaseInvoiceLine), '#', TRIM(PartNum) )))) AS PurchaseInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(PurchaseOrderSubLine))))) AS PurchaseOrderID
	,UPPER(CONCAT(Company, '#', TRIM(SupplierNum), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine))) AS PurchaseOrderCode
	,UPPER(CONCAT(Company, '#', TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum))) AS PurchaseInvoiceCode 
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum))))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierNum))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum))))) AS PurchaseLedgerID
	,CONVERT(int, replace(PurchaseInvoiceDate, '-', '')) AS PurchaseInvoiceDateID 
	,PartitionKey

	,UPPER(Company) AS Company
	,UPPER(TRIM(PartNum)) AS PartNum
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
	,TRIM(PurchaseOrderNum) AS PurchaseOrderNum
	,TRIM(PurchaseOrderLine) AS PurchaseOrderLine
	,TRIM(PurchaseOrderSubLine) AS PurchaseOrderSubLine
	,(TRIM(PurchaseOrderType)) AS PurchaseOrderType --MIN
	,TRIM(PurchaseInvoiceNum) AS PurchaseInvoiceNum
	,PurchaseInvoiceLine
	,PurchaseInvoiceType
	,PurchaseInvoiceDate
	,ActualDelivDate
	,PurchaseInvoiceQty
	,UoM
	,IIF(PurchaseInvoiceQty = 0, UnitPrice, (UnitPrice*PurchaseInvoiceQty-TransportFee)/PurchaseInvoiceQty) AS UnitPrice -- ref invoicenum = 23070
	,DiscountPercent
	,DiscountAmount
	,(TotalMiscChrg * (1/ExchangeRate)) AS TotalMiscChrg -- Is always originally in EUR, has been converted to invoiced currency SB 2023-02-10
	,VATAmount
	,IIF(ExchangeRate = 0, 0, 1/ExchangeRate) AS ExchangeRate --AS 
	,Currency
	,TRIM(CreditMemo) AS CreditMemo
	,TRIM(PurchaserName) AS PurchaserName
	,TRIM(WarehouseCode) AS WarehouseCode
	,PurchaseChannel
	,Comment
	,[Version] AS PIRes1
	,PIRes2
	,TransportFee AS PIRes4 -- Always in invoiced currency.added to numeric extra field 2023-03-16 SB

FROM stage.TMT_FI_PurchaseInvoice
--GROUP BY
--	PartitionKey, Company, PurchaseOrderNum, InvoiceNum, SupplierCode, PartNum, PurchaserName, InvoiceLine, InvoiceType, InvoiceDate, ActualDeliveryDate, UnitPrice, DiscountAmount, TotalMiscChrg, CreditMemo, WarehouseCode, CurrencyCode, ExchangeRate, LineType, OrderDelivLineNum, PurchaseOrderLine , PurchaseOrderSubLine, PurchaseShipQty
GO
PRINT N'Creating [stage].[AXHSE_HQ_OpenBalance_sharepoint]'
GO
CREATE TABLE [stage].[AXHSE_HQ_OpenBalance_sharepoint]
(
[PartitionKey] [nvarchar] (50) NULL,
[Company] [nvarchar] (50) NULL,
[AccountNum] [nvarchar] (50) NULL,
[Description] [nvarchar] (50) NULL,
[Opening Balance] [nvarchar] (50) NULL,
[TransactionDate] [nvarchar] (50) NULL,
[AccountingDate] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXHSE_HQ_OpenBalance_sharepoint]'
GO


CREATE VIEW [stage].[vAXHSE_HQ_OpenBalance_sharepoint] AS
SELECT distinct	
		
	  CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', TransactionDate, '#', AccountNum))) AS OpenBalanceID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', AccountNum ))) AS AccountID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', '' ))) AS ProjectID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',Company)) AS CompanyID
	  ,CONVERT(varchar, GETDATE(), 23) AS PartitionKey
      ,[Company]
      ,[AccountNum]
	  ,[AccountingDate]
	  ,'OB' AS JournalType
      ,concat ('OpenBalance', '-' ,[Description]) as "Description"
      ,[Opening Balance]						  as [OpeningBalance]
	  ,[TransactionDate]						  as [JournalDate]
  FROM [stage].[AXHSE_HQ_OpenBalance_sharepoint]
  where upper(Company) = 'AXHSE'
GO
PRINT N'Creating [dw].[CostBearer]'
GO
CREATE TABLE [dw].[CostBearer]
(
[CostBearerID] [binary] (32) NOT NULL,
[PartitionKey] [nvarchar] (50) NULL,
[CostBearerCode] [nvarchar] (520) NULL,
[CompanyID] [binary] (32) NULL,
[Company] [nvarchar] (50) NOT NULL,
[CostBearerNum] [nvarchar] (50) NOT NULL,
[CostBearerName] [nvarchar] (100) NULL,
[CostBearerStatus] [nvarchar] (100) NULL,
[CostBearerGroup] [nvarchar] (100) NULL,
[CostBearerGroup2] [nvarchar] (100) NULL,
[CostBearerGroup3] [nvarchar] (100) NULL,
[CBRes1] [nvarchar] (100) NULL,
[CBRes2] [nvarchar] (100) NULL,
[CBRes3] [nvarchar] (100) NULL,
[is_deleted] [bit] NULL,
[is_inferred] [bit] NULL,
[CostBearerGroup1] [nvarchar] (100) NULL,
[IsActiveRecord] [bit] NULL
)
GO
PRINT N'Creating primary key [PK_CostBearer] on [dw].[CostBearer]'
GO
ALTER TABLE [dw].[CostBearer] ADD CONSTRAINT [PK_CostBearer] PRIMARY KEY CLUSTERED ([CostBearerID])
GO
PRINT N'Creating [dm].[DimCostBearer]'
GO


/****** Script for SelectTopNRows command from SSMS  ******/

CREATE VIEW [dm].[DimCostBearer] AS
SELECT CONVERT(bigint, [CostBearerID]) AS [CostBearerID]
      ,[PartitionKey]
      ,[CostBearerCode]
      ,CONVERT(bigint, [CompanyID]) AS [CompanyID]
      ,[Company]
      ,[CostBearerNum]
      ,[CostBearerName]
      ,[CostBearerStatus]
      ,[CostBearerGroup]
      ,[CostBearerGroup2]
      ,[CostBearerGroup3]
  FROM [dw].[CostBearer] -- was [fnc].
GO
PRINT N'Creating [dm_IN].[dimCostBearer]'
GO
CREATE VIEW [dm_IN].[dimCostBearer] AS 

SELECT cb.[CostBearerID]
,cb.[PartitionKey]
,cb.[CostBearerCode]
,cb.[CompanyID]
,cb.[Company]
,cb.[CostBearerNum]
,cb.[CostBearerName]
,cb.[CostBearerStatus]
,cb.[CostBearerGroup]
,cb.[CostBearerGroup2]
,cb.[CostBearerGroup3]
FROM [dm].[DimCostBearer] cb
LEFT JOIN dbo.Company com ON cb.Company = com.Company
WHERE com.BusinessArea = 'Industrial Solutions' AND com.[Status] = 'Active'

--WHERE [Company] in ('CNOCERT')
GO
PRINT N'Creating [stage].[CER_DE_SalesOrder]'
GO
CREATE TABLE [stage].[CER_DE_SalesOrder]
(
[PartitionKey] [nvarchar] (40) NULL,
[Company] [nvarchar] (20) NULL,
[CustomerNum] [nvarchar] (30) NULL,
[SalesOrderNum] [nvarchar] (30) NULL,
[SalesOrderLine] [nvarchar] (30) NULL,
[SalesOrderDate] [nvarchar] (30) NULL,
[ReqDelivDate] [nvarchar] (30) NULL,
[ExpShipDate] [nvarchar] (30) NULL,
[ActualShipDate] [nvarchar] (30) NULL,
[CommitedDelivDate] [nvarchar] (30) NULL,
[IsOrderClosed] [nvarchar] (10) NULL,
[OrderHandler] [nvarchar] (80) NULL,
[SalesOrderQty] [nvarchar] (25) NULL,
[DelivQty] [nvarchar] (25) NULL,
[RemainingQty] [nvarchar] (25) NULL,
[UnitPrice] [nvarchar] (25) NULL,
[UoM] [nvarchar] (30) NULL,
[WarehouseCode] [nvarchar] (30) NULL,
[UnitCost] [nvarchar] (25) NULL,
[Currency] [nvarchar] (10) NULL,
[ExchangeRate] [nvarchar] (30) NULL,
[DiscountPercent] [nvarchar] (25) NULL,
[DiscountAmount] [nvarchar] (25) NULL,
[PartNum] [nvarchar] (45) NULL,
[SalesPersonName] [nvarchar] (80) NULL,
[SalesOrderCategory] [nvarchar] (50) NULL,
[SalesOrderType] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_DE_SalesOrder]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vCER_DE_SalesOrder]
	AS SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SalesOrderNum),'#',TRIM(SalesOrderLine))))) AS SalesOrderID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) as CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) as CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID 
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SalesOrderNum))))) AS SalesOrderNumID 
	,CONVERT(int, replace(convert(date, SalesOrderDate),'-','')) AS SalesOrderDateID

	,[PartitionKey]			
	,[Company]				
	,[CustomerNum]			
	,[SalesOrderNum]		
	,[SalesOrderLine]		
	,[SalesOrderDate]		
	,[ReqDelivDate]			
	,[ExpShipDate]			
	,[ActualShipDate]		
	,[CommitedDelivDate]	
	,[IsOrderClosed]		
	,[OrderHandler]			
	,[SalesOrderQty]		
	,[DelivQty]				
	,[RemainingQty]			
	,[UnitPrice]			
	,[UoM]					
	,[WarehouseCode]		
	,[UnitCost]				
	,[Currency]				
	,[ExchangeRate]			
	,[DiscountPercent]		
	,[DiscountAmount]		
	,[PartNum]				
	,[SalesPersonName]		
	,[SalesOrderCategory]	
	,[SalesOrderType]		
	
	
	FROM stage.CER_DE_SalesOrder
GO
PRINT N'Creating [dm].[FactSalesOrder]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE VIEW [dm].[FactSalesOrder]
AS
SELECT CONVERT(BIGINT, SalesOrderID) AS SalesOrderID
	,CONVERT(BIGINT, SalesOrderNumID) AS SalesOrderNumID
	,CONVERT(BIGINT, CustomerID) AS CustomerID
	,CONVERT(BIGINT, CompanyID) AS CompanyID
	,CONVERT(BIGINT, PartID) AS PartID
	,CONVERT(BIGINT, WarehouseID) AS WarehouseID
	,CONVERT(BIGINT, ProjectID) AS ProjectID
	,CONVERT(BIGINT,HASHBYTES('SHA2_256',CONCAT(Company,'#',NULLIF(TRIM(SalesPersonName),'')))) AS SalesPersonNameID -- NEW
	,CONVERT(bigint,DepartmentID) AS DepartmentID
	,SalesOrderDateID
	,Company
	,CustomerNum
	,SalesOrderNum
	,SalesOrderLine
	,SalesOrderSubLine
	,SalesOrderType
	,SalesOrderCategory
	,SalesOrderDate
	,CASE WHEN NeedbyDate < '1900-01-01' OR NeedbyDate IS NULL THEN '1900-01-01'
			WHEN NeedbyDate > '2099-12-31' THEN '2099-12-31'
			ELSE NeedbyDate END AS NeedbyDate
	,CASE WHEN ExpDelivDate < '1900-01-01' OR ExpDelivDate IS NULL THEN '1900-01-01'
			WHEN ExpDelivDate > '2099-12-31' THEN '2099-12-31'
			ELSE ExpDelivDate END AS ExpDelivDate
	,CASE WHEN ConfirmedDelivDate < '1900-01-01' OR ConfirmedDelivDate IS NULL THEN '1900-01-01'
			WHEN ConfirmedDelivDate > '2099-12-31' THEN '2099-12-31'
			ELSE ConfirmedDelivDate END AS ConfirmedDelivDate
	,SalesInvoiceNum
	,SalesOrderQty
	,DelivQty
	,CASE WHEN OpenRelease IN ('0','Close','Closed')  THEN 0
		  ELSE RemainingQty
		  END AS RemainingQty --  RemainingQty. Changed 2023-05-16 SB to hardcode remainingqty to 0 if the order is closed.
	,UoM
	,UnitPrice
	,UnitCost
	,Currency
	,ExchangeRate
	,OpenRelease
	,CASE 
		WHEN OpenRelease = '1'
			OR OpenRelease = 'Open'
			THEN 'Open'
		WHEN OpenRelease = '0'
			OR OpenRelease = 'Close'
			THEN 'Closed'
		ELSE OpenRelease
		END AS OrderStatus
	,DiscountAmount
	,DiscountPercent
	,PartNum
	,PartType
	,PartStatus
	,NULLIF(TRIM(SalesPersonName),'') AS SalesPersonName
	,WarehouseCode
	,SalesChannel
	,AxInterSalesChannel
	,Department
	,ProjectNum --In FITMT, Widni% & Rorose, it means deleted in the source when ProjectNum = '1'
	,ActualDelivDate
	,SalesInvoiceQty
	--	,Cancellation -- temp
	,TotalMiscChrg
	,IsUpdatingStock
	,SORes1
	,SORes2
	,SORes3
	,SORes4
	,SORes5
	,SORes6


FROM dw.SalesOrder
WHERE SalesOrderDate >= DATEADD(year, DATEDIFF(YEAR, 0, dateadd(year, - 4, GETDATE())), 0) --AND Cancellation <> '1'
and (is_deleted != 1 OR is_deleted is null)
GROUP BY SalesOrderID
	,CustomerID
	,CompanyID
	,PartID
	,WarehouseID
	,SalesOrderNumID
	,SalesOrderDateID
	,ProjectID
	,Company
	,CustomerNum
	,SalesOrderNum
	,SalesOrderLine
	,SalesOrderSubLine
	,ConfirmedDelivDate
	,SalesOrderType
	,SalesOrderCategory
	,SalesOrderDate
	,NeedbyDate
	,ExpDelivDate
	,SalesInvoiceNum
	,SalesOrderQty
	,DelivQty
	,RemainingQty
	,UoM
	,UnitPrice
	,UnitCost
	,Currency
	,ExchangeRate
	,OpenRelease
	,DiscountAmount
	,DiscountPercent
	,PartNum
	,PartType
	,PartStatus
	,SalesPersonName
	,WarehouseCode
	,SalesChannel
	,Department
	,ProjectNum
	,ActualDelivDate
	,AxInterSalesChannel
	,SalesInvoiceQty
	,TotalMiscChrg
	,IsUpdatingStock
	,SORes1
	,SORes2
	,SORes3
	,SORes4
	,SORes5
	,SORes6
	,DepartmentID


	--	,Cancellation -- temp
GO
PRINT N'Creating [stage].[SKS_FI_StockBalance]'
GO
CREATE TABLE [stage].[SKS_FI_StockBalance]
(
[PartitionKey] [varchar] (50) NULL,
[MANDT] [nvarchar] (50) NULL,
[COMPANY] [nvarchar] (50) NULL,
[WAREHOUSECODE] [nvarchar] (50) NULL,
[PARTNUM] [nvarchar] (50) NULL,
[CURRENCY] [nvarchar] (50) NULL,
[DEFAULTBINNUM] [nvarchar] (50) NULL,
[SUPPLIERNUM] [nvarchar] (50) NULL,
[DELIVERYTIME] [decimal] (18, 4) NULL,
[STOCKTAKEDATE] [nvarchar] (50) NULL,
[STDCOSTLACAD] [nvarchar] (50) NULL,
[MAXSTOCKQTY] [nvarchar] (50) NULL,
[STOCKBALANCE] [decimal] (18, 4) NULL,
[STOCKVALUE] [decimal] (18, 4) NULL,
[RESERVEDQTY] [nvarchar] (50) NULL,
[BACKORDERQTY] [nvarchar] (50) NULL,
[ORDEREDQTY] [decimal] (18, 4) NULL,
[STOCKTAKDIFF] [nvarchar] (50) NULL,
[REORDERLEVEL] [decimal] (18, 4) NULL,
[OPTIMALORDERQTY] [decimal] (18, 4) NULL,
[SRES1] [nvarchar] (50) NULL,
[SRES2] [nvarchar] (50) NULL,
[SRES3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vSKS_FI_StockBalance]'
GO


/****** Script for SelectTopNRows command from SSMS  ******/
CREATE VIEW [stage].[vSKS_FI_StockBalance] AS 
WITH CTE AS (
SELECT [PartitionKey], [MANDT], [COMPANY], [WAREHOUSECODE], [PARTNUM], [CURRENCY], [DEFAULTBINNUM], [SUPPLIERNUM], [DELIVERYTIME], [STOCKTAKEDATE], [STDCOSTLACAD], [MAXSTOCKQTY], [STOCKBALANCE], [STOCKVALUE], [RESERVEDQTY], [BACKORDERQTY], [ORDEREDQTY], [STOCKTAKDIFF], [REORDERLEVEL], [OPTIMALORDERQTY], [SRES1], [SRES2], [SRES3]
	  ,CAST(CASE WHEN [WAREHOUSECODE] = 'F251' THEN 'FI25'
			WHEN [WAREHOUSECODE] = 'F261' THEN 'FI26'
			WHEN [WAREHOUSECODE] = 'SE10' THEN 'SE10'
			WHEN [WAREHOUSECODE] = 'F201' THEN 'FI20'
		ELSE [WAREHOUSECODE] END  AS nvarchar(10)) AS SKSCompCode

  FROM [stage].[SKS_FI_StockBalance]
  WHERE [WAREHOUSECODE] NOT IN ('FI00','SE10')
)
--ADD TRIM()UPPER() INTO PartID,WarehouseID 2022-12-16 VA
SELECT 
	  CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM(UPPER([PartNum])),'#',TRIM(UPPER([WarehouseCode]))))) AS ItemWarehouseID
	  ,CONCAT([Company],'#',TRIM(UPPER([PartNum])),'#',TRIM(UPPER([WarehouseCode]))) AS ItemWarehouseCode
	  ,CONVERT([binary](32),HASHBYTES('SHA2_256',TRIM([Company]))) AS CompanyID
	  ,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([SupplierNum]), '#', SKSCompCode ))) AS SupplierID
	  ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]), '#', TRIM(SKSCompCode))))) AS PartID
	  --,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([PartNum]), '#', SKSCompCode))) AS PartID
	  ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	  --,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM(UPPER([WarehouseCode]))))) AS WarehouseID
	  ,[PartitionKey]
      
      ,[WAREHOUSECODE]
      ,[CURRENCY] 
	  --,CASE WHEN COMPANY = 'SKSSWE' THEN 'JSESKSSW' ELSE COMPANY END AS Company
	  ,Company
      ,[DEFAULTBINNUM] AS BinNum
	  --,'' AS BatchNum
	  ,RIGHT(TRIM([PARTNUM]), 7) as PartNum
	  ,[DELIVERYTIME]	AS DelivTime
      ,COALESCE(TRY_CONVERT(date,[STOCKTAKEDATE],112),CAST('1900-01-01' AS DATE))	AS LastStockTakeDate
	  ,COALESCE(TRY_CONVERT(date,[STDCOSTLACAD],112),CAST('1900-01-01' AS DATE))	AS LastStdCostCalDate
	  ,COALESCE(TRY_CONVERT(decimal, [SRES2]),0)	 AS SafetyStock
	  ,COALESCE(TRY_CONVERT(decimal, [MAXSTOCKQTY]),0) AS MAXSTOCKQTY
	  ,[STOCKBALANCE]
      ,[STOCKVALUE]
	  ,0 AS AvgCost
      ,COALESCE(TRY_CONVERT(decimal, [RESERVEDQTY]),0)	AS ReserveQty
      ,COALESCE(TRY_CONVERT(decimal, [BACKORDERQTY]),0)	AS BackOrderQty
      ,[ORDEREDQTY]		AS OrderQty
      ,COALESCE(TRY_CONVERT(decimal, [STOCKTAKDIFF]),0)	AS StockTakeDiff
      ,COALESCE(TRY_CONVERT(decimal, [REORDERLEVEL]),0)	AS [REORDERLEVEL]
      ,[OPTIMALORDERQTY]
	  ,[SUPPLIERNUM]
      ,[SRES1]			AS SBRes1
      ,[SRES2]			AS SBRes2
      ,[SRES3]			AS SBRes3
  FROM CTE
GO
PRINT N'Creating [stage].[ACO_UK_OLine_Manual_Adjustment]'
GO
CREATE TABLE [stage].[ACO_UK_OLine_Manual_Adjustment]
(
[SOPNUMBE] [nvarchar] (50) NULL,
[SOPTYPE] [nvarchar] (50) NULL,
[GLPostingdate] [nvarchar] (50) NULL,
[ItemNumber] [nvarchar] (200) NULL,
[Brand] [nvarchar] (100) NULL,
[ExtendedPrice] [nvarchar] (50) NULL,
[ExtendedCost] [nvarchar] (50) NULL,
[QUANTITY] [nvarchar] (50) NULL,
[CUSTNMBR] [nvarchar] (50) NULL,
[Item_Class] [nvarchar] (50) NULL,
[DocDate] [nvarchar] (50) NULL,
[Initmseq] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vACO_UK_OLine_Manual_Adjustment]'
GO
CREATE VIEW [stage].[vACO_UK_OLine_Manual_Adjustment] AS 
--ADD UPPER() TRIM() INTO CustomerID PartID va
WITH Ord AS (
SELECT 
	  N'ACORNUK' AS Company
	  ,[SOPNUMBE]
      ,[SOPTYPE]
      ,TRY_CAST(CAST(GLPostingdate as int)-2 as smalldatetime) AS [GLPostingdate] --  it's minus 2 because excel is weird
      ,TRIM([ItemNumber])	AS ItemNumber
      ,[Brand]
      ,COALESCE(TRY_CONVERT(decimal(18,4), REPLACE(REPLACE([ExtendedPrice],',','.'),' ','')),0) AS [ExtendedPrice]
      ,COALESCE(TRY_CONVERT(decimal(18,4), REPLACE(REPLACE([ExtendedCost],',','.'),' ','')),0) AS [ExtendedCost]
      ,COALESCE(NULLIF(TRY_CONVERT(Decimal(18,4),[QUANTITY]),0)	,1) AS Quantity
      ,TRIM([CUSTNMBR])		AS [CUSTNMBR]
      ,[Item_Class]
      ,COALESCE(TRY_CONVERT(date,[DocDate], 23)
				,TRY_CONVERT(date,[DocDate], 103)) AS [DocDate]
      ,[Initmseq]
	  ,ROW_NUMBER() OVER (Partition BY  SOPNUMBE, ItemNumber, [Initmseq] ORDER BY QUANTITY, ExtendedPrice, ExtendedCost)	AS RowNum
  FROM [stage].[ACO_UK_OLine_Manual_Adjustment]
  WHERE SOPNUMBE IS NOT NULL
  )

  SELECT 
  CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM([SOPNUMBE]), '#', ItemNumber, '#', [Initmseq], '#', RowNum))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,COALESCE(Customer.CustomerID,  CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM([CUSTNMBR])))))) AS CustomerID
	--,COALESCE(Customer.CustomerID,  CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', [CUSTNMBR])))) AS CustomerID
	,COALESCE(Part.PartID, CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#',TRIM(ItemNumber)))))) AS PartID 
	--,COALESCE(Part.PartID, CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', ItemNumber)))) AS PartID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', '')))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#',[SOPNUMBE])))	AS SalesOrderNumID
	,CONCAT(Company, '#', TRIM([CUSTNMBR]), '#', TRIM([SOPNUMBE]), '#', [Initmseq]) AS SalesOrderCode
	,COALESCE( CONVERT(int, replace(try_convert(date, [DocDate]), '-', '')), CONVERT(int, replace(try_convert(date, [GLPostingdate]), '-', '')))  AS SalesOrderDateID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,FORMAT(GETDATE(), 'yyyy-MM-dd hh:mm:ss') PartitionKey

	,Company 
	,TRIM([CUSTNMBR])	AS CustomerNum 
	,TRIM([SOPNUMBE])	AS SalesOrderNum
	,[Initmseq]			AS SalesOrderLine
	--,''					AS SalesOrderSubLine
	,SOPType			AS SalesOrderType
	--,''					AS SalesOrderCategory
	,CAST(COALESCE([DocDate], [GLPostingdate]) AS date)			AS SalesOrderDate
	,CAST('1900-01-01' AS date) AS NeedbyDate
	,CAST('1900-01-01' AS date) AS ExpDelivDate
	,CAST('1900-01-01' AS date) AS ActualDelivDate
	,CAST('1900-01-01' AS date) AS ConfirmedDelivDate
	,TRIM([SOPNUMBE])	AS SalesInvoiceNum
	,QUANTITY			AS SalesOrderQty
	,QUANTITY			AS DelivQty
	,0					AS RemainingQty
	--,NULL AS SalesInvoiceQty
	--,NULL				AS UoM
	,ExtendedPrice/QUANTITY AS UnitPrice
	,ExtendedCost/QUANTITY	AS UnitCost
	,'GBP'  AS Currency
	,1		AS ExchangeRate
	,'0'	AS OpenRelease
	,0		AS DiscountAmount
	,0		AS DiscountPercent
	,TRIM(ItemNumber) AS PartNum
	--,'' AS PartType
	--,'' AS PartStatus
	--,'' AS SalesPersonName
	--,'' AS WarehouseCode
	,CASE	--WHEN LEN(SalesChannel) = 8 THEN 'EXPRESS'	
			--WHEN LEN(SalesChannel) = 12 THEN 'ADVANCE'
			WHEN [CUSTNMBR] LIKE 'RSCOMP%' THEN 'EDI'
			--WHEN SalesPerson = '' THEN 'IMPORTED'
			ELSE '' END AS SalesChannel
	,CASE WHEN [CUSTNMBR] LIKE 'RSCOMP%' THEN 'EDI'
		--WHEN LEN(SalesChannel) = 12 THEN 'Webshop'
		--WHEN LEN(SalesChannel) = 8 THEN 'Webshop'
		ELSE 'Normal Order Handling' END AS AxInterSalesChannel
	--,'' AS Department
	,'Manual Order Adjustment' AS ProjectNum
	,'' AS IndexKey
	,'0' AS Cancellation
	--,''  AS SORes1
	--,NULL AS SORes2
	--,NULL AS SORes3
	--,NULL AS [TotalMiscChrg]
FROM Ord
LEFT JOIN (SELECT DISTINCT PartID
					, TRIM(PartNum) AS PartNum 
			FROM dw.Part 
			WHERE Company = 'ACORNUK' 
			AND PartDescription3 IS NULL) AS Part 
												ON Part.PartNum = Ord.ItemNumber
LEFT JOIN (SELECT DISTINCT CustomerID
					, TRIM(CustomerNum) AS CustomerNum 
			FROM dw.Customer 
			WHERE Company = 'ACORNUK' 
			AND CustomerName IS NOT NULL) AS Customer ON Customer.CustomerNum = Ord.CUSTNMBR
GO
PRINT N'Creating [dm_FH].[dimPart]'
GO

CREATE VIEW [dm_FH].[dimPart] AS 

SELECT 
        par.[PartID]
      ,par.[CompanyID]
      ,par.[Company]
      ,par.[PartNum]
      ,par.[PartName]
      ,par.[Part]
      ,par.[PartDescription]
      ,par.[PartDescription2]
      ,par.[PartDescription3]
      ,par.[MainSupplier]
      ,par.[AlternativeSupplier]
      ,par.[ProductGroup]
      ,par.[ProductGroup2]
      ,par.[ProductGroup3]
      ,par.[ProductGroup4]
      ,par.[Brand]
      ,par.[CommodityCode]
      ,par.[PartReplacementNum]
      ,par.[PartStatus]
      ,par.[CountryOfOrigin]
      ,par.[NetWeight]
      ,par.[UoM]
      ,par.[Material]
      ,par.[ReOrderlevel]
      ,par.[Barcode]
      ,par.[PartResponsible]
      ,par.[ProductID]
      ,par.[PimID]
      ,par.[PIM_Category1]
      ,par.[PIM_Category2]
      ,par.[PIM_Category3]
      ,par.[PIM_Category4]
      ,par.[PIM_Category5]
      ,par.[PIM_Category6]
      ,par.[PIM_Brand]
      ,par.[PIM_Heading]
      ,par.[PIM_Original_Description]
      ,par.[PIM_LCName]
      ,par.[ManufacturerID]
      ,par.[StartDate]
      ,par.[EndDate]
      ,par.[PARes1]
      ,par.[is_inferred]
      ,par.[PartAge]
      ,par.[PartActivity]
      ,par.[StockMovement]


FROM [dm].[DimPart] as par
/* Alt.1 can take long time, as with PT */
LEFT JOIN dbo.Company as com ON par.Company = com.Company
WHERE com.BusinessArea = 'Fluid Handling Solutions' AND com.[Status] = 'Active'
GO
PRINT N'Creating [stage].[SKS_FI_Project]'
GO
CREATE TABLE [stage].[SKS_FI_Project]
(
[PartitionKey] [varchar] (50) NOT NULL,
[COMPANY] [nvarchar] (8) NULL,
[MANDT] [nvarchar] (50) NULL,
[PBUKR] [nvarchar] (50) NULL,
[PSPNR] [nvarchar] (50) NULL,
[POSKI] [nvarchar] (50) NULL,
[POST1] [nvarchar] (max) NULL,
[PKOKR] [nvarchar] (50) NULL,
[POSID] [nvarchar] (50) NULL,
[OBJNR] [nvarchar] (50) NULL,
[PRCTR] [nvarchar] (50) NULL,
[KVEWE] [nvarchar] (50) NULL,
[KAPPL] [nvarchar] (50) NULL,
[STUFE] [nvarchar] (50) NULL,
[PWPOS] [nvarchar] (50) NULL,
[WERKS] [nvarchar] (50) NULL,
[ERDAT] [nvarchar] (50) NULL,
[TOT_COST] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vSKS_FI_Project]'
GO

CREATE VIEW [stage].[vSKS_FI_Project] AS

SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([COMPANY]),'#',[PSPNR])))) AS ProjectID
	,UPPER(CONCAT(TRIM([COMPANY]),'#',[PSPNR] )) AS ProjectCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([COMPANY])))) AS CompanyID
	,PartitionKey

	--,CASE WHEN COMPANY = 'SKSSWE' THEN 'JSESKSSW' ELSE COMPANY END AS Company 
	,Company
	--,PBUKR AS [CoCode]
	,'' AS MainProjectNum
	,PSPNR  AS [ProjectNum]
	,CONCAT(POSKI, ' – ',  POST1) AS [ProjectDescription]
	,'' AS [Organisation]
	--,MANDT AS [Organisation]
	,'' AS ProjectStatus
	,'' AS ProjectCategory
	
	,POSKI AS [WBSElement]
	,POSID AS [ObjectNum]
	--,PRCTR AS [ProfitCtr]
--	,OBJNR AS [ObjectNumber]
	--,PKOKR AS [COAr]
	--,KVEWE AS [Usage]
	--,KAPPL AS [Applcat]
	,STUFE AS [Level]
	,PWPOS AS [Currency]
	,WERKS AS [WarehouseCode]
	,'' AS ProjectResponsible
	,'' AS Comments
	,ERDAT AS [StartDate]
	,'' AS EndDate
	,'' AS EstEndDate
	,NULL AS ProjectCompletion
	,TRY_CAST(TOT_COST AS decimal(18,4)) AS ActualCost
FROM [stage].[SKS_FI_Project]
WHERE PBUKR NOT IN ('FI00','SE10')
GROUP BY 
      [PartitionKey],[COMPANY],PSPNR,POSKI,POST1,MANDT,PBUKR,PKOKR,POSID,OBJNR,PRCTR,KVEWE,KAPPL,STUFE,PWPOS,WERKS,ERDAT, TOT_COST
GO
PRINT N'Creating [stage].[AXL_NO_Customer]'
GO
CREATE TABLE [stage].[AXL_NO_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[MainCustomerName] [nvarchar] (100) NULL,
[CustomerName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[AddressLine] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (20) NULL,
[TelephoneNumber2] [nvarchar] (20) NULL,
[Email] [nvarchar] (100) NULL,
[City] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[Division] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (50) NULL,
[CustomerIndustry] [nvarchar] (50) NULL,
[CustomerSubIndustry] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNo] [nvarchar] (50) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[CustomerABC] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[SalesPersonResponsible] [nvarchar] (50) NULL,
[CustomerType] [nvarchar] (50) NULL,
[Res1] [nvarchar] (50) NULL,
[Res2] [nvarchar] (50) NULL,
[Res3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXL_NO_Customer]'
GO


CREATE VIEW [stage].[vAXL_NO_Customer] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustomerNum))) )) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,UPPER(CONCAT([Company], '#', TRIM([CustomerNum]))) AS CustomerCode
	,PartitionKey

	,UPPER(Company) AS Company
	,UPPER(TRIM(CustomerNum)) AS [CustomerNum]
	,TRIM(MainCustomerName) AS MainCustomerName
	,TRIM(CustomerName) AS  [CustomerName]
	,TRIM([AddressLine1]) AS [AddressLine1]
	,TRIM([AddressLine2]) AS [AddressLine2]
	,TRIM([AddressLine3]) AS [AddressLine3]
	,TRIM([TelephoneNumber1]) AS [TelephoneNum1]
	,TRIM([TelephoneNumber2]) AS [TelephoneNum2]
	,TRIM([Email]) AS [Email]
	,TRIM([ZipCode]) AS [ZipCode]
	,TRIM([City]) AS [City]
	,TRIM([State]) AS [State]
	,TRIM([District]) AS [SalesDistrict]
	,TRIM(con.CountryName) AS CountryName
	,TRIM([ISOAlpha2Code]) AS [CountryCode]
	,TRIM([Division]) AS [Division]
	,TRIM([CustomerIndustry]) AS [CustomerIndustry]
	,TRIM([CustomerSubIndustry]) AS [CustomerSubIndustry]
	,TRIM([AddressLine3]) AS [AddressLine]
	,CONCAT(TRIM(con.CountryName), + ',  ' + TRIM([City]), + ',  ' + TRIM([ZipCode]), + ',  ' + TRIM(addressline3)) AS [FullAddressLine]
	,TRIM(CustomerGroup) AS [CustomerGroup]
	,TRIM(CustomerGroup) AS [CustomerSubGroup]
	,TRIM([SalesRepCode]) AS [SalesPersonCode]
	,TRIM(SalesPersonName) AS [SalesPersonName]
	,TRIM([SalesPersonResponsible]) AS [SalesPersonResponsible]
	,TRIM([VATRegNo]) AS [VATNum]
	,TRIM([AccountString]) AS [AccountNum]
	,TRIM([InternalExternal]) AS [InternalExternal]
	,TRIM([CustomerABC]) AS [CustomerScore]
	,TRIM([CustomerType]) AS [CustomerType]
FROM [stage].[AXL_NO_Customer] com
	LEFT JOIN dbo.Country con ON com.CountryName = con.[ISOAlpha2Code]

--GROUP BY
--	PartitionKey, Company, CustomerNum, CustomerName, MainCustomerName, [AddressLine1], [AddressLine2], [AddressLine3], [TelephoneNumber1], [TelephoneNumber2], [Email], [ZipCode], [City], [State], [District], [CountryName], [Division], [CustomerIndustry], [CustomerSubIndustry], CustomerGroup, [SalesRepCode], SalesPersonName, [SalesPersonResponsible], [VATRegNo], [AccountString], [InternalExternal], [CustomerABC], [CustomerType]

--	Stagetablename in ('AXL_AU_Customer', 'AXL_DC_Customer', 'AXL_HU_Customer', 'AXL_IE_Customer', 'AXL_PL_Customer', 'AXL_PT_Customer', 'AXL_UK_Customer')
GO
PRINT N'Creating [dm_IN].[fctSalesOrder]'
GO



CREATE VIEW [dm_IN].[fctSalesOrder] AS

SELECT 

 so.[SalesOrderID]
,so.[SalesOrderNumID]
,so.[CustomerID]
,so.[CompanyID]
,so.[PartID]
,so.[WarehouseID]
,so.[ProjectID]
,so.[SalesPersonNameID]
,so.[DepartmentID]
,so.[SalesOrderDateID]
,so.[Company]
,so.[CustomerNum]
,so.[SalesOrderNum]
,so.[SalesOrderLine]
,so.[SalesOrderSubLine]
,so.[SalesOrderType]
,so.[SalesOrderCategory]
,so.[SalesOrderDate]
,so.[NeedbyDate]
,so.[ExpDelivDate]
,so.[ConfirmedDelivDate]
,so.[SalesInvoiceNum]
,so.[SalesOrderQty]
,so.[DelivQty]
,so.[RemainingQty]
,so.[UoM]
,so.[UnitPrice]
,so.[UnitCost]
,so.[Currency]
,so.[ExchangeRate]
,so.[OpenRelease]
,so.[OrderStatus]
,so.[DiscountAmount]
,so.[DiscountPercent]
,so.[PartNum]
,so.[PartType]
,so.[PartStatus]
,so.[SalesPersonName]
,so.[WarehouseCode]
,so.[SalesChannel]
,so.[AxInterSalesChannel]
,so.[Department]
,so.[ProjectNum]
,so.[ActualDelivDate]
,so.[SalesInvoiceQty]
,so.[TotalMiscChrg]
,so.[IsUpdatingStock]
,so.[SORes1]
,so.[SORes2]
,so.[SORes3]
,so.[SORes4]
,so.[SORes5]
,so.[SORes6]

FROM dm.FactSalesOrder as so

WHERE Company  in ('OCSSE')  -- Industry basket
GO
PRINT N'Creating [stage].[TMT_FI_StockBalance]'
GO
CREATE TABLE [stage].[TMT_FI_StockBalance]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (50) NOT NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[BinNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[DelivTime] [nvarchar] (50) NULL,
[LastStockTakeDate] [date] NULL,
[LastStdCostCalDate] [date] NULL,
[MaxStockQty] [nvarchar] (50) NULL,
[StockBalance] [nvarchar] (50) NULL,
[StockValue] [nvarchar] (50) NULL,
[ReserveQty] [nvarchar] (50) NULL,
[BackOrderQty] [nvarchar] (50) NULL,
[OrderQty] [nvarchar] (50) NULL,
[StockTakeDiff] [nvarchar] (50) NULL,
[ReOrderLevel] [nvarchar] (50) NULL,
[SafetyStock] [nvarchar] (50) NULL,
[OptimalOrderQty] [nvarchar] (50) NULL,
[AvgCost] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[OpenProdOrder] [nvarchar] (50) NULL,
[UsageQty] [nvarchar] (50) NULL,
[ProdQty] [nvarchar] (50) NULL,
[Version] [nvarchar] (50) NULL,
[SBRes1] [nvarchar] (100) NULL,
[SBRes2] [nvarchar] (100) NULL,
[SBRes3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vTMT_FI_StockBalance]'
GO

CREATE VIEW [stage].[vTMT_FI_StockBalance] AS
--ADD TRIM() INTO PartID 23-01-09 VA
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company], '#', TRIM(PartNum), '#', TRIM([WarehouseCode]), '#', TRIM(BinNum), '#', TRIM(BatchNum), '#', TRIM([version]))))) AS ItemWarehouseID
	,UPPER(CONCAT([Company], '#', TRIM(WarehouseCode))) AS WarehouseCode
	,UPPER(CONCAT([Company], '#', CONCAT(TRIM(PartNum), '-', TRIM([Version])), '#', TRIM([WarehouseCode]))) AS ItemWarehouseCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([SupplierNum]))))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company], '#', TRIM([SupplierNum]))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM(PartNum))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company], '#', TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT(varchar(50), getdate()) AS PartitionKey

	,UPPER(Company) AS Company
	,UPPER(TRIM(PartNum)) AS PartNum
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
	,CASE WHEN TRIM(BinNum) like '' OR BinNum like ' ' THEN NULL ELSE TRIM(BinNum) END AS BinNum
	,TRIM(BatchNum) AS BatchNum
	,[DelivTime]-- convert to days
	,CONVERT(date, LastStockTakeDate) AS LastStockTakeDate
	,CONVERT(date, LastStdCostCalDate) AS LastStdCostCalDate
	,CONVERT(date, '1900-01-01') AS DelivDateSupplier
	,CONVERT(date, '1900-01-01') AS DelivDateCust
	,CONVERT(date, '1900-01-01') AS OrderDateSupplier
	,CONVERT(date, '1900-01-01') AS OrderDateCust
	,TRIM(Currency) AS Currency
	,SafetyStock
	,MaxStockQty
	,CONVERT(decimal(18,4), StockBalance) AS StockBalance
	,CONVERT(decimal(18,4), StockValue) AS StockValue
	,AvgCost
	,ReserveQty
	,BackOrderQty
	,OrderQty
	,StockTakeDiff
	,ReOrderLevel
	,OptimalOrderQty
	,OpenProdOrder AS SBRes1
	,UsageQty AS SBRes2
	,ProdQty AS SBRes3
FROM 
	[stage].[TMT_FI_StockBalance]
GO
PRINT N'Creating [dm].[DimCompany]'
GO









CREATE VIEW [dm].[DimCompany] AS

SELECT       
	CONVERT(bigint, CONVERT([binary](32), HASHBYTES('SHA2_256', company))) AS CompanyID
--	, CONVERT([binary](32), HASHBYTES('SHA2_256', company)) AS CompanyIDhashed
	, [Company]
	, TRIM([CompanyName]) AS [CompanyName]
	, [CompanyGroup]
	, [Division]
	, [BusinessArea]
	, [Country]
	, [Currency]
	, [CompanyShortO365]
	, [CompanyShort]
	, [CompanyShortAD]
	, [CompanyCode]
	, [FromPeriod]
	, [DateAdd]
	, [ValidatedSales]
	, ValidatedPurchase
	, CompanyLogo
FROM            
	dbo.company

	where [Status] = 'Active' 
	--companyname not in ('TRS Motorsport','Peter Harbo', 'S.E. Lodéns Industrimontage​','Klätterteknik','IWRC','GISAB','Drivsystem 05','Cleanroom Cranes','Bronco Transmission') -- excluded these companies since they are either part of another company or sold
GO
PRINT N'Creating [stage].[Nom_SE_StocktransactionOB_Tobias1stPatch]'
GO
CREATE TABLE [stage].[Nom_SE_StocktransactionOB_Tobias1stPatch]
(
[Company] [nvarchar] (50) NULL,
[IndexKey] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[TransactionCode] [nvarchar] (50) NULL,
[TransactionDescription] [nvarchar] (50) NULL,
[IssuerReceiverNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[BinNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[TransactionDate] [nvarchar] (50) NULL,
[TransactionTime] [nvarchar] (50) NULL,
[TransactionQty] [nvarchar] (50) NULL,
[TransactionValue] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[CostPrice] [nvarchar] (50) NULL,
[SalesUnitPrice] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[Reference] [nvarchar] (50) NULL,
[AdjustmentDate] [nvarchar] (50) NULL,
[STRes1] [nvarchar] (50) NULL,
[STRes2] [nvarchar] (50) NULL,
[STRes3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vNOM_SE_StockTransactionOB]'
GO



CREATE VIEW [stage].[vNOM_SE_StockTransactionOB] AS 

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(IndexKey))))) AS StockTransactionID
	,UPPER(TRIM([Company])) AS [Company]
	,TRIM([WarehouseCode]) AS WarehouseCode
	,TransactionCode
	,TransactionDescription
	,IIF(TRIM(IssuerReceiverNum)='', NULL,TRIM(IssuerReceiverNum)) AS IssuerReceiverNum
	,IIF(TRIM([OrderNum])='', NULL,TRIM(OrderNum)) AS OrderNum
	,OrderLine
	,IIF(TRIM([InvoiceNum])='', NULL,TRIM(InvoiceNum)) AS InvoiceNum
	,InvoiceLine
	,UPPER(TRIM([PartNum])) AS [PartNum]
	,IIF(TRIM([BinNum])='', NULL,TRIM(BinNum)) AS BinNum
	,IIF(TRIM([BatchNum])='', NULL,TRIM(BatchNum)) AS BatchNum
	,CONVERT(date, TransactionDate) AS TransactionDate
	,TransactionTime
	,IIF(TransactionQty IS NULL, 0, TRY_CONVERT(decimal(18,2), REPLACE(REPLACE(TransactionQty, ' ', ''), ',', '.'))) AS TransactionQty 
	,IIF(TransactionValue IS NULL, 0, TRY_CONVERT(decimal(18,2), REPLACE(TransactionValue, ',', '.'))) AS TransactionValue
	,IIF(CostPrice IS NULL, 0, TRY_CONVERT(decimal(18,2), REPLACE(REPLACE(CostPrice, ' ', ''), ',', '.'))) AS [CostPrice]
	,IIF(SalesUnitPrice IS NULL, 0, TRY_CONVERT(decimal(18,2), REPLACE(REPLACE(SalesUnitPrice, ' ', ''), ',', '.'))) AS SalesUnitPrice 
	,IIF(TRIM([Currency])='', NULL, TRIM(Currency)) AS Currency
	,[Reference]
	,CONVERT(date, AdjustmentDate) AS AdjustmentDate
	,InternalExternal
	,'' AS STRes1
	,'' AS STRes2
	,'' AS STRes3

	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
    ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,IIF(TransactionCode in ('930', '931', '936'), CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM(Company),'#',TRIM([InvoiceNum])))), NULL) AS PurchaseInvoiceID
	,IIF(TransactionCode in ('930', '931', '936'), CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM(Company),'#',TRIM([OrderNum])))), NULL) AS PurchaseOrderNumID
	,IIF(TransactionCode in ('800', '801', '815'), CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM(Company),'#',TRIM([OrderNum])))), NULL) AS SalesOrderNumID
	,IIF(TransactionCode in ('800', '801', '815'), CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM(Company),'#',TRIM([InvoiceNum])))), NULL) AS SalesInvoiceID
	,IIF(TransactionCode in ('800', '801', '815'), CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM(Company),'#',TRIM(IssuerReceiverNum)))), NULL) AS CustomerID
	,IIF(TransactionCode in ('930', '931', '936'), CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM(Company),'#',TRIM(IssuerReceiverNum)))), NULL) AS SupplierID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',TRIM([Currency]))) AS CurrencyID
	,'2022-04-21 13:30' AS PartitionKey
	,TRIM(IndexKey) AS IndexKey

FROM [stage].Nom_SE_StocktransactionOB_Tobias1stPatch
--WHERE UPPER(TRIM([PartNum])) IS NOT NULL --and TransactionQty != '0'


--main OB: [stage].Nom_SE_StockTransactionOB20220927
GO
PRINT N'Creating [stage].[FOR_ES_PurchaseInvoice]'
GO
CREATE TABLE [stage].[FOR_ES_PurchaseInvoice]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[PurchaseInvoiceLine] [nvarchar] (50) NULL,
[PurchaseInvoiceDate] [nvarchar] (50) NULL,
[ActualDelivDate] [date] NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PurchaseInvoiceQty] [decimal] (18, 4) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[VATAmount] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (10) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PurchaserName] [nvarchar] (100) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Comment] [nvarchar] (500) NULL,
[DocumentNum] [nvarchar] (100) NULL,
[DocumentLine] [nvarchar] (100) NULL,
[PurchaseOrderSubLine] [nvarchar] (100) NULL,
[PurchaseInvoiceType] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vFOR_ES_PurchaseInvoice]'
GO




CREATE VIEW [stage].[vFOR_ES_PurchaseInvoice] AS 
SELECT 

	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseInvoiceNum), '#', TRIM(PurchaseInvoiceLine) )))) AS PurchaseInvoiceID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(PurchaseOrderNum)))) AS PurchaseOrderNumID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM(PurchaseOrderNum),'#',TRIM(PurchaseOrderLine),'#',(PurchaseOrderSubLine))))) AS PurchaseOrderID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',TRIM([Company]))) AS CompanyID,
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([SupplierNum]))))) AS SupplierID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum)))) AS PurchaseLedgerID,
	UPPER(CONCAT(TRIM(Company), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine),'#',TRIM(PurchaseOrderSubLine))) as PurchaseOrderCode,
	CONVERT(int, replace(CONVERT(date, left(PurchaseInvoiceDate,10)),'-','')) AS PurchaseInvoiceDateID,

	[PartitionKey]		,
	UPPER(TRIM(Company)) AS "Company",
	UPPER(TRIM(PurchaseOrderNum)) AS "PurchaseOrderNum",
	UPPER(TRIM(PurchaseOrderLine)) AS "PurchaseOrderLine",
	UPPER(TRIM(PurchaseOrderSubLine)) AS "PurchaseOrderSubLine",
	UPPER(TRIM(PurchaseInvoiceNum)) AS "PurchaseInvoiceNum",
	UPPER(TRIM(PurchaseInvoiceLine)) AS "PurchaseInvoiceLine",
	CONVERT(date, left(PurchaseInvoiceDate,10)) AS PurchaseInvoiceDate,
	ActualDelivDate		,
	UPPER(TRIM(SupplierNum)) AS "SupplierNum",
	UPPER(TRIM(PartNum)) AS "PartNum",
	PurchaseInvoiceQty	,
	UoM					,
	UnitPrice			,
	DiscountPercent		,
	DiscountAmount		,
	VATAmount			,
	ExchangeRate		,
	Currency			,
	CreditMemo			,
	PurchaserName		,
	UPPER(TRIM(WarehouseCode)) AS "WarehouseCode",
	Comment,
	UPPER(TRIM(PurchaseInvoiceType)) as PurchaseInvoiceType


FROM 
	 [stage].[FOR_ES_PurchaseInvoice]
GO
PRINT N'Creating [dm_IN].[dimPart]'
GO






CREATE VIEW [dm_IN].[dimPart] AS 

SELECT 
        [PartID]
      ,[CompanyID]
      ,[Company]
      ,[PartNum]
      ,[PartName]
      ,[Part]
      ,[PartDescription]
      ,[PartDescription2]
      ,[PartDescription3]
      ,[MainSupplier]
      ,[AlternativeSupplier]
      ,[ProductGroup]
      ,[ProductGroup2]
      ,[ProductGroup3]
      ,[ProductGroup4]
      ,[Brand]
      ,[CommodityCode]
      ,[PartReplacementNum]
      ,[PartStatus]
      ,[CountryOfOrigin]
      ,[NetWeight]
      ,[UoM]
      ,[Material]
      ,[ReOrderlevel]
      ,[Barcode]
      ,[PartResponsible]
      ,[ProductID]
      ,[PimID]
      ,[PIM_Category1]
      ,[PIM_Category2]
      ,[PIM_Category3]
      ,[PIM_Category4]
      ,[PIM_Category5]
      ,[PIM_Category6]
      ,[PIM_Brand]
      ,[PIM_Heading]
      ,[PIM_Original_Description]
      ,[PIM_LCName]
      ,[ManufacturerID]
      ,[StartDate]
      ,[EndDate]
      ,[PARes1]
      ,[is_inferred]
      ,[PartAge]
      ,[PartActivity]
      ,[StockMovement]

FROM [dm].[DimPart]
WHERE [Company] in ('OCSSE') -- Industry basket
GO
PRINT N'Creating [stage].[CER_NO_BC_PurchaseOrder]'
GO
CREATE TABLE [stage].[CER_NO_BC_PurchaseOrder]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[PurchaseOrderType] [nvarchar] (50) NULL,
[PurchaseOrderDate] [nvarchar] (50) NULL,
[IsOrderClosed] [nvarchar] (50) NULL,
[ActualDelivDate] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[SupplierPartNum] [nvarchar] (50) NULL,
[PurchaseOrderQty] [nvarchar] (50) NULL,
[PurchaseReceiveQty] [nvarchar] (50) NULL,
[PurchaseInvoiceQty] [nvarchar] (50) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [nvarchar] (50) NULL,
[DiscountPercent] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[PurchaserName] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[LandedCost] [nvarchar] (50) NULL,
[PurchaseOrderStatus] [nvarchar] (50) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL,
[ExchangeRate] [nvarchar] (50) NULL,
[DiscountAmount] [nvarchar] (50) NULL,
[ReceivingNum] [nvarchar] (50) NULL,
[PORes1] [nvarchar] (50) NULL,
[Comments] [nvarchar] (max) NULL,
[ReqDelivDate] [date] NULL,
[CommittedDelivDate] [date] NULL,
[PartStatus] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_NO_BC_PurchaseOrder]'
GO

CREATE view [stage].[vCER_NO_BC_PurchaseOrder] as 

select 
	CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum),'#',TRIM(PurchaseOrderLine),'#',TRIM(PurchaseInvoiceNum))))) AS PurchaseOrderID
	,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseInvoiceNum))))) AS PurchaseInvoiceID
	--,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(DelivCustomerNum))))) AS CustomerID
	,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum))))) AS SupplierID
	,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(TRIM(Currency)))) AS CurrencyID
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum),'#',TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine))) AS PurchaseOrderCode
	,PartitionKey AS PartitionKey

	---Mandatory Fields ---
	,UPPER(TRIM(Company)) AS Company
	,UPPER(TRIM(PurchaseOrderNum)) AS PurchaseOrderNum
	,UPPER(TRIM(PurchaseOrderLine)) AS PurchaseOrderLine
	,UPPER(TRIM(PartNum)) AS PartNum
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
	,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
	,CASE WHEN PurchaseOrderDate = '' OR PurchaseOrderDate is NULL THEN null ELSE CONVERT(date, PurchaseOrderDate) END AS PurchaseOrderDate
	,CONVERT(decimal(18,4), Replace(PurchaseOrderQty, ',', '.')) AS PurchaseOrderQty
	,CONVERT(decimal(18,4), Replace(PurchaseReceiveQty, ',', '.')) AS ReceiveQty
	,CONVERT(decimal(18,4), Replace(PurchaseInvoiceQty, ',', '.')) AS InvoiceQty
	,CONVERT(decimal(18,4), Replace(UnitPrice, ',', '.')) AS UnitPrice
	,CONVERT(decimal(18,4), Replace(ExchangeRate, ',', '.')) AS ExchangeRate
	,UPPER(TRIM(Currency)) AS Currency
	,TRIM(IsOrderClosed) AS IsClosed

	---Valuable Fields ---

	,UPPER(TRIM(PurchaseOrderType)) AS PurchaseOrderType
	,UPPER(TRIM(PurchaseOrderStatus)) AS PurchaseOrderStatus
	,CASE WHEN CommittedDelivDate = '' OR CommittedDelivDate is NULL THEN null ELSE CONVERT(date, CommittedDelivDate) END AS CommittedDelivDate
	,CASE WHEN ActualDelivDate = '' OR ActualDelivDate is NULL THEN null ELSE CONVERT(date, ActualDelivDate) END AS ActualDelivDate
	,CASE WHEN ReqDelivDate = '' OR ReqDelivDate is NULL THEN null ELSE CONVERT(date, ReqDelivDate) END AS ReqDelivDate
	,CONVERT(decimal(18,4), Replace(DiscountPercent, ',', '.')) AS DiscountPercent
	,CONVERT(decimal(18,4), Replace(DiscountAmount, ',', '.')) AS DiscountAmount
	,UPPER(TRIM(PurchaserName)) AS PurchaserName
	,TRIM(PartStatus) AS PartStatus

	--- Good-to-have Fields ---

	,UPPER(TRIM(PurchaseInvoiceNum)) AS PurchaseInvoiceNum
	,UPPER(TRIM(SupplierPartNum)) AS SupplierPartNum
	,UPPER(TRIM(UoM)) AS UoM
	,CONVERT(decimal(18,4), Replace(LandedCost, ',', '.')) AS LandedCost

	--------------------------------------------- Meta Data ---------------------------------------------

	,CONVERT(date, ModifiedTimeStamp) AS ModifiedTimeStamp
	,CONVERT(date, CreatedTimeStamp) AS CreatedTimeStamp
	,UPPER(TRIM(PORes1)) AS PORes1

from [stage].[CER_NO_BC_PurchaseOrder]
GO
PRINT N'Creating [stage].[TRA_SE_Supplier]'
GO
CREATE TABLE [stage].[TRA_SE_Supplier]
(
[PartitionKey] [nvarchar] (25) NULL,
[Company] [nvarchar] (8) NULL,
[SupplierNum] [nvarchar] (20) NULL,
[SupplierName] [nvarchar] (100) NULL,
[ParentSupplierName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (36) NULL,
[AddressLine2] [nvarchar] (36) NULL,
[TelephoneNum1] [nvarchar] (200) NULL,
[Email] [nvarchar] (100) NULL,
[ZipCode] [nvarchar] (10) NULL,
[City] [nvarchar] (36) NULL,
[State] [nvarchar] (5) NULL,
[CountryCode] [nvarchar] (3) NULL,
[CountryName] [nvarchar] (50) NULL,
[SupplierCategory] [nvarchar] (50) NULL,
[VATNum] [nvarchar] (20) NULL,
[OrgNum] [nvarchar] (18) NULL,
[IsAxInterInternal] [nvarchar] (1) NULL,
[IsBusinessGroupInternal] [nvarchar] (1) NULL,
[IsCompanyGroupInternal] [nvarchar] (1) NULL,
[CreatedTimeStamp] [nvarchar] (60) NULL,
[ModifiedTimeStamp] [nvarchar] (60) NULL,
[RecordIsActive] [nvarchar] (1) NULL,
[Website] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vTRA_SE_Supplier]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vTRA_SE_Supplier]
	AS 
	select 
CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([SupplierNum]))))) AS SupplierID
,UPPER(CONCAT([Company],'#',TRIM([SupplierNum]))) AS SupplierCode
,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Company])))) AS CompanyID
,PartitionKey
,UPPER(Company) as Company
,nullif(TRIM(SupplierNum),'') AS SupplierNum
, SupplierName
, AddressLine1
,AddressLine2
,TelephoneNum1
,Email
,ZipCode
,City
,State
,CountryCode
,CountryName
,SupplierCategory
,VATNum
,OrgNum as OrganizationNum
,cast(IsAxInterInternal as bit) as InternalExternal
,cast(IsBusinessGroupInternal as bit) as IsBusinessGroupInternal
,cast(IsCompanyGroupInternal as bit) as IsCompanyGroupInternal
,cast(RecordIsActive as bit) as IsActiveRecord
,Website
from stage.TRA_SE_Supplier;
GO
PRINT N'Creating [dw].[Account]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [dw].[Account]
(
[AccountID] [binary] (32) NOT NULL,
[AccountCode] [nvarchar] (100) NULL,
[CompanyID] [binary] (32) NOT NULL,
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[AccountNum] [nvarchar] (50) NULL,
[AccountName] [nvarchar] (200) NULL,
[AccountName2] [nvarchar] (400) NULL,
[Account] [nvarchar] (100) NULL,
[AccountStatus] [nvarchar] (50) NULL,
[BalanceAccount] [nvarchar] (100) NULL,
[TransactionAccount] [nvarchar] (100) NULL,
[Assets] [nvarchar] (100) NULL,
[Amortization] [nvarchar] (100) NULL,
[Costs] [nvarchar] (100) NULL,
[LiabilitiesAndEquity] [nvarchar] (100) NULL,
[Revenue] [nvarchar] (100) NULL,
[CurrentAssets] [nvarchar] (100) NULL,
[CurrentLiabilities] [nvarchar] (100) NULL,
[Deprecation] [nvarchar] (100) NULL,
[Equity] [nvarchar] (100) NULL,
[Liability] [nvarchar] (100) NULL,
[Interest] [nvarchar] (100) NULL,
[Tax] [nvarchar] (100) NULL,
[Materials] [nvarchar] (100) NULL,
[Expenses] [nvarchar] (100) NULL,
[AccountReceivables] [nvarchar] (100) NULL,
[CashAndEquivalents] [nvarchar] (100) NULL,
[AccountType] [nvarchar] (50) NULL,
[AccountType2] [nvarchar] (50) NULL,
[AccountType3] [nvarchar] (50) NULL,
[AccountType4] [nvarchar] (50) NULL,
[AccountType5] [nvarchar] (100) NULL,
[AccountType6] [nvarchar] (100) NULL,
[AccountType7] [nvarchar] (100) NULL,
[AccountType8] [nvarchar] (100) NULL,
[AccountType9] [nvarchar] (100) NULL,
[AccountType10] [nvarchar] (100) NULL,
[AccountGroupNum] [nvarchar] (50) NULL,
[AccountGroupName] [nvarchar] (100) NULL,
[AccountGroup] [nvarchar] (100) NULL,
[AccountGroup2] [nvarchar] (100) NULL,
[AccountGroup3] [nvarchar] (100) NULL,
[Statement] [nvarchar] (100) NULL,
[StatementNum] [int] NULL,
[AccRes1] [nvarchar] (100) NULL,
[AccRes2] [nvarchar] (100) NULL,
[AccRes3] [nvarchar] (100) NULL,
[is_deleted] [bit] NULL,
[is_inferred] [bit] NULL,
[AccountGroupOrder] [int] NULL,
[AccountIsActive] [bit] NULL,
[AccountType1] [nvarchar] (100) NULL,
[Inventory] [bit] NULL,
[IsActiveRecord] [bit] NULL
)
GO
PRINT N'Creating primary key [PK_Account] on [dw].[Account]'
GO
ALTER TABLE [dw].[Account] ADD CONSTRAINT [PK_Account] PRIMARY KEY CLUSTERED ([AccountID])
GO
PRINT N'Creating [dm].[DimFinanceAccount]'
GO








/****** Script for SelectTopNRows command from SSMS  ******/

CREATE VIEW [dm].[DimFinanceAccount] AS
SELECT CONVERT(bigint, [AccountID]) AS [AccountID]
      ,[AccountCode]
      ,CONVERT(bigint, [CompanyID]) AS [CompanyID]
      ,[PartitionKey]
      ,[Company]
      ,[AccountNum]
      ,[AccountName]
	  ,[AccountName2]
      ,[Account]
      ,[AccountStatus]
      ,[BalanceAccount]
      ,[TransactionAccount]
      ,[Assets]
	  ,[Amortization]
      ,[Costs]
      ,[LiabilitiesAndEquity]
      ,[Revenue]
      ,[CurrentAssets]
      ,[CurrentLiabilities]
      ,[Deprecation]
      ,[Equity]
	  ,[Liability]
      ,[Interest]
      ,[Tax]
      ,[Materials]
      ,[Expenses]
      ,[AccountReceivables]
      ,[CashAndEquivalents]
      ,[AccountType]
      ,[AccountType2]
      ,[AccountType3]
      ,[AccountType4]
      ,[AccountType5]
      ,[AccountType6]
      ,[AccountType7]
      ,[AccountType8]
      ,[AccountType9]
      ,[AccountType10]
      ,[AccountGroupNum]
      ,[AccountGroupName]
	  ,[AccountGroupOrder]
      ,[AccountGroup]
	  ,[AccountGroup2]
	  ,[AccountGroup3] 
	  ,[Statement]
	  ,[StatementNum]
  FROM [dw].[Account]  -- was [fnc].

  where [AccountNum] != '8882'
GO
PRINT N'Creating [dm_IN].[dimFinanceAccount]'
GO


CREATE VIEW [dm_IN].[dimFinanceAccount] AS 

SELECT fa.[AccountID]
,fa.[AccountCode]
,fa.[CompanyID]
,fa.[PartitionKey]
,fa.[Company]
,fa.[AccountNum]
,fa.[AccountName]
,fa.[AccountName2]
,fa.[Account]
,fa.[AccountStatus]
,fa.[BalanceAccount]
,fa.[TransactionAccount]
,fa.[Assets]
,fa.[Amortization]
,fa.[Costs]
,fa.[LiabilitiesAndEquity]
,fa.[Revenue]
,fa.[CurrentAssets]
,fa.[CurrentLiabilities]
,fa.[Deprecation]
,fa.[Equity]
,fa.[Liability]
,fa.[Interest]
,fa.[Tax]
,fa.[Materials]
,fa.[Expenses]
,fa.[AccountReceivables]
,fa.[CashAndEquivalents]
,fa.[AccountType]
,fa.[AccountType2]
,fa.[AccountType3]
,fa.[AccountType4]
,fa.[AccountType5]
,fa.[AccountType6]
,fa.[AccountType7]
,fa.[AccountType8]
,fa.[AccountType9]
,fa.[AccountType10]
,fa.[AccountGroupNum]
,fa.[AccountGroupName]
,fa.[AccountGroupOrder]
,fa.[AccountGroup]
,fa.[AccountGroup2]
,fa.[AccountGroup3]
,fa.[Statement]
,fa.[StatementNum]
FROM [dm].[DimFinanceAccount] fa
LEFT JOIN dbo.Company com ON fa.Company = com.Company
WHERE com.BusinessArea = 'Industrial Solutions' AND com.[Status] = 'Active'

--WHERE [Company] in ('CNOCERT')
GO
PRINT N'Creating [stage].[OCS_SE_Part]'
GO
CREATE TABLE [stage].[OCS_SE_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartDescription] [nvarchar] (max) NULL,
[PartDescription2] [nvarchar] (max) NULL,
[PartDescription3] [nvarchar] (max) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[ProductGroup2] [nvarchar] (50) NULL,
[ProductGroup3] [nvarchar] (50) NULL,
[ProductGroup4] [nvarchar] (50) NULL,
[CountryOfOrigin] [nvarchar] (50) NULL,
[Brand] [nvarchar] (50) NULL,
[CommodityCode] [nvarchar] (50) NULL,
[PartNumReplacement] [nvarchar] (50) NULL,
[NetWeight] [decimal] (18, 4) NULL,
[Volume] [decimal] (18, 4) NULL,
[Material] [nvarchar] (50) NULL,
[Barcode] [nvarchar] (50) NULL,
[ReorderLevel] [decimal] (18, 4) NULL,
[StartDate] [date] NULL,
[EndDate] [date] NULL,
[Res1_ProdCatNo] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vOCS_SE_Part]'
GO

CREATE VIEW [stage].[vOCS_SE_Part] AS
--COMMENT EMPTY FIELDS // ADD UPPER() TRIM() INTO PartID 2022-12-21 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#', TRIM([PartNum]))))) AS PartID
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company] ,'#', TRIM(UPPER([PartNum])) ))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Upper(trim([Company])))) AS CompanyID
	,UPPER(CONCAT([Company], '#', TRIM([PartNum]))) AS PartCode
	,PartitionKey

	,[Company]
	,UPPER(TRIM(PartNum)) AS PartNum
	--,'' AS [PartName] 
	,MAX([PartDescription]) AS [PartDescription]
	,MAX([PartDescription2]) AS [PartDescription2]
	,MAX(Res1_ProdCatNo) AS [PartDescription3]
	--,NULL AS MainSupplier
	--,NULL AS AlternativeSupplier
	,MAX([ProductGroup]) AS [ProductGroup]
	,MAX([ProductGroup2]) AS [ProductGroup2]
	,MAX([ProductGroup3]) AS [ProductGroup3]
	,MAX([ProductGroup4]) AS [ProductGroup4]
	--,'' AS [Brand]
	,TRIM([CommodityCode]) AS [CommodityCode]
	--,'' AS PartReplacementNum
	--,'' AS PartStatus
	,TRIM([CountryOfOrigin]) AS [CountryOfOrigin]
	,[NetWeight]
	--,'' AS [UoM]
	--,'' AS [Material]
	--,'' AS [Barcode]
	,MAX([ReorderLevel]) AS [ReOrderLevel]
	--,'' AS PartResponsible
	--,'' AS [StartDate]
	--,'' AS [EndDate]
	

FROM [stage].[OCS_SE_Part]

GROUP BY 
	PartitionKey, Company, TRIM(PartNum), TRIM([CommodityCode]), TRIM([CountryOfOrigin]), NetWeight
GO
PRINT N'Creating [stage].[AXL_DE_SOLine]'
GO
CREATE TABLE [stage].[AXL_DE_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[InvoiceType] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (22, 8) NULL,
[UnitCost] [decimal] (22, 8) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[VAT] [decimal] (18, 4) NULL,
[CashDiscountOffered] [decimal] (18, 4) NULL,
[CashDiscountUsed] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OrderType] [nvarchar] (50) NULL,
[SalesChannel] [varchar] (10) NULL,
[BusinessChain] [varchar] (10) NULL,
[Res1] [varchar] (100) NULL,
[Res2] [varchar] (100) NULL,
[Res3] [varchar] (100) NULL,
[PartDesc] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[vAXL_DE_SOLine]'
GO


CREATE VIEW [stage].[vAXL_DE_SOLine] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine), '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(PartNum), '#', TRIM(PartDesc))))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(PartDesc))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(InvoiceNum))))) AS SalesLedgerID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum), '#', (IIF(TRIM([PartNum]) LIKE 'IACO%' , 'MISC. CHARGES', TRIM([PartDesc]))))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT(int, IIF(InvoiceDate = '', 19900101, replace(convert(date, InvoiceDate), '-', ''))) AS SalesInvoiceDateID
	,UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine))) AS SalesInvoiceCode
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine))) AS SalesOrderCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(SalesPerson) AS SalesPersonName
	,TRIM(CustNum) AS [CustomerNum]
	,TRIM(PartNum) AS PartNum
	,UPPER(PartDesc) AS PartDesc
	,'' AS [PartType]
	,TRIM(OrderNum) AS [SalesOrderNum]
	,CAST(OrderLine AS text) AS [SalesOrderLine]
	,TRIM(OrderSubLine) AS [SalesOrderSubLine]
	,TRIM(OrderType) AS [SalesOrderType]
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,TRIM(InvoiceLine) AS [SalesInvoiceLine]
	,TRIM(InvoiceType) AS [SalesInvoiceType]
	,CASE WHEN InvoiceDate = '' THEN '1900-01-01' ELSE CONVERT(date, InvoiceDate) END AS [SalesInvoiceDate]
	,ActualDeliveryDate AS [ActualDelivDate]
	,SellingShipQty AS [SalesInvoiceQty]
	,TRIM(Unit) AS [UoM]
	,UnitPrice
	,UnitCost
	,DiscountAmount
	,IIF(UnitPrice*SellingShipQty = 0, 0, DiscountAmount/UnitPrice*SellingShipQty) AS DiscountPercent
	,CONVERT(decimal(18,4), CashDiscountOffered) AS [CashDiscOffered] 
	,CONVERT(decimal(18,4), CashDiscountUsed) AS [CashDiscUsed] 
	,TotalMiscChrg
	,VAT AS [VATAmount]
	,Currency
	,ExchangeRate
	,TRIM(CreditMemo) AS CreditMemo
	,TRIM([SalesChannel]) AS [SalesChannel]
	,TRIM([BusinessChain]) AS [Department]
	,TRIM(WarehouseCode) AS WarehouseCode
	,NULL AS [CostBearerNum]
	,NULL AS [CostUnitNum]
	,NULL AS [ReturnComment]
	,NULL AS [ReturnNum]
	,NULL AS [ProjectNum]
	,'' AS [IndexKey]
	,Res1 AS SIRes1
	,Res2 AS SIRes2
	,Res3 AS SIRes3
FROM stage.AXL_De_SOLine


	--,CASE WHEN OrderType = 'MD' THEN 1 
	--		WHEN OrderType = 'MT' THEN 2
	--		WHEN OrderType = 'MR' THEN 3
	--		WHEN OrderType = 'IV' THEN 4
	--		WHEN OrderType = 'Misc. Charges' THEN 5 --added after Ulf changes in the night /DZ
	--	ELSE OrderType END AS [SalesOrderType]

--GROUP BY
--	PartitionKey, Company, SalesPerson, CustNum, PartNum, PartDesc, OrderNum, OrderLine, OrderSubLine,OrderType, InvoiceNum, InvoiceLine, InvoiceDate, SellingShipQty, UnitPrice, UnitCost, DiscountAmount, TotalMiscChrg, WarehouseCode, CreditMemo, ActualDeliveryDate, Currency, ExchangeRate, InvoiceType, Res1, Res2, Res3, Unit, VAT, SalesChannel, BusinessChain, CashDiscountOffered, CashDiscountUsed
GO
PRINT N'Creating [stage].[NOM_NO_StockBalance]'
GO
CREATE TABLE [stage].[NOM_NO_StockBalance]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[Currency] [nvarchar] (10) NULL,
[BinNum] [nvarchar] (12) NULL,
[BatchNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (70) NOT NULL,
[LastStockTakeDate] [nvarchar] (50) NULL,
[LastStdCostDate] [nvarchar] (50) NULL,
[MaxStockQty] [nvarchar] (50) NULL,
[StockBalance] [decimal] (18, 4) NULL,
[StockValue] [decimal] (18, 4) NULL,
[ManualReservations] [decimal] (18, 4) NULL,
[ReserveQty] [nvarchar] (50) NULL,
[BackOrderQty] [decimal] (18, 4) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[StockTakeDiff] [decimal] (18, 4) NULL,
[ReOrderLevel] [decimal] (18, 4) NULL,
[SafetyStock] [decimal] (18, 4) NULL,
[OptimalOrderQty] [decimal] (18, 4) NULL,
[AvgCost] [decimal] (18, 4) NULL,
[DelivTime] [nvarchar] (50) NULL,
[SBRes1] [nvarchar] (50) NULL,
[SBRes2] [nvarchar] (50) NULL,
[SBRes3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vNOM_NO_StockBalance]'
GO
CREATE VIEW [stage].[vNOM_NO_StockBalance] AS
--ADD TRIM() INTO PartID 23-01-09 VA
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT([Company],'#',TRIM([PartNum]),'#',TRIM([WarehouseCode]))))) AS ItemWarehouseID
	,TRIM(WarehouseCode) AS WarehouseCode
	,UPPER(CONCAT([Company],'#',TRIM([PartNum]),'#',TRIM([WarehouseCode]))) AS ItemWarehouseCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER([Company]))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT([Company],'#',TRIM([SupplierNum]))))) AS SupplierID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT([Company],'#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey

	,UPPER(Company) AS Company
	,CASE WHEN TRIM(BinNum) like '' OR BinNum like ' ' THEN NULL ELSE TRIM(BinNum) END AS BinNum
	,TRIM(BatchNum) AS BatchNum
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,[DelivTime]-- convert to days
	,IIF(LastStockTakeDate = 0, '1900-01-01', CONVERT(date, LastStockTakeDate)) AS LastStockTakeDate
	,IIF(LastStdCostDate = 0,  '1900-01-01', CONVERT(date, LastStdCostDate)) AS LastStdCostCalDate
	,TRIM(Currency) AS Currency
	,SafetyStock
	,ManualReservations AS MaxStockQty
	,StockBalance
	,StockValue
	,AvgCost
	,ReserveQty
	,BackOrderQty
	,OrderQty
	,StockTakeDiff
	,ReOrderLevel
	,OptimalOrderQty
	,SBRes1
	,SBRes2
	,SBRes3
FROM 
	[stage].[NOM_NO_StockBalance]
GO
PRINT N'Creating [dm_LS].[dimPart]'
GO







CREATE VIEW [dm_LS].[dimPart] AS 

SELECT 
       par.[PartID]
      ,par.[CompanyID]
      ,par.[Company]
      ,par.[PartNum]
      ,par.[PartName]
      ,par.[Part]
      ,par.[PartDescription]
      ,par.[PartDescription2]
      ,par.[PartDescription3]
      ,par.[MainSupplier]
      ,par.[AlternativeSupplier]
      ,par.[ProductGroup]
      ,par.[ProductGroup2]
      ,par.[ProductGroup3]
      ,par.[ProductGroup4]
      ,par.[Brand]
      ,par.[CommodityCode]
      ,par.[PartReplacementNum]
      ,par.[PartStatus]
      ,par.[CountryOfOrigin]
      ,par.[NetWeight]
      ,par.[UoM]
      ,par.[Material]
      ,par.[ReOrderlevel]
      ,par.[Barcode]
      ,par.[PartResponsible]
      ,par.[ProductID]
      ,par.[PimID]
      ,par.[PIM_Category1]
      ,par.[PIM_Category2]
      ,par.[PIM_Category3]
      ,par.[PIM_Category4]
      ,par.[PIM_Category5]
      ,par.[PIM_Category6]
      ,par.[PIM_Brand]
      ,par.[PIM_Heading]
      ,par.[PIM_Original_Description]
      ,par.[PIM_LCName]
      ,par.[ManufacturerID]
      ,par.[StartDate]
      ,par.[EndDate]
      ,par.[PARes1]
      ,par.[is_inferred]
      ,par.[PartAge]
      ,par.[PartActivity]
      ,par.[StockMovement]
FROM [dm].[DimPart] as par
/* Alt.1 can take long time, as with PT */
--LEFT JOIN dbo.Company com ON par.Company = com.Company
--WHERE com.BusinessArea = 'Fluid Handling Solutions' AND com.[Status] = 'Active'

/* Alt.2 */
WHERE par.[Company] in ('AFISCM', 'CDKCERT', 'CEECERT','CERDE', 'CFICERT', 'CLTCERT', 'CLVCERT', 'CSECERT', 'CUKCERT', 'CNOEHAU', 'CERPL', 'CNOCERT', 'CERNO', 'CyESA', 'HFIHAKL', 'TRACLEV','MENBE14','MENNL01','MENNL02','MENNL03','MENNL04','MENNL07','MENNL11')
GO
PRINT N'Creating [stage].[AXL_UK_OLine]'
GO
CREATE TABLE [stage].[AXL_UK_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[NeedbyDate] [date] NULL,
[ExpDelivDate] [date] NULL,
[EDCExpDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (10) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[SalesPerson] [nvarchar] (50) NULL,
[WareHouseCode] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[BusinessChain] [nvarchar] (50) NULL,
[SalesOrderCategory] [nvarchar] (100) NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL,
[PartDesc] [nvarchar] (max) NULL,
[APV_Cost_EUR] [nvarchar] (50) NULL,
[APV_Item] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXL_UK_OLine]'
GO

CREATE VIEW [stage].[vAXL_UK_OLine] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(PartDesc))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum), '#', (IIF(TRIM([PartNum]) LIKE 'IACO%' , 'MISC. CHARGES', TRIM(PartDesc) )) )))) AS PartID
	,CONVERT(int, replace(convert(date, OrderDate), '-', '')) AS SalesOrderDateID
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine))) AS SalesOrderCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(CustNum) AS CustomerNum 
	,TRIM(OrderNum) AS [SalesOrderNum]
	,TRIM(OrderLine) AS [SalesOrderLine]
	,TRIM(OrderSubLine) AS [SalesOrderSubLine]
	,CONVERT(nvarchar(50), TRIM(OrderType)) AS [SalesOrderType]
	,TRIM([SalesOrderCategory]) AS [SalesOrderCategory]
	,OrderDate AS [SalesOrderDate]
	,NeedbyDate
	,ExpDelivDate AS [ExpDelivDate]
	,EDCExpDelivDate
	,ActualDelivDate
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,OrderQty AS [SalesOrderQty]
	,DelivQty
	,RemainingQty
	,Unit AS [UoM]
	,UnitPrice
	,UnitCost
	,LEFT(TRIM(Currency), 3) AS Currency
	,ExchangeRate
	,LEFT(TRIM(OpenRelease), 1) AS OpenRelease
	,DiscountAmount
	,DiscountPercent
	,NULL AS CashDiscOffered
	,NULL AS CashDiscUsed
	,TRIM(PartNum) AS PartNum
	,UPPER(PartDesc) AS PartDesc
	,'' AS [PartType]
	,CONVERT(nvarchar(50), PartStatus) AS PartStatus
	,TRIM(SalesPerson) AS [SalesPersonName]
	,TRIM(WareHouseCode) AS WarehouseCode
	,'' AS IndexKey
	,TRIM(SalesChannel) AS SalesChannel
	,TRIM(BusinessChain) AS [Department]
	,Res3 AS [ProjectNum] -- = FreeOfCharge: Y = yes, N = no
	,'' AS Cancellation
	,Res1 AS SORes1
	,Res2 AS SORes2
	,Res3 AS SORes3
FROM stage.AXL_UK_OLine
WHERE OrderDate >= '2015-01-01'
GO
PRINT N'Creating [stage].[CER_LV_PurchaseLedger]'
GO
CREATE TABLE [stage].[CER_LV_PurchaseLedger]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierCode] [nvarchar] (50) NOT NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[InvoiceLCYAmount] [decimal] (18, 4) NOT NULL,
[InvoiceCurrAmount] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (10) NULL,
[VATPaid] [decimal] (18, 4) NULL,
[VATcode] [nvarchar] (10) NULL,
[PayToName] [nvarchar] (50) NULL,
[PaymentTermsCode] [nvarchar] (50) NULL,
[PrepaymentNum] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_LV_PurchaseLedger]'
GO
CREATE VIEW [stage].[vCER_LV_PurchaseLedger] AS 
--COMMENT EMPTY FIELDS 2022-12-21 VA
--ADD TRIM() INTO Supplier 23-01-23 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(SupplierCode), '#', TRIM(PurchaseInvoiceNum)))) AS PurchaseLedgerID -- shall = in Invoice
	,CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(PurchaseInvoiceNum)) AS PurchaseLedgerCode --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',TRIM(Company))) AS CompanyID --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierCode))))) AS SupplierID --Redundant?
	--,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(Company, '#', TRIM(UPPER(SupplierCode)))))) AS SupplierID --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(PurchaseInvoiceNum)))) AS PurchaseInvoiceID --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM(CurrencyCode)))) AS CurrencyID --Redundant?
	,CONVERT(int, replace(convert(date,InvoiceDate),'-','')) AS PurchaseInvoiceDateID  --Redundant?
	,[PartitionKey]

	,[Company]
	,TRIM(UPPER(SupplierCode)) AS SupplierNum
	,[PurchaseOrderNum]
	,[PurchaseInvoiceNum]
	,CONVERT(date, [InvoiceDate]) AS PurchaseInvoiceDate
	,CONVERT(date, [DueDate]) AS PurchaseDueDate
	,CONVERT(date, [LastPaymentDate]) AS PurchaseLastPaymentDate
	,[InvoiceLCYAmount] 
	,[InvoiceCurrAmount] AS InvoiceAmount
--	,IIF([InvoiceCurrAmount]=0, null, [InvoiceLCYAmount]/[InvoiceCurrAmount]) AS ExchangeRate
	,[ExchangeRate]
	,[CurrencyCode] AS Currency
	,[VATPaid]	AS VATAmount
	,[VATcode]	AS VATCode
	,[PayToName]
	--,'' AS [PayToCity]
	--,'' AS [PayToContact]
	,[PaymentTermsCode]	AS PaymentTerms
	,[PrepaymentNum]
	--,'' AS LastPaymentNum
	--,'' AS PLRES1
	--,'' AS PLRES2
	--,'' AS PLRES3
	--,NULL AS PaidInvoiceAmount
	--,NULL AS RemainingInvoiceAmount
	--,NULL AS LinkToOriginalInvoice
	,cast( '1900-01-01' as date) AS AccountingDate
	--,NULL AS AgingPeriod
	--,NULL AS AgingSort
	--,NULL AS VATCodeDesc
FROM 
	[stage].[CER_LV_PurchaseLedger]
GO
PRINT N'Creating [dm].[FactPurchaseInvoice]'
GO
CREATE VIEW [dm].[FactPurchaseInvoice]
AS
SELECT CONVERT(BIGINT, PINV.[PurchaseInvoiceID]) AS PurchaseInvoiceID
	,CONVERT(BIGINT, PINV.CompanyID) AS CompanyID
	,CONVERT(BIGINT, PINV.SupplierID) AS SupplierID
	,CONVERT(BIGINT, PINV.PartID) AS PartID
	,CONVERT(BIGINT, PINV.WarehouseID) AS WarehouseID
	,CONVERT(BIGINT, PINV.PurchaseOrderNumID) AS PurchaseOrderNumID
	,CONVERT(BIGINT, PORD.[CurrencyID]) AS CurrencyID
	,CONVERT(BIGINT, PINV.[PurchaseInvoiceDateID]) AS PurchaseInvoiceDateID
	,PINV.Company
	,PINV.PurchaseOrderNum
	,PINV.PurchaseOrderLine
	,PORD.PurchaseOrderType
	,PINV.PurchaseInvoiceNum
	,PINV.PurchaseInvoiceLine
	,PINV.PurchaseInvoiceType
	,CASE WHEN PINV.PurchaseInvoiceDate = '' OR PINV.PurchaseInvoiceDate IS NULL THEN '1900-01-01' ELSE  PINV.PurchaseInvoiceDate END AS PurchaseInvoiceDate
	,CASE WHEN PINV.ActualDelivDate = '' OR PINV.ActualDelivDate IS NULL THEN '1900-01-01' ELSE  PINV.ActualDelivDate END AS ActualDelivDate
	,PINV.SupplierNum
	,PINV.PartNum
	,PINV.PurchaseInvoiceQty
	,PINV.UoM
	,PINV.UnitPrice
	,PINV.DiscountPercent
	,PINV.DiscountAmount
	,PINV.TotalMiscChrg
	,PINV.VATAmount
	,PINV.Currency
	,PINV.ExchangeRate
	,PINV.CreditMemo
	,PORD.PurchaserName
	,PINV.WarehouseCode
	,PINV.PurchaseChannel
	,PINV.Comment
	,PINV.PIRes1
	,PINV.PIRes2
	,PINV.PIRes3
	,PINV.PIRes4
	,PINV.PurchaseInvoiceAmountOC
	,CASE WHEN PORD.PurchaseOrderDate = '' OR PORD.PurchaseOrderDate IS NULL THEN '1900-01-01' ELSE  PORD.PurchaseOrderDate END AS PurchaseOrderDate
	,CASE WHEN PORD.ReqDelivDate = '' OR PORD.ReqDelivDate IS NULL THEN '1900-01-01' ELSE  PORD.ReqDelivDate END AS ReqDelivDate
	,CASE WHEN PORD.OrgReqDelivDate = '' OR PORD.OrgReqDelivDate IS NULL THEN '1900-01-01' ELSE  PORD.OrgReqDelivDate END AS OrgReqDelivDate
	,CASE WHEN PORD.CommittedDelivDate = '' OR PORD.CommittedDelivDate IS NULL THEN '1900-01-01' ELSE  PORD.CommittedDelivDate END AS CommittedDelivDate
	,CASE WHEN PORD.OrgCommittedDelivDate = '' OR PORD.OrgCommittedDelivDate IS NULL THEN '1900-01-01' ELSE  PORD.OrgCommittedDelivDate END AS OrgCommittedDelivDate
	,CASE WHEN PLED.PurchaseDueDate = '' OR PLED.PurchaseDueDate IS NULL THEN '1900-01-01' ELSE PLED.PurchaseDueDate END AS DueDate
	,CASE WHEN PLED.PurchaseLastPaymentDate = '' OR PLED.PurchaseLastPaymentDate IS NULL  THEN '1900-01-01' ELSE PLED.PurchaseLastPaymentDate END AS PaymentDate
	,CASE WHEN PLED.PurchaseLastPaymentDate = '1900-01-01' THEN 'Not Paid' WHEN PLED.PurchaseLastPaymentDate > '1900-01-01' THEN 'Paid'END AS InvoiceStatus FROM dw.PurchaseInvoice AS PINV
LEFT JOIN (
	SELECT PurchaseOrderCode --, PurchaseOrderLine --added PurchaseOrderLine for that aggregate at line level, not at order level by DZ 2023-06-27
		,MAX(PurchaseOrderDate) AS PurchaseOrderDate
		,MAX(ReqDelivDate) AS ReqDelivDate
		,MAX(OrgReqDelivDate) AS OrgReqDelivDate
		,MAX(CommittedDelivDate) AS CommittedDelivDate
		,MAX(PurchaseOrderType) AS PurchaseOrderType
		,MAX([CurrencyID]) AS CurrencyID
		,MAX(PurchaserName) AS PurchaserName
		,max(OrgCommittedDelivDate) as OrgCommittedDelivDate
	FROM dw.PurchaseOrder
	GROUP BY PurchaseOrderCode --, PurchaseOrderLine  --added PurchaseOrderLine for that aggregate at line level, not at order level by DZ 2023-06-27
	) AS PORD ON PINV.PurchaseOrderCode = PORD.PurchaseOrderCode --Added group by statement to protect against duplicate from join /SM 2021-09-23
LEFT JOIN dw.PurchaseLedger AS PLED ON PINV.PurchaseLedgerID = PLED.PurchaseLedgerID
WHERE PINV.is_deleted != 1 or PINV.is_deleted is null
	/*GROUP BY
	PINV.[PurchaseInvoiceID], PINV.PurchaseOrderNumID, PINV.CompanyID, PINV.SupplierID, PINV.PartID, PINV.Company, PINV.WarehouseID, PINV.PurchaseOrderNum, PINV.PurchaseOrderLine, PINV.PurchaseOrderType, PINV.PurchaseInvoiceNum, PINV.PurchaseInvoiceLine, 
	PINV.PurchaseInvoiceType, PINV.PurchaseInvoiceDate, PINV.ActualDelivDate, PINV.SupplierNum, PINV.PartNum, PINV.PurchaseInvoiceQty, PINV.UoM, PINV.UnitPrice, PINV.DiscountPercent, 
	PINV.DiscountAmount, PINV.TotalMiscChrg, PINV.VATAmount, PINV.Currency, PINV.ExchangeRate, PINV.CreditMemo, PINV.PurchaserName, PINV.WarehouseCode, PINV.PurchaseChannel, 
	PINV.PurchaseInvoiceDateID, PORD.PurchaseOrderType, PORD.ReqDelivDate, PORD.OrgReqDelivDate, PORD.CommittedDelivDate, PORD.PurchaseOrderDate, PORD.CurrencyID, PLED.DueDate, PLED.LastPaymentDate */
GO
PRINT N'Creating [dm].[DimCustomerAgreement]'
GO
CREATE VIEW [dm].[DimCustomerAgreement] AS

----------------------------------- Customer Agreements File --------------------------------------
With DimCustomerAgreement AS 
(SELECT 
--	[StockControlID]
    CONVERT(bigint, [CompanyID]) AS CompanyID
    ,CONVERT(bigint, [CustomerID]) AS CustomerID
    ,CONVERT(bigint, [PartID]) AS PartID
	,CONVERT(bigint, [CurrencyID]) AS CurrencyID
	,Company
	,[CustomerNum]
    ,[PartNum]
	,[AgreementCode]
	,[AgreementDescription]
	,[DiscountPercent]
    ,[UnitPrice]
	,[AgreementQty]
	,[Currency]
	,[DelivTime]
	,[AgreementStart]
	,[AgreementEnd]
	,[CustomerTerms]
	,[FulfilledQty]
	,[RemainingQty]
	,[UoM]
    ,[PartitionKey]
FROM 
	[dw].[CustomerAgreement]
),
------------------------------------------- Retrieveing latest Exchangerate for each Currency --------------------------------------------
-- All distinct rates per company and date
ExchangeRateTable as
(select distinct 
	Company,
	Currency, 
	ExchangeRate, 
	PurchaseInvoiceDate
from dm.FactPurchaseInvoice
group by Company, Currency, ExchangeRate, PurchaseInvoiceDate),

-- All currencies and there latest appearence
LatestCurrencyTable as
(select distinct 
	Company,
	Currency,  
	MAX(PurchaseInvoiceDate) as "InvoiceDate"
from dm.FactPurchaseInvoice
group by Company, Currency),

-- Mapping the exchangerates on the latest appearence
LatestCurrencyRateTable as
(Select 
	
	LatestCurrencyTable.Company, LatestCurrencyTable.Currency, LatestCurrencyTable.InvoiceDate, ExchangeRate
from LatestCurrencyTable 
	Right Outer Join ExchangeRateTable 
		on LatestCurrencyTable.Company = ExchangeRateTable.Company 
		and LatestCurrencyTable.Currency = ExchangeRateTable.Currency
		and LatestCurrencyTable.InvoiceDate = ExchangeRateTable.PurchaseInvoiceDate) select 
		DimCustomerAgreement.AgreementCode
		,DimCustomerAgreement.AgreementDescription
		,DimCustomerAgreement.AgreementEnd
		,DimCustomerAgreement.AgreementQty
		,DimCustomerAgreement.AgreementStart
		,DimCustomerAgreement.Company
		,DimCustomerAgreement.CompanyID
		,DimCustomerAgreement.Currency
		,DimCustomerAgreement.CurrencyID
		,DimCustomerAgreement.CustomerID
		,DimCustomerAgreement.CustomerNum
		,DimCustomerAgreement.CustomerTerms
		,DimCustomerAgreement.DelivTime
		,DimCustomerAgreement.DiscountPercent
		,DimCustomerAgreement.FulfilledQty
		,DimCustomerAgreement.PartID
		,DimCustomerAgreement.PartitionKey
		,DimCustomerAgreement.PartNum
		,DimCustomerAgreement.RemainingQty
		,DimCustomerAgreement.UnitPrice
		,DimCustomerAgreement.UoM
		
		, AVG(ExchangeRate) as ExchangeRate from DimCustomerAgreement
		Left Join LatestCurrencyRateTable 
		on LatestCurrencyRateTable.Company = DimCustomerAgreement.Company 
		and LatestCurrencyRateTable.Currency = DimCustomerAgreement.Currency
		GROUP BY CompanyID, CustomerID, PartID, CurrencyID, DimCustomerAgreement.Company, [CustomerNum], [PartNum], [AgreementCode], [AgreementDescription], [DiscountPercent], [UnitPrice], [AgreementQty], DimCustomerAgreement.[Currency], [DelivTime], [AgreementStart], [AgreementEnd], [CustomerTerms], [FulfilledQty], [RemainingQty], [UoM], [PartitionKey]
GO
PRINT N'Creating [dm_IN].[dimCustomerAgreement]'
GO

CREATE VIEW [dm_IN].[dimCustomerAgreement] AS
SELECT ca.[CompanyID]
,ca.[CustomerID]
,ca.[PartID]
,ca.[CurrencyID]
,ca.[Company]
,ca.[CustomerNum]
,ca.[PartNum]
,ca.[AgreementCode]
,ca.[AgreementDescription]
,ca.[DiscountPercent]
,ca.[UnitPrice]
,ca.[AgreementQty]
,ca.[Currency]
,ca.[DelivTime]
,ca.[AgreementStart]
,ca.[AgreementEnd]
,ca.[CustomerTerms]
,ca.[FulfilledQty]
,ca.[RemainingQty]
,ca.[UoM]
,ca.[PartitionKey]
,ca.[ExchangeRate]
FROM [dm].[DimCustomerAgreement] ca
LEFT JOIN dbo.Company com ON ca.Company = com.Company
WHERE com.BusinessArea = 'Industrial Solutions' AND com.[Status] = 'Active'


--WHERE [Company] in ('AFISCM', 'CDKCERT', 'CEECERT', 'CFICERT', 'CLTCERT', 'CLVCERT', 'CSECERT', 'CUKCERT', 'CNOEHAU', 'CNOCERT', 'CERPL', 'CyESA', 'HFIHAKL', 'TRACLEV',
--'MENBE14','MENNL01','MENNL02','MENNL03','MENNL04','MENNL07','MENNL11')
GO
PRINT N'Creating [stage].[FOR_FR_Warehouse]'
GO
CREATE TABLE [stage].[FOR_FR_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseID] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL,
[WarehouseDistrict] [nvarchar] (50) NULL,
[WarehouseAddress] [nvarchar] (100) NULL,
[WarehouseDescription] [nvarchar] (max) NULL,
[WarehouseType] [nvarchar] (50) NULL,
[WarehouseCountry] [nvarchar] (50) NULL,
[Site] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vFOR_FR_Warehouse]'
GO



CREATE VIEW [stage].[vFOR_FR_Warehouse] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', Upper(CONCAT([Company], '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey
	,[Company]
	,TRIM([WarehouseCode]) AS [WarehouseCode]
	,[WarehouseName]
	,[WarehouseDistrict]
	,[WarehouseAddress]
	,[WarehouseDescription]
	,[WarehouseType]
	,[WarehouseCountry]
	,'' AS [WarehouseSite]

FROM [stage].[FOR_FR_Warehouse]
where TRIM(WarehouseName) <> 'Ancien Roumanie ne plus utiliser' -- Temporary added to avoid a duplicate
GO
PRINT N'Creating [dw].[CurrencyRates]'
GO
CREATE TABLE [dw].[CurrencyRates]
(
[period] [nvarchar] (50) NULL,
[actuality] [nvarchar] (50) NULL,
[currency_code] [nvarchar] (50) NULL,
[currency_type] [nvarchar] (50) NULL,
[unit] [decimal] (18, 6) NULL,
[currency_rate] [decimal] (18, 6) NULL
)
GO
PRINT N'Creating [dm].[CurrencyRates_plusUSD]'
GO
CREATE VIEW [dm].[CurrencyRates_plusUSD] AS

WITH distinctEUR AS
(
SELECT distinct [period]
      , [currency_code]
      , CONVERT(decimal(18,4), [currency_rate]) AS currency_rate_EUR
FROM [dw].[CurrencyRates]
WHERE currency_code = 'EUR'

),

distinctUSD AS
(
SELECT distinct [period]
      , [currency_code]
      , CONVERT(decimal(18,4), [currency_rate]) AS currency_rate_USD
FROM [dw].[CurrencyRates]
WHERE currency_code = 'USD'

),

AllCurrencies AS 
(
SELECT 
 period
,actuality
,currency_code
,currency_type
,unit
,currency_rate
FROM [dw].[CurrencyRates]),

EURperRow AS
(
SELECT 
	 AllCurrencies.period
	,AllCurrencies.actuality
	,AllCurrencies.currency_code
	,AllCurrencies.currency_type
	,AllCurrencies.unit
	,AllCurrencies.currency_rate
	, CONVERT(decimal(18,4), AllCurrencies.currency_rate/distinctEUR.currency_rate_EUR) AS currency_rate_eur 
	, CONVERT(decimal(18,4), AllCurrencies.currency_rate/distinctUSD.currency_rate_USD) AS currency_rate_USD 
FROM AllCurrencies 
	right outer join distinctEUR on AllCurrencies.[period] = distinctEUR.[period]
	right outer join distinctUSD on AllCurrencies.[period] = distinctUSD.[period]
)

SELECT 
period
,actuality
,currency_code
,unit
,currency_rate
,currency_rate_eur
,currency_rate_USD
FROM EURperRow
where [period] != '2309' -- temporarily, not know why there is a such 2309, shall investigate
GROUP BY [period], [currency_code], [currency_rate], actuality, currency_type, unit, currency_rate_eur, currency_rate_USD -- added because of the source gives duplication each code, not know why yet, shall investigate
GO
PRINT N'Creating [stage].[AXL_SF_Customer]'
GO
CREATE TABLE [stage].[AXL_SF_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[MainCustomerName] [nvarchar] (100) NULL,
[CustomerName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[AddressLine] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (20) NULL,
[TelephoneNumber2] [nvarchar] (20) NULL,
[Email] [nvarchar] (100) NULL,
[City] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[Division] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (50) NULL,
[CustomerIndustry] [nvarchar] (50) NULL,
[CustomerSubIndustry] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNo] [nvarchar] (50) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[CustomerABC] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[SalesPersonResponsible] [nvarchar] (50) NULL,
[CustomerType] [nvarchar] (50) NULL,
[Res1] [nvarchar] (50) NULL,
[Res2] [nvarchar] (50) NULL,
[Res3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXL_SF_Customer]'
GO


CREATE VIEW [stage].[vAXL_SF_Customer] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustomerNum))) )) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,UPPER(CONCAT([Company], '#', TRIM([CustomerNum]))) AS CustomerCode
	,PartitionKey

	,UPPER(Company) AS Company
	,UPPER(TRIM(CustomerNum)) AS [CustomerNum]
	,TRIM(MainCustomerName) AS MainCustomerName
	,TRIM(CustomerName) AS  [CustomerName]
	,TRIM([AddressLine1]) AS [AddressLine1]
	,TRIM([AddressLine2]) AS [AddressLine2]
	,TRIM([AddressLine3]) AS [AddressLine3]
	,TRIM([TelephoneNumber1]) AS [TelephoneNum1]
	,TRIM([TelephoneNumber2]) AS [TelephoneNum2]
	,TRIM([Email]) AS [Email]
	,TRIM([ZipCode]) AS [ZipCode]
	,TRIM([City]) AS [City]
	,TRIM([State]) AS [State]
	,TRIM([District]) AS [SalesDistrict]
	,TRIM(con.CountryName) AS CountryName
	,TRIM([ISOAlpha2Code]) AS [CountryCode]
	,TRIM([Division]) AS [Division]
	,TRIM([CustomerIndustry]) AS [CustomerIndustry]
	,TRIM([CustomerSubIndustry]) AS [CustomerSubIndustry]
	,TRIM([AddressLine3]) AS [AddressLine]
	,CONCAT(TRIM(con.CountryName), + ',  ' + TRIM([City]), + ',  ' + TRIM([ZipCode]), + ',  ' + TRIM(addressline3)) AS [FullAddressLine]
	,TRIM(CustomerGroup) AS [CustomerGroup]
	,TRIM(CustomerGroup) AS [CustomerSubGroup]
	,TRIM([SalesRepCode]) AS [SalesPersonCode]
	,TRIM(SalesPersonName) AS [SalesPersonName]
	,TRIM([SalesPersonResponsible]) AS [SalesPersonResponsible]
	,TRIM([VATRegNo]) AS [VATNum]
	,TRIM([AccountString]) AS [AccountNum]
	,TRIM([InternalExternal]) AS [InternalExternal]
	,TRIM([CustomerABC]) AS [CustomerScore]
	,TRIM([CustomerType]) AS [CustomerType]
FROM [stage].[AXL_SF_Customer] com
	LEFT JOIN dbo.Country con ON com.CountryName = con.[ISOAlpha2Code]

--GROUP BY
--	PartitionKey, Company, CustomerNum, CustomerName, MainCustomerName, [AddressLine1], [AddressLine2], [AddressLine3], [TelephoneNumber1], [TelephoneNumber2], [Email], [ZipCode], [City], [State], [District], [CountryName], [Division], [CustomerIndustry], [CustomerSubIndustry], CustomerGroup, [SalesRepCode], SalesPersonName, [SalesPersonResponsible], [VATRegNo], [AccountString], [InternalExternal], [CustomerABC], [CustomerType]

--	Stagetablename in ('AXL_AU_Customer', 'AXL_DC_Customer', 'AXL_HU_Customer', 'AXL_IE_Customer', 'AXL_PL_Customer', 'AXL_PT_Customer', 'AXL_UK_Customer')
GO
PRINT N'Creating [stage].[CER_SE_PurchaseInvoice]'
GO
CREATE TABLE [stage].[CER_SE_PurchaseInvoice]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[LineType] [nvarchar] (50) NULL,
[OrderDelivLineNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaserName] [nvarchar] (100) NULL,
[OrderType] [nvarchar] (50) NULL,
[PurchaseInvoiceLine] [nvarchar] (50) NULL,
[InvoiceType] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[PurchaseInvoiceQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CreditMemo] [nvarchar] (1) NULL,
[WarehouseCode] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_SE_PurchaseInvoice]'
GO

CREATE VIEW [stage].[vCER_SE_PurchaseInvoice] AS
--ADD TRIM() INTO SupplierID 23-01-23 VA // COMMENT EMPTY FIELDS
SELECT 
	--CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(UPPER(SupplierCode)), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(PurchaseOrderSubLine), '#', OrderDelivLineNum, '#', TRIM(InvoiceNum), '#',TRIM(UPPER([PartNum])), '#',PurchaserName, '#', WarehouseCode, '#', ActualDeliveryDate, '#', UnitPrice, '#', PurchaseShipQty, '#', DiscountAmount, '#', TotalMiscChrg, '#', ExchangeRate)))) AS PurchaseInvoiceID 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(OrderType), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(PurchaseOrderSubLine), '#', TRIM(InvoiceNum), '#', TRIM(PurchaseInvoiceLine), '#', TRIM([PartNum]), '#', TRIM(PurchaserName), '#', TRIM(WarehouseCode))))) AS PurchaseInvoiceID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(PurchaseOrderSubLine))))) AS PurchaseOrderID
	
	,UPPER(CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(PurchaseOrderSubLine), '#', TRIM(InvoiceNum))) AS PurchaseOrderCode
	,UPPER(CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(InvoiceNum))) AS PurchaseInvoiceCode --Redundant?

    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierCode))))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierCode))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(InvoiceNum))))) AS PurchaseLedgerID
	,CONVERT(int, replace(InvoiceDate, '-', '')) AS PurchaseInvoiceDateID --Redundant?
	,PartitionKey

	,UPPER(TRIM(Company)) AS Company
	,TRIM(PurchaseOrderNum) AS PurchaseOrderNum
	,TRIM(PurchaseOrderLine) AS PurchaseOrderLine
	,TRIM(PurchaseOrderSubLine) AS PurchaseOrderSubLine
	,(TRIM(OrderType)) AS PurchaseOrderType --MIN
	,TRIM(InvoiceNum) AS PurchaseInvoiceNum
	,TRIM(PurchaseInvoiceLine) AS PurchaseInvoiceLine
	,TRIM(InvoiceType) AS PurchaseInvoiceType
	,InvoiceDate AS PurchaseInvoiceDate
	,ActualDeliveryDate AS ActualDelivDate
	,TRIM(UPPER(SupplierCode)) AS SupplierNum
	,TRIM(UPPER([PartNum])) AS PartNum
	,PurchaseInvoiceQty --MAX
	--,'' AS UoM
	,UnitPrice
	,0 AS DiscountPercent
	,DiscountAmount
	,TotalMiscChrg
	,0 AS VATAmount
	,ExchangeRate
	,TRIM(CurrencyCode) AS Currency
	,TRIM(CreditMemo) AS CreditMemo
	,TRIM(PurchaserName) AS PurchaserName
	,TRIM(WarehouseCode) AS WarehouseCode
	--,'' AS PurchaseChannel
	--,'' AS Comment
	--,'' AS PIRes1
	--,'' AS PIRes2
	--,'' AS PIRes3
	,LineType
--	,TRIM(PurchaseOrderDelivLine) AS OrderDelivLineNum --

FROM stage.CER_SE_PurchaseInvoice

--GROUP BY
--	PartitionKey, Company, PurchaseOrderNum, InvoiceNum, SupplierCode, PartNum, PurchaserName, InvoiceLine, InvoiceType, InvoiceDate, ActualDeliveryDate, UnitPrice, DiscountAmount, TotalMiscChrg, CreditMemo, WarehouseCode, CurrencyCode, ExchangeRate, LineType, OrderDelivLineNum, PurchaseOrderLine , PurchaseOrderSubLine, PurchaseShipQty
GO
PRINT N'Creating [dm_PT].[dimPart]'
GO





CREATE VIEW [dm_PT].[dimPart] AS 
-- AS decided by Ian & Random Forest AB on the 7th May 2020, the data is spliting after data-warehouse for each Business Group
SELECT 

        pt.[PartID]
      ,pt.[CompanyID]
      ,pt.[Company]
      ,pt.[PartNum]
      ,pt.[PartName]
      ,pt.[Part]
      ,pt.[PartDescription]
      ,pt.[PartDescription2]
      ,pt.[PartDescription3]
      ,pt.[MainSupplier]
      ,pt.[AlternativeSupplier]
      ,pt.[ProductGroup]
      ,pt.[ProductGroup2]
      ,pt.[ProductGroup3]
      ,pt.[ProductGroup4]
      ,pt.[Brand]
      ,pt.[CommodityCode]
      ,pt.[PartReplacementNum]
      ,pt.[PartStatus]
      ,pt.[CountryOfOrigin]
      ,pt.[NetWeight]
      ,pt.[UoM]
      ,pt.[Material]
      ,pt.[ReOrderlevel]
      ,pt.[Barcode]
      ,pt.[PartResponsible]
      ,pt.[ProductID]
      ,pt.[PimID]
      ,pt.[PIM_Category1]
      ,pt.[PIM_Category2]
      ,pt.[PIM_Category3]
      ,pt.[PIM_Category4]
      ,pt.[PIM_Category5]
      ,pt.[PIM_Category6]
      ,pt.[PIM_Brand]
      ,pt.[PIM_Heading]
      ,pt.[PIM_Original_Description]
      ,pt.[PIM_LCName]
      ,pt.[ManufacturerID]
      ,pt.[StartDate]
      ,pt.[EndDate]
      ,pt.[PARes1]
      ,pt.[is_inferred]
      ,pt.[PartAge]
      ,pt.[PartActivity]
      ,pt.[StockMovement]
FROM [dm].[DimPart] as pt
/* alt.1  --this option takes too long time than alt.2 20 min vs 8,5min */
--LEFT JOIN dbo.Company com ON pt.Company = com.Company
--WHERE com.BusinessArea = 'Power Transmission Solutions' AND com.[Status] = 'Active'

/* alt.2 */
WHERE pt.[Company] in ('ACZARKOV', 'AcornUK', 'BSIBELL', 'JDKJENSS', 'MNLMAK', 'JNOJENSS', 'NORNO', 'JSEJENSS', 'SSWSE', 'NINSE', 'NomoSE', 'NomoDK', 'NomoFI', 'NomoNo', 'PASSEROT', 'SCOFI', 'SMKFI', 'SPRUITNL', 'GSUGB', 'SVESE')  

/*  The PT basket */
GO
PRINT N'Creating [stage].[MEN_NL_Warehouse]'
GO
CREATE TABLE [stage].[MEN_NL_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL,
[WarehouseDistrict] [nvarchar] (100) NULL,
[WarehouseAddress] [nvarchar] (100) NULL,
[WarehouseDescription] [nvarchar] (100) NULL,
[WarehouseType] [nvarchar] (50) NULL,
[WarehouseCountry] [nvarchar] (100) NULL,
[WarehouseSite] [nvarchar] (100) NULL,
[WarehouseKey] [nvarchar] (50) NULL,
[DW_TimeStamp] [date] NULL,
[WarehouseActive] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vMEN_NL_Warehouse]'
GO
CREATE VIEW [stage].[vMEN_NL_Warehouse] AS
WITH CTE AS (
SELECT	
		CASE WHEN Company = '14' THEN  CONCAT(N'MENBE',Company) 
			ELSE  CONCAT(N'MENNL',Company)  END AS CompanyCode		
	  ,[PartitionKey], [Company], [WarehouseCode], [WarehouseName], [WarehouseDistrict], [WarehouseAddress], [WarehouseDescription], [WarehouseType], [WarehouseCountry], [WarehouseSite], [WarehouseKey], [DW_TimeStamp], [WarehouseActive]
  FROM [stage].[MEN_NL_Warehouse]
)
SELECT  
--ADD TRIM() UPPER() INTCO WarehouseID 23-01-12 VA
	  --CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([CompanyCode],'#',UPPER([WarehouseCode])))) AS WarehouseID
	  CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(trim(Company),'#',TRIM([WarehouseCode])))))  AS WarehouseID
	  ,[PartitionKey]
      ,CompanyCode									AS Company
      ,UPPER([WarehouseCode])						AS WarehouseCode
      ,[WarehouseName]
      ,[WarehouseDistrict]
      ,[WarehouseAddress]
      ,[WarehouseDescription]
      ,[WarehouseType]
      ,[WarehouseCountry]
      ,[WarehouseSite]
  FROM CTE
GO
PRINT N'Creating [stage].[FOR_SE_SupplierAgreement]'
GO
CREATE TABLE [stage].[FOR_SE_SupplierAgreement]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[RecordType] [nvarchar] (50) NULL,
[RecordTypeDesc] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[DiscountPercent] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivTime] [nvarchar] (10) NULL,
[CurrencyCode] [nvarchar] (10) NULL,
[SupplierTerms] [nvarchar] (100) NULL,
[EffectiveDate] [date] NULL
)
GO
PRINT N'Creating [stage].[vFOR_SE_SupplierAgreement]'
GO
CREATE VIEW [stage].[vFOR_SE_SupplierAgreement] AS 
--ADD trim() into SupplierID 23-01-23 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([RecordType]), '#', TRIM([PartNum]), '#', TRIM([SupplierNum]),'#', [EffectiveDate] )))) AS SupplierAgreementID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum))))) AS SupplierID  
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierNum))))) AS SupplierID  
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([CurrencyCode])))) AS CurrencyID
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(SupplierNum) AS SupplierNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,[RecordType] AS AgreementCode
	,[RecordTypeDesc] AS AgreementDescription
	,[DiscountPercent]
	,MAX([UnitPrice]) AS [UnitPrice]
	,[OrderQty] AS AgreementQty
	,[CurrencyCode] AS Currency
	,MAX([DelivTime]) AS [DelivTime]
	--,'' AS AgreementStart
	--,'' AS AgreementEnd
	,[SupplierTerms]
	,0	AS FulfilledQty
	,0  AS RemainingQty
	--,''	AS UoM
	--,'' AS  SARes1
	--,'' AS  SARes2
	--,'' AS  SARes3
	,EffectiveDate AS [ValidFromDate]
	--,'' AS [ValidToDate]
FROM 
	[stage].[FOR_SE_SupplierAgreement]
WHERE SupplierNum <> '617' OR PartNum <> '110110014' OR RecordType <> 'SU' OR CurrencyCode <> 'SEK'
GROUP BY [PartitionKey], [Company], [RecordType], [RecordTypeDesc], PartNum, SupplierNum, [DiscountPercent], [OrderQty], [CurrencyCode],[SupplierTerms], [EffectiveDate]
--WHERE 
--	RecordType = 'D'
GO
PRINT N'Creating [dw].[FinanceBudget]'
GO
CREATE TABLE [dw].[FinanceBudget]
(
[BudgetID] [binary] (32) NOT NULL,
[CompanyID] [binary] (32) NOT NULL,
[AccountID] [binary] (32) NULL,
[CostUnitID] [binary] (32) NULL,
[CostBearerID] [binary] (32) NULL,
[PartitionKey] [nvarchar] (50) NULL,
[BudgetType] [nvarchar] (50) NULL,
[BudgetName] [nvarchar] (100) NULL,
[BudgetDescription] [nvarchar] (500) NULL,
[Company] [nvarchar] (8) NULL,
[BudgetPeriod] [nvarchar] (100) NULL,
[BudgetPeriodDate] [date] NULL,
[PeriodType] [nvarchar] (100) NULL,
[Currency] [nvarchar] (50) NULL,
[BudgetFinance] [decimal] (18, 4) NULL,
[CostBearerNum] [nvarchar] (50) NULL,
[CostUnitNum] [nvarchar] (50) NULL,
[AccountNum] [nvarchar] (50) NULL,
[AccountGroup] [nvarchar] (100) NULL,
[BRes1] [nvarchar] (100) NULL,
[BRes2] [nvarchar] (100) NULL,
[BRes3] [nvarchar] (100) NULL,
[AccountGroupNum] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[IsActiveRecord] [bit] NULL,
[ProjectNum] [nvarchar] (50) NULL,
[ProjectID] [binary] (32) NULL,
[is_deleted] [bit] NULL
)
GO
PRINT N'Creating primary key [PK__FinanceB__E38E79C42395773F] on [dw].[FinanceBudget]'
GO
ALTER TABLE [dw].[FinanceBudget] ADD CONSTRAINT [PK__FinanceB__E38E79C42395773F] PRIMARY KEY CLUSTERED ([BudgetID])
GO
PRINT N'Creating [dm].[FactFinanceBudget]'
GO




CREATE VIEW [dm].[FactFinanceBudget]	AS
SELECT 
	  CONVERT(bigint,[BudgetID]) AS [BudgetID]
      , CONVERT(bigint,[CompanyID]) AS [CompanyID]
	  , CONVERT(bigint,[AccountID]) AS [AccountID]
	  , CONVERT(bigint,[CostUnitID]) AS [CostUnitID]
	  , CONVERT(bigint,[CostBearerID]) AS [CostBearerID]
	  , CONVERT(bigint,[ProjectID]) AS [ProjectID] -- added 2023-03-22 SB
      ,[PartitionKey]
      ,[BudgetType]
      ,[BudgetName]
      ,[BudgetDescription]
      ,[Company]
      ,[BudgetPeriod]
      ,[BudgetPeriodDate]
      ,[PeriodType]
      ,[Currency]
      ,[BudgetFinance]
      ,[CostBearerNum]
      ,[CostUnitNum]
      ,[AccountNum]
      ,[AccountGroup]
	  ,[ProjectNum]
      ,[BRes1]
      ,[BRes2]
      ,[BRes3]
      ,[ExchangeRate]
      ,[IsActiveRecord]
  FROM [dw].[FinanceBudget]
GO
PRINT N'Creating [dm_IN].[fctFinanceBudget]'
GO


CREATE VIEW [dm_IN].[fctFinanceBudget]	AS

SELECT fb.[BudgetID]
,fb.[CompanyID]
,fb.[AccountID]
,fb.[CostUnitID]
,fb.[CostBearerID]
,fb.[ProjectID]
,fb.[PartitionKey]
,fb.[BudgetType]
,fb.[BudgetName]
,fb.[BudgetDescription]
,fb.[Company]
,fb.[BudgetPeriod]
,fb.[BudgetPeriodDate]
,fb.[PeriodType]
,fb.[Currency]
,fb.[BudgetFinance]
,fb.[CostBearerNum]
,fb.[CostUnitNum]
,fb.[AccountNum]
,fb.[AccountGroup]
,fb.[ProjectNum]
,fb.[BRes1]
,fb.[BRes2]
,fb.[BRes3]
,fb.[ExchangeRate]
,fb.[IsActiveRecord]
FROM [dm].[FactFinanceBudget] fb
LEFT JOIN dbo.Company com ON fb.Company = com.Company
WHERE com.BusinessArea = 'Industrial Solutions' AND com.[Status] = 'Active'

--WHERE Company IN ('CNOCERT')
GO
PRINT N'Creating [stage].[CER_NO_BC_SalesLedger]'
GO
CREATE TABLE [stage].[CER_NO_BC_SalesLedger]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceDate] [nvarchar] (50) NULL,
[DueDate] [nvarchar] (50) NULL,
[LastPaymentDate] [nvarchar] (50) NULL,
[systemCreatedAt] [nvarchar] (50) NULL,
[systemModifiedAt] [nvarchar] (50) NULL,
[amount] [nvarchar] (50) NULL,
[amountLCY] [nvarchar] (50) NULL,
[originalAmtLCY] [nvarchar] (50) NULL,
[documentType] [nvarchar] (50) NULL,
[open] [nvarchar] (50) NULL,
[remainingAmount] [nvarchar] (50) NULL,
[remainingAmtLCY] [nvarchar] (50) NULL,
[balAccountType] [nvarchar] (50) NULL,
[originalCurrencyFactor] [nvarchar] (50) NULL,
[adjustedCurrencyFactor] [nvarchar] (50) NULL,
[creditAmount] [nvarchar] (50) NULL,
[CreditAmountLCY] [nvarchar] (50) NULL,
[salespersonCode] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (12) NULL
)
GO
PRINT N'Creating [stage].[CER_NO_BC_SalesInvoice]'
GO
CREATE TABLE [stage].[CER_NO_BC_SalesInvoice]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [nvarchar] (50) NULL,
[ActualDeliveryDate] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[CustNum] [nvarchar] (60) NULL,
[OrderNum] [nvarchar] (60) NULL,
[OrderLine] [nvarchar] (30) NULL,
[InvoiceNum] [nvarchar] (40) NULL,
[InvoiceLine] [nvarchar] (30) NULL,
[PartNum] [nvarchar] (50) NULL,
[SalesInvoiceQty] [nvarchar] (30) NULL,
[UnitPrice] [nvarchar] (30) NULL,
[UnitCost] [nvarchar] (30) NULL,
[VAT] [nvarchar] (30) NULL,
[Currency] [nvarchar] (30) NULL,
[ExchangeRate] [nvarchar] (30) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[ReturnNum] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (200) NULL,
[systemCreatedAt] [nvarchar] (50) NULL,
[systemModifiedAt] [nvarchar] (50) NULL,
[Type] [varchar] (25) NULL,
[Department] [nvarchar] (40) NULL,
[dueDate] [date] NULL,
[DiscountAmount] [nvarchar] (40) NULL,
[WarehouseCodeLines] [nvarchar] (20) NULL,
[Cancelled] [nvarchar] (20) NULL
)
GO
PRINT N'Creating [stage].[vCER_NO_BC_SalesLedger]'
GO

CREATE VIEW [stage].[vCER_NO_BC_SalesLedger] AS 


with auxiliar_table as (
select InvoiceNum, sum(cast(VAT as decimal(9,2))) as VatAmount
from [stage].[CER_NO_BC_SalesInvoice] 
group by InvoiceNum
)

SELECT 
	CONVERT(binary(32), HASHBYTES('SHA2_256', CONCAT(Company, '#', CustNum, '#', ledg.InvoiceNum))) AS SalesLedgerID,
	CONVERT(binary(32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID,
	CONVERT(binary(32), HASHBYTES('SHA2_256', TRIM(Company))) AS CompanyID,
	CONVERT(binary(32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID,
	
	PartitionKey,
	Company,
	nullif(trim(CustNum),'') as CustomerNum,
	nullif(trim(ledg.InvoiceNum),'') as SalesInvoiceNum,
	cast(InvoiceDate as Date) as SalesInvoiceDate,
	cast(DueDate as Date) as SalesDueDate,
	case when cast(LastPaymentDate as Date) < '1900-01-01' or cast(LastPaymentDate as Date) IS null then cast('1900-01-01' AS date)
		 else  cast(LastPaymentDate as Date) 
		 end  as SalesLastPaymentDate,
	cast(amount AS decimal(18,4)) AS InvoiceAmount,
	cast(remainingAmount AS decimal(18,4)) AS RemainingInvoiceAmount,
	cast(amount AS decimal(18,4)) - cast(remainingAmount as decimal(18,4)) as PaidInvoiceAmount,
	cast(adjustedCurrencyFactor as decimal(18,8)) AS ExchangeRate,
	--'' AS Currency,
	isnull(cast(auxiliar_table.VatAmount AS decimal(18,4)),0) AS VATAmount,
	--'' AS VATCode,
	--'' AS PayToName,
	--'' AS PayToCity,
	--'' AS PayToContact,
	--'' AS PaymentTerms,
	--'' AS SLRes1,
	--'' AS SLRes2,
	--'' AS SLRes3
	--NULL			AS PaidInvoiceAmount,
	'1900-01-01' AS AccountingDate
	--NULL AS AgingPeriod					,
	--NULL AS AgingSort					,
	--NULL AS VATCodeDesc					,
	--NULL AS LinkToOriginalInvoice		
    --,systemCreatedAt
	--,systemModifiedAt
FROM 
	 stage.CER_NO_BC_SalesLedger AS ledg
	LEFT JOIN auxiliar_table
		ON ledg.InvoiceNum = auxiliar_table.InvoiceNum
GO
PRINT N'Creating [stage].[JEN_DK_PurchaseOrder]'
GO
CREATE TABLE [stage].[JEN_DK_PurchaseOrder]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [varchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[LineType] [nvarchar] (50) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[InvoiceSupplierCode] [nvarchar] (50) NULL,
[DelivCustCode] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[ItemType] [int] NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[OrderedQty] [decimal] (18, 4) NULL,
[ReceivedQty] [decimal] (18, 4) NULL,
[InvoicedQty] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[CommitedDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[ReqDelivDate] [date] NULL,
[DelivDate] [date] NULL,
[OrgReqDelivDate] [date] NULL,
[IsOrderClosed] [bit] NULL,
[PurchaserName] [nvarchar] (50) NULL,
[RecievingNumber] [nvarchar] (50) NULL,
[LeadTime] [nvarchar] (50) NULL,
[Comments] [nvarchar] (max) NULL,
[WarehouseCode] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vJEN_DK_PurchaseOrder]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vJEN_DK_PurchaseOrder] AS
--COMMENT EMPTY FIELDS // ADD UPPER() TRIM() INTO CustomerID,PartID,WarehouseID 22-12-29 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderType), '#', TRIM(PartNum), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', (IsOrderClosed))))) AS PurchaseOrderID --, '#', UnitPrice, '#', TRIM(WarehouseCode), '#', TRIM(SupplierCode), '#', TRIM(LineType), '#', TRIM(DelivCustCode), '#', OrderDate, '#', PurchaserName, '#', OrderedQty, '#', TRIM(PurchaseOrderSubLine), '#', TRIM(InvoiceNum)
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', '')))) AS PurchaseInvoiceID --TRIM(InvoiceNum)
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company ,'#', TRIM(DelivCustCode))))) AS CustomerID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',(CONCAT(Company,'#',TRIM(DelivCustCode))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierCode))))) AS SupplierID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',(CONCAT(Company,'#',TRIM(SupplierCode))))) AS SupplierID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',(CONCAT(Company,'#',TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum))))) AS PartID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',(CONCAT(Company,'#',TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([CurrencyCode])))) AS CurrencyID
	,UPPER(CONCAT(Company,'#',SupplierCode,'#',PurchaseOrderNum)) AS PurchaseOrderCode
	,PartitionKey AS PartitionKey

	,TRIM(UPPER([Company])) AS Company
	,TRIM(PurchaseOrderNum) AS PurchaseOrderNum
	,TRIM(PurchaseOrderLine) AS PurchaseOrderLine
	,TRIM(PurchaseOrderSubLine) AS PurchaseOrderSubLine
	,TRIM(OrderType) AS PurchaseOrderType
	,'' AS PurchaseInvoiceNum --TRIM(InvoiceNum)
	,OrderDate AS PurchaseOrderDate
	,MAX(OrgReqDelivDate) AS OrgReqDelivDate
	,MAX(DelivDate) AS DelivDate
	,MAX(ReqDelivDate) AS ReqDelivDate
	,MAX(CommitedDelivDate) AS CommittedDelivDate
	,MAX(ActualDelivDate) AS ActualDelivDate
	,TRIM(PartNum) AS PartNum
	,TRIM(SupplierCode) AS SupplierNum
	,TRIM(DelivCustCode) AS DelivCustomerNum
	,SUM(OrderedQty) AS PurchaseOrderQty
	,SUM(ReceivedQty) AS ReceiveQty
	,SUM(InvoicedQty) AS InvoiceQty
--	,IIF(AVG(ReceivedQty) < AVG(OrderedQty), 'Open', 'Closed') AS PurchaseOrderStatus
	,IIF(IsOrderClosed = '1', 'Closed', 'Open') AS PurchaseOrderStatus
	,IsOrderClosed AS IsClosed
	--,'' SupplierPartNum
	--,'' AS [SupplierInvoiceNum]
	--,'' AS PartStatus
	--,0 AS MinOrderQty
	--,'' AS UoM
	--,0 AS DiscountAmount
	--,0 AS LandedCost
	,AVG(UnitPrice) AS UnitPrice
	,AVG(IIF(UnitPrice*OrderedQty*ExchangeRate = 0, 0, 100*DiscountAmount/(UnitPrice*OrderedQty*ExchangeRate))) AS DiscountPercent --was DiscountPercent -- changed 20230227 /DZ
	,SUM(DiscountAmount) AS DiscountAmount --was UnitPrice*OrderedQty*DiscountPercent/100  -- changed 20230227 /DZ
	,SUM(TotalMiscChrg) AS TotalMiscChrg
	,AVG(ExchangeRate) AS ExchangeRate
	,CASE WHEN CurrencyCode = '15' THEN 'EUR' WHEN CurrencyCode = '2' THEN 'USD' ELSE CurrencyCode END AS Currency
	,TRIM(PurchaserName) AS PurchaserName
	,TRIM(WarehouseCode) AS WarehouseCode
	,TRIM(RecievingNumber) AS ReceivingNum
	,IIF(LeadTime = 'na', NULL, Leadtime) AS DelivTime
	,TRIM(Comments) AS Comments
	--,'' AS PurchaseChannel
	--,'' Documents
	--,'' AS PORes1
	--,'' AS PORes2
	--,'' AS PORes3
	,CASE WHEN CONVERT(NVARCHAR(50),TRIM([LineType])) like '0' THEN 'Stock Item Line' WHEN CONVERT(NVARCHAR(50),TRIM([LineType])) like '1' THEN 'Non Stock Item Line' ELSE NULL END AS [LineType]
	,CONVERT(NVARCHAR(50),ItemType) AS ItemType
	--,'' AS DaysSincePOrder
	--,POHead.PHRes1 AS PHRes1
	--,POHead.PHRes2 AS PHRes2
	--,POHead.PHRes3 AS PHRes3
FROM 
	[stage].[JEN_DK_PurchaseOrder]
	
GROUP BY PartitionKey, Company, PurchaseOrderNum, PurchaseOrderLine, PurchaseOrderSubLine, SupplierCode, DelivCustCode, LineType, PartNum, OrderType, CurrencyCode, ItemType, OrderDate, PurchaserName, RecievingNumber, LeadTime, Comments, WarehouseCode, IsOrderClosed
	--PartitionKey, Company, PurchaseOrderNum, PurchaseOrderLine, PurchaseOrderSubLine, SupplierCode, DelivCustCode, LineType, InvoiceNum, PartNum, OrderType, UnitPrice, DiscountPercent, OrderedQty, ReceivedQty, InvoicedQty, TotalMiscChrg, ExchangeRate, CurrencyCode, ItemType, OrderDate, OrgReqDelivDate, CommitedDelivDate, ActualDelivDate, DelivDate, ReqDelivDate, PurchaserName, RecievingNumber, LeadTime, Comments, WarehouseCode
GO
PRINT N'Creating [stage].[FOR_SE_PurchaseInvoice]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[FOR_SE_PurchaseInvoice]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[LineType] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaserName] [nvarchar] (100) NULL,
[OrderType] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[InvoiceType] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[PurchaseShipQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[LastPaymentNum] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vFOR_SE_PurchaseInvoice]'
GO
CREATE VIEW [stage].[vFOR_SE_PurchaseInvoice] AS
--COMMENT EMPTY FIELDS 
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#'
		,TRIM(PurchaseOrderSubLine), '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine))))) AS PurchaseInvoiceID 
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(InvoiceNum), '#', TRIM(InvoiceLine), '#', PartNum)) AS PurchaseInvoiceCode
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum))) AS PurchaseOrderNumCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(InvoiceNum))))) AS PurchaseOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierCode))))) AS SupplierID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT(int, replace(InvoiceDate,'-','')) AS PurchaseInvoiceDateID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierCode), '#', TRIM(InvoiceNum), '#', TRIM(PurchaseOrderNum), '#', TRIM(LastPaymentNum))))) AS PurchaseLedgerID --match PurchaseLedgerID in [vSCM_FI_PurchaseLedger]
	,UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierCode), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(PurchaseOrderSubLine) )) AS PurchaseOrderCode
	,PartitionKey

	,UPPER(TRIM(Company)) AS Company
	,UPPER(TRIM(SupplierCode)) AS SupplierNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,UPPER(TRIM(PurchaseOrderNum)) AS PurchaseOrderNum
	,UPPER(TRIM(PurchaseOrderLine)) AS PurchaseOrderLine
	,UPPER(TRIM(PurchaseOrderSubLine)) AS PurchaseOrderSubLine
	,UPPER(TRIM(InvoiceNum)) AS PurchaseInvoiceNum
	,UPPER(TRIM(InvoiceLine)) AS PurchaseInvoiceLine
	,OrderType AS PurchaseOrderType
	,InvoiceType AS PurchaseInvoiceType
	,InvoiceDate AS PurchaseInvoiceDate
	,ActualDeliveryDate AS ActualDelivDate
	,PurchaseShipQty AS PurchaseInvoiceQty
	--,'' AS UoM
	,UnitPrice
	--,0 AS DiscountPercent
	,DiscountAmount
	,TotalMiscChrg
	--,0 AS VATAmount
	,ExchangeRate
	,CurrencyCode AS Currency
	,CreditMemo
	,PurchaserName
	,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
	--,'' AS PurchaseChannel
	--,'' AS Comment
	--,'' AS PIRes1
	--,'' AS PIRes2
	--,'' AS PIRes3
	,LineType
	--,'' AS OrderDelivLineNum
FROM stage.FOR_SE_PurchaseInvoice

GROUP BY
	PartitionKey, Company, PurchaseOrderNum, InvoiceNum, SupplierCode, PartNum, PurchaseOrderLine, PurchaseOrderSubLine, PurchaseShipQty, UnitPrice, WarehouseCode,PurchaserName, InvoiceLine, InvoiceType, InvoiceDate, ActualDeliveryDate, TotalMiscChrg, CreditMemo, OrderType,DiscountAmount,CurrencyCode,ExchangeRate,LineType, LastPaymentNum --, OrderType, [Site], OrderDelivLineNum, , DiscountPercent, PurchaserName, InvoiceLine, InvoiceType, InvoiceDate, ActualDeliveryDate, TotalMiscChrg, CreditMemo
GO
PRINT N'Creating [dm_TS].[dimPart]'
GO








CREATE VIEW [dm_TS].[dimPart] AS 

SELECT 
        [PartID]
      ,[CompanyID]
      ,[Company]
      ,[PartNum]
      ,[PartName]
      ,[Part]
      ,[PartDescription]
      ,[PartDescription2]
      ,[PartDescription3]
      ,[MainSupplier]
      ,[AlternativeSupplier]
      ,[ProductGroup]
      ,[ProductGroup2]
      ,[ProductGroup3]
      ,[ProductGroup4]
      ,[Brand]
      ,[CommodityCode]
      ,[PartReplacementNum]
      ,[PartStatus]
      ,[CountryOfOrigin]
      ,[NetWeight]
      ,[UoM]
      ,[Material]
      ,[ReOrderlevel]
      ,[Barcode]
      ,[PartResponsible]
      ,[ProductID]
      ,[PimID]
      ,[PIM_Category1]
      ,[PIM_Category2]
      ,[PIM_Category3]
      ,[PIM_Category4]
      ,[PIM_Category5]
      ,[PIM_Category6]
      ,[PIM_Brand]
      ,[PIM_Heading]
      ,[PIM_Original_Description]
      ,[PIM_LCName]
      ,[ManufacturerID]
      ,[StartDate]
      ,[EndDate]
      ,[PARes1]
      ,[is_inferred]
      ,[PartAge]
      ,[PartActivity]
      ,[StockMovement]
FROM [dm].[DimPart] /*temp putting (CERPL) Certex PL here such that they see the data in same company*/
WHERE [Company] in (
'FESFORA'
,'FSEFORA'
, 'FFRFORA'
, 'FORPL'
, 'CERPL'
, 'FFRGPI'
, 'FFRLEX'
, 'IFIWIDN'
, 'IEEWIDN'
, 'FITMT'
, 'EETMT'
, 'ABKSE'
, 'ROROSE'
,'STESE'
,'CERBG'
,'FORBG'
)
GO
PRINT N'Creating [stage].[JEN_DK_SOLine]'
GO
CREATE TABLE [stage].[JEN_DK_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderRel] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (100) NULL,
[PartNum] [nvarchar] (50) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Indexkey] [nvarchar] (50) NULL,
[Site] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[UnitPriceOCY] [decimal] (18, 4) NULL,
[UnitCostOCY] [decimal] (18, 4) NULL,
[DiscountAmountOCY] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vJEN_DK_SOLine]'
GO


CREATE VIEW [stage].[vJEN_DK_SOLine] AS
--COMMENT EMPTY FIELD // ADD TRIM() INTO CustomerID,WarehouseID,PartID 22-12-29 VA
--PARTNUM / CUSTOMERNUM 23-02-17 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company,'#',TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(PartNum), '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine), '#', Indexkey)))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company,'#',TRIM(OrderNum),'#',TRIM(OrderLine),'#',TRIM(InvoiceNum))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company,'#',TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ) , '#', TRIM(InvoiceNum))))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company),'#', TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company,'#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ) )))) AS CustomerID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID 
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) ))))) AS PartID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WareHouseID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(WarehouseCode))))) AS WareHouseID
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(InvoiceNum))) AS SalesOrderCode
	,UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine))) AS SalesInvoiceCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT( Company,'#','') )))	AS ProjectID
	,CONVERT(int, replace(convert(date, InvoiceDate), '-', '')) AS SalesInvoiceDateID 
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(SalesPerson) AS SalesPersonName
	,TRIM(CustNum) AS CustomerNum
	,TRIM(PartNum) AS PartNum
	,CASE WHEN TRIM(OrderNum) = '0' THEN 'PrimaryPart' ELSE 'SubPart' END  AS PartType
	,TRIM(OrderNum) AS SalesOrderNum
	,TRIM(OrderLine)		AS SalesOrderLine
	,TRIM(OrderSubLine)	AS SalesOrderSubLine
	,TRIM(OrderType) AS SalesOrderType
	,TRIM(InvoiceNum)	AS SalesInvoiceNum
	,TRIM(InvoiceLine)	AS SalesInvoiceLine
	--,'' AS SalesInvoiceType
	,CASE WHEN InvoiceDate = '' THEN '1901-01-01' ELSE CONVERT(date, InvoiceDate) END AS SalesInvoiceDate
	,ActualDeliveryDate		AS ActualDelivDate
	--,'' AS UoM
	,SellingShipQty			AS SalesInvoiceQty
	,UnitPrice	
	,UnitCost
	--,NULL AS DiscountPercent
	,DiscountAmount
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	,TotalMiscChrg
	--,NULL AS VATAmount
	,[CurrencyCode] AS Currency
	,[ExchangeRate] AS ExchangeRate
	,CreditMemo
	--,'' AS SalesChannel
	--,'' AS Department
	,TRIM(WarehouseCode) AS WarehouseCode
	--,NULL AS DeliveryAddress
	--,'' AS CostBearerNum
	--,''AS CostUnitNum
	--,'' AS ReturnComment
	--,'' AS ReturnNum
	--,'' AS ProjectNum
	,IndexKey
	--,'' AS SIRes1
	--,'' AS SIRes2
	--,'' AS SIRes3

FROM stage.JEN_DK_SOLine

--GROUP BY
--	PartitionKey,Company,SalesPerson, CustNum, PartNum, OrderNum,OrderLine,OrderSubLine, OrderType,InvoiceNum,InvoiceLine, InvoiceDate,ActualDeliveryDate,SellingShipQty,UnitPrice ,UnitCost ,DiscountAmount,TotalMiscChrg,WarehouseCode, [CurrencyCode], [ExchangeRate], CreditMemo, Indexkey, OrderType
GO
PRINT N'Creating [stage].[CER_UK_SOLine]'
GO
CREATE TABLE [stage].[CER_UK_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [datetime] NULL,
[ActualDeliveryDate] [datetime] NULL,
[SalesPerson] [nvarchar] (100) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [varchar] (50) NULL,
[OrderLine] [varchar] (50) NULL,
[OrderSubLine] [varchar] (50) NULL,
[OrderRel] [varchar] (50) NULL,
[InvoiceNum] [varchar] (50) NULL,
[InvoiceLine] [varchar] (50) NULL,
[CreditMemo] [varchar] (50) NULL,
[PartNum] [varchar] (50) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (35) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[WarehouseCode] [varchar] (50) NULL,
[Indexkey] [varchar] (50) NULL,
[Site] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (max) NULL,
[ReturnNum] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_UK_SOLine]'
GO

CREATE VIEW [stage].[vCER_UK_SOLine] AS
--COMMENT EMPTY FIELD // ADD UPPER() TRIM() INTO CustomerID,PartID 2022-12-20 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company, '#', IndexKey))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', OrderNum, '#', OrderLine, '#', OrderSubLine))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', CustNum, '#', InvoiceNum))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum)))) AS SalesOrderNumID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM((PartNum)))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM((IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) )))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONCAT(Company, '#', OrderNum, '#', OrderLine, '#', OrderSubLine, '#', InvoiceNum) AS SalesOrderCode
	,CONVERT(int, replace(convert(date, InvoiceDate), '-', '')) AS SalesInvoiceDateID
	,CONCAT(Company, '#', InvoiceNum, '#', InvoiceLine) AS SalesInvoiceCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey

	,UPPER(TRIM(Company)) AS Company
	,TRIM(SalesPerson) AS SalesPersonName
	,UPPER(TRIM(CustNum)) AS CustomerNum
	,UPPER(TRIM(PartNum)) AS PartNum
	--,UPPER(TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum))) AS CustomerNum
	--,UPPER(TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum))) AS PartNum
	,IIF(OrderSubLine = '000000', 'Main', 'Sub' ) AS [PartType]
	,TRIM(OrderNum) AS [SalesOrderNum]
	,TRIM(OrderLine) AS [SalesOrderLine]
	,TRIM(OrderSubLine) AS [SalesOrderSubLine]
	,TRIM(OrderType) AS [SalesOrderType]
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,TRIM(InvoiceLine) AS [SalesInvoiceLine]
	,'' AS [SalesInvoiceType]
	,CONVERT(date, InvoiceDate) AS SalesInvoiceDate
	,ActualDeliveryDate AS [ActualDelivDate]
	,SellingShipQty AS [SalesInvoiceQty]
	--,'' AS UoM
	,UnitPrice
	,UnitCost
	,IIF((UnitPrice*SellingShipQty) <> 0, DiscountAmount/(UnitPrice*SellingShipQty), 0) AS [DiscountPercent]
	,DiscountAmount
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	,TotalMiscChrg
	--,NULL AS [VATAmount]
	,Currency
	,CONVERT(decimal (18,4), ExchangeRate) AS ExchangeRate
	,CreditMemo
	,CASE WHEN LEFT(OrderNum, 4) = '0006' THEN 'Webshop'
		WHEN SalesPerson = 'Blake Barlow' or SalesPerson = 'Ashley Grist' THEN  'RFQ'
--		WHEN SalesPerson = '????' THEN 'PDF'
		ELSE 'Normal Order Handling' END AS SalesChannel
	--,'' AS [Department]
	,TRIM(WarehouseCode) AS WarehouseCode
	--,NULL AS DeliveryAddress
	--,'' AS [CostBearerNum]
	--,'' AS [CostUnitNum]
	,[ReturnComment]
	,TRIM([ReturnNum]) AS [ReturnNum]
	--,'' AS [ProjectNum]
	, Indexkey
	--,'' AS SIRes1
	--,'' AS SIRes2
	--,'' AS SIRes3
FROM
	stage.CER_UK_SOLine
GROUP BY
	PartitionKey, Company, SalesPerson, CustNum, PartNum, OrderNum, OrderLine, OrderSubLine, OrderType, InvoiceNum, InvoiceLine, InvoiceDate, SellingShipQty, UnitPrice, UnitCost, DiscountAmount, TotalMiscChrg, WarehouseCode, CreditMemo, ActualDeliveryDate, ExchangeRate, Currency, ReturnComment, [ReturnNum], IndexKey
GO
PRINT N'Creating [dw].[GeneralLedger]'
GO
CREATE TABLE [dw].[GeneralLedger]
(
[GeneralLedgerID] [binary] (32) NOT NULL,
[AccountID] [binary] (32) NULL,
[CustomerID] [binary] (32) NULL,
[SupplierID] [binary] (32) NULL,
[CompanyID] [binary] (32) NOT NULL,
[ProjectID] [binary] (32) NULL,
[CostUnitID] [binary] (32) NULL,
[CostBearerID] [binary] (32) NULL,
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[AccountNum] [nvarchar] (50) NULL,
[CostUnitNum] [nvarchar] (50) NULL,
[CostBearerNum] [nvarchar] (50) NULL,
[JournalType] [nvarchar] (50) NULL,
[JournalDate] [date] NULL,
[JournalNum] [nvarchar] (50) NULL,
[JournalLine] [nvarchar] (50) NULL,
[AccountingDate] [date] NULL,
[Description] [nvarchar] (500) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[InvoiceAmount] [decimal] (18, 4) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[SalesInvoiceNum] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[SupplierInvoiceNum] [nvarchar] (50) NULL,
[LinkToOriginalInvoice] [nvarchar] (500) NULL,
[DeliveryCountry] [nvarchar] (100) NULL,
[TransactionNum] [nvarchar] (50) NULL,
[VATCode] [nvarchar] (50) NULL,
[VATCodeDesc] [nvarchar] (500) NULL,
[GLRes1] [nvarchar] (100) NULL,
[GLRes2] [nvarchar] (100) NULL,
[GLRes3] [nvarchar] (100) NULL,
[InvoiceAmountLC] [decimal] (18, 4) NULL,
[is_deleted] [bit] NULL,
[IndexKey] [nvarchar] (50) NULL,
[ProjectNum] [nvarchar] (50) NULL,
[TransactionAmount] [decimal] (18, 4) NULL,
[UserIDBooked] [nvarchar] (50) NULL,
[UserIDApproved] [nvarchar] (50) NULL,
[IsManual] [bit] NULL,
[CreatedTimeStamp] [datetime] NULL,
[ModifiedTimeStamp] [datetime] NULL,
[IsActiveRecord] [bit] NULL
)
GO
PRINT N'Creating primary key [PK_GeneralLedger] on [dw].[GeneralLedger]'
GO
ALTER TABLE [dw].[GeneralLedger] ADD CONSTRAINT [PK_GeneralLedger] PRIMARY KEY CLUSTERED ([GeneralLedgerID])
GO
PRINT N'Creating [dm].[FactGeneralLedger]'
GO








CREATE VIEW [dm].[FactGeneralLedger] AS 
--change the logic in this DM, because we need only the oldest/first open balance from the OPENBALANCE table and also we only pick the row from G/L account
--that goes from that date to the newest. VA 23-03-08 VA
WITH SE AS (
SELECT Company
,AccountingDate
,AccountNum
,ROW_NUMBER() OVER (
	PARTITION BY Company,AccountNum
	ORDER BY AccountingDate
   ) row_num
FROM [dw].[OpenBalance] 
)SELECT CONVERT(bigint, GL.[GeneralLedgerID]) AS [GeneralLedgerID]
      ,CONVERT(bigint, GL.[AccountID]) AS [AccountID]
      ,CONVERT(bigint, GL.[CustomerID]) AS [CustomerID]
      ,CONVERT(bigint, GL.[SupplierID]) AS [SupplierID]
      ,CONVERT(bigint, GL.[CompanyID]) AS [CompanyID]
      ,CONVERT(bigint, GL.[ProjectID]) AS [ProjectID]
      ,CONVERT(bigint, GL.[CostUnitID]) AS [CostUnitID]
      ,CONVERT(bigint, GL.[CostBearerID]) AS [CostBearerID]
      ,GL.[PartitionKey]
      ,GL.[Company]
      ,GL.[AccountNum]
      ,GL.[CostUnitNum]
      ,GL.[CostBearerNum]
      ,GL.[JournalType]
      ,GL.[JournalDate]
      ,GL.[JournalNum]
      ,GL.[JournalLine]
      ,GL.[AccountingDate]
      ,GL.[Description]
      ,GL.[Currency]
      ,GL.[ExchangeRate]
      ,GL.[InvoiceAmount]
	  ,GL.[InvoiceAmountLC]
      ,GL.[CustomerNum]
      ,GL.[SupplierNum]
      ,GL.[SalesInvoiceNum]
      ,GL.[PurchaseInvoiceNum]
      ,GL.[SupplierInvoiceNum]
      ,GL.[LinkToOriginalInvoice]
      ,GL.[DeliveryCountry]
      ,GL.[TransactionNum]
      ,GL.[VATCode]
      ,GL.[VATCodeDesc]
      ,GL.[GLRes1]
      ,GL.[GLRes2]
      ,GL.[GLRes3]
  FROM [dw].[GeneralLedger] AS GL --  -- was [fnc].
	LEFT JOIN  SE ON GL.Company = SE.Company and SE.row_num = 1 and GL.AccountNum = SE.AccountNum
  --WHERE  GL.AccountingDate >= SE.AccountingDate
  
  UNION ALL

  SELECT CONVERT(bigint, OB.OpenBalanceID) AS [GeneralLedgerID]
      ,CONVERT(bigint, OB.[AccountID]) AS [AccountID]
      ,CONVERT(bigint, HASHBYTES('SHA2_256',CONCAT(OB.Company, '#', ''))) AS [CustomerID]
      ,CONVERT(bigint, HASHBYTES('SHA2_256',CONCAT(OB.Company, '#', ''))) AS [SupplierID]
      ,CONVERT(bigint, OB.[CompanyID]) AS [CompanyID]
      ,CONVERT(bigint, OB.[ProjectID]) AS [ProjectID]
      ,CONVERT(bigint, OB.[CostUnitID]) AS [CostUnitID]
      ,CONVERT(bigint, OB.[CostBearerID]) AS [CostBearerID]
      ,OB.[PartitionKey]
      ,OB.[Company]
      ,OB.[AccountNum]
      ,OB.[CostUnitNum]
      ,OB.[CostBearerNum]
      ,'Opening Balance' as [JournalType]
      ,OB.[JournalDate]
      ,''	AS [JournalNum]
      ,''	AS	[JournalLine]
      ,OB.AccountingDate
      ,OB.[Description]
      ,OB.[Currency]
      ,OB.[ExchangeRate]
      ,OB.[OpeningBalance]	AS InvoiceAmount
	  ,OB.[OpeningBalance]	AS InvoiceAmountLC
      ,''	AS [CustomerNum]
      ,''	AS [SupplierNum]
      ,''	AS [SalesInvoiceNum]
      ,''	AS [PurchaseInvoiceNum]
      ,''	AS [SupplierInvoiceNum]
      ,''	AS [LinkToOriginalInvoice]
      ,''	AS [DeliveryCountry]
      ,''	AS [TransactionNum]
      ,''	AS [VATCode]
      ,''	AS [VATCodeDesc]
      ,OB.OBRes1 AS [GLRes1]
      ,OB.OBRes2 AS [GLRes2]
      ,OB.OBRes3 AS [GLRes3]
    FROM [dw].[OpenBalance] as OB  -- was [fnc].
		LEFT JOIN  SE ON OB.Company = SE.Company and SE.row_num = 1 and OB.AccountNum = SE.AccountNum
	--WHERE  AND OB.AccountingDate = SE.AccountingDate
GO
PRINT N'Creating [dm_IN].[fctGeneralLedger]'
GO


CREATE VIEW [dm_IN].[fctGeneralLedger] AS 
SELECT
 gl.[GeneralLedgerID]
,gl.[AccountID]
,gl.[CustomerID]
,gl.[SupplierID]
,gl.[CompanyID]
,gl.[ProjectID]
,gl.[CostUnitID]
,gl.[CostBearerID]
,gl.[PartitionKey]
,gl.[Company]
,gl.[AccountNum]
,gl.[CostUnitNum]
,gl.[CostBearerNum]
,gl.[JournalType]
,gl.[JournalDate]
,gl.[JournalNum]
,gl.[JournalLine]
,gl.[AccountingDate]
,gl.[Description]
,gl.[Currency]
,gl.[ExchangeRate]
,gl.[InvoiceAmount]
,gl.[InvoiceAmountLC]
,gl.[CustomerNum]
,gl.[SupplierNum]
,gl.[SalesInvoiceNum]
,gl.[PurchaseInvoiceNum]
,gl.[SupplierInvoiceNum]
,gl.[LinkToOriginalInvoice]
,gl.[DeliveryCountry]
,gl.[TransactionNum]
,gl.[VATCode]
,gl.[VATCodeDesc]
,gl.[GLRes1]
,gl.[GLRes2]
,gl.[GLRes3]
FROM [dm].[FactGeneralLedger] gl
LEFT JOIN dbo.Company com ON gl.Company = com.Company
WHERE com.BusinessArea = 'Industrial Solutions' AND com.[Status] = 'Active'
GO
PRINT N'Creating [stage].[FOR_SE_SalesLedger]'
GO
CREATE TABLE [stage].[FOR_SE_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[FiscalYear] [nvarchar] (50) NULL,
[FiscalPeriod] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [numeric] (18, 4) NULL,
[VATAmount] [numeric] (18, 4) NULL,
[VATCode] [nvarchar] (50) NULL,
[VATCodeDesc] [nvarchar] (50) NULL,
[OriginalAmount] [numeric] (18, 4) NULL,
[RemainingAmount] [numeric] (18, 4) NULL,
[LocalAmount] [numeric] (18, 4) NULL,
[LocalRemainingAmount] [numeric] (18, 4) NULL,
[AgingPeriod] [nvarchar] (50) NULL,
[PaymentTerms] [nvarchar] (50) NULL,
[DaysPastDue] [int] NULL,
[ApplyDate] [date] NULL,
[ChangeDate] [date] NULL,
[IsOpenInvoice] [bit] NULL
)
GO
PRINT N'Creating [stage].[vFOR_SE_SalesLedger]'
GO

CREATE view [stage].[vFOR_SE_SalesLedger] AS 
--COMMENT EMPTY FIELDS / CustomerID 2022-12-20	VA
SELECt
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ), '#', TRIM(InvoiceNum))))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(Company)))) AS CompanyID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	,UPPER(CONCAT(TRIM(Company), '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ), '#', TRIM(InvoiceNum))) AS SalesLedgerCode
	,PartitionKey

	,UPPER(TRIM(Company)) AS Company
	,UPPER(TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) )) AS CustomerNum
	,TRIM(InvoiceNum) AS SalesInvoiceNum
	,InvoiceDate AS SalesInvoiceDate
	,CONVERT(date, DueDate) AS SalesDueDate
	,CONVERT(date, LastPaymentDate) AS SalesLastPaymentDate
	,OriginalAmount AS InvoiceAmount
	,RemainingAmount AS RemainingInvoiceAmount
	,OriginalAmount - RemainingAmount AS PaidInvoiceAmount
	,CONVERT(decimal(18,4), ExchangeRate) AS ExchangeRate   --local currency
	,UPPER(TRIM(CURRENCY)) AS Currency
	,VATAmount
	,trim(VATCode) AS VATCode
	,trim(VATCodeDesc) AS VATCodeDesc
	--,'' AS PayToName
	--,'' AS PayToCity
	--,'' AS PayToContact
	,trim(PaymentTerms) as PaymentTerms
	,FiscalYear AS SLRes1
	,FiscalPeriod AS SLRes2
	,Currency AS SLRes3 --original currency
	,IIF(ApplyDate is null or ApplyDate = '', convert(date,'1900-01-01'), convert(date,ApplyDate)) AS AccountingDate   
	,AgingPeriod AS AgingPeriod
	,DaysPastDue AS AgingSort
	--,'' AS LinkToOriginalInvoice
FROM 
	stage.FOR_SE_SalesLedger
--GROUP BY 
--      [PartitionKey],[Company],CustNum,InvoiceNum,[DueDate],[LastPaymentDate]
GO
PRINT N'Creating [stage].[JEN_NO_PurchaseLedger]'
GO
CREATE TABLE [stage].[JEN_NO_PurchaseLedger]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierCode] [nvarchar] (50) NOT NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[InvoiceLCYAmount] [decimal] (18, 4) NOT NULL,
[InvoiceCurrAmount] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (10) NULL,
[VATPaid] [decimal] (18, 4) NULL,
[VATcode] [nvarchar] (10) NULL,
[PayToName] [nvarchar] (50) NULL,
[PaymentTermsCode] [nvarchar] (50) NULL,
[PrepaymentNum] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vJEN_NO_PurchaseLedger]'
GO
CREATE VIEW [stage].[vJEN_NO_PurchaseLedger] AS 
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(PurchaseInvoiceNum))))) AS PurchaseLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierCode))))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierCode))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseInvoiceNum))))) AS PurchaseInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT(int, replace(convert(date,InvoiceDate), '-', '')) AS InvoiceDateID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(CurrencyCode)))) AS CurrencyID
	,UPPER(CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(PurchaseInvoiceNum))) AS PurchaseLedgerCode
	,[PartitionKey]

	,UPPER(Company) AS [Company]
	,TRIM(UPPER(SupplierCode)) AS SupplierNum
	,TRIM(PurchaseInvoiceNum) AS [PurchaseInvoiceNum]
	,TRIM(PurchaseOrderNum) AS [PurchaseOrderNum]
	,CONVERT(date, [InvoiceDate]) AS InvoiceDate
	,CONVERT(date, [DueDate]) AS PurchaseDueDate
	,CONVERT(date, [LastPaymentDate]) AS PurchaseLastPaymentDate
	,[InvoiceLCYAmount]
	,[InvoiceCurrAmount]
--	,IIF([InvoiceCurrAmount]=0, null, [InvoiceLCYAmount]/[InvoiceCurrAmount]) AS ExchangeRate
	,[ExchangeRate]
	,IIF(TRIM([CurrencyCode]) is null, 'NOK', TRIM([CurrencyCode])) AS Currency
	,[VATPaid]
	,[VATcode]
	,[PayToName]
	,[PaymentTermsCode]
	,[PrepaymentNum]
	,NULL AS PaidInvoiceAmount
	,NULL AS RemainingInvoiceAmount
	,NULL AS LinkToOriginalInvoice
	,'' AS AccountingDate
	,NULL AS AgingPeriod
	,NULL AS AgingSort
	,NULL AS VATCodeDesc
FROM 
	[stage].[JEN_NO_PurchaseLedger]
GO
PRINT N'Creating [stage].[WID_ee_SalesOrderLog]'
GO
CREATE TABLE [stage].[WID_ee_SalesOrderLog]
(
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[DelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (50) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[NeedbyDate] [date] NULL,
[SalesPerson] [nvarchar] (100) NULL,
[ReturnComment] [nvarchar] (500) NULL,
[SalesReturnInvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[CancellationCode] [nvarchar] (50) NULL,
[IndexKey] [nvarchar] (50) NULL,
[PartitionKey] [varchar] (50) NULL,
[TransactionDate] [date] NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[LocalCurrency] [nvarchar] (50) NULL,
[OriginalCurrency] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vWID_ee_SalesOrderLog]'
GO
CREATE VIEW [stage].[vWID_ee_SalesOrderLog] As
--COMMENT EMPTY FIELDS // ADD UPPER() TRIM() INTO WarehouseID,CustomerID,PartID 2022-12-23 VA
SELECT 
	  CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', IndexKey)))) AS SalesOrderLogID
	  ,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM(Company))) AS CompanyID
	  ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	  --,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	  ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	  ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	  --,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(UPPER(WarehouseCode))))) AS WarehouseID
	  --,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(UPPER(PartNum)))) AS SalesOrderCode 
	  ,CONVERT(int, replace(convert(date, OrderDate),'-','')) AS SalesOrderDateID   --redundent
	  ,PartitionKey

	  ,[Company]
      ,[CustNum]	AS CustomerNum
      ,[OrderNum]	AS SalesOrderNum
      ,[OrderLine]	AS SalesOrderLine
      ,[OrderSubLine]	AS SalesOrderSubLine
      ,[OrderType]		AS SalesOrderType
      ,[OrderDate]		AS SalesOrderDate
	  ,[TransactionDate]	AS SalesOrderLogDate
	  -- ,'' AS SalesOrderLogType
--      ,[DelivDate]		AS ExpDelivDate
      ,[InvoiceNum]		AS SalesInvoiceNum
      ,[OrderQty]		AS SalesOrderQty
--		,RemainingQty AS RemainingQty
--	  ,DelivQty AS DelivQty
	  --,''				AS UoM
      ,[UnitPrice]
      ,[UnitCost]
      ,LocalCurrency AS [Currency]
--	  ,OriginalCurrency
      ,[ExchangeRate]	AS ExchangeRate
      ,[OpenRelease]
      ,[DiscountPercent]
      ,[DiscountAmount]
      ,[PartNum]
	  ,IIF(OrderSubLine = '000000', 'Main', 'Sub' ) AS PartType
--      ,[NeedbyDate]
      ,[SalesPerson]	AS SalesPersonName
	  --,''				AS Department
      ,[ReturnComment]
      ,[SalesReturnInvoiceNum]
      ,[WarehouseCode]
      ,[CancellationCode]
      ,[IndexKey]
	  --,'' AS SORes1
	  --,'' AS SORes2
	  --,'' AS SORes3
	  
  FROM [stage].[WID_ee_SalesOrderLog]
GO
PRINT N'Creating [dw].[vALL_Customer]'
GO

CREATE VIEW [dw].[vALL_Customer] AS

SELECT 
	UPPER(TRIM(Company)) AS Company
    ,UPPER(TRIM(CustomerNum)) AS CustomerNum
	,MainCustomerName
    ,[dbo].[ProperCase](CustomerName) AS CustomerName
FROM [dw].[Customer]
GO
PRINT N'Creating [stage].[JEN_SK_PurchaseLedger]'
GO
CREATE TABLE [stage].[JEN_SK_PurchaseLedger]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierCode] [nvarchar] (50) NOT NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[InvoiceLCYAmount] [decimal] (18, 4) NOT NULL,
[InvoiceCurrAmount] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (10) NULL,
[VATPaid] [decimal] (18, 4) NULL,
[VATcode] [nvarchar] (10) NULL,
[PayToName] [nvarchar] (50) NULL,
[PaymentTermsCode] [nvarchar] (50) NULL,
[PrepaymentNum] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vJEN_SK_PurchaseLedger]'
GO
CREATE VIEW [stage].[vJEN_SK_PurchaseLedger] AS 
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(SupplierCode), '#', TRIM(PurchaseInvoiceNum))))) AS PurchaseLedgerID -- shall = in Invoice
	,UPPER(CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(PurchaseInvoiceNum))) AS PurchaseLedgerCode --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',TRIM(Company))) AS CompanyID --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierCode))))) AS SupplierID 
	--,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(Company, '#', TRIM(UPPER(SupplierCode)))))) AS SupplierID --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(PurchaseInvoiceNum))))) AS PurchaseInvoiceID --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM(CurrencyCode)))) AS CurrencyID --Redundant?
	,CONVERT(int, replace(convert(date,InvoiceDate),'-','')) AS PurchaseInvoiceDateID  --Redundant?
	,[PartitionKey]

	,[Company]
	,TRIM(UPPER(SupplierCode)) AS SupplierNum
	,[PurchaseOrderNum]
	,[PurchaseInvoiceNum]
	,CONVERT(date, [InvoiceDate]) AS PurchaseInvoiceDate
	,CONVERT(date, [DueDate]) AS PurchaseDueDate
	,CONVERT(date, [LastPaymentDate]) AS PurchaseLastPaymentDate
	,[InvoiceLCYAmount] 
	,[InvoiceCurrAmount] AS InvoiceAmount
--	,IIF([InvoiceCurrAmount]=0, null, [InvoiceLCYAmount]/[InvoiceCurrAmount]) AS ExchangeRate
	,[ExchangeRate]
	,[CurrencyCode] AS Currency
	,[VATPaid]	AS VATAmount
	,[VATcode]	AS VATCode
	,[PayToName]
	,'' AS [PayToCity]
	,'' AS [PayToContact]
	,[PaymentTermsCode]	AS PaymentTerms
	,[PrepaymentNum]
	,'' AS LastPaymentNum
	,'' AS PLRES1
	,'' AS PLRES2
	,'' AS PLRES3
	--,NULL AS PaidInvoiceAmount
	--,NULL AS RemainingInvoiceAmount
	--,NULL AS LinkToOriginalInvoice
	,cast ('1900-01-01' as date) AS AccountingDate
	--,NULL AS AgingPeriod
	--,NULL AS AgingSort
	--,NULL AS VATCodeDesc
FROM 
	[stage].[JEN_SK_PurchaseLedger]
GO
PRINT N'Creating [stage].[JEN_DK_Part]'
GO
CREATE TABLE [stage].[JEN_DK_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartDescription] [nvarchar] (100) NULL,
[PartDescription2] [nvarchar] (100) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[ProductGroup2] [nvarchar] (50) NULL,
[CommodityCode] [nvarchar] (50) NULL,
[CountryOfOrigin] [nvarchar] (50) NULL,
[NetWeight] [decimal] (18, 4) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[ReorderLevel] [decimal] (18, 4) NULL,
[EAN] [nvarchar] (50) NULL,
[StockItemStatus] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vJEN_DK_Part]'
GO

CREATE VIEW [stage].[vJEN_DK_Part] AS
--COMMENT EMPTY FIELDS // ADD TRIM() INTO PartID 22-12-29 VA
SELECT 
	--CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company], '#', TRIM([PartNum]))))) AS PartID
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,UPPER(CONCAT([Company], '#', TRIM([PartNum]))) AS PartCode
	,PartitionKey

	,UPPER([Company]) AS [Company]
	,UPPER(TRIM([PartNum])) AS [PartNum]
	--,'' AS [PartName]
	,TRIM([PartDescription]) AS [PartDescription]
	,TRIM([PartDescription2]) AS [PartDescription2]
	--,'' AS [PartDescription3]
	,MAX(TRIM(SupplierCode)) AS MainSupplier
	--,NULL AS AlternativeSupplier
	,TRIM([ProductGroup]) AS [ProductGroup]
	,TRIM([ProductGroup2]) AS [ProductGroup2]
	--,'' AS [ProductGroup3]
	--,'' AS [ProductGroup4]
	--,'' AS [Brand]
	,([CommodityCode]) AS [CommodityCode]
	--,'' AS PartReplacementNum
	,MAX(StockItemStatus) AS PartStatus
	,MAX([CountryOfOrigin]) AS [CountryOfOrigin]
	,[NetWeight]
	--,'' AS UoM
	--,'' AS [Material]
	,(EAN) AS [Barcode]
	--,MAX([ReOrderLevel]) AS [ReOrderLevel]
	--,'' AS PartResponsible
	--,'' AS [StartDate]
	--,'' AS [EndDate]
FROM [stage].[JEN_DK_Part]
GROUP BY [Company], PartitionKey, TRIM([PartNum]), TRIM([PartDescription]), TRIM([PartDescription2]), [ProductGroup], [ProductGroup2], [CommodityCode], [NetWeight], EAN--, StockItemStatus -- [CountryOfOrigin]
GO
PRINT N'Creating [dm_IN].[fctFinanceOpeningBalance]'
GO



/****** Script for SelectTopNRows command from SSMS  ******/
CREATE VIEW [dm_IN].[fctFinanceOpeningBalance] AS
SELECT  [OpenBalanceID]
,[AccountID]
,[CostUnitID]
,[CostBearerID]
,[ProjectID]
,[CompanyID]
,[PartitionKey]
,[Company]
,[AccountNum]
,[CostUnitNum]
,[CostBearerNum]
,[ProjectNum]
,[JournalType]
,[JournalDate]
,[Description]
,[OpeningBalance]
,[AccountingDate]
  FROM [dm].[FactFinanceOpeningBalance]
 WHERE Company IN ('OCS')
GO
PRINT N'Creating [stage].[JEN_NB_PurchaseOrder]'
GO
CREATE TABLE [stage].[JEN_NB_PurchaseOrder]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [varchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[LineType] [nvarchar] (50) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[InvoiceSupplierCode] [nvarchar] (50) NULL,
[DelivCustCode] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[ItemType] [int] NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[OrderedQty] [decimal] (18, 4) NULL,
[ReceivedQty] [decimal] (18, 4) NULL,
[InvoicedQty] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[CommitedDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[ReqDelivDate] [date] NULL,
[DelivDate] [date] NULL,
[OrgReqDelivDate] [date] NULL,
[IsOrderClosed] [bit] NULL,
[PurchaserName] [nvarchar] (50) NULL,
[RecievingNumber] [nvarchar] (50) NULL,
[LeadTime] [nvarchar] (50) NULL,
[Comments] [nvarchar] (max) NULL,
[WarehouseCode] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vJEN_NB_PurchaseOrder]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vJEN_NB_PurchaseOrder] AS
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderType), '#', TRIM(PartNum), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', IsOrderClosed)))) AS PurchaseOrderID -- was included in ID: ", '#', TRIM(PurchaseOrderSubLine), '#', TRIM(InvoiceNum),'#',TRIM(UPPER([PartNum])), '#', TRIM(UPPER(SupplierCode)), '#', OrderedQty", '#', TRIM(InvoiceNum)
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', '')))) AS PurchaseInvoiceID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(DelivCustCode))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(DelivCustCode))))) AS CustomerID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(UPPER(SupplierCode)))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierCode))))) AS SupplierID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(UPPER([PartNum])))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Trim(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([CurrencyCode])))) AS CurrencyID
	,UPPER(CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine))) AS PurchaseOrderCode
	,PartitionKey

	,TRIM(UPPER(Company)) AS Company
	,TRIM(PurchaseOrderNum) AS PurchaseOrderNum
	,TRIM(PurchaseOrderLine) AS PurchaseOrderLine
	,TRIM(PurchaseOrderSubLine) AS PurchaseOrderSubLine
	,TRIM(OrderType) AS PurchaseOrderType
	,TRIM(UPPER([PartNum])) AS PartNum
	,TRIM(UPPER(SupplierCode)) AS SupplierNum
	,TRIM(DelivCustCode) AS DelivCustomerNum
	,'' AS PurchaseInvoiceNum 
	,OrderDate AS PurchaseOrderDate
	,MAX(OrgReqDelivDate) AS OrgReqDelivDate
	,MAX(DelivDate) AS DelivDate
	,MAX(ReqDelivDate) AS ReqDelivDate
	,MAX(CommitedDelivDate) AS CommittedDelivDate
	,MAX(ActualDelivDate) AS ActualDelivDate
	,SUM(OrderedQty) AS PurchaseOrderQty
	,SUM(ReceivedQty) AS ReceiveQty
	,SUM(InvoicedQty) AS InvoiceQty
--	,IIF(AVG(ReceivedQty) < AVG(OrderedQty), 'Open', 'Closed') AS PurchaseOrderStatus
	,IIF(IsOrderClosed = '1', 'Closed', 'Open') AS PurchaseOrderStatus
	,IsOrderClosed AS IsClosed
	--,'' AS SupplierPartNum
	--,'' AS [SupplierInvoiceNum] 
	--,'' AS PartStatus
	--,0 AS MinOrderQty
	--,'' AS UoM
	--,0 AS LandedCost
	,AVG(UnitPrice) AS UnitPrice
	,AVG(IIF(UnitPrice*OrderedQty*ExchangeRate = 0, 0, 100*DiscountAmount/(UnitPrice*OrderedQty*ExchangeRate))) AS DiscountPercent --was DiscountPercent -- changed 20230227 /DZ
	,SUM(DiscountAmount) AS DiscountAmount --was UnitPrice*OrderedQty*DiscountPercent/100  -- changed 20230227 /DZ
	,SUM(TotalMiscChrg) AS TotalMiscChrg
	,AVG(ExchangeRate) AS ExchangeRate
	,CASE WHEN CurrencyCode = '15' THEN 'EUR' WHEN CurrencyCode = '2' THEN 'USD' ELSE CurrencyCode END AS Currency
	,TRIM(PurchaserName) AS PurchaserName
	,TRIM(WarehouseCode) AS WarehouseCode
	,TRIM(RecievingNumber) AS ReceivingNum
	,IIF(LeadTime = 'na', NULL, Leadtime) AS DelivTime
	,CASE WHEN CONVERT(NVARCHAR(50),TRIM([LineType])) like '0' THEN 'Stock Item Line' WHEN CONVERT(NVARCHAR(50),TRIM([LineType])) like '1' THEN 'Non Stock Item Line' ELSE NULL END AS [LineType]
	,CONVERT(NVARCHAR(50),ItemType) AS ItemType
	,TRIM(Comments) AS Comments
	--,'' AS PurchaseChannel
	--,'' AS Documents
	--,'' AS PORes1
	--,'' AS PORes2
	--,'' AS PORes3
	--,'' AS DaysSincePOrder
FROM 
	[stage].[JEN_NB_PurchaseOrder]
	
GROUP BY PartitionKey, Company, PurchaseOrderNum, PurchaseOrderLine, PurchaseOrderSubLine, SupplierCode, DelivCustCode, LineType, PartNum, OrderType, CurrencyCode, ItemType, OrderDate, PurchaserName, RecievingNumber, LeadTime, Comments, WarehouseCode, IsOrderClosed
--	PartitionKey, Company, PurchaseOrderNum, PurchaseOrderLine, PurchaseOrderSubLine, SupplierCode, DelivCustCode, LineType, InvoiceNum, PartNum, OrderType, UnitPrice, DiscountPercent, OrderedQty, ReceivedQty, InvoicedQty, TotalMiscChrg, ExchangeRate, CurrencyCode, ItemType, OrderDate, OrgReqDelivDate, CommitedDelivDate, ActualDelivDate, DelivDate, ReqDelivDate, PurchaserName, RecievingNumber, LeadTime, Comments, WarehouseCode
GO
PRINT N'Creating [stage].[ABK_SE_SOLine]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[ABK_SE_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SalesPerson] [nvarchar] (100) NULL,
[CustNum] [nvarchar] (50) NULL,
[ProdNo] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceDate] [nvarchar] (50) NULL,
[DeliveryDate] [nvarchar] (50) NULL,
[Qty] [decimal] (18, 8) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitPriceSEK] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[UnitCostSEK] [decimal] (18, 4) NULL,
[Descr] [nvarchar] (500) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountPercent2] [decimal] (18, 4) NULL,
[DiscountPercent3] [decimal] (18, 4) NULL,
[Amount] [decimal] (18, 4) NULL,
[AmountSEK] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ISOCode] [nvarchar] (50) NULL,
[ExchangeRate] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[JNo] [nvarchar] (50) NULL,
[TrNo] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vABK_SE_SOLine]'
GO
CREATE VIEW [stage].[vABK_SE_SOLine] AS
--WITH tmp AS (
--SELECT *, ROW_NUMBER() OVER (PARTITION BY JNo, TrNo ORDER BY DeliveryDate) AS RowNum --Temporary added to push through data despite there being many duplicates to be able to show all rows in Power BI. Will definitely be needing a full reload /SM 2021-12-17
--FROM stage.ABK_SE_SOLine
--)
--COMMENT EMPTY FIELDS 2022-12-21 VA
SELECT 
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', JNo, '#', TrNo, '#', RowNum))) AS SalesInvoiceID
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', MAX(TRIM(SalesPerson)), '#', TRIM(CustNum), '#', TRIM(ProdNo), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(InvoiceNum), '#', CONCAT(JNo, '#', TrNo)))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', OrderNum, '#', OrderLine, '#', InvoiceNum))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company,'#', InvoiceNum))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum)))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(ProdNo))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONCAT(Company, '#', OrderNum, '#', OrderLine) AS SalesOrderCode
	,CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(OrderLine)) AS SalesInvoiceCode --redundent?
	,CONVERT(int, replace(convert(date, InvoiceDate), '-', '')) AS SalesInvoiceDateID --redundent?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#','') )))	AS ProjectID
	,PartitionKey

	,Company
	,MAX(TRIM(SalesPerson)) AS SalesPersonName
	,TRIM(CustNum) AS CustomerNum
	,TRIM(ProdNo) AS PartNum
	--,'' AS PartType
	,TRIM(OrderNum) AS SalesOrderNum
	,OrderLine AS SalesOrderLine
	--,'' AS SalesOrderSubLine
	--,'' AS SalesOrderType
	--,'' AS OrderCategory
	,InvoiceNum AS SalesInvoiceNum
	,OrderLine AS SalesInvoiceLine
	--,'' AS SalesInvoiceType
	,IIF(InvoiceDate = '',  CONVERT(date, '1900-01-01'),  CONVERT(date, InvoiceDate)) AS SalesInvoiceDate
	,IIF(DeliveryDate = '0', CONVERT(date, '1900-01-01'), CONVERT(date, DeliveryDate)) AS ActualDelivDate
	,Qty AS SalesInvoiceQty
	,[Unit] AS UoM
	,UnitPriceSEK	AS UnitPrice
	,UnitCostSEK	AS UnitCost
	,1 - (1 - DiscountPercent/100)*(1 - DiscountPercent2/100)*(1 - DiscountPercent3/100) AS DiscountPercent
	,UnitPriceSEK*Qty*(1 - (1 - DiscountPercent/100)*(1 - DiscountPercent2/100)*(1 - DiscountPercent3/100))	AS DiscountAmount
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	--,0 AS TotalMiscChrg
	--,0 AS VATAmount
	,'SEK' AS Currency
	,1 AS ExchangeRate
	,IIF(Qty<0, 1, 0)	AS CreditMemo
	--,'' AS SalesChannel
	--,''AS Department
	,WarehouseCode
	--,NULL AS DeliveryAddress
	--,'' AS CostBearerNum
	--,'' AS CostUnitNum
	--,'' AS ReturnComment
	--,'' AS ReturnNum
	--,'' AS ProjectNum
	,CONCAT(JNo, '#', TrNo) AS IndexKey
	--,'' AS SIRes1
	--,'' AS SIRes2
	--,'' AS SIRes3
FROM [stage].[ABK_SE_SOLine]
--tmp
GROUP BY
	PartitionKey, Company,/* TRIM(SalesPerson),*/ CustNum, ProdNo, OrderNum, OrderLine, InvoiceNum, InvoiceDate, DeliveryDate, Qty, UnitPriceSEK, UnitCostSEK, WarehouseCode,  ExchangeRate, Currency, [Unit], CONCAT(JNo, '#', TrNo), DiscountPercent, DiscountPercent2, DiscountPercent3 --, OrderType, InvoiceLine, TotalMiscChrg, CreditMemo, InvoiceType, [ProjectNum], [VAT], [SalesChannel], [BusinessChain]
GO
PRINT N'Creating [stage].[AXHSE_HQ_Account]'
GO
CREATE TABLE [stage].[AXHSE_HQ_Account]
(
[AccountNum] [nvarchar] (100) NULL,
[AccountName] [nvarchar] (500) NULL,
[AccountNameEnglish] [nvarchar] (500) NULL,
[AccountGroupName] [nvarchar] (500) NULL,
[AccountType] [nvarchar] (100) NULL,
[AccountStatus] [nvarchar] (100) NULL,
[Statement] [nvarchar] (100) NULL,
[Assets] [nvarchar] (100) NULL,
[Amortization] [nvarchar] (100) NULL,
[Costs] [nvarchar] (100) NULL,
[LiabilitiesAndEquity] [nvarchar] (100) NULL,
[Revenue] [nvarchar] (100) NULL,
[CurrentAssets] [nvarchar] (100) NULL,
[CurrentLiabilities] [nvarchar] (100) NULL,
[Deprecation] [nvarchar] (100) NULL,
[Equity] [nvarchar] (100) NULL,
[Liability] [nvarchar] (100) NULL,
[Interest] [nvarchar] (100) NULL,
[Tax] [nvarchar] (100) NULL,
[Materials] [nvarchar] (100) NULL,
[Expenses] [nvarchar] (100) NULL,
[AccountReceivables] [nvarchar] (100) NULL,
[CashAndEquivalents] [nvarchar] (100) NULL,
[AccountType2] [nvarchar] (100) NULL,
[AccountType3] [nvarchar] (100) NULL,
[AccountType4] [nvarchar] (100) NULL,
[AccountType5] [nvarchar] (100) NULL,
[AccountType6] [nvarchar] (100) NULL,
[AccountType7] [nvarchar] (100) NULL,
[AccountType8] [nvarchar] (100) NULL,
[AccountType9] [nvarchar] (100) NULL,
[AccountType10] [nvarchar] (100) NULL,
[AccountGroup2] [nvarchar] (100) NULL,
[AccountGroup3] [nvarchar] (100) NULL,
[StatementNum] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vAXHSE_HQ_Account]'
GO

CREATE VIEW [stage].[vAXHSE_HQ_Account] AS 
SELECT 
	CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(N'AXHSE', '#', [AccountNum]))) AS AccountID
	,CONVERT(binary(32), HASHBYTES('SHA2_256',N'AXHSE')) AS CompanyID
	,CONCAT(N'AXHSE', '#', [AccountNum]) AS AccountCode
	,CONVERT(varchar, GETDATE(), 23) AS PartitionKey
	,N'AXHSE'	AS [Company]
	,nullif([AccountNum]					  ,'NULL') as [AccountNum]					  
	,nullif([AccountName]					  ,'NULL') as [AccountName]					  
	,nullif(CONCAT(AccountNum,'-',AccountName),'NULL') AS Account
	,nullif([AccountStatus]					  ,'NULL') AS [AccountStatus]			
	,nullif([Assets]						  ,'NULL') AS [Assets]				
	,nullif([Amortization]					  ,'NULL') AS [Amortization]			
	,nullif([Costs]							  ,'NULL') AS [Costs]					
	,nullif([LiabilitiesAndEquity]			  ,'NULL') AS [LiabilitiesAndEquity]	
	,nullif([Revenue]						  ,'NULL') AS [Revenue]				
	,nullif([CurrentAssets]					  ,'NULL') AS [CurrentAssets]			
	,nullif([CurrentLiabilities]			  ,'NULL') AS [CurrentLiabilities]	
	,nullif([Deprecation] 					  ,'NULL') AS [Deprecation] 			
	,nullif([Equity]						  ,'NULL') AS [Equity]				
	,nullif([AccountReceivables]			  ,'NULL') AS [AccountReceivables]	
	,nullif([CashAndEquivalents]			  ,'NULL') AS [CashAndEquivalents]	
	,nullif(Liability						  ,'NULL') AS Liability				
	,nullif(Tax								  ,'NULL') AS Tax						
	,nullif(Interest						  ,'NULL') AS Interest				
	,nullif(Materials						  ,'NULL') AS Materials				
	,nullif(Expenses						  ,'NULL') AS Expenses				
	,nullif([AccountType]					  ,'NULL') AS [AccountType]			
	,nullif([AccountType2]					  ,'NULL') AS [AccountType2]			
	,nullif([AccountType3]					  ,'NULL') AS [AccountType3]			
	,nullif([AccountType4]					  ,'NULL') AS [AccountType4]			
	,nullif([AccountType5]					  ,'NULL') AS [AccountType5]			
	,nullif([AccountType6]					  ,'NULL') AS [AccountType6]			
	,nullif([AccountType7]					  ,'NULL') AS [AccountType7]			
	,nullif([AccountType8]					  ,'NULL') AS [AccountType8]			
	,nullif([AccountType9]					  ,'NULL') AS [AccountType9]			
	,nullif([AccountType10]					  ,'NULL') AS [AccountType10]			
	,nullif([AccountGroupName]				  ,'NULL') AS [AccountGroupName]		
	,nullif([AccountGroup2]					  ,'NULL') AS [AccountGroup2]			
	,nullif([AccountGroup3]					  ,'NULL') AS [AccountGroup3]			
	,nullif([Statement] 					  ,'NULL') AS [Statement] 			
	--,NULL AS [StatementNum]
	,'From sharepoint' AS [AccRes1]
	--,[AccRes2]
	--,[AccRes3]
  FROM stage.AXHSE_HQ_Account AS A
  WHERE A.AccountNum IS NOT NULL;
GO
PRINT N'Creating [stage].[NOM_DK_Customer]'
GO
CREATE TABLE [stage].[NOM_DK_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[CustomerName] [nvarchar] (100) NULL,
[MainCustomerName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[AddressLine3] [nvarchar] (100) NULL,
[ABCCode] [nvarchar] (10) NULL,
[City] [nvarchar] (50) NULL,
[Zip] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerMainGroup] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNr] [nvarchar] (20) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (2) NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[OrganizationNum] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vNOM_DK_Customer]'
GO
CREATE VIEW [stage].[vNOM_DK_Customer] AS
--comment empty fields 23-01-05 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID
    ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,UPPER(CONCAT([Company],'#',TRIM([CustomerNum]))) AS CustomerCode
	
	,PartitionKey
	,UPPER(TRIM(Company)) AS Company
    ,UPPER(TRIM(CustomerNum)) AS CustomerNum
	,MainCustomerName
    ,[dbo].[ProperCase](CustomerName) AS CustomerName
    ,[AddressLine1]
    ,[AddressLine2]
    ,[AddressLine3]
	--,'' AS [TelephoneNum1]
	--,'' AS [TelephoneNum2]
	--,'' AS [Email]
	,[ZIP] AS ZipCode
    ,IIF([City]= ' ',NULL,[dbo].[ProperCase]([City])) AS [City]    
    ,IIF([State]= ' ',NULL,[State]) AS [State]
	,[District]	AS SalesDistrict
	,TRIM(CountryCode) AS CountryCode
    ,[dbo].[ProperCase](CountryName) AS CountryName
	--,'' AS Division
	--,'' AS CustomerIndustry
	--,'' AS CustomerSubIndustry
	,[dbo].[ProperCase](TRIM(CONCAT(AddressLine1,' ',AddressLine2))) as AddressLine
	,[dbo].[ProperCase](concat_ws(',',coalesce(TRIM(CountryName),null),coalesce(IIF([State]= ' ',null,TRIM([State])),IIF(City= ' ',null,TRIM(City)),IIF(ZIP= ' ',null,TRIM(ZIP))),IIF([AddressLine3]=' ',null, TRIM([AddressLine3]))
		,coalesce(IIF([addressline1]= ' ',null,TRIM([addressline1])),IIF([addressline2]= ' ',null,TRIM([addressline2])))
		,coalesce(IIF([addressline2]= ' ',null,TRIM([addressline2])),IIF([addressline3]= ' ',null,TRIM([addressline3]))))) AS FullAddressLine
    ,[dbo].[ProperCase](CustomerMainGroup) AS CustomerGroup
	,[dbo].[ProperCase](CustomerGroup) AS CustomerSubGroup
	,[SalesRepCode] AS SalesPersonCode
    ,[dbo].[ProperCase](SalesPersonName) AS SalesPersonName
	--,'' AS [SalesPersonResponsible]
    ,TRIM([VATRegNr]) AS [VATNum]
	--,'' AS OrganizationNum
	,[AccountString] AS AccountNum
	,[InternalExternal]
	,[ABCCode] AS CustomerScore
	, OrganizationNum
	--,'' AS CustomerType
	,GETDATE() AS ValidFrom
	,DATEADD(year,1,GETDATE()) AS ValidTo
FROM [stage].[NOM_DK_Customer]
GO
PRINT N'Creating [stage].[JEN_NB_StockBalance]'
GO
CREATE TABLE [stage].[JEN_NB_StockBalance]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PartNum] [nvarchar] (70) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[FIFOValue] [decimal] (18, 4) NULL,
[StockBalance] [decimal] (18, 4) NULL,
[ReservedQty] [decimal] (18, 4) NULL,
[OptimalOrderQty] [decimal] (18, 4) NULL,
[BackOrderQty] [decimal] (18, 4) NULL,
[QtyOrdered] [decimal] (18, 4) NULL,
[StockTakDiff] [decimal] (18, 4) NULL,
[ReOrderLevel] [decimal] (18, 4) NULL,
[AvgWeightedCost] [decimal] (18, 4) NULL,
[AvgCost] [decimal] (18, 4) NULL,
[LandedCost] [decimal] (18, 4) NULL,
[DelivTimeDesc] [nvarchar] (50) NULL,
[DelivTimeUnit] [int] NULL,
[DelivTimeToWHS] [int] NULL,
[SupplierNum] [nvarchar] (50) NULL,
[DefaultBinNo] [nvarchar] (12) NULL,
[BatchNumber] [nvarchar] (50) NULL,
[StockTakDate] [date] NULL,
[StdCostLaCaD] [date] NULL,
[DelivDateSupplier] [date] NULL,
[DelivDateCust] [date] NULL,
[OrderDateSupplier] [date] NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[MaxStockQty] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vJEN_NB_StockBalance]'
GO
CREATE VIEW [stage].[vJEN_NB_StockBalance] AS
--COMMENT EMPTY FIELDS // ADD UPPER() INTO PartID 23-01-03 VA
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company], '#', TRIM([PartNum]), '#', TRIM([WarehouseCode]))))) AS ItemWarehouseID
	,UPPER(CONCAT([Company], '#', TRIM([PartNum]), '#' , TRIM([WarehouseCode]))) AS ItemWarehouseCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company], '#', TRIM([SupplierNum]))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([SupplierNum]))))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company], '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,[PartitionKey]

	,UPPER([Company]) AS [Company]
	,UPPER(TRIM([PartNum])) AS PartNum
	,UPPER(TRIM([SupplierNum])) AS [SupplierNum]
	,TRIM([WarehouseCode]) AS WarehouseCode
	,TRIM(CurrencyCode) AS Currency
	,TRIM([DefaultBinNo]) AS BinNum
	,TRIM(BatchNumber) AS BatchNum
	,[DelivTimeUnit] AS [DelivTime]
	,convert(date, [StockTakDate]) AS LastStockTakeDate
	,convert(date, [StdCostLaCaD]) AS LastStdCostCalDate
	--,Null AS SafetyStock
	,MaxStockQty
	,[StockBalance]
	,AvgCost*StockBalance AS StockValue
	,AvgCost
--	,LandedCost
	,[ReservedQty] AS ReserveQty
	,[BackOrderQty]	AS BackOrderQty
	,[QtyOrdered] AS OrderQty
	,[StockTakDiff]	AS StockTakeDiff
	,[ReOrderLevel]
	,[OptimalOrderQty]
	--,'' AS SBRes1
	--,'' AS SBRes2
	--,'' AS SBRes3
FROM 
	[stage].[JEN_NB_StockBalance]
GROUP BY
	PartitionKey, Company, WarehouseCode, CurrencyCode, Company, DefaultBinNo, BatchNumber, SupplierNum, PartNum, DelivTimeUnit, StockTakDate, StdCostLaCaD, MaxStockQty, StockBalance, ReservedQty, BackOrderQty, QtyOrdered, StockTakDiff, ReOrderLevel, OptimalOrderQty, AvgCost
GO
PRINT N'Creating [stage].[JEN_SE_Budget]'
GO
CREATE TABLE [stage].[JEN_SE_Budget]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (8) NULL,
[AccountNum] [nvarchar] (25) NULL,
[BudgetPeriod] [nvarchar] (25) NULL,
[BudgetPeriodDate] [nvarchar] (25) NULL,
[PeriodType] [nvarchar] (25) NULL,
[CustomerNum] [nvarchar] (80) NULL,
[ProjectNum] [nvarchar] (25) NULL,
[CustomerGroup] [nvarchar] (25) NULL,
[ProductGroup] [nvarchar] (25) NULL,
[SalesPersonCode] [nvarchar] (25) NULL,
[SalesPersonName] [nvarchar] (25) NULL,
[BudgetDescription] [nvarchar] (25) NULL,
[Currency] [nvarchar] (25) NULL,
[BudgetSales] [nvarchar] (25) NULL,
[BudgetCost] [nvarchar] (25) NULL,
[BudgetGrossProfit] [nvarchar] (25) NULL,
[BudgetGrossMargin] [nvarchar] (25) NULL,
[BRes1] [nvarchar] (25) NULL,
[BRes2] [nvarchar] (25) NULL,
[BRes3] [nvarchar] (25) NULL
)
GO
PRINT N'Creating [stage].[vJEN_SE_Budget]'
GO


CREATE view [stage].[vJEN_SE_Budget] as
select 
 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#', cast(BudgetPeriod as date),TRIM(CustomerNum))))) AS BudgetID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',upper(trim(Company)))) AS CompanyID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',null)))) AS ProjectID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',null)))) AS WarehouseID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',null)))) AS PartID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',CustomerNum)))) AS CustomerID,
	YEAR(cast(BudgetPeriod as date))*10000 + MONTH(cast(BudgetPeriod as date))*100 + DAY(cast(BudgetPeriod as date))	AS BudgetPeriodDateID,
	PartitionKey,
	Company,
	cast(BudgetPeriod as date) AS BudgetPeriodDate,
	PeriodType,
	try_cast(replace(BudgetSales               ,',','.') as numeric(18,5)) as BudgetSales ,
	try_cast(replace(BudgetCost                ,',','.') as numeric(18,5)) as BudgetCost 
from stage.JEN_SE_Budget
;
GO
PRINT N'Creating [dw].[Project]'
GO
CREATE TABLE [dw].[Project]
(
[ProjectID] [binary] (32) NOT NULL,
[ProjectCode] [nvarchar] (200) NOT NULL,
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[MainProjectNum] [nvarchar] (50) NULL,
[ProjectNum] [nvarchar] (50) NOT NULL,
[ProjectDescription] [nvarchar] (max) NULL,
[Organisation] [nvarchar] (50) NULL,
[ProjectStatus] [nvarchar] (50) NULL,
[ProjectCategory] [nvarchar] (50) NULL,
[WBSElement] [nvarchar] (50) NULL,
[ObjectNum] [nvarchar] (50) NULL,
[Level] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[ProjectResponsible] [nvarchar] (50) NULL,
[Comments] [nvarchar] (max) NULL,
[StartDate] [date] NULL,
[EndDate] [date] NULL,
[EstEndDate] [date] NULL,
[ProjectCompletion] [decimal] (18, 4) NULL,
[ActualCost] [decimal] (18, 4) NULL,
[is_deleted] [bit] NULL,
[IsActiveRecord] [bit] NULL,
[PJRes1] [nvarchar] (100) NULL,
[PJRes2] [nvarchar] (100) NULL,
[PJRes3] [nvarchar] (100) NULL,
[ProjectNumLine] [nvarchar] (50) NULL
)
GO
PRINT N'Creating primary key [PK_Project] on [dw].[Project]'
GO
ALTER TABLE [dw].[Project] ADD CONSTRAINT [PK_Project] PRIMARY KEY CLUSTERED ([ProjectID])
GO
PRINT N'Creating [dm].[DimProject]'
GO



/****** Script for SelectTopNRows command from SSMS  ******/
CREATE VIEW [dm].[DimProject] AS 
SELECT CONVERT(bigint, [ProjectID]) AS ProjectID
      ,[ProjectCode]
      ,[PartitionKey]
      ,[Company]
      ,[MainProjectNum]
      ,[ProjectNum]
      ,[ProjectDescription]
	  ,CONCAT(ProjectNum, ' - ' + NULLIF(TRIM(ProjectDescription),''))	AS Project 
      ,[Organisation]
      ,[ProjectStatus]
      ,[ProjectCategory]
      ,[WBSElement]
      ,[ObjectNum]
      ,[Level]
      ,[Currency]
      ,[WarehouseCode]
      ,[ProjectResponsible]
      ,[Comments]
      ,[StartDate]
      ,[EndDate]
      ,[EstEndDate]
	  ,ActualCost
  FROM [dw].[Project]
  GROUP BY ProjectID,[ProjectCode],[PartitionKey],[Company],[MainProjectNum],[ProjectNum],[ProjectDescription],[Organisation],[ProjectStatus],[ProjectCategory],[WBSElement]
      ,[ObjectNum],[Level],[Currency],[WarehouseCode],[ProjectResponsible],[Comments],[StartDate],[EndDate],[EstEndDate], ActualCost
GO
PRINT N'Creating [dm_IN].[dimProject]'
GO







CREATE VIEW [dm_IN].[dimProject] AS

SELECT 
 proj.[ProjectID]
,proj.[ProjectCode]
,proj.[PartitionKey]
,proj.[Company]
,proj.[MainProjectNum]
,proj.[ProjectNum]
,proj.[ProjectDescription]
,proj.[Project]
,proj.[Organisation]
,proj.[ProjectStatus]
,proj.[ProjectCategory]
,proj.[WBSElement]
,proj.[ObjectNum]
,proj.[Level]
,proj.[Currency]
,proj.[WarehouseCode]
,proj.[ProjectResponsible]
,proj.[Comments]
,proj.[StartDate]
,proj.[EndDate]
,proj.[EstEndDate]
,proj.[ActualCost]
FROM [dm].[DimProject] as proj
WHERE proj.[Company] in ('OCSSE')  -- Industry basket
GO
PRINT N'Creating [stage].[ARK_CZ_OLine]'
GO
CREATE TABLE [stage].[ARK_CZ_OLine]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderRelNum] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[NeedbyDate] [date] NULL,
[DelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[CurrExchRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (50) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[SalesPerson] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (50) NULL,
[SalesReturnOrderNum] [nvarchar] (50) NULL,
[SalesReturnInvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[BusinessChain] [nvarchar] (50) NULL,
[Res1] [nvarchar] (50) NULL,
[Res2] [nvarchar] (50) NULL,
[Res3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vARK_CZ_OLine]'
GO

CREATE VIEW [stage].[vARK_CZ_OLine] AS
--COMMENT EMPTY FIELDS // ADD TRIM()UPPER()INTO CustomerID 2022-12-16 VA
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',OrderNum,'#',OrderLine,'#',OrderSubLine,'#',InvoiceNum))) AS SalesOrderID
	,CONCAT(Company,'#',OrderNum,'#',OrderLine) AS SalesOrderCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(CustNum)))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',Company)) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(OrderNum)))) AS SalesOrderNumID
	,CONVERT(int, replace(convert(date, OrderDate),'-','')) AS SalesOrderDateID  
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',''))))	AS ProjectID
	,PartitionKey 

	,Company 
	,TRIM(CustNum) AS CustomerNum 
	,OrderNum AS [SalesOrderNum]
	,OrderLine AS [SalesOrderLine]
	,OrderSubLine AS [SalesOrderSubLine]
	,OrderType AS [SalesOrderType]
	--,'' AS [SalesOrderCategory]
	,OrderDate AS [SalesOrderDate]
	,NeedbyDate
	,CASE WHEN CAST(DelivDate AS date) < '1753-01-01' THEN CAST('1900-01-01' AS date) ELSE CAST(DelivDate AS date) END  AS [ExpDelivDate]
	,CAST('1900-01-01' AS date) AS ActualDelivDate
	,CAST('1900-01-01' AS date) AS ConfirmedDelivDate
	,InvoiceNum AS [SalesInvoiceNum]
	,OrderQty AS [SalesOrderQty]
	,DelivQty
	,RemainingQty
	--,NULL AS SalesInvoiceQty
	--,'' AS [UoM]
	,UnitPrice
	,UnitCost
	,Currency
	,CurrExChRate AS [ExchangeRate]
	,OpenRelease
	,DiscountAmount
	,DiscountPercent
	,PartNum
	,Res1 AS [PartType]
	,PartStatus
	,SalesPerson AS [SalesPersonName]
	,ReturnComment
	,SalesReturnOrderNum
	,MAX(SalesReturnInvoiceNum) AS SalesReturnInvoiceNum
	,TRIM(WarehouseCode) AS WarehouseCode
	,CASE WHEN SalesChannel = 'POS' OR SalesChannel = 'WMS' THEN 'Over-the-counter'
		WHEN SalesChannel = 'WEBSHOP' OR SalesChannel = 'www.arkov.cz' THEN 'www.arkov.cz'
		WHEN SalesChannel = 'www.arkov.sk' THEN 'www.arkov.sk'
		WHEN SalesChannel = 'EDI' THEN 'EDI'
		ELSE 'Normal Order Handling' END AS SalesChannel
	,CASE WHEN SalesChannel = 'POS' OR SalesChannel = 'WMS' THEN 'Over-the-counter'
		WHEN SalesChannel = 'WEBSHOP' OR SalesChannel = 'www.arkov.cz' OR SalesChannel = 'www.arkov.sk' THEN 'Webshop'
		WHEN SalesChannel = 'EDI' THEN 'EDI'
		ELSE 'Normal Order Handling' END AS AxInterSalesChannel
	--,'' AS Cancellation
	,BusinessChain AS [Department]
	--,'' AS [ProjectNum]
	--,'' AS [IndexKey]
	--,'' AS SORes1
	--,'' AS SORes2
	--,'' AS SORes3
	--,NULL AS [TotalMiscChrg]
FROM stage.ARK_CZ_OLine
--WHERE OrderDate >= DATEADD(year, -1, GETDATE()) --Added this where clause as semi-incremental load functinoality since it doesn't work easily on meta-param table. /SM 2021-10-01
GROUP BY
	PartitionKey, Company, CustNum, OrderNum, OrderLine, OrderSubLine, OrderType, OrderRelNum, OrderDate, NeedbyDate, DelivDate, InvoiceNum, OrderQty, DelivQty, RemainingQty, UnitPrice, UnitCost, Currency, CurrExChRate, BusinessChain, OpenRelease, DiscountAmount, DiscountPercent, PartNum, PartStatus, SalesPerson, ReturnComment, SalesReturnOrderNum, WarehouseCode, SalesChannel, BusinessChain, Res1
GO
PRINT N'Creating [stage].[AXL_UK_Customer]'
GO
CREATE TABLE [stage].[AXL_UK_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[MainCustomerName] [nvarchar] (100) NULL,
[CustomerName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[AddressLine] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (20) NULL,
[TelephoneNumber2] [nvarchar] (20) NULL,
[Email] [nvarchar] (100) NULL,
[City] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[Division] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (50) NULL,
[CustomerIndustry] [nvarchar] (50) NULL,
[CustomerSubIndustry] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNo] [nvarchar] (50) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[CustomerABC] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[SalesPersonResponsible] [nvarchar] (50) NULL,
[CustomerType] [nvarchar] (50) NULL,
[Res1] [nvarchar] (50) NULL,
[Res2] [nvarchar] (50) NULL,
[Res3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXL_UK_Customer]'
GO


CREATE VIEW [stage].[vAXL_UK_Customer] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustomerNum))) )) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,UPPER(CONCAT([Company], '#', TRIM([CustomerNum]))) AS CustomerCode
	,PartitionKey

	,UPPER(Company) AS Company
	,UPPER(TRIM(CustomerNum)) AS [CustomerNum]
	,TRIM(MainCustomerName) AS MainCustomerName
	,TRIM(CustomerName) AS  [CustomerName]
	,TRIM([AddressLine1]) AS [AddressLine1]
	,TRIM([AddressLine2]) AS [AddressLine2]
	,TRIM([AddressLine3]) AS [AddressLine3]
	,TRIM([TelephoneNumber1]) AS [TelephoneNum1]
	,TRIM([TelephoneNumber2]) AS [TelephoneNum2]
	,TRIM([Email]) AS [Email]
	,TRIM([ZipCode]) AS [ZipCode]
	,TRIM([City]) AS [City]
	,TRIM([State]) AS [State]
	,TRIM([District]) AS [SalesDistrict]
	,TRIM(con.CountryName) AS CountryName
	,TRIM([ISOAlpha2Code]) AS [CountryCode]
	,TRIM([Division]) AS [Division]
	,TRIM([CustomerIndustry]) AS [CustomerIndustry]
	,TRIM([CustomerSubIndustry]) AS [CustomerSubIndustry]
	,TRIM([AddressLine3]) AS [AddressLine]
	,CONCAT(TRIM(con.CountryName), + ',  ' + TRIM([City]), + ',  ' + TRIM([ZipCode]), + ',  ' + TRIM(addressline3)) AS [FullAddressLine]
	,TRIM(CustomerGroup) AS [CustomerGroup]
	,TRIM(CustomerGroup) AS [CustomerSubGroup]
	,TRIM([SalesRepCode]) AS [SalesPersonCode]
	,TRIM(SalesPersonName) AS [SalesPersonName]
	,TRIM([SalesPersonResponsible]) AS [SalesPersonResponsible]
	,TRIM([VATRegNo]) AS [VATNum]
	,TRIM([AccountString]) AS [AccountNum]
	,TRIM([InternalExternal]) AS [InternalExternal]
	,TRIM([CustomerABC]) AS [CustomerScore]
	,TRIM([CustomerType]) AS [CustomerType]
FROM [stage].[AXL_UK_Customer] com
	LEFT JOIN dbo.Country con ON com.CountryName = con.[ISOAlpha2Code]

--GROUP BY
--	PartitionKey, Company, CustomerNum, CustomerName, MainCustomerName, [AddressLine1], [AddressLine2], [AddressLine3], [TelephoneNumber1], [TelephoneNumber2], [Email], [ZipCode], [City], [State], [District], [CountryName], [Division], [CustomerIndustry], [CustomerSubIndustry], CustomerGroup, [SalesRepCode], SalesPersonName, [SalesPersonResponsible], [VATRegNo], [AccountString], [InternalExternal], [CustomerABC], [CustomerType]

--	Stagetablename in ('AXL_AU_Customer', 'AXL_DC_Customer', 'AXL_HU_Customer', 'AXL_IE_Customer', 'AXL_PL_Customer', 'AXL_PT_Customer', 'AXL_UK_Customer')
GO
PRINT N'Creating [stage].[FOR_ES_StockBalance]'
GO
CREATE TABLE [stage].[FOR_ES_StockBalance]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseCode] [nvarchar] (10) NULL,
[WarehouseName] [nvarchar] (80) NULL,
[PartNum] [nvarchar] (100) NULL,
[MaxStockQty] [decimal] (9, 2) NULL,
[StockBalance] [decimal] (9, 2) NULL,
[StockValue] [decimal] (9, 2) NULL,
[ReserveQty] [decimal] (9, 2) NULL,
[OrderQty] [decimal] (9, 2) NULL,
[SafetyStock] [decimal] (9, 2) NULL,
[AvgCost] [decimal] (9, 2) NULL
)
GO
PRINT N'Creating [stage].[vFOR_ES_StockBalance]'
GO

CREATE VIEW [stage].[vFOR_ES_StockBalance] AS 
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]),'#',TRIM([WarehouseCode]))))) AS ItemWarehouseID,
	UPPER(CONCAT([Company],'#',TRIM([PartNum]),'#',TRIM([WarehouseCode]))) AS ItemWarehouseCode,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID,
	[PartitionKey]	,
	[Company]		,
	WarehouseCode	,
	WarehouseName	,
	PartNum			,
	MaxStockQty		,
	StockBalance	,
	StockValue		,
	ReserveQty		,
	OrderQty		,
	SafetyStock		,
	AvgCost			
FROM 
	 [stage].[FOR_ES_StockBalance]
GO
PRINT N'Creating [stage].[CER_UK_Customer]'
GO
CREATE TABLE [stage].[CER_UK_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[CustomerName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (50) NULL,
[TelephoneNumber2] [nvarchar] (50) NULL,
[Email] [nvarchar] (200) NULL,
[CustomerType] [nvarchar] (50) NULL,
[ABCCode] [nchar] (10) NULL,
[City] [nvarchar] (50) NULL,
[ZIP] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[Division] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNr] [nvarchar] (20) NULL,
[OrganizationNum] [nvarchar] (100) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (2) NULL,
[SalesPersonName] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_UK_Customer]'
GO

CREATE VIEW [stage].[vCER_UK_Customer] AS
--COMMENT EMPTY FIELDS // ADD UPPER()TRIM() INTO CustomerID
SELECT 
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustomerNum)))) AS CustomerID
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
    ,CONCAT([Company], '#', TRIM([CustomerNum])) AS CustomerCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [Company])) AS CompanyID
	,PartitionKey

	,Company
    ,TRIM(CustomerNum) AS CustomerNum
	--,'' AS MainCustomerName
    ,[dbo].[ProperCase](CustomerName) AS CustomerName
    ,[AddressLine1]
    ,[AddressLine2]
    ,[AddressLine3]
	,[TelephoneNumber1] AS [TelephoneNum1]
	,[TelephoneNumber2] AS [TelephoneNum2]
	,LEFT([Email],100) AS [Email]
	,[City]
	,IIF([ZIP]= ' ',null,[ZIP]) AS ZipCode
    ,IIF([State]= ' ',null,[State]) AS [State]
	,[District] AS [SalesDistrict]
	,
	case when IIF(CountryName is null, 'GB', CountryCode) = 'UK' then 'GB'
	else IIF(CountryName is null, 'GB', CountryCode)
	end AS CountryCode
	,IIF(CountryName is null, 'United Kingdom', CountryName) AS CountryName
	,[Division]
	--,'' AS CustomerIndustry
	--,'' AS CustomerSubIndustry
    ,[dbo].[ProperCase](CustomerGroup) AS CustomerGroup
	,[dbo].[ProperCase](CustomerSubGroup) AS CustomerSubGroup
	,[SalesRepCode] AS [SalesPersonCode]
	,[dbo].[ProperCase](SalesPersonName) AS SalesPersonName
	--,'' AS [SalesPersonResponsible]
	,[VATRegNr] AS [VATNum]
	,OrganizationNum
	,[AccountString] AS [AccountNum]
	,[InternalExternal]
	,[ABCCode] AS [CustomerScore]
	,[CustomerType] AS CustomerType
	,[dbo].[ProperCase](TRIM(CONCAT(AddressLine1,' ',AddressLine2,' ',AddressLine3))) AS AddressLine
	,[dbo].[ProperCase](concat_ws(',',coalesce(CountryName,null),coalesce(IIF([State]= ' ',null,[State]),IIF(District= ' ',null,District),IIF(City= ' ',null,City),IIF(ZIP= ' ',null,ZIP))
		,coalesce(IIF([addressline1]= ' ',null,[addressline1]),IIF([addressline2]= ' ',null,[addressline2]))
		,coalesce(IIF([addressline2]= ' ',null,[addressline2]),IIF([addressline3]= ' ',null,[addressline3])))) AS FullAddressLine
  FROM [stage].[CER_UK_Customer]
GO
PRINT N'Creating [stage].[STE_SE_SOLine]'
GO
CREATE TABLE [stage].[STE_SE_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (500) NOT NULL,
[SalesInvoiceNum] [nvarchar] (500) NULL,
[SalesInvoiceLine] [nvarchar] (500) NULL,
[SalesInvoiceType] [nvarchar] (500) NULL,
[InvoiceDate] [nvarchar] (500) NULL,
[CustomerNum] [nvarchar] (500) NULL,
[PartNum] [nvarchar] (500) NULL,
[PartType] [nvarchar] (500) NULL,
[SalesOrderNum] [nvarchar] (500) NULL,
[SalesOrderLine] [nvarchar] (500) NULL,
[SalesOrderType] [nvarchar] (500) NULL,
[IsInvoiceClosed] [nvarchar] (500) NULL,
[ActualDelivDate] [nvarchar] (500) NULL,
[SalesInvoiceQty] [nvarchar] (500) NULL,
[UoM] [nvarchar] (500) NULL,
[UnitPrice] [nvarchar] (500) NULL,
[PrePostUnitCost] [nvarchar] (500) NULL,
[UnitCost] [nvarchar] (500) NULL,
[DiscountPercent] [nvarchar] (500) NULL,
[DiscountAmount] [nvarchar] (500) NULL,
[VATAmount] [nvarchar] (500) NULL,
[Sales Channel] [nvarchar] (500) NULL,
[WarehouseCode] [nvarchar] (500) NULL,
[ReturnNum] [nvarchar] (500) NULL,
[ReturnComment] [nvarchar] (500) NULL,
[CostUnitNum] [nvarchar] (500) NULL,
[IsCreditMemo] [nvarchar] (500) NULL,
[SalesPerson] [nvarchar] (500) NULL,
[DeliveryAddressLine] [nvarchar] (500) NULL,
[DeliveryZipCode] [nvarchar] (500) NULL,
[DeliveryCity] [nvarchar] (500) NULL,
[DeliveryCountry] [nvarchar] (500) NULL,
[Currency] [nvarchar] (500) NULL,
[CurrExchRate] [nvarchar] (500) NULL
)
GO
PRINT N'Creating [stage].[vSTE_SE_SOLine]'
GO







CREATE view [stage].[vSTE_SE_SOLine] AS
SELECT
	 CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM("CustomerNum"), '#',TRIM("SalesOrderNum"), '#',TRIM("SalesOrderLine"), '#',TRIM(PartNum), '#',TRIM("SalesInvoiceNum"), '#',TRIM("SalesInvoiceLine"))))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM("SalesOrderNum"), '#',TRIM("SalesOrderLine"), '#',TRIM("SalesInvoiceNum"))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM("CustomerNum"), '#', TRIM("SalesInvoiceNum"))))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM("SalesOrderNum"))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company),'#','')))) AS ProjectID
	,CONVERT(int, replace(convert(date,InvoiceDate), '-', '')) AS SalesInvoiceDateID  
	,CONCAT(Company, '#', TRIM(SalesInvoiceNum), '#', TRIM(SalesInvoiceType)) AS SalesInvoiceCode 
	
	,[PartitionKey] 
	,UPPER(TRIM("Company")) AS "Company"
	,UPPER(TRIM("PartNum")) AS "PartNum"
	,UPPER(TRIM("CustomerNum")) AS "CustomerNum" 
	,UPPER(TRIM("SalesOrderNum")) AS "SalesOrderNum"
	,UPPER(TRIM("SalesInvoiceNum")) AS "SalesInvoiceNum"
	,"InvoiceDate" as	"SalesInvoiceDate"
	,"SalesPerson"  as  SalesPersonName
	,"SalesInvoiceLine" 
	,"SalesOrderLine" 
	,"DiscountAmount" 
	,"WarehouseCode" 
	,"SalesInvoiceType"					
	,"PartType"							
	,"SalesOrderType"		
	,"IsInvoiceClosed"		
	,"ActualDelivDate"		
	,"SalesInvoiceQty"		
	,"UoM"					
	,"UnitPrice"				
	,"PrePostUnitCost"		
	,"UnitCost"				
	,"DiscountPercent"			
	,"VATAmount"				
	,"Sales Channel"						
	,"ReturnNum"				
	,"ReturnComment"			
	,"CostUnitNum"			
	,IIF("IsCreditMemo" = 'False',0,1)	AS [CreditMemo]		
	,"SalesPerson"			
	,"DeliveryAddressLine"	
	,"DeliveryZipCode"		
	,"DeliveryCity"			
	,"DeliveryCountry"		
	,"Currency"
	,"CurrExchRate" as [ExchangeRate]

FROM 
	stage.STE_SE_SOLine
GO
PRINT N'Creating [stage].[CER_NO_BC_SalesOrder]'
GO
CREATE TABLE [stage].[CER_NO_BC_SalesOrder]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (60) NULL,
[OrderLine] [nvarchar] (60) NULL,
[OrderDate] [nvarchar] (60) NULL,
[DelivDate] [nvarchar] (60) NULL,
[OrderQty] [nvarchar] (60) NULL,
[DelivQty] [nvarchar] (60) NULL,
[RemainingQty] [nvarchar] (60) NULL,
[UnitPrice] [nvarchar] (60) NULL,
[UnitCost] [nvarchar] (60) NULL,
[SumUnitCost] [nvarchar] (60) NULL,
[SumUnitPrice] [nvarchar] (60) NULL,
[Currency] [nvarchar] (60) NULL,
[CurrExchRate] [nvarchar] (60) NULL,
[OpenRelease] [nvarchar] (60) NULL,
[DiscountPercent] [nvarchar] (60) NULL,
[DiscountAmount] [nvarchar] (60) NULL,
[PartNum] [nvarchar] (60) NULL,
[NeedbyDate] [nvarchar] (60) NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[WarehouseCode] [nvarchar] (60) NULL,
[systemCreatedAt] [nvarchar] (50) NULL,
[systemModifiedAt] [nvarchar] (50) NULL,
[DocumentType] [nvarchar] (60) NULL,
[Department] [nvarchar] (40) NULL,
[WarehouseCodeLines] [nvarchar] (5) NULL
)
GO
PRINT N'Creating [stage].[vCER_NO_BC_SalesOrder]'
GO




CREATE VIEW [stage].[vCER_NO_BC_SalesOrder] AS 
SELECT 
	CONVERT(binary(32), HASHBYTES('SHA2_256', CONCAT(Company, '#', OrderNum, '#', OrderLine, '#', CustNum))) AS SalesOrderID,
	CONVERT(binary(32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID,
	CONVERT(binary(32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(OrderNum)))) AS SalesOrderNumID,
	CONVERT(binary(32), HASHBYTES('SHA2_256', TRIM(Company))) AS CompanyID,
	CONVERT(binary(32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID, -- SB add 2022-11-15
	try_cast(convert(varchar, TRY_CAST(OrderDate as Date), 112) as int) AS SalesOrderDateID, -- SB added 2023-02-01, needed for CurrencySelection?
	CONCAT(Company, '#', OrderNum, '#', OrderLine, '#', CustNum) as SalesOrderCode,
	PartitionKey,
	Company,
	nullif(trim(CustNum),'') as CustomerNum,
	nullif(trim(OrderNum),'') as SalesOrderNum,
	nullif(trim(OrderLine),'') as SalesOrderLine,
	cast(OrderDate as Date) as SalesOrderDate,
	cast(DelivDate as Date) as ExpDelivDate,
	cast(OrderQty as decimal(9,2)) AS SalesOrderQty,
	cast(DelivQty as decimal(9,2)) AS DelivQty,
	cast(RemainingQty as decimal(9,2)) AS RemainingQty,
	cast(UnitPrice as decimal(18,4)) AS UnitPrice,
	cast(UnitCost as decimal (18,4)) AS  UnitCost,
	--cast(SumUnitPrice as decimal(9,2)) AS SumUnitPrice,
	--cast(SumUnitCost as decimal(9,2)) AS  SumUnitCost,
	nullif(trim(Currency),'') as Currency,
	cast(CurrExchRate as decimal(9,6)) as ExchangeRate,
	nullif(trim(OpenRelease),'') as OpenRelease,
	nullif(trim(DiscountPercent),'') as DiscountPercent,
	cast(DiscountAmount as decimal(18,4)) AS  DiscountAmount,
	nullif(trim(PartNum),'') as PartNum,
	cast(NeedbyDate as date) as NeedbyDate,
	nullif(trim(SalesPersonName),'') as SalesPersonName,
	case when TRIM(Department) = '110584' then 'SERV'
		else nullif(trim(WarehouseCode),'') 
	end as WarehouseCode,
	Department,
	nullif(trim(WarehouseCodeLines),'') as SORes1
    --,systemCreatedAt
	--,systemModifiedAt
FROM 
	 stage.CER_NO_BC_SalesOrder
WHERE left(nullif(trim(OrderNum),''),1) != 'T'
GO
PRINT N'Creating [dm].[FactStockBalance]'
GO

CREATE VIEW [dm].[FactStockBalance] AS

SELECT 
	CONVERT(bigint, [ItemWarehouseID]) AS StockBalanceID
    ,CONVERT(bigint, sb.CompanyID) AS CompanyID
	,CONVERT(bigint, SupplierID ) AS SupplierID
    ,CONVERT(bigint, PartID ) AS PartID
    ,CONVERT(bigint, WarehouseID ) AS WarehouseID
	,CONCAT(Right(Year(getdate()), 2), RIGHT(CONCAT('0', Month( getdate()) ),2), '-', c.Currency) AS CurrencyMonthKey
	
	,sb.Company
	,c.Currency
	,[BinNum]
	,[BatchNum]
	,[SupplierNum]
	,[PartNum]
	,[DelivTime]
	,[LastStockTakeDate]
	,[LastStdCostCalDate]
	,[SafetyStock]
	,[MaxStockQty]
	,[StockBalance]
	,[StockValue]
	,AvgCost
	,[ReserveQty]
	,[BackOrderQty]
	,[OrderQty]
	,[StockTakeDiff]
	,[ReOrderLevel]
	,OptimalOrderQty
	,sb.[WarehouseCode]
	,SBRes1
	,SBRes2
	,SBRes3
FROM 
	[dw].[StockBalance] AS sb
	LEFT JOIN dm.DimCompany AS c 
		ON sb.Company = c.Company
WHERE is_deleted != '1'
GO
PRINT N'Creating [dm_IN].[fctStockBalance]'
GO

CREATE VIEW [dm_IN].[fctStockBalance] AS

SELECT 
 sb.[StockBalanceID]
,sb.[CompanyID]
,sb.[SupplierID]
,sb.[PartID]
,sb.[WarehouseID]
,sb.[CurrencyMonthKey]
,sb.[Company]
,sb.[Currency]
,sb.[BinNum]
,sb.[BatchNum]
,sb.[SupplierNum]
,sb.[PartNum]
,sb.[DelivTime]
,sb.[LastStockTakeDate]
,sb.[LastStdCostCalDate]
,sb.[SafetyStock]
,sb.[MaxStockQty]
,sb.[StockBalance]
,sb.[StockValue]
,sb.[AvgCost]
,sb.[ReserveQty]
,sb.[BackOrderQty]
,sb.[OrderQty]
,sb.[StockTakeDiff]
,sb.[ReOrderLevel]
,sb.[OptimalOrderQty]
,sb.[WarehouseCode]
,sb.[SBRes1]
,sb.[SBRes2]
,sb.[SBRes3]
FROM dm.FactStockBalance sb
LEFT JOIN dbo.Company com ON sb.Company = com.Company
WHERE com.BusinessArea = 'Industrial Solutions' AND com.[Status] = 'Active'
GO
PRINT N'Creating [stage].[WID_FI_PriceSales]'
GO
CREATE TABLE [stage].[WID_FI_PriceSales]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[TargetMargin] [nvarchar] (50) NULL,
[Price] [decimal] (18, 4) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[ValidFrom] [date] NULL,
[ValidTo] [date] NULL,
[Qty1] [decimal] (18, 4) NULL,
[Discount1] [decimal] (18, 4) NULL,
[Price1] [decimal] (18, 4) NULL,
[Qty2] [decimal] (18, 4) NULL,
[Discount2] [decimal] (18, 4) NULL,
[Price2] [decimal] (18, 4) NULL,
[Qty3] [decimal] (18, 4) NULL,
[Discount3] [decimal] (18, 4) NULL,
[Price3] [decimal] (18, 4) NULL,
[Qty4] [decimal] (18, 4) NULL,
[Discount4] [decimal] (18, 4) NULL,
[Price4] [decimal] (18, 4) NULL,
[Qty5] [decimal] (18, 4) NULL,
[Discount5] [decimal] (18, 4) NULL,
[Price5] [decimal] (18, 4) NULL,
[Type] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vWID_FI_PriceSales]'
GO
CREATE VIEW [stage].[vWID_FI_PriceSales] AS
--COMMENT EMPTY FIELDS / ADD UPPER()TRIM() INTO PartID,CustomerID 2022-12-15 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', TRIM([CustomerNum]), '#', TRIM([PartNum]), '#', 'Sales'))) AS PriceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [Company])) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([CustomerNum]))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', TRIM([CustomerNum])))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', ''))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', TRIM([PartNum])))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([PartNum]))))) AS PartID
	,CONCAT([Company], '#', TRIM([CustomerNum])) AS CustomerCode
	,CONCAT([Company], '#', '') AS SupplierCode
	,CONCAT([Company], '#', TRIM([PartNum])) AS PartCode
	,PartitionKey

	,[Company]
	,TRIM([CustomerNum]) AS [CustomerNum]
	--,'' AS SupplierNum --it is Widni
	,TRIM([PartNum]) AS [PartNum]
	,[TargetMargin]
	--,'' AS Currency
	,FORMAT(TRY_CONVERT(decimal(18,2), [Price]), '### ### ###.##') AS [Price]
	,FORMAT(TRY_CONVERT(decimal(18,2), [DiscountPercent]), '### ### ###.##') AS [DiscountPercent]
	,ValidFrom AS [ValidFrom]
	,ValidTo AS [ValidTo]
	--,'' AS DelivTime
	--,'' AS DelivTimeUnit
	,FORMAT(TRY_CONVERT(decimal(18,2), [Qty1]), '### ### ###.##') AS [Qty1]
	,FORMAT(TRY_CONVERT(decimal(18,2), [Discount1]), '### ### ###.##') AS [Discount1]
	,FORMAT(TRY_CONVERT(decimal(18,2), [Price1]), '### ### ###.##') AS [Price1]

	,FORMAT(TRY_CONVERT(decimal(18,2), [Qty2]), '### ### ###.##') AS [Qty2]
	,FORMAT(TRY_CONVERT(decimal(18,2), [Discount2]), '### ### ###.##') AS [Discount2]
	,FORMAT(TRY_CONVERT(decimal(18,2), [Price2]), '### ### ###.##') AS [Price2]

	,FORMAT(TRY_CONVERT(decimal(18,2), [Qty3]), '### ### ###.##') AS [Qty3]
	,FORMAT(TRY_CONVERT(decimal(18,2), [Discount3]), '### ### ###.##') AS [Discount3]
	,FORMAT(TRY_CONVERT(decimal(18,2), [Price3]), '### ### ###.##') AS [Price3]

	,FORMAT(TRY_CONVERT(decimal(18,2), [Qty4]), '### ### ###.##') AS [Qty4]
	,FORMAT(TRY_CONVERT(decimal(18,2), [Discount4]), '### ### ###.##') AS [Discount4]
	,FORMAT(TRY_CONVERT(decimal(18,2), [Price4]), '### ### ###.##') AS [Price4]

	,FORMAT(TRY_CONVERT(decimal(18,2), [Qty5]), '### ### ###.##') AS [Qty5]
	,FORMAT(TRY_CONVERT(decimal(18,2), [Discount5]), '### ### ###.##') AS [Discount5]
	,FORMAT(TRY_CONVERT(decimal(18,2), [Price5]), '### ### ###.##') AS [Price5]
	,'Sales' AS PriceType
	,GETDATE() AS CreatedDate
FROM [stage].[WID_FI_PriceSales]
GO
PRINT N'Creating [dm].[FactSalesInvoice]'
GO







-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------


CREATE VIEW [dm].[FactSalesInvoice] AS

SELECT 
	CONVERT(BIGINT, SINV.SalesInvoiceID) AS SalesInvoiceID --
	,CONVERT(BIGINT, SINV.SalesOrderID) AS SalesOrderID --
	,CONVERT(BIGINT, SINV.SalesOrderNumID) AS SalesOrderNumID --
	,CONVERT(BIGINT, SINV.CustomerID) AS CustomerID --
	,CONVERT(BIGINT, SINV.CompanyID) AS CompanyID --
	,CONVERT(BIGINT, SINV.PartID) AS PartID --
	,CONVERT(BIGINT, SINV.WarehouseID) AS WarehouseID --
	,CONVERT(BIGINT,HASHBYTES('SHA2_256',CONCAT(SINV.Company,'#',NULLIF(TRIM(SINV.SalesPersonName),'')))) AS SalesPersonNameID -- -- NEW
	,CONVERT(bigint, SINV.DepartmentID) as DepartmentID
	,SINV.Company --
	,SINV.SalesInvoiceCode --   -- do we need code here?
	,SINV.SalesInvoiceDateID --
	,CONVERT(BIGINT, SINV.ProjectID) AS ProjectID --
	,NULLIF(TRIM(SINV.SalesPersonName),'') AS SalesPersonName --
	,SINV.CustomerNum --
	,SINV.PartNum --
	,SINV.PartType --
	,SINV.SalesOrderNum --
	,SINV.SalesOrderLine --
	,SINV.SalesOrderSubLine --
	,SINV.SalesOrderType --
	,SINV.SalesInvoiceNum --
	,SINV.SalesInvoiceLine --
	,SINV.SalesInvoiceType --
	,SINV.SalesInvoiceDate --
	,CONVERT(date, IIF(SINV.ActualDelivDate > '2025-01-01', '1900-01-01', SINV.ActualDelivDate)) AS ActualDelivDate --  --Take away the unreasonable dates /DZ 2021-10-25
	,SINV.SalesInvoiceQty --
	,SINV.UoM --
	,SINV.UnitPrice --
	,SINV.UnitCost --
	,SINV.DiscountPercent --
	,SINV.DiscountAmount --
	,SINV.TotalMiscChrg --
	,SINV.Currency --
	,SINV.ExchangeRate --
	,SINV.VATAmount --
	,SINV.CreditMemo --
	,SINV.Department --
	,SINV.ProjectNum --
	,SINV.WarehouseCode --
	,SINV.CostBearerNum --
	,SINV.CostUnitNum --
	,SINV.ReturnComment --
	,SINV.ReturnNum --
	,NULLIF(TRIM(SINV.SalesPersonName),'') AS OrderHandler -- 
	--,SINV.SalesPersonName AS OrderHandler -- replacement of the original one, with right rows
	,SINV.SalesChannel --COALESCE(SORD.SalesChannel, SINV.SalesChannel) AS SalesChannel is the original one which give less rows; -- differ test one as : SINV.SalesChannel /DZ 2022-10-24
	,IIF(SINV.Company = 'CNOCERT', MIN(SORD.NeedbyDate), COALESCE(MAX(SORD.NeedbyDate), '1900-01-01')) AS NeedbyDate --  -- 2021-06-18 /DZ
	,IIF(SINV.Company = 'CNOCERT', MIN(SORD.ExpDelivDate), COALESCE(MAX(SORD.ExpDelivDate), '1900-01-01')) AS ExpDelivDate --  -- 2021-06-18 /DZ
	,SORD.SalesOrderCode --differ test one
	,SORD.SalesOrderDateID --differ test one
	,SORD.SalesOrderDate --differ test one
	,SORD.ConfirmedDelivDate --differ test one  --added 2022-02-18 after TÖ /DZ
	,SORD.PartStatus --differ test one
	,SORD.AxInterSalesChannel --differ test one
	--,SINV.SalesPersonName
	--,CASE WHEN SINV.SalesOrderNum = '0' THEN 'PrimaryProduct' ELSE 'SubProduct' END AS ProductType   Removed and replaced by PartType /SM 2021-03-08
	,CASE WHEN SLED.SalesDueDate = ''	OR SLED.SalesDueDate IS NULL THEN '1900-01-01' ELSE SLED.SalesDueDate END AS DueDate --
	,CASE WHEN SLED.SalesLastPaymentDate = '' OR SLED.SalesLastPaymentDate IS NULL THEN '1900-01-01' ELSE SLED.SalesLastPaymentDate	END AS LastPaymentDate --
	,CASE 
		WHEN SLED.SalesLastPaymentDate <= '1900-01-01' OR SLED.SalesLastPaymentDate IS NULL OR SLED.SalesLastPaymentDate = '' THEN 'Not Paid'
		WHEN (		/* Maybe this logic for Partially Paid needs revision. The AND SalesLastPaymentDate conditions seems reduntant 
					as almost all cases are already catched in the previous condition for 'Not Paid'. And I'm positive there are
					partially paid invoices with real SalesLastPaymentDate values. Maybe change condition to 
					RemainingInvoiceAmount <> 0 AND InvoiceAmount > RemainingInvoiceAmount? And then add more logic depending on edge cases  /SM */
				SLED.RemainingInvoiceAmount <> 0 OR SLED.RemainingInvoiceAmount IS NOT NULL
				)
			AND (SLED.SalesLastPaymentDate <= '1901-01-01' OR SLED.SalesLastPaymentDate IS NULL OR SLED.SalesLastPaymentDate = ''
				) THEN 'Partially Paid'
		ELSE 'Paid'	END AS SalesInvoiceStatus -- /* Changed from InvoiceStatus to SalesInvoiceStatus /SM 2021-03-08 --added <= '1900-01-01' (CDKCERT) /DZ 20210920 */
	,CashDiscountOffered --
	,CashDiscountUsed --
	,IsUpdatingStock --
	, SINV.SIRes1
	, SINV.SIRes2 -- added 2022.12.06 /SB
	, SINV.SIRes3 -- added 2022.12.06 /SB
	, SINV.SIRes4 -- added 2022.12.06 /SB
	, SINV.SIRes5 -- added 2022.12.06 /SB
	, SINV.SIRes6 -- added 2022.12.06 /SB
FROM dw.SalesInvoice AS SINV
	LEFT JOIN (
		SELECT --Testing this to avoid duplicates. Might be process heavy /SM 2022-04-01
			SalesOrderCode
			,MIN(SalesOrderDate) AS SalesOrderDate
			,MIN(SalesOrderDateID) AS SalesOrderDateID
			,MAX(ConfirmedDelivDate) AS ConfirmedDelivDate
			,MAX(PartStatus) AS PartStatus
			,MAX(NeedbyDate) AS NeedbyDate
			,MAX(ExpDelivDate) AS ExpDelivDate
			,MAX(SalesChannel) AS SalesChannel
			,MAX(AxInterSalesChannel) AS AxInterSalesChannel
		FROM dw.SalesOrder
		GROUP BY SalesOrderCode
		) AS SORD ON SINV.SalesOrderCode = SORD.SalesOrderCode
	LEFT JOIN dw.SalesLedger AS SLED ON SINV.SalesLedgerID = SLED.SalesLedgerID
WHERE SINV.SalesInvoiceDate >= DATEADD(year, DATEDIFF(YEAR, 0, dateadd(year, - 4, GETDATE())), 0) --The entire basket. 
and (SINV.is_deleted != 1 OR SINV.is_deleted is null)
 GROUP BY --differ test one: no group by in test version. to be able to to dao so one has to all SORD. in the parent selections
	SINV.SalesOrderID
	,SINV.CompanyID
	,SINV.SalesOrderID
	,SINV.SalesOrderNumID
	,SINV.SalesOrderCode
	,SINV.SalesInvoiceID
	,SINV.ProjectID
	,SINV.SalesOrderID
	,SINV.CustomerID
	,SINV.PartID
	,SINV.WareHouseID
	,SINV.SalesInvoiceDateID
	,SINV.Company
	,SINV.SalesPersonName
	,SINV.CustomerNum
	,SINV.PartNum
	,SINV.SalesOrderNum
	,SINV.SalesOrderLine
	,SINV.SalesOrderSubLine
	,SINV.SalesOrderType
	,SINV.SalesInvoiceNum
	,SINV.SalesInvoiceLine
	,SINV.SalesInvoiceType
	,SINV.SalesInvoiceDate
	,SINV.ActualDelivDate
	,SINV.SalesInvoiceQty
	,SINV.UnitPrice
	,SINV.UnitCost
	,SINV.DiscountPercent
	,SINV.DiscountAmount
	,SINV.TotalMiscChrg
	,SINV.CreditMemo
	,SINV.WarehouseCode
	,SINV.ReturnComment
	,SINV.ReturnNum
	,SINV.Currency
	,SINV.ExchangeRate
	,SINV.PartType
	,SINV.UoM
	,SINV.VATAmount
	,SINV.SalesChannel
	,SINV.Department
	,SINV.ProjectNum
	,SINV.CostBearerNum
	,SINV.CostUnitNum
	,SINV.SalesInvoiceCode
	,SINV.CashDiscountOffered
	,SINV.CashDiscountUsed
	,SINV.IsUpdatingStock
	,SLED.SalesDueDate
	,SLED.SalesLastPaymentDate
	,SLED.RemainingInvoiceAmount
	,SORD.SalesOrderDateID
	,SORD.PartStatus
	,SORD.SalesOrderDate
	,SORD.ConfirmedDelivDate
	,SORD.SalesOrderCode
	,SORD.SalesChannel
	,SORD.AxInterSalesChannel
	,SINV.SIRes1
	,SINV.SIRes2
	,SINV.SIRes3
	,SINV.SIRes4
	,SINV.SIRes5
	,SINV.SIRes6
	,SINV.DepartmentID
GO
PRINT N'Creating [stage].[SCM_FI_OLine]'
GO
CREATE TABLE [stage].[SCM_FI_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderRelNum] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[DelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[SumUnitCost] [decimal] (18, 4) NULL,
[SumUnitPrice] [decimal] (18, 4) NULL,
[CurrExchRate] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[OpenRelease] [nvarchar] (50) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[Site] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [int] NULL,
[NeedbyDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (500) NULL,
[SalesReturnOrderNum] [nvarchar] (50) NULL,
[SalesReturnInvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[LineFlag] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vSCM_FI_OLine]'
GO

CREATE VIEW [stage].[vSCM_FI_OLine] AS
--COMMENT EMPTY FIELDS // ADD TRIM() UPPER() INTO PartID,CustomerID 2022-12-21 VA
SELECT distinct
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', OrderNum, '#', OrderLine))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(CustNum = '' OR CustNum IS NULL, 'MISSINGCUSTOMER', CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(PartNum = '' OR PartNum IS NULL, 'MISSINGPART', PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum)))) AS SalesOrderNumID
	,CONCAT(Company, '#', OrderNum, '#', OrderLine, '#', InvoiceNum) AS SalesOrderCode
	,CONVERT(int, replace(convert(date, OrderDate), '-', '')) AS SalesOrderDateID  
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey 

	,TRIM(Company) AS Company 
	,TRIM(CustNum) AS CustomerNum 
	,TRIM(OrderNum) AS SalesOrderNum
	,TRIM(OrderLine) AS SalesOrderLine
	,TRIM(OrderRelNum) AS SalesOrderSubLine
	,TRIM(OrderType) AS SalesOrderType
	--,'' AS SalesOrderCategory
	,TRIM(OrderRelNum) AS SalesOrderRelNum
	,OrderDate AS SalesOrderDate
	,NeedbyDate
	,DelivDate AS ExpDelivDate
	,CAST('1900-01-01' AS date) AS ActualDelivDate
	,CAST('1900-01-01' AS date) AS ConfirmedDelivDate
	,TRIM(InvoiceNum) AS SalesInvoiceNum
	,OrderQty AS SalesOrderQty
	,DelivQty
	,RemainingQty
	--,NULL AS SalesInvoiceQty
	--,'' AS UoM
	,UnitPrice
	,UnitCost
	,Currency
	,CurrExChRate AS ExchangeRate
	,OpenRelease
	,DiscountAmount
	,DiscountPercent
	,TRIM(PartNum) AS PartNum
	,LineFlag AS PartType -- DZ changed to LineFlag, it was ''
	,PartStatus
	,TRIM(SalesPerson) AS SalesPersonName
	,TRIM(WarehouseCode) AS WarehouseCode
	,'Normal Order Handling' AS SalesChannel
	,'Normal Order Handling' AS AxInterSalesChannel
	--,'' AS Department
	--,'' AS ProjectNum
	--,'' AS IndexKey
	--,'0' AS Cancellation
	--,'' AS SORes1
	--,'' AS SORes2
	--,'' AS SORes3
	--,NULL AS [TotalMiscChrg]
FROM stage.SCM_FI_OLine
GO
PRINT N'Creating [stage].[NOM_NO_SOLine]'
GO
CREATE TABLE [stage].[NOM_NO_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (100) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[PartClass] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (10) NULL,
[PartNum] [nvarchar] (50) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Indexkey] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[UpdateStock] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vNOM_NO_SOLine]'
GO
CREATE VIEW [stage].[vNOM_NO_SOLine] AS
--COMMENT EMPTY FIELDS 23-01-09 VA
SELECT
	--CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(InvoiceNum),'#',TRIM(InvoiceLine)))) AS SalesOrderID
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(PartNum), '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine))))) AS SalesInvoiceID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(OrderNum),'#',TRIM(OrderLine),'#',TRIM(InvoiceNum))))) AS SalesOrderID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustNum), '#', TRIM(InvoiceNum))))) AS SalesLedgerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(OrderNum))))) AS SalesOrderNumID  
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID 
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(OrderNum),'#',TRIM(OrderLine))) AS SalesOrderCode 
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(InvoiceNum))))) AS SalesInvoiceNumID --Redundant?
	,CONVERT(int, replace(convert(date,InvoiceDate),'-','')) AS SalesInvoiceDateID										--Redundant?
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(InvoiceNum),'#',TRIM(InvoiceLine))) AS SalesInvoiceCode						--Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey

	,UPPER(TRIM(Company)) AS Company
	,SalesPerson AS SalesPersonName
	,UPPER(TRIM(CustNum)) AS CustomerNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,CASE WHEN TRIM(OrderNum) = '0' THEN 'PrimaryPart' ELSE 'SubPart' END  AS PartType
	,UPPER(TRIM(OrderNum)) AS SalesOrderNum
	,UPPER(TRIM(OrderLine)) AS SalesOrderLine
	,UPPER(TRIM(OrderSubLine)) AS SalesOrderSubLine-- '0' as OrderSubLine
	,OrderType AS SalesOrderType
	,InvoiceNum AS SalesInvoiceNum
	,UPPER(TRIM(InvoiceLine)) AS SalesInvoiceLine
	--,'' AS SalesInvoiceType
	,CONVERT(date, InvoiceDate) AS SalesInvoiceDate
	,CONVERT(date, ActualDeliveryDate) AS ActualDelivDate
	,CASE WHEN CreditMemo = '1' THEN -1*ABS(SellingShipQty)
--		WHEN UnitCost = 0 THEN 0 
		ELSE SellingShipQty END AS SalesInvoiceQty
	,ABS(UnitPrice) AS UnitPrice --, 
	,ABS(UnitCost) AS UnitCost
	--,'' AS UoM
	--,0 AS DiscountPercent
	,DiscountAmount --CASE WHEN UnitPrice < 0 THEN ABS(DiscountAmount) ELSE -1*ABS(DiscountAmount) END AS 
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	,TotalMiscChrg
	--,0 AS VATAmount
	,Currency
	,ExchangeRate
	,CreditMemo
	,SalesChannel
	,UpdateStock AS IsUpdatingStock -- test 2022-05-02 Lars & DZ -- 2022-11-10 map over to IsUpdatingStock
	--,'' AS Department
	,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
	--,NULL AS DeliveryAddress
	--,'' AS CostBearerNum
	--,'' AS CostUnitNum
	--,'' AS ReturnComment
	--,'' AS ReturnNum
	,TRIM(PartClass) AS ProjectNum
	,MAX(Indexkey) AS IndexKey
	--,'' AS SIRes1
	--,'' AS SIRes2
	--,'' AS SIRes3
FROM stage.NOM_NO_SOLine
GROUP BY
	PartitionKey, Company, CustNum, OrderNum, OrderLine, OrderSubLine, OrderType, InvoiceNum, InvoiceLine, InvoiceDate, SellingShipQty, UnitPrice, UnitCost, Currency, ExchangeRate, TotalMiscChrg, DiscountAmount,PartNum, SalesPerson,  WarehouseCode, CreditMemo, SalesChannel, UpdateStock, PartClass, ActualDeliveryDate
GO
PRINT N'Creating [dbo].[udf_GetNumeric]'
GO
CREATE FUNCTION [dbo].[udf_GetNumeric]
(
  @strAlphaNumeric VARCHAR(256)
)
RETURNS VARCHAR(256)
AS

BEGIN
  DECLARE @intAlpha INT
  SET @intAlpha = PATINDEX('%[^0-9]%', @strAlphaNumeric)
  BEGIN
    WHILE @intAlpha > 0
    BEGIN
      SET @strAlphaNumeric = STUFF(@strAlphaNumeric, @intAlpha, 1, '' )
      SET @intAlpha = PATINDEX('%[^0-9]%', @strAlphaNumeric )
    END
  END
  RETURN ISNULL(@strAlphaNumeric,0)
END
GO
PRINT N'Creating [stage].[CER_SE_Supplier]'
GO
CREATE TABLE [stage].[CER_SE_Supplier]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[Name] [nvarchar] (50) NULL,
[CustomerCode] [nvarchar] (10) NULL,
[Addressline1] [nvarchar] (50) NULL,
[Addressline2] [nvarchar] (50) NULL,
[Addressline3] [nvarchar] (50) NULL,
[ZIP] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[City] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[Region] [nvarchar] (50) NULL,
[SupplierCategory] [nvarchar] (50) NULL,
[Reference] [nvarchar] (50) NULL,
[BankAccountNum] [nvarchar] (34) NULL,
[VATNum] [nvarchar] (20) NULL,
[OrganizationNum] [nvarchar] (100) NULL,
[ABCCode] [nvarchar] (10) NULL,
[TelephoneNum] [nvarchar] (20) NULL,
[Email] [nvarchar] (100) NULL,
[CodeOfConduct] [nvarchar] (500) NULL,
[MinOrderQty] [nvarchar] (50) NULL,
[InternalName] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_SE_Supplier]'
GO

CREATE view [stage].[vCER_SE_Supplier] AS
--COMMENT EMPTY FIELDS // ADD TRIM() INTO SupplierID 23-01-23 VA
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID
--	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT([Company],'#',TRIM([SupplierNum]))))) AS SupplierID
    ,UPPER(CONCAT([Company],'#',TRIM([SupplierNum]))) AS SupplierCode --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Company])))) AS CompanyID
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,TRIM(UPPER([SupplierNum])) AS [SupplierNum]
	--,'' AS MainSupplierName
	,[dbo].[ProperCase]([Name]) AS SupplierName
	,[AddressLine1]
    ,[AddressLine2]
    ,[AddressLine3]
	,[TelephoneNum]
	,[Email]
	,[dbo].[udf_GetNumeric]([Addressline3]) AS ZipCode
	,trim(substring(replace([dbo].[ProperCase](AddressLine3),' ', ''), 6, 100))  AS [City]
	,[District]
	,CASE WHEN LEN(TRIM(supplier.CountryCode)) = 3 then cc.[Alpha-2 code]
	ELSE IIF(supplier.CountryName is null, 'SE', supplier.CountryCode) 
	end AS CountryCode
	,IIF(supplier.CountryName is null, 'Sweden', supplier.[CountryName]) AS CountryName
	,[Region]
	,[SupplierCategory]
	,[Reference] AS [SupplierResponsible]
	,[dbo].[ProperCase](TRIM(concat (addressline1+' '+ addressline2, null))) AS AddressLine
	,[dbo].[ProperCase](TRIM(concat_ws(',',coalesce([dbo].[ProperCase](supplier.CountryName),null),IIF(City= ' ',null,trim(substring(replace([dbo].[ProperCase](AddressLine3),' ', ''), 6, 100))),IIF(ZIP= ' ',null,[dbo].[udf_GetNumeric]([Addressline3]))
	,coalesce(IIF([addressline1]= ' ',null,[addressline1]),IIF([addressline2]= ' ',null,[addressline2]))
	,coalesce(IIF([addressline2]= ' ',null,[addressline2]),IIF([addressline3]= ' ',null,[addressline3]))))) AS FullAddressLine
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [BankAccountNum])) AS [AccountNum] --required by Ian Morgan & approved by Emil T on 20200630. --Should likely be changed to Azure mask 2021-03-15 /SM
	,[VATNum]
	,OrganizationNum
	,[InternalName] AS [InternalExternal]
	,[CodeOfConduct]
	,[CustomerCode] AS CustomerNum
	,[ABCCode] AS [SupplierScore]
	,TRY_CONVERT(decimal(18,4),[MinOrderQty]) AS [MinOrderQty]
	--,0 AS [MinOrderValue]
	--,'' AS [Website]
	--,'' AS [Comments]
	--,'' AS SRes1
	--,'' AS SRes2
	--,'' AS SRes3
FROM [stage].[CER_SE_Supplier] as supplier
	left join dbo.CountryCodes as cc
		on supplier.CountryCode = cc.[Alpha-3 code]
GO
PRINT N'Creating [stage].[CER_NO_PurchaseInvoice]'
GO
CREATE TABLE [stage].[CER_NO_PurchaseInvoice]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaseOrderType] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[PurchaseInvoiceLine] [nvarchar] (50) NULL,
[PurchaseInvoiceType] [nvarchar] (50) NULL,
[PurchaseInvoiceDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PurchaseInvoiceQty] [decimal] (18, 4) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[VATAmount] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PurchaserName] [nvarchar] (100) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[PurchaseChannel] [nvarchar] (50) NULL,
[LastPaymentNum] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_NO_PurchaseInvoice]'
GO
CREATE   VIEW [stage].[vCER_NO_PurchaseInvoice] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum),'#',TRIM(PurchaseOrderNum),'#',TRIM(PurchaseOrderLine),'#'
		,TRIM(PurchaseOrderSubLine),'#',TRIM(PurchaseInvoiceNum), '#', TRIM(PurchaseInvoiceLine), '#', PartNum, '#', UnitPrice, '#', DiscountAmount
		, '#', PurchaseInvoiceQty, '#', TRIM(WarehouseCode),'#',TRIM(LastPaymentNum))))) AS PurchaseInvoiceID --'#', PurchaseOrderType 
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseInvoiceNum), '#', TRIM(PurchaseInvoiceLine), '#', PartNum  )) AS PurchaseInvoiceCode
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum))) AS PurchaseOrderNumCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum),'#',TRIM(PurchaseOrderLine),'#',TRIM(PurchaseInvoiceNum))))) AS PurchaseOrderID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum))))) AS SupplierID
    ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT(int, replace(PurchaseInvoiceDate,'-','')) AS PurchaseInvoiceDateID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#', TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum),'#',TRIM(PurchaseOrderNum),'#',TRIM(LastPaymentNum))))) AS PurchaseLedgerID --match PurchaseLedgerID in [vSCM_FI_PurchaseLedger]
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum),'#',TRIM(PurchaseOrderNum))) AS PurchaseOrderCode
	,PartitionKey

	,UPPER(TRIM(Company)) AS Company
	,UPPER(TRIM(PurchaseOrderNum)) AS PurchaseOrderNum
	,UPPER(TRIM(PurchaseOrderLine)) AS PurchaseOrderLine
	,UPPER(TRIM(PurchaseOrderSubLine)) AS PurchaseOrderSubLine
	,PurchaseOrderType
	,UPPER(TRIM(PurchaseInvoiceNum)) AS PurchaseInvoiceNum 
	,UPPER(TRIM(PurchaseInvoiceLine)) AS PurchaseInvoiceLine
	,PurchaseInvoiceType
	,PurchaseInvoiceDate
	,ActualDelivDate
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,PurchaseInvoiceQty
	,UoM
	,UnitPrice
	--,0 AS DiscountPercent
	,DiscountAmount
	,TotalMiscChrg
	,VATAmount
	,Currency
	,ExchangeRate
	,CreditMemo
	,PurchaserName
	,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
	,PurchaseChannel
	--,'' AS Comment
	--,'' AS PIRes1
	--,'' AS PIRes2
	--,'' AS PIRes3
	--,'' AS OrderDelivLineNum
FROM stage.CER_NO_PurchaseInvoice
Where PurchaseInvoiceNum IS NOT NULL -- some rows only containing VATAmount has null on almost everything else /SM 2021-05-25
GROUP BY
	PartitionKey, Company, PurchaseOrderNum, PurchaseInvoiceNum, SupplierNum, PartNum, PurchaseOrderLine, PurchaseOrderSubLine, PurchaseInvoiceQty,UoM, UnitPrice, WarehouseCode,PurchaserName, 
	PurchaseInvoiceLine, PurchaseInvoiceType, PurchaseInvoiceDate, ActualDelivDate, TotalMiscChrg, VATAmount, CreditMemo, PurchaseOrderType,DiscountAmount,Currency,ExchangeRate,PurchaseChannel, LastPaymentNum --, PurchaseOrderType, [Site], OrderDelivLineNum, , DiscountPercent, PurchaserName, PurchaseInvoiceLine, PurchaseInvoiceType, PurchaseInvoiceDate, ActualDelivDate, TotalMiscChrg, CreditMemo
GO
PRINT N'Creating [stage].[CER_DK_SOLine]'
GO
CREATE TABLE [stage].[CER_DK_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderRel] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[PrePostUnitCost] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[VAT] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Indexkey] [nvarchar] (50) NULL,
[Site] [nvarchar] (50) NULL,
[ReturnNum] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (max) NULL,
[ProjectNum] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_DK_SOLine]'
GO
CREATE VIEW [stage].[vCER_DK_SOLine] AS
-- COMMENT empty fields / Add TRIM(Company) into WarehouseID/CustomerID/PartID 12-12-2022 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company,  TRIM(InvoiceNum), '#', TRIM(InvoiceLine) )))) AS SalesInvoiceID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER((CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ), '#', TRIM(InvoiceNum)))))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#',  TRIM(WarehouseCode))))) AS WareHouseID
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(InvoiceNum))) AS SalesOrderCode -- the key for dm.FactSalesOrder
	,UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine), '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) ))) AS SalesInvoiceCode
	,CONVERT(int, replace(convert(date,InvoiceDate), '-', '')) AS SalesInvoiceDateID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT( upper(trim(Company)), '#', UPPER(trim(ProjectNum))) )) AS ProjectID
	,PartitionKey

	,UPPER(Company) AS Company
	,SalesPersonName AS SalesPersonName
	,UPPER(TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) )) AS CustomerNum
	,UPPER(TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) )) AS PartNum
	,CASE WHEN TRIM(OrderNum) = '0' THEN 'PrimaryPart' ELSE 'SubPart' END  AS PartType
	,UPPER(TRIM(OrderNum)) AS SalesOrderNum
	,UPPER(TRIM(OrderLine)) AS SalesOrderLine
	,UPPER(TRIM(OrderSubLine)) AS SalesOrderSubLine
	--,'' AS SalesOrderType
	,UPPER(TRIM(InvoiceNum)) AS SalesInvoiceNum
	,UPPER(TRIM(InvoiceLine)) AS SalesInvoiceLine
	--,'' AS SalesInvoiceType
	,CONVERT(date, InvoiceDate) AS SalesInvoiceDate
	,ActualDeliveryDate AS ActualDelivDate
	,SellingShipQty AS [SalesInvoiceQty]
	--,'' AS UoM
	,UnitPrice
	,UnitCost
	,IIF((SellingShipQty*UnitPrice) <> 0, DiscountAmount/(SellingShipQty*UnitPrice), 0) AS [DiscountPercent]
	,DiscountAmount
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	,TotalMiscChrg
	--,NULL AS [VATAmount]
	,Currency
	,ExchangeRate
	,CreditMemo
	,CASE WHEN SalesChannel = 'WEB-RFQ' THEN 'RFQ'
		WHEN SalesChannel = 'WEB-ORDRE' THEN 'Webshop'
		WHEN SalesChannel = 'DC-ORDRE' THEN 'PDF'
		ELSE 'Normal Order Handling' END AS SalesChannel
	--,'' AS [Department]
	,TRIM(WarehouseCode) AS WarehouseCode
	--,NULL AS DeliveryAddress
	--,'' AS [CostBearerNum]
	--,'' AS [CostUnitNum]
	,[ReturnComment]
	,TRIM([ReturnNum]) AS [ReturnNum]
	,UPPER(trim(ProjectNum)) as [ProjectNum]
	,Indexkey
	--,'' AS SIRes1
	--,'' AS SIRes2
	--,'' AS SIRes3

FROM 
	stage.CER_DK_SOLine
GO
PRINT N'Creating [dw].[Warehouse]'
GO
CREATE TABLE [dw].[Warehouse]
(
[WarehouseID] [binary] (32) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[WarehouseName] [nvarchar] (100) NULL,
[WarehouseDistrict] [nvarchar] (100) NULL,
[WarehouseAddress] [nvarchar] (200) NULL,
[WarehouseDescription] [nvarchar] (max) NULL,
[WarehouseType] [nvarchar] (50) NULL,
[WarehouseCountry] [nvarchar] (100) NULL,
[WarehouseSite] [nvarchar] (100) NULL,
[PartitionKey] [nvarchar] (50) NULL,
[is_deleted] [bit] NULL,
[is_inferred] [bit] NULL,
[IsActiveRecord] [bit] NULL,
[WhRes1] [nvarchar] (100) NULL,
[WhRes2] [nvarchar] (100) NULL,
[WhRes3] [nvarchar] (100) NULL,
[ZipCode] [nvarchar] (8) NULL,
[City] [nvarchar] (100) NULL,
[State] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL
)
GO
PRINT N'Creating primary key [PK_Warehouse] on [dw].[Warehouse]'
GO
ALTER TABLE [dw].[Warehouse] ADD CONSTRAINT [PK_Warehouse] PRIMARY KEY NONCLUSTERED ([WarehouseID])
GO
PRINT N'Creating [dm].[DimWarehouse]'
GO

CREATE VIEW [dm].[DimWarehouse] AS

SELECT
	--CONVERT(bigint, CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', [WarehouseCode])))) AS WareHouseID 
	CONVERT(bigint,WareHouseID ) AS WareHouseID 
	,CONVERT(bigint, CONVERT([binary](32), HASHBYTES('SHA2_256', [Company]))) AS CompanyID
	,[Company]
	,MAX([WarehouseCode]) AS [WarehouseCode]
	,MAX([WarehouseName]) AS [WarehouseName]
	,MAX([WarehouseDistrict]) AS [WarehouseDistrict]
	,MAX([WarehouseAddress]) AS [WarehouseAddress]
	,MAX([WarehouseDescription]) AS [WarehouseDescription]
	,MAX([WarehouseType]) AS [WarehouseType]
	,MAX([WarehouseCountry]) AS [WarehouseCountry]
	,MAX([WarehouseSite]) AS [WarehouseSite]
FROM 
	dw.Warehouse
WHERE [WarehouseName] <> 'Exclude' OR WarehouseName IS NULL -- Added Or IS NULL condition since those rows need to be included. The Condition <> 'Exclude' does remove WarehouseName with value NULL /SM 2021-05-07
GROUP BY
	[WarehouseID], [Company], [WarehouseCode]
GO
PRINT N'Creating [dm_IN].[dimWarehouse]'
GO



CREATE VIEW [dm_IN].[dimWarehouse] AS

SELECT 
 whs.[WareHouseID]
,whs.[CompanyID]
,whs.[Company]
,whs.[WarehouseCode]
,whs.[WarehouseName]
,whs.[WarehouseDistrict]
,whs.[WarehouseAddress]
,whs.[WarehouseDescription]
,whs.[WarehouseType]
,whs.[WarehouseCountry]
,whs.[WarehouseSite]

FROM dm.DimWarehouse as whs
WHERE Company  in ('OCSSE')  -- Industry basket
GO
PRINT N'Creating [stage].[NOM_SE_SupplierAgreement]'
GO
CREATE TABLE [stage].[NOM_SE_SupplierAgreement]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[AgreementCode] [nvarchar] (50) NULL,
[AgreementDescription] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[DiscountPercent] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[AgreementQty] [nvarchar] (50) NULL,
[UoM] [nvarchar] (50) NULL,
[DelivTime] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[SupplierTerms] [nvarchar] (100) NULL,
[AgreementStart] [nvarchar] (50) NULL,
[AgreementEnd] [nvarchar] (50) NULL,
[SARes1] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vNOM_SE_SupplierAgreement]'
GO
CREATE VIEW [stage].[vNOM_SE_SupplierAgreement] AS 
--COMMENT EMPTY FIELD 2022-12-20
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([PartNum]), '#', TRIM([SupplierNum]), '#', [AgreementStart], '#', [AgreementEnd])))) AS SupplierAgreementID --CustomerAgreementID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM([SupplierNum]))))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([SupplierNum]))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(Currency)))) AS CurrencyID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Trim(Company), '#', TRIM([PartNum]))))) AS PartID
	,[PartitionKey]

	,UPPER([Company]) AS [Company]
	,UPPER(TRIM([SupplierNum])) AS SupplierNum
	,UPPER(TRIM([PartNum])) AS PartNum
	,AgreementCode AS [AgreementCode]
	,AgreementDescription AS [AgreementDescription]
	,[DiscountPercent]
	,[UnitPrice] AS [UnitPrice]
	,AgreementQty AS [AgreementQty]
	,Currency AS [Currency]
	,CONVERT(int, [DelivTime]) AS [DelivTime]
	,IIF([AgreementStart] = 0, '1900-01-01', CONVERT(Date, [AgreementStart])) AS [AgreementStart]
	,IIF([AgreementEnd] = 0, '1900-01-01', CONVERT(Date, [AgreementEnd])) AS [AgreementEnd]
	,[SupplierTerms]
	--,0	AS FulfilledQty
	--,0  AS RemainingQty
	,[SARes1] AS UoM
	,[SARes1]
	--,'' AS [SARes2]
	--,'' AS [SARes3]
FROM 
	[stage].[NOM_SE_SupplierAgreement]
GROUP BY [PartitionKey], [Company], [SupplierNum], [PartNum], AgreementCode, AgreementDescription, [DiscountPercent], AgreementQty, Currency, [DelivTime], [SupplierTerms], [UnitPrice],[AgreementStart],[AgreementEnd], [SARes1]
GO
PRINT N'Creating [stage].[OCS_SE_SalesBudget]'
GO
CREATE TABLE [stage].[OCS_SE_SalesBudget]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[YearMonth] [nvarchar] (50) NOT NULL,
[CustomerNum] [nvarchar] (50) NULL,
[ProjectNum] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (200) NULL,
[BudgetDescription] [nvarchar] (500) NULL,
[BudgetSales] [decimal] (18, 4) NULL,
[BudgetCost] [decimal] (18, 4) NULL,
[BudgetGrossProfit] [decimal] (18, 4) NULL,
[BudgetGrossMargin] [decimal] (18, 4) NULL,
[AccountNum] [nvarchar] (50) NULL,
[BudgetNo] [nvarchar] (50) NULL,
[LnNo] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vOCS_SE_SalesBudget]'
GO














/****** Script for SelectTopNRows command from SSMS  ******/

CREATE VIEW [stage].[vOCS_SE_SalesBudget] AS
-- This view has proven to be problematic to find a reliable PK and since it's sort of a fact table it's not required to have a strong PK in the same way. But our current set up requires a PK due to using MERGE. 
-- I construct an artificial PK with ROW_NUMBER instead of including all t
WITH CTE AS (
SELECT distinct
	 PartitionKey
 	  ,[Company]
	  ,ProjectNum
	  ,AccountNum
      ,YearMonth
      ,CustomerNum
	  ,LEFT(YearMonth,4) + '-' + RIGHT(YearMonth,2) + '-' + '01'	as test
	  ,TRY_CAST(LEFT(YearMonth,4) + '-' + RIGHT(YearMonth,2) + '-' + '01' AS date) AS test2
	  ,[ProductGroup]
      ,[CustomerGroup]
	  ,SalesPersonName
	  ,[BudgetDescription]
      ,BudgetSales AS SalesInvoiceAmount
      ,BudgetCost	AS CostInvoiceAmount
	  ,BudgetGrossProfit AS GrossProfitInvoiced
	  ,BudgetGrossMargin AS [GrossMarginInvoiced%]
	  ,ROW_NUMBER() OVER (PARTITION BY [AccountNum], CustomerNum, YearMonth, ProjectNum, BudgetDescription ORDER BY BudgetSales, BudgetCost) AS RowNum
	   FROM [stage].[OCS_SE_SalesBudget]
	   WHERE YearMonth <> 0
)


SELECT 
	 CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#', YearMonth, '#', TRIM(CustomerNum), '#', TRIM(ProjectNum), '#', TRIM(AccountNum), '#',  TRIM([BudgetDescription]), '#', RowNum )))) AS BudgetID
	 ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	 ,PartitionKey
	  ,YearMonth AS BudgetPeriod
      ,CAST(LEFT(YearMonth,4) + '-' + RIGHT(YearMonth,2) + '-' + '01' AS date)	AS BudgetPeriodDate 
	  ,'YearMonth' AS PeriodType
		,LEFT(YearMonth,4) AS [YEAR]
		,RIGHT(YearMonth,2) AS [Month]

	  ,[Company]
      ,CustomerNum AS CustomerNum
	  ,ProjectNum
	  ,AccountNum
      ,[CustomerGroup]
	  ,[ProductGroup]
      , '' AS SalesPersonCode
	  ,SalesPersonName
	  ,[BudgetDescription]
      ,SalesInvoiceAmount	AS BudgetSales
      ,CostInvoiceAmount	AS BudgetCost
	  ,'SEK' AS Currency
	  ,GrossProfitInvoiced
	  ,[GrossMarginInvoiced%]	AS GrossMarginInvoiced
	  ,CONCAT(UPPER(Company), '.',CustomerNum ) AS [CustomerKey]
      ,CONCAT(UPPER(Company), '.',CustomerGroup) AS [CustomerGroupKey]
      ,CONCAT(UPPER(Company), '.',ProductGroup) AS[ProductGroupKey]
      ,CONCAT(UPPER(Company), '.','')	AS[SalesPersonCodeKey]
      ,CONCAT(UPPER(Company), '.',SalesPersonName)	AS [SalesPersonNameKey]
      ,CONCAT(UPPER(Company), '.',ProjectNum)	AS [ProjectKey]
      ,CONCAT(UPPER(Company), '.',AccountNum)	AS [AccountKey]
	   FROM CTE
GO
PRINT N'Creating [stage].[Nom_DK_StocktransactionOB_Tobias1stPatch]'
GO
CREATE TABLE [stage].[Nom_DK_StocktransactionOB_Tobias1stPatch]
(
[Company] [nvarchar] (50) NULL,
[IndexKey] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[TransactionCode] [nvarchar] (50) NULL,
[TransactionDescription] [nvarchar] (50) NULL,
[IssuerReceiverNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[BinNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[TransactionDate] [nvarchar] (50) NULL,
[TransactionTime] [nvarchar] (50) NULL,
[TransactionQty] [nvarchar] (50) NULL,
[TransactionValue] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[CostPrice] [nvarchar] (50) NULL,
[SalesUnitPrice] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[Reference] [nvarchar] (50) NULL,
[AdjustmentDate] [nvarchar] (50) NULL,
[STRes1] [nvarchar] (50) NULL,
[STRes2] [nvarchar] (50) NULL,
[STRes3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vNOM_DK_StockTransactionOB]'
GO
CREATE VIEW [stage].[vNOM_DK_StockTransactionOB] AS 

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', (IndexKey)))) AS StockTransactionID
	,[Company]
	,TRIM([WarehouseCode]) AS WarehouseCode
	,TransactionCode
	,TransactionDescription
	,IIF(TRIM(IssuerReceiverNum)='', NULL,TRIM(IssuerReceiverNum)) AS IssuerReceiverNum
	,IIF(TRIM([OrderNum])='', NULL,TRIM(OrderNum)) AS OrderNum
	,OrderLine
	,IIF(TRIM([InvoiceNum])='', NULL,TRIM(InvoiceNum)) AS InvoiceNum
	,InvoiceLine
	,UPPER(TRIM([PartNum])) AS [PartNum]
	,IIF(TRIM([BinNum])='', NULL,TRIM(BinNum)) AS BinNum
	,IIF(TRIM([BatchNum])='', NULL,TRIM(BatchNum)) AS BatchNum
	,CONVERT(date, TransactionDate) AS TransactionDate
	,TransactionTime
	,IIF(TransactionQty IS NULL, 0, TRY_CONVERT(decimal(18,2), REPLACE(REPLACE(TransactionQty, ' ', ''), ',', '.'))) AS TransactionQty --TRY_CONVERT(decimal(18,0), REPLACE(TransactionQty, '.', ','))
	,IIF(TransactionValue IS NULL, 0, TRY_CONVERT(decimal(18,2), REPLACE(REPLACE(TransactionValue, ' ', ''), ',', '.'))) AS TransactionValue --TRY_CONVERT(decimal(18,2), REPLACE(TransactionValue, '.', ','))
	,IIF(TransactionQty IS NULL, 0, TRY_CONVERT(decimal(18,2), REPLACE(REPLACE(CostPrice, ' ', ''), ',', '.'))) AS [CostPrice] --TRY_CONVERT(decimal(18,2),  REPLACE([CostPrice], '.', ','))
	,IIF(SalesUnitPrice IS NULL, 0, TRY_CONVERT(decimal(18,2), REPLACE(REPLACE(SalesUnitPrice, ' ', ''), ',', '.'))) AS SalesUnitPrice --TRY_CONVERT(decimal(18,2),  REPLACE(SalesUnitPrice, '.', ','))
	,IIF(TRIM([Currency])='', NULL, TRIM(Currency)) AS Currency
	,[Reference]
	,CONVERT(date, AdjustmentDate) AS AdjustmentDate
	,'' AS InternalExternal
	,'2023-02-15' AS CreateDate
	,'' AS STRes1
	,'' AS STRes2
	,'' AS STRes3

	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER([Company]))) AS CompanyID
    ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT([Company],'#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,IIF(TransactionCode in ('930', '931', '936'), CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([InvoiceNum])))), NULL) AS PurchaseInvoiceID
	,IIF(TransactionCode in ('930', '931', '936'), CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([OrderNum])))), NULL) AS PurchaseOrderNumID
	,IIF(TransactionCode in ('800', '801', '815'), CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([OrderNum])))), NULL) AS SalesOrderNumID
	,IIF(TransactionCode in ('800', '801', '815'), CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([InvoiceNum])))), NULL) AS SalesInvoiceID
	,IIF(TransactionCode in ('800', '801', '815'), CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM(IssuerReceiverNum)))), NULL) AS CustomerID
	,IIF(TransactionCode in ('930', '931', '936'), CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM(IssuerReceiverNum)))), NULL) AS SupplierID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',TRIM([Currency]))) AS CurrencyID
	,'2023-02-15 08:00' AS PartitionKey
	,IndexKey

FROM [stage].[Nom_DK_StocktransactionOB_Tobias1stPatch]

--main OB: [stage].[Nom_DK_StockTransactionOB]
GO
PRINT N'Creating [dbo].[SplitAddress]'
GO


CREATE FUNCTION [dbo].[SplitAddress] (
    @Address NVARCHAR(1000)
)
RETURNS NVARCHAR(1000)
AS
BEGIN
    DECLARE @Output NVARCHAR(1000) = ''
    DECLARE @SplitAddress TABLE (
        Id INT IDENTITY(1,1),
        Value NVARCHAR(500)
    )

    INSERT INTO @SplitAddress (Value)
    SELECT value FROM STRING_SPLIT(@Address, ' ')

    DECLARE @StreetAddress NVARCHAR(500)
    DECLARE @ZipCode NVARCHAR(10)
    DECLARE @City NVARCHAR(500)

    SET @StreetAddress = ''
    SET @ZipCode = ''
    SET @City = ''

    SELECT @StreetAddress = @StreetAddress + Value + ' '
    FROM @SplitAddress
    WHERE Id <= (SELECT MAX(Id) - 2 FROM @SplitAddress)

    SELECT @ZipCode = Value
    FROM @SplitAddress
    WHERE Id = (SELECT MAX(Id) - 1 FROM @SplitAddress)

    SELECT @City = Value
    FROM @SplitAddress
    WHERE Id = (SELECT MAX(Id) FROM @SplitAddress)

    SET @Output = LTRIM(RTRIM(@StreetAddress)) + '^' + LTRIM(RTRIM(@ZipCode)) + '^' + LTRIM(RTRIM(@City))

    RETURN @Output
END
GO
PRINT N'Creating [stage].[CER_FI_Supplier]'
GO
CREATE TABLE [stage].[CER_FI_Supplier]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[MainSupplierName] [nvarchar] (100) NULL,
[SupplierName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[AddressLine3] [nvarchar] (100) NULL,
[TelephoneNum] [nvarchar] (20) NULL,
[Email] [nvarchar] (200) NULL,
[City] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (100) NULL,
[Region] [nvarchar] (50) NULL,
[SupplierCategory] [nvarchar] (50) NULL,
[SupplierResponsible] [nvarchar] (50) NULL,
[AccountNum] [nvarchar] (50) NULL,
[VATNum] [nvarchar] (50) NULL,
[OrganizationNum] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[CodeOfConduct] [nvarchar] (2) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[Reference] [nvarchar] (100) NULL,
[SupplierScore] [nvarchar] (50) NULL,
[SupplierType] [nvarchar] (50) NULL,
[MinOrderQty] [nvarchar] (50) NULL,
[Website] [nvarchar] (100) NULL,
[Comments] [nvarchar] (max) NULL,
[IsBusinessGroupInternal] [nvarchar] (50) NULL,
[IsCompanyGroupInternal] [nvarchar] (50) NULL,
[IsMaterialSupplier] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_FI_Supplier]'
GO


CREATE VIEW [stage].[vCER_FI_Supplier] AS

SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID
    ,UPPER(CONCAT([Company],'#',TRIM([SupplierNum]))) AS SupplierCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([SupplierNum])) AS SupplierNum
	,[dbo].[ProperCase](TRIM(MainSupplierName)) AS MainSupplierName
	,[dbo].[ProperCase](TRIM(SupplierName)) AS SupplierName
    ,TRIM([AddressLine2]) AS AddressLine2
    ,TRIM([AddressLine3]) AS AddressLine3
	,[TelephoneNum]
	,[Email]
	,PARSENAME(REPLACE(dbo.SplitAddress(CONCAT(AddressLine1,' ',AddressLine2,' ',AddressLine3)), '^', '.'), 3) AS AddressLine1 -- TRIM([AddressLine1]) AS AddressLine1 2023-04-04 SB & TO 
    ,IIF(ZipCode is Null,PARSENAME(REPLACE(dbo.SplitAddress(CONCAT(AddressLine1,' ',AddressLine2,' ',AddressLine3)), '^', '.'), 2), trim(ZipCode)) AS ZipCode -- ,TRIM([ZipCode]) AS ZipCode 2023-04-04 SB & TO 
    ,IIF(City IN (Null,''),PARSENAME(REPLACE(dbo.SplitAddress(CONCAT(AddressLine1,' ',AddressLine2,' ',AddressLine3)), '^', '.'), 1), trim(City)) AS City -- ,TRIM([ZipCode]) AS ZipCode 2023-04-04 SB & TO 
	,District
	,CASE WHEN len(trim(supplier.CountryCode)) = 3 THEN cc.[Alpha-2 code] ELSE IIF(supplier.CountryName is null, 'FI', supplier.CountryCode) END AS CountryCode
    ,IIF(supplier.CountryName is null, 'Finland', supplier.CountryName) AS CountryName
	,[Region] 
	,TRIM([SupplierCategory]) AS SupplierCategory 
	,TRIM([SupplierResponsible]) AS SupplierResponsible
	,[dbo].[ProperCase](TRIM(concat (addressline1+' '+ addressline2, null))) AS AddressLine
	,[dbo].[ProperCase](TRIM(concat_ws(',',coalesce([dbo].[ProperCase](supplier.CountryName),null),IIF(City= ' ',null,trim(substring(replace([dbo].[ProperCase](AddressLine3),' ', ''), 6, 100))),IIF(ZipCode= ' ',null,[dbo].[udf_GetNumeric]([Addressline3]))
		,coalesce(IIF([addressline1]= ' ',null,[addressline1]),IIF([addressline2]= ' ',null,[addressline2]))
		,coalesce(IIF([addressline2]= ' ',null,[addressline2]),IIF([addressline3]= ' ',null,[addressline3]))))) AS FullAddressLine
	,([AccountNum]) AS [AccountNum] --required by Ian Morgan & approved by Emil T on 20200630
	,[VATNum]
	,CASE WHEN (CountryCode = 'SE' OR supplier.CountryName = 'Sweden') AND Left(Vatnum, 2) = 'SE' THEN LEFT(Vatnum, 12)
		ELSE Vatnum END OrganizationNum
	,[InternalExternal]
	,CONVERT(bit, IsBusinessGroupInternal) AS IsBusinessGroupInternal
	,CONVERT(bit, IsCompanyGroupInternal) AS IsCompanyGroupInternal
	,CONVERT(bit, IsMaterialSupplier) AS IsMaterialSupplier
	,[CodeOfConduct]
	,CustomerNum
	,TRIM([SupplierScore]) AS SupplierScore
	,COALESCE(TRY_CONVERT(decimal(18,4), [MinOrderQty]),0) AS [MinOrderQty]
	,NULL AS MinOrderValue	
	,[Website]
	,TRIM(supplier.[Comments]) AS Comments
	--,'' AS SRes1
	--,'' AS SRes2
	--,'' AS SRes3
FROM [stage].[CER_FI_Supplier] as supplier
	LEFT JOIN dbo.CountryCodes as cc
		ON supplier.CountryCode = cc.[Alpha-3 code]
--GROUP BY 
--      [PartitionKey],[Company],[SupplierNum],MainSupplierName,[SupplierName],[AddressLine1],[AddressLine2],[AddressLine3],[City],[ZipCode],[Region],District, [CountryName]
--	  ,[SupplierCategory],[SupplierResponsible],[Reference],[AccountNum],[VATNum],[SupplierScore],[CustomerNum],[TelephoneNum],[Email],[Website],[CodeOfConduct]
--	  ,[MinOrderQty],[InternalExternal],[Comments], OrganizationNum
GO
PRINT N'Creating [stage].[CER_NO_BC_Warehouse]'
GO
CREATE TABLE [stage].[CER_NO_BC_Warehouse]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[WarehouseName] [nvarchar] (50) NULL,
[systemCreatedAt] [nvarchar] (50) NULL,
[systemModifiedAt] [nvarchar] (50) NULL,
[WarehouseAddress] [nvarchar] (80) NULL,
[WarehouseCountryCode] [nvarchar] (10) NULL,
[WarehouseCounty] [nvarchar] (50) NULL,
[WarehousePostalCode] [nvarchar] (15) NULL,
[WarehouseCity] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_NO_BC_Warehouse]'
GO

CREATE VIEW [stage].[vCER_NO_BC_Warehouse] AS 
SELECT 
	CONVERT(binary(32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID,
	
	PartitionKey,
	Company,
	nullif(trim(WarehouseCode),'') as WarehouseCode,
	nullif(trim(WarehouseName),'') as WarehouseName
    --,systemCreatedAt
	--,systemModifiedAt
FROM 
	 stage.CER_NO_BC_Warehouse
GO
PRINT N'Creating [stage].[ARK_CZ_Part]'
GO
CREATE TABLE [stage].[ARK_CZ_Part]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (9) NULL,
[PartNum] [nvarchar] (max) NULL,
[PartName] [nvarchar] (max) NULL,
[PartDescription] [nvarchar] (max) NULL,
[PartDescription2] [nvarchar] (max) NULL,
[ProductGroup] [nvarchar] (200) NULL,
[ProductGroup2] [nvarchar] (200) NULL,
[ProductGroup3] [nvarchar] (200) NULL,
[ProductGroup4] [nvarchar] (200) NULL,
[Brand] [nvarchar] (50) NULL,
[Model] [nvarchar] (50) NULL,
[CommodityCode] [nvarchar] (50) NULL,
[CountryOfOrigin] [nvarchar] (50) NULL,
[NetWeight] [decimal] (18, 4) NULL,
[Volume] [decimal] (18, 4) NULL,
[Material] [nvarchar] (50) NULL,
[ReorderLevel] [decimal] (18, 4) NULL,
[PartStatus] [nvarchar] (50) NULL,
[StartDate] [date] NULL,
[EndDate] [date] NULL,
[Res1] [nvarchar] (50) NULL,
[Res2] [nvarchar] (50) NULL,
[Res3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vARK_CZ_Part]'
GO
CREATE VIEW [stage].[vARK_CZ_Part] AS
--ADD TRIM() INTO PartID 2022-12-16 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([PartNum]))))) AS PartID
	,CONCAT([Company], '#', TRIM([PartNum])) AS PartCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [Company])) AS CompanyID
	,PartitionKey

	,[Company]
	,TRIM([PartNum]) AS PartNum
	,LEFT([PartName], 100) AS [PartName]
	,[PartDescription]
	,[PartDescription2]
	,'Part' AS [PartDescription3]
	,NULL AS MainSupplier
	,NULL AS AlternativeSupplier
	,[ProductGroup]
	,[ProductGroup2]
	,[ProductGroup3]
	,[ProductGroup4]
	,[Brand]
	,'' AS [Barcode]
	,'' AS UOM
	,MAX([CommodityCode]) AS [CommodityCode]
	,[CountryOfOrigin]
	,[NetWeight]
	,[Volume]
	,[Material]
	,PartStatus
	,'' AS [PartReplacementNum]
	,'' AS [PartResponsible]
	,[ReorderLevel] AS [ReOrderLevel]
	,[StartDate]
	,[EndDate]

FROM 
	[stage].[ARK_CZ_Part]
WHERE [PartNum] NOT IN ('TextLine', 'ServicePurchase')

GROUP BY
	PartitionKey, [Company], [PartNum], LEFT([PartName],100), [PartDescription], [PartDescription2], [ProductGroup],  [ProductGroup2], [ProductGroup3], [ProductGroup4], [Brand], [CountryOfOrigin], [NetWeight], [Volume], [Material], [ReorderLevel], [StartDate], [EndDate], PartStatus --, [CommodityCode]

-- Added as a quick fix to the null partNum relation to the invoice table. Added as a union to make the logic visible 
-- Should be replaced with Inferred member logic later /SM 2021-04-19
UNION ALL

SELECT
	0x655F5AD0E529617C17DE44A8AB611798347A1DED06EA54AC1C79DAC013BEFEE8 AS PartID
	,CONCAT('ACZARKOV', '#', 'TextLine') AS PartCode
	,0x0C506A3C3C1F5F2AD836AC48E636BA9A9E1153166018D0E47910ADA53BD8BB3E AS CompanyID
	,'20210421'	AS PartitionKey
	,'ACZARKOV' AS [Company]
	,'TextLine' AS PartNum -- TextLine it will not work
	,'Service' AS [PartName]
	,'Service' AS	[PartDescription]
	,''	AS [PartDescription2]
	,'Service' AS [PartDescription3]
	,NULL AS MainSupplier
	,NULL AS AlternativeSupplier
	,'Service' AS [ProductGroup]
	,'' AS [ProductGroup2]
	,'' AS [ProductGroup3]
	,'' AS [ProductGroup4]
	,'' AS [Brand]
	,'' AS [Barcode]
	,'H' AS UOM
	,'' AS [CommodityCode]
	,'' AS [CountryOfOrigin]
	,0 AS [NetWeight]
	,0 AS [Volume]
	,'' AS [Material]
	,'' AS PartStatus
	,'' AS [PartReplacementNum]
	,'' AS [PartResponsible]
	,0 AS  [ReOrderLevel]
	,''	AS StartDate
	,''	AS EndDate

UNION ALL

SELECT
	0x655F5AD0E529617C17DE44A8AB611798347A1DED06EA54AC1C79DAC013BEFEE9 AS PartID
	,CONCAT('ACZARKOV', '#', 'ServicePurchase') AS PartCode
	,0x0C506A3C3C1F5F2AD836AC48E636BA9A9E1153166018D0E47910ADA53BD8BB3E AS CompanyID
	,'20211101'	AS PartitionKey
	,'ACZARKOV' AS [Company]
	,'ServicePurchase' AS PartNum
	,'Service' AS [PartName]
	,'Service' AS	[PartDescription]
	,''	AS [PartDescription2]
	,'Service' AS [PartDescription3]
	,NULL AS MainSupplier
	,NULL AS AlternativeSupplier
	,'Service' AS [ProductGroup]
	,'' AS [ProductGroup2]
	,'' AS [ProductGroup3]
	,'' AS [ProductGroup4]
	,'' AS [Brand]
	,'' AS [Barcode]
	,'H' AS UOM
	,'' AS [CommodityCode]
	,'' AS [CountryOfOrigin]
	,0 AS [NetWeight]
	,0 AS [Volume]
	,'' AS [Material]
	,'' AS PartStatus
	,'' AS [PartReplacementNum]
	,'' AS [PartResponsible]
	,0 AS  [ReOrderLevel]
	,''	AS StartDate
	,''	AS EndDate
GO
PRINT N'Creating [dm_IN].[fctSalesInvoice]'
GO



CREATE VIEW [dm_IN].[fctSalesInvoice] AS

SELECT 
 si.[SalesInvoiceID]
,si.[SalesOrderID]
,si.[SalesOrderNumID]
,si.[CustomerID]
,si.[CompanyID]
,si.[PartID]
,si.[WarehouseID]
,si.[SalesPersonNameID]
,si.[DepartmentID]
,si.[Company]
,si.[SalesInvoiceCode]
,si.[SalesInvoiceDateID]
,si.[ProjectID]
,si.[SalesPersonName]
,si.[CustomerNum]
,si.[PartNum]
,si.[PartType]
,si.[SalesOrderNum]
,si.[SalesOrderLine]
,si.[SalesOrderSubLine]
,si.[SalesOrderType]
,si.[SalesInvoiceNum]
,si.[SalesInvoiceLine]
,si.[SalesInvoiceType]
,si.[SalesInvoiceDate]
,si.[ActualDelivDate]
,si.[SalesInvoiceQty]
,si.[UoM]
,si.[UnitPrice]
,si.[UnitCost]
,si.[DiscountPercent]
,si.[DiscountAmount]
,si.[TotalMiscChrg]
,si.[Currency]
,si.[ExchangeRate]
,si.[VATAmount]
,si.[CreditMemo]
,si.[Department]
,si.[ProjectNum]
,si.[WarehouseCode]
,si.[CostBearerNum]
,si.[CostUnitNum]
,si.[ReturnComment]
,si.[ReturnNum]
,si.[OrderHandler]
,si.[SalesChannel]
,si.[NeedbyDate]
,si.[ExpDelivDate]
,si.[SalesOrderCode]
,si.[SalesOrderDateID]
,si.[SalesOrderDate]
,si.[ConfirmedDelivDate]
,si.[PartStatus]
,si.[AxInterSalesChannel]
,si.[DueDate]
,si.[LastPaymentDate]
,si.[SalesInvoiceStatus]
,si.[CashDiscountOffered]
,si.[CashDiscountUsed]
,si.[IsUpdatingStock]
,si.[SIRes1]
,si.[SIRes2]
,si.[SIRes3]
,si.[SIRes4]
,si.[SIRes5]
,si.[SIRes6]

FROM dm.FactSalesInvoice as si

WHERE si.Company  in ('OCSSE')  -- Industry basket
GO
PRINT N'Creating [stage].[AXI_HQ_Project]'
GO
CREATE TABLE [stage].[AXI_HQ_Project]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[MainProjectNum] [nvarchar] (50) NULL,
[ProjectNum] [nvarchar] (50) NOT NULL,
[ProjectDescription] [nvarchar] (500) NULL,
[Organisation] [nvarchar] (50) NULL,
[ProjectStatus] [nvarchar] (50) NULL,
[ProjectCategory] [nvarchar] (50) NULL,
[WBSElement] [nvarchar] (50) NULL,
[ObjectNum] [nvarchar] (50) NULL,
[Level] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[ProjectResponsible] [nvarchar] (50) NULL,
[Comments] [nvarchar] (500) NULL,
[StartDate] [date] NULL,
[EndDate] [date] NULL,
[EstEndDate] [date] NULL,
[ProjectCompletion] [decimal] (18, 4) NULL,
[TotalCost] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vAXHSE_HQ_Project]'
GO



/****** Script for SelectTopNRows command from SSMS  ******/
CREATE VIEW [stage].[vAXHSE_HQ_Project] AS
SELECT 

	  CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', [ProjectNum] ))) AS ProjectID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',Company)) AS CompanyID
	  ,CONCAT(Company,'#', [ProjectNum] ) AS ProjectCode
	  ,CONVERT(varchar, GETDATE(), 23) AS PartitionKey
      ,[Company]
      ,[MainProjectNum]
      ,[ProjectNum]
      ,[ProjectDescription]
      ,[Organisation]
      ,[ProjectStatus]
      ,[ProjectCategory]
      ,[WBSElement]
      ,[ObjectNum]
      ,[Level]
      ,[Currency]
      ,[WarehouseCode]
      ,[ProjectResponsible]
      ,[Comments]
      ,[StartDate]
      ,[EndDate]
      ,[EstEndDate]
      ,[ProjectCompletion]
      ,[TotalCost]	AS ActualCost
  FROM [stage].[AXI_HQ_Project]
  where UPPER(Company) = 'AXHSE'
GO
PRINT N'Creating [stage].[CER_LV_Warehouse]'
GO
CREATE TABLE [stage].[CER_LV_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL,
[WarehouseDistrict] [nvarchar] (50) NULL,
[WarehouseAddress] [nvarchar] (100) NULL,
[WarehouseType] [nvarchar] (50) NULL,
[WarehouseCountry] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_LV_Warehouse]'
GO
CREATE VIEW [stage].[vCER_LV_Warehouse] AS
--COMMENT EMPTY FIELDS 2022-12-21 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([WarehouseCode])) AS [WarehouseCode]
	,[WarehouseName]
	,[WarehouseDistrict]
	,[WarehouseAddress]
	--,'' AS [WarehouseDescription]
	,[WarehouseType]
	,[WarehouseCountry]
	--,'' AS [WarehouseSite]
FROM [stage].[CER_LV_Warehouse]

GROUP BY 
	PartitionKey,[Company],[WarehouseCode],[WarehouseName],[WarehouseDistrict],[WarehouseAddress],[WarehouseType],[WarehouseCountry]
GO
PRINT N'Creating [stage].[TRA_FR_Warehouse]'
GO
CREATE TABLE [stage].[TRA_FR_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (10) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vTRA_FR_Warehouse]'
GO
CREATE VIEW [stage].[vTRA_FR_Warehouse] AS
--COMMENT EMPTY FIELDS 22-12-29 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([WarehouseCode])) AS [WarehouseCode]
	,TRIM([WarehouseName]) AS [WarehouseName]
	--,'' AS [WarehouseDistrict]
	--,'' AS [WarehouseAddress]
	--,'' AS [WarehouseDescription]
	--,'' AS [WarehouseType]
	,'France' AS [WarehouseCountry]
	--,'' AS [WarehouseSite]
FROM [stage].[TRA_FR_Warehouse]

--GROUP BY 
--	PartitionKey,[Company],[WarehouseCode],[WarehouseName]
GO
PRINT N'Creating [stage].[CER_FI_Customer]'
GO
CREATE TABLE [stage].[CER_FI_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[CustomerName] [nvarchar] (50) NULL,
[MainCustomerNum] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (50) NULL,
[TelephoneNumber2] [nvarchar] (50) NULL,
[Email] [nvarchar] (100) NULL,
[ABCCode] [nchar] (10) NULL,
[City] [nvarchar] (50) NULL,
[ZIP] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNr] [nvarchar] (20) NULL,
[OrganizationNum] [nvarchar] (100) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (2) NULL,
[SalesPersonName] [nvarchar] (30) NULL,
[CustomerType] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_FI_Customer]'
GO



CREATE VIEW [stage].[vCER_FI_Customer] AS
--COMMENT EMPTY FIELD // ADD TRIM()UPPER() INTO CustomerID 2022-12-20 VA
SELECT 

	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID
	--CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(CustomerNum)))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',[Company])) AS CompanyID
	,CONCAT([Company],'#',TRIM([CustomerNum])) AS CustomerCode
	,PartitionKey

	,Company
    ,TRIM(CustomerNum) AS CustomerNum
	,CASE WHEN CustomerName LIKE '%/%' THEN CONCAT(MainCustomerNum, ' - ', SUBSTRING (CustomerName, 0, CHARINDEX('/', CustomerName)))
		WHEN CustomerName LIKE '%,%' THEN CONCAT(MainCustomerNum, ' - ', SUBSTRING (CustomerName, 0, CHARINDEX(',', CustomerName)))
		ELSE CONCAT(TRIM(CustomerNum), ' - ', CustomerName) END AS MainCustomerName -- requested by Vera Teplits ticket #SR-95348 2023-02-14 /DZ
    ,[dbo].[ProperCase](CustomerName) AS CustomerName
    ,[AddressLine1]
    ,[AddressLine2]
    ,[AddressLine3]
	,[TelephoneNumber1] AS [TelephoneNum1] 
	,[TelephoneNumber2]  AS [TelephoneNum2] 
	,[Email]
	,IIF([AddressLine3]=' ',null, SUBSTRING(AddressLine3,1,5))  AS ZipCode
	,IIF(LEN(AddressLine3) - LEN(REPLACE(AddressLine3, ' ', '')) >= 1,RIGHT([dbo].[ProperCase](AddressLine3), CHARINDEX(' ', REVERSE(AddressLine3)) - 1),[dbo].[ProperCase](AddressLine3)) AS [City]
    ,IIF([State]= ' ',null,[State]) AS [State]
	,[dbo].[ProperCase]([District])  AS SalesDistrict
	,case when LEN(TRIM(customer.CountryCode)) = 3 then cc.[Alpha-2 code]
	else IIF(customer.CountryName is null, 'FI', customer.CountryCode) 
	end AS CountryCode
    ,IIF(ISNULL(customer.[CountryName],'Finland')='Finland','Finland',[dbo].[ProperCase](customer.CountryName)) AS CountryName
	--,'' AS Division
	--,'' AS CustomerIndustry
	--,'' AS CustomerSubIndustry
	,TRIM(CONCAT([dbo].[ProperCase](AddressLine1),' ',[dbo].[ProperCase](AddressLine2))) AS AddressLine
	,CONCAT(IIF(ISNULL(customer.[CountryName],'Finland')='Finland','Finland',[dbo].[ProperCase](customer.CountryName)), + ', ' + IIF([AddressLine3]=' ', null, SUBSTRING(AddressLine3,1,5)), + ', ' + 
		IIF(LEN(AddressLine3) - LEN(REPLACE(AddressLine3, ' ', '')) >= 1,RIGHT([dbo].[ProperCase](AddressLine3), CHARINDEX(' ', REVERSE(AddressLine3)) - 1),[dbo].[ProperCase](AddressLine3))
		, + ', ' + TRIM(CONCAT([dbo].[ProperCase](AddressLine1),' ',[dbo].[ProperCase](AddressLine2)))) AS FullAddressLine
    ,[dbo].[ProperCase](CustomerGroup) AS CustomerGroup
	,[dbo].[ProperCase](CustomerGroup) AS CustomerSubGroup
    ,[SalesRepCode] AS SalesPersonCode
	,[dbo].[ProperCase](SalesPersonName) AS SalesPersonName
	--,'' AS [SalesPersonResponsible]
    ,[VATRegNr] AS VATNum
	,OrganizationNum
	,[AccountString]	AS AccountNum
	,[InternalExternal]
	,[ABCCode] AS CustomerScore
	,CustomerType
	,GETDATE() AS ValidFrom
	,DATEADD(year,1,GETDATE()) AS ValidTo
FROM [stage].[CER_FI_Customer] as customer
	LEFT JOIN dbo.CountryCodes as cc
		ON customer.CountryCode = cc.[Alpha-3 code]
GO
PRINT N'Creating [stage].[NOM_SE_StockBalance]'
GO
CREATE TABLE [stage].[NOM_SE_StockBalance]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[Currency] [nvarchar] (10) NULL,
[BinNum] [nvarchar] (12) NULL,
[BatchNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (70) NOT NULL,
[LastStockTakeDate] [nvarchar] (50) NULL,
[LastStdCostDate] [nvarchar] (50) NULL,
[MaxStockQty] [nvarchar] (50) NULL,
[StockBalance] [decimal] (18, 4) NULL,
[StockValue] [decimal] (18, 4) NULL,
[ManualReservations] [decimal] (18, 4) NULL,
[ReserveQty] [nvarchar] (50) NULL,
[BackOrderQty] [decimal] (18, 4) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[StockTakeDiff] [decimal] (18, 4) NULL,
[ReOrderLevel] [decimal] (18, 4) NULL,
[SafetyStock] [decimal] (18, 4) NULL,
[OptimalOrderQty] [decimal] (18, 4) NULL,
[AvgCost] [decimal] (18, 4) NULL,
[DelivTime] [nvarchar] (50) NULL,
[SBRes1] [nvarchar] (50) NULL,
[SBRes2] [nvarchar] (50) NULL,
[SBRes3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vNOM_SE_StockBalance]'
GO
CREATE VIEW [stage].[vNOM_SE_StockBalance] AS
--ADD TRIM() INTO PartID 2022-12-20
--ADD TRIM() INTO SupplierID 23-01-24
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company], '#', TRIM([PartNum]), '#', TRIM([WarehouseCode]))))) AS ItemWarehouseID
	,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
	,UPPER(CONCAT([Company], '#', TRIM([PartNum]), '#', TRIM([WarehouseCode]))) AS ItemWarehouseCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([SupplierNum]))))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company], '#', TRIM([SupplierNum]))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company], '#', TRIM([PartNum]))))) AS PartID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT([Company],'#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company], '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey

	,UPPER(Company) AS Company
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,CASE WHEN TRIM(BinNum) like '' OR BinNum like ' ' THEN NULL ELSE TRIM(BinNum) END AS BinNum
	,TRIM(BatchNum) AS BatchNum
	,DelivTime
	,IIF(LastStockTakeDate = 0, '1900-01-01', CONVERT(date, LastStockTakeDate)) AS LastStockTakeDate
	,IIF(LastStdCostDate = 0,  '1900-01-01', CONVERT(date, LastStdCostDate)) AS LastStdCostCalDate
	,TRIM(Currency) AS Currency
	,SafetyStock
	,ManualReservations AS MaxStockQty
	,StockBalance
	,StockValue
	,AvgCost
	,ReserveQty
	,BackOrderQty
	,OrderQty
	,StockTakeDiff
	,ReOrderLevel
	,OptimalOrderQty
	,SBRes1
	,SBRes2
	,SBRes3
FROM 
	[stage].[NOM_SE_StockBalance]
GO
PRINT N'Creating [stage].[CER_DK_PurchaseOrder]'
GO
CREATE TABLE [stage].[CER_DK_PurchaseOrder]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[PurchaseOrderType] [nvarchar] (50) NULL,
[PurchaseOrderDate] [date] NULL,
[PurchaseOrderStatus] [nvarchar] (50) NULL,
[OpenRelease] [smallint] NULL,
[OrgReqDelivDate] [date] NULL,
[CommitedDelivDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[ReqDelivDate] [date] NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[SupplierPartNum] [nvarchar] (50) NULL,
[DelivCustomerNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[PurchaseOrderQty] [decimal] (18, 4) NULL,
[ReceiveQty] [decimal] (18, 4) NULL,
[PurchaseInvoiceQty] [decimal] (18, 4) NULL,
[MinOrderQty] [decimal] (18, 4) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[PurchaserName] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[ReceivingNum] [nvarchar] (50) NULL,
[DelivTime] [nvarchar] (50) NULL,
[PurchaseChannel] [nvarchar] (50) NULL,
[Documents] [nvarchar] (50) NULL,
[Comments] [nvarchar] (500) NULL,
[PORes1] [nvarchar] (50) NULL,
[PORes2] [nvarchar] (50) NULL,
[PORes3] [nvarchar] (50) NULL,
[LandedCostPct] [nvarchar] (50) NULL,
[LandedCostPrice] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_DK_PurchaseOrder]'
GO
CREATE VIEW [stage].[vCER_DK_PurchaseOrder] AS
--COMMENT EMPTY FIELDS / ADD TRIM() INTO PartID,WarehouseID 2022-12-14 VA
--ADD TRIM() INTO SupplierID 23-01-23 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(PurchaseInvoiceNum)))) AS PurchaseOrderID --,'#',TRIM(UPPER([PartNum])), '#', TRIM(UPPER(SupplierCode)), '#', OrderedQty
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(OrderNum)))) AS PurchaseOrderNumID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(PurchaseInvoiceNum))))) AS PurchaseInvoiceID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(DelivCustomerNum))))) AS CustomerID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(DelivCustomerNum))))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum))))) AS SupplierID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(SupplierNum))))) AS SupplierID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(trim(Company),'#',TRIM([PartNum]))))) AS PartID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(WarehouseCode))))) AS WarehouseID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',TRIM([Company]))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(Currency))) AS CurrencyID
	,UPPER(CONCAT(Company,'#',TRIM(SupplierNum),'#',OrderNum,'#',TRIM(PurchaseInvoiceNum))) AS PurchaseOrderCode
	,PartitionKey AS PartitionKey

	,Company AS Company
	,OrderNum AS PurchaseOrderNum
	,OrderLine AS PurchaseOrderLine
	,OrderSubLine AS PurchaseOrderSubLine
	,CASE WHEN WarehouseCode IN ('0','2D') THEN 'Dropshipment' END AS PurchaseOrderType
		
	,PurchaseOrderDate
	,CASE WHEN OpenRelease = '1' THEN 'Closed' 
		  ELSE  'Open' END AS  PurchaseOrderStatus
	,CASE WHEN OrgReqDelivDate <= '1900-01-01' or OrgReqDelivDate = '' or OrgReqDelivDate is null THEN '1900-01-01' 
	      ELSE OrgReqDelivDate END  AS OrgReqDelivDate
	,CASE WHEN CommitedDelivDate <= '1900-01-01' or CommitedDelivDate = '' or CommitedDelivDate is null THEN '1900-01-01' 
	      ELSE CommitedDelivDate END AS CommittedDelivDate
	,CASE WHEN ActualDeliveryDate <= '1900-01-01' or ActualDeliveryDate = '' or ActualDeliveryDate is null THEN '1900-01-01' 
	      ELSE ActualDeliveryDate END   AS ActualDelivDate
	,CASE WHEN ReqDelivDate <= '1900-01-01' or ReqDelivDate = '' or ReqDelivDate is null THEN '1900-01-01' 
	      ELSE ReqDelivDate END  AS ReqDelivDate
	,PurchaseInvoiceNum
	,TRIM(UPPER([PartNum])) AS PartNum
	,TRIM(UPPER(SupplierNum)) AS SupplierNum
	,SupplierPartNum
	--,'' AS [SupplierInvoiceNum] 
	,TRIM(DelivCustomerNum) AS DelivCustomerNum
	--,'' AS PartStatus
	,PurchaseOrderQty
	,PurchaseInvoiceQty	AS InvoiceQty
	,ReceiveQty
	,[PurchaseInvoiceQty]
	,MinOrderQty
	,UoM
	,UnitPrice
	,DiscountPercent
	,DiscountAmount
	,LandedCostPrice * PurchaseOrderQty  AS LandedCost
	,ExchangeRate
	,Currency
	,TRIM(PurchaserName) AS PurchaserName
	,TRIM(WarehouseCode) AS WarehouseCode
	,ReceivingNum
	,DelivTime
	--,'' AS PurchaseChannel
	--,'' AS Documents
	,TRIM(Comments) AS Comments
	--,'' AS PORes1
	--,'' AS PORes2
	--,'' AS PORes3
	--
	--,'' AS [LineType]
	--,0 AS TotalMiscChrg
	--,'' AS ItemType
	--,'' AS DelivDate
	--,'' AS DaysSincePOrder
FROM 
	[stage].[CER_DK_PurchaseOrder]
	/*
GROUP BY
	PartitionKey, Company, PurchaseOrderNum, PurchaseOrderLine, PurchaseOrderSubLine, SupplierCode, DelivCustCode, LineType, InvoiceNum, PartNum, OrderType, UnitPrice, DiscountPercent, OrderedQty, ReceivedQty, InvoicedQty, TotalMiscChrg, ExchangeRate, CurrencyCode, ItemType, OrderDate, OrgReqDelivDate, CommitedDelivDate, ActualDelivDate, DelivDate, ReqDelivDate, PurchaserName, RecievingNumber, LeadTime, Comments, WarehouseCode
	*/
GO
PRINT N'Creating [dm_IN].[fctPurchaseInvoice]'
GO


CREATE VIEW [dm_IN].[fctPurchaseInvoice] AS
-- LS basket
SELECT 
 pinv.[PurchaseInvoiceID]
,pinv.[CompanyID]
,pinv.[SupplierID]
,pinv.[PartID]
,pinv.[WarehouseID]
,pinv.[PurchaseOrderNumID]
,pinv.[CurrencyID]
,pinv.[PurchaseInvoiceDateID]
,pinv.[Company]
,pinv.[PurchaseOrderNum]
,pinv.[PurchaseOrderLine]
,pinv.[PurchaseOrderType]
,pinv.[PurchaseInvoiceNum]
,pinv.[PurchaseInvoiceLine]
,pinv.[PurchaseInvoiceType]
,pinv.[PurchaseInvoiceDate]
,pinv.[ActualDelivDate]
,pinv.[SupplierNum]
,pinv.[PartNum]
,pinv.[PurchaseInvoiceQty]
,pinv.[UoM]
,pinv.[UnitPrice]
,pinv.[DiscountPercent]
,pinv.[DiscountAmount]
,pinv.[TotalMiscChrg]
,pinv.[VATAmount]
,pinv.[Currency]
,pinv.[ExchangeRate]
,pinv.[CreditMemo]
,pinv.[PurchaserName]
,pinv.[WarehouseCode]
,pinv.[PurchaseChannel]
,pinv.[Comment]
,pinv.[PIRes1]
,pinv.[PIRes2]
,pinv.[PIRes3]
,pinv.[PIRes4]
,pinv.[PurchaseInvoiceAmountOC]
,pinv.[PurchaseOrderDate]
,pinv.[ReqDelivDate]
,pinv.[OrgReqDelivDate]
,pinv.[CommittedDelivDate]
,pinv.[OrgCommittedDelivDate]
,pinv.[DueDate]
,pinv.[PaymentDate]
,pinv.[InvoiceStatus]
FROM dm.FactPurchaseInvoice pinv
LEFT JOIN dbo.Company com ON pinv.Company = com.Company
WHERE com.BusinessArea = 'Industrial Solutions' AND com.[Status] = 'Active'
GO
PRINT N'Creating [stage].[ACO_UK_SalesLedger]'
GO
CREATE TABLE [stage].[ACO_UK_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[Res1] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vACO_UK_SalesLedger]'
GO
CREATE VIEW [stage].[vACO_UK_SalesLedger] AS
--COMMENT empty fields / ADD UPPER() TRIM() INTO CustomerID  VA 13-12-2022
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(InvoiceNum) ))) AS SalesLedgerID,  --, '#', DueDate, '#', LastPayDate
	CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustNum))))) AS CustomerID,
	CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(InvoiceNum) ) AS SalesLedgerCode,
	PartitionKey,

	Company,
	TRIM(CustNum) AS CustomerNum,
	TRIM(InvoiceNum) AS SalesInvoiceNum,  -- various blank spaces after InvoiceNum, it affects query results! data-Input quality should be improved!
	InvoiceDate	AS SalesInvoiceDate,
	CONVERT(date, MIN(DueDate)) AS SalesDueDate,
	CONVERT(date, MAX(LastPaymentDate)) AS SalesLastPaymentDate,
	--NULL AS InvoiceAmount,
	--NULL AS RemainingInvoiceAmount,
	1 AS ExchangeRate,
	'GBP' AS Currency,
	--NULL AS VATAmount,
	--'' AS VATCode,
	--'' AS PayToName,
	--'' AS PayToCity,
	--'' AS PayToContact,
	--'' AS PaymentTerms,
	--'' AS SLRes1,
	--'' AS SLRes2,
	--'' AS SLRes3
	--NULL AS PaidInvoiceAmount,
	'1900-01-01' AS AccountingDate
	--NULL AS AgingPeriod,
	--NULL AS AgingSort,
	--NULL AS VATCodeDesc,
	--NULL AS LinkToOriginalInvoice
FROM 
	stage.ACO_UK_SalesLedger
GROUP BY
	PartitionKey, Company, TRIM(CustNum), TRIM(InvoiceNum), InvoiceDate
GO
PRINT N'Creating [dw].[SupplierTest]'
GO
CREATE TABLE [dw].[SupplierTest]
(
[SupplierID] [binary] (32) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[MainSupplierName] [nvarchar] (100) NULL,
[SupplierName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[AddressLine3] [nvarchar] (100) NULL,
[TelephoneNum] [nvarchar] (50) NULL,
[Email] [nvarchar] (200) NULL,
[ZipCode] [nvarchar] (50) NULL,
[City] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (200) NULL,
[Region] [nvarchar] (200) NULL,
[SupplierCategory] [nvarchar] (200) NULL,
[SupplierResponsible] [nvarchar] (100) NULL,
[AddressLine] [nvarchar] (250) NULL,
[FullAddressLine] [nvarchar] (500) NULL,
[AccountNum] [nvarchar] (50) NULL,
[VATNum] [nvarchar] (50) NULL,
[OrganizationNum] [nvarchar] (100) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[CodeOfConduct] [nvarchar] (20) NULL,
[CoCfeedback] [bit] NULL,
[CustomerNum] [nvarchar] (50) NULL,
[SupplierScore] [nvarchar] (20) NULL,
[MinOrderQty] [decimal] (18, 4) NULL,
[MinOrderValue] [decimal] (18, 4) NULL,
[Website] [nvarchar] (100) NULL,
[Comments] [nvarchar] (max) NULL,
[SRes1] [nvarchar] (100) NULL,
[SRes2] [nvarchar] (100) NULL,
[SRes3] [nvarchar] (100) NULL,
[SupplierCode] [nvarchar] (200) NOT NULL,
[CompanyID] [binary] (32) NOT NULL,
[PartitionKey] [varchar] (50) NOT NULL
)
GO
PRINT N'Creating [dm].[DimSupplierTest]'
GO



CREATE VIEW [dm].[DimSupplierTest] AS

SELECT 
  	DISTINCT(CONVERT(bigint, [SupplierID])) AS SupplierID
	,CONVERT(bigint, [CompanyID]) AS CompanyID --CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM(Company)))
	,[Company]
	,[SupplierNum]
	,[MainSupplierName]
	,[SupplierName]
	,CONCAT(TRIM(SupplierNum), '-', TRIM(SupplierName)) AS Supplier
	,[TelephoneNum]
	,[Email]
	,[ZipCode]
	,[City]
	,[District]
	,[CountryName]
	,[Region]
	,[SupplierCategory]
	,[SupplierResponsible]
	,[AddressLine]
	,[FullAddressLine]
	,[AccountNum]
	,[VATNum]
	,[InternalExternal]
	,CASE WHEN [CodeOfConduct] = '0' THEN 'No'
		  WHEN [CodeOfConduct] = '1' THEN  'Yes'
		  ELSE [CodeOfConduct] END AS CodeOfConduct
	,CoCfeedback
	,[CustomerNum]
	,[SupplierScore]
	,[MinOrderQty]
	,[MinOrderValue]
	,[Website]
	,[Comments]
FROM 
	[dw].[SupplierTest]
Group by 
	[SupplierID], [CompanyID], [Company], [SupplierNum], [SupplierName], [AddressLine], [TelephoneNum], [Email], [ZipCode], [City], [CountryName], [SupplierResponsible], [InternalExternal], [Region], [FullAddressLine], [SupplierCategory], [SupplierResponsible], [AccountNum], [VATNum], [SupplierScore],[CustomerNum], [MinOrderQty], [CodeOfConduct], [District], [MainSupplierName], [MinOrderValue], [Website], [Comments], CoCfeedback
GO
PRINT N'Creating [stage].[AXL_PL_Customer]'
GO
CREATE TABLE [stage].[AXL_PL_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[MainCustomerName] [nvarchar] (100) NULL,
[CustomerName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[AddressLine] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (20) NULL,
[TelephoneNumber2] [nvarchar] (20) NULL,
[Email] [nvarchar] (100) NULL,
[City] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[Division] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (50) NULL,
[CustomerIndustry] [nvarchar] (50) NULL,
[CustomerSubIndustry] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNo] [nvarchar] (50) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[CustomerABC] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[SalesPersonResponsible] [nvarchar] (50) NULL,
[CustomerType] [nvarchar] (50) NULL,
[Res1] [nvarchar] (50) NULL,
[Res2] [nvarchar] (50) NULL,
[Res3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXL_PL_Customer]'
GO


CREATE VIEW [stage].[vAXL_PL_Customer] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustomerNum))) )) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,UPPER(CONCAT([Company], '#', TRIM([CustomerNum]))) AS CustomerCode
	,PartitionKey

	,UPPER(Company) AS Company
	,UPPER(TRIM(CustomerNum)) AS [CustomerNum]
	,TRIM(MainCustomerName) AS MainCustomerName
	,TRIM(CustomerName) AS  [CustomerName]
	,TRIM([AddressLine1]) AS [AddressLine1]
	,TRIM([AddressLine2]) AS [AddressLine2]
	,TRIM([AddressLine3]) AS [AddressLine3]
	,TRIM([TelephoneNumber1]) AS [TelephoneNum1]
	,TRIM([TelephoneNumber2]) AS [TelephoneNum2]
	,TRIM([Email]) AS [Email]
	,TRIM([ZipCode]) AS [ZipCode]
	,TRIM([City]) AS [City]
	,TRIM([State]) AS [State]
	,TRIM([District]) AS [SalesDistrict]
	,TRIM(con.CountryName) AS CountryName
	,TRIM([ISOAlpha2Code]) AS [CountryCode]
	,TRIM([Division]) AS [Division]
	,TRIM([CustomerIndustry]) AS [CustomerIndustry]
	,TRIM([CustomerSubIndustry]) AS [CustomerSubIndustry]
	,TRIM([AddressLine3]) AS [AddressLine]
	,CONCAT(TRIM(con.CountryName), + ',  ' + TRIM([City]), + ',  ' + TRIM([ZipCode]), + ',  ' + TRIM(addressline3)) AS [FullAddressLine]
	,TRIM(CustomerGroup) AS [CustomerGroup]
	,TRIM(CustomerGroup) AS [CustomerSubGroup]
	,TRIM([SalesRepCode]) AS [SalesPersonCode]
	,TRIM(SalesPersonName) AS [SalesPersonName]
	,TRIM([SalesPersonResponsible]) AS [SalesPersonResponsible]
	,TRIM([VATRegNo]) AS [VATNum]
	,TRIM([AccountString]) AS [AccountNum]
	,TRIM([InternalExternal]) AS [InternalExternal]
	,TRIM([CustomerABC]) AS [CustomerScore]
	,TRIM([CustomerType]) AS [CustomerType]
FROM [stage].[AXL_PL_Customer] com
	LEFT JOIN dbo.Country con ON com.CountryName = con.[ISOAlpha2Code]

--GROUP BY
--	PartitionKey, Company, CustomerNum, CustomerName, MainCustomerName, [AddressLine1], [AddressLine2], [AddressLine3], [TelephoneNumber1], [TelephoneNumber2], [Email], [ZipCode], [City], [State], [District], [CountryName], [Division], [CustomerIndustry], [CustomerSubIndustry], CustomerGroup, [SalesRepCode], SalesPersonName, [SalesPersonResponsible], [VATRegNo], [AccountString], [InternalExternal], [CustomerABC], [CustomerType]

--	Stagetablename in ('AXL_AU_Customer', 'AXL_DC_Customer', 'AXL_HU_Customer', 'AXL_IE_Customer', 'AXL_PL_Customer', 'AXL_PT_Customer', 'AXL_UK_Customer')
GO
PRINT N'Creating [stage].[GPI_FR_Warehouse]'
GO
CREATE TABLE [stage].[GPI_FR_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseID] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL,
[WarehouseDistrict] [nvarchar] (50) NULL,
[WarehouseAddress] [nvarchar] (100) NULL,
[WarehouseDescription] [nvarchar] (max) NULL,
[WarehouseType] [nvarchar] (50) NULL,
[WarehouseCountry] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vGPI_FR_Warehouse]'
GO
CREATE VIEW [stage].[vGPI_FR_Warehouse] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey
	,[Company]
	,TRIM([WarehouseCode]) AS [WarehouseCode]
	,[WarehouseName]
	,[WarehouseDistrict]
	,[WarehouseAddress]
	,[WarehouseDescription]
	,[WarehouseType]
	,[WarehouseCountry]
	--,'' AS [WarehouseSite]

FROM [stage].[GPI_FR_Warehouse]
GO
PRINT N'Creating [stage].[ARK_CZ_SOLine]'
GO
CREATE TABLE [stage].[ARK_CZ_SOLine]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[OrderDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderRelNum] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[InvoiceType] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[IndexKey] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[BusinessChain] [nvarchar] (50) NULL,
[Site] [nvarchar] (50) NULL,
[Res1] [nvarchar] (50) NULL,
[Res2] [nvarchar] (50) NULL,
[Res3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vARK_CZ_SOLine]'
GO

CREATE VIEW [stage].[vARK_CZ_SOLine] AS
--COMMENT EMPTY FIELDS // ADD UPPER()TRIM() INTO CustomerID 2022-12-16 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(SO.Company,'#',SO.CustNum,'#',SO.PartNum,'#',SO.OrderNum,'#',SO.InvoiceNum,'#',SO.InvoiceLine))) AS SalesInvoiceID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(SO.Company,'#',SO.CustNum, '#', SO.InvoiceNum))) AS SalesLedgerID
    ,CONVERT([binary](32),HASHBYTES('SHA2_256',SO.Company)) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(SO.Company),'#',TRIM(SO.CustNum))))) AS CustomerID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(SO.Company,'#',TRIM(SO.CustNum)))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(SO.Company),'#',TRIM(SO.PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(SO.Company), '#', TRIM(SO.WarehouseCode))))) AS WarehouseID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(SO.Company,'#',SO.OrderNum,'#',SO.OrderSubLine))) AS SalesOrderID --OrderRelNum Not OrderSubLine --,'#',SO.InvoiceNum --Redundent?
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(SO.Company,'#',TRIM(SO.OrderNum)))) AS SalesOrderNumID --Redundent?
	,CONCAT(SO.Company,'#', SO.OrderNum,'#', SO.OrderLine) AS SalesOrderCode -- should match dw.SalesOrder.SalesOrderCode
	,CONCAT(SO.Company,'#',SO.InvoiceNum,'#',SO.InvoiceLine) AS SalesInvoiceCode --IndexKey  --Redundent?
	,CONVERT(int, replace(convert(date,SO.InvoiceDate),'-','')) AS SalesInvoiceDateID  --Redundent?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',''))))	AS ProjectID
	,SO.PartitionKey

	,SO.Company
	,[dbo].[ProperCase](SO.SalesPerson) AS SalesPersonName
	,TRIM(SO.CustNum) AS CustomerNum
	,CASE WHEN TRIM(SO.PartNum) = '-NULL-' AND TRIM(SO.OrderNum) IS NULL THEN 'TextLine' ELSE TRIM(SO.PartNum) END AS PartNum -- ref TEAMS chat AxInter BI - Onboaring Arkov (Validation feedback & Way forward) fr Jiri 20210310
	,Res1 AS [PartType]
	,TRIM(SO.OrderNum) AS SalesOrderNum
	,SO.OrderLine AS [SalesOrderLine]
	,SO.OrderSubLine AS [SalesOrderSubLine]
	,CASE WHEN SO.OrderType = 'webshop' THEN 1 ELSE 0 END AS SalesOrderType
	,SO.InvoiceNum AS [SalesInvoiceNum]
	,SO.InvoiceLine AS [SalesInvoiceLine]
	,InvoiceType AS [SalesInvoiceType]
	,CONVERT(date, SO.InvoiceDate) AS SalesInvoiceDate
	,ActualDeliveryDate AS [ActualDelivDate]
	,SO.SellingShipQty AS [SalesInvoiceQty]
	--,'' AS [UoM]
	,SO.UnitPrice
	,SO.UnitCost
	,CASE WHEN (SO.UnitPrice * SO.SellingShipQty) = 0 THEN 0 ELSE SO.DiscountAmount / (SO.UnitPrice * SO.SellingShipQty) END AS [DiscountPercent]
	,SO.DiscountAmount
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	,SO.TotalMiscChrg
	,0 AS [VATAmount]
	,Currency
	,ExchangeRate
	,SO.WarehouseCode
	,SO.CreditMemo
	,CASE WHEN SalesChannel = 'POS' OR SalesChannel = 'WMS' THEN 'Over-the-counter'
		WHEN SalesChannel = 'WEBSHOP' OR SalesChannel = 'www.arkov.cz' THEN 'www.arkov.cz'
		WHEN SalesChannel = 'WEBSHOP' OR SalesChannel = 'www.arkov.sk' THEN 'www.arkov.sk'
		WHEN SalesChannel = 'EDI' THEN 'EDI'
		ELSE 'Normal Order Handling' END AS SalesChannel
	,SO.BusinessChain AS [Department]
	--,NULL AS DeliveryAddress
	--,'' AS [CostBearerNum]
	--,'' AS [CostUnitNum]
	--,'' AS [ReturnComment]
	--,'' AS [ReturnNum]
	--,'' AS [ProjectNum]
--	,SO.Indexkey -- ta inte in så längre
	--,'' AS [IndexKey]
	--,'' AS SIRes1
	--,'' AS SIRes2
	--,'' AS SIRes3

FROM 
	stage.ARK_CZ_SOLine AS SO
--WHERE [InvoiceDate] >= DATEADD(year, -1, GETDATE()) --Added this where clause as semi-incremental load functinoality since it doesn't work easily on meta-param table. /SM 2021-10-01	
--GROUP BY
--	SO.PartitionKey, SO.Company, SO.SalesPerson, SO.CustNum, SO.PartNum, SO.OrderNum, SO.OrderLine, SO.OrderSubLine, SO.OrderType, SO.InvoiceNum, SO.InvoiceLine, SO.InvoiceType, SO.InvoiceDate, SO.ActualDeliveryDate, SO.SellingShipQty, SO.UnitPrice, SO.UnitCost, SO.DiscountAmount, SO.TotalMiscChrg, SO.WarehouseCode, SO.[Site], SO.CreditMemo, SO.ExchangeRate, SO.Currency, SO.SalesChannel, SO.BusinessChain, Res1
GO
PRINT N'Creating [stage].[SKS_FI_Budget]'
GO
CREATE TABLE [stage].[SKS_FI_Budget]
(
[PartitionKey] [varchar] (50) NULL,
[MANDT] [nvarchar] (50) NULL,
[PBUKR] [nvarchar] (50) NULL,
[PSPNR] [nvarchar] (50) NULL,
[COMPANY] [nvarchar] (50) NULL,
[ERDAT] [nvarchar] (50) NULL,
[KUNNR] [nvarchar] (50) NULL,
[POSKI] [nvarchar] (50) NULL,
[KDGRP] [nvarchar] (50) NULL,
[PRDGRP] [nvarchar] (50) NULL,
[SALESMEN] [nvarchar] (50) NULL,
[POST1] [nvarchar] (200) NULL,
[POSID] [nvarchar] (50) NULL,
[PWPOS] [nvarchar] (50) NULL,
[BUDJ_SALES] [decimal] (18, 8) NULL,
[BUDJ_COST] [decimal] (18, 8) NULL
)
GO
PRINT N'Creating [stage].[vSKS_FI_Budget]'
GO



/****** Script for SelectTopNRows command from SSMS  ******/
CREATE VIEW [stage].[vSKS_FI_Budget] AS								-- This table is budget for projects and relates for to the financial budget rather then the sales budget. ET 20220830
--COMMENT EMPTY FIELDS // ADD UPPER()TRIM() INTO CustomerID 2022-12-16 VA
SELECT  	
		CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#', TRIM([PBUKR]), '#', TRIM([PSPNR]) )))) AS BudgetID
		,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([COMPANY]),'#',TRIM([KUNNR]),'#',TRIM([PBUKR]))))) AS CustomerID
		--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([COMPANY],'#',TRIM([KUNNR]),'#',TRIM([PBUKR])))) AS CustomerID
		,CONVERT([binary](32),HASHBYTES('SHA2_256',[COMPANY])) AS CompanyID
		,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PRDGRP]),'#', TRIM([PBUKR]))))) AS PartID
		,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#','')))) AS WarehouseID
		,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([COMPANY]),'#',[PSPNR])))) AS ProjectID
		,YEAR(GETDATE())*10000 + MONTH(GETDATE())*100 + DAY(GETDATE())	AS BudgetPeriodDateID -- Currently can't find any periods of any kind in the date. Using Today for now. /SM 2021

	  ,[PartitionKey]
	  --,''	AS BudgetType
	  ,'ZBIS.SALES_BUDJE'		AS BudgetName	--Might not be correctly mapped field since POSID is more related to ProjectNum/Name.
	  ,[POST1]		AS BudgetDescription
	  ,[COMPANY]	AS Company
	  
	  ,CONCAT(YEAR(GETDATE()),'-', MONTH(GETDATE()))	AS BudgetPeriod
	  ,GETDATE()	AS BudgetPeriodDate
      --,''	AS PeriodType
      ,IIF(ISNUMERIC([KUNNR]) = 1,CAST(CAST(trim([KUNNR]) AS int)as nvarchar(50)),(trim([KUNNR])))  AS CustomerNum
      ,[KDGRP]	AS CustomerGroup
	  ,IIF(ISNUMERIC([PRDGRP]) = 1,CAST(CAST(trim([PRDGRP]) AS int)as nvarchar(50)),(trim([PRDGRP]))) AS PartNum
      ,[PRDGRP]	AS ProductGroup
      ,[SALESMEN]	AS SalesPersonCode
	  ,[SALESMEN]	AS SalesPersonName
      
      ,[BUDJ_SALES]	AS BudgetSales
      ,[BUDJ_COST]	AS BudgetCost
	  
	  ,[PWPOS]		AS Currency
	  ,[BUDJ_SALES] - [BUDJ_COST] AS GrossProfitInvoiced
	  ,([BUDJ_SALES] - [BUDJ_COST])/NULLIF([BUDJ_SALES],0)	AS [GrossMarginInvoiced%]
	  --,0			AS BudgetFinance
	  --,''			AS WarehouseCode
	  --,''			AS CostBearerNum
	  --,''			AS CostUnitNum
	  ,[POSKI]		AS ProjectNum
	  --,''			AS AccountNum
	  --,''			AS AccountGroupNum
	  --,''			AS BRes1
	  --,''			AS BRes2
	  --,''			AS BRes3
  FROM [stage].[SKS_FI_Budget]
GO
PRINT N'Creating [stage].[TRA_FR_Customer]'
GO
CREATE TABLE [stage].[TRA_FR_Customer]
(
[PartitionKey] [nvarchar] (50) NULL,
[Company] [nvarchar] (8) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[MainCustomerName] [nvarchar] (max) NULL,
[CustomerName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (max) NULL,
[AddressLine3] [nvarchar] (max) NULL,
[TelephoneNum1] [nvarchar] (50) NULL,
[TelephoneNum2] [nvarchar] (50) NULL,
[Email] [nvarchar] (100) NULL,
[ZipCode] [nvarchar] (50) NULL,
[City] [nvarchar] (100) NULL,
[State] [nvarchar] (max) NULL,
[SalesDistrict] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[Division] [nvarchar] (max) NULL,
[CustomerIndustry] [nvarchar] (50) NULL,
[CustomerSubIndustry] [nvarchar] (max) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (max) NULL,
[SalesPersonCode] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[SalesPersonResponsible] [nvarchar] (50) NULL,
[VATNum] [nvarchar] (50) NULL,
[AccountNum] [nvarchar] (max) NULL,
[InternalExternal] [nvarchar] (max) NULL,
[CustomerScore] [nvarchar] (50) NULL,
[CustomerType] [nvarchar] (50) NULL,
[CRes1] [nvarchar] (max) NULL,
[CRes2] [nvarchar] (max) NULL,
[CRes3] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[vTRA_FR_Customer]'
GO

CREATE VIEW  [stage].[vTRA_FR_Customer] AS
--COMMENT EMPTY FIELDS // ADD UPPER()TRIM() INTO CustomerID 22-12-29 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(UPPER(Company), '#', TRIM(CustomerNum)))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONCAT(UPPER(Company), '#', TRIM([CustomerNum])) AS CustomerCode
	,PartitionKey

	,UPPER(Company) AS [Company]
	,TRIM(CustomerNum) AS [CustomerNum]
	,(TRIM([MainCustomerName])) AS [MainCustomerName]
	,(TRIM(CustomerName)) AS [CustomerName]
	,TRIM([AddressLine1]) AS [AddressLine1]
	,TRIM([AddressLine2]) AS [AddressLine2]
	,TRIM([AddressLine3]) AS [AddressLine3]
	,TRIM([TelephoneNum1]) AS [TelephoneNum1]
	,TRIM([TelephoneNum2]) AS [TelephoneNum2]
	,TRIM([Email]) AS [Email]
	,TRIM([ZipCode]) AS [ZipCode]
	,TRIM([City]) AS [City]
	,TRIM([State]) AS [State]
	,TRIM([SalesDistrict]) AS [SalesDistrict]
	,case when len(TRIM(customer.[CountryCode])) = 3 then cc.[Alpha-2 code]
	 else nullif(TRIM(customer.CountryCode),'')
	 end as CountryCode
	,(TRIM(customer.[CountryName])) AS [CountryName]
	,TRIM([Division]) AS [Division]
	,TRIM([CustomerIndustry]) AS [CustomerIndustry]
	,TRIM([CustomerSubIndustry]) AS [CustomerSubIndustry]
	,TRIM([CustomerGroup]) AS [CustomerGroup]
	,TRIM([CustomerSubGroup]) AS [CustomerSubGroup]
	,TRIM([SalesPersonCode]) AS [SalesPersonCode]
	,(TRIM([SalesPersonName])) AS [SalesPersonName]
	,TRIM([SalesPersonResponsible]) AS [SalesPersonResponsible]
	,CAST([VATNum] as nvarchar(50)) AS [VATNum]
	--,'' AS OrganizationNum
	,cast( [AccountNum] as nvarchar(50)) AS [AccountNum]
	,CASE WHEN InternalExternal = 'A' THEN 'AxInter Internal Customer '
		WHEN CustomerGroup = 'CESSIONS INTER AGENCES' THEN 'Traction Levage Internal Customer'
		ELSE 'External Customer' END AS [InternalExternal]
	,TRIM([CustomerScore]) AS [CustomerScore]
	,TRIM([CustomerType]) AS [CustomerType]
	,TRIM([AddressLine1]) AS [AddressLine]
	,CONCAT((TRIM(customer.Countryname)), + ', ' + TRIM(City), + ', ' + TRIM([ZipCode]), + ', ' + TRIM(addressline1)) AS [FullAddressLine]
FROM [stage].[TRA_FR_Customer] as customer
	left join dbo.CountryCodes as cc
		on TRIM(customer.countrycode) = cc.[Alpha-3 code]
GO
PRINT N'Creating [dm_LS].[dimSalesOrderDistinct]'
GO




CREATE VIEW [dm_LS].[dimSalesOrderDistinct] AS

SELECT sod.[CompanyID]
,sod.[Company]
,sod.[SalesOrderNumID]
,sod.[SalesOrderNum]
,sod.[CustomerID]
,sod.[Customer]
,sod.[SalesPersonName]
,sod.[SalesChannel]
,sod.[AxInterSalesChannel]
,sod.[Department]
FROM dm.DimSalesOrderDistinct sod
LEFT JOIN dbo.Company com ON sod.Company = com.Company
WHERE com.BusinessArea = 'Lifting Solutions' AND com.[Status] = 'Active'


--WHERE Company  in ('AFISCM', 'CDKCERT', 'CEECERT', 'CFICERT', 'CLTCERT', 'CLVCERT', 'CSECERT', 'CUKCERT', 'CNOEHAU', 'CNOCERT', 'CyESA', 'HFIHAKL', 'TRACLEV')  -- LS basket
GO
PRINT N'Creating [stage].[WID_FI_SOLine]'
GO
CREATE TABLE [stage].[WID_FI_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderRel] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Indexkey] [nvarchar] (50) NULL,
[Site] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[UnitPriceOCY] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[UnitCostOCY] [decimal] (18, 4) NULL,
[DiscountAmountOCY] [decimal] (18, 4) NULL,
[ReturnComment] [nvarchar] (max) NULL,
[ReturnNum] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vWID_FI_SOLine]'
GO



CREATE VIEW [stage].[vWID_FI_SOLine] AS
-- COMMENT EMPTY FIELDS / ADD UPPER()TRIM() INTO PartID,CustomerID,WarehouseID 2022-12-15 VA
--PARTNUM / CUSTNUM / salesledgerid 23-02-17 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(InvoiceNum), '#', TRIM(Indexkey)))) AS SalesInvoiceID --, '#', TRIM(OrderLine), '#', TRIM(PartNum)
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(InvoiceNum)))) AS SalesOrderID --, '#', OrderRel
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(InvoiceNum)))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum)))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum)) ))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) )))) AS PartID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(WarehouseCode)))) AS WarehouseID
	,CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(InvoiceNum)) AS SalesOrderCode
	,CONVERT(int, replace(convert(date,InvoiceDate), '-', '')) AS SalesInvoiceDateID  --Redundant?
	,CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine)) AS SalesInvoiceCode --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey

	,TRIM(Company) AS Company
	,TRIM(SalesPerson) AS SalesPersonName
	,TRIM(CustNum) AS CustomerNum
	,TRIM(PartNum) AS PartNum
	,IIF(OrderRel = '000000', 'Main', 'Sub' )  AS PartType
	,TRIM(OrderNum) AS SalesOrderNum
	,TRIM(OrderLine) AS SalesOrderLine
	,TRIM(OrderRel) AS SalesOrderSubLine
	,TRIM(OrderType) AS SalesOrderType
	,TRIM(InvoiceNum) AS SalesInvoiceNum
	,TRIM(InvoiceLine) AS SalesInvoiceLine
	--,'' AS SalesInvoiceType
	,CASE WHEN InvoiceDate = '' THEN '1900-01-01' ELSE CONVERT(date, InvoiceDate) END AS SalesInvoiceDate
	,ActualDeliveryDate	AS ActualDelivDate
	,SellingShipQty	AS SalesInvoiceQty
	--,'' AS UoM
	,UnitPrice
	,UnitCost
	,IIF(UnitPrice*SellingShipQty = 0, 0, DiscountAmount/UnitPrice*SellingShipQty) AS DiscountPercent
	,DiscountAmount
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	,TotalMiscChrg
	--,NULL AS VATAmount
	,Currency
	,ExchangeRate
	,CreditMemo
	,TRIM(WarehouseCode) AS WarehouseCode
	--,NULL AS DeliveryAddress
	,IndexKey
	,CASE WHEN TRIM(CustNum) = 'CFIN' THEN 'Cash Customer' 
		WHEN TRIM(CustNum) = 'CEX' THEN 'Cash Customer Export'
		WHEN TRIM(CustNum) = 'CEU' THEN 'Cash Customer EU'
		ELSE 'Normal' END AS SalesChannel
	--,'' AS Department
	--,'' AS CostBearerNum
	--,'' AS CostUnitNum
	--,'' AS ReturnComment
	--,'' AS ReturnNum
	--,'' AS ProjectNum
	--,'' AS SIRes1
	--,'' AS SIRes2
	--,'' AS SIRes3

FROM stage.WID_FI_SOLine AS SO
where trim(CustNum) not in ('2379','1336','2067','2069','2361','2447','2967','2968','2969','INTR01','K0001','54311','54312','K51093')

--GROUP BY
--	PartitionKey, Company, SalesPerson, CustNum, PartNum, OrderNum, OrderLine, OrderType, InvoiceNum, InvoiceLine, InvoiceDate, SellingShipQty, UnitPrice, UnitCost, DiscountAmount, TotalMiscChrg, WarehouseCode, CreditMemo, ActualDeliveryDate,Indexkey, OrderRel,Currency,ExchangeRate
GO
PRINT N'Creating [stage].[SCM_FI_CustomerAgreement]'
GO
CREATE TABLE [stage].[SCM_FI_CustomerAgreement]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[RecordType] [nvarchar] (50) NULL,
[RecTypeDesc] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivTime] [nvarchar] (10) NULL,
[CurrencyCode] [nvarchar] (10) NULL,
[CustomerTerms] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vSCM_FI_CustomerAgreement]'
GO
CREATE VIEW [stage].[vSCM_FI_CustomerAgreement] AS 
--COMMENT EMPTY FIELDS // ADD UPPER() TRIM() INTO CustomerID 2022-12-21 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(TRIM([Company]), '#', TRIM([RecordType]), '#', TRIM([PartNum]), '#', TRIM([CustNum])))) AS CustomerAgreementID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM([Company]))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM([CustNum]))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM([CustNum])))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM([CurrencyCode]))) AS CurrencyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM([PartNum]))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM([PartNum])))) AS PartID
	,[PartitionKey]

	,[Company]
	,TRIM([CustNum]) AS CustomerNum
	,TRIM([PartNum]) AS PartNum
	,[RecordType] AS [AgreementCode]
	,[RecTypeDesc] AS [AgreementDescription]
	,[DiscountPercent]
	,MAX([UnitPrice]) AS [UnitPrice]
	,[OrderQty] AS [AgreementQty]
	,[CurrencyCode] AS [Currency]
	,[DelivTime]
	,'1900-01-01' AS [AgreementStart]
	,'1900-01-01' AS [AgreementEnd]
	--,NULL AS [CustomerTerms]
	--,0	AS FulfilledQty
	--,0  AS RemainingQty
	--,''	AS UoM
	--,'' AS CARes1
	--,'' AS CARes2
	--,'' AS CARes3
FROM 
	[stage].[SCM_FI_CustomerAgreement]
GROUP BY [PartitionKey], [Company], [CustNum], [PartNum], [RecordType], [RecTypeDesc], [DiscountPercent], [OrderQty], [CurrencyCode], [DelivTime]
GO
PRINT N'Creating [stage].[ARK_PI_Warehouse]'
GO
CREATE TABLE [stage].[ARK_PI_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseID] [nvarchar] (50) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL,
[WarehouseDistrict] [nvarchar] (50) NULL,
[WarehouseAddress] [nvarchar] (100) NULL,
[WarehouseDescription] [nvarchar] (100) NULL,
[WarehouseType] [nvarchar] (50) NULL,
[WarehouseCountry] [nvarchar] (50) NULL,
[Location] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vARK_PI_Warehouse]'
GO


CREATE VIEW [stage].[vARK_PI_Warehouse] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([WarehouseCode])) AS [WarehouseCode]
	,[WarehouseName]
	,[WarehouseDistrict]
	,[WarehouseAddress]
	,[WarehouseDescription]
	,[WarehouseType]
	,[WarehouseCountry]
	,[Location] AS [WarehouseSite]
FROM [stage].[ARK_PI_Warehouse]

--GROUP BY 
--	PartitionKey,[Company],[WarehouseCode],[WarehouseName],[WarehouseDistrict],[WarehouseAddress],[WarehouseDescription],[WarehouseType],[WarehouseCountry],[Location]
GO
PRINT N'Creating [stage].[CER_DE_Supplier]'
GO
CREATE TABLE [stage].[CER_DE_Supplier]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (8) NULL,
[SupplierNum] [nvarchar] (20) NULL,
[MainSupplierName] [int] NULL,
[SUPPLIERNAME] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [int] NULL,
[TelephoneNum] [nvarchar] (30) NULL,
[EMAIL] [nvarchar] (80) NULL,
[ZIPCODE] [nvarchar] (20) NULL,
[CITY] [nvarchar] (30) NULL,
[DISTRICT] [int] NULL,
[COUNTRY] [nvarchar] (10) NULL,
[CountryName] [nvarchar] (100) NULL,
[Region] [varchar] (1) NULL,
[ACCOUNTNUM] [nvarchar] (20) NULL,
[VATNUM] [nvarchar] (20) NULL,
[InternalExternal] [int] NULL,
[CODEOFCONDUCT] [int] NULL,
[SUPPLIERSCORE] [int] NULL,
[MinOrderQty] [int] NULL,
[MinOrderValue] [int] NULL,
[WEBSITE] [nvarchar] (80) NULL,
[Comments] [int] NULL,
[SRes1] [int] NULL,
[SRes2] [int] NULL,
[SRes3] [int] NULL,
[searchName] [nvarchar] (80) NULL
)
GO
PRINT N'Creating [stage].[vCER_DE_Supplier]'
GO

CREATE view [stage].[vCER_DE_Supplier]
as
--ADD TRIM() INTO SupplierID 23-01-232 VA
select 
UPPER(CONCAT([Company],'#',TRIM([SupplierNum]))) AS SupplierCode,
CONVERT([binary](32), HASHBYTES('SHA2_256',[Company])) AS CompanyID,
PartitionKey,
CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM(SupplierNum))))) AS SupplierID,
--CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT([Company],'#',SupplierNum)))) AS SupplierID,
Company,
SupplierNum,
MainSupplierName,
SUPPLIERNAME as SupplierName,
AddressLine1,
AddressLine2,
AddressLine3,
TelephoneNum,
EMAIL as Email,
ZIPCODE as ZipCode,
CITY as City,
DISTRICT as District,
CountryName, Region,
case when left(upper(trim(searchname)),2) = 'DL' THEN 'Service' ELSE 'Non-Service' END  as SupplierCategory,
case when left(upper(trim(searchname)),2) = 'DL' THEN 0 ELSE 1 END  as IsMaterialSupplier, --added 2023-03-23 SB
null as SupplierResponsible,
[dbo].[ProperCase](TRIM(concat (addressline1+' '+ addressline2, null))) AS AddressLine,
concat(CountryName,'-', City, '-', [addressline1], '-', [addressline2]) AS FullAddressLine,
ACCOUNTNUM as AccountNum,
VATNUM as VATNum,
--'' AS OrganizationNum,
InternalExternal,
CODEOFCONDUCT as CodeOfConduct,
null as CustomerNum,
SUPPLIERSCORE as SupplierScore,
MinOrderQty,
MinOrderValue,
WEBSITE as Website,
Comments,
SRes1,
SRes2,
SRes3,
COUNTRY as CountryCode


FROM stage.CER_DE_Supplier
--WHERE UPPER(LEFT(searchName,2)) != 'DL'
;
GO
PRINT N'Creating [stage].[ROR_SE_Customer]'
GO
CREATE TABLE [stage].[ROR_SE_Customer]
(
[PartitionKey] [nvarchar] (50) NULL,
[Company] [nvarchar] (8) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[MainCustomerName] [nvarchar] (max) NULL,
[CustomerName] [nvarchar] (max) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (max) NULL,
[AddressLine3] [nvarchar] (max) NULL,
[TelephoneNum1] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[City] [nvarchar] (100) NULL,
[CountryName] [nvarchar] (50) NULL,
[Division] [nvarchar] (max) NULL,
[CustomerIndustry] [nvarchar] (50) NULL,
[CustomerSubIndustry] [nvarchar] (max) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (max) NULL,
[SalesPersonCode] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[SalesPersonResponsible] [nvarchar] (50) NULL,
[VATNum] [nvarchar] (50) NULL,
[AccountNum] [nvarchar] (max) NULL,
[InternalExternal] [nvarchar] (max) NULL,
[CustomerScore] [nvarchar] (50) NULL,
[CustomerType] [nvarchar] (50) NULL,
[TelephoneNum2] [nvarchar] (max) NULL,
[Email] [nvarchar] (max) NULL,
[State] [nvarchar] (max) NULL,
[SalesDistrict] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[vROR_SE_Customer]'
GO
CREATE VIEW  [stage].[vROR_SE_Customer] AS
--COMMENT EMPTY FIELDS // ADD UPPER() TRIM() INTO CustomerID 2022-12-22 VA
SELECT
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustomerNum)))) AS CustomerID
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [Company])) AS CompanyID
	,CONCAT([Company], '#', TRIM([CustomerNum])) AS CustomerCode
	,PartitionKey

	,[Company]
	,TRIM(CustomerNum) AS [CustomerNum]
	,(TRIM([MainCustomerName])) AS [MainCustomerName]
	,TRIM([CustomerName]) AS [CustomerName]
	,TRIM([AddressLine1]) AS [AddressLine1]
	,TRIM([AddressLine2]) AS [AddressLine2]
	,TRIM([AddressLine3]) AS [AddressLine3]
	,TRIM([TelephoneNum1]) AS [TelephoneNum1]
	,TRIM([TelephoneNum2]) AS [TelephoneNum2]
	,TRIM([Email]) AS [Email]
	,TRIM([ZipCode]) AS [ZipCode]
	,TRIM(SUBSTRING(REPLACE([City], ' ', ''), 6, 100)) AS [City]
	,TRIM([State]) AS [State]
	,TRIM([SalesDistrict]) AS [SalesDistrict]
	,TRIM([CountryName]) AS [CountryCode]
	,TRIM([Division]) AS [CountryName]
	--,NULL AS [Division]
	,TRIM([CustomerIndustry]) AS [CustomerIndustry]
	,TRIM([CustomerSubIndustry]) AS [CustomerSubIndustry]
	,TRIM([CustomerGroup]) AS [CustomerGroup]
	,TRIM([CustomerSubGroup]) AS [CustomerSubGroup]
	,TRIM([SalesPersonCode]) AS [SalesPersonCode]
	,(TRIM([SalesPersonName])) AS [SalesPersonName]
	,TRIM([SalesPersonResponsible]) AS [SalesPersonResponsible]
	,HASHBYTES('SHA2_256', [VATNum]) AS [VATNum]
	--,'' AS OrganizationNum
	,HASHBYTES('SHA2_256', [AccountNum]) AS [AccountNum]
	,TRIM([InternalExternal]) AS [InternalExternal]
	,TRIM([CustomerScore]) AS [CustomerScore]
	,TRIM([CustomerType]) AS [CustomerType]
	,TRIM([AddressLine1]) AS [AddressLine]
	,CONCAT((TRIM(Division)), + ', ' + TRIM(SUBSTRING(REPLACE([City], ' ', ''), 6, 100)), + ', ' + TRIM([ZipCode]), + ', ' + TRIM(addressline1)) AS [FullAddressLine]
FROM [stage].[ROR_SE_Customer]
GO
PRINT N'Creating [stage].[CER_SE_StockTransactions]'
GO
CREATE TABLE [stage].[CER_SE_StockTransactions]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SysRowID] [nchar] (8) NOT NULL,
[PartNum] [nvarchar] (35) NULL,
[OrderNum] [nchar] (30) NULL,
[InvoiceNum] [nvarchar] (30) NULL,
[WarehouseCode] [nvarchar] (6) NULL,
[BinNumber] [nvarchar] (6) NULL,
[BatchID] [nvarchar] (12) NULL,
[FIFOBatchID] [nvarchar] (12) NULL,
[SupplierBatchID] [nvarchar] (20) NULL,
[TranDate] [date] NULL,
[CreateDate] [date] NULL,
[CreateTime] [nvarchar] (10) NULL,
[TranDT] [nvarchar] (50) NULL,
[TranType] [nchar] (2) NULL,
[TranTypeDesc] [varchar] (80) NULL,
[TranSource] [nvarchar] (50) NULL,
[Reference] [nvarchar] (30) NULL,
[TranQty] [decimal] (18, 4) NULL,
[IssuerReceiverCode] [nvarchar] (30) NULL,
[CostPrice] [decimal] (18, 4) NULL,
[SellingPrice] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (10) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[TranValue] [decimal] (18, 4) NULL,
[InternalExternal] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_SE_StockTransactions]'
GO





CREATE VIEW [stage].[vCER_SE_StockTransactions] AS 

SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([SysRowID]))))) AS StockTransactionID
	,UPPER(CONCAT([Company],'#',TRIM([SysRowID]))) AS StockTransactionCode --StockTransactionCode

--	,CONVERT([binary](32),HASHBYTES('SHA2_256',TRIM([Company]))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM(([Company])))) AS CompanyID
    ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM(UPPER([PartNum])))))) AS PartID
 	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	,IIF(TranSource = '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([OrderNum]))))), NULL) AS SalesOrderNumID
	,IIF(TranSource <> '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([OrderNum]))))), NULL) AS PurchaseOrderNumID
--	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([OrderNum])))) AS PurchaseOrderID
	,IIF(TranSource = '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([InvoiceNum]))))), NULL) AS SalesInvoiceID
	,IIF(TranSource <> '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([InvoiceNum]))))), NULL) AS PurchaseInvoiceID
	,IIF(TranSource = '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([IssuerReceiverCode]))))), NULL) AS CustomerID
	,IIF(TranSource <> '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([IssuerReceiverCode]))))), NULL) AS SupplierID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([CurrencyCode])))) AS CurrencyID
	,[PartitionKey]

    
    ,TRIM([Company]) AS Company -- 
	,TRIM([WarehouseCode]) AS WarehouseCode
	,iif(convert(date, [TranDate]) = '2010-01-01' AND [TranTypeDesc] = 'Incoming goods','OB',[TranType]) AS TransactionCode
    ,iif(convert(date, [TranDate]) = '2010-01-01' AND [TranTypeDesc] = 'Incoming goods','Opening balance',[TranTypeDesc])	AS TransactionDescription
	,IIF(TRIM([IssuerReceiverCode])='', NULL,TRIM(IssuerReceiverCode)) AS IssuerReceiverNum
	,IIF(TRIM([OrderNum])='', NULL, TRIM(OrderNum)) AS OrderNum 
	,'' AS OrderLine
	,IIF(TRIM([InvoiceNum])='', NULL,TRIM(InvoiceNum)) AS InvoiceNum
	,'' AS InvoiceLine
    ,TRIM(UPPER([PartNum])) AS PartNum
    ,IIF(TRIM([BinNumber])='', NULL,TRIM(BinNumber)) AS BinNum
    ,IIF(TRIM([BatchID])='', NULL,TRIM(BatchID)) AS BatchNum
    ,convert(date, [TranDate]) AS TransactionDate
    ,[CreateTime] AS TransactionTime
	,[TranQty] AS TransactionQty
    ,[TranValue] AS TransactionValue
	,[CostPrice]
    ,[SellingPrice] AS SalesUnitPrice
	,IIF(TRIM([CurrencyCode])='', NULL,TRIM(CurrencyCode)) AS Currency
	,[Reference]
	,convert(date, [CreateDate]) AS AdjustmentDate
	,InternalExternal
	,'' AS STRes1
	,'' AS STRes2
	,'' AS STRes3
    ,[SysRowID] AS IndexKey
	,IIF(TRIM([FIFOBatchID])='', NULL,TRIM(FIFOBatchID)) AS FIFOBatchID
    ,IIF(TRIM([SupplierBatchID])='', NULL,TRIM(SupplierBatchID)) AS SupplierBatchID
	,[TranDT]
    ,[TranSource]
--	Simple logic for counting StockBalance, maybe to simple ?
--	,SUM(TranQty) OVER (PARTITION BY  WarehouseCode , PartNum, BatchID ORDER BY TranDate asc ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) 
--	,SUM(TranQty) OVER (PARTITION BY  WarehouseCode , PartNum, BatchID ORDER BY TranDate asc) AS StockBalanceCount --Original
--	,SUM(TranQty) OVER (PARTITION BY  WarehouseCode , PartNum, BatchID ORDER BY TranDT ASC) AS StockBalanceCount -- DZ modified  -- ET 20200916 decision, solution in measures
--	,SUM(TranValue) OVER (PARTITION BY  WarehouseCode , PartNum, BatchID ORDER BY TranDate asc) AS StockBalanceValue --Original
--	,SUM(TranValue) OVER (PARTITION BY  WarehouseCode , PartNum, BatchID ORDER BY TranDT ASC) AS StockBalanceValue -- DZ modified  -- ET 20200916 decision, solution in measures
				 
FROM 
	[stage].[CER_SE_StockTransactions]
GO
PRINT N'Creating [dm_LS].[fctGeneralLedger]'
GO
CREATE VIEW [dm_LS].[fctGeneralLedger] AS 
SELECT 
 gl.[GeneralLedgerID]
,gl.[AccountID]
,gl.[CustomerID]
,gl.[SupplierID]
,gl.[CompanyID]
,gl.[ProjectID]
,gl.[CostUnitID]
,gl.[CostBearerID]
,gl.[PartitionKey]
,gl.[Company]
,gl.[AccountNum]
,gl.[CostUnitNum]
,gl.[CostBearerNum]
,gl.[JournalType]
,gl.[JournalDate]
,gl.[JournalNum]
,gl.[JournalLine]
,gl.[AccountingDate]
,gl.[Description]
,gl.[Currency]
,gl.[ExchangeRate]
,gl.[InvoiceAmount]
,gl.[InvoiceAmountLC]
,gl.[CustomerNum]
,gl.[SupplierNum]
,gl.[SalesInvoiceNum]
,gl.[PurchaseInvoiceNum]
,gl.[SupplierInvoiceNum]
,gl.[LinkToOriginalInvoice]
,gl.[DeliveryCountry]
,gl.[TransactionNum]
,gl.[VATCode]
,gl.[VATCodeDesc]
,gl.[GLRes1]
,gl.[GLRes2]
,gl.[GLRes3]
FROM [dm].[FactGeneralLedger] gl
LEFT JOIN dbo.Company com ON gl.Company = com.Company
WHERE com.BusinessArea = 'Lifting Solutions' AND com.[Status] = 'Active'

  --where Company IN ('CNOCERT')
GO
PRINT N'Creating [stage].[NOM_NO_StockTransaction]'
GO
CREATE TABLE [stage].[NOM_NO_StockTransaction]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[IndexKey] [nvarchar] (50) NOT NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[TransactionCode] [nvarchar] (50) NULL,
[TransactionDescription] [varchar] (100) NULL,
[TransactionType] [nvarchar] (50) NULL,
[IssuerReceiverNum] [nvarchar] (50) NULL,
[OrderNum] [nchar] (50) NULL,
[OrderLine] [nchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[BinNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[TransactionDate] [date] NULL,
[TransactionTime] [nvarchar] (10) NULL,
[CreateDate] [date] NULL,
[FIFOBatchID] [nvarchar] (50) NULL,
[SupplierBatchID] [nvarchar] (50) NULL,
[TransactionQty] [decimal] (18, 4) NULL,
[TransactionValue] [decimal] (18, 4) NULL,
[CostPrice] [decimal] (18, 4) NULL,
[SalesUnitPrice] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (10) NULL,
[Reference] [nvarchar] (50) NULL,
[AdjustmentDate] [date] NULL,
[InternalExternal] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vNOM_NO_StockTransaction]'
GO
CREATE VIEW [stage].[vNOM_NO_StockTransaction] AS 
--ADD UPPER() TRIM() INTO CustomerID 23-01-09 VA
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', TRIM(IndexKey)))) AS StockTransactionID
	,UPPER([Company]) AS [Company]
	,UPPER(TRIM([PartNum])) AS [PartNum]
	,UPPER(TRIM([WarehouseCode])) AS WarehouseCode
	,IIF(TRIM(IssuerReceiverNum)='', NULL,TRIM(IssuerReceiverNum)) AS IssuerReceiverNum
	,TransactionCode
	,TransactionType AS TransactionDescription
	,IIF(TRIM([OrderNum])='', NULL,TRIM(OrderNum)) AS OrderNum
	,OrderLine
	,IIF(TRIM([InvoiceNum])='', NULL,TRIM(InvoiceNum)) AS InvoiceNum
	,InvoiceLine
	,IIF(TRIM([BinNum])='', NULL,TRIM(BinNum)) AS BinNum
	,IIF(TRIM([BatchNum])='', NULL,TRIM(BatchNum)) AS BatchNum
	,CONVERT(date, TransactionDate) AS TransactionDate
	,TransactionTime
	,CONVERT(decimal(18,2), TransactionQty) AS TransactionQty
	,CONVERT(decimal(18,2), TransactionValue) AS TransactionValue
	,CONVERT(decimal(18,2),  CostPrice) AS [CostPrice]
	,CONVERT(decimal(18,2),  SalesUnitPrice) AS SalesUnitPrice
	,IIF(TRIM([Currency])='', NULL,TRIM(Currency)) AS Currency
	,[Reference]
	,CONVERT(date, AdjustmentDate) AS AdjustmentDate
	,IIF(InternalExternal = 'I', 'Internal', 'External') AS InternalExternal
	,CreateDate AS STRes1
	,FIFOBatchID AS STRes2
	,TransactionDescription AS STRes3

	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
    --,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT([Company],'#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,IIF(TransactionCode in ('930', '931', '936', '907', '912', '913'), CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([InvoiceNum])))), NULL) AS PurchaseInvoiceID
--	,IIF(TransactionCode in ('930', '931', '936'), CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([OrderNum])))), NULL) AS PurchaseOrderNumID
	,IIF(TransactionCode in ('930', '931', '936', '907', '912', '913'), CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company],'#',TRIM([OrderNum]))))), NULL) AS PurchaseOrderNumID
	,IIF(TransactionCode in ('800', '801', '815'), CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company],'#',TRIM([OrderNum]))))), NULL) AS SalesOrderNumID
	,IIF(TransactionCode in ('800', '801', '815'), CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company],'#',TRIM([InvoiceNum]))))), NULL) AS SalesInvoiceID
	,IIF(TransactionCode in ('800', '801', '815'), CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company],'#',TRIM(IssuerReceiverNum))))), NULL) AS CustomerID
	--,IIF(TransactionCode in ('800', '801', '815'), CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM(IssuerReceiverNum)))), NULL) AS CustomerID
	,IIF(TransactionCode in ('930', '931', '936', '907', '912', '913'), CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]),'#',TRIM(IssuerReceiverNum))))), NULL) AS SupplierID
	--,IIF(TransactionCode in ('930', '931', '936', '907', '912', '913'), CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company],'#',TRIM(IssuerReceiverNum))))), NULL) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Currency])))) AS CurrencyID
	,PartitionKey
	,IndexKey

FROM [stage].[NOM_NO_StockTransaction]
GO
PRINT N'Creating [dm].[FactSalesOrderLog]'
GO
------------------------------------------------------------------------------------------
CREATE   VIEW [dm].[FactSalesOrderLog] AS

SELECT  CONVERT(bigint,[SalesOrderLogID]) AS [SalesOrderLogID]
      ,CONVERT(bigint,[CompanyID])			AS [CompanyID]
      ,CONVERT(bigint,[CustomerID])			AS [CustomerID]
      ,CONVERT(bigint,[PartID])				AS [PartID]
      ,CONVERT(bigint,[WarehouseID])		AS [WarehouseID]
	  ,CONVERT(BIGINT,HASHBYTES('SHA2_256',CONCAT(Company,'#',NULLIF(TRIM(SalesPersonName),'')))) AS SalesPersonNameID -- NEW
      ,[SalesOrderDateID]
      ,[PartitionKey]
      ,[Company]
      ,[CustomerNum]
      ,[SalesOrderNum]
      ,[SalesOrderLine]
      ,[SalesOrderSubLine]
      ,[SalesOrderType]
	  ,SalesOrderLogType
      ,[SalesOrderDate]
      ,[SalesOrderLogDate]
      ,[SalesInvoiceNum]
      ,[SalesOrderQty]
      ,[UoM]
      ,[UnitPrice]
      ,[UnitCost]
      ,[Currency]
      ,[ExchangeRate]
      ,[OpenRelease]
      ,[DiscountPercent]
      ,[DiscountAmount]
      ,[PartNum]
      ,[PartType]
      ,NULLIF(TRIM(SalesPersonName),'') AS SalesPersonName
      ,[Department]
     -- ,[ReturnComment]
    --  ,[SalesReturnInvoiceNum]
      ,[WarehouseCode]
   --   ,[CancellationCode]
   --   ,[IndexKey]
  FROM [dw].[SalesOrderLog]
GO
PRINT N'Creating [stage].[SCM_FI_SOLine]'
GO
CREATE TABLE [stage].[SCM_FI_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderRel] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (100) NULL,
[PartNum] [nvarchar] (50) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Indexkey] [nvarchar] (50) NULL,
[Site] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[LineFlag] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[vSCM_FI_SOLine]'
GO

CREATE VIEW [stage].[vSCM_FI_SOLine] AS
--COMMENT EMPTY FIELD // ADD UPPER()TRIM() INTO PartID 2022-12-21 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(PartNum), '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine)))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', OrderNum, '#', OrderLine, '#', OrderRel, '#', InvoiceNum))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(CustNum = '' OR CustNum IS NULL, 'MISSINGCUSTOMER', CustNum)), '#', InvoiceNum))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum)))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(CustNum = '' OR CustNum IS NULL, 'MISSINGCUSTOMER', CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID  
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(PartNum = '' OR PartNum IS NULL, 'MISSINGPART', PartNum))))) AS PartID  
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT(int, replace(convert(date,InvoiceDate),'-','')) AS SalesInvoiceDateID  
	,CONCAT(Company,'#',OrderNum,'#',OrderLine, '#',InvoiceNum) AS SalesOrderCode
	,CONCAT(Company,'#',TRIM(InvoiceNum),'#',TRIM(InvoiceLine)) AS SalesInvoiceCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey

	,TRIM(Company) AS Company
	,TRIM(SalesPerson) AS SalesPersonName
	,TRIM(CustNum) AS CustomerNum
	,TRIM(PartNum) AS PartNum
	,[LineFlag] AS PartType --Changed av DZ 2021-05-06, it was CASE WHEN TRIM(OrderNum) = '0' THEN 'PrimaryPart' ELSE 'SubPart' END
	,TRIM(OrderNum) AS SalesOrderNum
	,TRIM(OrderLine) AS SalesOrderLine
	,TRIM(OrderSubLine) AS SalesOrderSubLine
--	,OrderRel AS OrderRelNum
	,TRIM(OrderType) AS SalesOrderType
	,TRIM(InvoiceNum) AS SalesInvoiceNum
	,TRIM(InvoiceLine) AS SalesInvoiceLine
	--,'' AS SalesInvoiceType
	,CASE WHEN InvoiceDate = '' THEN '1900-01-01' ELSE CONVERT(date, InvoiceDate) END AS SalesInvoiceDate
	,ActualDeliveryDate	 AS ActualDelivDate
	,SellingShipQty	AS SalesInvoiceQty
	--,'' AS UoM
	,UnitPrice	
	,UnitCost
	,IIF(SellingShipQty*UnitPrice = 0, 0, DiscountAmount/SellingShipQty*UnitPrice) AS DiscountPercent ----Changed av DZ 2021-05-06, it was "0"
	,DiscountAmount
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	,TotalMiscChrg
	--,NULL AS VATAmount --Changed av DZ 2021-05-06, it was "0"
	,CASE WHEN ExchangeRate = 1 THEN 'EUR' ELSE '' END AS Currency
	,CONVERT(decimal (18,4), ExchangeRate) AS ExchangeRate
	,CreditMemo
	--,'' AS SalesChannel
	--,'' AS Department
	,TRIM(WarehouseCode) AS WarehouseCode
	--,NULL AS DeliveryAddress
	--,'' AS CostBearerNum
	--,'' AS CostUnitNum
	,ReturnComment
	--,'' AS ReturnNum
	--,'' AS ProjectNum
	,MAX(Indexkey) AS Indexkey
	--,'' AS SIRes1
	--,'' AS SIRes2
	--,'' AS SIRes3
FROM stage.SCM_FI_SOLine 
GROUP BY
	PartitionKey, Company, SalesPerson, CustNum, PartNum, OrderNum, OrderLine, OrderSubLine, OrderType, InvoiceNum, InvoiceLine, InvoiceDate, ActualDeliveryDate, SellingShipQty, UnitPrice, UnitCost, DiscountAmount, TotalMiscChrg, WarehouseCode, CreditMemo, [Site], OrderRel, LineFlag, ReturnComment, ExchangeRate
GO
PRINT N'Creating [stage].[CER_FI_PurchaseOrder]'
GO
CREATE TABLE [stage].[CER_FI_PurchaseOrder]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [varchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[LineType] [nvarchar] (50) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[InvoiceSupplierCode] [nvarchar] (50) NULL,
[DelivCustCode] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[ItemType] [int] NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[OrderedQty] [decimal] (18, 4) NULL,
[ReceivedQty] [decimal] (18, 4) NULL,
[InvoicedQty] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[CommitedDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[ReqDelivDate] [date] NULL,
[DelivDate] [date] NULL,
[OrgReqDelivDate] [date] NULL,
[PurchaserName] [nvarchar] (50) NULL,
[RecievingNumber] [nvarchar] (50) NULL,
[LeadTime] [nvarchar] (50) NULL,
[Comments] [nvarchar] (max) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[FlagLineConfirmed] [nvarchar] (50) NULL,
[PurchaseOrderStatus] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_FI_PurchaseOrder]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vCER_FI_PurchaseOrder] AS
--change ID creation 2023-08-24 VA
SELECT
	--CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(PurchaseOrderSubLine), '#', TRIM(WarehouseCode), '#', TRIM(PurchaserName))))) AS PurchaseOrderID 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum),'#',TRIM(PurchaseOrderLine),'#',TRIM(InvoiceNum))))) AS PurchaseOrderID
		--,'#',TRIM(UPPER([PartNum])), '#', TRIM(UPPER(SupplierCode)), '#', OrderedQty
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', '')))) AS PurchaseInvoiceID --TRIM(InvoiceNum)
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(DelivCustCode))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierCode))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([CurrencyCode])))) AS CurrencyID
	,UPPER(CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(PurchaseOrderSubLine))) AS PurchaseOrderCode --, '#', TRIM(InvoiceNum)
	,PartitionKey AS PartitionKey

	,UPPER(TRIM(Company)) AS Company
	,TRIM(PurchaseOrderNum) AS PurchaseOrderNum
	,TRIM(PurchaseOrderLine) AS PurchaseOrderLine
	,TRIM(PurchaseOrderSubLine) AS PurchaseOrderSubLine
	,TRIM(OrderType) AS PurchaseOrderType
	,MAX(OrderDate) AS PurchaseOrderDate
	,MAX(PurchaseOrderStatus) AS PurchaseOrderStatus
	,MAX(OrgReqDelivDate) AS OrgReqDelivDate
	,MAX(CommitedDelivDate) AS CommittedDelivDate
	,MAX(ActualDelivDate) AS ActualDelivDate
	,MAX(ReqDelivDate) AS ReqDelivDate
	,MAX(DelivDate) AS DelivDate
	,TRIM(InvoiceNum) AS PurchaseInvoiceNum --TRIM(InvoiceNum)
	,TRIM(UPPER([PartNum])) AS PartNum
	,TRIM(UPPER(SupplierCode)) AS SupplierNum
	--,'' AS SupplierPartNum
	--,'' AS [SupplierInvoiceNum] 
	,TRIM(DelivCustCode) AS DelivCustomerNum
	--,'' AS PartStatus
	,MAX(OrderedQty) AS PurchaseOrderQty
	,SUM(ReceivedQty) AS ReceiveQty
	,SUM(InvoicedQty) AS InvoiceQty
	--,0 AS MinOrderQty
	--,'' AS UoM
	,AVG(UnitPrice) AS UnitPrice
	,AVG(DiscountPercent) AS DiscountPercent
	,SUM(DiscountAmount) AS DiscountAmount
	--,0 AS LandedCost
	,CONVERT(decimal(18,5), IIF(AVG(ExchangeRate) = 0, 0, 1/AVG(ExchangeRate))) AS ExchangeRate --should be from original currency (eg. SEK) to local (=EUR)
	,CASE WHEN CurrencyCode = '15' THEN 'EUR' WHEN CurrencyCode = '2' THEN 'USD' ELSE CurrencyCode END AS Currency
	,TRIM(PurchaserName) AS PurchaserName
	,TRIM(WarehouseCode) AS WarehouseCode
	,TRIM(RecievingNumber) AS ReceivingNum
	,IIF(LeadTime = 'na', NULL, Leadtime) AS DelivTime
	--,'' AS PurchaseChannel
	,FlagLineConfirmed AS Documents-- added afer request of CertexSE Petter Walling ticket #inc-95188 and approved by Emil T /20230207 DZ
	,MAX(TRIM(Comments)) AS Comments
	,CASE WHEN CONVERT(NVARCHAR(50),TRIM([LineType])) like '0' THEN 'Stock Item Line' WHEN CONVERT(NVARCHAR(50),TRIM([LineType])) like '1' THEN 'Non Stock Item Line' ELSE NULL END AS [LineType]
	,SUM(TotalMiscChrg) AS TotalMiscChrg
	,CONVERT(NVARCHAR(50), ItemType) AS ItemType
	,MAX(IIF(InvoiceNum != ' ', 1, 0)) AS IsClosed
	--,'' AS DaysSincePOrder
	--,'' AS PORes1
	--,'' AS PORes2
	--,'' AS PORes3
FROM 
	[stage].[CER_FI_PurchaseOrder]
	
GROUP BY
	PartitionKey, Company, PurchaseOrderNum, PurchaseOrderLine, PurchaseOrderSubLine, SupplierCode, DelivCustCode, LineType, PartNum, OrderType, CurrencyCode, ItemType
	,  PurchaserName, RecievingNumber, LeadTime, WarehouseCode, FlagLineConfirmed, InvoiceNum
	--OrderDate, OrgReqDelivDate, CommitedDelivDate, ActualDelivDate, DelivDate, ReqDelivDate, , UnitPrice, DiscountPercent, OrderedQty, ReceivedQty, InvoicedQty, TotalMiscChrg, ExchangeRate, InvoiceNum, Comments, PurchaseOrderStatus
GO
PRINT N'Creating [stage].[OCS_SE_Supplier]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[OCS_SE_Supplier]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[SupplierName] [nvarchar] (100) NULL,
[MainSupplierName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[TelephoneNum1] [nvarchar] (50) NULL,
[Email] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[City] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[SupplierGroup] [nvarchar] (50) NULL,
[SupplierIndustry] [nvarchar] (50) NULL,
[CodeOfConduct] [nvarchar] (50) NULL,
[PrimaryPurchaser] [nvarchar] (50) NULL,
[PrimaryPurchaserName] [nvarchar] (50) NULL,
[SupplierResponsible] [nvarchar] (50) NULL,
[VATNum] [nvarchar] (50) NULL,
[OrgNum] [nvarchar] (50) NULL,
[IsAxInterInternal] [nvarchar] (50) NULL,
[IsActiveRecord] [nvarchar] (50) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vOCS_SE_Supplier]'
GO

CREATE VIEW [stage].[vOCS_SE_Supplier] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([SupplierNum]))))) AS SupplierID
    ,UPPER(CONCAT([Company], '#', TRIM([SupplierNum]))) AS SupplierCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Company])))) AS CompanyID
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([SupplierNum])) AS SupplierNum
	,MainSupplierName
	,[dbo].[ProperCase](TRIM(SupplierName)) AS SupplierName
	,TRIM([AddressLine1]) AS AddressLine1
    ,TRIM([AddressLine2]) AS AddressLine2
    ,TRIM([AddressLine3]) AS AddressLine3
	,TelephoneNum1 AS [TelephoneNum]
	--,TelephoneNum2
	,[Email]
	,TRIM([ZipCode]) AS ZipCode
	,TRIM([City]) AS City
	--,'' AS District
	,CountryName
	,CountryCode
	--,'' AS [Region] 
	,[State]
	,SupplierGroup
	--,SupplierSubGroup
	,SupplierIndustry
	--,SupplierSubIndustry
	--,TRIM(SupplierType) AS SupplierCategory 
	,TRIM(SupplierResponsible) AS SupplierResponsible
	,[dbo].[ProperCase](TRIM(concat (addressline1+' '+ addressline2, null))) AS AddressLine
	,[dbo].[ProperCase](TRIM(concat_ws(',',coalesce([dbo].[ProperCase](CountryName),null),IIF(City= ' ',null,trim(substring(replace([dbo].[ProperCase](AddressLine3),' ', ''), 6, 100))),IIF(ZipCode= ' ',null,[dbo].[udf_GetNumeric]([Addressline3]))
		,coalesce(IIF([addressline1]= ' ',null,[addressline1]),IIF([addressline2]= ' ',null,[addressline2]))
		,coalesce(IIF([addressline2]= ' ',null,[addressline2]),IIF([addressline3]= ' ',null,[addressline3]))))) AS FullAddressLine
	--,[AccountNum] 
	,[VATNum]
	,OrgNum AS OrganizationNum
	,CodeOfConduct
	,PrimaryPurchaser AS PurchaserPers
	,PrimaryPurchaserName AS PurchaserPersonName
	--,'' AS SupplierScore
	--,[MinOrderQty]
	--,MinOrderValue	
	--,MinOrderValueCurrency
	--,[Website]
	--,TRIM([Comments]) AS Comments
	--,'' AS SRes1
	--,'' AS SRes2
	--,'' AS SRes3
	,IsAxInterInternal AS [InternalExternal]
	--,IsBusinessAreaInternal
	--,IsCompanyGroupInternal
	,IsActiveRecord
	,CreatedTimeStamp
	,ModifiedTimeStamp
FROM [stage].[OCS_SE_Supplier]
--GROUP BY 
--      [PartitionKey],[Company],[SupplierNum],MainSupplierName,[SupplierName],[AddressLine1],[AddressLine2],[AddressLine3],[City],[ZipCode],[Region],District, [CountryName]
--	  ,[SupplierCategory],[SupplierResponsible],[Reference],[AccountNum],[VATNum],[SupplierScore],[CustomerNum],[TelephoneNum],[Email],[Website],[CodeOfConduct]
--	  ,[MinOrderQty],[InternalExternal],[Comments],CountryCode
GO
PRINT N'Creating [stage].[JEN_NO_SOLine]'
GO
CREATE TABLE [stage].[JEN_NO_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderRel] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (100) NULL,
[PartNum] [nvarchar] (50) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Indexkey] [nvarchar] (50) NULL,
[Site] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[UnitPriceOCY] [decimal] (18, 4) NULL,
[UnitCostOCY] [decimal] (18, 4) NULL,
[DiscountAmountOCY] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vJEN_NO_SOLine]'
GO

CREATE VIEW [stage].[vJEN_NO_SOLine] AS
--COMMENT EMPTY FIELDS // ADD UPPER()TRIM() INTO WarehouseID,PartID,CustomerID 2022-12-22 VA
--ADD UPPER()TRIM() INTO SalesLedgerID 23-02-17 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(PartNum), '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine), '#', Indexkey))) AS SalesInvoiceID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',OrderNum,'#',OrderLine,'#',InvoiceNum))) AS SalesOrderID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(CustNum), '#', TRIM(InvoiceNum)))) AS SalesLedgerID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ), '#', InvoiceNum))) AS SalesLedgerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(OrderNum)))) AS SalesOrderNumID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) )))) AS CustomerID
    ,CONVERT([binary](32),HASHBYTES('SHA2_256',Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID 
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) )))) AS PartID 
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(WarehouseCode))))) AS WarehouseID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(WarehouseCode)))) AS WarehouseID
	,CONCAT(Company,'#',OrderNum,'#',OrderLine, '#',OrderSubLine,'#',  InvoiceNum) AS SalesOrderCode
	,CONVERT(int, replace(convert(date,InvoiceDate),'-','')) AS SalesInvoiceDateID  
	,CONCAT(Company,'#',TRIM(InvoiceNum),'#',TRIM(InvoiceLine)) AS SalesInvoiceCode 
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey

	,Company
	,TRIM(SalesPerson) AS SalesPersonName
	,TRIM(CustNum) AS CustomerNum
	,TRIM(PartNum) AS PartNum
	,CASE WHEN TRIM(OrderNum) = '0' THEN 'PrimaryPart' ELSE 'SubPart' END  AS PartType
	,TRIM(OrderNum) AS SalesOrderNum
	,OrderLine		AS SalesOrderLine
	,OrderSubLine	AS SalesOrderSubLine
	,OrderType AS SalesOrderType
	,InvoiceNum	AS SalesInvoiceNum
	,InvoiceLine	AS SalesInvoiceLine
	--,'' AS SalesInvoiceType
	,CASE WHEN InvoiceDate = '' THEN '1901-01-01' ELSE CONVERT(date, InvoiceDate) END AS SalesInvoiceDate
	,ActualDeliveryDate		AS ActualDelivDate
	--,'' AS UoM
	,SellingShipQty			AS SalesInvoiceQty
	,UnitPrice	
	,UnitCost
	--,NULL AS DiscountPercent
	,DiscountAmount
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	,TotalMiscChrg
	--,NULL AS VATAmount
	,[CurrencyCode] AS Currency
	,[ExchangeRate] AS ExchangeRate
	,CreditMemo
	--,'' AS SalesChannel
	--,'' AS Department
	,TRIM(WarehouseCode) AS WarehouseCode
	--,NULL AS DeliveryAddress
	--,'' AS CostBearerNum
	--,''AS CostUnitNum
	--,'' AS ReturnComment
	--,'' AS ReturnNum
	--,'' AS ProjectNum
	,IndexKey
	--,'' AS SIRes1
	--,'' AS SIRes2
	--,'' AS SIRes3
FROM stage.JEN_NO_SOLine
	--where CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(PartNum), '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine), '#', Indexkey))) != 0x78A0D14FAF9CE5F4A99812E46B30064BC3D1C1D7E398B6E28D94CD2650DB6D37


--GROUP BY
--	PartitionKey,Company,SalesPerson, CustNum, PartNum, OrderNum,OrderLine,OrderSubLine, OrderType,InvoiceNum,InvoiceLine, InvoiceDate,ActualDeliveryDate,SellingShipQty,UnitPrice ,UnitCost ,DiscountAmount,TotalMiscChrg,WarehouseCode, [CurrencyCode], [ExchangeRate], CreditMemo, Indexkey, OrderType
GO
PRINT N'Creating [stage].[WID_EE_Customer]'
GO
CREATE TABLE [stage].[WID_EE_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[CustomerName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (50) NULL,
[TelephoneNumber2] [nvarchar] (50) NULL,
[Email] [nvarchar] (100) NULL,
[ABCCode] [nchar] (10) NULL,
[City] [nvarchar] (50) NULL,
[ZIP] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[VATRegNr] [nvarchar] (20) NULL,
[AccountString] [nvarchar] (50) NULL,
[CustomerABC] [nvarchar] (10) NULL,
[CustomerType] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vWID_EE_Customer]'
GO

CREATE VIEW [stage].[vWID_EE_Customer] AS
-- ROWS CREATED FROM BUDGET TABLE 23-01-12
--COMMENT EMPTY FIELDS 23-01-12 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustomerNum)))) AS CustomerID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', [Company])) AS CompanyID
	,CONCAT([Company], '#', TRIM([CustomerNum])) AS CustomerCode
	,PartitionKey

	,Company
    ,TRIM(CustomerNum) AS CustomerNum
	--,'' AS MainCustomerName
    ,CustomerName AS CustomerName
    ,[AddressLine1]
    ,[AddressLine2]
    ,[AddressLine3]
	,[TelephoneNumber1]	AS [TelephoneNum1]
	,[TelephoneNumber2]	AS [TelephoneNum2]
	,[Email]
	,[ZIP] AS ZipCode
    ,IIF([City]= ' ',null,([City])) AS [City]    
    ,IIF([State]= ' ',null,[State]) AS [State]
	,[District]		AS SalesDistrict
	,case when len(TRIM(customer.CountryCode)) = 3 then cc.[Alpha-2 code]
	else iif(customer.countryName is null, 'EE', customer.countryCode)
	end AS CountryCode
    ,(customer.CountryName) AS CountryName
	--,'' AS Division
	--,'' AS CustomerIndustry
	--,'' AS CustomerSubIndustry
	,TRIM(CONCAT(AddressLine1,' ',AddressLine2)) as AddressLine
	,CONCAT(TRIM(customer.Countryname), + ', ' + TRIM([AddressLine2]), + ', ' + TRIM([AddressLine1])) AS FullAddressLine
    ,CustomerGroup AS CustomerGroup
	,CustomerSubGroup AS CustomerSubGroup
	,[SalesRepCode]	 AS SalesPersonCode
    ,SalesPersonName
	--,'' AS [SalesPersonResponsible]
    ,TRIM([VATRegNr]) AS [VATNum]
	--,'' AS OrganizationNum
	,[AccountString] AS AccountNum
	--,'' AS [InternalExternal]
	,CustomerABC AS CustomerScore
	,CustomerType

  FROM [stage].[WID_EE_Customer] as customer
	LEFT JOIN DBO.CountryCodes AS cc
		ON customer.CountryCode = cc.[Alpha-3 code]
GO
PRINT N'Creating [dm_LS].[dimCustomer]'
GO



CREATE VIEW [dm_LS].[dimCustomer] AS

SELECT cust.[CustomerID]
      ,cust.[CompanyID]
      ,cust.[Company]
      ,cust.[CustomerNum]
      ,cust.[MainCustomerName]
      ,cust.[CustomerName]
      ,cust.[Customer]
      ,cust.[AddressLine1]
      ,cust.[AddressLine2]
      ,cust.[AddressLine3]
      ,cust.[TelephoneNum1]
      ,cust.[TelephoneNum2]
      ,cust.[Email]
      ,cust.[ZipCode]
      ,cust.[City]
      ,cust.[State]
      ,cust.[SalesDistrict]
      ,cust.[CountryCode]
      ,cust.[CountryName]
      ,cust.[Division]
      ,cust.[CustomerIndustry]
      ,cust.[CustomerSubIndustry]
      ,cust.[AddressLine]
      ,cust.[FullAddressLine]
      ,cust.[CustomerGroup]
      ,cust.[CustomerSubGroup]
      ,cust.[SalesPersonCode]
      ,cust.[SalesPersonName]
      ,cust.[SalesPersonResponsible]
      ,cust.[VATNum]
      ,cust.[OrganizationNum]
      ,cust.[AccountNum]
      ,cust.[InternalExternal]
      ,cust.[CustomerScore]
      ,cust.[CustomerType]
      ,cust.[CustomerCode]
      ,cust.[CustomerStatus]
      ,cust.[DUNS]
      ,cust.[DUNS_MatchScore]
      ,cust.[CRes1]
      ,cust.[CRes2]
      ,cust.[CRes3]
      ,cust.[is_inferred]
      ,cust.[is_deleted]
      ,cust.[is_validCountryCode]
      ,cust.[DUNS_Status]
FROM [dm].[DimCustomer] cust
LEFT JOIN dbo.Company com ON cust.Company = com.Company
WHERE com.BusinessArea = 'Lifting Solutions' AND com.[Status] = 'Active'

--WHERE [Company] in ('AFISCM', 'CDKCERT', 'CEECERT', 'CFICERT', 'CLTCERT', 'CLVCERT', 'CSECERT', 'CUKCERT', 'CNOEHAU', 'CNOCERT', 'CERPL', 'CyESA', 'HFIHAKL', 'TRACLEV'
--					,'MENBE14','MENNL01','MENNL02','MENNL03','MENNL04','MENNL07','MENNL11')


--CERPL is left over
GO
PRINT N'Creating [stage].[WID_FI_PurchaseLedger]'
GO
CREATE TABLE [stage].[WID_FI_PurchaseLedger]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierCode] [nvarchar] (50) NOT NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[InvoiceLCYAmount] [decimal] (18, 4) NOT NULL,
[InvoiceCurrAmount] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (10) NULL,
[VATPaid] [decimal] (18, 4) NULL,
[VATcode] [nvarchar] (10) NULL,
[PayToName] [nvarchar] (50) NULL,
[PaymentTermsCode] [nvarchar] (50) NULL,
[PrepaymentNum] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vWID_FI_PurchaseLedger]'
GO

CREATE VIEW [stage].[vWID_FI_PurchaseLedger] AS 
--ADD TRIM() UPPER() INTO SupplierID 23-01-24 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(PurchaseInvoiceNum), TRIM(PurchaseOrderNum)))) AS PurchaseLedgerID

	,CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(PurchaseInvoiceNum)) AS PurchaseLedgerCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierCode))))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(SupplierCode)))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(PurchaseInvoiceNum)))) AS PurchaseInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(PurchaseOrderNum)))) AS PurchaseOrderNumID
	,CONVERT(int, replace(convert(date,InvoiceDate), '-', '')) AS PurchaseInvoiceDateID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM(Currency))) AS CurrencyID
	,[PartitionKey]

	,[Company]
	,TRIM(SupplierCode) AS SupplierNum
	,TRIM(PurchaseInvoiceNum) AS [PurchaseInvoiceNum]
	,TRIM(PurchaseOrderNum) AS [PurchaseOrderNum]
	,CONVERT(date, [InvoiceDate]) AS PurchaseInvoiceDate
	,CONVERT(date, [DueDate]) AS PurchaseDueDate
	,CONVERT(date, [LastPaymentDate]) AS PurchaseLastPaymentDate
	,[InvoiceLCYAmount] AS InvoiceAmount
--	,IIF([InvoiceCurrAmount]=0, null, [InvoiceLCYAmount]/[InvoiceCurrAmount]) AS ExchangeRate
	,1 AS [ExchangeRate]
	,'EUR' AS [Currency]
	,[VATPaid] AS VATAmount
	,[VATcode]
	,[PayToName]
	,'' AS [PayToCity]
	,'' AS [PayToContact]
	,[PaymentTermsCode] AS PaymentTerms
	,[PrepaymentNum]
	,'' AS LastPaymentNum
	,'' AS PLRES1
	,'' AS PLRES2
	,'' AS PLRES3
	--,NULL AS PaidInvoiceAmount
	--,NULL AS RemainingInvoiceAmount
	--,NULL AS LinkToOriginalInvoice
	,CAST ('1900-01-01' AS DATE)AS AccountingDate
	--,NULL AS AgingPeriod
	--,NULL AS AgingSort
	--,NULL AS VATCodeDesc
FROM 
	[stage].[WID_FI_PurchaseLedger]
GO
PRINT N'Creating [stage].[CER_DK_Part]'
GO
CREATE TABLE [stage].[CER_DK_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartDescription] [nvarchar] (100) NULL,
[PartDescription2] [nvarchar] (100) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[ProductGroup2] [nvarchar] (50) NULL,
[Brand] [nvarchar] (50) NULL,
[CommodityCode] [nvarchar] (50) NULL,
[CountryOfOrigin] [nvarchar] (50) NULL,
[NetWeight] [decimal] (18, 4) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[ReorderLevel] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vCER_DK_Part]'
GO
CREATE VIEW [stage].[vCER_DK_Part] AS
--COMMENT empty fields / ADD UPPER(TRIM(Company)) into PartID 12-12-2022 VA
SELECT 
 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	,UPPER(CONCAT([Company],'#',TRIM(PartNum))) AS PartCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256',[Company])) AS CompanyID
	,PartitionKey

	,UPPER([Company]) AS Company
	,UPPER(TRIM(PartNum)) AS  PartNum
	--,'' AS [PartName]
	,[PartDescription]
	,[PartDescription2]
	--,'' AS [PartDescription3]
	--,NULL AS MainSupplier
	--,NULL AS AlternativeSupplier
	,[ProductGroup]
	,[ProductGroup2]
	--,'' AS [ProductGroup3]
	--,'' AS [ProductGroup4]
	,[Brand]
	--,'' AS [Barcode]
	,[CommodityCode]
	--,'' AS [PartReplacementNum]
	--,'' AS [PartStatus]
	,[CountryOfOrigin]
	,[NetWeight]
	--,'' AS [UoM]
	--,'' AS [Material]
	--,'' AS ItemStatus
	,[ReorderLevel] AS [ReOrderLevel]
	--,'' AS [PartResponsible]
	--,'' AS [StartDate]
	--,'' AS [EndDate]

FROM [stage].[CER_DK_Part]
GO
PRINT N'Creating [stage].[AXL_IE_Customer]'
GO
CREATE TABLE [stage].[AXL_IE_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[MainCustomerName] [nvarchar] (100) NULL,
[CustomerName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[AddressLine] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (20) NULL,
[TelephoneNumber2] [nvarchar] (20) NULL,
[Email] [nvarchar] (100) NULL,
[City] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[Division] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (50) NULL,
[CustomerIndustry] [nvarchar] (50) NULL,
[CustomerSubIndustry] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNo] [nvarchar] (50) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[CustomerABC] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[SalesPersonResponsible] [nvarchar] (50) NULL,
[CustomerType] [nvarchar] (50) NULL,
[Res1] [nvarchar] (50) NULL,
[Res2] [nvarchar] (50) NULL,
[Res3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXL_IE_Customer]'
GO


CREATE VIEW [stage].[vAXL_IE_Customer] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustomerNum))) )) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,UPPER(CONCAT([Company], '#', TRIM([CustomerNum]))) AS CustomerCode
	,PartitionKey

	,UPPER(Company) AS Company
	,UPPER(TRIM(CustomerNum)) AS [CustomerNum]
	,TRIM(MainCustomerName) AS MainCustomerName
	,TRIM(CustomerName) AS  [CustomerName]
	,TRIM([AddressLine1]) AS [AddressLine1]
	,TRIM([AddressLine2]) AS [AddressLine2]
	,TRIM([AddressLine3]) AS [AddressLine3]
	,TRIM([TelephoneNumber1]) AS [TelephoneNum1]
	,TRIM([TelephoneNumber2]) AS [TelephoneNum2]
	,TRIM([Email]) AS [Email]
	,TRIM([ZipCode]) AS [ZipCode]
	,TRIM([City]) AS [City]
	,TRIM([State]) AS [State]
	,TRIM([District]) AS [SalesDistrict]
	,TRIM(con.CountryName) AS CountryName
	,TRIM([ISOAlpha2Code]) AS [CountryCode]
	,TRIM([Division]) AS [Division]
	,TRIM([CustomerIndustry]) AS [CustomerIndustry]
	,TRIM([CustomerSubIndustry]) AS [CustomerSubIndustry]
	,TRIM([AddressLine3]) AS [AddressLine]
	,CONCAT(TRIM(con.CountryName), + ',  ' + TRIM([City]), + ',  ' + TRIM([ZipCode]), + ',  ' + TRIM(addressline3)) AS [FullAddressLine]
	,TRIM(CustomerGroup) AS [CustomerGroup]
	,TRIM(CustomerGroup) AS [CustomerSubGroup]
	,TRIM([SalesRepCode]) AS [SalesPersonCode]
	,TRIM(SalesPersonName) AS [SalesPersonName]
	,TRIM([SalesPersonResponsible]) AS [SalesPersonResponsible]
	,TRIM([VATRegNo]) AS [VATNum]
	,TRIM([AccountString]) AS [AccountNum]
	,TRIM([InternalExternal]) AS [InternalExternal]
	,TRIM([CustomerABC]) AS [CustomerScore]
	,TRIM([CustomerType]) AS [CustomerType]
FROM [stage].[AXL_IE_Customer] com
	LEFT JOIN dbo.Country con ON com.CountryName = con.[ISOAlpha2Code]

--GROUP BY
--	PartitionKey, Company, CustomerNum, CustomerName, MainCustomerName, [AddressLine1], [AddressLine2], [AddressLine3], [TelephoneNumber1], [TelephoneNumber2], [Email], [ZipCode], [City], [State], [District], [CountryName], [Division], [CustomerIndustry], [CustomerSubIndustry], CustomerGroup, [SalesRepCode], SalesPersonName, [SalesPersonResponsible], [VATRegNo], [AccountString], [InternalExternal], [CustomerABC], [CustomerType]

--	Stagetablename in ('AXL_AU_Customer', 'AXL_DC_Customer', 'AXL_HU_Customer', 'AXL_IE_Customer', 'AXL_PL_Customer', 'AXL_PT_Customer', 'AXL_UK_Customer')
GO
PRINT N'Creating [stage].[ACO_UK_OLine]'
GO
CREATE TABLE [stage].[ACO_UK_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[NeedByDate] [date] NULL,
[Delivdate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (10) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[Site] [nvarchar] (50) NULL,
[SalesPerson] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[BusinessChain] [nvarchar] (50) NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vACO_UK_OLine]'
GO


CREATE VIEW [stage].[vACO_UK_OLine] AS
--COMMENT empty fields / ADD UPPER() TRIM() INTO CustomerID/WarehouseID/PartID VA 13-12-2022
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine)))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID 
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', PartNum))) AS PartID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM([WarehouseCode])))) ) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#',OrderNum) ))	AS SalesOrderNumID
	,CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine)) AS SalesOrderCode
	,CONVERT(int, replace(convert(date, OrderDate), '-', '')) AS SalesOrderDateID   --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey 

	,Company 
	,TRIM(CustNum) AS CustomerNum 
	,TRIM(OrderNum)	AS SalesOrderNum
	,CONVERT(nvarchar(50), TRIM(OrderLine)) AS SalesOrderLine
	,TRIM(OrderSubLine)	AS SalesOrderSubLine
	,CONVERT(nvarchar(50), OrderType) AS SalesOrderType
	--,'' AS SalesOrderCategory
	,OrderDate AS SalesOrderDate
	,[NeedByDate] AS NeedbyDate
	,[Delivdate] AS ExpDelivDate
	,CAST('1900-01-01' AS date) AS ActualDelivDate
	,CAST('1900-01-01' AS date) AS ConfirmedDelivDate
	,TRIM(InvoiceNum) AS SalesInvoiceNum
	,OrderQty AS SalesOrderQty
	,DelivQty
	,RemainingQty
	--,NULL AS SalesInvoiceQty
	,[Unit] AS UoM
	,UnitPrice
	,UnitCost
	,LEFT(Currency, 3) AS Currency
	,IIF(LEFT(Currency, 3) = 'GBP', 1, ExchangeRate) AS ExchangeRate
	,LEFT(CONVERT(char(1), MAX(OpenRelease)), 1) AS OpenRelease
	,DiscountAmount
	,DiscountPercent
	,TRIM(PartNum) AS PartNum
	,'' AS PartType
	,CONVERT(nvarchar(50), PartStatus) AS PartStatus
	,dbo.ProperCase(SalesPerson) AS SalesPersonName
	,TRIM(WarehouseCode) AS WarehouseCode
	,CASE	WHEN LEN(SalesChannel) = 8 THEN 'EXPRESS'	
			WHEN LEN(SalesChannel) = 12 THEN 'ADVANCE'
			WHEN CustNum LIKE 'RSCOMP%' THEN 'EDI'
			WHEN SalesPerson = '' THEN 'IMPORTED'
			ELSE SalesChannel END AS SalesChannel
	,CASE WHEN CustNum LIKE 'RSCOMP%' THEN 'EDI'
		WHEN LEN(SalesChannel) = 12 THEN 'Webshop'
		WHEN LEN(SalesChannel) = 8 THEN 'Webshop'
		ELSE 'Normal Order Handling' END AS AxInterSalesChannel
	,BusinessChain AS Department
	,null AS ProjectNum
	,'' AS IndexKey
	,'0' AS Cancellation
	--,Res1 AS SORes1
	--,Res2 AS SORes2
	--,Res3 AS SORes3
	--,NULL AS [TotalMiscChrg]
FROM stage.ACO_UK_OLine
GROUP BY PartitionKey, Company, OrderNum, OrderLine, OrderSubLine, CustNum, PartNum, OrderDate, OrderType, [NeedByDate], [Delivdate], InvoiceNum, OrderQty, DelivQty, RemainingQty, [Unit],
	UnitPrice, UnitCost, Currency, ExchangeRate, DiscountAmount, DiscountPercent, PartNum, PartStatus, SalesPerson, WarehouseCode, SalesChannel, BusinessChain--, Res1, Res2, Res3

UNION 

select 
SalesOrderID
,CompanyID
,CustomerID
,PartID
,WarehouseID
,SalesOrderNumID
,SalesOrderCode
,SalesOrderDateID
,ProjectID
,PartitionKey
,Company
,CustomerNum
,SalesOrderNum
,SalesOrderLine
,null as SalesOrderSubLine
,SalesOrderType
,SalesOrderDate
,NeedbyDate
,ExpDelivDate
,ActualDelivDate
,ConfirmedDelivDate
,SalesInvoiceNum
,SalesOrderQty
,DelivQty
,RemainingQty
,null as UoM
,UnitPrice
,UnitCost
,Currency
,ExchangeRate
,OpenRelease
,DiscountAmount
,DiscountPercent
,PartNum
,null as PartType
,null as PartStatus
,null as SalesPersonName
,null as WarehouseCode
,SalesChannel
,AxInterSalesChannel
,null as Department
,IndexKey
,Cancellation
,ProjectNum
from stage.vACO_UK_OLine_Manual_Adjustment
GO
PRINT N'Creating [stage].[ARK_CZ_PurchaseInvoice]'
GO
CREATE TABLE [stage].[ARK_CZ_PurchaseInvoice]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaseOrderType] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[PurchaseInvoiceLine] [nvarchar] (50) NULL,
[PurchaseInvoiceType] [nvarchar] (50) NULL,
[PurchaseInvoiceDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PurchaseInvoiceQty] [decimal] (18, 4) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[VATAmount] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PurchaserName] [nvarchar] (100) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[PurchaseChannel] [nvarchar] (50) NULL,
[Comment] [nvarchar] (max) NULL,
[PIRes1] [nvarchar] (50) NULL,
[PIRes2] [nvarchar] (50) NULL,
[PIRes3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vARK_CZ_PurchaseInvoice]'
GO

CREATE VIEW [stage].[vARK_CZ_PurchaseInvoice] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(PurchaseOrderSubLine), '#', TRIM(PurchaseInvoiceNum), '#', TRIM(PurchaseInvoiceLine), '#', TRIM(PartNum), '#', TRIM(WarehouseCode))))) AS PurchaseInvoiceID
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseInvoiceNum), '#', TRIM(PurchaseInvoiceLine), '#', PartNum)) AS PurchaseInvoiceCode
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum))) AS PurchaseOrderNumCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum),'#',TRIM(PurchaseOrderLine),'#',TRIM(PurchaseInvoiceNum))))) AS PurchaseOrderID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum))))) AS SupplierID
    ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT(int, replace(PurchaseInvoiceDate,'-','')) AS PurchaseInvoiceDateID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#', TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum),'#',TRIM(PurchaseOrderNum))))) AS PurchaseLedgerID --match PurchaseLedgerID in [vSCM_FI_PurchaseLedger]
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum),'#',TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine))) AS PurchaseOrderCode
	,PartitionKey

	,UPPER(TRIM(Company)) AS Company
	,CASE WHEN UPPER(TRIM(PurchaseOrderNum)) IS NULL AND UPPER(TRIM(PartNum)) = '-NULL-' THEN 'ServiceOrder' ELSE UPPER(TRIM(PurchaseOrderNum)) END AS PurchaseOrderNum --UPPER(TRIM(PurchaseOrderNum))
	,UPPER(TRIM(PurchaseOrderLine)) AS PurchaseOrderLine
	,UPPER(TRIM(PurchaseOrderSubLine)) AS PurchaseOrderSubLine
	,CASE WHEN UPPER(TRIM(PurchaseOrderType)) IS NULL AND UPPER(TRIM(PartNum)) = '-NULL-' THEN 'Service' ELSE UPPER(TRIM(PurchaseOrderType)) END AS PurchaseOrderType
	,UPPER(TRIM(PurchaseInvoiceNum)) AS PurchaseInvoiceNum
	,UPPER(TRIM(PurchaseInvoiceLine)) AS PurchaseInvoiceLine
	,PurchaseInvoiceType
	,PurchaseInvoiceDate
	,ActualDelivDate
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
--	,UPPER(TRIM(PartNum)) AS PartNum
	,CASE WHEN UPPER(TRIM(PartNum)) = '-NULL-' AND UPPER(TRIM(PurchaseOrderNum)) IS NULL THEN 'ServicePurchase' ELSE UPPER(TRIM(PartNum)) END AS PartNum
	,PurchaseInvoiceQty
	,CASE WHEN UPPER(TRIM(UoM)) = '-NULL-' AND UPPER(TRIM(PurchaseOrderNum)) IS NULL THEN 'Unit' ELSE UPPER(TRIM(UoM)) END AS UoM
	,UnitPrice
	,DiscountPercent
	,DiscountAmount
	,TotalMiscChrg
	,VATAmount
	,ExchangeRate
	,Currency
	,CreditMemo
	,PurchaserName
	,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
	,PurchaseChannel
	,PIRes1
	,PIRes2
	,PIRes3
	,'' AS LineType
	,'' AS OrderDelivLineNum
	,Comment
FROM stage.ARK_CZ_PurchaseInvoice
--WHERE PurchaseInvoiceDate >= DATEADD(year, -1, GETDATE()) --Added this where clause as semi-incremental load functinoality since it doesn't work easily on meta-param table. /SM 2021-10-01
--GROUP BY
--	PartitionKey, Company, PurchaseOrderNum, PurchaseInvoiceNum, SupplierNum, PartNum, PurchaseOrderLine, PurchaseOrderSubLine, PurchaseInvoiceQty, UnitPrice, WarehouseCode,PurchaserName, PurchaseInvoiceLine, PurchaseInvoiceType, PurchaseInvoiceDate, ActualDelivDate, TotalMiscChrg, CreditMemo, PurchaseOrderType, DiscountPercent, DiscountAmount,Currency, ExchangeRate, UoM, VATAmount, PurchaseChannel, PIRes1, PIRes2, PIRes3, Comment --, OrderType, [Site], OrderDelivLineNum, , DiscountPercent, PurchaserName, InvoiceLine, InvoiceType, InvoiceDate, ActualDeliveryDate, TotalMiscChrg, CreditMemo
GO
PRINT N'Creating [stage].[AXL_HU_Customer]'
GO
CREATE TABLE [stage].[AXL_HU_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[MainCustomerName] [nvarchar] (100) NULL,
[CustomerName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[AddressLine] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (20) NULL,
[TelephoneNumber2] [nvarchar] (20) NULL,
[Email] [nvarchar] (100) NULL,
[City] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[Division] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (50) NULL,
[CustomerIndustry] [nvarchar] (50) NULL,
[CustomerSubIndustry] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNo] [nvarchar] (50) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[CustomerABC] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[SalesPersonResponsible] [nvarchar] (50) NULL,
[CustomerType] [nvarchar] (50) NULL,
[Res1] [nvarchar] (50) NULL,
[Res2] [nvarchar] (50) NULL,
[Res3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXL_HU_Customer]'
GO


CREATE VIEW [stage].[vAXL_HU_Customer] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustomerNum))) )) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,UPPER(CONCAT([Company], '#', TRIM([CustomerNum]))) AS CustomerCode
	,PartitionKey

	,UPPER(Company) AS Company
	,UPPER(TRIM(CustomerNum)) AS [CustomerNum]
	,TRIM(MainCustomerName) AS MainCustomerName
	,TRIM(CustomerName) AS  [CustomerName]
	,TRIM([AddressLine1]) AS [AddressLine1]
	,TRIM([AddressLine2]) AS [AddressLine2]
	,TRIM([AddressLine3]) AS [AddressLine3]
	,TRIM([TelephoneNumber1]) AS [TelephoneNum1]
	,TRIM([TelephoneNumber2]) AS [TelephoneNum2]
	,TRIM([Email]) AS [Email]
	,TRIM([ZipCode]) AS [ZipCode]
	,TRIM([City]) AS [City]
	,TRIM([State]) AS [State]
	,TRIM([District]) AS [SalesDistrict]
	,TRIM(con.CountryName) AS CountryName
	,TRIM([ISOAlpha2Code]) AS [CountryCode]
	,TRIM([Division]) AS [Division]
	,TRIM([CustomerIndustry]) AS [CustomerIndustry]
	,TRIM([CustomerSubIndustry]) AS [CustomerSubIndustry]
	,TRIM([AddressLine3]) AS [AddressLine]
	,CONCAT(TRIM(con.CountryName), + ',  ' + TRIM([City]), + ',  ' + TRIM([ZipCode]), + ',  ' + TRIM(addressline3)) AS [FullAddressLine]
	,TRIM(CustomerGroup) AS [CustomerGroup]
	,TRIM(CustomerGroup) AS [CustomerSubGroup]
	,TRIM([SalesRepCode]) AS [SalesPersonCode]
	,TRIM(SalesPersonName) AS [SalesPersonName]
	,TRIM([SalesPersonResponsible]) AS [SalesPersonResponsible]
	,TRIM([VATRegNo]) AS [VATNum]
	,TRIM([AccountString]) AS [AccountNum]
	,TRIM([InternalExternal]) AS [InternalExternal]
	,TRIM([CustomerABC]) AS [CustomerScore]
	,TRIM([CustomerType]) AS [CustomerType]
FROM [stage].[AXL_HU_Customer] com
	LEFT JOIN dbo.Country con ON com.CountryName = con.[ISOAlpha2Code]

--GROUP BY
--	PartitionKey, Company, CustomerNum, CustomerName, MainCustomerName, [AddressLine1], [AddressLine2], [AddressLine3], [TelephoneNumber1], [TelephoneNumber2], [Email], [ZipCode], [City], [State], [District], [CountryName], [Division], [CustomerIndustry], [CustomerSubIndustry], CustomerGroup, [SalesRepCode], SalesPersonName, [SalesPersonResponsible], [VATRegNo], [AccountString], [InternalExternal], [CustomerABC], [CustomerType]

--	Stagetablename in ('AXL_AU_Customer', 'AXL_DC_Customer', 'AXL_HU_Customer', 'AXL_IE_Customer', 'AXL_PL_Customer', 'AXL_PT_Customer', 'AXL_UK_Customer')
GO
PRINT N'Creating [dm_LS].[fctPurchaseLedger]'
GO
CREATE VIEW [dm_LS].[fctPurchaseLedger] AS
SELECT 
 pl.[PurchaseLedgerID]
,pl.[Company]
,pl.[SupplierNum]
,pl.[PurchaseOrderNum]
,pl.[PurchaseInvoiceNum]
,pl.[PurchaseInvoiceDate]
,pl.[PurchaseDueDate]
,pl.[PurchaseLastPaymentDate]
,pl.[InvoiceAmount]
,pl.[ExchangeRate]
,pl.[Currency]
,pl.[VATAmount]
,pl.[VATCode]
,pl.[PayToName]
,pl.[PayToCity]
,pl.[PayToContact]
,pl.[PaymentTerms]
,pl.[PrePaymentNum]
,pl.[LastPaymentNum]
,pl.[PLRes1]
,pl.[PLRes2]
,pl.[PLRes3]
,pl.[PurchaseLedgerCode]
,pl.[CompanyID]
,pl.[SupplierID]
,pl.[PurchaseInvoiceID]
,pl.[PurchaseOrderNumID]
,pl.[CurrencyID]
,pl.[PurchaseInvoiceDateID]
,pl.[PartitionKey]
,pl.[PaidInvoiceAmount]
,pl.[RemainingInvoiceAmount]
,pl.[AccountingDate]
,pl.[AgingPeriod]
,pl.[AgingSort]
,pl.[VATCodeDesc]
,pl.[LinkToOriginalInvoice]
FROM [dm].[FactPurchaseLedger] pl
LEFT JOIN dbo.Company com ON pl.Company = com.Company
WHERE com.BusinessArea = 'Lifting Solutions' AND com.[Status] = 'Active'

  --WHERE Company IN ('CNOCERT', 'TRACLEV', 'CSECERT', 'CLVCERT', 'CLTCERT')
GO
PRINT N'Creating [stage].[ARK_PI_PurchaseOrder]'
GO
CREATE TABLE [stage].[ARK_PI_PurchaseOrder]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [varchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaseOrderType] [nvarchar] (50) NULL,
[PurchaseOrderDate] [date] NULL,
[OrgReqDelivDate] [date] NULL,
[CommittedDelivDate] [date] NULL,
[ExpDelivDate] [date] NULL,
[ReqDelivDate] [date] NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[SupplierInvoiceNum] [nvarchar] (50) NULL,
[DelivCustomerNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[ReceiveQty] [decimal] (18, 4) NULL,
[InvoiceQty] [decimal] (18, 4) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[PurchaserName] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[ReceivingNum] [nvarchar] (50) NULL,
[DelivTime] [nvarchar] (50) NULL,
[PurchaseChannel] [nvarchar] (50) NULL,
[PORes1] [nvarchar] (50) NULL,
[Res2] [nvarchar] (50) NULL,
[Res3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vARK_PI_PurchaseOrder]'
GO


CREATE VIEW [stage].[vARK_PI_PurchaseOrder] AS
--COMMENT EMPTY FIELDS // ADD TRIM() INTO CustomerID,PartID,WarehouseID 2022-12-16 VA
--ADD TRIM() INTO SupplierID 23-01-23
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine))))) AS PurchaseOrderID 
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(PurchaseInvoiceNum))))) AS PurchaseInvoiceID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(DelivCustomerNum))))) AS CustomerID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(DelivCustomerNum))))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum))))) AS SupplierID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(UPPER(SupplierNum)))))) AS SupplierID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM([PartNum]))))) AS PartID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(UPPER([PartNum])))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(WarehouseCode))))) AS WarehouseID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',TRIM([Company]))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Currency])))) AS CurrencyID
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum),'#',TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine))) AS PurchaseOrderCode
	,PartitionKey AS PartitionKey

	,Company AS Company
	,TRIM(PurchaseOrderNum) AS PurchaseOrderNum
	,TRIM(PurchaseOrderLine) AS PurchaseOrderLine
	,TRIM(PurchaseOrderSubLine) AS PurchaseOrderSubLine
	,TRIM(PurchaseOrderType) AS PurchaseOrderType
	--,'' AS PurchaseOrderStatus
	,PurchaseOrderDate
	,OrgReqDelivDate
	,CommittedDelivDate
	--, '' AS ActualDelivDate
	,ExpDelivDate --
	,ReqDelivDate AS ReqDelivDate
	,TRIM(PurchaseInvoiceNum) AS PurchaseInvoiceNum
	,TRIM(UPPER([PartNum])) AS PartNum
	,TRIM(UPPER(SupplierNum)) AS SupplierNum
	--,'' AS SupplierPartNum
	--,'' AS [SupplierInvoiceNum] 
	,TRIM(DelivCustomerNum) AS DelivCustomerNum
	,PartStatus
	,OrderQty		AS PurchaseOrderQty
	,ReceiveQty
	,InvoiceQty
	--,NULL AS MinOrderQty
	,UoM
	,UnitPrice
	,DiscountPercent
	,DiscountAmount
	,0 AS LandedCost
	,ExchangeRate
	,CASE WHEN Currency = '15' THEN 'EUR' WHEN Currency = '2' THEN 'USD' ELSE Currency END AS Currency
	,TRIM(PurchaserName) AS PurchaserName
	,TRIM(WarehouseCode) AS WarehouseCode
	,ReceivingNum
	,DelivTime
	,PurchaseChannel
	--,'' AS Documents
	--,'' AS Comments
	,PORes1
	,Res2 AS PORes2
	,Res3 AS PORes3

	--,CASE WHEN CONVERT(NVARCHAR(50), TRIM([LineType])) like '0' THEN 'Stock Item Line' WHEN CONVERT(NVARCHAR(50), TRIM([LineType])) like '1' THEN 'Non Stock Item Line' ELSE NULL END AS [LineType]
	--,NULL AS TotalMiscChrg
--	--,CONVERT(NVARCHAR(50), ItemType) AS ItemType
--	,'' AS DaysSincePOrder
FROM 
	[stage].[ARK_PI_PurchaseOrder]
--WHERE PurchaseOrderDate >= DATEADD(year, -1, GETDATE()) --Added this where clause as semi-incremental load functinoality since it doesn't work easily on meta-param table. /SM 2021-10-01	
--GROUP BY
--	PartitionKey, Company, PurchaseOrderNum, PurchaseOrderLine, PurchaseOrderSubLine, SupplierNum, DelivCustomerNum, PurchaseInvoiceNum, PartNum, PurchaseOrderType, DiscountPercent, OrderQty, ReceiveQty, InvoiceQty, ExchangeRate, Currency, PurchaseOrderDate, OrgReqDelivDate, CommittedDelivDate, ExpDelivDate, ReqDelivDate, PurchaserName, ReceivingNum, DelivTime, WarehouseCode, DiscountPercent, DiscountAmount, PurchaseChannel, PORes1, Res2, Res3, PartStatus,  UnitPrice, UoM
GO
PRINT N'Creating [dm].[DimCountry]'
GO
CREATE VIEW [dm].[DimCountry] AS

select 
b.CountryName
,b.[Alpha-2 code] as Alpha_2_Code
,b.[Alpha-3 code] as Alpha_3_Code
,a.Continent
,a.Region 
,a.Region2 AS RegionSubLevel
,a.RiskLevel as AxInterRiskLevel
,a.EUMember as is_EUMember
,a.CurrencyDescription
 
,a.CurencyCode as [CurrencyCode]
,a.CurrencyDescription2
,a.CurrencyCode2
from dbo.Country as a
left join dbo.CountryCodes as b
	on a.ISOAlpha2Code = b.[Alpha-2 code]
where b.[Alpha-2 code] is not null

union

select 
COALESCE(b.CountryName,a.CountryName) as CountryName
,COALESCE(b.[Alpha-2 code],a.ISOalpha2code) as Alpha_2_Code
,COALESCE(b.[Alpha-3 code],a.ISOalpha3code) as Alpha_3_Code
,a.Continent
,a.Region
,a.Region2 AS RegionSubLevel
,a.RiskLevel as AxInterRiskLevel
,a.EUMember as is_EUMember
,a.CurrencyDescription
,a.CurencyCode as [CurrencyCode]
,a.CurrencyDescription2
,a.CurrencyCode2
from dbo.Country as a
left join dbo.CountryCodes as b
	on a.ISOAlpha2Code = b.[Alpha-2 code]
where b.[Alpha-2 code] is null

;
GO
PRINT N'Creating [stage].[STE_SE_Warehouse]'
GO
CREATE TABLE [stage].[STE_SE_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (12) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL,
[WarehouseDistrict] [nvarchar] (50) NULL,
[WarehouseAddress] [nvarchar] (100) NULL,
[WarehouseDescription] [nvarchar] (100) NULL,
[WarehouseType] [nvarchar] (50) NULL,
[WarehouseCountry] [nvarchar] (50) NULL,
[Site] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[City] [nvarchar] (50) NULL,
[CountryOfOriginname] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vSTE_SE_Warehouse]'
GO

CREATE view [stage].[vSTE_SE_Warehouse] AS
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID
	,[PartitionKey] 
	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([WarehouseCode])) AS WarehouseCode
	,[WarehouseName] 
	,[WarehouseDistrict] 
	,[WarehouseAddress] 
	,[WarehouseDescription] 
	,[WarehouseType] 
	,[WarehouseCountry]
	,[Site] 
from  stage.STE_SE_Warehouse
GO
PRINT N'Creating [stage].[NOM_SE_CustomerAgreement]'
GO
CREATE TABLE [stage].[NOM_SE_CustomerAgreement]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[AgreementCode] [nvarchar] (50) NULL,
[AgreementDescription] [nvarchar] (50) NULL,
[DiscountPercent] [nvarchar] (50) NULL,
[UnitPrice] [nvarchar] (50) NULL,
[UoM] [nvarchar] (50) NULL,
[AgreementQty] [nvarchar] (50) NULL,
[DelivTime] [nvarchar] (50) NULL,
[Currency] [nvarchar] (10) NULL,
[CustomerTerms] [nvarchar] (100) NULL,
[AgreementStart] [date] NULL,
[AgreementEnd] [date] NULL,
[CARes1] [nvarchar] (100) NULL,
[CARes2] [nvarchar] (100) NULL,
[CARes3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vNOM_SE_CustomerAgreement]'
GO
CREATE VIEW [stage].[vNOM_SE_CustomerAgreement] AS 
--COMMENT EMPTY FIELDS 2022-12-20 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM(AgreementCode),'#',TRIM([PartNum]),'#',TRIM(CustomerNum),'#',AgreementStart)))) AS CustomerAgreementID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID  
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM([Currency])))) AS CurrencyID
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM(CustomerNum)) AS CustomerNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,AgreementCode
	,AgreementDescription
	--,NULL AS DiscountPercent
	,CONVERT(decimal(18,4), [UnitPrice]) AS [UnitPrice]
	,AgreementQty
	,UPPER(TRIM([Currency])) AS Currency
	,[DelivTime]
	,AgreementStart
	,AgreementEnd
	,CustomerTerms
	--,0	AS FulfilledQty
	--,0  AS RemainingQty
	--,''	AS UoM
	--,'' AS CARes1
	--,'' AS CARes2
	--,'' AS CARes3
FROM 
	[stage].[NOM_SE_CustomerAgreement]
GROUP BY [PartitionKey], [Company], AgreementCode, AgreementDescription, [Currency], [PartNum], [DelivTime], AgreementStart, AgreementEnd, CustomerTerms, [UnitPrice], CustomerNum, AgreementQty
GO
PRINT N'Creating [stage].[MAK_NL_Customer]'
GO
CREATE TABLE [stage].[MAK_NL_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[MainCustomerName] [nvarchar] (100) NULL,
[CustomerName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[AddressLine3] [nvarchar] (100) NULL,
[TelephoneNum1] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[City] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[Email] [nvarchar] (500) NULL,
[CountryName] [nvarchar] (50) NULL,
[Division] [nvarchar] (50) NULL,
[CustomerIndustry] [nvarchar] (50) NULL,
[CustomerSubIndustry] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (50) NULL,
[SalesPersonCode] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[SalesPersonResponsible] [nvarchar] (100) NULL,
[VATNum] [nvarchar] (50) NULL,
[AccountNum] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[CustomerType] [nvarchar] (50) NULL,
[CustomerScore] [nvarchar] (50) NULL,
[MethodOfShipment] [nvarchar] (50) NULL,
[SalesCondition] [nvarchar] (50) NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vMAK_NL_Customer]'
GO
CREATE VIEW [stage].[vMAK_NL_Customer] AS
--COMMENT empty fields / ADD UPPER()TRIM() INTO CustomerID 13-12-2022 VA 
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID
	--CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(CustomerNum)))) AS CustomerID
	,CONCAT(Company,'#',TRIM([CustomerNum])) AS CustomerCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',Company)) AS CompanyID
	,PartitionKey
	,Company
	,TRIM(CustomerNum) AS [CustomerNum]
	,MainCustomerName
    ,[dbo].[ProperCase](CustomerName) AS CustomerName
	,LEFT([AddressLine1], 100) AS [AddressLine1]
	,LEFT([AddressLine2], 100) AS [AddressLine2]
	,LEFT([AddressLine3], 100) AS [AddressLine3]
	,[TelephoneNum1]			AS TelephoneNum1
	--,''		AS TelephoneNum2
	,[Email]
	,[ZipCode]
	,[dbo].[ProperCase]([City]) AS	City
	,IIF([State]= ' ',null,[State]) AS [State]
	,[District]		AS SalesDistrict
	,[dbo].[ProperCase](CountryName) AS [CountryName]
	,Division
	,CustomerIndustry
	,CustomerSubIndustry
	,[AddressLine1] AS [AddressLine]
	,CONCAT(Countryname, + ', '+ trim([City]),  ', ' + TRIM([ZipCode]), ', ' + trim(addressline1)) AS [FullAddressLine]
	,[dbo].[ProperCase](CustomerGroup) AS [CustomerGroup]
	,[dbo].[ProperCase](CustomerGroup) AS [CustomerSubGroup]
	,[SalesPersonCode]
	,[dbo].[ProperCase](SalesPersonName) AS [SalesPersonName]
	,[SalesPersonResponsible]
	,[VATNum]
	--,'' AS OrganizationNum
	,[AccountNum]
	,[InternalExternal]
	,[CustomerScore]
	,[CustomerType]

	--,NULL AS [ValidFrom]
	--,NULL AS [ValidTo]
	,UPPER([dbo].[ProperCase](CountryName)) as CountryCode
FROM [stage].[MAK_NL_Customer]
GO
PRINT N'Creating [stage].[NOM_FI_PurchaseOrder]'
GO
CREATE TABLE [stage].[NOM_FI_PurchaseOrder]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [varchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaseOrderType] [nvarchar] (50) NULL,
[PurchaseOrderDate] [date] NULL,
[PurchaseOrderStatus] [nvarchar] (50) NULL,
[OpenRelease] [nvarchar] (50) NULL,
[OrgReqDelivDate] [date] NULL,
[CommittedDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[ReqDelivDate] [date] NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[SupplierPartNum] [nvarchar] (50) NULL,
[SupplierInvoiceNum] [nvarchar] (50) NULL,
[DelivCustomerNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[PurchaseOrderQty] [decimal] (18, 4) NULL,
[ReceiveQty] [decimal] (18, 4) NULL,
[PurchaseInvoiceQty] [decimal] (18, 4) NULL,
[MinOrderQty] [decimal] (18, 4) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[LandedCost] [decimal] (18, 4) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[PurchaserName] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[RecievingNum] [nvarchar] (50) NULL,
[DelivTimeWorkDays] [nvarchar] (50) NULL,
[DelivTime] [nvarchar] (50) NULL,
[PurchaseChannel] [nvarchar] (50) NULL,
[Documents] [nvarchar] (50) NULL,
[Comments] [nvarchar] (max) NULL,
[PORes1] [nvarchar] (50) NULL,
[PORes2] [nvarchar] (50) NULL,
[PORes3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vNOM_FI_PurchaseOrder]'
GO
CREATE VIEW [stage].[vNOM_FI_PurchaseOrder] AS
--ADD TRIM() INTO PartID,CustomerID 2022-12-15 VA
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(PurchaseInvoiceNum))))) AS PurchaseOrderID
	,UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine))) AS PurchaseOrderCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseInvoiceNum))))) AS PurchaseInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(Currency)))) AS CurrencyID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(DelivCustomerNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(DelivCustomerNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum))))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierNum))))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,PartitionKey AS PartitionKey

	,UPPER(TRIM(Company)) AS Company
	,UPPER(TRIM(PurchaseOrderNum)) AS PurchaseOrderNum
	,UPPER(TRIM(PurchaseOrderLine)) AS PurchaseOrderLine
	,UPPER(TRIM(PurchaseOrderSubLine)) AS PurchaseOrderSubLine
	,TRIM(PurchaseOrderType) AS PurchaseOrderType
	,PurchaseOrderDate
	,PurchaseOrderStatus
	,OpenRelease
	,OrgReqDelivDate
	,CommittedDelivDate
	,ActualDelivDate
	,ReqDelivDate
	,UPPER(TRIM(PurchaseInvoiceNum)) AS [PurchaseInvoiceNum]
	,UPPER(TRIM(PartNum)) AS PartNum
	,UPPER(TRIM(SupplierNum)) AS [SupplierNum]
	,TRIM(SupplierPartNum) AS SupplierPartNum
	,TRIM(SupplierInvoiceNum) AS SupplierInvoiceNum
	,TRIM(DelivCustomerNum) AS [DelivCustomerNum]
	,PartStatus
	,PurchaseOrderQty
	,ReceiveQty
	,PurchaseInvoiceQty AS InvoiceQty
	,MinOrderQty
	,[UoM]
	,UnitPrice
	,DiscountPercent
	,DiscountAmount
	,LandedCost
	,ExchangeRate
	,Currency
	,TRIM(PurchaserName) AS PurchaserName
	,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
	,TRIM(RecievingNum) AS ReceivingNum
	,DelivTime
	,PurchaseChannel
	,Documents
	,TRIM(Comments) AS Comments
	,DelivTimeWorkDays AS PORes1 
	,PORes2 
	,PORes3
FROM 
	[stage].[NOM_FI_PurchaseOrder]
	
GROUP BY
	PartitionKey, Company, PurchaseOrderNum, PurchaseOrderLine, SupplierNum, DelivCustomerNum, PurchaseOrderStatus, PurchaseInvoiceNum, PartNum, OpenRelease, PurchaseOrderType, UnitPrice, PurchaseOrderQty, ReceiveQty, PurchaseInvoiceQty, MinOrderQty, UoM,  ExchangeRate, Currency, PurchaseOrderDate, ActualDelivDate, OrgReqDelivDate, CommittedDelivDate, ReqDelivDate, PurchaserName, WarehouseCode, DiscountPercent, DiscountAmount, RecievingNum, DelivTime, DelivTimeWorkDays, PurchaseChannel, SupplierPartNum, SupplierInvoiceNum,PartStatus,Documents, Comments, PORes2, PORes3, PurchaseOrderSubLine, LandedCost--, SysRowID, LeadTime
GO
PRINT N'Creating [stage].[vAXL_AU_SalesLedger]'
GO
CREATE VIEW [stage].[vAXL_AU_SalesLedger] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(sl.Company, '#', TRIM(sl.CustNum), '#', TRIM(sl.InvoiceNum))))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(sl.Company))) AS CompanyID
	,UPPER(CONCAT(sl.Company, '#', TRIM(sl.CustNum), '#', TRIM(sl.InvoiceNum))) AS SalesLedgerCode
	,sl.PartitionKey

	,UPPER(sl.Company) AS Company
	,UPPER(TRIM(sl.CustNum)) AS CustomerNum
	,TRIM(sl.InvoiceNum) AS [SalesInvoiceNum]
	,IIF(so.InvoiceDate = '' OR so.InvoiceDate IS NULL, '1900-01-01', so.InvoiceDate) AS [SalesInvoiceDate] --
	,CONVERT(date, DueDate) AS SalesDueDate
	,CONVERT(date, LastPaymentDate) AS LastPaymentDate
	,[InvoiceAmount]
	,[RemainAmount] AS [RemainingInvoiceAmount]
	,NULL AS CashDiscOffered
	,NULL AS CashDiscUsed
	,NULL AS [ExchangeRate]
	,NULL AS [Currency]
	,NULL AS [VATAmount]
	,NULL AS [VATCode]
	,NULL AS [PayToName]
	,NULL AS [PayToCity]
	,NULL AS [PayToContact]
	,NULL AS [PaymentTerms]
	,sl.Res1 AS SLRes1
	,sl.Res2 AS SLRes2
	,sl.Res3 AS SLRes3
FROM stage.AXL_AU_SalesLedger sl
	LEFT JOIN stage.AXL_de_SOLine so ON TRIM(sl.InvoiceNum) = TRIM(so.InvoiceNum)
WHERE DueDate > '2015-01-01'
GROUP BY
	sl.PartitionKey, sl.Company, sl.CustNum, sl.InvoiceNum, sl.Res2, sl.Res1, sl.Res3, sl.[InvoiceAmount], sl.[RemainAmount], so.InvoiceDate, DueDate, LastPaymentDate
GO
PRINT N'Creating [dm_LS].[fctBudget]'
GO
CREATE VIEW [dm_LS].[fctBudget] AS

SELECT bdg.[BudgetID]
,bdg.[CustomerID]
,bdg.[CompanyID]
,bdg.[PartID]
,bdg.[WarehouseID]
,bdg.[ProjectID]
,bdg.[DepartmentID]
,bdg.[BudgetPeriodDateID]
,bdg.[PartitionKey]
,bdg.[BudgetType]
,bdg.[BudgetName]
,bdg.[BudgetDescription]
,bdg.[Company]
,bdg.[BudgetPeriod]
,bdg.[BudgetPeriodDate]
,bdg.[PeriodType]
,bdg.[CustomerNum]
,bdg.[PartNum]
,bdg.[SalesPersonCode]
,bdg.[SalesPersonName]
,bdg.[BudgetSales]
,bdg.[BudgetCost]
,bdg.[GrossProfitInvoiced]
,bdg.[GrossMarginInvoicedPercent]
,bdg.[BudgetFinance]
,bdg.[WarehouseCode]
,bdg.[CostBearerNum]
,bdg.[CostUnitNum]
,bdg.[ProjectNum]
,bdg.[AccountNum]
,bdg.[AccountGroupNum]
FROM dm.FactBudget as bdg
LEFT JOIN dbo.Company com ON bdg.Company = com.Company
WHERE com.BusinessArea = 'Lifting Solutions' AND com.[Status] = 'Active'

--WHERE Company in ('AFISCM', 'CDKCERT', 'CEECERT', 'CFICERT', 'CLTCERT', 'CLVCERT', 'CSECERT', 'CUKCERT', 'CNOEHAU', 'CNOCERT', 'CyESA', 'HFIHAKL', 'TRACLEV')
GO
PRINT N'Creating [stage].[ARK_CZ_ProductionOrder]'
GO
CREATE TABLE [stage].[ARK_CZ_ProductionOrder]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[ProductionOrderNum] [nvarchar] (50) NOT NULL,
[ProductionOrderLineNum] [nvarchar] (50) NULL,
[ProductionOrderSubLineNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[Version] [nvarchar] (50) NULL,
[UoM] [nvarchar] (50) NULL,
[PartType] [nvarchar] (50) NULL,
[OrderQuantity] [nvarchar] (50) NULL,
[ScrappedQty] [nvarchar] (50) NULL,
[CompletedQuantity] [nvarchar] (50) NULL,
[RemainingQty] [nvarchar] (50) NULL,
[Status] [nvarchar] (50) NULL,
[CurrentOperationStage] [nvarchar] (50) NULL,
[CurrentResourceGroup] [nvarchar] (50) NULL,
[OrderCreateDate] [nvarchar] (50) NULL,
[RequestedEndDate] [nvarchar] (50) NULL,
[PlannedStartDate] [nvarchar] (50) NULL,
[PlannedEndDate] [nvarchar] (50) NULL,
[StartDate] [nvarchar] (50) NULL,
[EndDate] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[TotalHoursPlanned] [nvarchar] (50) NULL,
[TotalHoursSpent] [nvarchar] (50) NULL,
[SetupHoursSpent] [nvarchar] (50) NULL,
[MaterialCost] [nvarchar] (50) NULL,
[LabourCost] [nvarchar] (50) NULL,
[OtherCost] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[BinNum] [nvarchar] (50) NULL,
[CostUnit] [nvarchar] (50) NULL,
[SalesOrderNum] [nvarchar] (50) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[ProductionOrderCreaterName] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vARK_CZ_ProductionOrder]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vARK_CZ_ProductionOrder] AS
 SELECT 
 
        CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(ProductionOrderNum), '#', TRIM(ProductionOrderLineNum), '#',TRIM(PartNum)))))  as [ProductionOrderID]
      ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) as CustomerID
	  ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) as CompanyID
	  ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID 
	  ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM(WarehouseCode))))) AS WarehouseID
	  ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SalesOrderNum))))) AS SalesOrderNumID  
	  ,[PartitionKey]                                  
      ,UPPER(TRIM([Company]))  AS     "Company"                                  
      ,UPPER(TRIM([ProductionOrderNum])) AS    "ProductionOrderNum"                    
      ,UPPER(TRIM([ProductionOrderLineNum]))  AS  "ProductionOrderLineNum"                 
      ,UPPER(TRIM([PartNum])) AS   "PartNum"                                 
      ,[Uom]                                        
      ,[PartType]
      ,IIF(PartType = 'Component',-1 * CONVERT(decimal(18,4), Replace(OrderQuantity, ',', '.')), CONVERT(decimal(18,4), Replace(OrderQuantity, ',', '.'))) AS "OrderQuantity"
      ,IIF(PartType = 'Component',-1* CONVERT(decimal(18,4), Replace(ScrappedQty, ',', '.')),CONVERT(decimal(18,4), Replace(ScrappedQty, ',', '.'))) AS "ScrappedQty"
      ,IIF(PartType = 'Component',-1* CONVERT(decimal(18,4), Replace(CompletedQuantity, ',', '.')),CONVERT(decimal(18,4), Replace(CompletedQuantity, ',', '.'))) AS "CompletedQuantity"
      ,IIF(PartType = 'Component',-1* CONVERT(decimal(18,4), Replace([RemainingQty], ',', '.')),CONVERT(decimal(18,4), Replace([RemainingQty], ',', '.'))) AS "RemainingQty"                          
      ,[Status]
      --,CASE 
      --  WHEN [CurrentOperationStage_Preparado]  = '.' AND [CurrentOperationStage_Preparado] = '.' AND [CurrentOpeartionStage_Empaquetado]  = '.'    THEN 'NotStarted'
      --  WHEN [CurrentOperationStage_Preparado]  = 'OK' AND [CurrentOperationStage_Preparado] = '.' AND [CurrentOpeartionStage_Empaquetado]  = '.'   THEN 'Prepared'
      --  WHEN [CurrentOperationStage_Preparado]  = 'OK' AND [CurrentOperationStage_Cosido] = '.' AND [CurrentOpeartionStage_Empaquetado]  = 'OK'     THEN 'Sewing'
      --  WHEN [CurrentOperationStage_Preparado]  = 'OK' AND [CurrentOperationStage_Cosido] = 'OK' AND [CurrentOpeartionStage_Empaquetado]  = '.'     THEN 'Packaging'
      --  WHEN [CurrentOperationStage_Preparado]  = 'OK' AND [CurrentOperationStage_Cosido] = 'OK' AND [CurrentOpeartionStage_Empaquetado]  = 'OK'    THEN 'ReadyToSend'
      --  ELSE NULL END AS "CurrentOperationStage"  
      ,CASE WHEN [OrderCreateDate] = '' OR [OrderCreateDate] is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, [OrderCreateDate]) END AS "OrderCreateDate"
      ,CASE WHEN [PlannedEndDate] = '' OR [PlannedEndDate] is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, [PlannedEndDate]) END AS "PlannedEndDate"
      ,CASE WHEN [StartDate] = '' OR [StartDate] is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, [StartDate]) END AS "StartDate"
      ,CASE WHEN [EndDate] = '' OR [EndDate] is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, [EndDate]) END AS "EndDate"
      ,CASE WHEN [EndDate] = '' OR RequestedEndDate is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, RequestedEndDate) END AS "RequestedEndDate"         
      ,[OrderType]                                  
      ,UPPER(TRIM(WarehouseCode))   AS "WarehouseCode"                               
      ,UPPER(TRIM([SalesOrderNum])) AS "SalesOrderNum"                              
      ,UPPER(TRIM([CustomerNum]))  AS  "CustomerNum"                          
      ,[ProductionOrderCreaterName]  AS   "ProductionOrderCreaterName"
      ,[CurrentResourceGroup]
      ,[Currency]
      ,[ExchangeRate]
      ,CASE WHEN CreatedTimeStamp = '' OR CreatedTimeStamp is NULL THEN CONVERT(datetime,'1900-01-01') ELSE CONVERT(datetime, left(CreatedTimeStamp,19 )) END AS CreatedTimeStamp
      ,CASE WHEN [ModifiedTimeStamp] = '' OR [ModifiedTimeStamp] is NULL THEN CONVERT(datetime,'1900-01-01') ELSE CONVERT(datetime, left(ModifiedTimeStamp,19 )) END AS ModifiedTimeStamp
      ,[TotalHoursPlanned]
      ,[TotalHoursSpent]
      ,[SetupHoursSpent]
      ,[MaterialCost]
      ,[LabourCost]
      ,[OtherCost]

	
	FROM [stage].[ARK_CZ_ProductionOrder]
GO
PRINT N'Creating [stage].[AXL_PT_OLine]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[AXL_PT_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[NeedbyDate] [date] NULL,
[ExpDelivDate] [date] NULL,
[EDCExpDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (10) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[SalesPerson] [nvarchar] (50) NULL,
[WareHouseCode] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[BusinessChain] [nvarchar] (50) NULL,
[SalesOrderCategory] [nvarchar] (100) NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL,
[PartDesc] [nvarchar] (max) NULL,
[APV_Cost_EUR] [nvarchar] (50) NULL,
[APV_Item] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXL_PT_OLine]'
GO

CREATE VIEW [stage].[vAXL_PT_OLine] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(PartDesc))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum), '#', (IIF(TRIM([PartNum]) LIKE 'IACO%' , 'MISC. CHARGES', TRIM(PartDesc) )) )))) AS PartID
	,CONVERT(int, replace(convert(date, OrderDate), '-', '')) AS SalesOrderDateID
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine))) AS SalesOrderCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(CustNum) AS CustomerNum 
	,TRIM(OrderNum) AS [SalesOrderNum]
	,TRIM(OrderLine) AS [SalesOrderLine]
	,TRIM(OrderSubLine) AS [SalesOrderSubLine]
	,CONVERT(nvarchar(50), TRIM(OrderType)) AS [SalesOrderType]
	,TRIM([SalesOrderCategory]) AS [SalesOrderCategory]
	,OrderDate AS [SalesOrderDate]
	,NeedbyDate
	,ExpDelivDate AS [ExpDelivDate]
	,EDCExpDelivDate
	,ActualDelivDate
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,OrderQty AS [SalesOrderQty]
	,DelivQty
	,RemainingQty
	,Unit AS [UoM]
	,UnitPrice
	,UnitCost
	,LEFT(TRIM(Currency), 3) AS Currency
	,ExchangeRate
	,LEFT(TRIM(OpenRelease), 1) AS OpenRelease
	,DiscountAmount
	,DiscountPercent
	,NULL AS CashDiscOffered
	,NULL AS CashDiscUsed
	,TRIM(PartNum) AS PartNum
	,UPPER(PartDesc) AS PartDesc
	,'' AS [PartType]
	,CONVERT(nvarchar(50), PartStatus) AS PartStatus
	,TRIM(SalesPerson) AS [SalesPersonName]
	,TRIM(WareHouseCode) AS WarehouseCode
	,'' AS IndexKey
	,TRIM(SalesChannel) AS SalesChannel
	,TRIM(BusinessChain) AS [Department]
	,Res3 AS [ProjectNum] -- = FreeOfCharge: Y = yes, N = no
	,'' AS Cancellation
	,Res1 AS SORes1
	,Res2 AS SORes2
	,Res3 AS SORes3
FROM stage.AXL_PT_OLine
WHERE OrderDate >= '2015-01-01'
GO
PRINT N'Creating [stage].[CER_SE_SupplierAgreement]'
GO
CREATE TABLE [stage].[CER_SE_SupplierAgreement]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[AgreementCode] [nvarchar] (50) NULL,
[AgreementDescription] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DelivTime] [nvarchar] (10) NULL,
[Currency] [nvarchar] (10) NULL,
[AgreementStart] [date] NULL,
[AgreementEnd] [date] NULL
)
GO
PRINT N'Creating [stage].[vCER_SE_SupplierAgreement]'
GO
CREATE VIEW [stage].[vCER_SE_SupplierAgreement] AS 
--COMMENT EMPTY FIELDS // ADD TRIM() INTO SupplierID 23-01-23 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]), '#', TRIM(AgreementCode), '#', TRIM([PartNum]), '#', TRIM([SupplierNum]), '#', TRIM([Currency]))))) AS SupplierAgreementID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum))))) AS SupplierID  
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(SupplierNum))))) AS SupplierID  
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Currency])))) AS CurrencyID --Redundant?
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,AgreementCode
	,AgreementDescription
	,[DiscountPercent]
	,MAX([UnitPrice]) AS [UnitPrice]
	,0 AS AgreementQty
	,UPPER(TRIM([Currency])) AS Currency
	,MAX([DelivTime]) AS [DelivTime]
	,MAX(AgreementStart) AS AgreementStart
	,AgreementEnd
	--,0	AS FulfilledQty
	--,0  AS RemainingQty
	--,''	AS UoM
	--,'' AS [SupplierTerms]
	--,'' AS  SARes1
	--,'' AS  SARes2
	--,'' AS  SARes3
FROM 
	[stage].[CER_SE_SupplierAgreement]

GROUP BY [PartitionKey], [Company], AgreementCode, AgreementDescription, PartNum, SupplierNum, [DiscountPercent],  [Currency],  AgreementEnd
--WHERE 
--	RecordType = 'D'
GO
PRINT N'Creating [stage].[CER_LT_Customer]'
GO
CREATE TABLE [stage].[CER_LT_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[CustomerName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (20) NULL,
[TelephoneNumber2] [nvarchar] (20) NULL,
[Email] [nvarchar] (100) NULL,
[ABCCode] [nchar] (50) NULL,
[City] [nvarchar] (50) NULL,
[ZIP] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNr] [nvarchar] (20) NULL,
[OrganizationNum] [nvarchar] (100) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[CustomerType] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_LT_Customer]'
GO
CREATE VIEW [stage].[vCER_LT_Customer] AS
--COMMENT EMPTY FIELD / ADD UPPER()TRIM() INTO CustomerID 2022-12-13 VA
SELECT 
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#',TRIM(CustomerNum)))) AS CustomerID
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#',TRIM(CustomerNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONCAT(Company,'#', TRIM([CustomerNum])) AS CustomerCode
	,PartitionKey

	,Company
	,TRIM(CustomerNum) AS [CustomerNum]
	--,'' AS MainCustomerName
	,[dbo].[ProperCase](CustomerName) AS [CustomerName]
	,[AddressLine1]
	,[AddressLine2]
	,[AddressLine3]
	,[TelephoneNumber1] AS [TelephoneNum1]
	,[TelephoneNumber2] AS [TelephoneNum2]
	,[Email]
	,[ZIP] AS [ZipCode]
	,CASE WHEN [City] = ' '	AND LEFT(AddressLine3, 1) IN ('1','2','3','4','5','6','7','8','9') THEN trim(substring(replace([dbo].[ProperCase](AddressLine3),' ',		''), 6, 100)) ELSE [dbo].[ProperCase]([City]) end AS [City]
	,IIF([State]= ' ', null, [State]) AS [State]
	,[District] AS SalesDistrict
	,IIF(CountryName is null, 'LT', CountryCode) AS CountryCode
    ,IIF(CountryName is null, 'Lithuania', CountryName) AS CountryName
	--,'' AS Division
	--,'' AS CustomerIndustry
	--,'' AS CustomerSubIndustry
	,[dbo].[ProperCase](TRIM(concat (addressline1 + ' ' + addressline2, null))) AS [AddressLine]
	,CONCAT(IIF(Countryname IS NULL, 'Lietuva', TRIM(Countryname)), + ', ' + IIF([City] IS NULL, TRIM(AddressLine3), TRIM([City])), + ', ' + IIF([ZIP] IS NULL, TRIM(AddressLine3), TRIM([ZIP])), + ', ' + TRIM(AddressLine2)) AS [FullAddressLine]
	,[dbo].[ProperCase](CustomerGroup) AS [CustomerGroup]
	--,'' AS [CustomerSubGroup]
	,[SalesRepCode] AS SalesPersonCode
	,[dbo].[ProperCase](SalesPersonName) AS [SalesPersonName]
	--,'' AS [SalesPersonResponsible]
	,[VATRegNr] AS VATNum
	,OrganizationNum
	,[AccountString] AS AccountNum
	,[InternalExternal]
	,[ABCCode] AS CustomerScore
	,[CustomerType]
FROM [stage].[CER_LT_Customer]
GO
PRINT N'Creating [stage].[ACO_UK_SOLine_Manual_Adjustment_Remove]'
GO
CREATE TABLE [stage].[ACO_UK_SOLine_Manual_Adjustment_Remove]
(
[SOPNUMBE] [nvarchar] (50) NULL,
[SOPTYPE] [nvarchar] (50) NULL,
[GLPostingdate] [nvarchar] (50) NULL,
[ItemNumber] [nvarchar] (50) NULL,
[ExtendedPrice] [nvarchar] (50) NULL,
[ExtendedCost] [nvarchar] (50) NULL,
[QUANTITY] [nvarchar] (50) NULL,
[CUSTNMBR] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vACO_UK_SOLine_Manual_Adjustment_Remove]'
GO






/****** Script for SelectTopNRows command from SSMS  ******/
CREATE VIEW [stage].[vACO_UK_SOLine_Manual_Adjustment_Remove]	AS

SELECT  DISTINCT 
	  [SOPNUMBE]
	,CAST(N'ACORNUK' AS nvarchar(50)) AS Company
  FROM [stage].[ACO_UK_SOLine_Manual_Adjustment_Remove]
  WHERE [SOPNUMBE] IS NOT NULL
GO
PRINT N'Creating [stage].[JEN_SE_PurchaseInvoice]'
GO
CREATE TABLE [stage].[JEN_SE_PurchaseInvoice]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[LineType] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaserName] [nvarchar] (100) NULL,
[OrderType] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[InvoiceType] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[PurchaseInvoiceQty] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CreditMemo] [nvarchar] (1) NULL,
[WarehouseCode] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vJEN_SE_PurchaseInvoice]'
GO

CREATE VIEW [stage].[vJEN_SE_PurchaseInvoice] AS
--COMMENT EMPTY FIELD / ADD TRIM() INTO PartID,WarehouseID 2022-12-19 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierNum), '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine), '#', TRIM(InvoiceType), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(OrderType), '#', TRIM(PartNum) )))) AS PurchaseInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine))))) AS PurchaseOrderID --, '#', TRIM(PurchaseOrderSubLine)
	,UPPER(CONCAT(Company, '#', TRIM(SupplierNum), '#', TRIM(PurchaseOrderNum))) AS PurchaseOrderCode
	,UPPER(CONCAT(Company, '#', TRIM(SupplierNum), '#', TRIM(InvoiceNum))) AS PurchaseInvoiceCode
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum))))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierCode))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM([PartNum]))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierNum), '#', TRIM(InvoiceNum))))) AS PurchaseLedgerID
	,CONVERT(int, replace(InvoiceDate, '-', '')) AS PurchaseInvoiceDateID 
	,PartitionKey

	,UPPER(Company) AS Company
	,UPPER(TRIM([PartNum])) AS PartNum
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
	,TRIM(PurchaseOrderNum) AS PurchaseOrderNum
	,TRIM(PurchaseOrderLine) AS PurchaseOrderLine
	,'' AS PurchaseOrderSubLine 
	,(TRIM(OrderType)) AS PurchaseOrderType --MIN
	,TRIM(InvoiceNum) AS PurchaseInvoiceNum
	,InvoiceLine AS PurchaseInvoiceLine
	,InvoiceType AS PurchaseInvoiceType
	,InvoiceDate AS PurchaseInvoiceDate
	,MAX(ActualDeliveryDate) AS ActualDelivDate
--	,IIF(TRIM(InvoiceNum) = '9783531' AND TRIM([PartNum]) = 'Q18008MCXPIII50', 0, MAX(PurchaseShipQty)) AS PurchaseInvoiceQty -- accumulated qty therefore max; --exclude outlier after meeting with Christoffer & Sam 20230214, actually the economic report says 12 pcs or 24 642 EUR for this line)
	--,'' AS UoM
	,SUM(PurchaseInvoiceQty) AS PurchaseInvoiceQty -- was deliveredQTY earlier
	,AVG(UnitPrice) AS UnitPrice
	--,0 AS DiscountPercent
	,(IIF(SUM(PurchaseInvoiceQty) < 0, -1*ABS(SUM(DiscountAmount)), ABS(SUM(DiscountAmount)))) AS DiscountAmount
	,(IIF(SUM(PurchaseInvoiceQty) < 0, -1*ABS(SUM(TotalMiscChrg)), ABS(SUM(TotalMiscChrg)))) AS TotalMiscChrg --SUM
	--,0 AS VATAmount
	,AVG(ExchangeRate) AS ExchangeRate
	,CurrencyCode AS Currency
	,IIF(SUM(PurchaseInvoiceQty) < 0, 1, 0) AS CreditMemo -- was 0 berfore 20230214; according Christoffer, not credit tran in JensS SE/DK /DZ
	,TRIM(PurchaserName) AS PurchaserName
	,TRIM(WarehouseCode) AS WarehouseCode
	--,'' AS PurchaseChannel
	--,'' AS Comment
	--,'' AS PIRes1
	--,'' AS PIRes2
	--,'' AS PIRes3
	,LineType
--	,TRIM(OrderDelivLineNum) AS OrderDelivLineNum --
FROM stage.JEN_SE_PurchaseInvoice

GROUP BY
	PartitionKey, Company, PurchaseOrderNum, InvoiceNum, SupplierNum, PartNum, PurchaserName, InvoiceLine, InvoiceType, InvoiceDate, CreditMemo, WarehouseCode, CurrencyCode, LineType, PurchaseOrderLine, OrderType -- , TotalMiscChrg, PurchaseInvoiceQty, ExchangeRateUnitPrice, DiscountAmount, ActualDeliveryDate
GO
PRINT N'Creating [dm_LS].[fctPurchaseInvoice]'
GO

CREATE VIEW [dm_LS].[fctPurchaseInvoice] AS
-- LS basket
SELECT 
 pinv.[PurchaseInvoiceID]
,pinv.[CompanyID]
,pinv.[SupplierID]
,pinv.[PartID]
,pinv.[WarehouseID]
,pinv.[PurchaseOrderNumID]
,pinv.[CurrencyID]
,pinv.[PurchaseInvoiceDateID]
,pinv.[Company]
,pinv.[PurchaseOrderNum]
,pinv.[PurchaseOrderLine]
,pinv.[PurchaseOrderType]
,pinv.[PurchaseInvoiceNum]
,pinv.[PurchaseInvoiceLine]
,pinv.[PurchaseInvoiceType]
,pinv.[PurchaseInvoiceDate]
,pinv.[ActualDelivDate]
,pinv.[SupplierNum]
,pinv.[PartNum]
,pinv.[PurchaseInvoiceQty]
,pinv.[UoM]
,pinv.[UnitPrice]
,pinv.[DiscountPercent]
,pinv.[DiscountAmount]
,pinv.[TotalMiscChrg]
,pinv.[VATAmount]
,pinv.[Currency]
,pinv.[ExchangeRate]
,pinv.[CreditMemo]
,pinv.[PurchaserName]
,pinv.[WarehouseCode]
,pinv.[PurchaseChannel]
,pinv.[Comment]
,pinv.[PIRes1]
,pinv.[PIRes2]
,pinv.[PIRes3]
,pinv.[PIRes4]
,pinv.[PurchaseInvoiceAmountOC]
,pinv.[PurchaseOrderDate]
,pinv.[ReqDelivDate]
,pinv.[OrgReqDelivDate]
,pinv.[CommittedDelivDate]
,pinv.[OrgCommittedDelivDate]
,pinv.[DueDate]
,pinv.[PaymentDate]
,pinv.[InvoiceStatus]
FROM dm.FactPurchaseInvoice pinv
LEFT JOIN dbo.Company com ON pinv.Company = com.Company
WHERE com.BusinessArea = 'Lifting Solutions' AND com.[Status] = 'Active'
--It is a dynamic Company addition in the sub-dataset in a way that so long a company is added in its parent dataset, this company will automatically appear in its assigend Business Area sub-dataset.
--This company addtion should in its first hand appear in the dbo.Company with correct attributes.

--WHERE Company in ('AFISCM', 'CDKCERT', 'CEECERT','CERDE', 'CFICERT', 'CLTCERT', 'CLVCERT', 'CSECERT', 'CUKCERT', 'CNOEHAU', 'CNOCERT', 'CyESA', 'HFIHAKL', 'TRACLEV','MENBE14','MENNL01','MENNL02','MENNL03','MENNL04','MENNL07','MENNL11')  --and PurchaseOrderType <> 'Backorder' -- don't know/remember why BackOrder is excluded before changes time 20210604 /DZ
GO
PRINT N'Creating [stage].[CER_NO_BC_StockBalance]'
GO
CREATE TABLE [stage].[CER_NO_BC_StockBalance]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[DelivTime] [nvarchar] (50) NULL,
[StockBalance] [nvarchar] (50) NULL,
[BinNum] [nvarchar] (50) NULL,
[StockValue] [nvarchar] (50) NULL,
[LastStockTakeDate] [nvarchar] (50) NULL,
[AvgCost] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [nvarchar] (50) NULL,
[DelivTime_letra] [nvarchar] (50) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_NO_BC_StockBalance]'
GO

CREATE view [stage].[vCER_NO_BC_StockBalance] as

sELECT

--------------------------------------------- Keys/ IDs ---------------------------------------------
CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum),'#',TRIM(WarehouseCode))))) AS ItemWarehouseID
,UPPER(CONCAT(Company,'#',TRIM(PartNum),'#',TRIM(WarehouseCode))) AS ItemWarehouseCode
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum))))) AS SupplierID
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(WarehouseCode))))) AS WarehouseID
,PartitionKey

--------------------------------------------- Regular Fields ---------------------------------------------

---Mandatory Fields ---
,UPPER(TRIM(Company)) AS Company
,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
,UPPER(TRIM(PartNum)) AS PartNum
,CONVERT(decimal(18,4), Replace(StockBalance, ',', '.')) AS StockBalance
,CONVERT(decimal(18,4), Replace(StockValue, ',', '.')) AS StockValue
--,UPPER(TRIM(Currency)) AS Currency

---Valuable Fields ---
,UPPER(TRIM(BinNum)) AS BinNum
,UPPER(TRIM(SupplierNum)) AS SupplierNum
,CASE 
	WHEN TRIM(DelivTime_letra) = 'D' THEN DelivTime
	WHEN TRIM(DelivTime_letra) = 'W' THEN DelivTime * 7
	WHEN TRIM(DelivTime_letra) = 'M' THEN DelivTime * 30
	WHEN TRIM(DelivTime_letra) = 'Y' THEN DelivTime * 360
	ELSE 0 END AS DelivTime
,CASE WHEN LastStockTakeDate = '' OR LastStockTakeDate is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, LastStockTakeDate) END AS LastStockTakeDate
--,CONVERT(decimal(18,4), Replace(StockTakeDiff, ',', '.')) AS StockTakeDiff
--,CONVERT(decimal(18,4), Replace(SalesRemainingQty, ',', '.')) AS SalesRemainingQty
--,CONVERT(decimal(18,4), Replace(PurchaseRemainingqty, ',', '.')) AS PurchaseRemainingqty
--,CONVERT(decimal(18,4), Replace(AvgCost, ',', '.')) AS AvgCost

---Good-to-have Fields ---
--,CASE WHEN LastStdCostCalDate = '' OR LastStdCostCalDate is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, LastStdCostCalDate) END AS LastStdCostCalDate
--,CONVERT(decimal(18,4), Replace(MaxStockQty, ',', '.')) AS MaxStockQty
--,CONVERT(decimal(18,4), Replace(ReOrderLevel, ',', '.')) AS ReOrderLevel
--,CONVERT(decimal(18,4), Replace(SafetyStock, ',', '.')) AS SafetyStock
--,CONVERT(decimal(18,4), Replace(OptimalOrderQty, ',', '.')) AS OptimalOrderQty

--------------------------------------------- Meta Data ---------------------------------------------
,CONVERT(date, ModifiedTimeStamp) AS ModifiedTimeStamp
,CONVERT(date, CreatedTimeStamp) AS CreatedTimeStamp
--,TRIM(IsActiveRecord) AS IsActiveRecord

--------------------------------------------- Extra Fields ---------------------------------------------
--,UPPER(TRIM(SBRes1)) AS SBRes1
--,UPPER(TRIM(SBRes2)) AS SBRes2
--,UPPER(TRIM(SBRes3)) AS SBRes3

from [stage].[CER_NO_BC_StockBalance]
GO
PRINT N'Creating [stage].[AXL_NO_SOLine]'
GO
CREATE TABLE [stage].[AXL_NO_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[InvoiceType] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (22, 8) NULL,
[UnitCost] [decimal] (22, 8) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[VAT] [decimal] (18, 4) NULL,
[CashDiscountOffered] [decimal] (18, 4) NULL,
[CashDiscountUsed] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OrderType] [nvarchar] (50) NULL,
[SalesChannel] [varchar] (10) NULL,
[BusinessChain] [varchar] (10) NULL,
[Res1] [varchar] (100) NULL,
[Res2] [varchar] (100) NULL,
[Res3] [varchar] (100) NULL,
[PartDesc] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[vAXL_NO_SOLine]'
GO

CREATE VIEW [stage].[vAXL_NO_SOLine] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine), '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(PartNum), '#', TRIM(PartDesc))))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(PartDesc))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(InvoiceNum))))) AS SalesLedgerID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum), '#', (IIF(TRIM([PartNum]) LIKE 'IACO%' , 'MISC. CHARGES', TRIM([PartDesc]))))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT(int, IIF(InvoiceDate = '', 19900101, replace(convert(date, InvoiceDate), '-', ''))) AS SalesInvoiceDateID
	,UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine))) AS SalesInvoiceCode
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine))) AS SalesOrderCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(SalesPerson) AS SalesPersonName
	,TRIM(CustNum) AS [CustomerNum]
	,TRIM(PartNum) AS PartNum
	,UPPER(PartDesc) AS PartDesc
	,'' AS [PartType]
	,TRIM(OrderNum) AS [SalesOrderNum]
	,CAST(OrderLine AS text) AS [SalesOrderLine]
	,TRIM(OrderSubLine) AS [SalesOrderSubLine]
	,TRIM(OrderType) AS [SalesOrderType]
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,TRIM(InvoiceLine) AS [SalesInvoiceLine]
	,TRIM(InvoiceType) AS [SalesInvoiceType]
	,CASE WHEN InvoiceDate = '' THEN '1900-01-01' ELSE CONVERT(date, InvoiceDate) END AS [SalesInvoiceDate]
	,ActualDeliveryDate AS [ActualDelivDate]
	,SellingShipQty AS [SalesInvoiceQty]
	,TRIM(Unit) AS [UoM]
	,UnitPrice
	,UnitCost
	,DiscountAmount
	,IIF(UnitPrice*SellingShipQty = 0, 0, DiscountAmount/UnitPrice*SellingShipQty) AS DiscountPercent
	,CONVERT(decimal(18,4), CashDiscountOffered) AS [CashDiscOffered] 
	,CONVERT(decimal(18,4), CashDiscountUsed) AS [CashDiscUsed] 
	,TotalMiscChrg
	,VAT AS [VATAmount]
	,Currency
	,ExchangeRate
	,TRIM(CreditMemo) AS CreditMemo
	,TRIM([SalesChannel]) AS [SalesChannel]
	,TRIM([BusinessChain]) AS [Department]
	,TRIM(WarehouseCode) AS WarehouseCode
	,NULL AS [CostBearerNum]
	,NULL AS [CostUnitNum]
	,NULL AS [ReturnComment]
	,NULL AS [ReturnNum]
	,NULL AS [ProjectNum]
	,'' AS [IndexKey]
	,Res1 AS SIRes1
	,Res2 AS SIRes2
	,Res3 AS SIRes3
FROM stage.AXL_NO_SOLine


	--,CASE WHEN OrderType = 'MD' THEN 1 
	--		WHEN OrderType = 'MT' THEN 2
	--		WHEN OrderType = 'MR' THEN 3
	--		WHEN OrderType = 'IV' THEN 4
	--		WHEN OrderType = 'Misc. Charges' THEN 5 --added after Ulf changes in the night /DZ
	--	ELSE OrderType END AS [SalesOrderType]

GROUP BY
	PartitionKey, Company, SalesPerson, CustNum, PartNum, PartDesc, OrderNum, OrderLine, OrderSubLine,OrderType, InvoiceNum, InvoiceLine, InvoiceDate, SellingShipQty, UnitPrice, UnitCost, DiscountAmount, TotalMiscChrg, WarehouseCode, CreditMemo, ActualDeliveryDate, Currency, ExchangeRate, InvoiceType, Res1, Res2, Res3, Unit, VAT, SalesChannel, BusinessChain, CashDiscountOffered, CashDiscountUsed
GO
PRINT N'Creating [stage].[GPI_FR_Part]'
GO
CREATE TABLE [stage].[GPI_FR_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartName] [nvarchar] (50) NULL,
[PartDescription] [nvarchar] (max) NULL,
[PartDescription2] [nvarchar] (max) NULL,
[PartDescription3] [nvarchar] (max) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[ProductGroup2] [nvarchar] (50) NULL,
[ProductGroup3] [nvarchar] (50) NULL,
[ProductGroup4] [nvarchar] (50) NULL,
[Brand] [nvarchar] (50) NULL,
[CommodityCode] [nvarchar] (50) NULL,
[PartNumReplacement] [nvarchar] (50) NULL,
[CountryOfOrigin] [nvarchar] (50) NULL,
[NetWeight] [decimal] (18, 4) NULL,
[Volume] [decimal] (18, 4) NULL,
[Material] [nvarchar] (50) NULL,
[Barcode] [nvarchar] (50) NULL,
[StartDate] [date] NULL,
[EndDate] [date] NULL,
[TEST] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vGPI_FR_Part]'
GO
CREATE VIEW [stage].[vGPI_FR_Part] AS
--COMMENT EMPTY FIELDS // ADD TRIM() UPPER() INTO PartID 22-12-28 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]), '#', TRIM([PartNum]))))) AS PartID
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', TRIM([PartNum])))) AS PartID
	,CONCAT([Company], '#', TRIM([PartNum])) AS PartCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [Company])) AS CompanyID
	,PartitionKey

	,[Company]
	,TRIM([PartNum]) AS [PartNum]
	,[PartName]
	,[PartDescription]
	,[PartDescription2]
	,[PartDescription3]
	--,NULL AS MainSupplier
	--,NULL AS AlternativeSupplier
	,[ProductGroup]
	,[ProductGroup2]
	,[ProductGroup3]
	,[ProductGroup4]
	,[Brand]
	,[CommodityCode]
	--,'' AS [PartReplacementNum]
	--,'' AS [PartStatus]
	,[CountryOfOrigin]
	,[NetWeight]
	--,'' AS [UoM]
	,[Material]
	,[Barcode]
	--,0 AS [ReorderLevel]
	--,'' AS [PartResponsible]
	,[StartDate]
	,[EndDate]
FROM [stage].[GPI_FR_Part]
GO
PRINT N'Creating [stage].[FOR_ES_Customer]'
GO
CREATE TABLE [stage].[FOR_ES_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[MainCustomerName] [nvarchar] (200) NULL,
[CustomerName] [nvarchar] (200) NULL,
[AddressLine1] [nvarchar] (200) NULL,
[TelephoneNum1] [nvarchar] (50) NULL,
[TelephoneNum2] [nvarchar] (50) NULL,
[Email] [nvarchar] (200) NULL,
[ZIPCode] [nvarchar] (50) NULL,
[City] [nvarchar] (50) NULL,
[SalesDistrict] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[SalesPersonCode] [nvarchar] (50) NULL,
[Type] [nvarchar] (20) NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[VATNum] [nvarchar] (50) NULL,
[OrganizationNum] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vFOR_ES_Customer]'
GO
CREATE view [stage].[vFOR_ES_Customer] AS
--COMMENT EMPTY FIELD 2022-12-21 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,UPPER(CONCAT(TRIM([Company]),'#',TRIM([CustomerNum]))) AS CustomerCode
	,PartitionKey

	,Company
    ,TRIM(CustomerNum) AS CustomerNum
	,CustomerName AS MainCustomerName --Swapping MainCustomerName and CustomerName due to data quality in MainCustomerName being much better /SM 2021-11-30
    ,MainCustomerName AS CustomerName
    ,[AddressLine1]
    --,''	AS [AddressLine2]
    --,'' AS [AddressLine3]
	,[TelephoneNum1]
	,[TelephoneNum2]
	,[Email]
	,[ZIPCode]
    ,IIF([City]= ' ',null,[dbo].[ProperCase]([City])) AS [City]    
    --,'' AS [State]
	,SalesDistrict
    ,cc.CountryName AS CountryName
	--,'' AS Division
	--,'' AS CustomerIndustry
	--,'' AS CustomerSubIndustry
	,[dbo].[ProperCase](TRIM(AddressLine1)) as AddressLine
	,[dbo].[ProperCase](concat_ws(',',coalesce(cc.CountryName,null),' ' + coalesce(IIF(City= ' ',null,City),' ' + IIF(ZIPCode= ' ',null,ZIPCode)),' ' + coalesce(IIF([addressline1]= ' ',null,[addressline1]),''))) AS FullAddressLine
    ,[dbo].[ProperCase](CustomerGroup) AS CustomerGroup
	--,'' AS CustomerSubGroup
	,SalesPersonCode
    ,[dbo].[ProperCase](SalesPersonName) AS SalesPersonName
	--,'' AS [SalesPersonResponsible]
    ,[VATNum]
	,[OrganizationNum] AS OrganizationNum
	--,'' AS AccountNum
	--,''	AS [InternalExternal]
	--,''	AS CustomerScore
	,[Type] AS CustomerType
	,GETDATE() AS ValidFrom
	,DATEADD(year,1,GETDATE()) AS ValidTo
	,c.CountryName as CountryCode
  FROM [stage].[FOR_ES_Customer] c
  LEFT JOIN [dbo].[CountryCodes] cc ON c.CountryName = cc.[Alpha-2 code]
GO
PRINT N'Creating [stage].[WID_EE_PurchaseLedger]'
GO
CREATE TABLE [stage].[WID_EE_PurchaseLedger]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierCode] [nvarchar] (50) NOT NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[InvoiceLCYAmount] [decimal] (18, 4) NOT NULL,
[InvoiceCurrAmount] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (10) NULL,
[VATPaid] [decimal] (18, 4) NULL,
[VATcode] [nvarchar] (10) NULL,
[PayToName] [nvarchar] (50) NULL,
[PaymentTermsCode] [nvarchar] (50) NULL,
[PrepaymentNum] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vWID_EE_PurchaseLedger]'
GO


CREATE VIEW [stage].[vWID_EE_PurchaseLedger] AS 
--ADD TRIM() UPPER() INTO SupplierID 23-01-24 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(PurchaseInvoiceNum), TRIM(PurchaseOrderNum)))) AS PurchaseLedgerID

	,CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(PurchaseInvoiceNum)) AS PurchaseLedgerCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierCode))))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(SupplierCode)))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(PurchaseInvoiceNum)))) AS PurchaseInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(PurchaseOrderNum)))) AS PurchaseOrderNumID
	,CONVERT(int, replace(convert(date,InvoiceDate), '-', '')) AS PurchaseInvoiceDateID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM(CurrencyCode))) AS CurrencyID
	,[PartitionKey]

	,[Company]
	,TRIM(SupplierCode) AS SupplierNum
	,TRIM(PurchaseInvoiceNum) AS [PurchaseInvoiceNum]
	,TRIM(PurchaseOrderNum) AS [PurchaseOrderNum]
	,CONVERT(date, [InvoiceDate]) AS PurchaseInvoiceDate
	,CONVERT(date, [DueDate]) AS PurchaseDueDate
	,CONVERT(date, [LastPaymentDate]) AS PurchaseLastPaymentDate
	,[InvoiceLCYAmount] AS InvoiceAmount
--	,IIF([InvoiceCurrAmount]=0, null, [InvoiceLCYAmount]/[InvoiceCurrAmount]) AS ExchangeRate
	,1 AS [ExchangeRate]
	,'EUR' AS [Currency]
	,[VATPaid] AS VATAmount
	,[VATcode]
	,[PayToName]
	,'' AS [PayToCity]
	,'' AS [PayToContact]
	,[PaymentTermsCode] AS PaymentTerms
	,[PrepaymentNum]
	,'' AS LastPaymentNum
	,'' AS PLRES1
	,'' AS PLRES2
	,'' AS PLRES3
	--,NULL AS PaidInvoiceAmount
	--,NULL AS RemainingInvoiceAmount
	--,NULL AS LinkToOriginalInvoice
	,CAST('1900-01-01' AS date) AS AccountingDate
	--,NULL AS AgingPeriod
	--,NULL AS AgingSort
	--,NULL AS VATCodeDesc
FROM 
	[stage].[WID_EE_PurchaseLedger]
GO
PRINT N'Creating [stage].[CER_LV_SalesLedger]'
GO
CREATE TABLE [stage].[CER_LV_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[InvoiceAmountOC] [decimal] (18, 8) NULL,
[PaidAmountOC] [decimal] (18, 8) NULL,
[OpenAmountOC] [decimal] (18, 8) NULL,
[ExchangeRate] [decimal] (18, 8) NULL,
[Currency] [nvarchar] (10) NULL,
[VATAmount] [decimal] (18, 8) NULL,
[VATCode] [nvarchar] (25) NULL
)
GO
PRINT N'Creating [stage].[vCER_LV_SalesLedger]'
GO
CREATE VIEW [stage].[vCER_LV_SalesLedger] AS
--COMMENT EMPTY FIELDS // ADD UPPER() TRIM() INTO CustomerID 2022-12-21 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ), '#', InvoiceNum))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) )))) AS CustomerID
	,CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ), '#', TRIM(InvoiceNum)) AS SalesLedgerCode
	,PartitionKey

	,TRIM(Company) AS Company
	,TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ) AS CustomerNum
	,TRIM(InvoiceNum) AS SalesInvoiceNum
	,InvoiceDate AS SalesInvoiceDate
	,CONVERT(date, DueDate) AS SalesDueDate
	,CONVERT(date, LastPaymentDate) AS SalesLastPaymentDate
	,InvoiceAmountOC AS InvoiceAmount
	,PaidAmountOC AS PaidInvoiceAmount
	,OpenAmountOC AS RemainingInvoiceAmount
	,ExchangeRate
	,Currency
	,VATAmount
	,VATCode
	--,'' AS PayToName
	--,'' AS PayToCity
	--,'' AS PayToContact
	--,'' AS PaymentTerms
	--,'' AS SLRes1
	--,'' AS SLRes2
	--,'' AS SLRes3
	,'1900-01-01' AS AccountingDate
	--,'' AS AgingPeriod
	--,'' AS AgingSort
	--,'' AS VATCodeDesc
	--,'' AS LinkToOriginalInvoice
FROM 
	stage.CER_LV_SalesLedger
GO
PRINT N'Creating [dm_LS].[fctPurchaseOrderDistinct]'
GO









CREATE VIEW [dm_LS].[fctPurchaseOrderDistinct] AS

SELECT pod.[PurchaseOrderNumID]
,pod.[CompanyID]
,pod.[SupplierID]
,pod.[PurchaseOrderNum]
,pod.[Company]
,pod.[Supplier]

FROM dm.FactPurchaseOrderDistinct as pod
WHERE pod.Company  in ('AFISCM', 'CDKCERT', 'CEECERT', 'CFICERT', 'CLTCERT', 'CLVCERT', 'CSECERT', 'CUKCERT', 'CNOEHAU', 'CNOCERT', 'CERPL', 'CyESA', 'HFIHAKL', 'TRACLEV')  -- LS basket
GO
PRINT N'Creating [stage].[GPI_FR_OLine]'
GO
CREATE TABLE [stage].[GPI_FR_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[NeedByDate] [date] NULL,
[DelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[SumUnitCost] [decimal] (18, 4) NULL,
[SumUnitPrice] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OpenRelease] [int] NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [int] NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[BusinessChannel] [nvarchar] (50) NULL,
[SuspendingFlag] [int] NULL,
[LabelQuotations] [nvarchar] (50) NULL,
[QuotationNum] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vGPI_FR_OLine]'
GO
CREATE VIEW [stage].[vGPI_FR_OLine] AS
--COMMENT EMPTY FIELDS // ADD UPPER() TRIM() INTO CustomerID,PartID 22-12-28 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(SalesChannel) ))) AS SalesOrderID --, '#', NeedByDate, '#', PartNum --, '#', DelivQty, '#', UnitPrice, '#', UnitCost /*, '#', TRIM(OrderSubLine) */
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustomerNum)))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM([PartNum]))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM([PartNum])))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum)))) AS SalesOrderNumID

	,CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderSubLine), '#', TRIM(InvoiceNum)) AS SalesOrderCode

	,CONVERT(int, replace(convert(date, OrderDate), '-', '')) AS SalesOrderDateID  --redundent?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey 

	,Company 
	,TRIM(CustomerNum) AS CustomerNum
	,TRIM(OrderNum) AS [SalesOrderNum]
	,TRIM(OrderLine) AS [SalesOrderLine]
	,MIN(OrderSubLine) AS [SalesOrderSubLine]
	,LabelQuotations AS [SalesOrderType]
	,QuotationNum AS [SalesOrderCategory] -- QuotationNum - Reference num to a quotating. Putting it in SalesOrderCategory since it is not used for Forankra FR
	,OrderDate AS [SalesOrderDate]
	,NeedByDate AS [NeedbyDate]
	,DelivDate AS [ExpDelivDate]
	,CAST('1900-01-01' AS date) AS ActualDelivDate
	,CAST('1900-01-01' AS date) AS ConfirmedDelivDate
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,OrderQty AS [SalesOrderQty]
	,IIF(LabelQuotations NOT IN ('3','4'), 0, OrderQty) AS DelivQty -- DZ 20211130
	,IIF(LabelQuotations IN ('3','4'), 0, OrderQty) RemainingQty -- DZ 20211130
	--,NULL AS SalesInvoiceQty
	--,'' AS [UoM]
	,UnitPrice
	,AVG(UnitCost) as UnitCost
	,COALESCE(Currency, 'EUR') AS Currency
	,COALESCE(ExchangeRate, 1) AS ExchangeRate
	,CASE WHEN LabelQuotations IN ('3','4') THEN '0' ELSE '1' END  AS OpenRelease  --LabelQuotations = 4 means Closed order
	,DiscountAmount
	,DiscountPercent
	,TRIM([PartNum]) AS PartNum
	--,'' AS [PartType]
	,PartStatus
	,SalesPersonName
	,TRIM(WarehouseCode) AS WarehouseCode
	,SalesChannel
	,'Normal Order Handling' AS AxInterSalesChannel
	,BusinessChannel AS [Department]
	,SuspendingFlag AS [ProjectNum] -- Since BackOrder needs this flag=1, so use [ProjectNum] for SuspendingFlag for ACK. /DZ. 20211104
	--,'' AS [IndexKey]
	--,'0' AS Cancellation
	--,'' AS SORes1
	--,'' AS SORes2
	--,'' AS SORes3
	--,'' AS ReturnComment
	--,'' AS SalesReturnOrderNum
	--,'' AS SalesReturnInvoiceNum
	--,NULL AS [TotalMiscChrg]
FROM stage.GPI_FR_OLine
WHERE SuspendingFlag <> 2 --since these are orders that they do not consider 'real' unless they are reactivated. by John D 20210902 -- /DZ
GROUP BY PartitionKey ,Company, CustomerNum, OrderNum, OrderLine,/*OrderSubLine,*/OrderType,OrderDate, NeedByDate,DelivDate,InvoiceNum,OrderQty
	/*,DelivQty */ ,RemainingQty, UnitPrice, /*UnitCost,*/ Currency, ExchangeRate, DiscountAmount, DiscountPercent, PartNum, PartStatus
	,SalesPersonName,WarehouseCode, SalesChannel, BusinessChannel, LabelQuotations,QuotationNum, OrderSubLine, SuspendingFlag
--	order by OpenRelease desc
GO
PRINT N'Creating [stage].[JEN_SE_PurchaseLedger]'
GO
CREATE TABLE [stage].[JEN_SE_PurchaseLedger]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierCode] [nvarchar] (50) NOT NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[InvoiceLCYAmount] [decimal] (18, 4) NOT NULL,
[InvoiceCurrAmount] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (10) NULL,
[VATPaid] [decimal] (18, 4) NULL,
[VATcode] [nvarchar] (10) NULL,
[PayToName] [nvarchar] (50) NULL,
[PaymentTermsCode] [nvarchar] (50) NULL,
[PrepaymentNum] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vJEN_SE_PurchaseLedger]'
GO
CREATE VIEW [stage].[vJEN_SE_PurchaseLedger] AS 

SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(SupplierCode), '#', TRIM(PurchaseInvoiceNum))))) AS PurchaseLedgerID -- shall = in Invoice
	,UPPER(CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(PurchaseInvoiceNum))) AS PurchaseLedgerCode --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',TRIM(Company))) AS CompanyID --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierCode))))) AS SupplierID 
	--,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(Company, '#', TRIM(UPPER(SupplierCode)))))) AS SupplierID --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(PurchaseInvoiceNum))))) AS PurchaseInvoiceID --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM(CurrencyCode)))) AS CurrencyID --Redundant?
	,CONVERT(int, replace(convert(date,InvoiceDate),'-','')) AS PurchaseInvoiceDateID  --Redundant?
	,[PartitionKey]

	,[Company]
	,TRIM(UPPER(SupplierCode)) AS SupplierNum
	,[PurchaseOrderNum]
	,[PurchaseInvoiceNum]
	,CONVERT(date, [InvoiceDate]) AS PurchaseInvoiceDate
	,CONVERT(date, [DueDate]) AS PurchaseDueDate
	,CONVERT(date, [LastPaymentDate]) AS PurchaseLastPaymentDate
	,[InvoiceLCYAmount] 
	,[InvoiceCurrAmount] AS InvoiceAmount
--	,IIF([InvoiceCurrAmount]=0, null, [InvoiceLCYAmount]/[InvoiceCurrAmount]) AS ExchangeRate
	,[ExchangeRate]
	,[CurrencyCode] AS Currency
	,[VATPaid]	AS VATAmount
	,[VATcode]	AS VATCode
	,[PayToName]
	,'' AS [PayToCity]
	,'' AS [PayToContact]
	,[PaymentTermsCode]	AS PaymentTerms
	,[PrepaymentNum]
	,'' AS LastPaymentNum
	,'' AS PLRES1
	,'' AS PLRES2
	,'' AS PLRES3
	,NULL AS PaidInvoiceAmount
	,NULL AS RemainingInvoiceAmount
	,NULL AS LinkToOriginalInvoice
	,CAST ('1900-01-01' AS DATE)AS AccountingDate
	--,NULL AS AgingPeriod
	--,NULL AS AgingSort
	--,NULL AS VATCodeDesc
FROM 
	[stage].[JEN_SE_PurchaseLedger]
GO
PRINT N'Creating [stage].[NOM_NO_PurchaseInvoice]'
GO
CREATE TABLE [stage].[NOM_NO_PurchaseInvoice]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaseOrderType] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[PurchaseInvoiceLine] [nvarchar] (50) NULL,
[PurchaseInvoiceType] [nvarchar] (50) NULL,
[PurchaseInvoiceDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PurchaseInvoiceQty] [decimal] (18, 4) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[VATAmount] [decimal] (18, 4) NULL,
[CreditMemo] [nvarchar] (1) NULL,
[PurchaserName] [nvarchar] (100) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[PurchaseChannel] [nvarchar] (50) NULL,
[Comment] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[vNOM_NO_PurchaseInvoice]'
GO
CREATE VIEW [stage].[vNOM_NO_PurchaseInvoice] AS
--COMMENT EMPTY FIELDS 23-01-09 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company),'#', TRIM(PurchaseOrderNum),'#', TRIM(PurchaseOrderLine),'#', TRIM(PurchaseOrderSubLine),'#',TRIM(PurchaseInvoiceNum), '#', TRIM(PurchaseInvoiceLine))))) AS PurchaseInvoiceID 
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseInvoiceNum), '#', TRIM(PurchaseInvoiceLine), '#', PartNum)) AS PurchaseInvoiceCode
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum))) AS PurchaseOrderNumCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum),'#',TRIM(PurchaseOrderLine),'#',TRIM(PurchaseInvoiceNum))))) AS PurchaseOrderID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum))))) AS SupplierID
    ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT(int, replace(PurchaseInvoiceDate,'-','')) AS PurchaseInvoiceDateID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#', TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum),'#',TRIM(PurchaseOrderNum))))) AS PurchaseLedgerID --match PurchaseLedgerID in [vSCM_FI_PurchaseLedger]
	,UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine) )) AS PurchaseOrderCode
	,PartitionKey
	,UPPER(TRIM(Company)) AS Company
	,UPPER(TRIM(PurchaseOrderNum)) AS PurchaseOrderNum
	,UPPER(TRIM(PurchaseOrderLine)) AS PurchaseOrderLine
	,UPPER(TRIM(PurchaseOrderSubLine)) AS PurchaseOrderSubLine
	,PurchaseOrderType
	,UPPER(TRIM(PurchaseInvoiceNum)) AS PurchaseInvoiceNum
	,UPPER(TRIM(PurchaseInvoiceLine)) AS PurchaseInvoiceLine
	,PurchaseInvoiceType
	,PurchaseInvoiceDate
	,ActualDelivDate
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,PurchaseInvoiceQty
	,UoM
	,UnitPrice
	,DiscountPercent
	,DiscountAmount
	,TotalMiscChrg
	,VATAmount
	,ExchangeRate
	,Currency
	,CreditMemo
	,PurchaserName
	,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
	,PurchaseChannel
	--,'' AS Comment
	--,'' AS PIRes1
	--,'' AS PIRes2
	--,'' AS PIRes3
	--,'' AS LineType
	--,'' AS OrderDelivLineNum
FROM stage.NOM_NO_PurchaseInvoice

GROUP BY
	PartitionKey, Company, PurchaseOrderNum, PurchaseInvoiceNum, SupplierNum, PartNum, PurchaseOrderLine, PurchaseOrderSubLine, PurchaseInvoiceQty, UnitPrice, WarehouseCode,PurchaserName, PurchaseInvoiceLine, PurchaseInvoiceType, PurchaseInvoiceDate, ActualDelivDate, TotalMiscChrg, CreditMemo, PurchaseOrderType,DiscountAmount,Currency,ExchangeRate, UoM, VATAmount, PurchaseChannel, DiscountPercent, DiscountAmount--, LastPaymentNum --, OrderType, [Site], OrderDelivLineNum, , DiscountPercent, PurchaserName, InvoiceLine, InvoiceType, InvoiceDate, ActualDeliveryDate, TotalMiscChrg, CreditMemo
GO
PRINT N'Creating [stage].[FOR_FR_Customer]'
GO
CREATE TABLE [stage].[FOR_FR_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[MainCustomerName] [nvarchar] (50) NULL,
[CustomerName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (50) NULL,
[Email] [nvarchar] (200) NULL,
[CustomerABC] [nvarchar] (50) NULL,
[City] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[Division] [nvarchar] (50) NULL,
[CustomerIndustry] [nvarchar] (50) NULL,
[CustomerSubIndustry] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[SalesPersonResponsible] [nvarchar] (50) NULL,
[VatRegNo] [nvarchar] (50) NULL,
[AccountString] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[CustomerType] [nvarchar] (50) NULL,
[Commercial2] [nvarchar] (50) NULL,
[Commercial3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vFOR_FR_Customer]'
GO
CREATE VIEW [stage].[vFOR_FR_Customer] AS
--COMMENT empty fields / ADD UPPER()TRIM() INTO CustomerID 2022-12-13 VA
SELECT 
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustomerNum)))) AS CustomerID
	CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
    ,CONCAT([Company], '#', TRIM([CustomerNum])) AS CustomerCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [Company])) AS CompanyID
	,PartitionKey

	,Company
    ,TRIM(CustomerNum) AS CustomerNum
	,MainCustomerName
    ,[dbo].[ProperCase](CustomerName) AS CustomerName
    ,[AddressLine1]
    ,[AddressLine2]
    ,[AddressLine3]
	,[TelephoneNumber1] AS [TelephoneNum1]
	--,'' AS [TelephoneNum2]
	,[Email]
	,ZipCode
    ,IIF([City]= ' ', null, [dbo].[ProperCase]([City])) AS [City]    
    ,IIF([State]= ' ', null, [State]) AS [State]
	,[District] AS [SalesDistrict]
    ,[dbo].[ProperCase](CountryName) AS CountryName
	,Division
	,CustomerIndustry
	,CustomerSubIndustry
	,TRIM(CONCAT(AddressLine1, ' ', AddressLine2)) AS AddressLine
	,CONCAT(IIF(TRIM(CountryName) = 'Fr', 'France', TRIM(CountryName)), ', ', TRIM([City]), ', ',  TRIM([ZipCode]), ', ',  IIF(TRIM([AddressLine3]) = '', TRIM([AddressLine1]), TRIM([AddressLine3]) )) AS FullAddressLine
    ,(CustomerGroup) AS CustomerGroup
	,(CustomerSubGroup) AS CustomerSubGroup
	,[SalesRepCode] AS [SalesPersonCode]
	,(SalesPersonName) AS SalesPersonName
	,Commercial3 AS [SalesPersonResponsible] -- Should potentially be put into "Extra field" instead - SB 2022-11-30
    ,TRIM([VatRegNo]) AS [VATNum]
	--,'' AS OrganizationNum 
	,[AccountString] AS [AccountNum]
	--,'' AS [InternalExternal]
	,Commercial2 AS [CustomerScore]  -- Should potentially be put into "Extra field" instead - SB 2022-11-30
	,CustomerType
	,CASE 
		WHEN LEN(TRIM(CountryName)) = 3 THEN (SELECT [Alpha-2 code] FROM DBO.CountryCodes WHERE [Alpha-3 code] = TRIM(CountryName))
		ELSE NULLIF(TRIM(CountryName),'')
	 END as CountryCode
FROM [stage].[FOR_FR_Customer]
GO
PRINT N'Creating [stage].[ARK_PI_PurchaseLedger]'
GO
CREATE TABLE [stage].[ARK_PI_PurchaseLedger]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[PLRes1] [nvarchar] (50) NULL,
[PLRes2] [nvarchar] (50) NULL,
[PLRes3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vARK_PI_PurchaseLedger]'
GO


CREATE VIEW [stage].[vARK_PI_PurchaseLedger] AS 
--ADD UPPER() TRIM() INTO SupplierID 23-01-23 VA // COMMENT EMPTY FIELDS 
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(SupplierNum), '#', TRIM(InvoiceNum)))) AS PurchaseLedgerID
	,CONCAT(Company, '#', TRIM(SupplierNum), '#', TRIM(InvoiceNum)) AS PurchaseLedgerCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum))))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(SupplierNum)))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(InvoiceNum)))) AS PurchaseInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', ''))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', '')) AS CurrencyID
	,CONVERT(int, replace(convert(date,InvoiceDate), '-', '')) AS PurchaseInvoiceDateID 
	,[PartitionKey]

	,[Company]
	,TRIM(SupplierNum) AS SupplierNum
	,'' AS [PurchaseOrderNum]
	,InvoiceNum AS [PurchaseInvoiceNum]
	,CONVERT(date, [InvoiceDate]) AS [PurchaseInvoiceDate]
	,CONVERT(date, [DueDate]) AS PurchaseDueDate
	,CONVERT(date, [LastPaymentDate]) AS PurchaseLastPaymentDate
	--,NULL AS [InvoiceAmount]
	,1 AS [ExchangeRate]
	,'CZK' AS [Currency]
	--,NULL AS [VATAmount]
	--,'' AS [VATcode]
	--,'' AS [PayToName]
	--,'' AS [PayToCity]
	--,'' AS PayToContact
	--,'' AS [PaymentTerms]
	--,'' AS [PrepaymentNum]
	--,'' AS LastPaymentNum
	,PLRES1
	,PLRES2
	,PLRES3
	--,NULL AS PaidInvoiceAmount
	--,NULL AS RemainingInvoiceAmount
	--,NULL AS LinkToOriginalInvoice
	,CAST('1900-01-01'AS date) AS AccountingDate
	--,NULL AS AgingPeriod
	--,NULL AS AgingSort
	--,NULL AS VATCodeDesc
FROM 
	[stage].[ARK_PI_PurchaseLedger]
--WHERE [InvoiceDate] >= DATEADD(year, -1, GETDATE()) --Added this where clause as semi-incremental load functinoality since it doesn't work easily on meta-param table. /SM 2021-10-01
--GROUP BY
--	[Company],[SupplierNum],[InvoiceNum],InvoiceDate,DueDate,LastPaymentDate,[PartitionKey],PLRES1,PLRES2,PLRES3
GO
PRINT N'Creating [stage].[CER_SE_SOLine]'
GO
CREATE TABLE [stage].[CER_SE_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderRel] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitPriceOCY] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[UnitCostOCY] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[DiscountAmountOCY] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Indexkey] [nvarchar] (50) NULL,
[Site] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (max) NULL,
[ReturnNum] [nvarchar] (50) NULL,
[CostUnitNum] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_SE_SOLine]'
GO




CREATE VIEW [stage].[vCER_SE_SOLine] AS
--COMMENT empty fields / ADD TRIM(Company) into PartID/CustomerID VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(Indexkey))))) AS SalesInvoiceID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', OrderNum, '#', OrderLine, '#', InvoiceNum)))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(InvoiceNum))))) AS SalesLedgerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum), '#', InvoiceNum)))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID	
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID 
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ))))) AS CustomerID	
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) ))))) AS PartID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(PartNum))) AS SalesOrderCode
	,CONVERT(int, REPLACE(CONVERT(date, InvoiceDate), '-', '')) AS SalesInvoiceDateID  --Redundant
	,CONCAT(Company, '#', InvoiceNum, '#', InvoiceLine) AS SalesInvoiceCode --Reduntant
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT( Company, '#', '') ))	AS ProjectID
	,PartitionKey

	,UPPER(TRIM(Company)) AS Company
	,TRIM(SalesPerson) AS SalesPersonName
	,UPPER(TRIM(CustNum)) AS CustomerNum
	,UPPER(TRIM(PartNum)) AS PartNum
	--,UPPER(TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) )) AS CustomerNum
	--,UPPER(TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) )) AS PartNum
	,IIF(OrderSubLine = '000000', 'Main', 'Sub' ) AS [PartType] --DZ changed on 20210422 --CASE WHEN TRIM(OrderNum) = '0' THEN 'PrimaryPart' ELSE 'SubPart' END  AS PartType
	,UPPER(TRIM(OrderNum)) AS SalesOrderNum
	,TRIM(OrderLine) AS SalesOrderLine
	,TRIM(OrderSubLine) AS SalesOrderSubLine
	,TRIM(OrderType) AS SalesOrderType
	,UPPER(TRIM(InvoiceNum)) AS SalesInvoiceNum
	,TRIM(InvoiceLine) AS SalesInvoiceLine
	--,'' AS SalesInvoiceType
	,CONVERT(date, InvoiceDate) AS SalesInvoiceDate
	,ActualDeliveryDate AS ActualDelivDate
	,SellingShipQty AS SalesInvoiceQty
	--,'' AS UoM
	,UnitPrice 
	,UnitCost
	,IIF(UnitPrice*SellingShipQty = 0, 0, DiscountAmount/UnitPrice*SellingShipQty) AS DiscountPercent -- added calc on 20210414
	,DiscountAmount
	,0 AS CashDiscountOffered
	,0 AS CashDiscountUsed
	,TotalMiscChrg
	--,NULL AS VATAmount
	,'SEK' AS Currency
	,1 AS ExchangeRate
	,CreditMemo
	,CASE WHEN TRIM(SalesPerson) = 'Order entered through EDI' THEN 'EDI'
		WHEN TRIM(SalesPerson) = 'docparser' THEN 'PDF'
		WHEN TRIM(SalesPerson) = 'Webshop Order' THEN 'Webshop'
		ELSE 'Normal Order Handling' END AS SalesChannel
	--,'' AS Department
	,WarehouseCode
	--,NULL AS DeliveryAddress
	--,'' AS CostBearerNum
	,CostUnitNum AS CostUnitNum
	,ReturnComment
	,TRIM(ReturnNum) AS ReturnNum
	--,'' AS ProjectNum
	,Indexkey --MAX(Indexkey) AS before 20210414 ID change
	--,'' AS SIRes1
	--,'' AS SIRes2
	--,'' AS SIRes3
FROM 
	stage.CER_SE_SOLine AS SO
--GROUP BY
--	PartitionKey, Company, SalesPerson, CustNum, PartNum, OrderNum, OrderLine, OrderSubLine, OrderType, InvoiceNum, InvoiceLine, InvoiceDate, SellingShipQty, UnitPrice, UnitCost, DiscountAmount, TotalMiscChrg, WarehouseCode, CreditMemo, ActualDeliveryDate, Indexkey, ReturnComment, ReturnNum, CostUnitNum
GO
PRINT N'Creating [dm_LS].[DimSalesPersonName]'
GO
CREATE VIEW [dm_LS].[DimSalesPersonName] AS

SELECT sp.[SalesPersonNameID]
,sp.[Company]
,sp.[SalesPersonName]
FROM dm.DimSalesPersonName as sp
LEFT JOIN dbo.Company com ON sp.Company = com.Company
WHERE com.BusinessArea = 'Lifting Solutions' AND com.[Status] = 'Active'

--WHERE Company IN ('AFISCM', 'CDKCERT', 'CEECERT', 'CFICERT', 'CLTCERT', 'CLVCERT', 'CSECERT', 'CUKCERT', 'CNOEHAU', 'CERPL', 'CNOCERT', 'CyESA', 'HFIHAKL', 'TRACLEV'
--			,'MENBE14','MENNL01','MENNL02','MENNL03','MENNL04','MENNL07','MENNL11');
GO
PRINT N'Creating [stage].[LEX_FR_Warehouse]'
GO
CREATE TABLE [stage].[LEX_FR_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseID] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL,
[WarehouseDistrict] [nvarchar] (50) NULL,
[WarehouseAddress] [nvarchar] (100) NULL,
[WarehouseDescription] [nvarchar] (max) NULL,
[WarehouseType] [nvarchar] (50) NULL,
[WarehouseCountry] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vLEX_FR_Warehouse]'
GO



CREATE VIEW [stage].[vLEX_FR_Warehouse] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey

	,[Company]
	,TRIM([WarehouseCode]) AS [WarehouseCode]
	,[WarehouseName]
	,[WarehouseDistrict]
	,[WarehouseAddress]
	,[WarehouseDescription]
	,[WarehouseType]
	,[WarehouseCountry]
	,'' AS [WarehouseSite]

FROM [stage].[LEX_FR_Warehouse]
GO
PRINT N'Creating [stage].[AXL_N1_SalesLedger]'
GO
CREATE TABLE [stage].[AXL_N1_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceAmount] [decimal] (18, 4) NULL,
[RemainAmount] [decimal] (18, 4) NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vAXL_N1_SalesLedger]'
GO
CREATE VIEW [stage].[vAXL_N1_SalesLedger] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(sl.Company, '#', TRIM(sl.CustNum), '#', TRIM(sl.InvoiceNum))))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(sl.Company))) AS CompanyID
	,UPPER(CONCAT(sl.Company, '#', TRIM(sl.CustNum), '#', TRIM(sl.InvoiceNum))) AS SalesLedgerCode
	,sl.PartitionKey

	,UPPER(sl.Company) AS Company
	,UPPER(TRIM(sl.CustNum)) AS CustomerNum
	,TRIM(sl.InvoiceNum) AS [SalesInvoiceNum]
	,IIF(so.InvoiceDate = '' OR so.InvoiceDate IS NULL, '1900-01-01', so.InvoiceDate) AS [SalesInvoiceDate] --
	,CONVERT(date, DueDate) AS SalesDueDate
	,CONVERT(date, LastPaymentDate) AS LastPaymentDate
	,[InvoiceAmount]
	,[RemainAmount] AS [RemainingInvoiceAmount]
	,NULL AS CashDiscOffered
	,NULL AS CashDiscUsed
	,NULL AS [ExchangeRate]
	,NULL AS [Currency]
	,NULL AS [VATAmount]
	,NULL AS [VATCode]
	,NULL AS [PayToName]
	,NULL AS [PayToCity]
	,NULL AS [PayToContact]
	,NULL AS [PaymentTerms]
	,sl.Res1 AS SLRes1
	,sl.Res2 AS SLRes2
	,sl.Res3 AS SLRes3
FROM stage.AXL_N1_SalesLedger sl
	LEFT JOIN stage.AXL_CZ_SOLine so ON TRIM(sl.InvoiceNum) = TRIM(so.InvoiceNum)
WHERE DueDate > '2015-01-01'
GROUP BY
	sl.PartitionKey, sl.Company, sl.CustNum, sl.InvoiceNum, sl.Res2, sl.Res1, sl.Res3, sl.[InvoiceAmount], sl.[RemainAmount], so.InvoiceDate, DueDate, LastPaymentDate
GO
PRINT N'Creating [stage].[NOM_DK_PurchaseLedger]'
GO
CREATE TABLE [stage].[NOM_DK_PurchaseLedger]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NOT NULL,
[PurchaseInvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[InvoiceAmount] [decimal] (18, 4) NOT NULL,
[RemainingInvoiceAmount] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (10) NULL,
[VATAmount] [decimal] (18, 4) NULL,
[VATCode] [nvarchar] (10) NULL,
[PayToName] [nvarchar] (50) NULL,
[PayToCity] [nvarchar] (50) NULL,
[PayToContact] [nvarchar] (50) NULL,
[PaymentTerms] [nvarchar] (50) NULL,
[PrePaymentNum] [nvarchar] (50) NULL,
[LastPaymentNum] [nvarchar] (50) NULL,
[PLRes1] [nchar] (10) NULL,
[PLRes2] [nchar] (10) NULL,
[PLRes3] [nchar] (10) NULL
)
GO
PRINT N'Creating [stage].[vNOM_DK_PurchaseLedger]'
GO
CREATE VIEW [stage].[vNOM_DK_PurchaseLedger] AS 
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum))))) AS PurchaseLedgerID -- shall = in Invoice
	,UPPER(CONCAT(Company, '#', TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum))) AS PurchaseLedgerCode --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum))))) AS SupplierID 
	--,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(Company, '#', TRIM(SupplierNum))))) AS SupplierID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(PurchaseInvoiceNum))))) AS PurchaseInvoiceID --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM(Currency)))) AS CurrencyID --Redundant?
	,CONVERT(int, replace(convert(date,PurchaseInvoiceDate),'-','')) AS PurchaseInvoiceDateID  --Redundant?
	,[PartitionKey]

	,TRIM(UPPER([Company])) AS [Company]
	,TRIM(UPPER(SupplierNum)) AS SupplierNum
	,UPPER(TRIM([PurchaseOrderNum])) AS [PurchaseOrderNum]
	,UPPER(TRIM([PurchaseInvoiceNum])) AS  [PurchaseInvoiceNum]
	,CONVERT(date, PurchaseInvoiceDate) AS PurchaseInvoiceDate
	,CONVERT(date, [DueDate]) AS PurchaseDueDate
	,CONVERT(date, [LastPaymentDate]) AS PurchaseLastPaymentDate
	,RemainingInvoiceAmount 
	,InvoiceAmount
	,[ExchangeRate]
	,Currency
	,VATAmount
	,VATCode
	,[PayToName]
	,[PayToCity]
	,[PayToContact]
	,PaymentTerms
	,UPPER(TRIM([PrepaymentNum])) AS [PrepaymentNum]
	,UPPER(TRIM(LastPaymentNum)) AS LastPaymentNum
	,'' AS PLRES1
	,'' AS PLRES2
	,'' AS PLRES3
	,NULL AS PaidInvoiceAmount
	,NULL AS LinkToOriginalInvoice
	,CAST ('1900-01-01'AS date) AS AccountingDate
	,NULL AS AgingPeriod
	,NULL AS AgingSort
	,NULL AS VATCodeDesc
FROM 
	[stage].[NOM_DK_PurchaseLedger]
GO
PRINT N'Creating [stage].[SKS_FI_Customer]'
GO
CREATE TABLE [stage].[SKS_FI_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[MANDT] [nvarchar] (50) NOT NULL,
[VKORG] [nvarchar] (50) NOT NULL,
[COMPANY] [nvarchar] (8) NOT NULL,
[CUSTNUM] [nvarchar] (50) NOT NULL,
[CUSTOMERNAME] [nvarchar] (100) NULL,
[ADDRESSLINE1] [nvarchar] (150) NULL,
[ABCCODE] [nchar] (20) NULL,
[CITY] [nvarchar] (50) NULL,
[ZIP] [nvarchar] (10) NULL,
[STATE] [nvarchar] (50) NULL,
[COUNTRYNAME] [nvarchar] (50) NULL,
[CUSTOMERGROUP] [nvarchar] (50) NULL,
[CUSTOMERGROUPTEXT] [nvarchar] (50) NULL,
[SALESREPCODE] [nvarchar] (50) NULL,
[VATREGNR] [nvarchar] (20) NULL,
[VKGRP] [nvarchar] (10) NULL,
[SALESPERSONNAME] [nvarchar] (150) NULL,
[TELEPHONE1] [nvarchar] (30) NULL,
[TELEPHONE2] [nvarchar] (30) NULL,
[EMAIL] [nvarchar] (300) NULL,
[ADDRESSLINE2] [nvarchar] (50) NULL,
[ADDRESSLINE3] [nvarchar] (50) NULL,
[DISTRICT] [nvarchar] (50) NULL,
[DIVISION] [nvarchar] (50) NULL,
[CUSTOMERSUBGROUP] [nvarchar] (50) NULL,
[SALESPERSONRESPONSIBLE] [nvarchar] (50) NULL,
[ACCOUNTSTRING] [nvarchar] (50) NULL,
[INTERNALEXTERNAL] [nvarchar] (2) NULL,
[CUSTOMERABC] [nvarchar] (50) NULL,
[CUSTOMERTYPE] [nvarchar] (50) NULL,
[SALESPERSON] [nvarchar] (50) NULL,
[SALESDISTRICT] [nvarchar] (50) NULL,
[INTCA] [nvarchar] (12) NULL
)
GO
PRINT N'Creating [stage].[vSKS_FI_Customer]'
GO

--select distinct CustomerNum from [stage].[vSKS_FI_Customer] order by 1 desc


CREATE VIEW [stage].[vSKS_FI_Customer] AS
--COMMENT EMPTY FIELDS // ADD UPPER() TRIM() INTO CustomerID 2022-12-16 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([COMPANY]),'#',TRIM([CUSTNUM]),'#',TRIM([VKORG]))))) AS CustomerID
	--CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([COMPANY],'#',TRIM([CUSTNUM]),'#',TRIM([VKORG])))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',[COMPANY])) AS CompanyID
	,CONCAT([COMPANY],'#',TRIM([CUSTNUM])) AS CustomerCode
	,PartitionKey

	--,CASE WHEN COMPANY = 'SKSSWE' THEN 'JSESKSSW' ELSE COMPANY END AS Company 
	,Company
	,IIF(ISNUMERIC(CUSTNUM) = 1,CAST(CAST(trim(CUSTNUM) AS int)as nvarchar(50)),(trim(CUSTNUM))) AS CustomerNum
	,[dbo].[ProperCase](CustomerName) AS MainCustomerName --add according to taskCard
    ,[dbo].[ProperCase](CustomerName) AS CustomerName -- can be replaced by if there is sub- Customer name
	,[AddressLine1]
	,[AddressLine2]
	,[AddressLine3]
	,[TELEPHONE1] AS TelephoneNum1
	,[TELEPHONE2] AS TelephoneNum2
	,[EMAIL] AS Email
	,[ZIP] AS ZipCode
	,IIF([CITY]= ' ',null,[dbo].[ProperCase]([CITY])) AS [City]
	,IIF([STATE]= ' ',null,[STATE]) AS [State]
	,DISTRICT AS SalesDistrict
	,[dbo].[ProperCase]([COUNTRYNAME]) AS CountryName
	,DIVISION AS Division
	--,'' AS CustomerIndustry
	--,'' AS CustomerSubIndustry
	,[dbo].[ProperCase](TRIM(CONCAT([ADDRESSLINE1],' ','--'))) AS AddressLine
	,CONCAT(TRIM(CountryName), ', ', TRIM(CITY), ', ', TRIM(ZIP), ', ', TRIM(ADDRESSLINE1) ) AS FullAddressLine
	,[dbo].[ProperCase]([CUSTOMERGROUPTEXT]) AS CustomerGroup
	,[dbo].[ProperCase]([CUSTOMERGROUP]) AS CustomerSubGroup
	,[SALESREPCODE] AS SalespersonCode
	,[dbo].[ProperCase]([SALESPERSON]) AS SalesPersonName
	,SALESPERSONRESPONSIBLE AS SalesPersonResponsible
	,TRIM([VATREGNR]) AS VATNum
	--,'' AS OrganizationNum
	,ACCOUNTSTRING AS AccountNum
	,INTERNALEXTERNAL AS InternalExternal
	,[ABCCODE] AS CustomerScore
	,CUSTOMERTYPE AS CustomerType
	,GETDATE() AS ValidFrom
	,DATEADD(year,1,GETDATE()) AS ValidTo
	, INTCA AS CountryCode
FROM 
	[stage].[SKS_FI_Customer]
WHERE 
	VKORG NOT IN ('FI00','SE10')
GO
PRINT N'Creating [stage].[CER_DE_SalesLedger]'
GO
CREATE TABLE [stage].[CER_DE_SalesLedger]
(
[PartitionKey] [nvarchar] (40) NULL,
[Company] [nvarchar] (18) NULL,
[Currency] [nvarchar] (15) NULL,
[CustomerNum] [nvarchar] (25) NULL,
[SalesInvoiceNum] [nvarchar] (30) NULL,
[SalesInvoiceDate] [nvarchar] (40) NULL,
[SalesDueDate] [nvarchar] (40) NULL,
[SalesLastPaymentDate] [nvarchar] (40) NULL,
[InvoiceAmount] [nvarchar] (25) NULL,
[PaidInvoiceAmount] [nvarchar] (25) NULL,
[RemainingInvoiceAmount] [nvarchar] (25) NULL,
[VATAmount] [nvarchar] (25) NULL,
[VATCode] [nvarchar] (50) NULL,
[VATCodeDesc] [nvarchar] (80) NULL,
[ExchangeRate] [nvarchar] (15) NULL,
[IsInvoiceClosed] [nvarchar] (15) NULL
)
GO
PRINT N'Creating [stage].[vCER_DE_SalesLedger]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vCER_DE_SalesLedger]
	AS SELECT 
		
	 CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', CustomerNum, '#', SalesInvoiceNum))) AS SalesLedgerID
	 ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID
	 ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(CustomerNum)))) AS CustomerID

	 ,[PartitionKey]          
	 ,[Company]               
	 ,[Currency]              
	 ,[CustomerNum]           
	 ,[SalesInvoiceNum]       
	 ,[SalesInvoiceDate]      
	 ,[SalesDueDate]          
	 ,[SalesLastPaymentDate]  
	 ,[InvoiceAmount]         
	 ,[PaidInvoiceAmount]     
	 ,[RemainingInvoiceAmount]
	 ,[VATAmount]             
	 ,[VATCode]               
	 ,[VATCodeDesc]           
	 ,[ExchangeRate]          
	 ,[IsInvoiceClosed]       
	
	FROM stage.CER_DE_SalesLedger
GO
PRINT N'Creating [stage].[CER_DK_RLS]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[CER_DK_RLS]
(
[Name] [nvarchar] (200) NULL,
[Email] [nvarchar] (200) NOT NULL,
[All] [smallint] NULL,
[CustomerGroup] [nvarchar] (200) NULL,
[AccountResponsible] [nvarchar] (200) NULL
)
GO
PRINT N'Creating [stage].[vCER_DK_RLS]'
GO





CREATE VIEW [stage].[vCER_DK_RLS] AS

WITH base as (
SELECT UPPER(CONCAT('CDKCERT', '-', TRIM(Email),'-' + CustomerGroup ,'-' + AccountResponsible, '-' + [All])) AS EmailID
	,FORMAT(GETDATE(),'yyyy-MM-dd HH:mm:ss') AS PartitionKey
	,'CDKCERT' AS Company
	,[Email]
	,[Name]
	,COALESCE(CustomerGroup, '') AS CustomerGroup
	,COALESCE(AccountResponsible,'') AS AccountResponsible
	,[All]
FROM [stage].[CER_DK_RLS]
  
)

SELECT 
	EmailID
	,PartitionKey
	,Company
	,[Email]
	,value AS [Name]
	,'Account Responsible'	AS RLSType
	FROM base
	CROSS APPLY STRING_SPLIT(AccountResponsible, ';') 
	Where AccountResponsible <> ''

UNION ALL
SELECT 
	EmailID
	,PartitionKey
	,Company
	,[Email]
	,value AS [Name]
	,'CustomerGroup'	AS RLSType
	FROM base
	CROSS APPLY STRING_SPLIT(CustomerGroup, ';') 
	Where CustomerGroup <> ''

UNION ALL
SELECT 
	EmailID
	,PartitionKey
	,Company
	,[Email]
	,'ALL' AS [Name]
	,'All'	AS RLSType
	FROM base
	Where [All] = 1
GO
PRINT N'Creating [dm_LS].[fctSalesInvoice]'
GO


CREATE VIEW [dm_LS].[fctSalesInvoice] AS

SELECT 
 si.[SalesInvoiceID]
,si.[SalesOrderID]
,si.[SalesOrderNumID]
,si.[CustomerID]
,si.[CompanyID]
,si.[PartID]
,si.[WarehouseID]
,si.[SalesPersonNameID]
,si.[DepartmentID]
,si.[Company]
,si.[SalesInvoiceCode]
,si.[SalesInvoiceDateID]
,si.[ProjectID]
,si.[SalesPersonName]
,si.[CustomerNum]
,si.[PartNum]
,si.[PartType]
,si.[SalesOrderNum]
,si.[SalesOrderLine]
,si.[SalesOrderSubLine]
,si.[SalesOrderType]
,si.[SalesInvoiceNum]
,si.[SalesInvoiceLine]
,si.[SalesInvoiceType]
,si.[SalesInvoiceDate]
,si.[ActualDelivDate]
,si.[SalesInvoiceQty]
,si.[UoM]
,si.[UnitPrice]
,si.[UnitCost]
,si.[DiscountPercent]
,si.[DiscountAmount]
,si.[TotalMiscChrg]
,si.[Currency]
,si.[ExchangeRate]
,si.[VATAmount]
,si.[CreditMemo]
,si.[Department]
,si.[ProjectNum]
,si.[WarehouseCode]
,si.[CostBearerNum]
,si.[CostUnitNum]
,si.[ReturnComment]
,si.[ReturnNum]
,si.[OrderHandler]
,si.[SalesChannel]
,si.[NeedbyDate]
,si.[ExpDelivDate]
,si.[SalesOrderCode]
,si.[SalesOrderDateID]
,si.[SalesOrderDate]
,si.[ConfirmedDelivDate]
,si.[PartStatus]
,si.[AxInterSalesChannel]
,si.[DueDate]
,si.[LastPaymentDate]
,si.[SalesInvoiceStatus]
,si.[CashDiscountOffered]
,si.[CashDiscountUsed]
,si.[IsUpdatingStock]
,si.[SIRes1]
,si.[SIRes2]
,si.[SIRes3]
,si.[SIRes4]
,si.[SIRes5]
,si.[SIRes6]
FROM dm.FactSalesInvoice si
LEFT JOIN dbo.Company com ON si.Company = com.Company
WHERE com.BusinessArea = 'Lifting Solutions' AND com.[Status] = 'Active'

--WHERE Company  in ('AFISCM', 'CDKCERT', 'CEECERT', 'CFICERT', 'CLTCERT', 'CLVCERT', 'CSECERT', 'CUKCERT', 'CNOEHAU', 'CNOCERT', 'CERPL', 'CyESA', 'HFIHAKL', 'TRACLEV'
--			,'MENBE14','MENNL01','MENNL02','MENNL03','MENNL04','MENNL07','MENNL11')  -- LS basket
GO
PRINT N'Creating [stage].[SKS_FI_Claim]'
GO
CREATE TABLE [stage].[SKS_FI_Claim]
(
[PartitionKey] [varchar] (50) NULL,
[MANDT] [nvarchar] (50) NULL,
[QMNUM] [nvarchar] (50) NULL,
[QMART] [nvarchar] (50) NULL,
[QMTXT] [nvarchar] (200) NULL,
[PRIOK] [nvarchar] (50) NULL,
[ERNAM] [nvarchar] (50) NULL,
[ERDAT] [nvarchar] (50) NULL,
[MZEIT] [nvarchar] (50) NULL,
[QMDAT] [nvarchar] (50) NULL,
[STRUR] [nvarchar] (50) NULL,
[MATNR] [nvarchar] (50) NULL,
[MATKL] [nvarchar] (50) NULL,
[PRDHA] [nvarchar] (50) NULL,
[KUNUM] [nvarchar] (50) NULL,
[BEZDT] [nvarchar] (50) NULL,
[BEZUR] [nvarchar] (50) NULL,
[LIFNUM] [nvarchar] (50) NULL,
[VBELN] [nvarchar] (50) NULL,
[BSTNK] [nvarchar] (50) NULL,
[VKORG] [nvarchar] (50) NULL,
[QMGRP] [nvarchar] (50) NULL,
[QMCOD] [nvarchar] (50) NULL,
[ZDESCRIPTION] [nvarchar] (200) NULL,
[ZPARTNER] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vSKS_FI_Claim]'
GO

CREATE VIEW [stage].[vSKS_FI_Claim] AS
WITH CTE AS (
SELECT [PartitionKey], [MANDT], [QMNUM], [QMART], [QMTXT], [PRIOK], [ERNAM], [ERDAT], [MZEIT], [QMDAT], [STRUR], [MATNR], [MATKL], [PRDHA], [KUNUM], [BEZDT], [BEZUR], [LIFNUM], [VBELN], [BSTNK], [VKORG], [QMGRP], [QMCOD], [ZDESCRIPTION], [ZPARTNER]
	,CASE WHEN [VKORG] ='FI20' THEN N'SMKFI'
		WHEN [VKORG] IN ('FI25','FI26') THEN N'SCOFI' 
		ELSE VKORG									END AS Company
FROM [stage].[SKS_FI_Claim]
WHERE VKORG IN ('FI20','FI25','FI26')
)
--ADD TRIM()UPPER() INTO CustomerID,PartID 2022-12-16 VA
SELECT

	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(COMPANY, '#', QMNUM ))) AS ClaimID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(COMPANY, '#', TRIM(IIF(KUNUM IS NULL OR KUNUM = '', 'MISSINGCUSTOMER', KUNUM)), '#', TRIM([VKORG])))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(COMPANY), '#', TRIM(KUNUM), '#', TRIM([VKORG]))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(COMPANY, '#', TRIM(IIF([LIFNUM] IS NULL OR [LIFNUM] = '', 'MISSINGSUPPLIER', [LIFNUM])), '#', TRIM([VKORG])))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(COMPANY, '#', TRIM(IIF([MATNR] IS NULL OR [MATNR] = '', 'MISSINGPART',  [MATNR]) ), '#', TRIM([VKORG])))) AS PartID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(COMPANY), '#', TRIM([MATNR]), '#', TRIM([VKORG]))))) AS PartID 
	,[PartitionKey]
      ,[MANDT]
      ,[QMNUM]	AS ClaimNum
      ,[QMART]	
      ,[QMTXT]	AS ClaimDescription --??
      ,[PRIOK]	AS ClaimPriority
      ,[ERNAM]	AS ClaimHandler
      ,[ERDAT]	AS CreateDate
      ,[MZEIT]	AS CreateTime
      ,[QMDAT]	AS StartDate
      ,[STRUR]	AS StartTime
      ,[MATNR]	AS PartNum
      ,[MATKL]
      ,[PRDHA]
      ,[KUNUM]	AS CustomerNum
      ,[BEZDT]	AS EndDate
      ,[BEZUR]	AS EndTime
      ,[LIFNUM]	AS SupplierNum
      ,[VBELN]	AS SalesOrderNum
      ,[BSTNK]	AS PurchaseOrderNum
      ,[VKORG]
      ,[QMGRP]
      ,[QMCOD]	AS ClaimGroup
      ,[ZDESCRIPTION]
      ,[ZPARTNER]
  FROM CTE
GO
PRINT N'Creating [stage].[CER_SE_StockBalance]'
GO
CREATE TABLE [stage].[CER_SE_StockBalance]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PartNum] [nvarchar] (70) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[FIFOValue] [decimal] (18, 4) NULL,
[StockBalance] [decimal] (18, 4) NULL,
[ReservedQty] [decimal] (18, 4) NULL,
[OptimalOrderQty] [decimal] (18, 4) NULL,
[BackOrderQty] [decimal] (18, 4) NULL,
[QtyOrdered] [decimal] (18, 4) NULL,
[StockTakDiff] [decimal] (18, 4) NULL,
[DelivTimeDesc] [nvarchar] (50) NULL,
[DelivTimeUnit] [int] NULL,
[DelivTimeToWHS] [int] NULL,
[ReOrderLevel] [decimal] (18, 4) NULL,
[DefaultBinNo] [nvarchar] (12) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[StockTakDate] [date] NULL,
[StdCostLaCaD] [date] NULL,
[DelivDateSupplier] [date] NULL,
[DelivDateCust] [date] NULL,
[OrderDateSupplier] [date] NULL,
[BatchNumber] [nvarchar] (50) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[MaxStockQty] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vCER_SE_StockBalance]'
GO
CREATE VIEW [stage].[vCER_SE_StockBalance] AS
--ADD TRIM() INTO Supplier 23-01-23 VA
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM(UPPER([PartNum])),'#',TRIM(UPPER([WarehouseCode]))))) AS ItemWarehouseID
	,CONCAT([Company],'#',TRIM(UPPER([PartNum])),'#',TRIM(UPPER([WarehouseCode]))) AS ItemWarehouseCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM([Company]))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM(UPPER([SupplierNum]))))) AS SupplierID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM(UPPER([PartNum]))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM(UPPER([WarehouseCode]))))) AS WarehouseID
	,[PartitionKey]

	,TRIM(UPPER([WarehouseCode])) AS WarehouseCode
	,TRIM(UPPER(CurrencyCode)) AS Currency
	,[Company]
	,TRIM(UPPER([DefaultBinNo])) AS BinNum
	,TRIM(UPPER(BatchNumber)) AS BatchNum
	,TRIM(UPPER([SupplierNum])) AS [SupplierNum]
	,TRIM(UPPER([PartNum])) AS PartNum
	,[DelivTimeUnit] AS [DelivTime]
	,convert(date, [StockTakDate]) AS LastStockTakeDate
	,convert(date, [StdCostLaCaD]) AS LastStdCostCalDate
	,Null AS SafetyStock
	,MaxStockQty
	,[StockBalance]
	,Null AS StockValue
	,0 AS AvgCost
	,[ReservedQty] AS ReserveQty
	,[BackOrderQty]	AS BackOrderQty
	,[QtyOrdered]	AS OrderQty
	,[StockTakDiff]		AS StockTakeDiff
	,[ReOrderLevel]
	,[OptimalOrderQty]
	--,'' AS SBRes1
	--,'' AS SBRes2
	--,'' AS SBRes3

	--,[FIFOValue]
	--,'' AS [DelivTimeToWHS] -- will not be sent out to new companies, not delete in DW for that use as reservation
	--,'' AS [DelivTimeDesc] -- will not be sent out to new companies, not delete in DW for that use as reservation
	--,'' AS [DaysOnStock]
	--,convert(date, [DelivDateSupplier]) AS DelivDateSupplier
	--,convert(date, [DelivDateCust]) AS DelivDateCust
	--,convert(date, [OrderDateSupplier]) AS OrderDateSupplier
	--,convert(date, '') AS OrderDateCust
	--,'' AS BatchNoPrefix
	--,'' AS BatchNoSuffix
FROM 
	[stage].[CER_SE_StockBalance]
GROUP BY
	PartitionKey, Company, WarehouseCode, CurrencyCode, Company, DefaultBinNo, BatchNumber, SupplierNum, PartNum, DelivTimeUnit, StockTakDate, StdCostLaCaD, MaxStockQty, StockBalance, ReservedQty, BackOrderQty, QtyOrdered, StockTakDiff, ReOrderLevel, OptimalOrderQty
GO
PRINT N'Creating [stage].[WID_EE_SupplierAgreement]'
GO
CREATE TABLE [stage].[WID_EE_SupplierAgreement]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[AgreementCode] [nvarchar] (50) NULL,
[AgreementDescription] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DelivTime] [nvarchar] (10) NULL,
[Currency] [nvarchar] (10) NULL,
[AgreementStart] [date] NULL,
[AgreementEnd] [date] NULL
)
GO
PRINT N'Creating [stage].[vWID_EE_SupplierAgreement]'
GO
CREATE VIEW [stage].[vWID_EE_SupplierAgreement] AS 
--COMMENT EMPTY FIELDS 23-01-12 VA
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]), '#', TRIM(AgreementCode), '#', TRIM([PartNum]), '#', TRIM([SupplierNum]), '#', TRIM([Currency]))))) AS SupplierAgreementID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum))))) AS SupplierID 
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(SupplierNum))))) AS SupplierID  

	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Currency])))) AS CurrencyID --Redundant?
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,AgreementCode
	,AgreementDescription
	,[DiscountPercent]
	,([UnitPrice]) AS [UnitPrice] --MAX
	--,NULL AS AgreementQty
	,UPPER(TRIM([Currency])) AS Currency
	,([DelivTime]) AS [DelivTime] --MAX
	,(AgreementStart) AS AgreementStart
	,AgreementEnd
	--,'' AS [SupplierTerms]
	--,0	AS FulfilledQty
	--,0  AS RemainingQty
	--,''	AS UoM
	--,'' AS  SARes1
	--,'' AS  SARes2
	--,'' AS  SARes3
FROM 
	[stage].[WID_EE_SupplierAgreement]
WHERE  UnitPrice <> 0
GROUP BY [PartitionKey], [Company], AgreementCode, AgreementDescription, PartNum, SupplierNum, [DiscountPercent],  [Currency],  AgreementEnd, [UnitPrice], [DelivTime], AgreementStart
GO
PRINT N'Creating [stage].[JEN_SK_Customer]'
GO
CREATE TABLE [stage].[JEN_SK_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[CustomerName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (50) NULL,
[TelephoneNumber2] [nvarchar] (50) NULL,
[Email] [nvarchar] (100) NULL,
[ABCCode] [nchar] (10) NULL,
[City] [nvarchar] (50) NULL,
[ZIP] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNr] [nvarchar] (20) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (30) NULL,
[CustomerType] [nvarchar] (50) NULL,
[InactiveCustomer] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (10) NULL
)
GO
PRINT N'Creating [stage].[vJEN_SK_Customer]'
GO

CREATE VIEW [stage].[vJEN_SK_Customer] AS
--COMMENT empty fields // ADD UPPER()TRIM() INTO CustomerID 2022-12-14 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID
	--CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(CustomerNum)))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(trim([Company])))) AS CompanyID
	,CONCAT([Company],'#',TRIM([CustomerNum])) AS CustomerCode
	,PartitionKey

	,Company
	,TRIM(CustomerNum) AS CustomerNum
	,[dbo].[ProperCase](CustomerName) AS MainCustomerName --add according to taskCard
    ,[dbo].[ProperCase](CustomerName) AS CustomerName -- can be replaced by if there is sub- Customer name
	,CASE WHEN [AddressLine1] is null OR [AddressLine1] = '' THEN [AddressLine2]  
		ELSE [AddressLine1] END AS [AddressLine1] -- added 20210204 SM
	,[AddressLine2]
	,[AddressLine3]
	,[TelephoneNumber1]	AS [TelephoneNum1]
	,[TelephoneNumber2]	AS [TelephoneNum2]
	,Email
	-- Previous logic
--	,CASE WHEN countryname like 'Sweden' AND LEFT(AddressLine3, 1) IN ('1','2','3','4','5','6','7','8','9')	THEN substring(replace([dbo].[ProperCase](AddressLine3), ' ', ''), 1,5) ELSE null end AS ZipCode
	,TRIM(SUBSTRING(AddressLine3, 1, PATINDEX('%[ ][A-ZÅÄÖ]%',AddressLine3)))	AS [ZipCode]
	--,CASE WHEN [City] = ' '	AND LEFT(AddressLine3, 1) IN ('1','2','3','4','5','6','7','8','9') THEN trim(substring(replace([dbo].[ProperCase](AddressLine3),' ',		''), 6, 100)) ELSE [dbo].[ProperCase]([City]) end AS [City]
	,[dbo].[ProperCase](TRIM(SUBSTRING(AddressLine3,PATINDEX('%[ ][A-ZÅÄÖ]%',AddressLine3 ) + 1, 100)))		AS [City]
	,IIF([State]= ' ',null,[State]) AS [State]
	,[District]	AS SalesDistrict
	,[dbo].[ProperCase](CountryName) AS CountryName
	,InactiveCustomer AS Division		--Added InactiveCustomer here because Division is unused field for JENS S.
	--,'' AS CustomerIndustry
	--,'' AS CustomerSubIndustry
	,[dbo].[ProperCase](TRIM(CONCAT (addressline1+' '+ addressline2, null))) AS AddressLine
	,CONCAT(Countryname, +','+
		--CASE WHEN countryname like 'Sweden'	AND LEFT(AddressLine3, 1) IN ('1','2','3','4','5','6','7','8','9')
		--THEN trim(substring(REPLACE([dbo].[ProperCase](AddressLine3),' ', ''), 6, 100)) ELSE null end	+','+
		[dbo].[ProperCase](TRIM(SUBSTRING(AddressLine3,PATINDEX('%[ ][A-ZÅÄÖ]%',AddressLine3 ) + 1, 100))) +','+
		--CASE WHEN countryname like 'Sweden'	AND LEFT(AddressLine3, 1) IN ('1','2','3','4','5','6','7','8','9')
		--THEN substring(replace([dbo].[ProperCase](AddressLine3), ' ', ''), 1,5) ELSE null end	+','+
		TRIM(SUBSTRING(AddressLine3, 1, PATINDEX('%[ ][A-ZÅÄÖ]%',AddressLine3))) +','+
		[dbo].[ProperCase](TRIM(CONCAT (addressline1+' '+ addressline2, null)))) AS FullAddressLine
	,[dbo].[ProperCase](CustomerGroup) AS CustomerGroup
	,[dbo].[ProperCase](CustomerGroup) AS CustomerSubGroup	
	,[SalesRepCode]		AS SalesPersonCode
	,[dbo].[ProperCase](SalesPersonName) AS SalesPersonName
	--,'' AS [SalesPersonResponsible]
	,[VATRegNr]		AS VATNum
	--,'' AS OrganizationNum
	,[AccountString]	AS AccountNum
	,[InternalExternal]
	,[ABCCode] AS CustomerScore
	,CustomerType
	,GETDATE() AS ValidFrom
	,DATEADD(year,1,GETDATE()) AS ValidTo
	,CountryCode
FROM [stage].[JEN_SK_Customer]
WHERE CustomerNum NOT LIKE 'INTR%' -- SM added according to validtion feedback 2021-02-09
GO
PRINT N'Creating [stage].[AXL_SF_SalesLedger]'
GO
CREATE TABLE [stage].[AXL_SF_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceAmount] [decimal] (18, 4) NULL,
[RemainAmount] [decimal] (18, 4) NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vAXL_SF_SalesLedger]'
GO
CREATE VIEW [stage].[vAXL_SF_SalesLedger] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(sl.Company, '#', TRIM(sl.CustNum), '#', TRIM(sl.InvoiceNum))))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(sl.Company))) AS CompanyID
	,UPPER(CONCAT(sl.Company, '#', TRIM(sl.CustNum), '#', TRIM(sl.InvoiceNum))) AS SalesLedgerCode
	,sl.PartitionKey

	,UPPER(sl.Company) AS Company
	,UPPER(TRIM(sl.CustNum)) AS CustomerNum
	,TRIM(sl.InvoiceNum) AS [SalesInvoiceNum]
	,IIF(so.InvoiceDate = '' OR so.InvoiceDate IS NULL, '1900-01-01', so.InvoiceDate) AS [SalesInvoiceDate] --
	,CONVERT(date, DueDate) AS SalesDueDate
	,CONVERT(date, LastPaymentDate) AS LastPaymentDate
	,[InvoiceAmount]
	,[RemainAmount] AS [RemainingInvoiceAmount]
	,NULL AS CashDiscOffered
	,NULL AS CashDiscUsed
	,NULL AS [ExchangeRate]
	,NULL AS [Currency]
	,NULL AS [VATAmount]
	,NULL AS [VATCode]
	,NULL AS [PayToName]
	,NULL AS [PayToCity]
	,NULL AS [PayToContact]
	,NULL AS [PaymentTerms]
	,sl.Res1 AS SLRes1
	,sl.Res2 AS SLRes2
	,sl.Res3 AS SLRes3
FROM stage.AXL_SF_SalesLedger sl
	LEFT JOIN stage.AXL_CZ_SOLine so ON TRIM(sl.InvoiceNum) = TRIM(so.InvoiceNum)
WHERE DueDate > '2015-01-01'
GROUP BY
	sl.PartitionKey, sl.Company, sl.CustNum, sl.InvoiceNum, sl.Res2, sl.Res1, sl.Res3, sl.[InvoiceAmount], sl.[RemainAmount], so.InvoiceDate, DueDate, LastPaymentDate
GO
PRINT N'Creating [stage].[AXL_SE_OLine]'
GO
CREATE TABLE [stage].[AXL_SE_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[NeedbyDate] [date] NULL,
[ExpDelivDate] [date] NULL,
[EDCExpDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (10) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[SalesPerson] [nvarchar] (50) NULL,
[WareHouseCode] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[BusinessChain] [nvarchar] (50) NULL,
[SalesOrderCategory] [nvarchar] (100) NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL,
[PartDesc] [nvarchar] (max) NULL,
[APV_Cost_EUR] [nvarchar] (50) NULL,
[APV_Item] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXL_SE_OLine]'
GO

CREATE VIEW [stage].[vAXL_SE_OLine] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(PartDesc))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum), '#', (IIF(TRIM([PartNum]) LIKE 'IACO%' , 'MISC. CHARGES', TRIM(PartDesc) )) )))) AS PartID
	,CONVERT(int, replace(convert(date, OrderDate), '-', '')) AS SalesOrderDateID
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine))) AS SalesOrderCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(CustNum) AS CustomerNum 
	,TRIM(OrderNum) AS [SalesOrderNum]
	,TRIM(OrderLine) AS [SalesOrderLine]
	,TRIM(OrderSubLine) AS [SalesOrderSubLine]
	,CONVERT(nvarchar(50), TRIM(OrderType)) AS [SalesOrderType]
	,TRIM([SalesOrderCategory]) AS [SalesOrderCategory]
	,OrderDate AS [SalesOrderDate]
	,NeedbyDate
	,ExpDelivDate AS [ExpDelivDate]
	,EDCExpDelivDate
	,ActualDelivDate
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,OrderQty AS [SalesOrderQty]
	,DelivQty
	,RemainingQty
	,Unit AS [UoM]
	,UnitPrice
	,UnitCost
	,LEFT(TRIM(Currency), 3) AS Currency
	,ExchangeRate
	,LEFT(TRIM(OpenRelease), 1) AS OpenRelease
	,DiscountAmount
	,DiscountPercent
	,NULL AS CashDiscOffered
	,NULL AS CashDiscUsed
	,TRIM(PartNum) AS PartNum
	,UPPER(PartDesc) AS PartDesc
	,'' AS [PartType]
	,CONVERT(nvarchar(50), PartStatus) AS PartStatus
	,TRIM(SalesPerson) AS [SalesPersonName]
	,TRIM(WareHouseCode) AS WarehouseCode
	,'' AS IndexKey
	,TRIM(SalesChannel) AS SalesChannel
	,TRIM(BusinessChain) AS [Department]
	,Res3 AS [ProjectNum] -- = FreeOfCharge: Y = yes, N = no
	,'' AS Cancellation
	,Res1 AS SORes1
	,Res2 AS SORes2
	,Res3 AS SORes3
FROM stage.AXL_SE_OLine
WHERE OrderDate >= '2015-01-01'
GO
PRINT N'Creating [dm_LS].[fctFinanceOpeningBalance]'
GO


/****** Script for SelectTopNRows command from SSMS  ******/
CREATE VIEW [dm_LS].[fctFinanceOpeningBalance] AS
SELECT  [OpenBalanceID]
,[AccountID]
,[CostUnitID]
,[CostBearerID]
,[ProjectID]
,[CompanyID]
,[PartitionKey]
,[Company]
,[AccountNum]
,[CostUnitNum]
,[CostBearerNum]
,[ProjectNum]
,[JournalType]
,[JournalDate]
,[Description]
,[OpeningBalance]
,[AccountingDate]
  FROM [dm].[FactFinanceOpeningBalance]
 WHERE Company IN ('CNOCERT')
GO
PRINT N'Creating [stage].[JEN_NO_OLine]'
GO
CREATE TABLE [stage].[JEN_NO_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderRelNum] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[ERPOrderStatus] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[NeedbyDate] [date] NULL,
[DelivDate] [date] NULL,
[ConfirmedDelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[SumUnitCost] [decimal] (18, 4) NULL,
[SumUnitPrice] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[CurrExchRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (1) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[Site] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[SalesPerson] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (500) NULL,
[SalesReturnOrderNum] [nvarchar] (50) NULL,
[SalesReturnInvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vJEN_NO_OLine]'
GO

CREATE VIEW [stage].[vJEN_NO_OLine] AS
--COMMENT EMPTY FIELDS // ADD UPPER()TRIM() INTO WarehouseID,PartID,CustomerID 2022-12-22 VA
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',OrderNum,'#',OrderLine,'#',OrderSubLine,'#',OrderRelNum,'#',InvoiceNum,'#',SalesReturnOrderNum,'#',SalesReturnInvoiceNum))) AS SalesOrderID -- ext OrderRelNum
	,CONVERT([binary](32),HASHBYTES('SHA2_256',Company)) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) )))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID 
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) )))) AS PartID 
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(WarehouseCode))))) AS WarehouseID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(WarehouseCode)))) AS WarehouseID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(OrderNum)))) AS SalesOrderNumID
	,CONCAT(Company,'#',OrderNum,'#',OrderLine,'#',OrderSubLine, '#',InvoiceNum) AS SalesOrderCode
	,CONVERT(int, replace(convert(date, OrderDate),'-','')) AS SalesOrderDateID   --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey 

	,Company 
	,TRIM(CustNum) AS CustomerNum 
	,OrderNum		AS SalesOrderNum
	,OrderLine		AS SalesOrderLine
	,OrderSubLine	AS SalesOrderSubLine
	,OrderType		AS SalesOrderType
	,ERPOrderStatus	AS SalesOrderCategory	--Added ERPOrderStatus here because SalesOrderCategory is unused field for JENS S.
	,OrderRelNum	AS SalesOrderRelNum
	,OrderDate		AS SalesOrderDate
	,NeedbyDate
	,DelivDate		AS ExpDelivDate
	,CAST('1900-01-01' AS date) AS ActualDelivDate
	,ConfirmedDelivDate
	,InvoiceNum		AS SalesInvoiceNum
	,OrderQty		AS SalesOrderQty
	,DelivQty
	,RemainingQty
	--,NULL AS SalesInvoiceQty
	--,''				AS UoM
	,UnitPrice
	,UnitCost
	,SumUnitPrice
	,SumUnitCost
	,CurrencyCode	AS Currency
	,CurrExchRate	AS ExchangeRate
	,OpenRelease
	,DiscountAmount
	,DiscountPercent
	,TRIM(PartNum) AS PartNum
	--,''				AS PartType
	--,'0'				AS PartStatus
	,SalesPerson	AS SalesPersonName
	,TRIM(WarehouseCode) AS WarehouseCode
	--,'' AS SalesChannel
	,'Normal Order Handling' AS AxInterSalesChannel
	--,'' AS Department
	--,'' AS ProjectNum
	--,'' AS IndexKey
	--,'0' AS Cancellation
	--,'' AS SORes1
	--,'' AS SORes2
	--,'' AS SORes3
	,ReturnComment
	,SalesReturnOrderNum
	,SalesReturnInvoiceNum
	--,NULL AS [TotalMiscChrg]
FROM stage.JEN_NO_OLine
GO
PRINT N'Creating [stage].[SKS_FI_SOLine]'
GO
CREATE TABLE [stage].[SKS_FI_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[MANDT] [nvarchar] (3) NOT NULL,
[COMPANY] [nvarchar] (8) NOT NULL,
[INVOICENUM] [nvarchar] (50) NULL,
[INVOICELINE] [nvarchar] (50) NULL,
[FKART] [nvarchar] (4) NULL,
[INVOICETYPE] [nvarchar] (5) NULL,
[VBTYP] [nvarchar] (1) NULL,
[VKORG] [nvarchar] (4) NULL,
[CUSTNUM] [nvarchar] (50) NULL,
[INVOICEDATE] [nvarchar] (8) NULL,
[ERNAM] [nvarchar] (12) NULL,
[SALESPERSON] [nvarchar] (50) NULL,
[PARTNUM] [nvarchar] (50) NULL,
[ARKTX] [nvarchar] (40) NULL,
[MATKL] [nvarchar] (50) NULL,
[ORDERNUM] [nvarchar] (50) NULL,
[SELLINGSHIPQTY] [decimal] (18, 3) NULL,
[UNITPRICE] [decimal] (18, 4) NULL,
[CURRENCY] [nvarchar] (5) NULL,
[UNITCOST] [decimal] (18, 4) NULL,
[WAREHOUSECODE] [nvarchar] (50) NULL,
[DISCOUNTAMOUNT] [decimal] (18, 4) NULL,
[ACTUALDELIVERYDATE] [nvarchar] (8) NULL,
[VRKME] [nvarchar] (3) NULL,
[ORDERLINE] [nvarchar] (50) NULL,
[ORDERSUBLINE] [nvarchar] (50) NULL,
[ORDERREL] [nvarchar] (50) NULL,
[CREDITMEMO] [nvarchar] (50) NULL,
[KNUMV] [nvarchar] (10) NULL,
[DUEDATE] [nvarchar] (8) NULL,
[LASTPAYMENTDATE] [nvarchar] (8) NULL,
[ZTERM] [nvarchar] (4) NULL,
[ORDERTYPE] [nvarchar] (5) NULL,
[SITE] [nvarchar] (50) NULL,
[INDEXKEY] [nvarchar] (50) NULL,
[FAREG] [nvarchar] (50) NULL,
[EXCHANGERATE] [decimal] (18, 4) NULL,
[MINORDERVALUEFEE] [decimal] (18, 4) NULL,
[FREIGHTINSURANCE] [decimal] (18, 4) NULL,
[PROJECTNUM] [nvarchar] (50) NULL,
[WBS_ELEMENT] [nvarchar] (50) NULL,
[SALESPERSONINVOICE] [nvarchar] (50) NULL,
[SALESPERSONORDER] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vSKS_FI_SOLine]'
GO
CREATE VIEW [stage].[vSKS_FI_SOLine] AS
--COMMENT EMPTY FIELDS // ADD UPPER() TRIM() INTO PartID,CustomerID,WarehouseID 2022-12-16 VA
WITH prepayUnitCost AS (
	SELECT ORDERNUM, ORDERLINE, INVOICENUM, UNITCOST from [stage].[SKS_FI_SOLine] WHERE unitprice !=0 and FAREG = '3' --AND ORDERNUM = '0000318063'
)
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(VKORG, '#', COMPANY, '#', TRIM(s.ORDERNUM), '#', TRIM(s.INVOICELINE), '#', TRIM(PARTNUM), '#', TRIM(s.INVOICENUM)))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(COMPANY, '#', s.ORDERNUM, '#', s.ORDERLINE, '#', ORDERREL, '#', s.INVOICENUM, '#', VKORG))) AS SalesOrderID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(COMPANY, '#', CUSTNUM, '#', INVOICENUM, '#', MANDT, '#', VKORG))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(COMPANY, '#', trim(CUSTNUM), '#', trim(s.INVOICENUM), '#', trim(MANDT), '#', trim(VKORG)))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(COMPANY, '#', TRIM(s.ORDERNUM)))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', COMPANY)) AS CompanyID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(COMPANY, '#', TRIM(CUSTNUM), '#', TRIM([VKORG])))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(COMPANY),'#',TRIM(CUSTNUM),'#',TRIM(VKORG))))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(COMPANY),'#',TRIM(PARTNUM),'#',TRIM(VKORG))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(COMPANY, '#', PARTNUM, '#', VKORG))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(COMPANY), '#', TRIM(WAREHOUSECODE))))) AS WarehouseID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(COMPANY, '#', WAREHOUSECODE))) AS WarehouseID
	,CONCAT(COMPANY, '#', s.ORDERNUM, '#', s.ORDERLINE, '#', s.INVOICENUM) AS SalesOrderCode
	,CONVERT(int, INVOICEDATE) AS SalesInvoiceDateID  
	,CONCAT(Company, '#', TRIM(s.INVOICENUM), '#', TRIM(s.INVOICELINE)) AS SalesInvoiceCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT( Company, '#', PROJECTNUM) )) AS ProjectID
	,PartitionKey

	--,CASE WHEN COMPANY = 'SKSSWE' THEN 'JSESKSSW' ELSE COMPANY END AS Company
	,Company
    ,SALESPERSONORDER AS SalesPersonName -- was SALESPERSON before Fredrik made change on 20210515. /DZ
    ,IIF(ISNUMERIC([CUSTNUM]) = 1,CAST(CAST(trim([CUSTNUM]) AS int)as nvarchar(50)),(trim([CUSTNUM]))) AS [CustomerNum]
	,IIF(ISNUMERIC([PARTNUM]) = 1,CAST(CAST(trim([PARTNUM]) AS int)as nvarchar(50)),(trim([PARTNUM]))) AS [PartNum]
	,CASE WHEN MATKL = 'ZCONS' THEN 'Consumables'
		WHEN MATKL = 'ZDIEN' THEN 'Service'
		WHEN MATKL = 'ZDIEN_FRE' THEN 'Freight'
		WHEN MATKL = 'ZFERT' THEN 'Finished materials'
		WHEN MATKL = 'ZHALB' THEN 'Semifinished matr.'
		WHEN MATKL = 'ZHAWA' THEN 'Trading goods'
		WHEN MATKL = 'ZROH' THEN 'Raw materials'
		WHEN MATKL = 'ZVERP' THEN 'Packaging material'
		WHEN MATKL = 'ZZMAT' THEN 'SKS Config. material'
		END AS PartType
    ,TRIM(s.ORDERNUM) AS SalesOrderNum
    ,s.ORDERLINE AS SalesOrderLine
	,ORDERSUBLINE AS SalesOrderSubLine
	,CASE WHEN ORDERTYPE = 'G2' THEN 1 
		WHEN ORDERTYPE = 'L2' THEN 2
		WHEN ORDERTYPE = 'RE' THEN 3
		WHEN ORDERTYPE = 'SO' THEN 4
		WHEN ORDERTYPE = 'TA' THEN 5
		WHEN ORDERTYPE = 'YBFD' THEN 6
		WHEN ORDERTYPE = 'ZAO' THEN 7
		WHEN ORDERTYPE = 'ZCOD' THEN 8
		WHEN ORDERTYPE = 'ZDP' THEN 9
		WHEN ORDERTYPE = 'ZPO1' THEN 10
		WHEN ORDERTYPE = 'ZPO3' THEN 11
		WHEN ORDERTYPE = 'ZSOI' THEN 12
		WHEN ORDERTYPE = 'ZSV' THEN 13
		WHEN ORDERTYPE = 'ZSVD' THEN 14
		WHEN ORDERTYPE = 'ZSVW' THEN 15
		WHEN ORDERTYPE = 'ZWA' THEN 16
		ELSE 0 END AS SalesOrderType  -- all ORDERTYPE = 0 before 20210106
    ,s.INVOICENUM AS SalesInvoiceNum
    ,s.INVOICELINE AS SalesInvoiceLine
	--,INVOICETYPE AS SalesInvoiceType -- A, B, C, D ... This is actually BillingCategory
	,FKART AS SalesInvoiceType -- FKART = Billing type: F2 = invoice; RE = return; 
	,CASE WHEN [INVOICEDATE] = '00000000' THEN CAST('19010101' AS Date) ELSE CAST([INVOICEDATE] AS Date) END AS SalesInvoiceDate
	,CASE WHEN [ACTUALDELIVERYDATE] = '00000000' THEN CAST('19010101' AS Date) ELSE CAST([ACTUALDELIVERYDATE] AS Date) END AS ActualDelivDate --ACTUALDELIVERYDATE AS ActualDeliveryDate
    ,iif(ORDERTYPE IN ('RE','G2'), -1*abs(SELLINGSHIPQTY), SELLINGSHIPQTY)  AS SalesInvoiceQty --SELLINGSHIPQTY
	--,'' AS UoM
    ,UNITPRICE AS UnitPrice 
    ,IIF(s.UNITCOST = 0, p.UnitCost, s.UNITCOST) AS UnitCost 
	--,NULL AS DiscountPercent
    ,IIF(ORDERTYPE IN ('RE','G2'), -1*(-DISCOUNTAMOUNT), -DISCOUNTAMOUNT) AS DiscountAmount -- see ticket 85180 /DZ
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
-- updated according to Fredrik Nybergs 210102 epsot on 20210106. logic from Katri Hopeakoski 2020-11-27 email. 
-- MinOrdeValueFee is always [MINORDERVALUEFEE] (such as 8.5€) per order, not per quantity
-- Freight insurance is [FREIGHTINSURANCE] (such as 0,5%) of the total netvalue of the components and devided by the ordered quantity
--	,CASE WHEN [SELLINGSHIPQTY] = 0 THEN [MINORDERVALUEFEE] ELSE ([MINORDERVALUEFEE] + ([UNITPRICE]*[FREIGHTINSURANCE]/[SELLINGSHIPQTY])) END AS TotalMiscChrg
	,0 AS TotalMiscChrg --MINORDERVALUEFEE
	--,0 AS VATAmount
	,Currency
	,ExchangeRate
	,CREDITMEMO AS CreditMemo
	,CASE WHEN SALESPERSONORDER = 'PIUser' AND TRIM(CUSTNUM) = '0000167742' THEN 'EDI'
		ELSE 'Normal Order Handling' END AS SalesChannel
	,VBTYP AS Department
	,WAREHOUSECODE AS WarehouseCode
	--,NULL AS DeliveryAddress
    --,'' AS CostBearerNum
	--,'' AS CostUnitNum
	--,'' AS ReturnComment
	--,'' AS ReturnNum
	,PROJECTNUM AS ProjectNum
	,'' AS IndexKey -- temp use IndexKey for [PROJECTNUM]
	,FKART AS SIRes1	
	,SALESPERSONINVOICE AS SIRes2	-- added Fredrik  on 20210515. /DZ
	,WBS_ELEMENT AS SIRes3 /*CASE WHEN MATKL = 'ZCONS' THEN 'Consumables'
		WHEN MATKL = 'ZDIEN' THEN 'Service'
		WHEN MATKL = 'ZDIEN_FRE' THEN 'Freight'
		WHEN MATKL = 'ZFERT' THEN 'Finished materials'
		WHEN MATKL = 'ZHALB' THEN 'Semifinished matr.'
		WHEN MATKL = 'ZHAWA' THEN 'Trading goods'
		WHEN MATKL = 'ZROH' THEN 'Raw materials'
		WHEN MATKL = 'ZVERP' THEN 'Packaging material'
		WHEN MATKL = 'ZZMAT' THEN 'SKS Config. material'
		END AS SIRes3 */	-- Items type, such as Packaging material, Trading goods ...    -- Should be removed here and moved to Part table. ET 20210302
FROM [stage].[SKS_FI_SOLine] s
	 LEFT JOIN prepayUnitCost p ON s.ORDERNUM = p.ORDERNUM AND s.ORDERLINE = p.ORDERLINE AND s.INVOICENUM = p.INVOICENUM --AND s.INVOICELINE = p.INVOICELINE
WHERE FAREG <> '3' AND FKART NOT IN ('F5', 'F8', 'FAZ', 'ZFAZ') AND VBTYP != 'N' -- ticket #INC-116078
		AND VKORG NOT IN ('FI00','SE10')-- 3 = prepayment, it is called Billing Rule -- Not including some sales invoice typ (FKART) at request of Katri 2021-05-05
GO
PRINT N'Creating [stage].[SCM_FI_PurchaseLedger]'
GO
CREATE TABLE [stage].[SCM_FI_PurchaseLedger]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierCode] [nvarchar] (50) NOT NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[InvoiceLCYAmount] [decimal] (18, 4) NOT NULL,
[InvoiceCurrAmount] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (10) NULL,
[VATPaid] [decimal] (18, 4) NULL,
[VATcode] [nvarchar] (10) NULL,
[PayToName] [nvarchar] (50) NULL,
[PayToCity] [nvarchar] (50) NULL,
[PayToContact] [nvarchar] (50) NULL,
[PaymentTermsCode] [nvarchar] (50) NULL,
[PrepaymentNum] [nvarchar] (50) NULL,
[LastPaymentNum] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vSCM_FI_PurchaseLedger]'
GO
CREATE VIEW [stage].[vSCM_FI_PurchaseLedger] AS 
--ADD TRIM() UPPER() INTO SupplierID 23-01-24 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(PurchaseInvoiceNum), '#', TRIM(PurchaseOrderNum), '#', TRIM(LastPaymentNum)))) AS PurchaseLedgerID
	,CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(PurchaseInvoiceNum)) AS PurchaseLedgerCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierCode))))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(SupplierCode)))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(PurchaseInvoiceNum)))) AS PurchaseInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(PurchaseOrderNum)))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM(CurrencyCode))) AS CurrencyID
	,CONVERT(int, replace(convert(date,InvoiceDate), '-', '')) AS PurchaseInvoiceDateID 
	,[PartitionKey]

	,[Company]
	,[SupplierCode] AS SupplierNum
	,[PurchaseOrderNum]
	,[PurchaseInvoiceNum]
	,CONVERT(date, [InvoiceDate]) AS [PurchaseInvoiceDate]
	,CONVERT(date, [DueDate]) AS PurchaseDueDate
	,CONVERT(date, [LastPaymentDate]) AS PurchaseLastPaymentDate
	,[InvoiceLCYAmount] AS [InvoiceAmount]
	,[ExchangeRate]
	,[CurrencyCode] AS [Currency]
--	,[InvoiceCurrAmount]
--	,IIF([InvoiceCurrAmount]=0, null, [InvoiceLCYAmount]/[InvoiceCurrAmount]) AS ExchangeRate
	,[VATPaid] AS [VATAmount]
	,[VATcode]
	,[PayToName]
	,[PayToCity]
	,MAX([PayToContact]) AS PayToContact
	,[PaymentTermsCode] AS [PaymentTerms]
	,[PrepaymentNum]
	,LastPaymentNum
	,'' AS PLRES1
	,'' AS PLRES2
	,'' AS PLRES3
	,NULL AS PaidInvoiceAmount
	,NULL AS RemainingInvoiceAmount
	,NULL AS LinkToOriginalInvoice
	,CAST ('1900-01-01'AS date) AS AccountingDate
	,NULL AS AgingPeriod
	,NULL AS AgingSort
	,NULL AS VATCodeDesc
FROM 
	[stage].[SCM_FI_PurchaseLedger]
WHERE [Company] = 'AFISCM'

GROUP BY
	[Company],[SupplierCode],[PurchaseInvoiceNum],[PurchaseOrderNum],InvoiceDate,DueDate,LastPaymentDate,[InvoiceLCYAmount],[InvoiceCurrAmount],[ExchangeRate],[CurrencyCode],[VATPaid],[VATcode],[PayToName],[PayToCity],[PaymentTermsCode],[PrepaymentNum],LastPaymentNum,[PartitionKey]
GO
PRINT N'Creating [stage].[JEN_NO_Supplier]'
GO
CREATE TABLE [stage].[JEN_NO_Supplier]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[Name] [nvarchar] (100) NULL,
[CustomerCode] [nvarchar] (50) NULL,
[Addressline1] [nvarchar] (50) NULL,
[Addressline2] [nvarchar] (50) NULL,
[Addressline3] [nvarchar] (50) NULL,
[City] [nvarchar] (50) NULL,
[ZIP] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[Region] [nvarchar] (50) NULL,
[SupplierCategory] [nvarchar] (50) NULL,
[Reference] [nvarchar] (50) NULL,
[BankAccountNum] [nvarchar] (50) NULL,
[VATNum] [nvarchar] (50) NULL,
[ABCCode] [nvarchar] (50) NULL,
[TelephoneNum] [nvarchar] (50) NULL,
[Email] [nvarchar] (100) NULL,
[CodeOfConduct] [nvarchar] (500) NULL,
[MinOrderQty] [nvarchar] (50) NULL,
[InternalName] [nvarchar] (100) NULL,
[CountryCode] [nvarchar] (10) NULL
)
GO
PRINT N'Creating [stage].[vJEN_NO_Supplier]'
GO
CREATE view [stage].[vJEN_NO_Supplier] AS
--ADD TRIM() INTO SupplierID 23-01-24 
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([SupplierNum]))))) AS SupplierID
	--CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company], '#', TRIM([SupplierNum]))))) AS SupplierID
    ,UPPER(CONCAT([Company], '#', TRIM([SupplierNum]))) AS SupplierCode 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Company])))) AS CompanyID
	,[PartitionKey]

	,TRIM(UPPER([Company])) AS Company
	,TRIM(UPPER([SupplierNum])) AS [SupplierNum]
	,TRIM([Name]) AS MainSupplierName
	,[dbo].[ProperCase]([Name]) AS SupplierName
	,TRIM([AddressLine1]) AS [AddressLine1]
    ,TRIM([AddressLine2]) AS [AddressLine2]
    ,TRIM([AddressLine3]) AS [AddressLine3]
	,TRIM([TelephoneNum]) AS [TelephoneNum]
	,TRIM([Email]) AS [Email]
	,[dbo].[udf_GetNumeric]([Addressline3]) AS ZipCode
	,trim(substring(replace([dbo].[ProperCase](AddressLine3),' ', ''), 6, 100))  AS [City]
	--,'' AS [District]
	,case when len(TRIM(supplier.CountryCode)) = 3 then cc.[Alpha-2 code]
	else isnull(nullif(TRIM(supplier.CountryCode),''),'NO')
	end AS CountryCode
	,[dbo].[ProperCase](supplier.[CountryName]) AS CountryName
	,TRIM([Region]) AS [Region]
	,TRIM([SupplierCategory]) AS [SupplierCategory]
	,TRIM([Reference]) AS [SupplierResponsible]
	,[dbo].[ProperCase](TRIM(concat (addressline1+' '+ addressline2, null))) AS AddressLine
	,[dbo].[ProperCase](TRIM(concat_ws(',', coalesce([dbo].[ProperCase](supplier.CountryName),null), IIF(City= ' ',null,trim(substring(replace([dbo].[ProperCase](AddressLine3),' ', ''), 6, 100))), IIF(ZIP= ' ', null, [dbo].[udf_GetNumeric]([Addressline3]))
	,coalesce(IIF([addressline1]= ' ',null,[addressline1]),IIF([addressline2]= ' ',null,[addressline2]))
	,coalesce(IIF([addressline2]= ' ',null,[addressline2]),IIF([addressline3]= ' ',null,[addressline3]))))) AS FullAddressLine
	--,'' AS [AccountNum] 
	,TRIM([VATNum]) AS [VATNum]
	--,'' AS OrganizationNum
	,TRIM([InternalName]) AS [InternalExternal]
	,TRIM([CodeOfConduct]) AS [CodeOfConduct]
	,TRIM([CustomerCode]) AS CustomerNum
	,TRIM([ABCCode]) AS [SupplierScore]
	,NULL AS [MinOrderQty] --CONVERT(decimal(18,4), [MinOrderQty])
	,NULL AS [MinOrderValue]
	--,'' AS [Website]
	--,'' AS [Comments]
	--,'' AS SRes1
	--,'' AS SRes2
	--,'' AS SRes3

FROM [stage].[JEN_NO_Supplier] as supplier
	LEFT JOIN dbo.CountryCodes as cc
		on supplier.CountryCode = cc.[Alpha-3 code]
GO
PRINT N'Creating [stage].[WID_FI_SalesOrderLog]'
GO
CREATE TABLE [stage].[WID_FI_SalesOrderLog]
(
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[DelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (50) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[NeedbyDate] [date] NULL,
[SalesPerson] [nvarchar] (100) NULL,
[ReturnComment] [nvarchar] (500) NULL,
[SalesReturnInvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[CancellationCode] [nvarchar] (50) NULL,
[IndexKey] [nvarchar] (50) NULL,
[PartitionKey] [varchar] (50) NULL,
[TransactionDate] [date] NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[LocalCurrency] [nvarchar] (50) NULL,
[OriginalCurrency] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vWID_FI_SalesOrderLog]'
GO
CREATE VIEW [stage].[vWID_FI_SalesOrderLog] As
--COMMENT EMPTY FIELDS // ADD UPPER()TRIM() PartID 2022-12-15 VA
SELECT 	
	  CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', IndexKey)))) AS SalesOrderLogID
	  ,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM(Company))) AS CompanyID
	  ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	  --,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	  ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	  --,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(UPPER(PartNum))))) AS PartID
	  ,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	  --,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(UPPER(WarehouseCode))))) AS WarehouseID
	  --,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(UPPER(PartNum)))) AS SalesOrderCode 
	  ,CONVERT(int, replace(convert(date, OrderDate),'-','')) AS SalesOrderDateID   --redundent
	  ,PartitionKey

	  ,[Company]
      ,[CustNum]	AS CustomerNum
      ,[OrderNum]	AS SalesOrderNum
      ,[OrderLine]	AS SalesOrderLine
      ,[OrderSubLine]	AS SalesOrderSubLine
      ,[OrderType]		AS SalesOrderType
      ,[OrderDate]		AS SalesOrderDate
	  ,[TransactionDate]	AS SalesOrderLogDate
	  --,'' AS SalesOrderLogType
--      ,[DelivDate]		AS ExpDelivDate
      ,[InvoiceNum]		AS SalesInvoiceNum
      ,[OrderQty]		AS SalesOrderQty
--		,RemainingQty AS RemainingQty
--	  ,DelivQty AS DelivQty
	  --,''				AS UoM
      ,[UnitPrice]
      ,[UnitCost]
      ,LocalCurrency AS [Currency]
--	  ,OriginalCurrency
      ,[ExchangeRate]	AS ExchangeRate
      ,[OpenRelease]
      ,[DiscountPercent]
      ,[DiscountAmount]
      ,[PartNum]
	  ,IIF(OrderSubLine = '000000', 'Main', 'Sub' ) AS PartType
--      ,[NeedbyDate]
      ,[SalesPerson]	AS SalesPersonName
	  --,''				AS Department
      ,[ReturnComment]
      ,[SalesReturnInvoiceNum]
      ,[WarehouseCode]
      ,[CancellationCode]
      ,[IndexKey]
	  --,'' AS SORes1
	  --,'' AS SORes2
	  --,'' AS SORes3
	  
  FROM [stage].[WID_fi_SalesOrderLog]
GO
PRINT N'Creating [stage].[JEN_SE_SOLine]'
GO
CREATE TABLE [stage].[JEN_SE_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderRel] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (100) NULL,
[PartNum] [nvarchar] (50) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Indexkey] [nvarchar] (50) NULL,
[Site] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[UnitPriceOCY] [decimal] (18, 4) NULL,
[UnitCostOCY] [decimal] (18, 4) NULL,
[DiscountAmountOCY] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vJEN_SE_SOLine]'
GO

CREATE VIEW [stage].[vJEN_SE_SOLine] AS
--COMMENT EMPTY FIELDS // ADD UPPER() INTO PartID,CustomerID,WarehouseID 2022-12-19 VA
-- customerid / partID 23-02-17 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(PartNum), '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine), '#', Indexkey))) AS SalesInvoiceID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',OrderNum,'#',OrderLine,'#',InvoiceNum))) AS SalesOrderID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ), '#', InvoiceNum))) AS SalesLedgerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(OrderNum)))) AS SalesOrderNumID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) )))) AS CustomerID
    ,CONVERT([binary](32),HASHBYTES('SHA2_256',Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID 
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) )))) AS PartID 
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(WarehouseCode))))) AS WareHouseID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(WarehouseCode)))) AS WareHouseID
	,CONCAT(Company,'#',OrderNum,'#',OrderLine,'#',OrderSubLine, '#',InvoiceNum) AS SalesOrderCode
	,CONVERT(int, replace(convert(date,InvoiceDate),'-','')) AS SalesInvoiceDateID  --Redundant?
	,CONCAT(Company,'#',TRIM(InvoiceNum),'#',TRIM(InvoiceLine)) AS SalesInvoiceCode --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey

	,Company
	,TRIM(SalesPerson) AS SalesPersonName
	,TRIM(CustNum) AS CustomerNum
	,TRIM(PartNum) AS PartNum
	,CASE WHEN TRIM(OrderNum) = '0' THEN 'PrimaryPart' ELSE 'SubPart' END  AS PartType
	,TRIM(OrderNum) AS SalesOrderNum
	,OrderLine		AS SalesOrderLine
	,OrderSubLine	AS SalesOrderSubLine
	,OrderType AS SalesOrderType
	,InvoiceNum	AS SalesInvoiceNum
	,InvoiceLine	AS SalesInvoiceLine
	--,'' AS SalesInvoiceType
	,CASE WHEN InvoiceDate = '' THEN '1901-01-01' ELSE CONVERT(date, InvoiceDate) END AS SalesInvoiceDate
	,ActualDeliveryDate		AS ActualDelivDate
	--,'' AS UoM
	,SellingShipQty			AS SalesInvoiceQty
	,UnitPrice	
	,UnitCost
	--,NULL AS DiscountPercent
	,DiscountAmount
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	,TotalMiscChrg
	--,NULL AS VATAmount
	,[CurrencyCode] AS Currency
	,[ExchangeRate] AS ExchangeRate
	,CreditMemo
	,CASE WHEN TRIM(SalesPerson) = 'EDI - Digital Order' THEN 'EDI'
		ELSE 'Normal Order Handling' END AS SalesChannel
	--,'' AS Department
	,TRIM(WarehouseCode) AS WarehouseCode
	--,NULL AS DeliveryAddress
	--,'' AS CostBearerNum
	--,'' AS CostUnitNum
	--,'' AS ReturnComment
	--,'' AS ReturnNum
	--,'' AS ProjectNum
	,IndexKey
	--,'' AS SIRes1
	--,'' AS SIRes2
	--,'' AS SIRes3

FROM stage.JEN_SE_SOLine

--GROUP BY
--	PartitionKey,Company,SalesPerson, CustNum, PartNum, OrderNum,OrderLine,OrderSubLine, OrderType,InvoiceNum,InvoiceLine, InvoiceDate,ActualDeliveryDate,SellingShipQty,UnitPrice ,UnitCost ,DiscountAmount,TotalMiscChrg,WarehouseCode, [CurrencyCode], [ExchangeRate], CreditMemo, Indexkey, OrderType
GO
PRINT N'Creating [dm_LS].[fctSalesOrderLog]'
GO
CREATE VIEW [dm_LS].[fctSalesOrderLog] AS

SELECT sol.[SalesOrderLogID]
,sol.[CompanyID]
,sol.[CustomerID]
,sol.[PartID]
,sol.[WarehouseID]
,sol.[SalesPersonNameID]
,sol.[SalesOrderDateID]
,sol.[PartitionKey]
,sol.[Company]
,sol.[CustomerNum]
,sol.[SalesOrderNum]
,sol.[SalesOrderLine]
,sol.[SalesOrderSubLine]
,sol.[SalesOrderType]
,sol.[SalesOrderLogType]
,sol.[SalesOrderDate]
,sol.[SalesOrderLogDate]
,sol.[SalesInvoiceNum]
,sol.[SalesOrderQty]
,sol.[UoM]
,sol.[UnitPrice]
,sol.[UnitCost]
,sol.[Currency]
,sol.[ExchangeRate]
,sol.[OpenRelease]
,sol.[DiscountPercent]
,sol.[DiscountAmount]
,sol.[PartNum]
,sol.[PartType]
,sol.[SalesPersonName]
,sol.[Department]
,sol.[WarehouseCode]
FROM [dm].[FactSalesOrderLog] sol
LEFT JOIN dbo.Company com ON sol.Company = com.Company
WHERE com.BusinessArea = 'Lifting Solutions' AND com.[Status] = 'Active'


--WHERE Company in ('AFISCM', 'CDKCERT', 'CEECERT','CFICERT', 'CLVCERT' , 'CLTCERT', 'CSECERT', 'CUKCERT', 'CNOEHAU', 'CNOCERT', 'CERPL', 'CyESA', 'HFIHAKL', 'TRACLEV','MENBE14','MENNL01','MENNL02','MENNL03','MENNL04','MENNL07','MENNL11')
GO
PRINT N'Creating [stage].[FOR_FR_Part]'
GO
CREATE TABLE [stage].[FOR_FR_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartName] [nvarchar] (50) NULL,
[PartDescription] [nvarchar] (max) NULL,
[PartDescription2] [nvarchar] (max) NULL,
[PartDescription3] [nvarchar] (max) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[ProductGroup2] [nvarchar] (50) NULL,
[ProductGroup3] [nvarchar] (50) NULL,
[ProductGroup4] [nvarchar] (50) NULL,
[Brand] [nvarchar] (50) NULL,
[CommodityCode] [nvarchar] (50) NULL,
[PartNumReplacement] [nvarchar] (50) NULL,
[CountryOfOrigin] [nvarchar] (50) NULL,
[NetWeight] [decimal] (18, 4) NULL,
[Volume] [decimal] (18, 4) NULL,
[Material] [nvarchar] (50) NULL,
[Barcode] [nvarchar] (50) NULL,
[StartDate] [date] NULL,
[EndDate] [date] NULL,
[TEST] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vFOR_FR_Part]'
GO
CREATE VIEW [stage].[vFOR_FR_Part] AS
--COMMENT empty fields / ADD UPPER(()TRIM() INTO PartID
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([PartNum]))))) AS PartID
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', TRIM([PartNum])))) AS PartID
	,CONCAT([Company], '#', TRIM([PartNum])) AS PartCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [Company])) AS CompanyID
	,PartitionKey

	,[Company]
	,TRIM([PartNum]) AS [PartNum]
	,[PartName]
	,[PartDescription]
	,[PartDescription2]
	--,NULL AS MainSupplier
	--,NULL AS AlternativeSupplier
	,[PartDescription3]
	,[ProductGroup]
	,[ProductGroup2]
	,[ProductGroup3]
	,[ProductGroup4]
	,[Brand]
	,[CommodityCode]
	--,'' AS [PartReplacementNum]
	--,'' AS [PartStatus]
	,[CountryOfOrigin]
	,[NetWeight]
	--,'' AS [UoM]
	,[Material]
	,[Barcode]
	--,0 AS [ReorderLevel]
	--,'' AS [PartResponsible]
	,[StartDate]
	,[EndDate]
FROM [stage].[FOR_FR_Part]
GO
PRINT N'Creating [dm].[CurrencyRates]'
GO


CREATE VIEW [dm].[CurrencyRates] AS

WITH distinctEUR AS
(
SELECT distinct [period]
      , [currency_code]
      , CONVERT(decimal(18,4), [currency_rate]) AS currency_rate_EUR
FROM [dw].[CurrencyRates]
WHERE currency_code = 'EUR'

),

AllCurrencies AS 
(
SELECT 
 period
,actuality
,currency_code
,currency_type
,unit
,currency_rate
FROM [dw].[CurrencyRates]),

EURperRow AS
(
SELECT 
	 AllCurrencies.period
	,AllCurrencies.actuality
	,AllCurrencies.currency_code
	,AllCurrencies.currency_type
	,AllCurrencies.unit
	,AllCurrencies.currency_rate
	, CONVERT(decimal(18,4)
	, AllCurrencies.currency_rate/distinctEUR.currency_rate_EUR) AS currency_rate_eur 
FROM AllCurrencies 
	right outer join distinctEUR on AllCurrencies.[period] = distinctEUR.[period]
)

SELECT 
period
,actuality
,currency_code
,currency_type
,unit
,currency_rate
,currency_rate_eur
FROM EURperRow
where [period] != '2309'
GROUP BY [period], [currency_code], [currency_rate], actuality, currency_type, unit, currency_rate_eur -- added because of the source gives duplication each code, not know why yet, shall investigate
GO
PRINT N'Creating [stage].[SCM_FI_Warehouse]'
GO
CREATE TABLE [stage].[SCM_FI_Warehouse]
(
[PartitionKey] [nvarchar] (50) NULL,
[Company] [nvarchar] (50) NULL,
[WarehouseID] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[WarehouseName] [nvarchar] (50) NULL,
[WarehouseDistrict] [nvarchar] (50) NULL,
[WarehouseAddress] [nvarchar] (50) NULL,
[WarehouseDescription] [nvarchar] (50) NULL,
[WarehouseType] [nvarchar] (50) NULL,
[WarehouseCountry] [nvarchar] (50) NULL,
[WarehouseSite] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vSCM_FI_Warehouse]'
GO



CREATE VIEW [stage].[vSCM_FI_Warehouse] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey

	,[Company]
	,TRIM([WarehouseCode]) AS [WarehouseCode]
	,[WarehouseName]
	,[WarehouseDistrict]
	,[WarehouseAddress]
	,[WarehouseDescription]
	,[WarehouseType]
	,[WarehouseCountry]
	,[WarehouseSite]

FROM [stage].[SCM_FI_Warehouse]
GO
PRINT N'Creating [stage].[FOR_ES_OLine]'
GO
CREATE TABLE [stage].[FOR_ES_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NULL,
[SalesOrderNum] [nvarchar] (50) NULL,
[SalesOrderLine] [nvarchar] (50) NULL,
[SalesOrderDate] [date] NULL,
[NeedbyDate] [date] NULL,
[ExpDelivDate] [date] NULL,
[SalesOrderQty] [decimal] (18, 8) NULL,
[DelivQty] [decimal] (38, 8) NULL,
[RemainingQty] [decimal] (18, 8) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 8) NULL,
[UnitCost] [decimal] (18, 8) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 8) NULL,
[OpenRelease] [int] NULL,
[DiscountPercent] [decimal] (18, 6) NULL,
[DiscountAmount] [numeric] (18, 6) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartType] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[IsCancelled] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vFOR_ES_OLine]'
GO
CREATE VIEW [stage].[vFOR_ES_OLine] AS
--COMMENT EMPTY FIELD 2022-12-21 VA
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SalesOrderNum),'#',TRIM(SalesOrderLine))))) AS SalesOrderID
	,UPPER(CONCAT(Company,'#',SalesOrderNum,'#',SalesOrderLine)) as SalesOrderCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) as CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) as CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID 
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SalesOrderNum))))) AS SalesOrderNumID  
	,CONVERT(int, replace(convert(date, SalesOrderDate),'-','')) AS SalesOrderDateID  
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID

	,PartitionKey 
	,Company 
	,UPPER(TRIM(CustomerNum)) AS CustomerNum 
	,UPPER(TRIM(SalesOrderNum)) AS SalesOrderNum
	,UPPER(TRIM(SalesOrderLine)) AS SalesOrderLine
	--,'' AS SalesOrderSubLine
	--,'' AS SalesOrderType
	--,'' AS SalesOrderCategory
	--,'' AS SalesOrderRelNum
	,SalesOrderDate
	,NeedbyDate
	,ExpDelivDate
	,CAST('1900-01-01' AS date) AS ActualDelivDate
	,CAST('1900-01-01' AS date) AS ConfirmedDelivDate
	--,'' AS SalesInvoiceNum
	,SalesOrderQty
	,DelivQty
	,RemainingQty
	--,NULL AS SalesInvoiceQty
	,UoM
	,UnitPrice
	,UnitCost
	,'EUR' AS Currency --Changed from '' to 'SEK' /SM 2021-08-19
	,1 AS ExchangeRate  --CurrExChRate AS ExchangeRate /SM 2021-08-19
	,OpenRelease
	,DiscountAmount
	,DiscountPercent
	,UPPER(TRIM(PartNum)) AS PartNum
	,PartType
	--,''	AS PartStatus
	,SalesPersonName AS SalesPersonName
	,UPPER(TRIM(WarehouseCode)) as WarehouseCode
	,IIF(UPPER(TRIM(CustomerNum)) IN ('C0010380', 'C0011260', 'C0018613'), 'EDI', 'Normal Order Handling') AS SalesChannel
	,IIF(UPPER(TRIM(CustomerNum)) IN ('C0010380', 'C0011260', 'C0018613'), 'EDI', 'Normal Order Handling') AS AxInterSalesChannel
	--,'' AS Department
	--,'' AS ProjectNum
	--,'' AS IndexKey
	,IsCancelled AS Cancellation
	--,'' AS SORes1
	--,'' AS SORes2
	--,'' AS SORes3
--	,ReturnComment
--	,SalesReturnOrderNum
--	,SalesReturnInvoiceNum
	,NULL AS [TotalMiscChrg]
FROM stage.FOR_ES_OLine
GO
PRINT N'Creating [stage].[CER_NO_Customer]'
GO
CREATE TABLE [stage].[CER_NO_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[CustomerName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (20) NULL,
[TelephoneNumber2] [nvarchar] (20) NULL,
[Email] [nvarchar] (100) NULL,
[ABCCode] [nchar] (10) NULL,
[City] [nvarchar] (50) NULL,
[ZIP] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNr] [nvarchar] (20) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (30) NULL,
[CustomerType] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_NO_Customer]'
GO
CREATE VIEW [stage].[vCER_NO_Customer] AS
--COMMENT EMPTY FIELDS // ADD UPPER()TRIM() INTO CustomerID 2022-12-16 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID
	--CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(CustomerNum)))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',Company)) AS CompanyID --
	,CONCAT(Company,'#',TRIM([CustomerNum])) AS CustomerCode
	,PartitionKey

	,Company
	,TRIM(CustomerNum) AS [CustomerNum]
	--,'' AS MainCustomerName
	,[dbo].[ProperCase](CustomerName) AS  [CustomerName]
	,[AddressLine1]
	,[AddressLine2]
	,[AddressLine3]
	,[TelephoneNumber1] AS [TelephoneNum1]
	,[TelephoneNumber2] AS [TelephoneNum2]
	,[Email]
	,[ZIP] AS [ZipCode]
	,CASE WHEN [City] = ' '	AND LEFT(AddressLine3, 1) IN ('1','2','3','4','5','6','7','8','9') THEN trim(substring(replace([dbo].[ProperCase](AddressLine3),' ',		''), 6, 100)) ELSE [dbo].[ProperCase]([City]) end AS [City]
	,IIF([State]= ' ',null,[State]) AS [State]
	,[District] AS SalesDistrict
	,[dbo].[ProperCase](CountryName) AS [CountryName]
	--,'' AS Division
	--,'' AS CustomerIndustry
	--,'' AS CustomerSubIndustry
	,[dbo].[ProperCase](TRIM(concat (addressline1 + ' ' + addressline2, null))) AS [AddressLine]
	,CONCAT(Countryname, + ',  ' + trim([City]), + ',  ' + TRIM([ZIP]), + ',  ' + trim(addressline1)) AS [FullAddressLine]
	,[dbo].[ProperCase](CustomerGroup) AS [CustomerGroup]
	,[dbo].[ProperCase](CustomerGroup) AS [CustomerSubGroup]
	,[SalesRepCode] AS SalesPersonCode
	,[dbo].[ProperCase](SalesPersonName) AS [SalesPersonName]
	--,'' AS [SalesPersonResponsible]
	,[VATRegNr] AS VATNum
	--,'' AS OrganizationNum
	,[AccountString] AS AccountNum
	,[InternalExternal]
	,[ABCCode] AS CustomerScore
	,[CustomerType]
	,GETDATE() AS [ValidFrom]
	,DATEADD(year,1,GETDATE()) AS [ValidTo]
	, CountryCode
FROM [stage].[CER_NO_Customer]
GO
PRINT N'Creating [stage].[NOM_SE_SOLine]'
GO
CREATE TABLE [stage].[NOM_SE_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (100) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[PartClass] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (10) NULL,
[PartNum] [nvarchar] (50) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[Indexkey] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[UpdateStock] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vNOM_SE_SOLine]'
GO
CREATE VIEW [stage].[vNOM_SE_SOLine] AS
--COMMENT EMPTY FIELD 2022-12-20 VA
SELECT 
	--CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(InvoiceNum),'#',TRIM(InvoiceLine)))) AS SalesOrderID
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(PartNum), '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine))))) AS SalesInvoiceID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(OrderNum),'#',TRIM(OrderLine),'#',TRIM(OrderSubLine))))) AS SalesOrderID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustNum), '#', TRIM(InvoiceNum))))) AS SalesLedgerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(OrderNum))))) AS SalesOrderNumID  
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID 
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(OrderNum),'#',TRIM(OrderLine))) AS SalesOrderCode 
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(InvoiceNum))))) AS SalesInvoiceNumID --Redundant?
	,CONVERT(int, replace(convert(date,InvoiceDate),'-','')) AS SalesInvoiceDateID										--Redundant?
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(InvoiceNum),'#',TRIM(InvoiceLine))) AS SalesInvoiceCode						--Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey

	,UPPER(TRIM(Company)) AS Company
	,SalesPerson AS SalesPersonName
	,UPPER(TRIM(CustNum)) AS CustomerNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,CASE WHEN TRIM(OrderNum) = '0' THEN 'PrimaryPart' ELSE 'SubPart' END  AS PartType
	,UPPER(TRIM(OrderNum)) AS SalesOrderNum
	,UPPER(TRIM(OrderLine)) AS SalesOrderLine
	,UPPER(TRIM(OrderSubLine)) AS SalesOrderSubLine-- '0' as OrderSubLine
	,OrderType AS SalesOrderType
	,InvoiceNum AS SalesInvoiceNum
	,UPPER(TRIM(InvoiceLine)) AS SalesInvoiceLine
	--,'' AS SalesInvoiceType
	,CONVERT(date, InvoiceDate) AS SalesInvoiceDate
	,CONVERT(date, ActualDeliveryDate) AS ActualDelivDate
	,CASE WHEN CreditMemo = '1' THEN -1*ABS(SellingShipQty)
--		WHEN UnitCost = 0 THEN 0 
		ELSE SellingShipQty END AS SalesInvoiceQty
	,ABS(UnitPrice) AS UnitPrice 
	,ABS(UnitCost) AS UnitCost 
	--,'' AS UoM
	--,0 AS DiscountPercent
	,DiscountAmount
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	,TotalMiscChrg
	--,0 AS VATAmount
	,Currency
	,ExchangeRate
	,CreditMemo
	--,CASE WHEN LEFT(SalesPerson, 7) = 'WEBSHOP' THEN 'Webshop'
	--	WHEN SUBSTRING(SalesPerson, 2, 5) = 'BUTIK' OR SUBSTRING(SalesPerson, 1, 7) = 'KONTANT' THEN 'Over-the-Counter'
	--	ELSE 'Normal Order Handling' END AS SalesChannel
	,SalesChannel
	,UpdateStock AS IsUpdatingStock
	--,'' AS Department
	,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
	--,NULL AS DeliveryAddress
	--,'' AS CostBearerNum
	--,'' AS CostUnitNum
	--,'' AS ReturnComment
	--,'' AS ReturnNum
	,TRIM(PartClass) AS ProjectNum
	,MAX(Indexkey) AS IndexKey
	--,'' AS SIRes1
	--,'' AS SIRes2
	--,'' AS SIRes3
FROM 
	stage.NOM_SE_SOLine AS SO
GROUP BY
	PartitionKey, Company, CustNum, OrderNum, OrderLine, OrderSubLine, OrderType, InvoiceNum, InvoiceLine, InvoiceDate, SellingShipQty, UnitPrice, UnitCost, Currency, ExchangeRate, TotalMiscChrg, DiscountAmount,PartNum, SalesPerson,  WarehouseCode, CreditMemo, SalesChannel, UpdateStock, PartClass, ActualDeliveryDate
GO
PRINT N'Creating [stage].[SVE_SE_StockBalance]'
GO
CREATE TABLE [stage].[SVE_SE_StockBalance]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (50) NOT NULL,
[WarehouseCode] [nvarchar] (500) NULL,
[BinNum] [nvarchar] (500) NULL,
[BatchNum] [nvarchar] (500) NULL,
[SupplierNum] [nvarchar] (500) NULL,
[PartNum] [nvarchar] (500) NULL,
[DelivTime] [nvarchar] (50) NULL,
[LastStockTakeDate] [nvarchar] (50) NULL,
[MaxStockQty] [nvarchar] (500) NULL,
[StockBalance] [nvarchar] (500) NULL,
[StockValue] [nvarchar] (500) NULL,
[ReOrderLevel] [nvarchar] (500) NULL,
[SafetyStock] [nvarchar] (500) NULL,
[OptimalOrderQty] [nvarchar] (500) NULL,
[SalesRemainingQty] [nvarchar] (500) NULL,
[PurchaseRemainingQty] [nvarchar] (500) NULL,
[AvgCost] [nvarchar] (500) NULL,
[Currency] [nvarchar] (500) NULL,
[ExchangeRate] [nvarchar] (500) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL,
[IsActiveRecord] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vSVE_SE_StockBalance]'
GO

CREATE VIEW [stage].[vSVE_SE_StockBalance] AS
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company], '#', TRIM([WarehouseCode]), '#', TRIM(BinNum), '#', TRIM(PartNum))))) AS ItemWarehouseID
	,UPPER(CONCAT([Company], '#', TRIM(PartNum), '#', TRIM([WarehouseCode]))) AS ItemWarehouseCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([SupplierNum]))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey

	,UPPER(Company) AS Company
	,UPPER(TRIM(PartNum)) AS PartNum
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
	,CASE WHEN TRIM(BinNum) like '' OR BinNum like ' ' THEN NULL ELSE TRIM(BinNum) END AS BinNum
	,TRIM(BatchNum) AS BatchNum
	,CONVERT(decimal(18,4), IIF(DelivTime = '', NULL, DelivTime)) AS [DelivTime]-- convert to days
	,TRY_CONVERT(date, LastStockTakeDate) AS LastStockTakeDate
	,TRY_CONVERT(date, '1900-01-01') AS LastStdCostCalDate
	,CONVERT(date, '1900-01-01') AS DelivDateSupplier
	,CONVERT(date, '1900-01-01') AS DelivDateCust
	,CONVERT(date, '1900-01-01') AS OrderDateSupplier
	,CONVERT(date, '1900-01-01') AS OrderDateCust
	,TRIM(Currency) AS Currency
	,CONVERT(decimal(18,2), SafetyStock) AS SafetyStock --  -- gives convertion error!!!
	,CONVERT(decimal(18,2), MaxStockQty) AS MaxStockQty --CAST(MaxStockQty AS decimal(18,2))
	,CONVERT(decimal(18,4), StockBalance) AS StockBalance
	,CONVERT(decimal(18,4), StockValue) AS StockValue
	,CONVERT(decimal(18,4), AvgCost) AS AvgCost
	--,ReserveQty
	--,BackOrderQty
	--,OrderQty
	--,StockTakeDiff
	,CONVERT(decimal(18,4), ReOrderLevel) AS  ReOrderLevel --
	,CONVERT(decimal(18,4), OptimalOrderQty) AS  OptimalOrderQty --
	,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
	--,'' AS SBRes1
	--,'' AS SBRes2
	--,'' AS SBRes3
FROM 
	[stage].[SVE_SE_StockBalance]
WHERE CONVERT(decimal(18,4), StockBalance) > 0
GO
PRINT N'Creating [dm_LS].[dimDepartment]'
GO

create view [dm_LS].[dimDepartment] as

select 
	 dpt.[DepartmentID]
	 ,dpt.CompanyID
,dpt.[Company]
,dpt.[DepartmentCode]
,dpt.[DepartmentName]
,dpt.[DepartmentSite]
,dpt.[Address]
,dpt.[ZipCode]
,dpt.[City]
,dpt.[State]
,dpt.[CountryCode]
,dpt.[CountryName]
,dpt.[DepartmentType]
,dpt.[DepartmentDescription]
,dpt.[DptRes1]
,dpt.[DptRes2]
,dpt.[DptRes3]
from dm.dimDepartment as dpt
LEFT JOIN DBO.Company as company
	on dpt.Company = company.Company
WHERE company.BusinessArea = 'Lifting Solutions' AND company.[Status] = 'Active';
GO
PRINT N'Creating [stage].[TRA_SE_CustomerAgreement]'
GO
CREATE TABLE [stage].[TRA_SE_CustomerAgreement]
(
[PartitionKey] [nvarchar] (25) NULL,
[Company] [nvarchar] (8) NULL,
[CustomerNum] [nvarchar] (20) NULL,
[PartNum] [nvarchar] (30) NULL,
[AgreementCode] [nvarchar] (10) NULL,
[AgreementDescription] [nvarchar] (50) NULL,
[DiscountPercent] [nvarchar] (60) NULL,
[UnitPrice] [nvarchar] (60) NULL,
[AgreementQty] [nvarchar] (60) NULL,
[FulfilledQty] [nvarchar] (60) NULL,
[RemainingQty] [nvarchar] (60) NULL,
[UoM] [nvarchar] (4) NULL,
[Currency] [nvarchar] (3) NULL,
[DelivTime] [nvarchar] (60) NULL,
[AgreementStart] [nvarchar] (60) NULL,
[AgreementEnd] [nvarchar] (60) NULL,
[AgreementResponsible] [nvarchar] (50) NULL,
[CreatedTimeStamp] [nvarchar] (60) NULL,
[ModifiedTimeStamp] [nvarchar] (60) NULL,
[RecordIsActive] [nvarchar] (1) NULL
)
GO
PRINT N'Creating [stage].[vTRA_SE_CustomerAgreement]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vTRA_SE_CustomerAgreement]
	AS select 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM(AgreementCode),'#',TRIM([PartNum]),'#',TRIM(CustomerNum))))) AS CustomerAgreementID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID  
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM([Currency])))) AS CurrencyID
	, PartitionKey
	, UPPER(Company) AS Company
	, nullif(trim(CustomerNum		  ),'') as CustomerNum
	, nullif(trim(PartNum			  ),'') as PartNum
	, nullif(trim(AgreementCode		  ),'') as AgreementCode
	, nullif(trim(AgreementDescription),'') as AgreementDescription
	, cast(nullif(trim(DiscountPercent),'') as decimal(18,4)) as DiscountPercent
	, cast(nullif(trim(UnitPrice),'') as decimal(18,4)) as UnitPrice
	, cast(nullif(trim(AgreementQty),'') as decimal(18,4)) as AgreementQty
	, cast(nullif(trim(FulfilledQty),'') as decimal(18,4)) as FulfilledQty
	, cast(nullif(trim(RemainingQty),'') as decimal(18,4)) as RemainingQty
	, nullif(trim(UoM	  ),'') as UoM
	, nullif(trim(Currency),'') as Currency
	, cast(DelivTime as smallint) as Delivtime
	, CAST(AgreementStart as date) as AgreementStart
	, CAST(AgreementEnd as date) as AgreementEnd
	, nullif(trim(AgreementResponsible),'') as AgreementResponsible
	,cast(RecordIsActive as bit) as IsActiveRecord
from stage.TRA_SE_CustomerAgreement
;
GO
PRINT N'Creating [stage].[Jen_NO_StocktransactionOB]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[Jen_NO_StocktransactionOB]
(
[StockTransactionID] [binary] (32) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[TransactionCode] [nvarchar] (50) NULL,
[TransactionDescription] [nvarchar] (max) NULL,
[IssuerReceiverNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NOT NULL,
[BinNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[TransactionDate] [date] NULL,
[TransactionTime] [nvarchar] (10) NULL,
[TransactionQty] [decimal] (18, 4) NULL,
[TransactionValue] [decimal] (18, 4) NULL,
[CostPrice] [decimal] (18, 4) NULL,
[SalesUnitPrice] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (10) NULL,
[Reference] [nvarchar] (50) NULL,
[AdjustmentDate] [date] NULL,
[STRes1] [nvarchar] (100) NULL,
[STRes2] [nvarchar] (100) NULL,
[STRes3] [nvarchar] (100) NULL,
[CompanyID] [binary] (32) NULL,
[PartID] [binary] (32) NULL,
[WarehouseID] [binary] (32) NULL,
[PurchaseInvoiceID] [binary] (32) NULL,
[PurchaseOrderNumID] [binary] (32) NULL,
[SalesOrderNumID] [binary] (32) NULL,
[SalesInvoiceID] [binary] (32) NULL,
[CustomerID] [binary] (32) NULL,
[SupplierID] [binary] (32) NULL,
[CurrencyID] [binary] (32) NULL,
[PartitionKey] [nvarchar] (50) NOT NULL,
[IndexKey] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vJEN_NO_StockTransactionOB]'
GO

CREATE VIEW [stage].[vJEN_NO_StockTransactionOB] AS 

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', ([WarehouseCode]), '#', ([PartNum]), '#', (TransactionCode), '#', (IssuerReceiverNum)))) AS StockTransactionID
	,[Company]
	,TRIM([WarehouseCode]) AS WarehouseCode
	,TransactionCode
	,TransactionDescription
	,IIF(TRIM(IssuerReceiverNum)='', NULL,TRIM(IssuerReceiverNum)) AS IssuerReceiverNum
	,IIF(TRIM([OrderNum])='', NULL,TRIM(OrderNum)) AS OrderNum
	,OrderLine
	,IIF(TRIM([InvoiceNum])='', NULL,TRIM(InvoiceNum)) AS InvoiceNum
	,InvoiceLine
	,UPPER(TRIM([PartNum])) AS [PartNum]
	,IIF(TRIM([BinNum])='', NULL,TRIM(BinNum)) AS BinNum
	,IIF(TRIM([BatchNum])='', NULL,TRIM(BatchNum)) AS BatchNum
	,CONVERT(date, TransactionDate) AS TransactionDate
	,TransactionTime
	,IIF(TransactionQty IS NULL, 0, TRY_CONVERT(decimal(18,2), REPLACE(REPLACE(TransactionQty, ' ', ''), ',', '.'))) AS TransactionQty --TRY_CONVERT(decimal(18,0), REPLACE(TransactionQty, '.', ','))
	,IIF(TransactionValue IS NULL, 0, TRY_CONVERT(decimal(18,2), REPLACE(REPLACE(TransactionValue, ' ', ''), ',', '.'))) AS TransactionValue --TRY_CONVERT(decimal(18,2), REPLACE(TransactionValue, '.', ','))
	,IIF(TransactionQty IS NULL, 0, TRY_CONVERT(decimal(18,2), REPLACE(REPLACE(CostPrice, ' ', ''), ',', '.'))) AS [CostPrice] --TRY_CONVERT(decimal(18,2),  REPLACE([CostPrice], '.', ','))
	,IIF(SalesUnitPrice IS NULL, 0, TRY_CONVERT(decimal(18,2), REPLACE(REPLACE(SalesUnitPrice, ' ', ''), ',', '.'))) AS SalesUnitPrice --TRY_CONVERT(decimal(18,2),  REPLACE(SalesUnitPrice, '.', ','))
	,'NOK' AS Currency -- IIF(TRIM([Currency])='', NULL, TRIM(Currency))
	,[Reference]
	,CONVERT(date, AdjustmentDate) AS AdjustmentDate
	,InternalExternal
	,'2022-10-10' AS CreateDate
	,'' AS STRes1
	,'' AS STRes2
	,'' AS STRes3

	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER([Company]))) AS CompanyID
    ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT([Company],'#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,IIF(TransactionCode in ('00'), CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([InvoiceNum])))), NULL) AS PurchaseInvoiceID
	,IIF(TransactionCode in ('00'), CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([OrderNum])))), NULL) AS PurchaseOrderNumID
	,IIF(TransactionCode in ('01'), CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([OrderNum])))), NULL) AS SalesOrderNumID
	,IIF(TransactionCode in ('01'), CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([InvoiceNum])))), NULL) AS SalesInvoiceID
	,IIF(TransactionCode in ('00'), CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM(IssuerReceiverNum)))), NULL) AS CustomerID
	,IIF(TransactionCode in ('01'), CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM(IssuerReceiverNum)))), NULL) AS SupplierID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',TRIM([Currency]))) AS CurrencyID
	,'2023-05-16 9:43:00' AS PartitionKey
	,'' AS IndexKey

FROM [stage].[Jen_NO_StocktransactionOB]
GO
PRINT N'Creating [stage].[CER_DE_Customer]'
GO
CREATE TABLE [stage].[CER_DE_Customer]
(
[PartitionKey] [nvarchar] (40) NULL,
[Company] [nvarchar] (12) NULL,
[CustomerNum] [nvarchar] (20) NULL,
[CustomerName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (80) NULL,
[AddressLine2] [nvarchar] (80) NULL,
[AddressLine3] [nvarchar] (80) NULL,
[FullAddressLine] [nvarchar] (250) NULL,
[TelephoneNumber1] [nvarchar] (60) NULL,
[Email] [nvarchar] (60) NULL,
[CountryName] [nvarchar] (50) NULL,
[City] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (20) NULL,
[CountryCode] [nvarchar] (20) NULL,
[VATNum] [nvarchar] (25) NULL,
[OrganizationNum] [nvarchar] (25) NULL,
[SalesDistrict] [nvarchar] (30) NULL,
[CreditLimit] [nvarchar] (30) NULL,
[PaymentTerms] [nvarchar] (30) NULL,
[InternalExternal] [nvarchar] (15) NULL,
[IsCompanyGroupInternal] [nvarchar] (15) NULL,
[CustomerIndustry] [nvarchar] (35) NULL,
[CustomerType] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerScore] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_DE_Customer]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vCER_DE_Customer]
	AS SELECT 
		 CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
		 ,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
		 --,CONCAT(Company, '#', TRIM([CustomerNum])) AS CustomerCode
		,[PartitionKey]          
		,[Company]               
		,[CustomerNum]           
		,[CustomerName]          
		,[AddressLine1]          
		,[AddressLine2]          
		,[AddressLine3]          
		,[FullAddressLine]       
		,[TelephoneNumber1]      
		,[Email]                 
		,[CountryName]           
		,[City]                  
		,[ZipCode]               
		,[CountryCode]           
		,[VATNum]                
		,[OrganizationNum]       
		,[SalesDistrict]         
		,[CreditLimit]           
		,[PaymentTerms]          
		,[InternalExternal]      
		,[IsCompanyGroupInternal]
		,[CustomerIndustry]      
		,[CustomerType]     
		,CustomerGroup
		,CustomerScore
	FROM stage.CER_DE_Customer
GO
PRINT N'Creating [stage].[JEN_SE_Supplier]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[JEN_SE_Supplier]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[Name] [nvarchar] (50) NULL,
[CustomerCode] [nvarchar] (10) NULL,
[Addressline1] [nvarchar] (50) NULL,
[Addressline2] [nvarchar] (50) NULL,
[Addressline3] [nvarchar] (50) NULL,
[ZIP] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[City] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[Region] [nvarchar] (50) NULL,
[SupplierCategory] [nvarchar] (50) NULL,
[Reference] [nvarchar] (50) NULL,
[BankAccountNum] [nvarchar] (34) NULL,
[VATNum] [nvarchar] (20) NULL,
[ABCCode] [nvarchar] (10) NULL,
[TelephoneNum] [nvarchar] (20) NULL,
[Email] [nvarchar] (100) NULL,
[CodeOfConduct] [nvarchar] (500) NULL,
[MinOrderQty] [nvarchar] (50) NULL,
[InternalName] [nvarchar] (50) NULL,
[GlobalID] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (10) NULL
)
GO
PRINT N'Creating [stage].[vJEN_SE_Supplier]'
GO

CREATE view [stage].[vJEN_SE_Supplier] AS
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID
	--CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT([Company],'#',TRIM([SupplierNum]))))) AS SupplierID
    ,UPPER(CONCAT([Company],'#',TRIM([SupplierNum]))) AS SupplierCode --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Company])))) AS CompanyID
	,[PartitionKey]
	,UPPER(TRIM([Company])) AS Company
	,TRIM(UPPER([SupplierNum])) AS [SupplierNum]
	,[Name] AS MainSupplierName
	,[dbo].[ProperCase]([Name]) AS SupplierName
	,[AddressLine1]
    ,[AddressLine2]
    ,[AddressLine3]
	,[TelephoneNum]
	,[Email]
	,[dbo].[udf_GetNumeric]([Addressline3]) AS ZipCode
	,trim(substring(replace([dbo].[ProperCase](AddressLine3),' ', ''), 6, 100))  AS [City]
	,[District]
	,[dbo].[ProperCase]([CountryName]) AS CountryName
	,[Region]
	,[SupplierCategory]
	,[Reference] AS [SupplierResponsible]
	,[dbo].[ProperCase](TRIM(concat (addressline1+' '+ addressline2, null))) AS AddressLine
	,[dbo].[ProperCase](TRIM(concat_ws(',',coalesce([dbo].[ProperCase](CountryName),null),IIF(City= ' ',null,trim(substring(replace([dbo].[ProperCase](AddressLine3),' ', ''), 6, 100))),IIF(ZIP= ' ',null,[dbo].[udf_GetNumeric]([Addressline3]))
	,coalesce(IIF([addressline1]= ' ',null,[addressline1]),IIF([addressline2]= ' ',null,[addressline2]))
	,coalesce(IIF([addressline2]= ' ',null,[addressline2]),IIF([addressline3]= ' ',null,[addressline3]))))) AS FullAddressLine
	--,'' AS [AccountNum] 
	,[VATNum]
	--,'' AS OrganizationNum
	,[InternalName] AS [InternalExternal]
	,[CodeOfConduct]
	,[CustomerCode] AS CustomerNum
	,[ABCCode] AS [SupplierScore]
	,TRY_CONVERT(decimal(18,4),[MinOrderQty]) AS [MinOrderQty]
	--,0 AS [MinOrderValue]
	--,'' AS [Website]
	--,'' AS [Comments]
	,GlobalID AS SRes1
	--,'' AS SRes2
	--,'' AS SRes3
	, CountryCode
FROM [stage].[JEN_SE_Supplier]
GO
PRINT N'Creating [stage].[SCM_FI_StockTransaction]'
GO
CREATE TABLE [stage].[SCM_FI_StockTransaction]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SysRowID] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[BinNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[TransactionDate] [date] NULL,
[CreateDate] [date] NULL,
[CreateTime] [nvarchar] (20) NULL,
[TranDT] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[CostPrice] [decimal] (18, 4) NULL,
[CostPrice1] [decimal] (18, 4) NULL,
[SellPrice] [decimal] (18, 4) NULL,
[TranType] [nchar] (10) NULL,
[BatchID] [nvarchar] (50) NULL,
[FifoBatchID] [nvarchar] (50) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[Exchangerate] [decimal] (18, 4) NULL,
[IssueRecCode] [nvarchar] (50) NULL,
[TranSource] [nvarchar] (50) NULL,
[TranValue] [decimal] (18, 4) NULL,
[TranValue1] [decimal] (18, 4) NULL,
[Reference] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vSCM_FI_StockTransaction]'
GO

CREATE VIEW [stage].[vSCM_FI_StockTransaction] AS
--COMMENT EMPTY FIELDS // ADD UPPER() TRIM() INTO PartID,CustomerID 2022-12-21 VA
--ADD UPPER() INTO SupplierID 23-01-24 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', TRIM([SysRowID])))) AS StockTransactionID --TRIM(OrderNum), '#', TRIM(PartNum), '#', TRIM([InvoiceNum]), '#', TRIM([BatchID]), '#', TRIM([BinNum]), '#', TRIM([TranDT]), '#', TRIM([WarehouseCode])
	,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM([Company]))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([PartNum]))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(TRIM([Company]), '#', TRIM([PartNum])))) AS PartID
 	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,IIF((TRIM([TranSource]) = 'Purchase' AND TRIM([TranType]) like 'PUR-STK%' AND TRIM([TranType]) not like 'ADJ-%'), CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(TRIM([Company]), '#', TRIM([InvoiceNum])))), NULL) AS PurchaseInvoiceID
	,IIF((TRIM([TranSource]) = 'Purchase' AND TRIM([TranType]) like 'PUR-STK%' AND TRIM([TranType]) not like 'ADJ-%'), CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(TRIM([Company]), '#', TRIM([PurchaseOrderNum])))), NULL) AS PurchaseOrderNumID
	,IIF((TRIM([TranSource]) = 'Sales'), CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(TRIM([Company]), '#', TRIM([OrderNum])))), NULL) AS SalesOrderNumID
	,IIF((TRIM([TranSource]) = 'Sales'), CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(TRIM([Company]), '#', TRIM([InvoiceNum])))), NULL) AS SalesInvoiceID
	,IIF((TRIM([TranSource]) = 'Sales'), CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER( CONCAT(TRIM([Company]), '#', TRIM(IssueRecCode))))), NULL) AS CustomerID
 	--,IIF((TRIM([TranSource]) = 'Sales'), CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(TRIM([Company]), '#', TRIM(IssueRecCode)))), NULL) AS CustomerID
	,IIF((TRIM([TranSource]) = 'Purchase' AND TRIM([TranType]) like 'PUR-STK%' AND TRIM([TranType]) not like 'ADJ-%'), CONVERT([binary](32)
		, HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM(IssueRecCode))))),  HASHBYTES('SHA2_256',[Company])) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM([CurrencyCode]))) AS CurrencyID
	
	,[PartitionKey]

    ,[Company]
    ,TRIM([WarehouseCode]) AS WarehouseCode
	,[TranType] AS TransactionCode
    ,CASE WHEN TRIM([TranSource]) = 'Purchase' AND TRIM([TranType]) like 'PUR-STK%' AND TRIM([TranType]) not like 'ADJ-%' THEN 'Incoming goods' 
		WHEN TRIM([TranType]) like 'ADJ-%' THEN 'Adjustment'
		WHEN TRIM([TranSource]) = 'Sales' THEN 'Outgoing goods' 
		WHEN TRIM([TranSource]) = 'Stock' THEN 'Transit goods'
		ELSE 'unknown'
		END AS [TransactionDescription]
    ,IIF(TRIM(IssueRecCode) = '', NULL, TRIM(IssueRecCode)) AS IssuerReceiverNum
    ,IIF(TRIM([OrderNum]) = '', NULL, TRIM(OrderNum)) AS OrderNum
	--,'' AS [OrderLine]
    ,IIF(TRIM([InvoiceNum]) = '', NULL, TRIM(InvoiceNum)) AS InvoiceNum
	--,'' AS [InvoiceLine]
    ,TRIM([PartNum]) AS PartNum
    ,IIF(TRIM([BinNum]) = '', NULL, TRIM(BinNum)) AS BinNum
    ,IIF(TRIM([BatchID]) = '', NULL, TRIM(BatchID)) AS BatchNum
    ,CONVERT(date, [TransactionDate]) AS TransactionDate
	,[CreateTime] AS TransactionTime
    ,SellingShipQty AS [TransactionQty]
	,CASE WHEN TRIM([TranType]) like 'ADJ-%' THEN [TranValue] WHEN SellingShipQty < 0 THEN ABS([TranValue])*-1 ELSE ABS([TranValue]) END AS [TransactionValue]  -- DZ added conditions ----AND TRIM([TranType]) LIKE '%STK-CUS%') THEN
    ,[CostPrice]
    ,SellPrice AS [SalesUnitPrice]
    ,IIF(TRIM([CurrencyCode])='', NULL,TRIM(CurrencyCode)) AS Currency
    ,TRIM([Reference]) AS Reference
    ,CONVERT(date, [CreateDate]) AS [AdjustmentDate]
	, CASE WHEN TRIM(TranType) IN ('PUR-STK','STK-CUS') THEN 'External' ELSE 'Internal' END AS InternalExternal   --,NULL AS InternalExternal  added 2023-03-15 SB
	--,'' AS [STRes1]
	--,'' AS [STRes2]
	--,'' AS [STRes3]
	,[SysRowID] AS [IndexKey]
FROM 
	[stage].[SCM_FI_StockTransaction]
/*
GROUP BY
	PartitionKey, [SysRowID], Company, PartNum, OrderNum,PurchaseOrderNum, InvoiceNum, WarehouseCode, BinNum, BatchID, TransactionDate, CreateDate, CreateTime, TranType, [TranSource], Reference, SellingShipQty, IssueRecCode, CostPrice, SellPrice, CurrencyCode, TranValue, [TranDT]
	*/
GO
PRINT N'Creating [stage].[NOM_SE_PurchaseLedger]'
GO
CREATE TABLE [stage].[NOM_SE_PurchaseLedger]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NOT NULL,
[PurchaseInvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[InvoiceAmount] [decimal] (18, 4) NOT NULL,
[RemainingInvoiceAmount] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (10) NULL,
[VATAmount] [decimal] (18, 4) NULL,
[VATCode] [nvarchar] (10) NULL,
[PayToName] [nvarchar] (50) NULL,
[PayToCity] [nvarchar] (50) NULL,
[PayToContact] [nvarchar] (50) NULL,
[PaymentTerms] [nvarchar] (50) NULL,
[PrePaymentNum] [nvarchar] (50) NULL,
[LastPaymentNum] [nvarchar] (50) NULL,
[PLRes1] [nchar] (10) NULL,
[PLRes2] [nchar] (10) NULL,
[PLRes3] [nchar] (10) NULL
)
GO
PRINT N'Creating [stage].[vNOM_SE_PurchaseLedger]'
GO
CREATE VIEW [stage].[vNOM_SE_PurchaseLedger] AS 
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum))))) AS PurchaseLedgerID -- shall = in Invoice
	,UPPER(CONCAT(Company, '#', TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum))) AS PurchaseLedgerCode  
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(Company)))) AS CompanyID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum))))) AS SupplierID 
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierNum))))) AS SupplierID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseInvoiceNum))))) AS PurchaseInvoiceID  
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID  
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(Currency)))) AS CurrencyID  
	,CONVERT(int, replace(convert(date,PurchaseInvoiceDate),'-','')) AS PurchaseInvoiceDateID   
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS [Company]
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
	,UPPER(TRIM([PurchaseOrderNum])) AS [PurchaseOrderNum]
	,UPPER(TRIM([PurchaseInvoiceNum])) AS  [PurchaseInvoiceNum]
	,UPPER(TRIM([PrepaymentNum])) AS [PrepaymentNum]
	,UPPER(TRIM(LastPaymentNum)) AS LastPaymentNum
	,CONVERT(date, PurchaseInvoiceDate) AS PurchaseInvoiceDate
	,CONVERT(date, [DueDate]) AS PurchaseDueDate
	,CONVERT(date, [LastPaymentDate]) AS PurchaseLastPaymentDate
	,RemainingInvoiceAmount 
	,InvoiceAmount
	,IIF(TRIM(PurchaseInvoiceNum) = '174224', 10.64, ExchangeRate) AS ExchangeRate  --special case correction of wrong rate in erp
	,Currency
	,VATAmount
	,VATCode
	,[PayToName]
	,[PayToCity]
	,[PayToContact]
	,PaymentTerms
	,cast ('1900-01-01' as date) AS AccountingDate
	,'' AS PLRES1
	,'' AS PLRES2
	,'' AS PLRES3
	--,NULL AS PaidInvoiceAmount
	--,NULL AS LinkToOriginalInvoice
	--,NULL AS AgingPeriod
	--,NULL AS AgingSort
	--,NULL AS VATCodeDesc
FROM 
	[stage].[NOM_SE_PurchaseLedger]
GO
PRINT N'Creating [dm_LS].[dimSupplier]'
GO

CREATE VIEW [dm_LS].[dimSupplier] AS

SELECT 
 sup.[SupplierID]
,sup.[CompanyID]
,sup.[Company]
,sup.[SupplierNum]
,sup.[MainSupplierName]
,sup.[SupplierName]
,sup.[Supplier]
,sup.[TelephoneNum]
,sup.[Email]
,sup.[ZipCode]
,sup.[City]
,sup.[District]
,sup.[CountryCode]
,sup.[CountryName]
,sup.[Region]
,sup.[SupplierCategory]
,sup.[SupplierResponsible]
,sup.[AddressLine]
,sup.[FullAddressLine]
,sup.[AccountNum]
,sup.[OrganizationNum]
,sup.[VATNum]
,sup.[InternalExternal]
,sup.[CodeOfConduct]
,sup.[CustomerNum]
,sup.[SupplierScore]
,sup.[MinOrderQty]
,sup.[MinOrderValue]
,sup.[Website]
,sup.[Comments]
,sup.[IsMaterialSupplier]
,sup.[DUNS]
,sup.[DUNS_MatchScore]
,sup.[is_inferred]
,sup.[is_deleted]
,sup.[is_validCountryCode]
,sup.[DUNS_Status]
FROM [dm].[DimSupplier] sup
LEFT JOIN dbo.Company com ON sup.Company = com.Company
WHERE com.BusinessArea = 'Lifting Solutions' AND com.[Status] = 'Active'

--WHERE [Company] in ('AFISCM', 'CDKCERT', 'CEECERT','CERDE', 'CFICERT', 'CLTCERT', 'CLVCERT', 'CSECERT', 'CUKCERT', 'CNOEHAU', 'CNOCERT', 'CERPL', 'CyESA', 'HFIHAKL', 'TRACLEV', 'MENBE14','MENNL01','MENNL02','MENNL03','MENNL04','MENNL07','MENNL11')
GO
PRINT N'Creating [stage].[Jen_SE_StockTransactionOB20200101]'
GO
CREATE TABLE [stage].[Jen_SE_StockTransactionOB20200101]
(
[Artikelnummer] [nvarchar] (255) NULL,
[Saldo] [decimal] (18, 4) NULL,
[Lagervärde] [decimal] (18, 4) NULL,
[Belopp] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vJEN_SE_StockTransactionOB]'
GO
/****** Script for SelectTopNRows command from SSMS  ******/


CREATE VIEW [stage].[vJEN_SE_StockTransactionOB] AS
SELECT 
		CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(N'JSEJENSS','#OB#20200101',Artikelnummer, '#', W.WarehouseCode))) AS StockTransactionID
		,CONCAT(N'JSEJENSS','#OB#20200101') AS StockTransactionCode
		,CONVERT([binary](32),HASHBYTES('SHA2_256',N'JSEJENSS')) AS CompanyID
		,P.PartID
		,W.WarehouseID
		,NULL AS SalesOrderNumID
		,NULL AS PurchaseOrderNumID
		,NULL AS SalesInvoiceID
		,NULL AS PurchaseInvoiceID
		,NULL AS CustomerID
		,NULL AS SupplierID
		,CONVERT([binary](32),HASHBYTES('SHA2_256',TRIM(N'SEK'))) AS CurrencyID
		,FORMAT(GETDATE(),'yyyy-MM-dd hh:00:00') AS PartitionKey
		,NULL AS IndexKey
		,N'JSEJENSS' AS Company
		,W.WarehouseCode
		,'OB' AS TransactionCode
		,'Opening Balance' AS TransactionDescription
		,NULL AS IssuerReceiverNum
		,NULL AS OrderNum
		,NULL AS OrderLine
		,NULL AS InvoiceNum
		,NULL AS InvoiceLine
		,COALESCE(P.PartNum, OB.[Artikelnummer]) AS PartNum
		,NULL AS BinNum
		,NULL AS BatchNum
		,CAST('2020-01-01' AS date) AS TransactionDate
		,'000000'	AS TransactionTime
		,Saldo AS TransactionQty
		,Belopp AS TransactionValue
		,NULL AS CostPrice
		,NULL AS SalesUnitPrice
		,'SEK' AS Currency
		,NULL AS Reference
		,cast(NULL as date) AS AdjustmentDate
		,NULL AS InternalExternal
		,NULL AS STRes1
		,NULL AS STRes2
		,NULL AS STRes3
		,NULL AS FIFOBatchID
		,NULL AS SupplierBatchID
		,NULL AS TranDT
		,'Manual opening balance excel' AS TranSource 
  FROM [stage].[JEN_SE_StockTransactionOB20200101] OB
  left join dw.Part P ON P.Company = 'JSEJENSS' AND OB.Artikelnummer = P.PartNum
  left join dw.Warehouse W ON W.Company = 'JSEJENSS' and warehousecode= '01'
GO
PRINT N'Creating [stage].[AXL_DE_Part]'
GO
CREATE TABLE [stage].[AXL_DE_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartName] [nvarchar] (100) NULL,
[PartDescription] [nvarchar] (max) NULL,
[PartDescription2] [nvarchar] (max) NULL,
[PartDescription3] [nvarchar] (max) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[ProductGroup2] [nvarchar] (50) NULL,
[ProductGroup3] [nvarchar] (50) NULL,
[ProductGroup4] [nvarchar] (50) NULL,
[CountryOfOrigin] [nvarchar] (50) NULL,
[Brand] [nvarchar] (50) NULL,
[CommodityCode] [nvarchar] (50) NULL,
[PartNumReplacement] [nvarchar] (50) NULL,
[NetWeight] [decimal] (18, 4) NULL,
[Volume] [decimal] (18, 4) NULL,
[Material] [nvarchar] (50) NULL,
[Barcode] [nvarchar] (50) NULL,
[Reorderlevel] [decimal] (18, 4) NULL,
[MinOrderQty] [decimal] (18, 4) NULL,
[StartDate] [date] NULL,
[EndDate] [date] NULL,
[ItemStatus] [nvarchar] (50) NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vAXL_DE_Part]'
GO


CREATE VIEW [stage].[vAXL_DE_Part] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company] ,'#', TRIM([PartNum]),'#', (IIF(TRIM([PartNum]) LIKE 'IACO%' , 'MISC. CHARGES', TRIM([PartDescription]) )))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,UPPER(CONCAT([Company],'#', TRIM([PartNum]),'#', TRIM([PartDescription]))) AS PartCode
	,PartitionKey

	,UPPER([Company]) AS [Company]
	,UPPER(TRIM([PartNum])) AS [PartNum]
	,TRIM([PartName]) AS [PartName]
	,IIF(UPPER(TRIM([PartNum])) LIKE 'IACO%' , 'MISC. CHARGES', UPPER(TRIM([PartDescription]))) AS [PartDescription]
	,TRIM([PartDescription2]) AS [PartDescription2]
	,TRIM([PartDescription3]) AS [PartDescription3]
	,TRIM([ProductGroup]) AS [ProductGroup]
	,TRIM([ProductGroup2]) AS [ProductGroup2]
	,TRIM([ProductGroup3]) AS [ProductGroup3]
	,TRIM([ProductGroup4]) AS [ProductGroup4]
	,TRIM([Brand]) AS [Brand]
	,TRIM([CommodityCode]) AS [CommodityCode]
	,'' AS [PartReplacementNum]
	,[ItemStatus] AS [PartStatus]
	,MAX([CountryOfOrigin]) AS [CountryOfOrigin]
	,[NetWeight]
	,'' AS [UoM]
	,[Material]
	,[Barcode]
	,[Reorderlevel]
	,'' AS [PartResponsible]
	,MAX([StartDate]) AS [StartDate]
	,[EndDate]
FROM [stage].[AXL_DE_Part]
--WHERE [ItemStatus] <> 'D'
GROUP BY
	PartitionKey, [Company], TRIM([PartNum]), TRIM([PartName]), ([PartDescription]), TRIM([PartDescription2]), TRIM([PartDescription3]), TRIM([ProductGroup3]), TRIM([ProductGroup4]), TRIM([ProductGroup]), TRIM([ProductGroup2]), TRIM([CommodityCode]), [NetWeight], TRIM([Brand]), [Barcode], [Volume], [Material], [EndDate], [Reorderlevel], [ItemStatus]
GO
PRINT N'Creating [stage].[AXL_ES_SalesLedger]'
GO
CREATE TABLE [stage].[AXL_ES_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceAmount] [decimal] (18, 4) NULL,
[RemainAmount] [decimal] (18, 4) NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vAXL_ES_SalesLedger]'
GO
CREATE VIEW [stage].[vAXL_ES_SalesLedger] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(sl.Company, '#', TRIM(sl.CustNum), '#', TRIM(sl.InvoiceNum))))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(sl.Company))) AS CompanyID
	,UPPER(CONCAT(sl.Company, '#', TRIM(sl.CustNum), '#', TRIM(sl.InvoiceNum))) AS SalesLedgerCode
	,sl.PartitionKey

	,UPPER(sl.Company) AS Company
	,UPPER(TRIM(sl.CustNum)) AS CustomerNum
	,TRIM(sl.InvoiceNum) AS [SalesInvoiceNum]
	,IIF(so.InvoiceDate = '' OR so.InvoiceDate IS NULL, '1900-01-01', so.InvoiceDate) AS [SalesInvoiceDate] --
	,CONVERT(date, DueDate) AS SalesDueDate
	,CONVERT(date, LastPaymentDate) AS LastPaymentDate
	,[InvoiceAmount]
	,[RemainAmount] AS [RemainingInvoiceAmount]
	,NULL AS CashDiscOffered
	,NULL AS CashDiscUsed
	,NULL AS [ExchangeRate]
	,NULL AS [Currency]
	,NULL AS [VATAmount]
	,NULL AS [VATCode]
	,NULL AS [PayToName]
	,NULL AS [PayToCity]
	,NULL AS [PayToContact]
	,NULL AS [PaymentTerms]
	,sl.Res1 AS SLRes1
	,sl.Res2 AS SLRes2
	,sl.Res3 AS SLRes3
FROM stage.AXL_ES_SalesLedger sl
	LEFT JOIN stage.AXL_CZ_SOLine so ON TRIM(sl.InvoiceNum) = TRIM(so.InvoiceNum)
WHERE DueDate > '2015-01-01'
GROUP BY
	sl.PartitionKey, sl.Company, sl.CustNum, sl.InvoiceNum, sl.Res2, sl.Res1, sl.Res3, sl.[InvoiceAmount], sl.[RemainAmount], so.InvoiceDate, DueDate, LastPaymentDate
GO
PRINT N'Creating [stage].[MEN_NL_Customer]'
GO
CREATE TABLE [stage].[MEN_NL_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[CustomerName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (200) NULL,
[AddressLine2] [nvarchar] (200) NULL,
[AddressLine3] [nvarchar] (200) NULL,
[ABCCode] [nvarchar] (50) NULL,
[City] [nvarchar] (200) NULL,
[ZIP] [nvarchar] (50) NULL,
[State] [nvarchar] (100) NULL,
[CountryName] [nvarchar] (100) NULL,
[CustomerCountryCode] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (100) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNr] [nvarchar] (50) NULL,
[AccountString] [nvarchar] (100) NULL,
[District] [nvarchar] (100) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[DebiteurKey] [nvarchar] (50) NULL,
[DW_TimeStamp] [date] NULL,
[InterCompanyIdentifier] [nvarchar] (50) NULL,
[OrganizationNum] [nvarchar] (80) NULL
)
GO
PRINT N'Creating [stage].[MEN_NL_countrycode_map]'
GO
CREATE TABLE [stage].[MEN_NL_countrycode_map]
(
[PartitionKey] [varchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryDescription] [nvarchar] (50) NULL,
[EGInternal] [nvarchar] (50) NULL,
[CBSCountryCode] [nvarchar] (50) NULL,
[ISOCountryCode] [nvarchar] (50) NULL,
[CBSCountryCodeInt] [nvarchar] (50) NULL,
[CBSCountryDescription] [nvarchar] (200) NULL,
[CBSCountryAbbreviation] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vMEN_NL_Customer]'
GO
CREATE VIEW [stage].[vMEN_NL_Customer] AS
WITH CTE AS (
-- A 
SELECT [CompanyCode], [PartitionKey], [Company], [CustomerNum], [CustomerName], [AddressLine1], [AddressLine2], [AddressLine3], [ABCCode], [City], [ZIP], [State], [CountryName], [CustomerCountryCode], [CustomerGroup], [SalesRepCode], [VATRegNr], [AccountString], [District], [InternalExternal], [SalesPersonName], [DebiteurKey], [DW_TimeStamp], [InterCompanyIdentifier], [OrganizationNum], [rownum]
FROM (
SELECT CASE WHEN Company = '14' THEN  CONCAT(N'MENBE',Company) 
			ELSE  CONCAT(N'MENNL',Company) END AS CompanyCode		
	  ,[PartitionKey], [Company], [CustomerNum], [CustomerName], [AddressLine1], [AddressLine2], [AddressLine3], [ABCCode], [City], [ZIP], [State], [CountryName], [CustomerCountryCode], [CustomerGroup], [SalesRepCode], [VATRegNr], [AccountString], [District], [InternalExternal], [SalesPersonName], [DebiteurKey], [DW_TimeStamp], [InterCompanyIdentifier], [OrganizationNum]
	  ,ROW_NUMBER() OVER (PARTITION BY Company, DebiteurKey ORDER BY Countryname DESC) AS rownum
  FROM [stage].[MEN_NL_Customer]
  ) tmp WHERE  rownum = 1
)


SELECT 
--NO NEED TO USED THE UPPER() IN CustomerID. Data from source could be the same CustomerNum but diferent product. the ERP is not case sensitive.
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(CompanyCode,'#',CustomerNum))) AS CustomerID
	,CONCAT(CompanyCode,'#',CustomerNum) AS CustomerCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CompanyCode)) AS CompanyID
	,CTE.PartitionKey

	,CompanyCode AS Company
	,[CustomerNum]
	,[dbo].[ProperCase](CustomerName) MainCustomerName
    ,[dbo].[ProperCase](CustomerName) AS CustomerName
	,LEFT([AddressLine1], 100) AS [AddressLine1]
	,LEFT([AddressLine2], 100) AS [AddressLine2]
	,LEFT([AddressLine3], 100) AS [AddressLine3]
	--,NULL			AS TelephoneNum1
	--,NULL			AS TelephoneNum2
	--,NULL			AS [Email]
	,ZIP			AS [ZipCode]
	,[dbo].[ProperCase]([City]) AS	City
	,IIF(trim([State])= '',null,[State]) AS [State]
	,[District]		AS SalesDistrict
	,COALESCE(cc1.Countryname, cc2.Countryname) AS [CountryName]
	--,NULL AS Division
	--,NULL AS CustomerIndustry
	--,NULL AS CustomerSubIndustry
	,[AddressLine1] AS [AddressLine]
	,CONCAT(COALESCE(cc1.Countryname, cc2.Countryname), ', ' + trim([City]),  ', ' + TRIM([Zip]),', ' + trim(addressline1)) AS [FullAddressLine]
	,[dbo].[ProperCase](CustomerGroup) AS [CustomerGroup]
	--,NULL AS [CustomerSubGroup]
	,SalesRepCode	AS [SalesPersonCode]
	,[SalesPersonName]
	--,NULL AS [SalesPersonResponsible]
	,VATRegNr AS  [VATNum]
	--,'' AS OrganizationNum
	,AccountString AS  [AccountNum]
	,cast(CTE.InternalExternal as nvarchar(40)) AS [InternalExternal]
	,ABCCode AS [CustomerScore]
	--,NULL AS [CustomerType]

	--,NULL AS [ValidFrom]
	--,NULL AS [ValidTo]
	,Upper(CTE.CustomerCountryCode) as CountryCode
FROM CTE
LEFT JOIN (SELECT DISTINCT CountryCode, ISOCountryCode 
		FROM stage.MEN_NL_countrycode_map) AS cmp ON cmp.CountryCode = CTE.CustomerCountryCode 
LEFT JOIN dbo.CountryCodes AS cc1 ON cc1.[Alpha-2 code] = cmp.ISOCountryCode
LEFT JOIN dbo.CountryCodes AS cc2 ON cc2.[Alpha-2 code] = cmp.CountryCode
GO
PRINT N'Creating [stage].[ABK_SE_PurchaseLedger]'
GO
CREATE TABLE [stage].[ABK_SE_PurchaseLedger]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseInvoiceDate] [date] NULL,
[PurchaseDueDate] [date] NULL,
[PurchaseLastPaymentDate] [date] NULL,
[InvoiceAmount] [decimal] (18, 4) NOT NULL,
[PaidInvoiceAmount] [decimal] (18, 4) NULL,
[RemainingInvoiceAmount] [decimal] (18, 4) NULL,
[AccountingDate] [date] NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (10) NULL,
[VATAmount] [decimal] (18, 4) NULL,
[PayToName] [nvarchar] (50) NULL,
[PaymentTerms] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[IndexKey] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vABK_SE_PurchaseLedger]'
GO

CREATE VIEW [stage].[vABK_SE_PurchaseLedger] AS 
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(IndexKey), '#', TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum)  )))) AS PurchaseLedgerID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(Company)))) AS CompanyID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum))))) AS SupplierID 
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierNum))))) AS SupplierID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseInvoiceNum))))) AS PurchaseInvoiceID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM(Currency)))) AS CurrencyID
	,CONVERT(int, replace(convert(date,PurchaseInvoiceDate),'-','')) AS PurchaseInvoiceDateID 
	,UPPER(CONCAT(Company, '#', TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum))) AS PurchaseLedgerCode 
	,[PartitionKey]

	,UPPER([Company]) AS [Company]
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
	,TRIM([PurchaseOrderNum]) AS [PurchaseOrderNum]
	,TRIM([PurchaseInvoiceNum]) AS [PurchaseInvoiceNum]
	,CONVERT(date, PurchaseInvoiceDate) AS PurchaseInvoiceDate
	,CONVERT(date, PurchaseDueDate) AS PurchaseDueDate
	,CONVERT(date, PurchaseLastPaymentDate) AS PurchaseLastPaymentDate
	,InvoiceAmount AS [InvoiceLCYAmount] 
	,InvoiceAmount AS InvoiceAmount
	,IIF(Currency IN ('SEK', 'DKK', 'NOK'), (CONVERT(decimal(18,4), ExchangeRate))/100, (CONVERT(decimal(18,4), ExchangeRate))) AS [ExchangeRate]
	,[Currency] AS Currency
	,VATAmount	AS VATAmount
	--,''	AS VATCode
	,[PayToName]
	--,'' AS [PayToCity]
	--,'' AS [PayToContact]
	,PaymentTerms AS PaymentTerms
	--,'' AS [PrepaymentNum]
	--,'' AS LastPaymentNum
	,PaidInvoiceAmount AS PaidInvoiceAmount
	,RemainingInvoiceAmount AS RemainingInvoiceAmount
	--,NULL AS LinkToOriginalInvoice
	,AccountingDate AS AccountingDate
	--,NULL AS AgingPeriod
	--,NULL AS AgingSort
	--,NULL AS VATCodeDesc
	,ModifiedTimeStamp AS PLRES1
	,CreatedTimeStamp AS PLRES2
	--,'' AS PLRES3
FROM 
	[stage].[ABK_SE_PurchaseLedger]
GO
PRINT N'Creating [stage].[FOR_PL_Part]'
GO
CREATE TABLE [stage].[FOR_PL_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NOT NULL,
[PartName] [nvarchar] (100) NULL,
[PartDescription3] [nvarchar] (300) NULL,
[ProductGroup] [nvarchar] (100) NULL,
[ProductGroup2] [nvarchar] (100) NULL,
[ProductGroup3] [nvarchar] (100) NULL,
[ProductGroup4] [nvarchar] (100) NULL,
[Brand] [nvarchar] (100) NULL,
[PartStatus] [nvarchar] (50) NULL,
[NetWeight] [decimal] (18, 8) NULL,
[UoM] [nvarchar] (50) NULL,
[Barcode] [nvarchar] (50) NULL,
[ReOrderLevel] [decimal] (18, 8) NULL,
[StartDate] [date] NULL,
[PARes1] [nvarchar] (50) NULL,
[GrupaGTU] [nvarchar] (50) NULL,
[PKWIU] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[FOR_PL_mapProductGroup]'
GO
CREATE TABLE [stage].[FOR_PL_mapProductGroup]
(
[Cat 2] [nvarchar] (255) NULL,
[Cat 1 symb] [nvarchar] (255) NULL,
[Cat 2 symb] [nvarchar] (255) NULL,
[grupa2] [nvarchar] (255) NULL
)
GO
PRINT N'Creating [stage].[vFOR_PL_Part]'
GO
CREATE VIEW [stage].[vFOR_PL_Part] AS
--COMMENT EMPTY FIELDS // ADD TRIM() UPPER() INTO PartID 23-01-12 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]) ,'#', TRIM(PartNum))))) as PartID
	--CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([PartNum])))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',[Company])) AS CompanyID
	,CONCAT([Company],'#',TRIM([PartNum])) AS PartCode
	,PartitionKey

	,[Company]
	,UPPER(TRIM([PartNum])) AS PartNum
	,[PartName]
	,[PartDescription3]	AS [PartDescription]
	,GrupaGTU	AS [PartDescription2]
	,PKWIU		AS [PartDescription3]
	--,''			AS MainSupplier
	--,''			AS AlternativeSupplier
	,case when [ProductGroup]= N'Środki trwałe' then 'Fixed assets'
			else CONCAT([ProductGroup], ' - ' + pg.[Cat 2]) end AS [ProductGroup]
	,case when [ProductGroup2]= N'Środki trwałe' then 'Fixed assets'else [ProductGroup2] end as  [ProductGroup2]
	,case when [ProductGroup3]= N'Środki trwałe' then 'Fixed assets' else [ProductGroup3] end as  [ProductGroup3]
	,[ProductGroup4]
	,[Brand]
	--,'' AS [CommodityCode]
	--,'' AS PartReplacementNum
	,PartStatus
	--,'' AS [CountryOfOrigin]
	,[NetWeight]
	,UoM
	--,''	AS [Material]
	,[Barcode]
	,[ReOrderLevel]
	--,'' PartResponsible
	,[StartDate]
	--,'' AS [EndDate]
FROM [stage].[FOR_PL_Part] P 
LEFT JOIN [stage].[FOR_PL_mapProductGroup]  pg on P.[ProductGroup] = pg.grupa2
GO
PRINT N'Creating [dm_LS].[dimCustomerAgreement]'
GO
CREATE VIEW [dm_LS].[dimCustomerAgreement] AS
SELECT ca.[CompanyID]
,ca.[CustomerID]
,ca.[PartID]
,ca.[CurrencyID]
,ca.[Company]
,ca.[CustomerNum]
,ca.[PartNum]
,ca.[AgreementCode]
,ca.[AgreementDescription]
,ca.[DiscountPercent]
,ca.[UnitPrice]
,ca.[AgreementQty]
,ca.[Currency]
,ca.[DelivTime]
,ca.[AgreementStart]
,ca.[AgreementEnd]
,ca.[CustomerTerms]
,ca.[FulfilledQty]
,ca.[RemainingQty]
,ca.[UoM]
,ca.[PartitionKey]
,ca.[ExchangeRate]
FROM [dm].[DimCustomerAgreement] ca
LEFT JOIN dbo.Company com ON ca.Company = com.Company
WHERE com.BusinessArea = 'Lifting Solutions' AND com.[Status] = 'Active'


--WHERE [Company] in ('AFISCM', 'CDKCERT', 'CEECERT', 'CFICERT', 'CLTCERT', 'CLVCERT', 'CSECERT', 'CUKCERT', 'CNOEHAU', 'CNOCERT', 'CERPL', 'CyESA', 'HFIHAKL', 'TRACLEV',
--'MENBE14','MENNL01','MENNL02','MENNL03','MENNL04','MENNL07','MENNL11')
GO
PRINT N'Creating [stage].[SVE_SE_Warehouse]'
GO
CREATE TABLE [stage].[SVE_SE_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseID] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL,
[WarehouseDistrict] [nvarchar] (50) NULL,
[WarehouseAddress] [nvarchar] (100) NULL,
[WarehouseDescription] [nvarchar] (max) NULL,
[WarehouseType] [nvarchar] (50) NULL,
[WarehouseCountry] [nvarchar] (50) NULL,
[WarehouseSite] [nvarchar] (50) NULL,
[Site] [varchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vSVE_SE_Warehouse]'
GO

CREATE VIEW [stage].[vSVE_SE_Warehouse] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([WarehouseCode])) AS [WarehouseCode]
	,TRIM([WarehouseName]) AS [WarehouseName]
	,TRIM([WarehouseDistrict]) AS [WarehouseDistrict]
	,TRIM([WarehouseAddress]) AS [WarehouseAddress]
	,TRIM([WarehouseDescription]) AS [WarehouseDescription]
	,TRIM([WarehouseType]) AS [WarehouseType]
	,TRIM([WarehouseCountry]) AS [WarehouseCountry]
	,TRIM([WarehouseSite]) AS [WarehouseSite]
FROM [stage].[SVE_SE_Warehouse]

GROUP BY 
	PartitionKey,[Company],[WarehouseCode],[WarehouseName],[WarehouseDistrict],[WarehouseAddress],[WarehouseDescription],[WarehouseType],[WarehouseCountry], [WarehouseSite]
GO
PRINT N'Creating [stage].[HAK_FI_Part]'
GO
CREATE TABLE [stage].[HAK_FI_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartDescription] [nvarchar] (max) NULL,
[PartDescription2] [nvarchar] (25) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[ProductGroup2] [nvarchar] (50) NULL,
[CommodityCode] [nvarchar] (14) NULL,
[CountryOfOrigin] [nvarchar] (50) NULL,
[NetWeight] [decimal] (18, 8) NULL,
[Site] [nvarchar] (50) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[ReorderLevel] [decimal] (22, 8) NULL
)
GO
PRINT N'Creating [stage].[vHAK_FI_Part]'
GO
CREATE VIEW [stage].[vHAK_FI_Part] AS
--COMMENT EMPTY FIELDS // ADD UPPER()TRIM() INTO PartID 2022
SELECT 
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company] ,'#', TRIM(UPPER([PartNum]))))) AS PartID -- ,'#', TRIM(UPPER([Site]))
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]),'#', TRIM([PartNum]))))) AS PartID -- ,'#', TRIM(UPPER([Site]))
	,CONVERT([binary](32),HASHBYTES('SHA2_256',[Company])) AS CompanyID
	,UPPER(CONCAT([Company],'#',TRIM([PartNum]))) AS PartCode
	,PartitionKey

	,[Company]
	,UPPER(TRIM(PartNum)) AS PartNum
	--,'' AS [PartName]
	,TRIM([PartDescription]) AS [PartDescription]
	,TRIM([PartDescription2]) AS [PartDescription2]
	--,'' AS [PartDescription3]
	--,NULL AS MainSupplier
	--,NULL AS AlternativeSupplier
	,TRIM([ProductGroup]) AS [ProductGroup]
	,TRIM([ProductGroup2]) AS [ProductGroup2]
	--,'' AS [ProductGroup3]
	--,'' AS [ProductGroup4]
	--,'' AS [Brand]
	,TRIM([CommodityCode]) AS [CommodityCode]
	--,'' AS PartReplacementNum
	--,'' AS PartStatus
	,TRIM([CountryOfOrigin]) AS [CountryOfOrigin]
	,[NetWeight]
	--,'' AS [UoM]
	--,'' AS [Material]
	--,'' AS [Barcode]
	,MAX([ReorderLevel]) AS [ReOrderLevel]
	--,'' AS PartResponsible
	--,'' AS [StartDate]
	--,'' AS [EndDate]
FROM [stage].[HAK_FI_Part]

GROUP BY 
	PartitionKey, Company, TRIM(PartNum), TRIM([CommodityCode]), TRIM([CountryOfOrigin]), NetWeight, TRIM([PartDescription]), TRIM([PartDescription2]), TRIM([ProductGroup]), TRIM([ProductGroup2])
GO
PRINT N'Creating [stage].[FOR_ES_Warehouse]'
GO
CREATE TABLE [stage].[FOR_ES_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL,
[WarehouseDistrict] [nvarchar] (50) NULL,
[WarehouseAddress] [nvarchar] (100) NULL,
[WarehouseCountry] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vFOR_ES_Warehouse]'
GO







CREATE VIEW [stage].[vFOR_ES_Warehouse] AS

SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey
	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([WarehouseCode])) AS [WarehouseCode]
	,[WarehouseName]
	,[WarehouseDistrict]
	,[WarehouseAddress]
	--,''	AS [WarehouseDescription]
	--,''	AS [WarehouseType]
	,[WarehouseCountry]
	--,'' AS [WarehouseSite]

FROM [stage].[FOR_ES_Warehouse]
GO
PRINT N'Creating [stage].[CER_UK_Supplier]'
GO
CREATE TABLE [stage].[CER_UK_Supplier]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[MainSupplierName] [nvarchar] (100) NULL,
[SupplierName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[AddressLine3] [nvarchar] (100) NULL,
[TelephoneNum] [nvarchar] (20) NULL,
[Email] [nvarchar] (200) NULL,
[City] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (100) NULL,
[Region] [nvarchar] (50) NULL,
[SupplierCategory] [nvarchar] (50) NULL,
[SupplierResponsible] [nvarchar] (50) NULL,
[AccountNum] [nvarchar] (50) NULL,
[VATNum] [nvarchar] (50) NULL,
[OrganizationNum] [nvarchar] (100) NULL,
[InternalExternal] [nvarchar] (100) NULL,
[CodeOfConduct] [nvarchar] (200) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[Reference] [nvarchar] (100) NULL,
[SupplierScore] [nvarchar] (50) NULL,
[MinOrderQty] [nvarchar] (50) NULL,
[Website] [nvarchar] (100) NULL,
[Comments] [nvarchar] (max) NULL,
[EntityType] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_UK_Supplier]'
GO

CREATE VIEW [stage].[vCER_UK_Supplier] AS

SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID
    ,UPPER(CONCAT([Company],'#',TRIM([SupplierNum]))) AS SupplierCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([SupplierNum])) AS SupplierNum
	,[dbo].[ProperCase](TRIM(MainSupplierName)) AS MainSupplierName
	,[dbo].[ProperCase](TRIM(SupplierName)) AS SupplierName
	,TRIM([AddressLine2]) AS AddressLine2
    ,TRIM([AddressLine3]) AS AddressLine3
	,[TelephoneNum]
	,LEFT([Email],100) AS Email
	,PARSENAME(REPLACE(dbo.SplitAddress(CONCAT(AddressLine1,' ',AddressLine2,' ',AddressLine3)), '^', '.'), 3) AS AddressLine1 -- TRIM([AddressLine1]) AS AddressLine1 2023-04-04 SB & TO 
    ,IIF(TRIM(ZipCode) is Null,PARSENAME(REPLACE(dbo.SplitAddress(CONCAT(AddressLine1,' ',AddressLine2,' ',AddressLine3)), '^', '.'), 2), trim(ZipCode)) AS ZipCode -- ,TRIM([ZipCode]) AS ZipCode 2023-04-04 SB & TO 
    ,IIF(TRIM(City)    IN (Null,''),PARSENAME(REPLACE(dbo.SplitAddress(CONCAT(AddressLine1,' ',AddressLine2,' ',AddressLine3)), '^', '.'), 1), trim(City)) AS City -- ,TRIM([ZipCode]) AS ZipCode 2023-04-04 SB & TO 
	,District
	,case when IIF(CountryName is null, 'GB', CountryCode) = 'UK' then 'GB'
	else IIF(CountryName is null, 'GB', CountryCode)
	end AS CountryCode
	,IIF(CountryName is null, 'United Kingdom', CountryName) AS CountryName
	,[Region] 
	,TRIM([SupplierCategory]) AS SupplierCategory 
	,TRIM([SupplierResponsible]) AS SupplierResponsible
	,[dbo].[ProperCase](TRIM(concat (addressline1+' '+ addressline2, null))) AS AddressLine
	,[dbo].[ProperCase](TRIM(concat_ws(',',coalesce([dbo].[ProperCase](CountryName),null),IIF(City= ' ',null,trim(substring(replace([dbo].[ProperCase](AddressLine3),' ', ''), 6, 100))),IIF(ZipCode= ' ',null,[dbo].[udf_GetNumeric]([Addressline3]))
		,coalesce(IIF([addressline1]= ' ',null,[addressline1]),IIF([addressline2]= ' ',null,[addressline2]))
		,coalesce(IIF([addressline2]= ' ',null,[addressline2]),IIF([addressline3]= ' ',null,[addressline3]))))) AS FullAddressLine
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [AccountNum])) AS [AccountNum] --required by Ian Morgan & approved by Emil T on 20200630
	,[VATNum]
	,OrganizationNum
	,iif(entitytype = '1',1,0) AS [InternalExternal]
	,[CodeOfConduct]
	,CustomerNum
	,TRIM([SupplierScore]) AS SupplierScore
	,COALESCE(TRY_CONVERT(decimal(18,4), [MinOrderQty]),0) AS [MinOrderQty]
	,0 AS MinOrderValue	
	,[Website]
	,TRIM([Comments]) AS Comments
	,iif(suppliercategory = 'RESALE',1,0) AS IsMaterialSupplier
	--,'' AS SRes1
	--,'' AS SRes2
	--,'' AS SRes3
FROM [stage].[CER_UK_Supplier]
--GROUP BY 
--      [PartitionKey],[Company],[SupplierNum],MainSupplierName,[SupplierName],[AddressLine1],[AddressLine2],[AddressLine3],[City],[ZipCode],[Region],District, [CountryName]
--	  ,[SupplierCategory],[SupplierResponsible],[Reference],[AccountNum],[VATNum],[SupplierScore],[CustomerNum],[TelephoneNum],[Email],[Website],[CodeOfConduct]
--	  ,[MinOrderQty],[InternalExternal],[Comments], OrganizationNum
GO
PRINT N'Creating [stage].[CER_EE_Part]'
GO
CREATE TABLE [stage].[CER_EE_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartDescription] [nvarchar] (25) NULL,
[PartDescription2] [nvarchar] (25) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[ProductGroup2] [nvarchar] (50) NULL,
[CommodityCode] [nvarchar] (14) NULL,
[CountryOfOrigin] [nvarchar] (50) NULL,
[NetWeight] [decimal] (18, 8) NULL,
[SupplierCode] [nvarchar] (10) NULL,
[ReorderLevel] [decimal] (20, 8) NULL,
[EAN] [nvarchar] (50) NULL,
[LabelFormat] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_EE_Part]'
GO
CREATE VIEW [stage].[vCER_EE_Part] AS
--COMMENT EMPTY FIELDS / ADD UPPER()TRIM() INTO PartID 2022-12-15 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
	--CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',[PartNum]))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',[Company])) AS CompanyID
	,CONCAT([Company],'#',[PartNum]) AS PartCode
	,PartitionKey

	,[Company]
	,[PartNum] 
	--,'' AS [PartName]
	,[PartDescription]
	,[PartDescription2]
	--,'' AS [PartDescription3]
	--,NULL AS MainSupplier
	--,NULL AS AlternativeSupplier
	,[ProductGroup]
	,[ProductGroup2]
	--,'' AS [ProductGroup3]
	,[LabelFormat] AS [ProductGroup4]
	--,'' AS [Brand]
	,[CommodityCode]
	--,'' AS PartReplacementNum
	--,'' AS PartStatus
	,[CountryOfOrigin]
	,[NetWeight]
	--,'' AS UoM
	--,'' AS [Material]
	,EAN AS [Barcode]
	,[ReOrderLevel]
	--,'' AS PartResponsible
	--,'' AS [StartDate]
	--,'' AS [EndDate]
FROM [stage].[CER_EE_Part]
GO
PRINT N'Creating [stage].[ROR_SE_Supplier]'
GO
CREATE TABLE [stage].[ROR_SE_Supplier]
(
[PartitionKey] [nvarchar] (50) NULL,
[Company] [nvarchar] (8) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[SupplierName] [nvarchar] (50) NULL,
[ParentSupplierName] [nvarchar] (500) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[TelephoneNum1] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[City] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[VATNum] [nvarchar] (50) NULL,
[TelephoneNum2] [nvarchar] (50) NULL,
[Email] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[AccountNum] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[SupplierGroup] [nvarchar] (50) NULL,
[SupplierSubGroup] [nvarchar] (50) NULL,
[SupplierIndustry] [nvarchar] (50) NULL,
[SupplierSubIndustry] [nvarchar] (50) NULL,
[PurchaserPers] [nvarchar] (50) NULL,
[PurchaserPersonName] [nvarchar] (500) NULL,
[SupplierResponsible] [nvarchar] (50) NULL,
[OrgNum] [nvarchar] (50) NULL,
[IsAxInterInternal] [nvarchar] (50) NULL,
[IsBusinessAreaInternal] [nvarchar] (50) NULL,
[IsCompanyGroupInternal] [nvarchar] (50) NULL,
[CodeOfConduct] [nvarchar] (50) NULL,
[SupplierScore] [nvarchar] (50) NULL,
[SupplierType] [nvarchar] (50) NULL,
[MinOrderQty] [nvarchar] (50) NULL,
[MinOrderValue] [nvarchar] (50) NULL,
[MinOrderValueCurrency] [nvarchar] (50) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL,
[IsActiveRecord] [nvarchar] (50) NULL,
[Website] [nvarchar] (500) NULL,
[Comments] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[ROR_SE_Part]'
GO
CREATE TABLE [stage].[ROR_SE_Part]
(
[PartitionKey] [nvarchar] (50) NULL,
[Company] [nvarchar] (8) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartName] [nvarchar] (max) NULL,
[PartDescription] [nvarchar] (max) NULL,
[PartDescription2] [nvarchar] (max) NULL,
[PartDescription3] [nvarchar] (max) NULL,
[CommodityCode] [nvarchar] (50) NULL,
[Material] [nvarchar] (50) NULL,
[Barcode] [nvarchar] (50) NULL,
[ReOrderLevel] [nvarchar] (max) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[ProductGroup2] [nvarchar] (50) NULL,
[ProductGroup3] [nvarchar] (50) NULL,
[ProductGroup4] [nvarchar] (max) NULL,
[Brand] [nvarchar] (50) NULL,
[PartReplacementNum] [nvarchar] (max) NULL,
[PartStatus] [nvarchar] (50) NULL,
[CountryOfOrigin] [nvarchar] (max) NULL,
[NetWeight] [nvarchar] (50) NULL,
[UoM] [nvarchar] (50) NULL,
[PartResponsible] [nvarchar] (max) NULL,
[StartDate] [nvarchar] (8) NULL,
[EndDate] [nvarchar] (max) NULL,
[MainSupplier] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vROR_SE_Part]'
GO
CREATE VIEW [stage].[vROR_SE_Part] AS
--COMMENT EMPTY FIELDS 2022-12-22  VA
--NO NEED TO USED THE UPPER() IN PartID. Data from source could be the same PartNum but different  product. '10031OR' has an example.
SELECT
	
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(p.Company,'#', TRIM([PartNum])))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', p.Company)) AS CompanyID
	,CONCAT(p.Company, '#', TRIM([PartNum])) AS PartCode
	,IIF(p.PartitionKey is NULL, Getdate(), p.PartitionKey) AS PartitionKey

	,p.[Company]
	,TRIM([PartNum]) AS [PartNum]
	,TRIM([PartName]) AS [PartName]
	,TRIM([PartDescription]) AS [PartDescription]
	,TRIM([PartDescription2]) AS [PartDescription2]
	,TRIM([PartDescription3]) AS [PartDescription3]
	,CONCAT(TRIM(MainSupplier), ' - ', s.SupplierName) AS MainSupplier
	--,'' AS AlternativeSupplier
	,TRIM([ProductGroup]) AS [ProductGroup]
	,TRIM([ProductGroup2]) AS [ProductGroup2]
	,TRIM([ProductGroup3]) AS [ProductGroup3]
	,TRIM([ProductGroup4]) AS [ProductGroup4]
	,TRIM([Brand]) AS [Brand]
	,TRIM([CommodityCode]) AS [CommodityCode]
	,TRIM([PartReplacementNum]) AS [PartReplacementNum]
	,IIF(TRIM([PartStatus]) = '', 'Aktiv', TRIM([PartStatus])) AS [PartStatus]
	,TRIM([CountryOfOrigin]) AS [CountryOfOrigin]
	,TRY_CONVERT(decimal (18,4), [NetWeight]) AS [NetWeight]
	,TRIM([UoM]) AS [UoM]
	,TRIM([Material]) AS [Material]
	,TRIM([Barcode]) AS [Barcode]
	,[ReOrderLevel]
	,[PartResponsible]
	,CONVERT(date, [StartDate]) AS [StartDate]
	,CONVERT(date, [EndDate]) AS [EndDate]
	--,'' AS PRes1
	--,'' AS PRes2
	--,'' AS PRes3
FROM [stage].[Ror_SE_Part] p
	LEFT JOIN [stage].[ROR_SE_Supplier] s ON p.MainSupplier = s.SupplierNum
WHERE p.PartitionKey is not null
GO
PRINT N'Creating [dm_LS].[fctSalesOrder]'
GO



CREATE VIEW [dm_LS].[fctSalesOrder] AS

SELECT 
 so.[SalesOrderID]
,so.[SalesOrderNumID]
,so.[CustomerID]
,so.[CompanyID]
,so.[PartID]
,so.[WarehouseID]
,so.[ProjectID]
,so.[SalesPersonNameID]
,so.[DepartmentID]
,so.[SalesOrderDateID]
,so.[Company]
,so.[CustomerNum]
,so.[SalesOrderNum]
,so.[SalesOrderLine]
,so.[SalesOrderSubLine]
,so.[SalesOrderType]
,so.[SalesOrderCategory]
,so.[SalesOrderDate]
,so.[NeedbyDate]
,so.[ExpDelivDate]
,so.[ConfirmedDelivDate]
,so.[SalesInvoiceNum]
,so.[SalesOrderQty]
,so.[DelivQty]
,so.[RemainingQty]
,so.[UoM]
,so.[UnitPrice]
,so.[UnitCost]
,so.[Currency]
,so.[ExchangeRate]
,so.[OpenRelease]
,so.[OrderStatus]
,so.[DiscountAmount]
,so.[DiscountPercent]
,so.[PartNum]
,so.[PartType]
,so.[PartStatus]
,so.[SalesPersonName]
,so.[WarehouseCode]
,so.[SalesChannel]
,so.[AxInterSalesChannel]
,so.[Department]
,so.[ProjectNum]
,so.[ActualDelivDate]
,so.[SalesInvoiceQty]
,so.[TotalMiscChrg]
,so.[IsUpdatingStock]
,so.[SORes1]
,so.[SORes2]
,so.[SORes3]
,so.[SORes4]
,so.[SORes5]
,so.[SORes6]
FROM dm.FactSalesOrder so
LEFT JOIN dbo.Company com ON so.Company = com.Company
WHERE com.BusinessArea = 'Lifting Solutions' AND com.[Status] = 'Active'

--WHERE Company  in ('AFISCM', 'CDKCERT', 'CEECERT', 'CFICERT', 'CLTCERT', 'CLVCERT', 'CSECERT', 'CUKCERT', 'CNOEHAU', 'CNOCERT', 'CERPL', 'CyESA', 'HFIHAKL', 'TRACLEV'
--				,'MENBE14','MENNL01','MENNL02','MENNL03','MENNL04','MENNL07','MENNL11')  -- LS basket
GO
PRINT N'Creating [stage].[JEN_SE_SalesLedger]'
GO
CREATE TABLE [stage].[JEN_SE_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[VATPaidAmountLCU] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL
)
GO
PRINT N'Creating [stage].[vJEN_SE_SalesLedger]'
GO

CREATE VIEW [stage].[vJEN_SE_SalesLedger] AS
--COMMENT EMPTY FIELD / ADD UPPER()TRIM() INTO CustomerID 2022-12-19
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ), '#', InvoiceNum))) AS SalesLedgerID,
	CONVERT([binary](32),HASHBYTES('SHA2_256', Company)) AS CompanyID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustNum))))) AS CustomerID,
	--CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) )))) AS CustomerID,
	CONCAT(Company,'#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ), '#', InvoiceNum) AS SalesLedgerCode,
	PartitionKey,

	Company,
	TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ) AS CustomerNum,
	InvoiceNum AS SalesInvoiceNum,
	InvoiceDate	AS SalesInvoiceDate,
	CONVERT(date, DueDate) AS SalesDueDate,
	CONVERT(date, LastPaymentDate) AS SalesLastPaymentDate,
	--NULL AS InvoiceAmount,
	--NULL AS PaidInvoiceAmount,
	--NULL AS RemainingInvoiceAmount,
	1 AS ExchangeRate,
	'SEK' AS Currency,
	VATPaidAmountLCU AS VATAmount, -- added 20230328 after Sam's request
	--'' AS VATCode,
	--'' AS PayToName,
	--'' AS PayToCity,
	--'' AS PayToContact,
	--'' AS PaymentTerms,
	--'' AS SLRes1,
	--'' AS SLRes2,
	--'' AS SLRes3
	'1900-01-01' AS AccountingDate
	--,'' AS AgingPeriod
	--,'' AS AgingSort
	--,'' AS VATCodeDesc
	--,'' AS LinkToOriginalInvoice
FROM 
	stage.JEN_SE_SalesLedger
GO
PRINT N'Creating [stage].[JEN_SK_Warehouse]'
GO
CREATE TABLE [stage].[JEN_SK_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseNum] [nvarchar] (50) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL,
[Addressline1] [nvarchar] (200) NULL,
[Addressline2] [nvarchar] (200) NULL,
[Addressline3] [nvarchar] (200) NULL,
[City] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vJEN_SK_Warehouse]'
GO



CREATE VIEW [stage].[vJEN_SK_Warehouse] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseNum]))))) AS WarehouseID
	,PartitionKey

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([WarehouseNum])) AS [WarehouseCode]
	,[WarehouseName]
	,Addressline3 AS [WarehouseDistrict]
	,LEFT(CONCAT(Addressline1, ', ', Addressline2, ', ', Addressline3)  , 200) AS [WarehouseAddress]
	,'' AS [WarehouseDescription]
	,'' AS [WarehouseType]
	,'' AS [WarehouseCountry]
	,'' AS [WarehouseSite]
FROM [stage].[JEN_SK_Warehouse]
GO
PRINT N'Creating [stage].[FOR_ES_SalesLedger]'
GO
CREATE TABLE [stage].[FOR_ES_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[SalesInvoiceNum] [nvarchar] (50) NULL,
[SalesInvoiceDate] [datetime] NULL,
[DueDate] [datetime] NULL,
[InvoiceAmount] [decimal] (18, 8) NULL,
[RemainingInvoiceAmount] [decimal] (18, 8) NULL,
[ExchangeRate] [decimal] (18, 8) NULL,
[Currency] [nvarchar] (50) NULL,
[VATAmount] [decimal] (18, 8) NULL,
[VATCode] [nvarchar] (50) NULL,
[PaymentTerms] [nvarchar] (50) NULL,
[PayMethod] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vFOR_ES_SalesLedger]'
GO
CREATE view [stage].[vFOR_ES_SalesLedger] AS 
--COMMENT EMPTY FIELDS 2022-12-21 VA
SELECt
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum), '#', TRIM(SalesInvoiceNum))))) AS SalesLedgerID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID,
	UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum), '#', TRIM(SalesInvoiceNum))) AS SalesLedgerCode,
	PartitionKey,

	Company,
	CustomerNum,
	SalesInvoiceNum as SalesInvoiceNum,
	SalesInvoiceDate,
	CONVERT(date, DueDate) AS SalesDueDate,
	--'' AS SalesLastPaymentDate,
	InvoiceAmount,
	--0 AS RemainingInvoiceAmount,
	ExchangeRate,
	Currency,
	VATAmount,
	VATCode,
	--'' AS PayToName,
	--'' AS PayToCity,
	--'' AS PayToContact,
	PaymentTerms,
	--'' AS SLRes1,
	--'' AS SLRes2,
	--'' AS SLRes3
	--,NULL			AS PaidInvoiceAmount
	'1900-01-01' AS AccountingDate
	--,NULL AS AgingPeriod
	--,NULL AS AgingSort
	--,NULL AS VATCodeDesc
	--,NULL AS LinkToOriginalInvoice
FROM 
	stage.FOR_ES_SalesLedger
--GROUP BY [PartitionKey],[Company],CustomerNum,SalesInvoiceNum,[DueDate],[LastPaymentDate]
GO
PRINT N'Creating [stage].[LEX_FR_Customer]'
GO
CREATE TABLE [stage].[LEX_FR_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[MainCustomerName] [nvarchar] (50) NULL,
[CustomerName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (50) NULL,
[Email] [nvarchar] (200) NULL,
[CustomerABC] [nvarchar] (50) NULL,
[City] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[Division] [nvarchar] (50) NULL,
[CustomerIndustry] [nvarchar] (50) NULL,
[CustomerSubIndustry] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[SalesPersonResponsible] [nvarchar] (50) NULL,
[VatRegNo] [nvarchar] (50) NULL,
[AccountString] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[CustomerType] [nvarchar] (50) NULL,
[Commercial2] [nvarchar] (50) NULL,
[Commercial3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vLEX_FR_Customer]'
GO

CREATE VIEW [stage].[vLEX_FR_Customer] AS
--COMMENT EMPTY FIELDS / ADD UPPER()TRIM() INTO CustomerID 2022-12-14 VA
SELECT 
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustomerNum)))) AS CustomerID
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
    ,CONCAT([Company], '#', TRIM([CustomerNum])) AS CustomerCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [Company])) AS CompanyID
	,PartitionKey

	,Company
    ,TRIM(CustomerNum) AS CustomerNum
	,MainCustomerName
    ,[dbo].[ProperCase](CustomerName) AS CustomerName
    ,[AddressLine1]
    ,[AddressLine2]
    ,[AddressLine3]
	,[TelephoneNumber1] AS [TelephoneNum1]
	--,'' AS [TelephoneNum2]
	,[Email]
	,ZipCode
    ,IIF([City]= ' ', null, [dbo].[ProperCase]([City])) AS [City]    
    ,IIF([State]= ' ', null, [State]) AS [State]
	,[District] AS [SalesDistrict]
    ,[dbo].[ProperCase](customer.CountryName) AS CountryName
	,Division
	,CustomerIndustry
	,CustomerSubIndustry
	,[dbo].[ProperCase](TRIM(CONCAT(AddressLine1,' ',AddressLine2))) AS AddressLine
	,[dbo].[ProperCase](concat_ws(',',coalesce(customer.CountryName,null),coalesce(IIF([State]= ' ',null,[State]),IIF(City= ' ',null,City),IIF(ZipCode= ' ',null,ZipCode)),IIF([AddressLine3]=' ',null, [AddressLine3])
		,coalesce(IIF([addressline1]= ' ',null,[addressline1]),IIF([addressline2]= ' ',null,[addressline2]))
		,coalesce(IIF([addressline2]= ' ',null,[addressline2]),IIF([addressline3]= ' ',null,[addressline3])))) AS FullAddressLine
    ,[dbo].[ProperCase](CustomerGroup) AS CustomerGroup
	,[dbo].[ProperCase](CustomerSubGroup) AS CustomerSubGroup
	,[SalesRepCode] AS [SalesPersonCode]
	,[dbo].[ProperCase](SalesPersonName) AS SalesPersonName
	,Commercial3 AS [SalesPersonResponsible] -- Should potentially be put into "Extra field" instead - SB 2022-11-30
    ,TRIM([VatRegNo]) AS [VATNum]
	--,'' AS OrganizationNum 
	,[AccountString] AS [AccountNum]
	--,'' AS [InternalExternal]
	,Commercial2 AS [CustomerScore]  -- Should potentially be put into "Extra field" instead - SB 2022-11-30
	,CustomerType
	,case when len(trim(customer.CountryName)) = 3  then cc.[Alpha-2 code]
	else customer.CountryName
	end as CountryCode
FROM [stage].[LEX_FR_Customer] as customer
	left join dbo.CountryCodes as cc
		ON trim(customer.CountryName) = cc.[Alpha-3 code]
GO
PRINT N'Creating [stage].[HAK_FI_PurchaseInvoice]'
GO
CREATE TABLE [stage].[HAK_FI_PurchaseInvoice]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaseOrderType] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[PurchaseInvoiceLine] [nvarchar] (50) NULL,
[PurchaseInvoiceType] [nvarchar] (50) NULL,
[PurchaseInvoiceDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PurchaseInvoiceQty] [decimal] (18, 4) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[VATAmount] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PurchaserName] [nvarchar] (100) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[PurchaseChannel] [nvarchar] (50) NULL,
[LastPaymentNum] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vHAK_FI_PurchaseInvoice]'
GO
CREATE     VIEW [stage].[vHAK_FI_PurchaseInvoice] AS
--COMMENT EMPTY FIELDS 2022-12-21 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum),'#',TRIM(PurchaseOrderNum),'#',TRIM(PurchaseOrderLine),'#'
		,TRIM(PurchaseOrderSubLine),'#',TRIM(PurchaseInvoiceNum), '#', TRIM(PurchaseInvoiceLine), '#', PartNum, '#', UnitPrice, '#', DiscountAmount
		, '#', PurchaseInvoiceQty, '#', TRIM(WarehouseCode),'#',TRIM(LastPaymentNum))))) AS PurchaseInvoiceID --'#', PurchaseOrderType
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseInvoiceNum), '#', TRIM(PurchaseInvoiceLine), '#', PartNum)) AS PurchaseInvoiceCode
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum))) AS PurchaseOrderNumCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum),'#',TRIM(PurchaseOrderLine),'#',TRIM(PurchaseInvoiceNum))))) AS PurchaseOrderID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum))))) AS SupplierID
    ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT(int, replace(PurchaseInvoiceDate,'-','')) AS PurchaseInvoiceDateID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#', TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum),'#',TRIM(PurchaseOrderNum),'#',TRIM(LastPaymentNum))))) AS PurchaseLedgerID --match PurchaseLedgerID in [vSCM_FI_PurchaseLedger]
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum),'#',TRIM(PurchaseOrderNum))) AS PurchaseOrderCode
	,PartitionKey

	,UPPER(TRIM(Company)) AS Company
	,UPPER(TRIM(PurchaseOrderNum)) AS PurchaseOrderNum
	,UPPER(TRIM(PurchaseOrderLine)) AS PurchaseOrderLine
	,UPPER(TRIM(PurchaseOrderSubLine)) AS PurchaseOrderSubLine
	,PurchaseOrderType
	,UPPER(TRIM(PurchaseInvoiceNum)) AS PurchaseInvoiceNum
	,UPPER(TRIM(PurchaseInvoiceLine)) AS PurchaseInvoiceLine
	,PurchaseInvoiceType
	,PurchaseInvoiceDate
	,ActualDelivDate
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,PurchaseInvoiceQty
	,UoM
	,UnitPrice
	--,0 AS DiscountPercent
	,DiscountAmount
	,TotalMiscChrg
	,VATAmount
	,Currency
	,ExchangeRate
	,CreditMemo
	,PurchaserName
	,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
	,PurchaseChannel
	--,'' AS Comment
	--,'' AS PIRes1
	--,'' AS PIRes2
	--,'' AS PIRes3
	--,'' AS OrderDelivLineNum
FROM stage.HAK_FI_PurchaseInvoice

GROUP BY
	PartitionKey, Company, PurchaseOrderNum, PurchaseInvoiceNum, SupplierNum, PartNum, PurchaseOrderLine, PurchaseOrderSubLine, PurchaseInvoiceQty,UoM, UnitPrice, WarehouseCode,PurchaserName, 
	PurchaseInvoiceLine, PurchaseInvoiceType, PurchaseInvoiceDate, ActualDelivDate, TotalMiscChrg, VATAmount, CreditMemo, PurchaseOrderType,DiscountAmount,Currency,ExchangeRate,PurchaseChannel, LastPaymentNum --, PurchaseOrderType, [Site], OrderDelivLineNum, , DiscountPercent, PurchaserName, PurchaseInvoiceLine, PurchaseInvoiceType, PurchaseInvoiceDate, ActualDelivDate, TotalMiscChrg, CreditMemo
GO
PRINT N'Creating [stage].[JEN_NB_SOLine]'
GO
CREATE TABLE [stage].[JEN_NB_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderRel] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (100) NULL,
[PartNum] [nvarchar] (50) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Indexkey] [nvarchar] (50) NULL,
[Site] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[UnitPriceOCY] [decimal] (18, 4) NULL,
[UnitCostOCY] [decimal] (18, 4) NULL,
[DiscountAmountOCY] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vJEN_NB_SOLine]'
GO
CREATE VIEW [stage].[vJEN_NB_SOLine] AS
--COMMENT EMPTY FIELDS // ADD TRIM() INTO CustomerID,PartID 23-01-03 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(PartNum), '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine), '#', Indexkey)))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', OrderNum, '#', OrderLine, '#', InvoiceNum)))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ), '#', InvoiceNum)))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#',TRIM(PartNum))))) AS PartID 
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) ))))) AS PartID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(WarehouseCode))))) AS WarehouseID
	,UPPER(CONCAT(Company, '#', OrderNum, '#', OrderLine, '#', OrderSubLine, '#', InvoiceNum)) AS SalesOrderCode
	,UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine))) AS SalesInvoiceCode 
	,CONVERT(int, replace(convert(date,InvoiceDate),'-','')) AS SalesInvoiceDateID  
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT( Company,'#','') )))	AS ProjectID
	,PartitionKey

	,UPPER(Company) AS Company
	,UPPER(TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum)) ) AS CustomerNum
	,UPPER(TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum)) ) AS PartNum
	,TRIM(SalesPerson) AS SalesPersonName
	,CASE WHEN TRIM(OrderNum) = '0' THEN 'PrimaryPart' ELSE 'SubPart' END  AS PartType
	,TRIM(OrderNum) AS SalesOrderNum
	,OrderLine		AS SalesOrderLine
	,OrderSubLine	AS SalesOrderSubLine
	,OrderType AS SalesOrderType
	,InvoiceNum	AS SalesInvoiceNum
	,InvoiceLine	AS SalesInvoiceLine
	--,'' AS SalesInvoiceType
	,CASE WHEN InvoiceDate = '' THEN '1901-01-01' ELSE CONVERT(date, InvoiceDate) END AS SalesInvoiceDate
	,ActualDeliveryDate		AS ActualDelivDate
	--,'' AS UoM
	,SellingShipQty			AS SalesInvoiceQty
	,UnitPrice	
	,UnitCost
	--,NULL AS DiscountPercent
	,DiscountAmount
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	,TotalMiscChrg
	--,NULL AS VATAmount
	,[CurrencyCode] AS Currency
	,[ExchangeRate] AS ExchangeRate
	,CreditMemo
	--,'' AS SalesChannel
	--,'' AS Department
	,TRIM(WarehouseCode) AS WarehouseCode
	--,NULL AS DeliveryAddress
	--,'' AS CostBearerNum
	--,''AS CostUnitNum
	--,'' AS ReturnComment
	--,'' AS ReturnNum
	--,'' AS ProjectNum
	,IndexKey
	--,'' AS SIRes1
	--,'' AS SIRes2
	--,'' AS SIRes3

FROM stage.JEN_NB_SOLine

--GROUP BY
--	PartitionKey,Company,SalesPerson, CustNum, PartNum, OrderNum,OrderLine,OrderSubLine, OrderType,InvoiceNum,InvoiceLine, InvoiceDate,ActualDeliveryDate,SellingShipQty,UnitPrice ,UnitCost ,DiscountAmount,TotalMiscChrg,WarehouseCode, [CurrencyCode], [ExchangeRate], CreditMemo, Indexkey, OrderType
GO
PRINT N'Creating [dm_LS].[fctStockTransaction]'
GO
CREATE VIEW [dm_LS].[fctStockTransaction] AS

SELECT 
 st.[StockTransactionID]
,st.[CompanyID]
,st.[PartID]
,st.[WarehouseID]
,st.[CurrencyID]
,st.[TransactionDateID]
,st.[SupplierID]
,st.[PurchaseOrderNumID]
,st.[PurchaseInvoiceID]
,st.[CustomerID]
,st.[SalesOrderNumID]
,st.[SalesInvoiceID]
,st.[CurrencyMonthKey]
,st.[Company]
,st.[WarehouseCode]
,st.[TransactionCode]
,st.[TransactionDescription]
,st.[IssuerReceiverNum]
,st.[IssuerReceiverName]
,st.[OrderNum]
,st.[OrderLine]
,st.[InvoiceNum]
,st.[InvoiceLine]
,st.[PartNum]
,st.[BinNum]
,st.[BatchNum]
,st.[TransactionDate]
,st.[TransactionTime]
,st.[TransactionQty]
,st.[TransactionValue]
,st.[CostPrice]
,st.[SalesUnitPrice]
,st.[Currency]
,st.[Reference]
,st.[AdjustmentDate]
,st.[IndexKey]
,st.[InternalExternal]

FROM dm.FactStockTransaction st
LEFT JOIN dbo.Company com ON st.Company = com.Company
WHERE com.BusinessArea = 'Lifting Solutions' AND com.[Status] = 'Active'


--WHERE Company  in ('AFISCM', 'CDKCERT', 'CEECERT', 'CFICERT', 'CLTCERT', 'CLVCERT', 'CSECERT', 'CUKCERT', 'CNOEHAU', 'CNOCERT', 'CERPL', 'CyESA', 'HFIHAKL', 'TRACLEV')  -- LS basket

--GROUP BY  -- Aggregate those fields in dw.FactOrder which have more than one values, such as different NeedbyDate & DelivDate and different discountPercent, left over fields should by in GROUP BY
GO
PRINT N'Creating [stage].[TRA_SE_OLine]'
GO
CREATE TABLE [stage].[TRA_SE_OLine]
(
[PartitionKey] [nvarchar] (50) NULL,
[Company] [nvarchar] (10) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[SalesOrderNum] [nvarchar] (50) NULL,
[SalesOrderLine] [nvarchar] (50) NULL,
[SalesOrderSubLine] [nvarchar] (50) NULL,
[SalesOrderType] [nvarchar] (50) NULL,
[SalesOrderDate] [date] NULL,
[NeedbyDate] [date] NULL,
[ExpDelivDate] [date] NULL,
[SalesInvoiceNum] [nvarchar] (50) NULL,
[SalesOrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (50) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[IndexKey] [nvarchar] (50) NULL,
[TransactionType] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vTRA_SE_OLine]'
GO
CREATE VIEW [stage].[vTRA_SE_OLine] AS
--COMMENT EMPTY FIELDS // ADD TRIM() UPPER() INTO WarehouseID,PartID,CustomerID 2022-12-27 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([CustomerNum]), '#', TRIM([SalesOrderNum]), '#', TRIM([SalesOrderLine]), '#', TRIM([SalesOrderSubLine]), '#', TRIM(IndexKey))))) AS SalesOrderID --, '#', UPPER(TRIM([SalesInvoiceNum])), '#', TRIM([PartNum])
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(UPPER(Company), '#', TRIM(CustomerNum)))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(UPPER(Company), '#', UPPER(TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(trim(Company), '#', (TRIM([PartNum])))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(UPPER(Company), '#', TRIM(WarehouseCode)))) AS WarehouseID --TRIM(WarehouseCode)
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(UPPER(Company), '#', TRIM(SalesOrderNum)))) AS SalesOrderNumID
	,CONCAT(UPPER(Company), '#', TRIM(SalesOrderNum), '#', TRIM(SalesOrderLine), '#', TRIM(SalesOrderSubLine), '#', TRIM(SalesInvoiceNum)) AS SalesOrderCode
	,CONVERT(int, replace(convert(date, [SalesOrderDate]), '-', '')) AS SalesOrderDateID  --redundent?
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT( UPPER(Company),'#','') ))	AS ProjectID
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM([CustomerNum]) AS [CustomerNum]
	,TRIM([SalesOrderNum]) AS [SalesOrderNum]
	,TRIM([SalesOrderLine]) AS [SalesOrderLine]
	,TRIM([SalesOrderSubLine]) AS [SalesOrderSubLine]
	,[SalesOrderType]
	--,'' AS [SalesOrderCategory]
	,IIF([SalesOrderDate] = '' OR [SalesOrderDate] IS NULL, CONVERT(date, '1900-01-01'), CONVERT(date, [SalesOrderDate])) AS [SalesOrderDate]
	,IIF([SalesOrderDate] = '' OR [SalesOrderDate] IS NULL, CONVERT(date, '1900-01-01'), CONVERT(date, [NeedbyDate])) AS [NeedbyDate] --, CONVERT(date, [NeedbyDate])
	,IIF([SalesOrderDate] = '' OR [SalesOrderDate] IS NULL, CONVERT(date, '1900-01-01'), CONVERT(date, [ExpDelivDate]))  AS [ExpDelivDate] --CONVERT(date, [ExpDelivDate])
	,CAST('1900-01-01' AS date) AS ActualDelivDate
	,CAST('1900-01-01' AS date) AS ConfirmedDelivDate
	,TRIM([SalesInvoiceNum]) AS [SalesInvoiceNum]
	,[SalesOrderQty]
	,IIF(TransactionType = 'K', -1*[DelivQty], [DelivQty]) AS [DelivQty] --MAX
	,[RemainingQty] --[SalesOrderQty] - ([DelivQty]) AS [RemainingQty]
	--,NULL AS SalesInvoiceQty
	,TRIM([UoM]) AS [UoM]
	,[UnitPrice]
	,[UnitCost]
	,[Currency]
	,[ExchangeRate]
	,CONVERT(nvarchar(20), IIF(OpenRelease = 'Fakturerad', '0', OpenRelease)) AS OpenRelease
	,[DiscountPercent]
	,[DiscountAmount]
	,UPPER(TRIM([PartNum])) AS [PartNum]
	,TransactionType AS [PartType]
	--,'' AS [PartStatus]
	,TRIM([SalesPersonName]) AS [SalesPersonName]
	,TRIM(WarehouseCode) AS [WarehouseCode] --TRIM([WarehouseCode])
	,[SalesChannel]
	,IIF([SalesChannel] = 'Internet', 'Webshop', 'Normal Order Handling') AS AxInterSalesChannel
	--,'' AS [Department]
	--,'' AS [ProjectNum]
	,[IndexKey]
	--,'0' AS Cancellation
	--,'' AS [SORes1]
	--,'' AS [SORes2]
	--,'' AS [SORes3]
	--,NULL AS [TotalMiscChrg]
FROM [stage].[TRA_SE_OLine]
WHERE SalesOrderDate >= '2015-01-01' --and [SalesChannel] NOT IN ('Flyttning mellan lagerställen', 'Garanti')
--and OpenRelease != 'Annullerad'
--GROUP BY PartitionKey, UPPER(Company), [CustomerNum], [SalesOrderNum], [SalesOrderLine], [SalesOrderSubLine], [SalesOrderType], [SalesOrderDate], [NeedbyDate], [ExpDelivDate], [SalesInvoiceNum], [SalesOrderQty], [UoM], [UnitPrice], [UnitCost], [Currency], [ExchangeRate], [OpenRelease], [DiscountPercent], [DiscountAmount], [PartNum], [SalesPersonName], [SalesChannel] , [WarehouseCode], IndexKey, TransactionType
--GO
GO
PRINT N'Creating [stage].[AXL_PT_SalesLedger]'
GO
CREATE TABLE [stage].[AXL_PT_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceAmount] [decimal] (18, 4) NULL,
[RemainAmount] [decimal] (18, 4) NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vAXL_PT_SalesLedger]'
GO
CREATE VIEW [stage].[vAXL_PT_SalesLedger] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(sl.Company, '#', TRIM(sl.CustNum), '#', TRIM(sl.InvoiceNum))))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(sl.Company))) AS CompanyID
	,UPPER(CONCAT(sl.Company, '#', TRIM(sl.CustNum), '#', TRIM(sl.InvoiceNum))) AS SalesLedgerCode
	,sl.PartitionKey

	,UPPER(sl.Company) AS Company
	,UPPER(TRIM(sl.CustNum)) AS CustomerNum
	,TRIM(sl.InvoiceNum) AS [SalesInvoiceNum]
	,IIF(so.InvoiceDate = '' OR so.InvoiceDate IS NULL, '1900-01-01', so.InvoiceDate) AS [SalesInvoiceDate] --
	,CONVERT(date, DueDate) AS SalesDueDate
	,CONVERT(date, LastPaymentDate) AS LastPaymentDate
	,[InvoiceAmount]
	,[RemainAmount] AS [RemainingInvoiceAmount]
	,NULL AS CashDiscOffered
	,NULL AS CashDiscUsed
	,NULL AS [ExchangeRate]
	,NULL AS [Currency]
	,NULL AS [VATAmount]
	,NULL AS [VATCode]
	,NULL AS [PayToName]
	,NULL AS [PayToCity]
	,NULL AS [PayToContact]
	,NULL AS [PaymentTerms]
	,sl.Res1 AS SLRes1
	,sl.Res2 AS SLRes2
	,sl.Res3 AS SLRes3
FROM stage.AXL_PT_SalesLedger sl
	LEFT JOIN stage.AXL_CZ_SOLine so ON TRIM(sl.InvoiceNum) = TRIM(so.InvoiceNum)
WHERE DueDate > '2015-01-01'
GROUP BY
	sl.PartitionKey, sl.Company, sl.CustNum, sl.InvoiceNum, sl.Res2, sl.Res1, sl.Res3, sl.[InvoiceAmount], sl.[RemainAmount], so.InvoiceDate, DueDate, LastPaymentDate
GO
PRINT N'Creating [stage].[WID_FI_OLine]'
GO
CREATE TABLE [stage].[WID_FI_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderRelNum] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[DelivDate] [date] NULL,
[NeedbyDate] [date] NULL,
[ConfirmedDelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (1) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[SalesPerson] [nvarchar] (100) NULL,
[ReturnComment] [nvarchar] (max) NULL,
[SalesReturnOrderNum] [nvarchar] (50) NULL,
[SalesReturnInvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vWID_FI_OLine]'
GO


CREATE VIEW [stage].[vWID_FI_OLine] AS
--COMMENT EMPTY FIELDS / ADD UPPER()TRIM() INTO PartID,CustomerID,WarehouseID 2022-12-15 VA
--CHANGE PARTNUM / CUSTNUM VA 23-02-17 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(InvoiceNum)))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID 
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum))))) AS PartID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(WarehouseCode)))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum)))) AS SalesOrderNumID
	,CONVERT(int, REPLACE(CONVERT(date, OrderDate), '-', '')) AS SalesOrderDateID
	,CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(InvoiceNum))  AS SalesOrderCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey 

	,TRIM(Company) AS Company
	,TRIM(CustNum) AS CustomerNum  
	,TRIM(OrderNum) AS SalesOrderNum
	,TRIM(OrderLine) AS SalesOrderLine
	,TRIM(OrderSubLine) AS SalesOrderSubLine
	,TRIM(OrderType) AS SalesOrderType
	--,'' AS SalesOrderCategory
	,TRIM(OrderRelNum) AS SalesOrderRelNum
	,OrderDate AS SalesOrderDate
	,NeedbyDate
	,DelivDate AS ExpDelivDate
	,DelivDate AS ActualDelivDate --CAST('1900-01-01' AS date) -- DZ 20210825
	,CAST(ConfirmedDelivDate AS date) AS ConfirmedDelivDate
	,TRIM(InvoiceNum) AS SalesInvoiceNum
	,OrderQty AS SalesOrderQty
	,DelivQty
	,RemainingQty
	--,NULL AS SalesInvoiceQty
	--,'' AS UoM
	,UnitPrice
	,UnitCost
	,Currency
	,ExchangeRate
	,OpenRelease
	,DiscountAmount
	,DiscountPercent
	,TRIM(PartNum) AS PartNum
	,IIF(OrderSubLine = '000000', 'Main', 'Sub' )  AS PartType
	,PartStatus
	,TRIM(SalesPerson) AS SalesPersonName
	,TRIM(WarehouseCode) AS WarehouseCode
	,CASE WHEN TRIM(CustNum) = 'CFIN' THEN 'Cash Customer' 
			WHEN TRIM(CustNum) = 'CEX' THEN 'Cash Customer Export'
			WHEN TRIM(CustNum) = 'CEU' THEN 'Cash Customer EU'
			ELSE 'Normal' END AS SalesChannel
	,CASE WHEN LEFT(CustNum, 1) = 'C' THEN 'Over-the-Counter'
		WHEN SalesPerson = 'Verkkokauppa' THEN 'Webshop'
		ELSE 'Normal Order Handling' END AS AxInterSalesChannel
	--,'' AS Department
	--,'' AS ProjectNum
	--,'' AS IndexKey
	--,'' AS Cancellation
	--,'' AS SORes1
	--,'' AS SORes2
	--,'' AS SORes3
	,ReturnComment
	,TRIM(SalesReturnOrderNum) AS SalesReturnOrderNum
	,TRIM(SalesReturnInvoiceNum) AS SalesReturnInvoiceNum
	--,NULL AS [TotalMiscChrg]
FROM stage.WID_FI_OLine
where TRIM(CustNum) not in ('2379','1336','2067','2069','2361','2447','2967','2968','2969','INTR01','K0001','54311','54312','K51093')
--WHERE OrderType = '1'
--GROUP BY
--	PartitionKey,Company,CustNum,OrderNum,OrderLine,OrderSubLine,OrderRelNum,OrderRelNum,OrderDate,NeedbyDate,DelivDate,OrderQty,DelivQty,RemainingQty,UnitPrice,UnitCost, ExchangeRate, OpenRelease,DiscountAmount,DiscountPercent,PartNum,PartStatus, SalesPerson, ReturnComment, SalesReturnOrderNum,WarehouseCode,Currency, SalesReturnInvoiceNum, InvoiceNum, OrderType
GO
PRINT N'Creating [stage].[CER_EE_Supplier]'
GO
CREATE TABLE [stage].[CER_EE_Supplier]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[MainSupplierName] [nvarchar] (100) NULL,
[SupplierName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[AddressLine3] [nvarchar] (100) NULL,
[TelephoneNum] [nvarchar] (20) NULL,
[Email] [nvarchar] (100) NULL,
[City] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[District] [nvarchar] (10) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (100) NULL,
[Region] [nvarchar] (50) NULL,
[SupplierCategory] [nvarchar] (50) NULL,
[SupplierResponsible] [nvarchar] (50) NULL,
[AccountNum] [nvarchar] (50) NULL,
[VATNum] [nvarchar] (50) NULL,
[OrganizationNum] [nvarchar] (100) NULL,
[InternalExternal] [nvarchar] (100) NULL,
[CodeOfConduct] [nvarchar] (2) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[Reference] [nvarchar] (100) NULL,
[SupplierScore] [nvarchar] (50) NULL,
[MinOrderQty] [nvarchar] (50) NULL,
[Website] [nvarchar] (100) NULL,
[Comments] [nvarchar] (max) NULL,
[IsAxinterInternal] [nvarchar] (50) NULL,
[IsMaterialSupplier] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_EE_Supplier]'
GO





CREATE VIEW [stage].[vCER_EE_Supplier] AS

SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID
    ,UPPER(CONCAT([Company],'#',TRIM([SupplierNum]))) AS SupplierCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([SupplierNum])) AS SupplierNum
	,[dbo].[ProperCase](TRIM(MainSupplierName)) AS MainSupplierName
	,[dbo].[ProperCase](TRIM(SupplierName)) AS SupplierName
	,TRIM([AddressLine2]) AS AddressLine2
    ,TRIM([AddressLine3]) AS AddressLine3
	,[TelephoneNum]
	,[Email]
	,PARSENAME(REPLACE(dbo.SplitAddress(CONCAT(AddressLine1,' ',AddressLine2,' ',AddressLine3)), '^', '.'), 3) AS AddressLine1 -- TRIM([AddressLine1]) AS AddressLine1 2023-04-04 SB & TO 
    ,IIF(TRIM(ZipCode) is Null,PARSENAME(REPLACE(dbo.SplitAddress(CONCAT(AddressLine1,' ',AddressLine2,' ',AddressLine3)), '^', '.'), 2), trim(ZipCode)) AS ZipCode -- ,TRIM([ZipCode]) AS ZipCode 2023-04-04 SB & TO 
    ,IIF(TRIM(City)    IN (Null,''),PARSENAME(REPLACE(dbo.SplitAddress(CONCAT(AddressLine1,' ',AddressLine2,' ',AddressLine3)), '^', '.'), 1), trim(City)) AS City -- ,TRIM([ZipCode]) AS ZipCode 2023-04-04 SB & TO 
	,District
	,case when LEN(TRIM(supplier.CountryCode)) = 3 then cc.[Alpha-2 code]
	else IIF(supplier.CountryName is null, 'EE', supplier.CountryCode) 
	end AS CountryCode
    ,IIF(supplier.CountryName is null, 'Estonia', supplier.CountryName) AS CountryName
	,[Region]
	,[IsMaterialSupplier] as IsMaterialSupplier
	,[IsAxinterInternal] as InternalExternal
	,TRIM([SupplierCategory]) AS SupplierCategory 
	,TRIM([SupplierResponsible]) AS SupplierResponsible
	,[dbo].[ProperCase](TRIM(concat (addressline1+' '+ addressline2, null))) AS AddressLine
	,[dbo].[ProperCase](TRIM(concat_ws(',',coalesce([dbo].[ProperCase](supplier.CountryName),null),IIF(City= ' ',null,trim(substring(replace([dbo].[ProperCase](AddressLine3),' ', ''), 6, 100))),IIF(ZipCode= ' ',null,[dbo].[udf_GetNumeric]([Addressline3]))
		,coalesce(IIF([addressline1]= ' ',null,[addressline1]),IIF([addressline2]= ' ',null,[addressline2]))
		,coalesce(IIF([addressline2]= ' ',null,[addressline2]),IIF([addressline3]= ' ',null,[addressline3]))))) AS FullAddressLine
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [AccountNum])) AS [AccountNum] --required by Ian Morgan & approved by Emil T on 20200630
	,[VATNum]
	,OrganizationNum
	,[CodeOfConduct]
	,CustomerNum
	,TRIM([SupplierScore]) AS SupplierScore
	,COALESCE(TRY_CONVERT(decimal(18,4), [MinOrderQty]),0) AS [MinOrderQty]
	,0 AS MinOrderValue	
	,[Website]
	,TRIM(supplier.[Comments]) AS Comments
	,'' AS SRes1
	,'' AS SRes2
	,'' AS SRes3
FROM [stage].[CER_EE_Supplier] as supplier
	LEFT JOIN dbo.CountryCodes as cc
		on cc.[Alpha-3 code] = CountryCode
--GROUP BY 
--      [PartitionKey],[Company],[SupplierNum],MainSupplierName,[SupplierName],[AddressLine1],[AddressLine2],[AddressLine3],[City],[ZipCode],[Region],District, [CountryName]
--	  ,[SupplierCategory],[SupplierResponsible],[Reference],[AccountNum],[VATNum],[SupplierScore],[CustomerNum],[TelephoneNum],[Email],[Website],[CodeOfConduct]
--	  ,[MinOrderQty],[InternalExternal],[Comments], OrganizationNum
GO
PRINT N'Creating [stage].[NOM_DK_StockBalance]'
GO
CREATE TABLE [stage].[NOM_DK_StockBalance]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[Currency] [nvarchar] (10) NULL,
[BinNum] [nvarchar] (12) NULL,
[BatchNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (70) NOT NULL,
[LastStockTakeDate] [nvarchar] (50) NULL,
[LastStdCostDate] [nvarchar] (50) NULL,
[MaxStockQty] [nvarchar] (50) NULL,
[StockBalance] [decimal] (18, 4) NULL,
[StockValue] [decimal] (18, 4) NULL,
[ManualReservations] [decimal] (18, 4) NULL,
[ReserveQty] [nvarchar] (50) NULL,
[BackOrderQty] [decimal] (18, 4) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[StockTakeDiff] [decimal] (18, 4) NULL,
[ReOrderLevel] [decimal] (18, 4) NULL,
[SafetyStock] [decimal] (18, 4) NULL,
[OptimalOrderQty] [decimal] (18, 4) NULL,
[AvgCost] [decimal] (18, 4) NULL,
[DelivTime] [nvarchar] (50) NULL,
[SBRes1] [nvarchar] (50) NULL,
[SBRes2] [nvarchar] (50) NULL,
[SBRes3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vNOM_DK_StockBalance]'
GO
CREATE VIEW [stage].[vNOM_DK_StockBalance] AS
--ADD TRIM() INTO PartID 23-01-05 VA
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT([Company],'#',TRIM([PartNum]),'#',TRIM([WarehouseCode]))))) AS ItemWarehouseID
	,TRIM(WarehouseCode) AS WarehouseCode
	,UPPER(CONCAT([Company],'#',TRIM([PartNum]),'#',TRIM([WarehouseCode]))) AS ItemWarehouseCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER([Company]))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT([Company],'#',TRIM([SupplierNum]))))) AS SupplierID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT([Company],'#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey

	,UPPER(Company) AS Company
	,CASE WHEN TRIM(BinNum) like '' OR BinNum like ' ' THEN NULL ELSE TRIM(BinNum) END AS BinNum
	,TRIM(BatchNum) AS BatchNum
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,[DelivTime]-- convert to days
	,IIF(LastStockTakeDate = 0, '1900-01-01', CONVERT(date, LastStockTakeDate)) AS LastStockTakeDate
	,IIF(LastStdCostDate = 0,  '1900-01-01', CONVERT(date, LastStdCostDate)) AS LastStdCostCalDate
	,TRIM(Currency) AS Currency
	,SafetyStock
	,ManualReservations AS MaxStockQty
	,StockBalance
	,StockValue
	,AvgCost
	,ReserveQty
	,BackOrderQty
	,OrderQty
	,StockTakeDiff
	,ReOrderLevel
	,OptimalOrderQty
	,SBRes1
	,SBRes2
	,SBRes3
FROM 
	[stage].[NOM_DK_StockBalance]
GO
PRINT N'Creating [stage].[MAK_NL_SalesLedger]'
GO
CREATE TABLE [stage].[MAK_NL_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[SalesInvoiceNum] [nvarchar] (50) NULL,
[SalesInvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[PaymentAmount] [decimal] (18, 4) NULL,
[InvoiceAmount] [decimal] (18, 4) NULL,
[VATAmount] [decimal] (18, 4) NULL,
[VATCode] [nchar] (10) NULL
)
GO
PRINT N'Creating [stage].[vMAK_NL_SalesLedger]'
GO
CREATE VIEW [stage].[vMAK_NL_SalesLedger] AS
--COMMENT empty fields / ADD UPPER() TRIM() INTO CustomerID 13-12-2022 VA
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company, '#', TRIM(SalesInvoiceNum)))) AS SalesLedgerID,
	CONVERT([binary](32),HASHBYTES('SHA2_256', Company)) AS CompanyID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID,
	--CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(CustomerNum)))) AS CustomerID,
	CONCAT(Company,'#', SalesInvoiceNum) AS SalesLedgerCode,
	PartitionKey,

	Company,
	TRIM(CustomerNum) AS CustomerNum,
	TRIM(SalesInvoiceNum) AS SalesInvoiceNum,
	SalesInvoiceDate		AS SalesInvoiceDate,
	CONVERT(date, DueDate) AS SalesDueDate,
	CONVERT(date, LastPaymentDate) AS SalesLastPaymentDate,
	--0 AS InvoiceAmount,
	--0 AS RemainingInvoiceAmount,
	1 AS ExchangeRate,
	'EUR' AS Currency,
	--0 AS VATAmount,
	--'' AS VATCode,
	--'' AS PayToName,
	--'' AS PayToCity,
	--'' AS PayToContact,
	--'' AS PaymentTerms,
	--'' AS SLRes1,
	--'' AS SLRes2,
	--'' AS SLRes3
	--,NULL			AS PaidInvoiceAmount
	'1900-01-01' AS AccountingDate
	--,NULL AS AgingPeriod
	--,NULL AS AgingSort
	--,NULL AS VATCodeDesc
	--,NULL AS LinkToOriginalInvoice

FROM 
	stage.MAK_NL_SalesLedger
	GROUP BY  PartitionKey, SalesInvoiceNum, CustomerNum, Company, SalesInvoiceDate, DueDate, LastPaymentDate
GO
PRINT N'Creating [dm_LS].[fctStockBalance]'
GO
CREATE VIEW [dm_LS].[fctStockBalance] AS

SELECT 
 sb.[StockBalanceID]
,sb.[CompanyID]
,sb.[SupplierID]
,sb.[PartID]
,sb.[WarehouseID]
,sb.[CurrencyMonthKey]
,sb.[Company]
,sb.[Currency]
,sb.[BinNum]
,sb.[BatchNum]
,sb.[SupplierNum]
,sb.[PartNum]
,sb.[DelivTime]
,sb.[LastStockTakeDate]
,sb.[LastStdCostCalDate]
,sb.[SafetyStock]
,sb.[MaxStockQty]
,sb.[StockBalance]
,sb.[StockValue]
,sb.[AvgCost]
,sb.[ReserveQty]
,sb.[BackOrderQty]
,sb.[OrderQty]
,sb.[StockTakeDiff]
,sb.[ReOrderLevel]
,sb.[OptimalOrderQty]
,sb.[WarehouseCode]
,sb.[SBRes1]
,sb.[SBRes2]
,sb.[SBRes3]
FROM dm.FactStockBalance sb
LEFT JOIN dbo.Company com ON sb.Company = com.Company
WHERE com.BusinessArea = 'Lifting Solutions' AND com.[Status] = 'Active'

--WHERE Company  in ('AFISCM', 'CDKCERT', 'CEECERT','CERDE', 'CFICERT', 'CLTCERT', 'CLVCERT', 'CSECERT', 'CUKCERT', 'CNOEHAU', 'CNOCERT', 'CERPL', 'CyESA', 'HFIHAKL', 'TRACLEV','MENBE14','MENNL01','MENNL02','MENNL03','MENNL04','MENNL07','MENNL11')  -- LS basket
GO
PRINT N'Creating [stage].[CER_DE_StockBalance]'
GO
CREATE TABLE [stage].[CER_DE_StockBalance]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (8) NULL,
[WarehouseCode] [nvarchar] (10) NULL,
[Currency] [nvarchar] (10) NULL,
[BinNum] [int] NULL,
[BatchNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (20) NULL,
[DelivTime] [int] NULL,
[LastStockTakeDate] [date] NULL,
[LastStdCostCalDate] [date] NULL,
[MaxStockQty] [int] NULL,
[StockBalance] [decimal] (9, 2) NULL,
[StockValue] [decimal] (9, 2) NULL,
[ReserveQty] [int] NULL,
[BackOrderQty] [decimal] (9, 2) NULL,
[OrderQty] [decimal] (9, 2) NULL,
[ReOrderLevel] [decimal] (9, 2) NULL,
[SafetyStock] [decimal] (9, 2) NULL,
[OptimalOrderQty] [int] NULL,
[AvgCost] [decimal] (9, 2) NULL,
[SBRes1] [varchar] (1) NULL,
[SBRes2] [varchar] (1) NULL,
[SBRes3] [varchar] (1) NULL
)
GO
PRINT N'Creating [stage].[vCER_DE_StockBalance]'
GO

create view [stage].[vCER_DE_StockBalance]
as

select 
CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]),'#',TRIM([WarehouseCode]))))) AS ItemWarehouseID,
TRIM([WarehouseCode]) as WarehouseCode,
TRIM(Currency) as Currency,
TRIM(Company) as Company,
BinNum,
BatchNum,
null as SupplierNum,
PartNum,
DelivTime,
LastStockTakeDate,
LastStdCostCalDate,
SafetyStock,
MaxStockQty,
StockBalance,
StockValue,
ReserveQty,
BackOrderQty,
OrderQty,
null as StockTakeDiff,
ReOrderLevel,
OptimalOrderQty,
AvgCost,
UPPER(CONCAT([Company],'#',TRIM([PartNum]),'#',TRIM([WarehouseCode]))) AS ItemWarehouseCode,
SBRes1,
SBRes2,
SBRes3,
CONVERT([binary](32),HASHBYTES('SHA2_256',[Company])) AS CompanyID,
CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#','')))) AS SupplierID,
CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID,
CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID,
PartitionKey
FROM stage.CER_DE_StockBalance;
GO
PRINT N'Creating [dw].[CostUnit]'
GO
CREATE TABLE [dw].[CostUnit]
(
[CostUnitID] [binary] (32) NOT NULL,
[CostUnitCode] [nvarchar] (200) NULL,
[CompanyID] [binary] (32) NOT NULL,
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (8) NOT NULL,
[CostUnitNum] [nvarchar] (50) NOT NULL,
[CostUnitName] [nvarchar] (100) NULL,
[CostUnitStatus] [nvarchar] (100) NULL,
[CostUnitGroup] [nvarchar] (100) NULL,
[CostUnitGroup2] [nvarchar] (100) NULL,
[CostUnitGroup3] [nvarchar] (100) NULL,
[CURes1] [nvarchar] (100) NULL,
[CURes2] [nvarchar] (100) NULL,
[CURes3] [nvarchar] (100) NULL,
[is_deleted] [bit] NULL,
[is_inferred] [bit] NULL,
[CostUnitGroup1] [nvarchar] (100) NULL,
[IsActiveRecord] [bit] NULL
)
GO
PRINT N'Creating primary key [PK_CostUnit] on [dw].[CostUnit]'
GO
ALTER TABLE [dw].[CostUnit] ADD CONSTRAINT [PK_CostUnit] PRIMARY KEY CLUSTERED ([CostUnitID])
GO
PRINT N'Creating [dm].[DimCostUnit]'
GO



/****** Script for SelectTopNRows command from SSMS  ******/
CREATE VIEW [dm].[DimCostUnit] AS

SELECT CONVERT(bigint, [CostUnitID]) AS [CostUnitID]
      ,[PartitionKey]
      ,[CostUnitCode]
      ,CONVERT(bigint, [CompanyID]) AS [CompanyID]
      ,[Company]
      ,[CostUnitNum]
      ,[CostUnitName]
      ,[CostUnitStatus]
      ,[CostUnitGroup]
      ,[CostUnitGroup2]
      ,[CostUnitGroup3]
  FROM [dw].[CostUnit] -- was [fnc].
GO
PRINT N'Creating [dw].[vALL_Supplier]'
GO

CREATE VIEW [dw].[vALL_Supplier] AS

SELECT
	UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([SupplierNum])) AS SupplierNum
	,TRIM(MainSupplierName) AS MainSupplierName
	,TRIM(SupplierName) AS SupplierName

FROM [dw].[Supplier]
GO
PRINT N'Creating [stage].[NOM_FI_Part]'
GO
CREATE TABLE [stage].[NOM_FI_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PartNum] [nvarchar] (50) NOT NULL,
[PartDescription] [nvarchar] (max) NULL,
[PartDescription2] [nvarchar] (max) NULL,
[ProductGroup] [nvarchar] (100) NULL,
[ProductGroup2] [nvarchar] (100) NULL,
[ProductGroup3] [nvarchar] (100) NULL,
[ProductGroup4] [nvarchar] (100) NULL,
[CommodityCode] [nvarchar] (50) NULL,
[CountryOfOrigin] [nvarchar] (50) NULL,
[PartResponsible] [nvarchar] (50) NULL,
[NetWeight] [decimal] (18, 8) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[ParentSupplier] [nvarchar] (50) NULL,
[ReorderLevel] [decimal] (18, 8) NULL,
[DiscountGroup] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vNOM_FI_Part]'
GO
CREATE VIEW [stage].[vNOM_FI_Part] AS
--COMMENT EMPTY FIELDS 2022-12-15 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(vp.[Company]),'#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(vp.[Company])))) AS CompanyID
	,UPPER(CONCAT(TRIM(vp.[Company]),'#',TRIM([PartNum]))) AS PartCode
	,PartitionKey

	,UPPER(TRIM(vp.[Company])) AS Company
	,UPPER(TRIM([PartNum])) AS PartNum
	--,'' AS [PartName]
	,[PartDescription]
	,[PartDescription2]
	,DiscountGroup AS [PartDescription3]
	,CONCAT(TRIM(vp.SupplierCode), '-', TRIM(vs.SupplierName)) AS MainSupplier
	,ParentSupplier AS AlternativeSupplier
	,[ProductGroup]
	,[ProductGroup2]
	,[ProductGroup3]
	,[ProductGroup4]
	--,'' AS [Brand]
	,[CommodityCode]
	--,'' AS PartReplacementNum
	--,'' AS PartStatus
	,[CountryOfOrigin]
	,[NetWeight]
	--,'' AS [UoM]
	--,'' AS [Material]
	--,'' AS [Barcode]
	,[ReOrderLevel]
	,PartResponsible
	--,'' AS [StartDate]
	--,'' AS [EndDate]
FROM [stage].[NOM_FI_Part] vp
LEFT JOIN  [dw].[vAll_Supplier] vs ON vp.Company = vs.Company AND vp.SupplierCode = vs.SupplierNum

--GROUP BY
--	PartitionKey, vp.Company, PartNum, PartDescription, PartDescription2, ProductGroup, ProductGroup2, ProductGroup3, ProductGroup4, CommodityCode, CountryOfOrigin, NetWeight, ReorderLevel, PartResponsible,DiscountGroup, SupplierCode
GO
PRINT N'Creating [stage].[AXL_DN_Customer]'
GO
CREATE TABLE [stage].[AXL_DN_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[MainCustomerName] [nvarchar] (100) NULL,
[CustomerName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[AddressLine] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (20) NULL,
[TelephoneNumber2] [nvarchar] (20) NULL,
[Email] [nvarchar] (100) NULL,
[City] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[Division] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (50) NULL,
[CustomerIndustry] [nvarchar] (50) NULL,
[CustomerSubIndustry] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNo] [nvarchar] (50) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[CustomerABC] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[SalesPersonResponsible] [nvarchar] (50) NULL,
[CustomerType] [nvarchar] (50) NULL,
[Res1] [nvarchar] (50) NULL,
[Res2] [nvarchar] (50) NULL,
[Res3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXL_DN_Customer]'
GO


CREATE VIEW [stage].[vAXL_DN_Customer] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustomerNum))) )) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,UPPER(CONCAT([Company], '#', TRIM([CustomerNum]))) AS CustomerCode
	,PartitionKey

	,UPPER(Company) AS Company
	,UPPER(TRIM(CustomerNum)) AS [CustomerNum]
	,TRIM(MainCustomerName) AS MainCustomerName
	,TRIM(CustomerName) AS  [CustomerName]
	,TRIM([AddressLine1]) AS [AddressLine1]
	,TRIM([AddressLine2]) AS [AddressLine2]
	,TRIM([AddressLine3]) AS [AddressLine3]
	,TRIM([TelephoneNumber1]) AS [TelephoneNum1]
	,TRIM([TelephoneNumber2]) AS [TelephoneNum2]
	,TRIM([Email]) AS [Email]
	,TRIM([ZipCode]) AS [ZipCode]
	,TRIM([City]) AS [City]
	,TRIM([State]) AS [State]
	,TRIM([District]) AS [SalesDistrict]
	,TRIM(con.CountryName) AS CountryName
	,TRIM([ISOAlpha2Code]) AS [CountryCode]
	,TRIM([Division]) AS [Division]
	,TRIM([CustomerIndustry]) AS [CustomerIndustry]
	,TRIM([CustomerSubIndustry]) AS [CustomerSubIndustry]
	,TRIM([AddressLine3]) AS [AddressLine]
	,CONCAT(TRIM(con.CountryName), + ',  ' + TRIM([City]), + ',  ' + TRIM([ZipCode]), + ',  ' + TRIM(addressline3)) AS [FullAddressLine]
	,TRIM(CustomerGroup) AS [CustomerGroup]
	,TRIM(CustomerGroup) AS [CustomerSubGroup]
	,TRIM([SalesRepCode]) AS [SalesPersonCode]
	,TRIM(SalesPersonName) AS [SalesPersonName]
	,TRIM([SalesPersonResponsible]) AS [SalesPersonResponsible]
	,TRIM([VATRegNo]) AS [VATNum]
	,TRIM([AccountString]) AS [AccountNum]
	,TRIM([InternalExternal]) AS [InternalExternal]
	,TRIM([CustomerABC]) AS [CustomerScore]
	,TRIM([CustomerType]) AS [CustomerType]
FROM [stage].[AXL_DN_Customer] com
	LEFT JOIN dbo.Country con ON com.CountryName = con.[ISOAlpha2Code]

--GROUP BY
--	PartitionKey, Company, CustomerNum, CustomerName, MainCustomerName, [AddressLine1], [AddressLine2], [AddressLine3], [TelephoneNumber1], [TelephoneNumber2], [Email], [ZipCode], [City], [State], [District], [CountryName], [Division], [CustomerIndustry], [CustomerSubIndustry], CustomerGroup, [SalesRepCode], SalesPersonName, [SalesPersonResponsible], [VATRegNo], [AccountString], [InternalExternal], [CustomerABC], [CustomerType]

--	Stagetablename in ('AXL_AU_Customer', 'AXL_DC_Customer', 'AXL_HU_Customer', 'AXL_IE_Customer', 'AXL_PL_Customer', 'AXL_PT_Customer', 'AXL_UK_Customer')
GO
PRINT N'Creating [dbo].[summers]'
GO

Create FUNCTION [dbo].[summers]
()
RETURNS nvarchar(12) -- or whatever length you need
AS
BEGIN
    Declare @companyCode nvarchar(12);
    SELECT @companyCode = 'GSUGB'

    RETURN  @companyCode

END
GO
PRINT N'Creating [stage].[SUM_UK_Part]'
GO
CREATE TABLE [stage].[SUM_UK_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (500) NULL,
[PartNum] [nvarchar] (500) NULL,
[PartName] [nvarchar] (500) NULL,
[PartDescription] [nvarchar] (500) NULL,
[PartDescription2] [nvarchar] (500) NULL,
[PartDescription3] [nvarchar] (500) NULL,
[ProductGroup] [nvarchar] (500) NULL,
[ProductGroup2] [nvarchar] (500) NULL,
[ProductGroup3] [nvarchar] (500) NULL,
[ProductGroup4] [nvarchar] (500) NULL,
[CountryOfOrigin] [nvarchar] (500) NULL,
[Brand] [nvarchar] (500) NULL,
[CommodityCode] [nvarchar] (500) NULL,
[PartNumReplacement] [nvarchar] (500) NULL,
[NetWeight] [nvarchar] (500) NULL,
[Volume] [nvarchar] (500) NULL,
[Material] [nvarchar] (500) NULL,
[Site] [nvarchar] (500) NULL,
[Barcode] [nvarchar] (500) NULL,
[ReorderLevel] [nvarchar] (500) NULL,
[MinOrderQty] [nvarchar] (500) NULL,
[StartDate] [nvarchar] (500) NULL,
[EndDate] [nvarchar] (500) NULL,
[ItemStatus] [nvarchar] (500) NULL,
[Res1] [nvarchar] (500) NULL,
[Res2] [nvarchar] (500) NULL,
[Res3] [nvarchar] (500) NULL
)
GO
PRINT N'Creating [stage].[ACO_UK_mapBrand]'
GO
CREATE TABLE [stage].[ACO_UK_mapBrand]
(
[BrandERPName] [nvarchar] (50) NOT NULL,
[BrandReportingName] [nvarchar] (50) NOT NULL
)
GO
PRINT N'Creating [stage].[vSUM_UK_Part]'
GO
CREATE VIEW [stage].[vSUM_UK_Part] AS
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(dbo.summers()) ,'#', TRIM(PartNum))))) AS PartID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(dbo.summers())))) AS CompanyID
	,CONCAT(UPPER(TRIM(dbo.summers())),'#', [PartNum]) AS PartCode
	,PartitionKey
	,UPPER(TRIM(dbo.summers())) as  [Company]
	,[PartNum]
	--,[PartName]
	,[PartDescription]
	--,[PartDescription2]
	--,[PartDescription3]
	--,TRIM([ProductGroup]) AS ProductGroup
	--,TRIM([ProductGroup2])	AS ProductGroup2	
	,TRIM([ProductGroup3]) AS ProductGroup3
	,TRIM([ProductGroup4]) AS ProductGroup4
	,COALESCE(B.BrandReportingName, 'Other') AS [Brand] 
	--,NULL AS MainSupplier
	--,NULL AS AlternativeSupplier
	,[CommodityCode]
	--,'' AS PartReplacementNum
	--,'' AS PartStatus
	,[CountryOfOrigin]
	,TRY_CONVERT(decimal(18,4), [NetWeight]) AS NetWeight -- Added try_convert since stage table field was changed to nvarchar to handle rows skipped in pipeline /SM 2021-04-20
	--,'' AS UoM
	--,[Material]
	,[Barcode]
	--,[ReOrderLevel]
	--,'' AS PartResponsible
	--,[StartDate]
	--,[EndDate]
	--,[Site]
	--,'' as pep
FROM [stage].[SUM_UK_Part] AS P
LEFT JOIN [stage].[ACO_UK_mapBrand] B ON P.Brand = B.BrandERPName
;
GO
PRINT N'Creating [stage].[AXL_IT_SalesLedger]'
GO
CREATE TABLE [stage].[AXL_IT_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceAmount] [decimal] (18, 4) NULL,
[RemainAmount] [decimal] (18, 4) NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vAXL_IT_SalesLedger]'
GO
CREATE VIEW [stage].[vAXL_IT_SalesLedger] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(sl.Company, '#', TRIM(sl.CustNum), '#', TRIM(sl.InvoiceNum))))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(sl.Company))) AS CompanyID
	,UPPER(CONCAT(sl.Company, '#', TRIM(sl.CustNum), '#', TRIM(sl.InvoiceNum))) AS SalesLedgerCode
	,sl.PartitionKey

	,UPPER(sl.Company) AS Company
	,UPPER(TRIM(sl.CustNum)) AS CustomerNum
	,TRIM(sl.InvoiceNum) AS [SalesInvoiceNum]
	,IIF(so.InvoiceDate = '' OR so.InvoiceDate IS NULL, '1900-01-01', so.InvoiceDate) AS [SalesInvoiceDate] --
	,CONVERT(date, DueDate) AS SalesDueDate
	,CONVERT(date, LastPaymentDate) AS LastPaymentDate
	,[InvoiceAmount]
	,[RemainAmount] AS [RemainingInvoiceAmount]
	,NULL AS CashDiscOffered
	,NULL AS CashDiscUsed
	,NULL AS [ExchangeRate]
	,NULL AS [Currency]
	,NULL AS [VATAmount]
	,NULL AS [VATCode]
	,NULL AS [PayToName]
	,NULL AS [PayToCity]
	,NULL AS [PayToContact]
	,NULL AS [PaymentTerms]
	,sl.Res1 AS SLRes1
	,sl.Res2 AS SLRes2
	,sl.Res3 AS SLRes3
FROM stage.AXL_IT_SalesLedger sl
	LEFT JOIN stage.AXL_CZ_SOLine so ON TRIM(sl.InvoiceNum) = TRIM(so.InvoiceNum)
WHERE DueDate > '2015-01-01'
GROUP BY
	sl.PartitionKey, sl.Company, sl.CustNum, sl.InvoiceNum, sl.Res2, sl.Res1, sl.Res3, sl.[InvoiceAmount], sl.[RemainAmount], so.InvoiceDate, DueDate, LastPaymentDate
GO
PRINT N'Creating [stage].[CER_DK_Warehouse]'
GO
CREATE TABLE [stage].[CER_DK_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[WarehouseName] [nvarchar] (100) NULL,
[WarehouseAddress] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vCER_DK_Warehouse]'
GO
CREATE VIEW [stage].[vCER_DK_Warehouse] AS
-- COMMENT empty fields/ ADD TRIM into WarehouseID 12-12-2022 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey

	,UPPER(TRIM([Company])) AS Company
	,COALESCE(UPPER(TRIM([WarehouseCode])),'') AS [WarehouseCode]		--Added coalesce statement due to that one row for Missing Code is an empty warehouse code
	,[WarehouseName]
	--,'' AS [WarehouseDistrict]
	,[WarehouseAddress]
	--,'' AS [WarehouseDescription]
	--,''	AS [WarehouseType]
	--,'' AS [WarehouseCountry]
	--,'' AS [WarehouseSite]
FROM [stage].[CER_DK_Warehouse]

GROUP BY 
	PartitionKey,[Company],[WarehouseCode],[WarehouseName],[WarehouseAddress]
GO
PRINT N'Creating [dm_LS].[dimCostUnit]'
GO
CREATE VIEW [dm_LS].[dimCostUnit] AS 

SELECT  cu.[CostUnitID]
,cu.[PartitionKey]
,cu.[CostUnitCode]
,cu.[CompanyID]
,cu.[Company]
,cu.[CostUnitNum]
,cu.[CostUnitName]
,cu.[CostUnitStatus]
,cu.[CostUnitGroup]
,cu.[CostUnitGroup2]
,cu.[CostUnitGroup3]
FROM [dm].[DimCostUnit] cu
LEFT JOIN dbo.Company com ON cu.Company = com.Company
WHERE com.BusinessArea = 'Lifting Solutions' AND com.[Status] = 'Active'

--WHERE [Company] in ('CNOCERT')
GO
PRINT N'Creating [stage].[FOR_FR_OLine]'
GO
CREATE TABLE [stage].[FOR_FR_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[NeedByDate] [date] NULL,
[DelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[SumUnitCost] [decimal] (18, 4) NULL,
[SumUnitPrice] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[SuspendingFlag] [int] NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [int] NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[BusinessChannel] [nvarchar] (50) NULL,
[LabelQuotations] [nvarchar] (50) NULL,
[QuotationNum] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vFOR_FR_OLine_Test]'
GO







CREATE VIEW [stage].[vFOR_FR_OLine_Test] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(SalesChannel) ))) AS SalesOrderID --, '#', NeedByDate, '#', PartNum --, '#', DelivQty, '#', UnitPrice, '#', UnitCost /*, '#', TRIM(OrderSubLine) */
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustomerNum)))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM([PartNum])))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum)))) AS SalesOrderNumID

	,CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderSubLine), '#', TRIM(InvoiceNum)) AS SalesOrderCode

	,CONVERT(int, replace(convert(date, OrderDate), '-', '')) AS SalesOrderDateID  --redundent?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey 

	,Company 
	,TRIM(CustomerNum) AS CustomerNum
	,TRIM(OrderNum) AS [SalesOrderNum]
	,TRIM(OrderLine) AS [SalesOrderLine]
	,MIN(OrderSubLine) AS [SalesOrderSubLine]
	,LabelQuotations AS [SalesOrderType]
	,QuotationNum AS [SalesOrderCategory] -- QuotationNum - Reference num to a quotating. Putting it in SalesOrderCategory since it is not used for Forankra FR
	,OrderDate AS [SalesOrderDate]
	,NeedByDate AS [NeedbyDate]
	,DelivDate AS [ExpDelivDate]
	,CAST('1900-01-01' AS date) AS ActualDelivDate
	,CAST('1900-01-01' AS date) AS ConfirmedDelivDate
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,OrderQty AS [SalesOrderQty]

	--	RemainingQty=OrderQty when LabelQuotation=2
--		DelivQty=OrderQty when LabelQuotation IN (3,4)
--		InvoicedQty=OrderQty when LabelQuotation=4
	,IIF(LabelQuotations IN ('3','4'), OrderQty, 0) AS DelivQty -- DZ 20211130
	,IIF(LabelQuotations ='2', OrderQty, 0) AS RemainingQty -- DZ 20211130
	,IIF(LabelQuotations ='4', OrderQty, 0) AS SalesInvoiceQty
	,'' AS [UoM]
	,UnitPrice
	,AVG(UnitCost) as UnitCost
	,COALESCE(Currency, 'EUR') AS Currency
	,COALESCE(ExchangeRate, 1) AS ExchangeRate
	,CASE WHEN LabelQuotations IN ('3','4') THEN '0' ELSE '1' END  AS OpenRelease  --LabelQuotations = 4 means Closed order
	,DiscountAmount
	,DiscountPercent
	,TRIM([PartNum]) AS PartNum
	,'' AS [PartType]
	,PartStatus
	,SalesPersonName
	,TRIM(WarehouseCode) AS WarehouseCode
	,SalesChannel
	,'Normal Order Handling' AS AxInterSalesChannel
	,BusinessChannel AS [Department]
	,SuspendingFlag AS [ProjectNum] -- Since BackOrder needs this flag=1, so use [ProjectNum] for SuspendingFlag for ACK. /DZ. 20211104
	,'' AS [IndexKey]
	,'0' AS Cancellation
	,'' AS SORes1
	,'' AS SORes2
	,'' AS SORes3
	,'' AS ReturnComment
	,'' AS SalesReturnOrderNum
	,'' AS SalesReturnInvoiceNum
	,NULL AS [TotalMiscChrg]
FROM stage.FOR_FR_OLine
WHERE SuspendingFlag <> 2 --since these are orders that they do not consider 'real' unless they are reactivated. by John D 20210902 -- /DZ
GROUP BY PartitionKey ,Company, CustomerNum, OrderNum, OrderLine,/*OrderSubLine,*/OrderType,OrderDate, NeedByDate,DelivDate,InvoiceNum,OrderQty
	/*,DelivQty */ ,RemainingQty, UnitPrice, /*UnitCost,*/ Currency, ExchangeRate, DiscountAmount, DiscountPercent, PartNum, PartStatus
	,SalesPersonName,WarehouseCode, SalesChannel, BusinessChannel, LabelQuotations,QuotationNum, OrderSubLine, SuspendingFlag
--	order by OpenRelease desc
GO
PRINT N'Creating [stage].[CYE_ES_PartTranLine]'
GO
CREATE TABLE [stage].[CYE_ES_PartTranLine]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (8) NOT NULL,
[SysDate] [nvarchar] (50) NULL,
[TranDate] [date] NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[BinNumber] [nvarchar] (50) NULL,
[LotNum] [nvarchar] (50) NULL,
[TranType] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[TranQty] [decimal] (18, 4) NULL,
[AvgCost] [decimal] (18, 4) NULL,
[SysRowID] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCyE_ES_StockTransaction]'
GO
CREATE VIEW [stage].[vCyE_ES_StockTransaction] AS 
--COMMENT EMPTY FIELDS // ADD UPPER() TRIM() INTO CustomerID,PartID 23-01-03 
--ADD UPPER() INTO SupplierID 23-01-23 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', TRIM(TranType), '#', TRIM(LotNum), '#', TRIM([PartNum]), '#', TRIM([WarehouseCode]), '#', ([TranDate]), '#', TRIM([SysRowID])))) AS StockTransactionID
	,[Company]
	,TRIM([WarehouseCode]) AS WarehouseCode
	,TranType AS TransactionCode
	--,'' AS TransactionDescription
	,IIF(TRIM('')='', NULL,TRIM('')) AS IssuerReceiverNum
	,IIF(TRIM('')='', NULL,TRIM('')) AS OrderNum
	--,'' AS OrderLine
	,IIF(TRIM('')='', NULL,TRIM('')) AS InvoiceNum
	--,'' AS InvoiceLine
	,[PartNum]
	,IIF(TRIM([BinNumber])='', '',TRIM(BinNumber)) AS BinNum
	,IIF(TRIM(LotNum)='', '',TRIM(LotNum)) AS BatchNum
	,CONVERT(date, [TranDate]) AS TransactionDate
	--,'' AS TransactionTime
	,[TranQty]/1000 AS TransactionQty
	,[TranQty]/1000*AvgCost/100 AS TransactionValue
	,AvgCost/100 AS [CostPrice]
	--,NULL AS SalesUnitPrice
	,'EUR' AS Currency
	--,'' AS [Reference]
	,CONVERT(date, '1900-01-01') AS AdjustmentDate
	--,'' AS InternalExternal
	--,'' AS STRes1
	--,'' AS STRes2
	--,'' AS STRes3
	,PartitionKey
	,CONVERT([binary](32),HASHBYTES('SHA2_256',[Company])) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT([Company],'#',TRIM([PartNum]))))) AS PartID
    --,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([PartNum])))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,IIF(TranType = '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company], '#', TRIM('')))), NULL) AS PurchaseInvoiceID
	,IIF(TranType = '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company], '#', TRIM('')))), NULL) AS PurchaseOrderNumID
	,IIF(TranType = '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company], '#', TRIM('')))), NULL) AS SalesOrderNumID
	,IIF(TranType = '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company], '#', TRIM('')))), NULL) AS SalesInvoiceID
	,IIF(TranType = '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]), '#', '')))), NULL) AS CustomerID
	--,IIF(TranType = '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company], '#', TRIM('')))), NULL) AS CustomerID
	,IIF(TranType = '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]), '#', '')))), NULL) AS SupplierID
	--,IIF(TranType = '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company], '#', TRIM('')))), NULL) AS SupplierID
	,CONVERT([binary](32),HASHBYTES('SHA2_256', 'EUR')) AS CurrencyID
	,[SysRowID] AS IndexKey
FROM [stage].[CYE_ES_PartTranLine]
WHERE PartNum <> '' OR PartNum IS NOT NULL
GO
PRINT N'Creating [stage].[CER_LT_SOLine]'
GO
CREATE TABLE [stage].[CER_LT_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (100) NULL,
[PartNum] [nvarchar] (50) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Site] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[Indexkey] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[ReturnComment] [nvarchar] (max) NULL,
[ReturnNum] [nvarchar] (50) NULL,
[VATRate] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vCER_LT_SOLine]'
GO
CREATE VIEW [stage].[vCER_LT_SOLine] AS
--COMMENT EMPTY FIELDS / ADD TRIM()UPPER() INTO PartID,CustomerID,WarehouseID 2022-12-14 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(Indexkey)))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', OrderNum, '#', OrderLine, '#', OrderSubLine, '#', InvoiceNum))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ), '#', InvoiceNum))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum)))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) )))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) )))) AS PartID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID 
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', WarehouseCode))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	,CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) )) AS SalesOrderCode
	,CONVERT(int, replace(convert(date,InvoiceDate),'-','')) AS SalesInvoiceDateID  --Redundant?
	,CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine)) AS SalesInvoiceCode --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey

	,TRIM(Company) AS Company
	,TRIM(SalesPerson) AS SalesPersonName
	,TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ) AS CustomerNum
	,TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) ) AS PartNum
	,IIF(OrderSubLine = '000000',  'Main',  'Sub' ) AS PartType --change from "CASE WHEN TRIM(OrderNum) = '0' THEN 'PrimaryPart' ELSE 'SubPart' END" 20210423 /DZ
	,TRIM(OrderNum) AS SalesOrderNum
	,TRIM(OrderLine) AS SalesOrderLine
	,TRIM(OrderSubLine) AS SalesOrderSubLine -- added 20210423 /DZ
	,CONVERT(nvarchar(50), OrderType) AS SalesOrderType
	,TRIM(InvoiceNum) AS SalesInvoiceNum
	,TRIM(InvoiceLine) AS SalesInvoiceLine
	--,'' AS SalesInvoiceType
	,CASE WHEN InvoiceDate = '' THEN '1901-01-01' ELSE CONVERT(date, InvoiceDate) END AS SalesInvoiceDate
	,ActualDeliveryDate AS ActualDelivDate
	,SellingShipQty AS SalesInvoiceQty
	--,'' AS UoM
	,UnitPrice
	,UnitCost
	,CONVERT(decimal (18,4), IIF(SellingShipQty*UnitPrice = 0, 0, DiscountAmount/SellingShipQty*UnitPrice)) AS DiscountPercent --added calculation 20210423 /DZ
	,DiscountAmount
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	,TotalMiscChrg
	,VATRate
	,(1-COALESCE(VATRate,0)/100) *  (UnitPrice * SellingShipQty - DiscountAmount) VATAmount
	,Currency
	,ExchangeRate
	,CreditMemo
	,CASE WHEN LEFT(TRIM(OrderNum),4) = '7000' THEN 'Webshop'
		WHEN LEFT(TRIM(OrderNum),4) = '0000' THEN 'Normal Order Handling'
		ELSE 'Normal Order Handling' END AS SalesChannel
	--,'' AS [Department]
	,CASE WHEN WarehouseCode = '' OR WarehouseCode is NULL THEN 'Other' ELSE TRIM(WarehouseCode) END AS WarehouseCode
	--,NULL AS DeliveryAddress
	--,'' AS CostBearerNum
	--,'' AS CostUnitNum
	,ReturnComment
	,TRIM(ReturnNum) AS ReturnNum
	--,'' AS ProjectNum
	,Indexkey AS IndexKey
	--,'' AS SIRes1
	--,'' AS SIRes2
	--,'' AS SIRes3

FROM stage.CER_LT_SOLine lts
--	LEFT JOIN dw.Customer ltc ON Company = ltc.Company AND CustNum = ltc.CustomerNum
--GROUP BY
--	PartitionKey, Company, CustNum, OrderNum, OrderLine, OrderSubLine, UnitPrice, UnitCost, DiscountAmount, PartNum, SalesPerson, WarehouseCode, OrderType, InvoiceNum, InvoiceLine
--	, InvoiceDate, ActualDeliveryDate, SellingShipQty, TotalMiscChrg, CreditMemo, IndexKey, Currency, ExchangeRate, ReturnComment, ReturnNum, VATRate
GO
PRINT N'Creating [stage].[FOR_PL_Customer]'
GO
CREATE TABLE [stage].[FOR_PL_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[MainCustomerName] [nvarchar] (200) NULL,
[CustomerName] [nvarchar] (200) NULL,
[AddressLine1] [nvarchar] (200) NULL,
[TelephoneNum1] [nvarchar] (50) NULL,
[TelephoneNum2] [nvarchar] (50) NULL,
[Email] [nvarchar] (100) NULL,
[ZipCode] [nvarchar] (50) NULL,
[City] [nvarchar] (100) NULL,
[State] [nvarchar] (100) NULL,
[CountryName] [nvarchar] (100) NULL,
[CustomerIndustry] [nvarchar] (100) NULL,
[CustomerSubIndustry] [nvarchar] (100) NULL,
[CustomerGroup] [nvarchar] (100) NULL,
[CustomerSubGroup] [nvarchar] (100) NULL,
[SalesPersonCode] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[VATNum] [nvarchar] (50) NULL,
[AccountNum] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[SalesDistrict] [varchar] (50) NULL,
[CRes1] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vFOR_PL_Customer]'
GO


CREATE VIEW [stage].[vFOR_PL_Customer] AS

SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',[Company])) AS CompanyID
	,CONCAT([Company],'#',TRIM([CustomerNum])) AS CustomerCode
	,PartitionKey
	,Company
    ,TRIM(CustomerNum) AS CustomerNum
	,MainCustomerName AS MainCustomerName
    ,COALESCE(MainCustomerName,CustomerName) AS CustomerName
    ,[AddressLine1]
    --,''	AS [AddressLine2]
    --,'' AS [AddressLine3]
	,[TelephoneNum1]
	,[TelephoneNum2]
	,[Email]
	,[ZIPCode]
    ,IIF([City]= ' ',null,[dbo].[ProperCase]([City])) AS [City]    
    ,[State]
	,SalesDistrict
    ,cc.CountryName		AS CountryName
	--,''					AS Division
	,CustomerIndustry
	,CustomerSubIndustry
	,TRIM(AddressLine1) as AddressLine
	,concat_ws(',',coalesce(cc.CountryName,null),' ' + coalesce(IIF(City= ' ',null,City),' ' + IIF(ZIPCode= ' ',null,ZIPCode)),' ' + coalesce(IIF([addressline1]= ' ',null,[addressline1]),'')) AS FullAddressLine
    ,CustomerGroup
	,CustomerSubGroup
	,SalesPersonCode
    ,SalesPersonName
	--,'' AS [SalesPersonResponsible]
    ,[VATNum]
	--,'' AS OrganizationNum
	,AccountNum
	,[InternalExternal]
	--,''	AS CustomerScore
	--,'' CustomerType
	--,'' ValidFrom
	--,'' ValidTo
	,c.[CRes1] as CRes1
	,c.CountryName as CountryCode

  FROM [stage].[FOR_PL_Customer] c
  LEFT JOIN [dbo].[CountryCodes] cc ON c.CountryName = cc.[Alpha-2 code]
GO
PRINT N'Creating [stage].[WID_EE_StockTransaction]'
GO
CREATE TABLE [stage].[WID_EE_StockTransaction]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[SysRowID] [nchar] (8) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[OrderNum] [nchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[BinNumber] [nvarchar] (50) NULL,
[BatchID] [nvarchar] (50) NULL,
[FIFOBatchID] [nvarchar] (50) NULL,
[SupplierBatchID] [nvarchar] (50) NULL,
[TranDate] [date] NULL,
[CreateDate] [date] NULL,
[CreateTime] [nvarchar] (10) NULL,
[TranDT] [nvarchar] (50) NULL,
[TranType] [nchar] (2) NULL,
[TranTypeDesc] [varchar] (100) NULL,
[TranSource] [nvarchar] (50) NULL,
[Reference] [nvarchar] (50) NULL,
[IssuerReceiverCode] [nvarchar] (50) NULL,
[CostPrice] [decimal] (18, 4) NULL,
[SellingPrice] [decimal] (18, 4) NULL,
[TranQty] [decimal] (18, 4) NULL,
[TranValue] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (10) NULL,
[ExchangeRate] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vWID_EE_StockTransaction]'
GO
CREATE VIEW [stage].[vWID_EE_StockTransaction] AS 
--COMMENT EMPTY FIELDS / ADD TRIM() UPPER() INTO CustomerID,PartID 2022-12-23 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(st.[Company], '#', TRIM([SysRowID])))) AS StockTransactionID
	,st.[Company]
	,TRIM([WarehouseCode]) AS WarehouseCode
	,iif(CONVERT(date, [TranDate]) = '2012-10-31' and [TranTypeDesc] = 'Incoming Goods','OB',TranType) AS TransactionCode
	,iif(CONVERT(date, [TranDate]) = '2012-10-31' and [TranTypeDesc] = 'Incoming Goods','Opening balance',[TranTypeDesc]) AS TransactionDescription
	,IIF(TRIM([IssuerReceiverCode]) = '', NULL, TRIM(IssuerReceiverCode)) AS IssuerReceiverNum
	,IIF(TRIM([OrderNum])='', NULL,TRIM(OrderNum)) AS OrderNum
	--,NULL AS OrderLine
	,IIF(TRIM([InvoiceNum])='', NULL,TRIM(InvoiceNum)) AS InvoiceNum
	--,NULL AS InvoiceLine
	,[PartNum]
	,IIF(TRIM([BinNumber])='', NULL,TRIM(BinNumber)) AS BinNum
	,IIF(TRIM([BatchID])='', NULL,TRIM(BatchID)) AS BatchNum
	,CONVERT(date, [TranDate]) AS TransactionDate
	,[CreateTime] AS TransactionTime
	,[TranQty] AS TransactionQty
	,[TranValue] AS TransactionValue
	,[CostPrice]
	,[SellingPrice] AS SalesUnitPrice
	,IIF(TRIM([Currency])='', NULL,TRIM(Currency)) AS Currency
	,[Reference]
	,CONVERT(date, [CreateDate]) AS AdjustmentDate
	--,CASE WHEN c.CustomerGroup = 'CONCERN' OR c.CustomerGroup IS NULL THEN 'Internal'
	--	ELSE 'External' END AS InternalExternal
	,IIF([TranTypeDesc] IN ('Incoming goods', 'Outgoing goods'), 'External', 'Internal') AS InternalExternal
	--,'' AS STRes1
	--,'' AS STRes2
	--,'' AS STRes3
--  ,FIFOBatchID
--  ,SupplierBatchID

	,CONVERT([binary](32),HASHBYTES('SHA2_256',st.[Company])) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(st.[Company]),'#',TRIM([PartNum]))))) AS PartID
    --,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(st.[Company],'#',TRIM([PartNum])))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(st.[Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,IIF(TranType <> '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(st.[Company],'#',TRIM([InvoiceNum])))), NULL) AS PurchaseInvoiceID
	,IIF(TranSource <> '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(st.[Company],'#',TRIM([OrderNum])))), NULL) AS PurchaseOrderNumID
	,IIF(TranSource = '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(st.[Company],'#',TRIM([OrderNum])))), NULL) AS SalesOrderNumID
	,IIF(TranSource = '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(st.[Company],'#',TRIM([InvoiceNum])))), NULL) AS SalesInvoiceID
	,IIF(TranSource = '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(st.[Company]),'#',TRIM([IssuerReceiverCode]))))), NULL) AS CustomerID
	--,IIF(TranSource = '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(st.[Company],'#',TRIM([IssuerReceiverCode])))), NULL) AS CustomerID
	,IIF(TranSource <> '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(st.[Company],'#',TRIM([IssuerReceiverCode])))), NULL) AS SupplierID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',TRIM([Currency]))) AS CurrencyID
	,st.PartitionKey
	,[SysRowID] AS IndexKey

FROM [stage].[WID_EE_StockTransaction] st
	--LEFT JOIN dw.Customer c ON st.Company = c.Company AND st.IssuerReceiverCode = c.CustomerNum
GO
PRINT N'Creating [stage].[AXL_HU_SOLine]'
GO
CREATE TABLE [stage].[AXL_HU_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[InvoiceType] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (22, 8) NULL,
[UnitCost] [decimal] (22, 8) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[VAT] [decimal] (18, 4) NULL,
[CashDiscountOffered] [decimal] (18, 4) NULL,
[CashDiscountUsed] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OrderType] [nvarchar] (50) NULL,
[SalesChannel] [varchar] (10) NULL,
[BusinessChain] [varchar] (10) NULL,
[Res1] [varchar] (100) NULL,
[Res2] [varchar] (100) NULL,
[Res3] [varchar] (100) NULL,
[PartDesc] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[vAXL_HU_SOLine]'
GO
CREATE VIEW [stage].[vAXL_HU_SOLine] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine), '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(PartNum), '#', TRIM(PartDesc))))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(PartDesc))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(InvoiceNum))))) AS SalesLedgerID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum), '#', (IIF(TRIM([PartNum]) LIKE 'IACO%' , 'MISC. CHARGES', TRIM([PartDesc]))))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT(int, IIF(InvoiceDate = '', 19900101, replace(convert(date, InvoiceDate), '-', ''))) AS SalesInvoiceDateID
	,UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine))) AS SalesInvoiceCode
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine))) AS SalesOrderCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(SalesPerson) AS SalesPersonName
	,TRIM(CustNum) AS [CustomerNum]
	,TRIM(PartNum) AS PartNum
	,UPPER(PartDesc) AS PartDesc
	,'' AS [PartType]
	,TRIM(OrderNum) AS [SalesOrderNum]
	,CAST(OrderLine AS text) AS [SalesOrderLine]
	,TRIM(OrderSubLine) AS [SalesOrderSubLine]
	,TRIM(OrderType) AS [SalesOrderType]
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,TRIM(InvoiceLine) AS [SalesInvoiceLine]
	,TRIM(InvoiceType) AS [SalesInvoiceType]
	,CASE WHEN InvoiceDate = '' THEN '1900-01-01' ELSE CONVERT(date, InvoiceDate) END AS [SalesInvoiceDate]
	,ActualDeliveryDate AS [ActualDelivDate]
	,SellingShipQty AS [SalesInvoiceQty]
	,TRIM(Unit) AS [UoM]
	,UnitPrice
	,UnitCost
	,DiscountAmount
	,IIF(UnitPrice*SellingShipQty = 0, 0, DiscountAmount/UnitPrice*SellingShipQty) AS DiscountPercent
	,CONVERT(decimal(18,4), CashDiscountOffered) AS [CashDiscOffered] 
	,CONVERT(decimal(18,4), CashDiscountUsed) AS [CashDiscUsed] 
	,TotalMiscChrg
	,VAT AS [VATAmount]
	,Currency
	,ExchangeRate
	,TRIM(CreditMemo) AS CreditMemo
	,TRIM([SalesChannel]) AS [SalesChannel]
	,TRIM([BusinessChain]) AS [Department]
	,TRIM(WarehouseCode) AS WarehouseCode
	,NULL AS [CostBearerNum]
	,NULL AS [CostUnitNum]
	,NULL AS [ReturnComment]
	,NULL AS [ReturnNum]
	,NULL AS [ProjectNum]
	,'' AS [IndexKey]
	,Res1 AS SIRes1
	,Res2 AS SIRes2
	,Res3 AS SIRes3
FROM stage.AXL_HU_SOLine


	--,CASE WHEN OrderType = 'MD' THEN 1 
	--		WHEN OrderType = 'MT' THEN 2
	--		WHEN OrderType = 'MR' THEN 3
	--		WHEN OrderType = 'IV' THEN 4
	--		WHEN OrderType = 'Misc. Charges' THEN 5 --added after Ulf changes in the night /DZ
	--	ELSE OrderType END AS [SalesOrderType]

--GROUP BY
--	PartitionKey, Company, SalesPerson, CustNum, PartNum, PartDesc, OrderNum, OrderLine, OrderSubLine,OrderType, InvoiceNum, InvoiceLine, InvoiceDate, SellingShipQty, UnitPrice, UnitCost, DiscountAmount, TotalMiscChrg, WarehouseCode, CreditMemo, ActualDeliveryDate, Currency, ExchangeRate, InvoiceType, Res1, Res2, Res3, Unit, VAT, SalesChannel, BusinessChain, CashDiscountOffered, CashDiscountUsed
GO
PRINT N'Creating [dm_LS].[fctFinanceBudget]'
GO

CREATE VIEW [dm_LS].[fctFinanceBudget]	AS

SELECT fb.[BudgetID]
,fb.[CompanyID]
,fb.[AccountID]
,fb.[CostUnitID]
,fb.[CostBearerID]
,fb.[ProjectID]
,fb.[PartitionKey]
,fb.[BudgetType]
,fb.[BudgetName]
,fb.[BudgetDescription]
,fb.[Company]
,fb.[BudgetPeriod]
,fb.[BudgetPeriodDate]
,fb.[PeriodType]
,fb.[Currency]
,fb.[BudgetFinance]
,fb.[CostBearerNum]
,fb.[CostUnitNum]
,fb.[AccountNum]
,fb.[AccountGroup]
,fb.[ProjectNum]
,fb.[BRes1]
,fb.[BRes2]
,fb.[BRes3]
,fb.[ExchangeRate]
,fb.[IsActiveRecord]
FROM [dm].[FactFinanceBudget] fb
LEFT JOIN dbo.Company com ON fb.Company = com.Company
WHERE com.BusinessArea = 'Lifting Solutions' AND com.[Status] = 'Active'

--WHERE Company IN ('CNOCERT')
GO
PRINT N'Creating [stage].[NOM_FI_Warehouse]'
GO
CREATE TABLE [stage].[NOM_FI_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[WarehouseCode] [nvarchar] (10) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vNOM_FI_Warehouse]'
GO
CREATE   view [stage].[vNOM_FI_Warehouse] AS
--COMMENT EMPTY FIELDS 2022-12-15 VA
SELECT 
	
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey
	,[Company] AS Company
	,[WarehouseCode]
	,[WarehouseName]
	--,'' AS WarehouseDistrict
	--,'' AS WarehouseAddress
	--,'' AS WarehouseDescription
	--,'' AS WarehouseType
	--,'' AS WarehouseCountry
	--,'' AS WarehouseSite
FROM [stage].[NOM_FI_Warehouse]
GO
PRINT N'Creating [stage].[TRA_SE_PurchaseOrder]'
GO
CREATE TABLE [stage].[TRA_SE_PurchaseOrder]
(
[PartitionKey] [nvarchar] (25) NULL,
[Company] [nvarchar] (8) NULL,
[PurchaseOrderNum] [nvarchar] (60) NULL,
[PurchaseOrderLine] [nvarchar] (60) NULL,
[PurchaseOrderType] [nvarchar] (50) NULL,
[PurchaseOrderDate] [nvarchar] (60) NULL,
[PurchaseOrderStatus] [nvarchar] (50) NULL,
[IsOrderClosed] [nvarchar] (6) NULL,
[OrgReqDelivDate] [nvarchar] (60) NULL,
[ReqDelivDate] [nvarchar] (60) NULL,
[OrgCommittedDelivDate] [nvarchar] (60) NULL,
[CommittedDelivDate] [nvarchar] (60) NULL,
[ActualDelivDate] [nvarchar] (60) NULL,
[PartNum] [nvarchar] (30) NULL,
[SupplierNum] [nvarchar] (20) NULL,
[SupplierPartNum] [nvarchar] (30) NULL,
[SupplierInvoiceNum] [nvarchar] (25) NULL,
[PurchaseOrderQty] [nvarchar] (60) NULL,
[PurchaseReceiveQty] [nvarchar] (60) NULL,
[PurchaseInvoiceQty] [nvarchar] (60) NULL,
[UoM] [nvarchar] (4) NULL,
[UnitPrice] [nvarchar] (60) NULL,
[DiscountPercent] [nvarchar] (60) NULL,
[DiscountAmount] [nvarchar] (60) NULL,
[Currency] [nvarchar] (60) NULL,
[PurchaserName] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (8) NULL,
[CreatedTimeStamp] [nvarchar] (60) NULL,
[ModifiedTimeStamp] [nvarchar] (60) NULL,
[IsActiveRecord] [nvarchar] (1) NULL
)
GO
PRINT N'Creating [stage].[vTRA_SE_PurchaseOrder]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vTRA_SE_PurchaseOrder]
	AS select 
CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM(PurchaseOrderNum),'#',TRIM(PurchaseOrderLine),'#')))) AS PurchaseOrderID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',upper(CONCAT(Company,'#',TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',upper(CONCAT(Company,'#',TRIM(SupplierNum))))) AS SupplierID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',upper(TRIM([Company])))) AS CompanyID,
	UPPER(CONCAT(TRIM(Company), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine),'#')) as PurchaseOrderCode
	, PartitionKey
	,UPPER(COMPANY) AS Company
	, trim(PurchaseOrderNum	) as PurchaseOrderNum	
	, trim(PurchaseOrderLine) as PurchaseOrderLine
	,PurchaseOrderType
	,cast(PurchaseOrderDate as date) as PurchaseOrderDate
	,PurchaseOrderStatus
	, iif(trim(IsOrderClosed) = 'closed',1,0) as IsClosed
	, cast(OrgReqDelivDate as date) as OrgReqDelivDate
	, cast(ReqDelivDate as date) as ReqDelivDate
	, cast(OrgCommittedDelivDate as date) as OrgCommittedDelivDate
	, cast(CommittedDelivDate as date) as CommittedDelivDate
	, cast(ActualDelivDate as date) as ActualDelivDate
	, PartNum
	, SupplierNum
	, SupplierPartNum
	,SupplierInvoiceNum
	,cast(PurchaseOrderQty as decimal(18,4)) as PurchaseOrderQty
	,cast(PurchaseInvoiceQty as decimal(18,4)) as InvoiceQty
	,cast(PurchaseReceiveQty as decimal(18,4)) as ReceiveQty
	,UoM
	,cast(UnitPrice as decimal(18,4)) as UnitPrice
	,cast(DiscountPercent as decimal(18,4)) as DiscountPercent
	,cast(DiscountAmount as decimal(18,4)) as DiscountAmount
	, Currency -- Seems that is not the currency. Maybe is ExchangeRate
	,PurchaserName
	,WarehouseCode
	,cast(IsActiveRecord as bit) as IsActiveRecord
from stage.TRA_SE_PurchaseOrder
;
GO
PRINT N'Creating [stage].[AXL_SE_SOLine]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[AXL_SE_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[InvoiceType] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (22, 8) NULL,
[UnitCost] [decimal] (22, 8) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[VAT] [decimal] (18, 4) NULL,
[CashDiscountOffered] [decimal] (18, 4) NULL,
[CashDiscountUsed] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OrderType] [nvarchar] (50) NULL,
[SalesChannel] [varchar] (10) NULL,
[BusinessChain] [varchar] (10) NULL,
[Res1] [varchar] (100) NULL,
[Res2] [varchar] (100) NULL,
[Res3] [varchar] (100) NULL,
[PartDesc] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[vAXL_SE_SOLine]'
GO
CREATE VIEW [stage].[vAXL_SE_SOLine] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine), '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(PartNum), '#', TRIM(PartDesc))))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(PartDesc))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(InvoiceNum))))) AS SalesLedgerID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum), '#', (IIF(TRIM([PartNum]) LIKE 'IACO%' , 'MISC. CHARGES', TRIM([PartDesc]))))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT(int, IIF(InvoiceDate = '', 19900101, replace(convert(date, InvoiceDate), '-', ''))) AS SalesInvoiceDateID
	,UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine))) AS SalesInvoiceCode
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine))) AS SalesOrderCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(SalesPerson) AS SalesPersonName
	,TRIM(CustNum) AS [CustomerNum]
	,TRIM(PartNum) AS PartNum
	,UPPER(PartDesc) AS PartDesc
	,'' AS [PartType]
	,TRIM(OrderNum) AS [SalesOrderNum]
	,CAST(OrderLine AS text) AS [SalesOrderLine]
	,TRIM(OrderSubLine) AS [SalesOrderSubLine]
	,TRIM(OrderType) AS [SalesOrderType]
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,TRIM(InvoiceLine) AS [SalesInvoiceLine]
	,TRIM(InvoiceType) AS [SalesInvoiceType]
	,CASE WHEN InvoiceDate = '' THEN '1900-01-01' ELSE CONVERT(date, InvoiceDate) END AS [SalesInvoiceDate]
	,ActualDeliveryDate AS [ActualDelivDate]
	,SellingShipQty AS [SalesInvoiceQty]
	,TRIM(Unit) AS [UoM]
	,UnitPrice
	,UnitCost
	,DiscountAmount
	,IIF(UnitPrice*SellingShipQty = 0, 0, DiscountAmount/UnitPrice*SellingShipQty) AS DiscountPercent
	,CONVERT(decimal(18,4), CashDiscountOffered) AS [CashDiscOffered] 
	,CONVERT(decimal(18,4), CashDiscountUsed) AS [CashDiscUsed] 
	,TotalMiscChrg
	,VAT AS [VATAmount]
	,Currency
	,ExchangeRate
	,TRIM(CreditMemo) AS CreditMemo
	,TRIM([SalesChannel]) AS [SalesChannel]
	,TRIM([BusinessChain]) AS [Department]
	,TRIM(WarehouseCode) AS WarehouseCode
	,NULL AS [CostBearerNum]
	,NULL AS [CostUnitNum]
	,NULL AS [ReturnComment]
	,NULL AS [ReturnNum]
	,NULL AS [ProjectNum]
	,'' AS [IndexKey]
	,Res1 AS SIRes1
	,Res2 AS SIRes2
	,Res3 AS SIRes3
FROM stage.AXL_SE_SOLine


	--,CASE WHEN OrderType = 'MD' THEN 1 
	--		WHEN OrderType = 'MT' THEN 2
	--		WHEN OrderType = 'MR' THEN 3
	--		WHEN OrderType = 'IV' THEN 4
	--		WHEN OrderType = 'Misc. Charges' THEN 5 --added after Ulf changes in the night /DZ
	--	ELSE OrderType END AS [SalesOrderType]

--GROUP BY
--	PartitionKey, Company, SalesPerson, CustNum, PartNum, PartDesc, OrderNum, OrderLine, OrderSubLine,OrderType, InvoiceNum, InvoiceLine, InvoiceDate, SellingShipQty, UnitPrice, UnitCost, DiscountAmount, TotalMiscChrg, WarehouseCode, CreditMemo, ActualDeliveryDate, Currency, ExchangeRate, InvoiceType, Res1, Res2, Res3, Unit, VAT, SalesChannel, BusinessChain, CashDiscountOffered, CashDiscountUsed
GO
PRINT N'Creating [stage].[NOM_SEIND_Customer]'
GO
CREATE TABLE [stage].[NOM_SEIND_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[CustomerName] [nvarchar] (100) NULL,
[MainCustomerName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[AddressLine3] [nvarchar] (100) NULL,
[ABCCode] [nvarchar] (10) NULL,
[City] [nvarchar] (50) NULL,
[Zip] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerMainGroup] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNr] [nvarchar] (20) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (2) NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[OrganizationNum] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vNOM_SEIND_Customer]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vNOM_SEIND_Customer] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Company])))) AS CompanyID
	,UPPER(CONCAT([Company], '#', TRIM([CustomerNum]))) AS CustomerCode
	
	,PartitionKey
	,UPPER(TRIM(Company)) AS Company
    ,UPPER(TRIM(CustomerNum)) AS CustomerNum
	,MainCustomerName
    ,[dbo].[ProperCase](CustomerName) AS CustomerName
    ,[AddressLine1]
    ,[AddressLine2]
    ,[AddressLine3]
	--,'' AS [TelephoneNum1]
	--,'' AS [TelephoneNum2]
	--,'' AS [Email]
	,[ZIP] AS ZipCode
    ,IIF([City]= ' ', NULL, [dbo].[ProperCase]([City])) AS [City]    
    ,IIF([State]= ' ', NULL, [State]) AS [State]
	,[District]	AS SalesDistrict
	,TRIM(CountryCode) AS CountryCode
    ,[dbo].[ProperCase](CountryName) AS CountryName
	--,'' AS Division
	--,'' AS CustomerIndustry
	--,'' AS CustomerSubIndustry
	,[dbo].[ProperCase](TRIM(CONCAT(AddressLine1,' ',AddressLine2))) as AddressLine
	,[dbo].[ProperCase](concat_ws(',',coalesce(TRIM(CountryName),null),coalesce(IIF([State]= ' ',null,TRIM([State])),IIF(City= ' ',null,TRIM(City)),IIF(ZIP= ' ',null,TRIM(ZIP))),IIF([AddressLine3]=' ',null, TRIM([AddressLine3]))
		,coalesce(IIF([addressline1]= ' ',null,TRIM([addressline1])),IIF([addressline2]= ' ',null,TRIM([addressline2])))
		,coalesce(IIF([addressline2]= ' ',null,TRIM([addressline2])),IIF([addressline3]= ' ',null,TRIM([addressline3]))))) AS FullAddressLine
    ,[dbo].[ProperCase](CustomerMainGroup) AS CustomerGroup
	,[dbo].[ProperCase](CustomerGroup) AS CustomerSubGroup
	,[SalesRepCode] AS SalesPersonCode
    ,[dbo].[ProperCase](SalesPersonName) AS SalesPersonName
	--,'' AS [SalesPersonResponsible]
    ,TRIM([VATRegNr]) AS [VATNum]
	,OrganizationNum
	,[AccountString] AS AccountNum
	,[InternalExternal]
	,[ABCCode] AS CustomerScore
	--,'' AS CustomerType
	,GETDATE() AS ValidFrom
	,DATEADD(year, 1, GETDATE()) AS ValidTo
FROM [stage].[NOM_SEIND_Customer]
GO
PRINT N'Creating [stage].[SCM_FI_Budget]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[SCM_FI_Budget]
(
[PartitionKey] [nvarchar] (50) NULL,
[Company] [nvarchar] (8) NULL,
[BudgetPeriod] [nvarchar] (20) NULL,
[PeriodType] [nvarchar] (20) NULL,
[CustomerNum] [nvarchar] (20) NULL,
[CustomerGroup] [nvarchar] (20) NULL,
[SalesPerson] [nvarchar] (20) NULL,
[ProductGroup] [nvarchar] (20) NULL,
[BudgetSales] [decimal] (18, 4) NULL,
[BudgetCost] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vSCM_FI_Budget]'
GO

create view [stage].[vSCM_FI_Budget]  as

select 
 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#', cast(CONCAT(BudgetPeriod,'-01') as date))))) AS BudgetID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',Company)) AS CompanyID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',null)))) AS ProjectID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',null)))) AS WarehouseID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',null)))) AS PartID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',null)))) AS CustomerID,
	YEAR(cast(CONCAT(BudgetPeriod,'-01') as date))*10000 + MONTH(cast(CONCAT(BudgetPeriod,'-01') as date))*100 + DAY(cast(CONCAT(BudgetPeriod,'-01') as date))	AS BudgetPeriodDateID,
	PartitionKey,
	Company,
	cast(CONCAT(BudgetPeriod,'-01') as date) AS BudgetPeriodDate,
	PeriodType,
	try_cast(replace(BudgetSales               ,',','.') as numeric(18,5)) as BudgetSales ,
	try_cast(replace(BudgetCost                ,',','.') as numeric(18,5)) as BudgetCost 
from stage.SCM_FI_Budget
;
GO
PRINT N'Creating [stage].[FOR_FR_Budget]'
GO
CREATE TABLE [stage].[FOR_FR_Budget]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[BudgetPeriod] [nvarchar] (50) NULL,
[BudgetPeriodDate] [date] NULL,
[PeriodType] [nvarchar] (50) NULL,
[ProjectNum] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[SalesPersonCode] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[BudgetDescription] [nvarchar] (max) NULL,
[Currency] [nvarchar] (50) NULL,
[BudgetSales] [decimal] (18, 4) NULL,
[BudgetCost] [decimal] (18, 4) NULL,
[BRes1] [nvarchar] (50) NULL,
[BRes2] [nvarchar] (50) NULL,
[Bres3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vFOR_FR_BudgetOld]'
GO
CREATE VIEW [stage].[vFOR_FR_BudgetOld] AS

-- this budget is in use!!!
SELECT 

	  CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#', '2022', '#', TRIM(CustomerNum), '#', '', '#', '', '#', TRIM(CustomerGroup) )))) AS BudgetID
	  ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	  ,CONVERT(varchar(50), getdate(), 23) AS PartitionKey --Temporary added
	  ,'2022'	AS BudgetPeriod
	  ,DATEFROMPARTS( CAST('2022' AS int) --Year
					, CAST('01' AS int) --Month
						, 1) AS BudgetPeriodDate
		,'2022' AS [YEAR]
		,'01' AS [Month]

	  ,UPPER([Company]) AS Company
      ,CustomerNum
	  ,'' AS ProjectNum
	  ,'' AS AccountNum
	  ,'Yearly' AS PeriodType
--      ,COALESCE(NULLIF(TRIM([CustomerNum]),''), CONCAT('BUD','-' + NULLIF(TRIM(CustomerGroup),''),'-' + NULLIF(TRIM(SalesRepCode),''))) AS CustomerNum
	  ,'' AS ProductGroup
--	  ,IIF(NULLIF(TRIM(ProductGroup2),'') IS NOT NULL,  CONCAT('BUD','-' + NULLIF(TRIM(ProductGroup2),'')), '' ) AS PartNum
	  ,''	AS [SalesPersonCode]
	  ,''				AS [SalesPersonName]
      ,[CustomerGroup]
	  ,'' AS BudgetDescription
      ,'' AS [SalesRepCode]
      ,SUM([BudgetSales]) AS BudgetSales
      ,SUM([BudgetCost]) AS BudgetCost
	  ,SUM([BudgetSales]) - SUM([BudgetCost]) AS GrossProfitInvoiced
	  ,(SUM([BudgetSales]) - SUM([BudgetCost]))/SUM([BudgetSales]) AS GrossMarginInvoiced
	  ,CASE WHEN Company = 'NomoSE' THEN 'SEK'
			WHEN Company = 'NomoFI' THEN 'EUR'
			WHEN Company = 'NomoDK' THEN 'DKK'
			WHEN Company = 'NomoNO' THEN 'NOK'
			ELSE '' END AS Currency
	  ,CONCAT(UPPER(Company), '.', CustomerNum ) AS [CustomerKey]
      ,CONCAT(UPPER(Company), '.', CustomerGroup) AS [CustomerGroupKey]
      ,CONCAT(UPPER(Company), '.', '') AS[ProductGroupKey]
      ,CONCAT(UPPER(Company), '.', '')	AS[SalesPersonCodeKey]
      ,CONCAT(UPPER(Company), '.', '')	AS [SalesPersonNameKey]
      ,CONCAT(UPPER(Company), '.', '')	AS [ProjectKey]
      ,CONCAT(UPPER(Company), '.', '')	AS [AccountKey]
  FROM [stage].[FOR_FR_Budget]
  GROUP BY Company, [CustomerNum], [CustomerGroup]
GO
PRINT N'Creating [dm_LS].[DimRLS]'
GO

CREATE VIEW [dm_LS].[DimRLS] AS
SELECT 
	 [id]
,[Company]
,[Email]
,[RLSTable]
,[RLSField]
,[RLSValue]
,[AccessType]
,[SourceList]
,[Modified_at]
,[Author]
,[BusinessArea]
FROM [dm].DimRLS AS RLS
WHERE BusinessArea = 'Lifting Solutions'
GO
PRINT N'Creating [stage].[TRA_SE_Customer]'
GO
CREATE TABLE [stage].[TRA_SE_Customer]
(
[PartitionKey] [nvarchar] (50) NULL,
[Company] [nvarchar] (50) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[CustomerName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[TelephoneNum1] [nvarchar] (50) NULL,
[Email] [nvarchar] (200) NULL,
[ZipCode] [nvarchar] (50) NULL,
[City] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[SalesDistrict] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerIndustry] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[SalesPersonCode] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[VATNum] [nvarchar] (50) NULL,
[CustomerType] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vTRA_SE_Customer]'
GO
CREATE VIEW  [stage].[vTRA_SE_Customer] AS
--COMMENT EMPTY FIELDS // ADD UPPER()TRIM() INTO CustomerID 2022-12-27 VA
SELECT
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(UPPER([Company]), '#', TRIM(CustomerNum)))) AS CustomerID
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM(CustomerNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,CONCAT(UPPER([Company]), '#', TRIM([CustomerNum])) AS CustomerCode
	,PartitionKey

	,UPPER([Company]) AS [Company]
	,TRIM(CustomerNum) AS [CustomerNum]
	--,'' AS [MainCustomerName]
	,TRIM(CustomerName) AS [CustomerName]
	,TRIM([AddressLine1]) AS [AddressLine1]
	,TRIM([AddressLine2]) AS [AddressLine2]
	--,'' AS [AddressLine3]
	,TRIM([TelephoneNum1]) AS [TelephoneNum1]
	--,'' AS [TelephoneNum2]
	,TRIM([Email]) AS [Email]
	,TRIM([ZipCode]) AS [ZipCode]
	,TRIM([City]) AS [City]
	,TRIM([State]) AS [State]
	,TRIM([SalesDistrict]) AS [SalesDistrict]
	,IIF([CountryName] = '' or [CountryName] is null, 'SE', TRIM(CountryCode)) AS CountryCode
	,IIF([CountryName] = '' or [CountryName] is null, 'Sweden', TRIM([CountryName])) AS [CountryName]
	--,'' AS [Division]
	,TRIM([CustomerIndustry]) AS [CustomerIndustry]
	--,'' AS [CustomerSubIndustry]
	,TRIM([CustomerGroup]) AS [CustomerGroup]
	--,'' AS [CustomerSubGroup]
	,TRIM([SalesPersonCode]) AS [SalesPersonCode]
	,TRIM([SalesPersonName]) AS [SalesPersonName]
	--,'' AS [SalesPersonResponsible]
	,cast([VATNum] as nvarchar(50)) AS [VATNum]
	--,'' AS OrganizationNum
	--,'' AS [AccountNum]
	--,'' AS [InternalExternal]
	--,'' AS [CustomerScore]
	,TRIM([CustomerType]) AS [CustomerType]
	,TRIM([AddressLine1]) AS [AddressLine]
	,CONCAT((TRIM(Countryname)), + ', ' + TRIM([City]), + ', ' + TRIM([ZipCode]), + ', ' + TRIM(addressline1)) AS [FullAddressLine]
FROM [stage].[TRA_SE_Customer]
GO
PRINT N'Creating [stage].[CER_FI_Warehouse]'
GO
CREATE TABLE [stage].[CER_FI_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL,
[WarehouseDistrict] [nvarchar] (50) NULL,
[WarehouseAddress] [nvarchar] (100) NULL,
[WarehouseType] [nvarchar] (50) NULL,
[WarehouseCountry] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_FI_Warehouse]'
GO
CREATE VIEW [stage].[vCER_FI_Warehouse] AS
--COMMENT EMPTY FIELD 2022-12-21 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([WarehouseCode])) AS [WarehouseCode]
	,[WarehouseName]
	,[WarehouseDistrict]
	,[WarehouseAddress]
	--,'' AS [WarehouseDescription]
	,[WarehouseType]
	,[WarehouseCountry]
	--,'' AS [WarehouseSite]
FROM [stage].[CER_FI_Warehouse]

GROUP BY 
	PartitionKey,[Company],[WarehouseCode],[WarehouseName],[WarehouseDistrict],[WarehouseAddress],[WarehouseType],[WarehouseCountry]
GO
PRINT N'Creating [stage].[AXL_DK_OLine]'
GO
CREATE TABLE [stage].[AXL_DK_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[NeedbyDate] [date] NULL,
[ExpDelivDate] [date] NULL,
[EDCExpDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (10) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[SalesPerson] [nvarchar] (50) NULL,
[WareHouseCode] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[BusinessChain] [nvarchar] (50) NULL,
[SalesOrderCategory] [nvarchar] (100) NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL,
[PartDesc] [nvarchar] (max) NULL,
[APV_Cost_EUR] [nvarchar] (50) NULL,
[APV_Item] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXL_DK_OLine]'
GO
CREATE VIEW [stage].[vAXL_DK_OLine] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(PartDesc))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum), '#', (IIF(TRIM([PartNum]) LIKE 'IACO%' , 'MISC. CHARGES', TRIM(PartDesc) )) )))) AS PartID
	,CONVERT(int, replace(convert(date, OrderDate), '-', '')) AS SalesOrderDateID
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine))) AS SalesOrderCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(CustNum) AS CustomerNum 
	,TRIM(OrderNum) AS [SalesOrderNum]
	,TRIM(OrderLine) AS [SalesOrderLine]
	,TRIM(OrderSubLine) AS [SalesOrderSubLine]
	,CONVERT(nvarchar(50), TRIM(OrderType)) AS [SalesOrderType]
	,TRIM([SalesOrderCategory]) AS [SalesOrderCategory]
	,OrderDate AS [SalesOrderDate]
	,NeedbyDate
	,ExpDelivDate AS [ExpDelivDate]
	,EDCExpDelivDate
	,ActualDelivDate
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,OrderQty AS [SalesOrderQty]
	,DelivQty
	,RemainingQty
	,Unit AS [UoM]
	,UnitPrice
	,UnitCost
	,LEFT(TRIM(Currency), 3) AS Currency
	,ExchangeRate
	,LEFT(TRIM(OpenRelease), 1) AS OpenRelease
	,DiscountAmount
	,DiscountPercent
	,NULL AS CashDiscOffered
	,NULL AS CashDiscUsed
	,TRIM(PartNum) AS PartNum
	,UPPER(PartDesc) AS PartDesc
	,'' AS [PartType]
	,CONVERT(nvarchar(50), PartStatus) AS PartStatus
	,TRIM(SalesPerson) AS [SalesPersonName]
	,TRIM(WareHouseCode) AS WarehouseCode
	,'' AS IndexKey
	,TRIM(SalesChannel) AS SalesChannel
	,TRIM(BusinessChain) AS [Department]
	,Res3 AS [ProjectNum] -- = FreeOfCharge: Y = yes, N = no
	,'' AS Cancellation
	,Res1 AS SORes1
	,Res2 AS SORes2
	,Res3 AS SORes3
FROM stage.AXL_DK_OLine
WHERE OrderDate >= '2015-01-01'
GO
PRINT N'Creating [stage].[ABK_SE_Supplier]'
GO
CREATE TABLE [stage].[ABK_SE_Supplier]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[SupplierName] [nvarchar] (100) NULL,
[OrdNum] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[AddressLine3] [nvarchar] (100) NULL,
[City] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CodeOfConduct] [nvarchar] (50) NULL,
[SupplierCategory] [nvarchar] (50) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL,
[VATRegNo] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (50) NULL,
[Email] [nvarchar] (100) NULL,
[Website] [nvarchar] (500) NULL,
[MinOrderQty] [nvarchar] (50) NULL,
[AxInterInternal] [nvarchar] (100) NULL,
[SupplierPersonResponsible] [nvarchar] (50) NULL,
[IsActiveRecord] [bit] NULL,
[IsBusinessGroupInternal] [bit] NULL,
[IsCompanyGroupInternal] [bit] NULL,
[OrganizationNum] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vABK_SE_Supplier]'
GO
CREATE VIEW [stage].[vABK_SE_Supplier] AS

SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID
    ,UPPER(CONCAT([Company],'#',TRIM([SupplierNum]))) AS SupplierCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,[PartitionKey]
	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([SupplierNum])) AS SupplierNum
	--,'' AS MainSupplierName
	,[dbo].[ProperCase](TRIM(SupplierName)) AS SupplierName
	,TRIM([AddressLine1]) AS AddressLine1
    ,TRIM([AddressLine2]) AS AddressLine2
    ,TRIM([AddressLine3]) AS AddressLine3
	,TelephoneNumber1 AS [TelephoneNum]
	,[Email]
	,TRIM([ZipCode]) AS ZipCode
	,TRIM([City]) AS City
	--,'' AS District
	,CountryCode
    ,IIF(CountryName = '', 'Sweden', CountryName) AS CountryName
	--,'' AS [Region] 
	--,'' AS SupplierCategory 
	,TRIM(SupplierPersonResponsible) AS SupplierResponsible
	,[dbo].[ProperCase](TRIM(concat (addressline1+' '+ addressline2, null))) AS AddressLine
	,[dbo].[ProperCase](TRIM(concat_ws(',',coalesce([dbo].[ProperCase](CountryCode),null),IIF(City= ' ',null,trim(substring(replace([dbo].[ProperCase](AddressLine3),' ', ''), 6, 100))),IIF([ZipCode]= ' ',null,[dbo].[udf_GetNumeric]([Addressline3]))
		,coalesce(IIF([addressline1]= ' ',null,[addressline1]),IIF([addressline2]= ' ',null,[addressline2]))
		,coalesce(IIF([addressline2]= ' ',null,[addressline2]),IIF([addressline3]= ' ',null,[addressline3]))))) AS FullAddressLine
	--,'' AS [AccountNum] 
	,VATRegNo AS [VATNum]
	,OrganizationNum
	,AxInterInternal AS InternalExternal
	,[CodeOfConduct]
	--,'' AS CustomerNum
	--,'' AS SupplierScore
	,NULL AS [MinOrderQty]
	,0 AS MinOrderValue	
	,[Website]
	--,'' AS Comments
	,CreatedTimeStamp AS SRes1
	,ModifiedTimeStamp AS SRes2
	--,OrdNum AS SRes3 ---????

FROM [stage].[ABK_SE_Supplier] 
--LEFT JOIN stage.ABK_SE_Part p ON sp.SupplierNum = p.PrimarySupplier
/*GROUP BY 
      [PartitionKey],[Company],[SupplierNum],[SupplierName],[AddressLine1],[AddressLine2],[AddressLine3],[City],[ZIP],[Region],[CountryName]
	  ,[SupplierCategory],[Reference],[BankAccountNum],[VATNum],[SupplierABC],[CustomerCode],[TelephoneNum],[Email],[Website],[CodeOfConduct]
	  ,[MinOrderQty],[InternalName],[Comment] */
GO
PRINT N'Creating [stage].[CER_LT_PurchaseLedger]'
GO
CREATE TABLE [stage].[CER_LT_PurchaseLedger]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierCode] [nvarchar] (50) NOT NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[InvoiceLCYAmount] [decimal] (18, 4) NOT NULL,
[InvoiceCurrAmount] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (10) NULL,
[VATPaid] [decimal] (18, 4) NULL,
[VATcode] [nvarchar] (10) NULL,
[PayToName] [nvarchar] (50) NULL,
[PaymentTermsCode] [nvarchar] (50) NULL,
[PrepaymentNum] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_LT_PurchaseLedger]'
GO
CREATE VIEW [stage].[vCER_LT_PurchaseLedger] AS 
--COMMENT EMPTY FIELDS // ADD TRIM() INTO SupplierID VA 23-01-23
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(SupplierCode), '#', TRIM(PurchaseInvoiceNum)))) AS PurchaseLedgerID -- shall = in Invoice
	,CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(PurchaseInvoiceNum)) AS PurchaseLedgerCode --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',TRIM(Company))) AS CompanyID --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierCode))))) AS SupplierID --Redundant?
	--,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(Company, '#', TRIM(UPPER(SupplierCode)))))) AS SupplierID --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(PurchaseInvoiceNum)))) AS PurchaseInvoiceID --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM(CurrencyCode)))) AS CurrencyID --Redundant?
	,CONVERT(int, replace(convert(date,InvoiceDate),'-','')) AS PurchaseInvoiceDateID  --Redundant?
	,[PartitionKey]

	,[Company]
	,TRIM(UPPER(SupplierCode)) AS SupplierNum
	,[PurchaseOrderNum]
	,[PurchaseInvoiceNum]
	,CONVERT(date, [InvoiceDate]) AS PurchaseInvoiceDate
	,CONVERT(date, [DueDate]) AS PurchaseDueDate
	,CONVERT(date, [LastPaymentDate]) AS PurchaseLastPaymentDate
	,[InvoiceLCYAmount] 
	,[InvoiceCurrAmount] AS InvoiceAmount
--	,IIF([InvoiceCurrAmount]=0, null, [InvoiceLCYAmount]/[InvoiceCurrAmount]) AS ExchangeRate
	,[ExchangeRate]
	,[CurrencyCode] AS Currency
	,[VATPaid]	AS VATAmount
	,[VATcode]	AS VATCode
	,[PayToName]
	--,'' AS [PayToCity]
	--,'' AS [PayToContact]
	,[PaymentTermsCode]	AS PaymentTerms
	,[PrepaymentNum]
	--,'' AS LastPaymentNum
	--,'' AS PLRES1
	--,'' AS PLRES2
	--,'' AS PLRES3
	--,NULL AS PaidInvoiceAmount
	--,NULL AS RemainingInvoiceAmount
	--,NULL AS LinkToOriginalInvoice
	,CAST('1900-01-01' AS date) AS AccountingDate
	--,NULL AS AgingPeriod
	--,NULL AS AgingSort
	--,NULL AS VATCodeDesc
FROM 
	[stage].[CER_LT_PurchaseLedger]
GO
PRINT N'Creating [stage].[OCS_SE_PurchaseLedger]'
GO
CREATE TABLE [stage].[OCS_SE_PurchaseLedger]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[SupplierInvoiceNum] [nvarchar] (50) NOT NULL,
[InvoiceAmount] [decimal] (18, 4) NOT NULL,
[InvoiceAmountSEK] [decimal] (18, 4) NULL,
[PaidInvoiceAmount] [decimal] (18, 4) NULL,
[PaidInvoiceAmountSEK] [decimal] (18, 4) NULL,
[RemainingInvoiceAmount] [decimal] (18, 4) NULL,
[RemainingInvoiceAmountSEK] [decimal] (18, 4) NULL,
[PurchaseInvoiceDate] [nvarchar] (50) NULL,
[PurchaseDueDate] [nvarchar] (50) NULL,
[PurchaseLastPaymentDate] [nvarchar] (50) NULL,
[AccountingDate] [nvarchar] (50) NULL,
[Currency] [nvarchar] (10) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[VATAmount] [decimal] (18, 4) NULL,
[PaymentTerms] [nvarchar] (50) NULL,
[LinktoOriginalInvoice] [nvarchar] (max) NULL,
[VATCode] [nvarchar] (50) NULL,
[VATCodeDesc] [nvarchar] (max) NULL,
[IsInvoiceClosed] [nvarchar] (50) NULL,
[CostUnitNum] [nvarchar] (50) NULL,
[ProjectNum] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vOCS_SE_PurchaseLedger]'
GO


CREATE VIEW [stage].[vOCS_SE_PurchaseLedger] AS 
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum)  )))) AS PurchaseLedgerID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(Company)))) AS CompanyID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum))))) AS SupplierID 
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierNum))))) AS SupplierID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseInvoiceNum))))) AS PurchaseInvoiceID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM(Currency)))) AS CurrencyID
	,CONVERT(int, replace(convert(date,PurchaseInvoiceDate),'-','')) AS PurchaseInvoiceDateID 
	,UPPER(CONCAT(Company, '#', TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum))) AS PurchaseLedgerCode 
	,[PartitionKey]

	,UPPER([Company]) AS [Company]
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
	,TRIM([PurchaseOrderNum]) AS [PurchaseOrderNum]
	,TRIM([PurchaseInvoiceNum]) AS [PurchaseInvoiceNum]
	,SupplierInvoiceNum
	,CONVERT(date, PurchaseInvoiceDate) AS PurchaseInvoiceDate
	,CONVERT(date, PurchaseDueDate) AS PurchaseDueDate
	,CONVERT(date, PurchaseLastPaymentDate) AS PurchaseLastPaymentDate
	,InvoiceAmountSEK * -1 AS [InvoiceLCYAmount] 
	,InvoiceAmount  * -1 AS InvoiceAmount
	,IIF([Currency] = 'SEK', 1, CONVERT(decimal(18,4), ExchangeRate)) AS ExchangeRate --IIF(Currency IN ('SEK', 'DKK', 'NOK'), (CONVERT(decimal(18,4), ExchangeRate))/100, (CONVERT(decimal(18,4), ExchangeRate))) AS [ExchangeRate]
	,IIF([Currency] = '€UR','EUR',trim([Currency])) As [Currency]
	,VATAmount * -1	AS VATAmount
	,VATCode AS VATCode
	--,[PayToName]
	,IsInvoiceClosed
	--,'' AS [PayToCity]
	--,'' AS [PayToContact]
	,PaymentTerms AS PaymentTerms
	--,'' AS [PrepaymentNum]
	--,'' AS LastPaymentNum
	,PaidInvoiceAmount * -1 AS PaidInvoiceAmount
	,RemainingInvoiceAmount * -1 AS RemainingInvoiceAmount
	,LinkToOriginalInvoice
	,CONVERT(date, AccountingDate) AS AccountingDate
	--,NULL AS AgingPeriod
	--,NULL AS AgingSort
	,CostUnitNum
	,ProjectNum
	,VATCodeDesc AS VATCodeDesc
	,ModifiedTimeStamp AS PLRES1
	,CreatedTimeStamp AS PLRES2
	--,'' AS PLRES3
FROM 
	[stage].[OCS_SE_PurchaseLedger]
GO
PRINT N'Creating [dm_LS].[dimWarehouse]'
GO
CREATE VIEW [dm_LS].[dimWarehouse] AS

SELECT 
 whs.[WareHouseID]
,whs.[CompanyID]
,whs.[Company]
,whs.[WarehouseCode]
,whs.[WarehouseName]
,whs.[WarehouseDistrict]
,whs.[WarehouseAddress]
,whs.[WarehouseDescription]
,whs.[WarehouseType]
,whs.[WarehouseCountry]
,whs.[WarehouseSite]
FROM [dm].[DimWareHouse] whs
LEFT JOIN dbo.Company com ON whs.Company = com.Company
WHERE com.BusinessArea = 'Lifting Solutions' AND com.[Status] = 'Active'

--WHERE [Company] in ('AFISCM', 'CDKCERT', 'CEECERT','CERDE', 'CFICERT', 'CLTCERT', 'CLVCERT', 'CSECERT', 'CUKCERT', 'CNOEHAU', 'CNOCERT', 'CERPL', 'CyESA', 'HFIHAKL', 'TRACLEV', 'MENBE14','MENNL01','MENNL02','MENNL03','MENNL04','MENNL07','MENNL11')
GO
PRINT N'Creating [stage].[CER_LT_Warehouse]'
GO
CREATE TABLE [stage].[CER_LT_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL,
[WarehouseDistrict] [nvarchar] (50) NULL,
[WarehouseAddress] [nvarchar] (100) NULL,
[WarehouseType] [nvarchar] (50) NULL,
[WarehouseCountry] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_LT_Warehouse]'
GO
CREATE VIEW [stage].[vCER_LT_Warehouse] AS
--COMMENT EMPTY FIELDS 2022-12-14 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([WarehouseCode])) AS [WarehouseCode]
	,[WarehouseName]
	,[WarehouseDistrict]
	,[WarehouseAddress]
	--,'' AS [WarehouseDescription]
	,[WarehouseType]
	,[WarehouseCountry]
	--,'' AS [WarehouseSite]
FROM [stage].[CER_LT_Warehouse]

GROUP BY 
	PartitionKey,[Company],[WarehouseCode],[WarehouseName],[WarehouseDistrict],[WarehouseAddress],[WarehouseType],[WarehouseCountry]
GO
PRINT N'Creating [dm_ALL].[dimSalesOrderDistinct]'
GO
CREATE VIEW [dm_ALL].[dimSalesOrderDistinct] AS

SELECT 
 [CompanyID]
,[Company]
,[SalesOrderNumID]
,[SalesOrderNum]
,[CustomerID]
,[Customer]
,[SalesPersonName]
,[SalesChannel]
,[AxInterSalesChannel]
,[Department]
FROM dm.DimSalesOrderDistinct
GO
PRINT N'Creating [stage].[ROR_SE_StockTransaction]'
GO
CREATE TABLE [stage].[ROR_SE_StockTransaction]
(
[PartitionKey] [nvarchar] (50) NULL,
[Company] [nvarchar] (8) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[SalesOrderNum] [nvarchar] (50) NULL,
[SalesOrderLine] [nvarchar] (50) NULL,
[SalesInvoiceNum] [nvarchar] (50) NULL,
[SalesInvoiceLine] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [nvarchar] (50) NULL,
[IndexKey] [nvarchar] (50) NULL,
[TransactionCode] [nvarchar] (50) NULL,
[TransactionCodeDescription] [nvarchar] (max) NULL,
[IsInternalTransaction] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[PurchaseInvoiceLine] [nvarchar] (50) NULL,
[BinNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[TransactionDate] [nvarchar] (50) NULL,
[TransactionTime] [nvarchar] (50) NULL,
[TransactionQty] [nvarchar] (50) NULL,
[TransactionValue] [nvarchar] (50) NULL,
[Reference] [nvarchar] (50) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL,
[IsActiveRecord] [nvarchar] (50) NULL,
[STRes1] [nvarchar] (50) NULL,
[STRes2] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[ROR_SE_PurchaseOrder]'
GO
CREATE TABLE [stage].[ROR_SE_PurchaseOrder]
(
[PartitionKey] [nvarchar] (50) NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [varchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaseOrderType] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [varchar] (50) NULL,
[SupplierInvoiceNum] [varchar] (50) NULL,
[IsOrderClosed] [nvarchar] (50) NULL,
[PurchaseOrderStatus] [nvarchar] (50) NULL,
[PurchaseOrderDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[ActualShipDate] [nvarchar] (50) NULL,
[OrgReqDelivDate] [nvarchar] (50) NULL,
[ReqDelivDate] [nvarchar] (50) NULL,
[OrgCommittedDelivDate] [nvarchar] (50) NULL,
[CommittedDelivDate] [nvarchar] (50) NULL,
[OrgCommittedShipDate] [nvarchar] (50) NULL,
[CommittedShipDate] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[SupplierPartNum] [nvarchar] (50) NULL,
[DelivCustomerNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[UoM] [nvarchar] (50) NULL,
[PurchaseOrderQty] [decimal] (18, 4) NULL,
[PurchaseReceiveQty] [decimal] (18, 4) NULL,
[PurchaseInvoiceQty] [decimal] (18, 4) NULL,
[MinOrderQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[LandedCost] [decimal] (18, 4) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[PurchaserName] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[ReceivingNum] [nvarchar] (50) NULL,
[DelivTime] [nvarchar] (50) NULL,
[PurchaseChannel] [nvarchar] (50) NULL,
[Documents] [nvarchar] (50) NULL,
[Comments] [nvarchar] (max) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL,
[IsActiveRecord] [nvarchar] (50) NULL,
[PORes1] [nvarchar] (100) NULL,
[PORes2] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vROR_SE_PurchaseOrder]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vROR_SE_PurchaseOrder] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(po.Company, '#', TRIM(po.PurchaseOrderNum), '#', TRIM(po.PurchaseOrderLine), '#', TRIM(UPPER(po.[PartNum])))))) AS PurchaseOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(po.Company, '#', TRIM(po.PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(po.Company, '#', '')))) AS PurchaseInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(po.Company, '#', '')))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(po.Company), '#', TRIM(po.SupplierNum))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(po.Company), '#', TRIM(po.[PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(po.Company, '#', TRIM(po.WarehouseCode))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(po.[Company])))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(po.[Currency])))) AS CurrencyID
	,UPPER(CONCAT(po.Company, '#', TRIM(po.SupplierNum), '#', TRIM(po.PurchaseOrderNum), '#', TRIM(po.PurchaseOrderLine))) AS PurchaseOrderCode
	,po.PartitionKey

	,UPPER(po.Company) AS Company
	,UPPER(TRIM(po.[PartNum])) AS PartNum
	,UPPER(TRIM(po.SupplierNum)) AS SupplierNum
	,UPPER(TRIM(po.WarehouseCode)) AS WarehouseCode
	,TRIM(po.PurchaseOrderNum) AS PurchaseOrderNum
	,TRIM(po.PurchaseOrderLine) AS PurchaseOrderLine
	,TRIM(PurchaseOrderSubLine) AS PurchaseOrderSubLine
	,TRIM(PurchaseOrderType) AS PurchaseOrderType
	,IIF(IsOrderClosed = 1, 'Closed','Open') AS PurchaseOrderStatus
	,IsOrderClosed AS IsClosed
	,PurchaseOrderDate
	,'1900-01-01' AS OrgReqDelivDate  --
	,MAX(CONVERT(Date, IIF(CommittedShipDate is null OR CommittedShipDate = '', '1900-01-01', CommittedShipDate))) AS CommittedShipDate
	,MAX(CONVERT(Date, IIF(st.[TransactionDate] is null OR st.[TransactionDate] = '', '1900-01-01', st.[TransactionDate]))) AS ActualDelivDate
	,MAX(CONVERT(Date, IIF(ReqDelivDate = '''' or ReqDelivDate = ',', '1900-01-01', ReqDelivDate))) AS ReqDelivDate
	,'1900-01-01' AS DelivDate
	,TRIM(po.PurchaseInvoiceNum) AS PurchaseInvoiceNum
	,TRIM(SupplierInvoiceNum) AS SupplierInvoiceNum
	,TRIM(SupplierPartNum) AS SupplierPartNum
	,TRIM(DelivCustomerNum) AS DelivCustomerNum
	,TRIM(PartStatus) AS PartStatus
	,MAX(PurchaseOrderQty) AS PurchaseOrderQty
	,MAX(PurchaseReceiveQty) AS ReceiveQty
	,MAX(PurchaseInvoiceQty) AS InvoiceQty
	,MAX(MinOrderQty) AS MinOrderQty
	,TRIM(UoM) AS UoM
--	,SUM(CONVERT(decimal(18,4),REPLACE(TransactionValue, ',', '.')))/SUM(CONVERT(decimal(18,4),REPLACE(TransactionQty, ',', '.'))) AS UnitPrice
	,UnitPrice AS UnitPrice
	,MAX(LandedCost) AS LandedCost
	,AVG(DiscountPercent) AS DiscountPercent
	,MAX(DiscountAmount) AS DiscountAmount
	--,NULL AS TotalMiscChrg
	,AVG(po.ExchangeRate) AS ExchangeRate
	,TRIM(po.Currency) AS Currency
	,TRIM(PurchaserName) AS PurchaserName
	,TRIM(ReceivingNum) AS ReceivingNum
	,MAX(DelivTime) AS DelivTime
	,TRIM(PurchaseChannel) AS PurchaseChannel
	,TRIM(Documents) AS Documents
	,TRIM(Comments) AS Comments
	,TRIM(po.CreatedTimeStamp) AS PORes1
	,TRIM(po.ModifiedTimeStamp) AS PORes2
	,TRIM(PORes1) AS PORes3
FROM 
	[stage].[ROR_SE_PurchaseOrder] po
	LEFT JOIN [stage].[ROR_SE_StockTransaction] st ON TRIM(po.PurchaseOrderNum) = TRIM(st.PurchaseOrderNum) AND TRIM(po.PurchaseOrderLine) = TRIM(st.PurchaseOrderLine)
WHERE ReqDelivDate != '''' and ReqDelivDate != ','
	
GROUP BY
	po.PartitionKey, po.Company, po.PurchaseOrderNum, po.PurchaseOrderLine, PurchaseOrderSubLine, po.SupplierNum, po.DelivCustomerNum, po.PartNum, PurchaseOrderType, UnitPrice,
	po.Currency, IsOrderClosed, PurchaseOrderDate, PurchaserName, PurchaseChannel, Documents, Comments, po.CreatedTimeStamp, po.ModifiedTimeStamp, PORes1, po.WarehouseCode ,po.PurchaseInvoiceNum, SupplierInvoiceNum, SupplierPartNum, PartStatus, UOM, ReceivingNum
GO
PRINT N'Creating [stage].[AXL_FR_OLine]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[AXL_FR_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[NeedbyDate] [date] NULL,
[ExpDelivDate] [date] NULL,
[EDCExpDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (10) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[SalesPerson] [nvarchar] (50) NULL,
[WareHouseCode] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[BusinessChain] [nvarchar] (50) NULL,
[SalesOrderCategory] [nvarchar] (100) NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL,
[PartDesc] [nvarchar] (max) NULL,
[APV_Cost_EUR] [nvarchar] (50) NULL,
[APV_Item] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXL_FR_OLine]'
GO
CREATE VIEW [stage].[vAXL_FR_OLine] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(PartDesc))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum), '#', (IIF(TRIM([PartNum]) LIKE 'IACO%' , 'MISC. CHARGES', TRIM(PartDesc) )) )))) AS PartID
	,CONVERT(int, replace(convert(date, OrderDate), '-', '')) AS SalesOrderDateID
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine))) AS SalesOrderCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(CustNum) AS CustomerNum 
	,TRIM(OrderNum) AS [SalesOrderNum]
	,TRIM(OrderLine) AS [SalesOrderLine]
	,TRIM(OrderSubLine) AS [SalesOrderSubLine]
	,CONVERT(nvarchar(50), TRIM(OrderType)) AS [SalesOrderType]
	,TRIM([SalesOrderCategory]) AS [SalesOrderCategory]
	,OrderDate AS [SalesOrderDate]
	,NeedbyDate
	,ExpDelivDate AS [ExpDelivDate]
	,EDCExpDelivDate
	,ActualDelivDate
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,OrderQty AS [SalesOrderQty]
	,DelivQty
	,RemainingQty
	,Unit AS [UoM]
	,UnitPrice
	,UnitCost
	,LEFT(TRIM(Currency), 3) AS Currency
	,ExchangeRate
	,LEFT(TRIM(OpenRelease), 1) AS OpenRelease
	,DiscountAmount
	,DiscountPercent
	,NULL AS CashDiscOffered
	,NULL AS CashDiscUsed
	,TRIM(PartNum) AS PartNum
	,UPPER(PartDesc) AS PartDesc
	,'' AS [PartType]
	,CONVERT(nvarchar(50), PartStatus) AS PartStatus
	,TRIM(SalesPerson) AS [SalesPersonName]
	,TRIM(WareHouseCode) AS WarehouseCode
	,'' AS IndexKey
	,TRIM(SalesChannel) AS SalesChannel
	,TRIM(BusinessChain) AS [Department]
	,Res3 AS [ProjectNum] -- = FreeOfCharge: Y = yes, N = no
	,'' AS Cancellation
	,Res1 AS SORes1
	,Res2 AS SORes2
	,Res3 AS SORes3
FROM stage.AXL_FR_OLine
WHERE OrderDate >= '2015-01-01'
GO
PRINT N'Creating [stage].[MIT_UK_Customer]'
GO
CREATE TABLE [stage].[MIT_UK_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[CustomerName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[CustomerABC] [nchar] (10) NULL,
[City] [nvarchar] (50) NULL,
[ZIP] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNr] [nvarchar] (20) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (2) NULL,
[SalesPersonName] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vMIT_UK_Customer]'
GO
CREATE VIEW [stage].[vMIT_UK_Customer] AS
--COMMENT EMPTY FIELDS // ADD UPPER() TRIM() CustomerID 22-12-27 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID
	--CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(CustomerNum)))) AS CustomerID
	,CONCAT([Company],'#',TRIM([CustomerNum])) AS CustomerCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',[Company])) AS CompanyID
	,PartitionKey
	,Company
	,TRIM(CustomerNum) AS [CustomerNum]
	--,'' AS MainCustomerName
	,[dbo].[ProperCase](CustomerName) AS  [CustomerName]
	,[AddressLine1]
	,[AddressLine2]
	,[AddressLine3]
	--,'' AS [TelephoneNum1]
	--,'' AS [TelephoneNum2]
	--,'' AS [Email]
	,[ZIP] AS [ZipCode]
	,CASE WHEN [City] = ' '	AND LEFT(AddressLine3, 1) IN ('1','2','3','4','5','6','7','8','9') THEN trim(substring(replace([dbo].[ProperCase](AddressLine3),' ',		''), 6, 100)) ELSE [dbo].[ProperCase]([City]) end AS [City]
	,IIF([State]= ' ',null,[State]) AS [State]
	,[District] AS SalesDistrict
	,IIF(CountryCode = 'EL', 'GR', CountryCode) AS CountryCode
	,[dbo].[ProperCase](CountryName) AS [CountryName]
	--,'' AS Division
	--,'' AS CustomerIndustry
	--,'' AS CustomerSubIndustry
	,[AddressLine1] AS [AddressLine]
	,CONCAT(TRIM(Countryname), + ', ' + TRIM([City]), + ', ' + TRIM([AddressLine2]), + ', ' + TRIM(AddressLine1)) AS [FullAddressLine]
	,[dbo].[ProperCase](CustomerGroup) AS [CustomerGroup]
	,[dbo].[ProperCase](CustomerGroup) AS [CustomerSubGroup]
	,[SalesRepCode] AS SalesPersonCode
	,[dbo].[ProperCase](SalesPersonName) AS [SalesPersonName]
	--,'' AS [SalesPersonResponsible]
	,[VATRegNr] AS VATNum
	--,'' AS OrganizationNum
	,[AccountString] AS AccountNum
	,[InternalExternal]
	,[CustomerABC] AS CustomerScore
	--,'' AS [CustomerType]
	
	,GETDATE() AS [ValidFrom]
	,DATEADD(year,1,GETDATE()) AS [ValidTo]
FROM [stage].[MIT_UK_Customer]
GO
PRINT N'Creating [stage].[CER_UK_SalesLedger]'
GO
CREATE TABLE [stage].[CER_UK_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (10) NULL,
[InvoiceNum] [nvarchar] (25) NULL,
[InvoiceDate] [datetime] NULL,
[DueDate] [datetime] NULL,
[LastPaymentDate] [datetime] NULL
)
GO
PRINT N'Creating [stage].[vCER_UK_SalesLedger]'
GO

CREATE VIEW [stage].[vCER_UK_SalesLedger] AS
--COMMENT EMPTY FIELD // ADD UPPER() TRIM() INTO CustomerID 2022-12-19 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', CustNum, '#', InvoiceNum))) AS SalesLedgerID
	,CONCAT(Company, '#', CustNum, '#', InvoiceNum) AS SalesLedgerCode
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,PartitionKey

	,UPPER(TRIM(Company)) AS Company
	,UPPER(TRIM(CustNum)) AS CustomerNum
	,InvoiceNum AS [SalesInvoiceNum]
	,[InvoiceDate] AS [SalesInvoiceDate]
	,CONVERT(date, DueDate) AS SalesDueDate
	,CONVERT(date, LastPaymentDate) AS SalesLastPaymentDate
	--,NULL AS [InvoiceAmount]
	--,NULL AS [RemainingInvoiceAmount]
	,1 AS [ExchangeRate]
	,'GBP' AS [Currency]
	--,NULL AS [VATAmount]
	--,'' AS [VATCode]
	--,'' AS [PayToName]
	--,'' AS [PayToCity]
	--,'' AS [PayToContact]
	--,'' AS [PaymentTerms]
	--,'' AS SLRes1
	--,'' AS SLRes2
	--,'' AS SLRes3
	--,NULL AS PaidInvoiceAmount
	,'1900-01-01' AS AccountingDate
	--,'' AS AgingPeriod
	--,'' AS AgingSort
	--,'' AS VATCodeDesc
	--,'' AS LinkToOriginalInvoice

FROM 
	stage.CER_UK_SalesLedger
GO
PRINT N'Creating [stage].[ATZ_UK_OLine]'
GO
CREATE TABLE [stage].[ATZ_UK_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderRelNum] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[DelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[SumUnitCost] [decimal] (18, 4) NULL,
[SumUnitPrice] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[CurrExchRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (1) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [int] NULL,
[NeedbyDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (50) NULL,
[SalesReturnOrderNum] [nvarchar] (50) NULL,
[SalesReturnInvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vATZ_UK_OLine]'
GO
CREATE VIEW [stage].[vATZ_UK_OLine] AS
--COMMENT EMPTY FIELDS // ADD UPPER()TRIM () INTO PartID,CustomerID,WarehouseID 2022-12-27 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(InvoiceNum)))) AS SalesOrderID
	,CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(InvoiceNum)) AS SalesOrderCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ) ))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID 
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) ) ))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(WarehouseCode)))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum)))) AS SalesOrderNumID
	,CONVERT(int, replace(convert(date, OrderDate),'-','')) AS SalesOrderDateID  
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT( Company, '#', '') ))	AS ProjectID
	,PartitionKey

	,TRIM(Company) AS Company 
	,TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ) AS CustomerNum 
	,TRIM(OrderNum) AS SalesOrderNum
	,TRIM(OrderLine) AS SalesOrderLine
	,TRIM(OrderSubLine) AS SalesOrderSubLine
	--,'' AS SalesOrderType
	--,'' AS SalesOrderCategory
	,OrderRelNum AS SalesOrderRelNum
	,OrderDate	AS SalesOrderDate
	,NeedbyDate
	,DelivDate	AS ExpDelivDate
	,CAST('1900-01-01' AS date) AS ActualDelivDate
	,CAST('1900-01-01' AS date) AS ConfirmedDelivDate
	,TRIM(InvoiceNum) AS SalesInvoiceNum
	,OrderQty AS SalesOrderQty
	,DelivQty
	,RemainingQty
	--,NULL AS SalesInvoiceQty
	--,'' AS UoM
	,UnitPrice
	,UnitCost
	,SumUnitPrice
	,SumUnitCost
	,Currency
	,CurrExChRate AS ExchangeRate
	,OpenRelease
	,DiscountAmount
	,DiscountPercent
	,TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) ) AS PartNum
	--,'' AS PartType
	,PartStatus
	,TRIM(SalesPerson) AS SalesPersonName
	,TRIM(WarehouseCode) AS WarehouseCode
	,'Normal Order Handling' AS SalesChannel
	,'Normal Order Handling' AS AxInterSalesChannel
	--,'' AS Department
	--,'' AS ProjectNum
	--,'' AS [IndexKey] --DZ added 20210324
	,IIF(OrderQty < 0, 'R', '0') AS Cancellation --? Return or Cancellation
	--,'' AS SORes1
	--,'' AS SORes2
	--,'' AS SORes3
	,ReturnComment
	,TRIM(SalesReturnOrderNum) AS SalesReturnOrderNum
	,TRIM(SalesReturnInvoiceNum) AS SalesReturnInvoiceNum
	--,NULL AS [TotalMiscChrg]
FROM stage.ATZ_UK_OLine
GO
PRINT N'Creating [dm_LS].[dimCostBearer]'
GO
CREATE VIEW [dm_LS].[dimCostBearer] AS 

SELECT cb.[CostBearerID]
,cb.[PartitionKey]
,cb.[CostBearerCode]
,cb.[CompanyID]
,cb.[Company]
,cb.[CostBearerNum]
,cb.[CostBearerName]
,cb.[CostBearerStatus]
,cb.[CostBearerGroup]
,cb.[CostBearerGroup2]
,cb.[CostBearerGroup3]
FROM [dm].[DimCostBearer] cb
LEFT JOIN dbo.Company com ON cb.Company = com.Company
WHERE com.BusinessArea = 'Lifting Solutions' AND com.[Status] = 'Active'

--WHERE [Company] in ('CNOCERT')
GO
PRINT N'Creating [stage].[NOM_SE_Part]'
GO
CREATE TABLE [stage].[NOM_SE_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PartNum] [nvarchar] (50) NOT NULL,
[PartDescription] [nvarchar] (max) NULL,
[PartDescription2] [nvarchar] (max) NULL,
[ProductGroup] [nvarchar] (100) NULL,
[ProductGroup2] [nvarchar] (100) NULL,
[ProductGroup3] [nvarchar] (100) NULL,
[ProductGroup4] [nvarchar] (100) NULL,
[CommodityCode] [nvarchar] (50) NULL,
[CountryOfOrigin] [nvarchar] (50) NULL,
[PartResponsible] [nvarchar] (50) NULL,
[NetWeight] [decimal] (18, 8) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[ParentSupplier] [nvarchar] (50) NULL,
[ReorderLevel] [decimal] (18, 8) NULL,
[DiscountGroup] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vNOM_SE_Part]'
GO
CREATE VIEW [stage].[vNOM_SE_Part] AS
--COMMENT EMPTY FIELD 2022-12-20 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(vp.[Company]), '#', TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(vp.[Company])))) AS CompanyID
	,UPPER(CONCAT(TRIM(vp.[Company]),'#',TRIM([PartNum]))) AS PartCode
	,PartitionKey

	,UPPER(TRIM(vp.[Company])) AS Company
	,UPPER(TRIM([PartNum])) AS PartNum
	--,'' AS [PartName]
	,[PartDescription]
	,[PartDescription2]
	,DiscountGroup AS [PartDescription3]
	,CONCAT(TRIM(vp.SupplierCode), '-', TRIM(vs.SupplierName)) AS MainSupplier
	,ParentSupplier AS AlternativeSupplier
	,[ProductGroup]
	,[ProductGroup2]
	,[ProductGroup3]
	,[ProductGroup4]
	--,'' AS [Brand]
	,[CommodityCode]
	--,'' AS PartReplacementNum
	--,'' AS PartStatus
	,[CountryOfOrigin]
	,[NetWeight]
	--,'' AS [UoM]
	--,'' AS [Material]
	--,'' AS [Barcode]
	,[ReOrderLevel]
	,PartResponsible
	--,'' AS [StartDate]
	--,'' AS [EndDate]
FROM [stage].[NOM_SE_Part] vp
LEFT JOIN  [dw].[vAll_Supplier] vs ON vp.Company = vs.Company AND vp.SupplierCode = vs.SupplierNum
--GROUP BY
--	PartitionKey, vp.Company, PartNum, PartDescription, PartDescription2, ProductGroup, ProductGroup2, ProductGroup3, ProductGroup4, CommodityCode, CountryOfOrigin, NetWeight, ReorderLevel, PartResponsible, DiscountGroup, SupplierCode
GO
PRINT N'Creating [dm_ALL].[DimRLS]'
GO
CREATE VIEW [dm_ALL].[DimRLS] AS
SELECT 
	 [id]
,[Company]
,[Email]
,[RLSTable]
,[RLSField]
,[RLSValue]
,[AccessType]
,[SourceList]
,[Modified_at]
,[Author]
,[BusinessArea]
FROM [dm].DimRLS
GO
PRINT N'Creating [stage].[ROR_SE_OLine]'
GO
CREATE TABLE [stage].[ROR_SE_OLine]
(
[PartitionKey] [nvarchar] (50) NULL,
[Company] [nvarchar] (8) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[SalesOrderNum] [nvarchar] (50) NULL,
[SalesOrderLine] [nvarchar] (50) NULL,
[SalesOrderSubLine] [nvarchar] (max) NULL,
[SalesOrderType] [nvarchar] (max) NULL,
[SalesOrderCategory] [nvarchar] (50) NULL,
[SalesOrderDate] [nvarchar] (50) NULL,
[NeedbyDate] [nvarchar] (50) NULL,
[ExpDelivDate] [nvarchar] (50) NULL,
[ActualDelivDate] [nvarchar] (50) NULL,
[SalesInvoiceNum] [nvarchar] (50) NULL,
[SalesOrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (50) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartType] [nvarchar] (max) NULL,
[PartStatus] [nvarchar] (max) NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Cancellation] [nvarchar] (50) NULL,
[SalesOrderStatus] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vROR_SE_OLine]'
GO



CREATE VIEW [stage].[vROR_SE_OLine] AS
--COMMENT EMPTY FIELDS// ADD UPPER()TRIM() INTO CustomerID,WarehouseID 2022-12-22 VA
--CUSTOMERNUM / PARTNUM 23-02-17 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM([SalesOrderNum]), '#', TRIM([SalesOrderLine])))) AS SalesOrderID --, '#', TRIM([SalesOrderCategory])
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(CustomerNum IS NULL OR CustomerNum = '', 'MISSINGCUSTOMER', CustomerNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(Company, '#', TRIM([WarehouseCode]))))) AS WarehouseID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM([WarehouseCode])))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([SalesOrderNum]))))) AS SalesOrderNumID

	,CONCAT(Company, '#', TRIM(CustomerNum), '#', TRIM(SalesOrderNum), '#', TRIM(SalesOrderLine), '#', TRIM(PartNum)) AS SalesOrderCode
--	,CONCAT(Company, '#', TRIM(IIF(CustomerNum IS NULL OR CustomerNum = '', 'MISSINGCUSTOMER', CustomerNum)), '#', TRIM(SalesOrderNum), '#', TRIM(SalesOrderLine), '#', TRIM(SalesInvoiceNum)) AS SalesOrderCode 

	--CONCAT(Company, '#', TRIM(SalesOrderNum), '#', TRIM(SalesOrderLine), '#', SUBSTRING(TRIM(SalesInvoiceNum), PATINDEX('%[0-9]%', SalesInvoiceNum ), 50)) AS SalesOrderCode --otiginal. why?
	,CONVERT(int, replace(convert(date, [SalesOrderDate]), '-', '')) AS SalesOrderDateID  --redundent?
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', ''))) AS ProjectID
	,PartitionKey

	,TRIM(Company) AS Company
	,TRIM(CustomerNum) AS CustomerNum
	,TRIM([SalesOrderNum]) AS [SalesOrderNum]
	,TRIM([SalesOrderLine]) AS [SalesOrderLine]
	,TRIM([SalesOrderSubLine]) AS [SalesOrderSubLine]
	,case WHEN [SalesOrderType] = '1' THEN 'Stock sales'
	      WHEN [SalesOrderType] IN ('4','i','S') THEN 'Direct sales' -- i and S are due to human error in input within GARP, should normally just be '4'
		  ELSE 'Other sales' 
		  END AS [SalesOrderType]
	,TRIM([SalesOrderCategory]) AS [SalesOrderCategory]
	,IIF([SalesOrderDate] = '' OR [SalesOrderDate] IS NULL, '1990-01-01', TRY_CONVERT(date, [SalesOrderDate])) AS [SalesOrderDate]
	,IIF([NeedbyDate] = '' OR [NeedbyDate] IS NULL, '1990-01-01', TRY_CONVERT(date,[NeedbyDate])) AS [NeedbyDate]
	,IIF([ExpDelivDate] = '' OR [ExpDelivDate] IS NULL, '1990-01-01', TRY_CONVERT(date,[ExpDelivDate])) AS [ExpDelivDate]
	,IIF([ExpDelivDate] = '' OR [ExpDelivDate] IS NULL, '1990-01-01', TRY_CONVERT(date,[ExpDelivDate])) AS ConfirmedDelivDate
	,IIF(SalesOrderStatus = 'Slutlevererad', TRY_CONVERT(date,[ExpDelivDate]), '1990-01-01') AS ActualDelivDate
	,TRIM(REPLACE(SalesInvoiceNum, ' ', '')) AS [SalesInvoiceNum]
	,IIF(UnitPrice < 0, -1*[SalesOrderQty], [SalesOrderQty]) AS [SalesOrderQty]
	,IIF(UnitPrice < 0, -1*[DelivQty], [DelivQty]) AS [DelivQty]
	,IIF(UnitPrice < 0, -1*[RemainingQty], [RemainingQty]) AS [RemainingQty]
	,NULL AS SalesInvoiceQty
	,TRIM([UoM]) AS [UoM]
	,ABS(UnitPrice) AS UnitPrice
	,ABS(UnitCost) AS UnitCost 
	,IIF([ExchangeRate] = 1, 'SEK', [Currency]) AS [Currency]
	,[ExchangeRate]
	,IIF(SalesInvoiceNum IS NULL, 1, 0) AS [OpenRelease] --Roro treats those not invoiced transactions as open orders (in the backlog)
	,[DiscountPercent]
	,[DiscountAmount]
	,TRIM(PartNum) AS PartNum
	,[PartType]
	,[PartStatus]
	,SalesOrderStatus
	,TRIM([SalesPersonName]) AS [SalesPersonName]
	,TRIM([WarehouseCode]) AS [WarehouseCode]
	,[SalesChannel]
	,IIF([SalesChannel] = 'Normal order', 'Normal Order Handling', 'Webshop') AS AxInterSalesChannel
	--,'' AS [Department]
	--,'' AS [ProjectNum] -- for service order: A- avsllutade
	--,'' AS [IndexKey]
	,Cancellation
	--,'' AS [SORes1]
	--,'' AS [SORes2]
	--,'' AS [SORes3]
	--,NULL AS [TotalMiscChrg]
FROM [stage].[ROR_SE_OLine]
--WHERE PartNum <> '' AND [SalesOrderQty] IS NOT NULL AND [UnitPrice] IS NOT NULL AND [UnitCost] IS NOT NULL -- AND [DelivQty] IS NOT NULL   --NeedbyDate <> '2016-05' --AND [SalesOrderDate] <> '1990-01-01' --[Company] IS NOT NULL  AND 
GO
PRINT N'Creating [stage].[FOR_PL_Warehouse]'
GO
CREATE TABLE [stage].[FOR_PL_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL,
[WarehouseDistrict] [nvarchar] (100) NULL,
[WarehouseAddress] [nvarchar] (200) NULL,
[WarehouseCountry] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vFOR_PL_Warehouse]'
GO

CREATE VIEW [stage].[vFOR_PL_Warehouse] AS
--COMMENT EMPTY FIELDS // ADD TRIM()UPPER() INTO WarehouseID 23-01-11 VA
SELECT 
	 CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
--	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([WarehouseCode])))) AS WarehouseID
	,PartitionKey
	,Company
	,TRIM([WarehouseCode])	AS [WarehouseCode]
	,[WarehouseName]
	,[WarehouseDistrict]
	,[WarehouseAddress]
	--,''	AS [WarehouseDescription]
	--,''	AS [WarehouseType]
	,[WarehouseCountry]
	--,'' AS [WarehouseSite]
FROM [stage].[FOR_PL_Warehouse]
GO
PRINT N'Creating [stage].[HAK_FI_Supplier]'
GO
CREATE TABLE [stage].[HAK_FI_Supplier]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[MainSupplierName] [nvarchar] (100) NULL,
[SupplierName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[AddressLine3] [nvarchar] (100) NULL,
[TelephoneNum] [nvarchar] (20) NULL,
[Email] [nvarchar] (100) NULL,
[City] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (100) NULL,
[Region] [nvarchar] (50) NULL,
[SupplierCategory] [nvarchar] (50) NULL,
[SupplierResponsible] [nvarchar] (50) NULL,
[AccountNum] [nvarchar] (50) NULL,
[VATNum] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (100) NULL,
[CodeOfConduct] [nvarchar] (2) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[Reference] [nvarchar] (100) NULL,
[SupplierScore] [nvarchar] (50) NULL,
[MinOrderQty] [decimal] (18, 4) NULL,
[Website] [nvarchar] (100) NULL,
[Comments] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[vHAK_FI_Supplier]'
GO








CREATE   VIEW [stage].[vHAK_FI_Supplier] AS

SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID
    ,UPPER(CONCAT([Company],'#',TRIM([SupplierNum]))) AS SupplierCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([SupplierNum])) AS SupplierNum
	,[dbo].[ProperCase](TRIM(MainSupplierName)) AS MainSupplierName
	,[dbo].[ProperCase](TRIM(SupplierName)) AS SupplierName
	,TRIM([AddressLine1]) AS AddressLine1
    ,TRIM([AddressLine2]) AS AddressLine2
    ,TRIM([AddressLine3]) AS AddressLine3
	,[TelephoneNum]
	,[Email]
	,TRIM([ZipCode]) AS ZipCode
	,TRIM([City]) AS City
	,District
	,IIF(TRIM(CountryName) = '' OR TRIM(CountryName) IS NULL, 'FI', TRIM(CountryCode)) AS CountryCode
	,IIF(TRIM(CountryName) = '' OR TRIM(CountryName) IS NULL, 'Finland', TRIM(CountryName)) AS [CountryName]
	,[Region] 
	,TRIM([SupplierCategory]) AS SupplierCategory 
	,TRIM([SupplierResponsible]) AS SupplierResponsible
	,[dbo].[ProperCase](TRIM(concat (addressline1+' '+ addressline2, null))) AS AddressLine
	,[dbo].[ProperCase](TRIM(concat_ws(',',coalesce([dbo].[ProperCase](CountryName),null),IIF(City= ' ',null,trim(substring(replace([dbo].[ProperCase](AddressLine3),' ', ''), 6, 100))),IIF(ZipCode= ' ',null,[dbo].[udf_GetNumeric]([Addressline3]))
		,coalesce(IIF([addressline1]= ' ',null,[addressline1]),IIF([addressline2]= ' ',null,[addressline2]))
		,coalesce(IIF([addressline2]= ' ',null,[addressline2]),IIF([addressline3]= ' ',null,[addressline3]))))) AS FullAddressLine
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [AccountNum])) AS [AccountNum] --required by Ian Morgan & approved by Emil T on 20200630
	,[VATNum]
	,'' AS OrganizationNum
	,IIF(trim(SupplierCategory) = 'Group supplier', '1', '0') AS  [InternalExternal] 
	,[CodeOfConduct]
	,CustomerNum
	,TRIM([SupplierScore]) AS SupplierScore
	,[MinOrderQty]
	,0 AS MinOrderValue	
	,[Website]
	,TRIM([Comments]) AS Comments
	,IIF(trim(SupplierCategory) = 'Other', '0', '1') AS IsMaterialSupplier
	,NULL AS SRes1
	,NULL AS SRes2
	,NULL AS SRes3
FROM [stage].[HAK_FI_Supplier]
--GROUP BY 
--      [PartitionKey],[Company],[SupplierNum],MainSupplierName,[SupplierName],[AddressLine1],[AddressLine2],[AddressLine3],[City],[ZipCode],[Region],District, [CountryName]
--	  ,[SupplierCategory],[SupplierResponsible],[Reference],[AccountNum],[VATNum],[SupplierScore],[CustomerNum],[TelephoneNum],[Email],[Website],[CodeOfConduct]
--	  ,[MinOrderQty],[InternalExternal],[Comments]
GO
PRINT N'Creating [stage].[vAXI_HQ_Project]'
GO



/****** Script for SelectTopNRows command from SSMS  ******/
CREATE VIEW [stage].[vAXI_HQ_Project] AS
SELECT 

	  CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', [ProjectNum] ))) AS ProjectID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',Company)) AS CompanyID
	  ,CONCAT(Company,'#', [ProjectNum] ) AS ProjectCode
	  ,CONVERT(varchar, GETDATE(), 23) AS PartitionKey
      ,[Company]
      ,[MainProjectNum]
      ,[ProjectNum]
      ,[ProjectDescription]
      ,[Organisation]
      ,[ProjectStatus]
      ,[ProjectCategory]
      ,[WBSElement]
      ,[ObjectNum]
      ,[Level]
      ,[Currency]
      ,[WarehouseCode]
      ,[ProjectResponsible]
      ,[Comments]
      ,[StartDate]
      ,[EndDate]
      ,[EstEndDate]
      ,[ProjectCompletion]
      ,[TotalCost]	AS ActualCost
  FROM [stage].[AXI_HQ_Project]
  where UPPER(Company) = 'AXISE'
GO
PRINT N'Creating [stage].[AXL_DC_SOLine]'
GO
CREATE TABLE [stage].[AXL_DC_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[InvoiceType] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (22, 8) NULL,
[UnitCost] [decimal] (22, 8) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[VAT] [decimal] (18, 4) NULL,
[CashDiscountOffered] [decimal] (18, 4) NULL,
[CashDiscountUsed] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OrderType] [nvarchar] (50) NULL,
[SalesChannel] [varchar] (10) NULL,
[BusinessChain] [varchar] (10) NULL,
[Res1] [varchar] (100) NULL,
[Res2] [varchar] (100) NULL,
[Res3] [varchar] (100) NULL,
[PartDesc] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[vAXL_DC_SOLine]'
GO

CREATE VIEW [stage].[vAXL_DC_SOLine] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustNum), '#', (OrderNum), '#', (OrderLine), '#', (InvoiceNum), '#', (PartNum), '#', UPPER(PartDesc)))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', OrderNum, '#', OrderLine, '#', OrderSubLine))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustNum), '#', InvoiceNum))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', (OrderNum)))) AS SalesOrderNumID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustNum)))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', PartNum, '#', UPPER(PartDesc)))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', WarehouseCode))) AS WarehouseID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([WarehouseCode]))))) AS WarehouseID  
	,CONCAT(Company, '#', OrderNum, '#', OrderLine, '#', OrderSubLine) AS SalesOrderCode
	,CONCAT(Company, '#', (InvoiceNum), '#', (InvoiceLine)) AS SalesInvoiceCode
	,CONVERT(int, replace(convert(date,InvoiceDate),'-','')) AS SalesInvoiceDateID
	,PartitionKey

	,Company
	,TRIM(SalesPerson) AS SalesPersonName
	,TRIM(CustNum) AS [CustomerNum]
	,(PartNum) AS PartNum
	,UPPER(PartDesc) AS PartDesc
	,'' AS [PartType]
	,(OrderNum) AS [SalesOrderNum]
	,CAST(OrderLine AS text) AS [SalesOrderLine]
	,OrderSubLine AS [SalesOrderSubLine]
	,OrderType AS [SalesOrderType]
	--,CASE WHEN OrderType = 'MD' THEN 1 
	--		WHEN OrderType = 'MT' THEN 2
	--		WHEN OrderType = 'MR' THEN 3
	--		WHEN OrderType = 'IV' THEN 4
	--		WHEN OrderType = 'Misc. Charges' THEN 5 --added after Ulf changes in the night /DZ
	--	ELSE OrderType END AS [SalesOrderType]
	,InvoiceNum AS [SalesInvoiceNum]
	,InvoiceLine AS [SalesInvoiceLine]
	,InvoiceType AS [SalesInvoiceType]
	,CASE WHEN InvoiceDate = '' THEN '1900-01-01' ELSE CONVERT(date, InvoiceDate) END AS [SalesInvoiceDate]
	,ActualDeliveryDate AS [ActualDelivDate]
	,SellingShipQty AS [SalesInvoiceQty]
	,Unit AS [UoM]
	,UnitPrice
	,UnitCost
	,DiscountAmount
	,IIF(UnitPrice*SellingShipQty = 0, 0, DiscountAmount/UnitPrice*SellingShipQty) AS DiscountPercent
	,CONVERT(decimal(18,4), CashDiscountOffered) AS [CashDiscOffered] 
	,CONVERT(decimal(18,4), CashDiscountUsed) AS [CashDiscUsed] 
	,TotalMiscChrg
	,VAT AS [VATAmount]
	,Currency
	,ExchangeRate
	,CreditMemo
	,[SalesChannel]
	,[BusinessChain] AS [Department]
	,WarehouseCode
	,NULL AS [CostBearerNum]
	,NULL AS [CostUnitNum]
	,NULL AS [ReturnComment]
	,NULL AS [ReturnNum]
	,NULL AS [ProjectNum]
	,'' AS [IndexKey]
	,Res1 AS SIRes1
	,Res2 AS SIRes2
	,Res3 AS SIRes3

FROM stage.AXL_dc_SOLine AS SO

GROUP BY
	PartitionKey, Company, SalesPerson, CustNum, PartNum, PartDesc, OrderNum, OrderLine, OrderSubLine,OrderType, InvoiceNum, InvoiceLine, InvoiceDate, SellingShipQty, UnitPrice, UnitCost, DiscountAmount, TotalMiscChrg, WarehouseCode, CreditMemo, ActualDeliveryDate, Currency, ExchangeRate, InvoiceType, Res1, Res2, Res3, Unit, VAT, SalesChannel, BusinessChain, CashDiscountOffered, CashDiscountUsed
GO
PRINT N'Creating [dm_LS].[dimFinanceAccount]'
GO

CREATE VIEW [dm_LS].[dimFinanceAccount] AS 

SELECT fa.[AccountID]
,fa.[AccountCode]
,fa.[CompanyID]
,fa.[PartitionKey]
,fa.[Company]
,fa.[AccountNum]
,fa.[AccountName]
,fa.[AccountName2]
,fa.[Account]
,fa.[AccountStatus]
,fa.[BalanceAccount]
,fa.[TransactionAccount]
,fa.[Assets]
,fa.[Amortization]
,fa.[Costs]
,fa.[LiabilitiesAndEquity]
,fa.[Revenue]
,fa.[CurrentAssets]
,fa.[CurrentLiabilities]
,fa.[Deprecation]
,fa.[Equity]
,fa.[Liability]
,fa.[Interest]
,fa.[Tax]
,fa.[Materials]
,fa.[Expenses]
,fa.[AccountReceivables]
,fa.[CashAndEquivalents]
,fa.[AccountType]
,fa.[AccountType2]
,fa.[AccountType3]
,fa.[AccountType4]
,fa.[AccountType5]
,fa.[AccountType6]
,fa.[AccountType7]
,fa.[AccountType8]
,fa.[AccountType9]
,fa.[AccountType10]
,fa.[AccountGroupNum]
,fa.[AccountGroupName]
,fa.[AccountGroupOrder]
,fa.[AccountGroup]
,fa.[AccountGroup2]
,fa.[AccountGroup3]
,fa.[Statement]
,fa.[StatementNum]
FROM [dm].[DimFinanceAccount] fa
LEFT JOIN dbo.Company com ON fa.Company = com.Company
WHERE com.BusinessArea = 'Lifting Solutions' AND com.[Status] = 'Active'

--WHERE [Company] in ('CNOCERT')
GO
PRINT N'Creating [stage].[NOM_SE_SalesLedger]'
GO
CREATE TABLE [stage].[NOM_SE_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (25) NULL,
[InvoiceDate] [datetime] NULL,
[DueDate] [datetime] NULL,
[LastPaymentDate] [datetime] NULL
)
GO
PRINT N'Creating [stage].[vNOM_SE_SalesLedger]'
GO
CREATE VIEW [stage].[vNOM_SE_SalesLedger] AS
--COMMENT EMPTY FIELD 2022-12-19 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum), '#', TRIM(InvoiceNum))))) AS SalesLedgerID,
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(Company)))) AS CompanyID,
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company),'#',TRIM(CustNum))))) AS CustomerID,
	UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum), '#', TRIM(InvoiceNum))) AS SalesLedgerCode,
	PartitionKey,

	UPPER(TRIM(Company)) AS Company,
	UPPER(TRIM(CustNum)) as CustomerNum,
	UPPER(TRIM(InvoiceNum)) as SalesInvoiceNum,
	CONVERT(DATE, InvoiceDate) AS SalesInvoiceDate,
	CONVERT(date, DueDate) AS SalesDueDate,
	CONVERT(date, LastPaymentDate) AS SalesLastPaymentDate,
	'1900-01-01' AS AccountingDate
	--0 AS InvoiceAmount,
	--0 AS RemainingInvoiceAmount,
	--0 AS ExchangeRate,
	--'' AS Currency,
	--0 AS VATAmount,
	--'' AS VATCode,
	--'' AS PayToName,
	--'' AS PayToCity,
	--'' AS PayToContact,
	--'' AS PaymentTerms,
	--'' AS SLRes1,
	--'' AS SLRes2,
	--'' AS SLRes3
	--,NULL	AS PaidInvoiceAmount
	--,NULL AS AgingPeriod
	--,NULL AS AgingSort
	--,NULL AS VATCodeDesc
	--,NULL AS LinkToOriginalInvoice
FROM 
	stage.NOM_SE_SalesLedger
GO
PRINT N'Creating [dm_ALL].[dimCustomer]'
GO



--CREATE schema dm_ALL

CREATE VIEW [dm_ALL].[dimCustomer] AS

SELECT 
	   [CustomerID]
      ,[CompanyID]
      ,[Company]
      ,[CustomerNum]
      ,[MainCustomerName]
      ,[CustomerName]
      ,[Customer]
      ,[AddressLine1]
      ,[AddressLine2]
      ,[AddressLine3]
      ,[TelephoneNum1]
      ,[TelephoneNum2]
      ,[Email]
      ,[ZipCode]
      ,[City]
      ,[State]
      ,[SalesDistrict]
      ,[CountryCode]
      ,[CountryName]
      ,[Division]
      ,[CustomerIndustry]
      ,[CustomerSubIndustry]
      ,[AddressLine]
      ,[FullAddressLine]
      ,[CustomerGroup]
      ,[CustomerSubGroup]
      ,[SalesPersonCode]
      ,[SalesPersonName]
      ,[SalesPersonResponsible]
      ,[VATNum]
      ,[OrganizationNum]
      ,[AccountNum]
      ,[InternalExternal]
      ,[CustomerScore]
      ,[CustomerType]
      ,[CustomerCode]
      ,[CustomerStatus]
      ,[DUNS]
      ,[DUNS_MatchScore]
      ,[CRes1]
      ,[CRes2]
      ,[CRes3]
      ,[is_inferred]
      ,[is_deleted]
      ,[is_validCountryCode]
      ,[DUNS_Status]

FROM [dm].[DimCustomer]
GO
PRINT N'Creating [stage].[Nom_FI_StockTrasnactionOBwithHist]'
GO
CREATE TABLE [stage].[Nom_FI_StockTrasnactionOBwithHist]
(
[Company] [nvarchar] (50) NULL,
[IndexKey] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[TransactionCode] [nvarchar] (50) NULL,
[TransactionDescription] [nvarchar] (50) NULL,
[IssuerReceiverNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[BinNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[TransactionDate] [nvarchar] (50) NULL,
[TransactionTime] [nvarchar] (50) NULL,
[TransactionQty] [nvarchar] (50) NULL,
[TransactionValue] [nvarchar] (50) NULL,
[CostPrice] [nvarchar] (50) NULL,
[SalesUnitPrice] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[Reference] [nvarchar] (50) NULL,
[AdjustmentDate] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vNOM_FI_SOLineHist]'
GO


CREATE VIEW [stage].[vNOM_FI_SOLineHist] AS

SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(IssuerReceiverNum), '#', TRIM(OrderNum), '#', TRIM(PartNum), '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine))))) AS SalesInvoiceID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(OrderNum),'#',TRIM(OrderLine),'#',TRIM(InvoiceNum))))) AS SalesOrderID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(IssuerReceiverNum), '#', TRIM(InvoiceNum))))) AS SalesLedgerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(OrderNum))))) AS SalesOrderNumID  
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(IssuerReceiverNum))))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID 
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(OrderNum),'#',TRIM(OrderLine))) AS SalesOrderCode 
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(InvoiceNum))))) AS SalesInvoiceNumID 
	,CONVERT(int, replace(convert(date,TransactionDate),'-','')) AS SalesInvoiceDateID
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(InvoiceNum),'#',TRIM(InvoiceLine))) AS SalesInvoiceCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,'2022-07-05 12:00' AS PartitionKey

	,UPPER(TRIM(Company)) AS Company
	,'' AS SalesPersonName
	,UPPER(TRIM(IssuerReceiverNum)) AS CustomerNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,CASE WHEN TRIM(OrderNum) = '0' THEN 'PrimaryPart' ELSE 'SubPart' END  AS PartType
	,UPPER(TRIM(OrderNum)) AS SalesOrderNum
	,UPPER(TRIM(OrderLine)) AS SalesOrderLine
	,'' AS SalesOrderSubLine-- '0' as OrderSubLine
	,'' AS SalesOrderType
	,TRIM(InvoiceNum) AS SalesInvoiceNum
	,UPPER(TRIM(InvoiceLine)) AS SalesInvoiceLine
	,'' AS SalesInvoiceType
	,CONVERT(date, TransactionDate) AS SalesInvoiceDate
	,CONVERT(date, TransactionDate) AS ActualDelivDate
	,IIF(TransactionQty IS NULL, 0, TRY_CONVERT(decimal(18,2), REPLACE(REPLACE(TransactionQty, ' ', ''), ',', '.')))*-1 AS SalesInvoiceQty
	,'' AS UoM
	,IIF(SalesUnitPrice IS NULL, 0, TRY_CONVERT(decimal(18,4), REPLACE(REPLACE(SalesUnitPrice, ' ', ''), ',', '.'))) AS UnitPrice
	,IIF(CostPrice IS NULL, 0, TRY_CONVERT(decimal(18,4), REPLACE(REPLACE(CostPrice, ' ', ''), ',', '.'))) AS UnitCost
	,0 AS DiscountPercent
	,0 AS DiscountAmount
	,0 AS CashDiscountOffered
	,0 AS CashDiscountUsed
	,0 AS TotalMiscChrg
	,NULL AS VATAmount
	,'EUR' AS Currency
	,1 AS ExchangeRate
	,'0' AS CreditMemo
	,'Normal Order Handling' AS SalesChannel
	, '1' AS IsUpdatingStock
	,'' AS Department
	,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
	,NULL AS DeliveryAddress
	,'' AS CostBearerNum
	,'' AS CostUnitNum
	,'' AS ReturnComment
	,'' AS ReturnNum
	,'' AS ProjectNum
	,IndexKey
	,'' AS SIRes1
	,'' AS SIRes2
	,'history data import' AS SIRes3
FROM [stage].[NOM_FI_StockTrasnactionOBwithHist]
WHERE TransactionDate > '2014-12-31'
--GROUP BY
--	PartitionKey, Company, CustNum, OrderNum, OrderLine, OrderSubLine, OrderType, InvoiceNum, InvoiceLine, InvoiceDate, SellingShipQty, UnitPrice, UnitCost, Currency, ExchangeRate, TotalMiscChrg, DiscountAmount,PartNum, SalesPerson,  WarehouseCode, CreditMemo,SalesChannel
GO
PRINT N'Creating [stage].[CER_NO_BC_Part]'
GO
CREATE TABLE [stage].[CER_NO_BC_Part]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PartNum] [nvarchar] (200) NULL,
[PartDescription] [nvarchar] (200) NULL,
[PartDescription2] [nvarchar] (200) NULL,
[ProductGroup] [nvarchar] (400) NULL,
[CommodityCode] [nvarchar] (100) NULL,
[CountryOfOrigin] [nvarchar] (200) NULL,
[NetWeight] [nvarchar] (40) NULL,
[SupplierCode] [nvarchar] (200) NULL,
[ReorderLevel] [nvarchar] (40) NULL,
[systemCreatedAt] [nvarchar] (50) NULL,
[systemModifiedAt] [nvarchar] (50) NULL,
[PartStatus] [varchar] (10) NULL,
[SourceTable] [varchar] (15) NULL,
[ProductGroup2] [nvarchar] (400) NULL,
[childcode] [nvarchar] (10) NULL,
[parentcode] [nvarchar] (10) NULL,
[PartType] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_NO_BC_Part]'
GO



CREATE VIEW [stage].[vCER_NO_BC_Part] AS 
SELECT 
	CONVERT(binary(32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID,
	CONVERT(binary(32), HASHBYTES('SHA2_256', TRIM(Company))) AS CompanyID
	,PartitionKey
	,Company
	,nullif(TRIM(PartNum),'') AS PartNum
	,nullif(trim(PartDescription),'') as PartDescription
	,nullif(trim(PartDescription2),'') as PartDescription2
	,nullif(trim(ProductGroup),'') as ProductGroup
	,nullif(trim(ProductGroup2),'') as ProductGroup2
	,nullif(trim(CommodityCode),'') as CommodityCode
	,nullif(trim(CountryOfOrigin),'') as CountryOfOrigin
	,cast(NetWeight as decimal(10,4)) as NetWeight
	,nullif(TRIM(SupplierCode),'') AS MainSupplier
	,cast(ReorderLevel as decimal(10,4)) as ReOrderLevel
	,PartStatus
	,PartType as PARes1
    --,systemCreatedAt
	--,systemModifiedAt
FROM 
	 stage.CER_NO_BC_Part
GO
PRINT N'Creating [stage].[TMT_FI_Customer]'
GO
CREATE TABLE [stage].[TMT_FI_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[CustomerName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[AddressLine3] [nvarchar] (100) NULL,
[ABCCode] [nvarchar] (50) NULL,
[City] [nvarchar] (50) NULL,
[ZIP] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[Division] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNr] [nvarchar] (50) NULL,
[OrganizationNum] [nvarchar] (50) NULL,
[AccountString] [nvarchar] (50) NULL,
[CustomerType] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[email] [nvarchar] (500) NULL,
[TelephoneNo] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vTMT_FI_Customer]'
GO
CREATE VIEW [stage].[vTMT_FI_Customer] AS
--COMMENT EMPTY FIELDS // ADD TRIM() INTO CustomerID 23-01-09 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company),'#', TRIM(CustomerNum))))) AS CustomerID
--	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company,'#', TRIM(CustomerNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,UPPER(CONCAT([Company], '#',TRIM([CustomerNum]))) AS CustomerCode
	,PartitionKey

	,UPPER(Company) AS Company
	,UPPER(TRIM(CustomerNum)) AS [CustomerNum]
	--,'' AS MainCustomerName
	,[dbo].[ProperCase](CustomerName) AS  [CustomerName]
	,[AddressLine1] AS [AddressLine1]
	,[AddressLine2] AS [AddressLine2]
	,[AddressLine3] AS [AddressLine3]
	,[TelephoneNo] AS [TelephoneNum1]
	--,'' AS [TelephoneNum2]
	,LEFT([email], 50) AS [Email]
	,CASE 
		WHEN [dbo].[ProperCase](CountryName) in ('Suomi', 'Viro') THEN LEFT(City, 5)
		WHEN [dbo].[ProperCase](CountryName) in ('Venäjä', 'Puola', 'Kiina') THEN LEFT(City, 6)
		WHEN [dbo].[ProperCase](CountryName) in ('Viro') THEN LEFT(City, 8)
		WHEN [dbo].[ProperCase](CountryName) in ('Ruotsi') THEN LEFT(City, 10)
		ELSE LEFT(City, 7) end
		AS [ZipCode]
	,TRIM(SUBSTRING(REPLACE([dbo].[ProperCase](City),' ', ''), 6, 100))  AS [City] 
	,IIF([State]= ' ', null, [State]) AS [State]
	,[District]	AS SalesDistrict
	,IIF((CountryName) IS NULL, 'FI', CountryCode) AS CountryCode
	,[dbo].[ProperCase](CountryName) AS [CountryName]
	,Division
	--,'' AS CustomerIndustry
	--,'' AS CustomerSubIndustry
	,[dbo].[ProperCase](TRIM(concat(TRIM(addressline1)+' '+ TRIM(addressline2), null))) AS [AddressLine]
	,CONCAT(Countryname, + ',  ' + trim(TRIM(SUBSTRING(REPLACE([dbo].[ProperCase](City),' ', ''), 6, 100))), + ',  ' + TRIM([Zip]), + ',  ' + trim(addressline1)) AS [FullAddressLine]
	,[dbo].[ProperCase](CustomerGroup) AS [CustomerGroup]
	,[CustomerSubGroup]
	,[SalesRepCode]		AS SalesPersonCode
	,[dbo].[ProperCase](SalesPersonName) AS [SalesPersonName]
	--,'' AS [SalesPersonResponsible]
	,[VATRegNr]	AS VATNum
	,OrganizationNum
	,[AccountString] AS AccountNum
	,[InternalExternal]
	,[ABCCode] AS [CustomerScore]
	,[CustomerType]
	,GETDATE() AS [ValidFrom]
	,DATEADD(year,1,GETDATE()) AS [ValidTo]
FROM [stage].[TMT_FI_Customer]
GO
PRINT N'Creating [stage].[CER_FI_PurchaseInvoice]'
GO
CREATE TABLE [stage].[CER_FI_PurchaseInvoice]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaseOrderType] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[PurchaseInvoiceLine] [nvarchar] (50) NULL,
[PurchaseInvoiceType] [nvarchar] (50) NULL,
[PurchaseInvoiceDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PurchaseInvoiceQty] [decimal] (18, 4) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[VATAmount] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PurchaserName] [nvarchar] (100) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[PurchaseChannel] [nvarchar] (50) NULL,
[LastPaymentNum] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_FI_PurchaseInvoice]'
GO
CREATE VIEW [stage].[vCER_FI_PurchaseInvoice] AS
--COMMENT EMPTY FIELDS 2022-12-21 VA
--COMMENT PURCHASEORDERID 2023-08-24
SELECT 
	--CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum),'#',TRIM(PurchaseOrderNum),'#',TRIM(PurchaseOrderLine),'#'
	--	,TRIM(PurchaseOrderSubLine),'#',TRIM(PurchaseInvoiceNum), '#', TRIM(PurchaseInvoiceLine), '#', ActualDelivDate, '#', PartNum, '#', UnitPrice, '#', DiscountAmount
	--	, '#', PurchaseInvoiceQty, '#', TRIM(WarehouseCode),'#',TRIM(LastPaymentNum))))) AS PurchaseInvoiceID 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(PurchaseOrderSubLine), '#', TRIM(PurchaseInvoiceNum), '#', TRIM(PurchaseInvoiceLine), '#', TRIM(PartNum), '#', TRIM(WarehouseCode))))) AS PurchaseInvoiceID 

	,UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseInvoiceNum), '#', TRIM(PurchaseInvoiceLine), '#', PartNum)) AS PurchaseInvoiceCode
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum))) AS PurchaseOrderNumCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum),'#',TRIM(PurchaseOrderLine),'#',TRIM(PurchaseInvoiceNum))))) AS PurchaseOrderID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum))))) AS SupplierID
    ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT(int, replace(PurchaseInvoiceDate,'-','')) AS PurchaseInvoiceDateID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#', TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum),'#',TRIM(PurchaseOrderNum),'#',TRIM(LastPaymentNum))))) AS PurchaseLedgerID --match PurchaseLedgerID in [vSCM_FI_PurchaseLedger]
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum),'#',TRIM(PurchaseOrderNum),'#',TRIM(PurchaseOrderLine),'#',TRIM(PurchaseOrderSubLine))) AS PurchaseOrderCode
	,PartitionKey

	,UPPER(TRIM(Company)) AS Company
	,UPPER(TRIM(PurchaseOrderNum)) AS PurchaseOrderNum
	,UPPER(TRIM(PurchaseOrderLine)) AS PurchaseOrderLine
	,UPPER(TRIM(PurchaseOrderSubLine)) AS PurchaseOrderSubLine
	,PurchaseOrderType
	,UPPER(TRIM(PurchaseInvoiceNum)) AS PurchaseInvoiceNum
	,UPPER(TRIM(PurchaseInvoiceLine)) AS PurchaseInvoiceLine
	,PurchaseInvoiceType
	,PurchaseInvoiceDate
	,ActualDelivDate
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,PurchaseInvoiceQty
	,UoM
	,UnitPrice
	--,0 AS DiscountPercent
	,DiscountAmount
	,TotalMiscChrg
	,VATAmount
	,Currency
	,IIF(ExchangeRate = 0, 0, 1/ExchangeRate) AS ExchangeRate
	,CreditMemo
	,PurchaserName
	,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
	,PurchaseChannel
	--,'' AS Comment
	--,'' AS PIRes1
	--,'' AS PIRes2
	--,'' AS PIRes3
	--,'' AS OrderDelivLineNum
FROM stage.CER_FI_PurchaseInvoice

--GROUP BY
	--PartitionKey, Company, PurchaseOrderNum, PurchaseInvoiceNum, SupplierNum, PartNum, PurchaseOrderLine, PurchaseOrderSubLine, PurchaseInvoiceQty,UoM, UnitPrice, WarehouseCode,PurchaserName, 
	--PurchaseInvoiceLine, PurchaseInvoiceType, PurchaseInvoiceDate, ActualDelivDate, TotalMiscChrg, VATAmount, CreditMemo, PurchaseOrderType,DiscountAmount,Currency,ExchangeRate,PurchaseChannel, LastPaymentNum 

	--, PurchaseOrderType, [Site], OrderDelivLineNum, , DiscountPercent, PurchaserName, PurchaseInvoiceLine, PurchaseInvoiceType, PurchaseInvoiceDate, ActualDelivDate, TotalMiscChrg, CreditMemo
GO
PRINT N'Creating [stage].[FOR_SE_SOLine]'
GO
CREATE TABLE [stage].[FOR_SE_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderRel] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[CreditMemo] [int] NULL,
[PartNum] [nvarchar] (50) NULL,
[SellingShipQty] [decimal] (28, 8) NULL,
[UnitPrice] [decimal] (28, 8) NULL,
[UnitCost] [decimal] (28, 8) NULL,
[DiscountAmount] [decimal] (38, 8) NULL,
[TotalMiscChrg] [decimal] (38, 8) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Indexkey] [varchar] (10) NULL,
[Site] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vFOR_SE_SOLine]'
GO

CREATE VIEW [stage].[vFOR_SE_SOLine] AS
--COMMENT EMPTY FIELD // CustomerID,PartID Adjust 2022-12-20 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine))))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderRel), '#', TRIM(InvoiceNum))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ), '#', TRIM(InvoiceNum))))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(OrderNum))))) AS SalesOrderNumID  
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID 
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ))))) AS CustomerID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) ))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,UPPER(CONCAT(Company, '#', OrderNum, '#', OrderLine, '#', InvoiceNum)) as SalesOrderCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(InvoiceNum))))) AS SalesInvoiceNumID -- Redundant
	,CONVERT(int, replace(convert(date,InvoiceDate),'-','')) AS SalesInvoiceDateID  --Redundant?
	,UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine))) AS SalesInvoiceCode --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey

	,UPPER(TRIM(Company)) AS Company
	,UPPER(TRIM(CustNum)) AS CustomerNum
	,UPPER(TRIM(PartNum)) AS PartNum
	--,UPPER(TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) )) AS CustomerNum
	--,UPPER(TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) )) AS PartNum
	,TRIM(SalesPerson) AS SalesPersonName
	,CASE WHEN TRIM(OrderNum) = '0' THEN 'PrimaryPart' ELSE 'SubPart' END  AS PartType
	,CASE WHEN OrderNum is not NULL or OrderNum <> '0' THEN UPPER(TRIM(OrderNum)) END AS SalesOrderNum
	,UPPER(TRIM(OrderLine)) AS SalesOrderLine
	,UPPER(TRIM(OrderSubLine)) AS SalesOrderSubLine
	,TRIM(OrderType) AS SalesOrderType
	,UPPER(TRIM(InvoiceNum)) AS SalesInvoiceNum
	,UPPER(TRIM(InvoiceLine)) AS SalesInvoiceLine
	--,'' AS SalesInvoiceType
	,convert(date, InvoiceDate) as SalesInvoiceDate
	,ActualDeliveryDate AS ActualDelivDate
	,SellingShipQty AS SalesInvoiceQty
	--,'' AS UoM
	,UnitPrice
	,CASE WHEN UnitCost < 0 THEN -1*(UnitCost) ELSE UnitCost END AS UnitCost  -- to stress Forankra Sweden return scenario as stated in Emil T email on 2020-08-05
	,IIF(SellingShipQty*UnitPrice <> 0, DiscountAmount/SellingShipQty*UnitPrice, 0) AS DiscountPercent
	,DiscountAmount
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	--,0 AS TotalMiscChrg -- TotalMiscChrg in SO but on the request of Hanna Klasson at Forankra SE this should not be included (mail on 2020-09-30) 
	--,NULL AS VATAmount
	,'SEK' AS Currency
	,1 AS ExchangeRate
	,CreditMemo
	--,'' AS SalesChannel
	--,'' Department
	,TRIM(WarehouseCode) AS WarehouseCode
	--,NULL AS DeliveryAddress
	--,'' AS CostBearerNum
	--,'' AS CostUnitNum
	--,'' AS ReturnComment
	--,'' AS ReturnNum
	--,'' AS ProjectNum
	,IndexKey
	--,'' AS SIRes1
	--,'' AS SIRes2
	--,'' AS SIRes3
FROM stage.FOR_SE_SOLine AS SO
WHERE OrderNum <> '0'
GROUP BY 
	PartitionKey, Company, SalesPerson, CustNum, OrderNum, OrderLine, OrderSubLine, OrderRel, OrderType, InvoiceNum, InvoiceLine, InvoiceDate, SellingShipQty, UnitPrice, UnitCost, DiscountAmount, TotalMiscChrg, PartNum, WarehouseCode, CreditMemo, Indexkey, ActualDeliveryDate --, [Site]
GO
PRINT N'Creating [dm_LS].[dimProject]'
GO
CREATE VIEW [dm_LS].[dimProject] AS

SELECT 
 proj.[ProjectID]
,proj.[ProjectCode]
,proj.[PartitionKey]
,proj.[Company]
,proj.[MainProjectNum]
,proj.[ProjectNum]
,proj.[ProjectDescription]
,proj.[Project]
,proj.[Organisation]
,proj.[ProjectStatus]
,proj.[ProjectCategory]
,proj.[WBSElement]
,proj.[ObjectNum]
,proj.[Level]
,proj.[Currency]
,proj.[WarehouseCode]
,proj.[ProjectResponsible]
,proj.[Comments]
,proj.[StartDate]
,proj.[EndDate]
,proj.[EstEndDate]
,proj.[ActualCost]
FROM [dm].[DimProject] proj
LEFT JOIN dbo.Company com ON proj.Company = com.Company
WHERE com.BusinessArea = 'Lifting Solutions' AND com.[Status] = 'Active'

--WHERE [Company] in ('AFISCM', 'CDKCERT', 'CEECERT', 'CFICERT', 'CLTCERT', 'CLVCERT', 'CSECERT', 'CUKCERT', 'CNOEHAU', 'CNOCERT', 'CyESA', 'HFIHAKL')
GO
PRINT N'Creating [stage].[JEN_NO_Part]'
GO
CREATE TABLE [stage].[JEN_NO_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartDescription] [nvarchar] (100) NULL,
[PartDescription2] [nvarchar] (100) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[ProductGroup2] [nvarchar] (50) NULL,
[CommodityCode] [nvarchar] (50) NULL,
[CountryOfOrigin] [nvarchar] (50) NULL,
[NetWeight] [decimal] (18, 4) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[ReorderLevel] [decimal] (18, 4) NULL,
[EAN] [nvarchar] (50) NULL,
[StockItemStatus] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vJEN_NO_Part]'
GO
CREATE VIEW [stage].[vJEN_NO_Part] AS
--COMMENT EMPTY FIELDS // ADD UPPER()TRIM() INTO 2022-12-23
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
	--CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',[PartNum]))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER([Company]))) AS CompanyID
	,CONCAT([Company],'#',TRIM([PartNum])) AS PartCode
	,PartitionKey

	,UPPER([Company]) AS [Company]
	,UPPER(TRIM([PartNum])) AS [PartNum]
	--,'' AS [PartName]
	,[PartDescription]
	,[PartDescription2]
	--,'' AS [PartDescription3]
	,SupplierCode AS MainSupplier
	,NULL AS AlternativeSupplier
	,[ProductGroup]
	,[ProductGroup2]
	--,'' AS [ProductGroup3]
	--,'' AS [ProductGroup4]
	--,'' AS [Brand]
	,[CommodityCode]
	--,'' AS PartReplacementNum
	,StockItemStatus AS PartStatus
	,[CountryOfOrigin]
	,[NetWeight]
	--,'' AS UoM
	--,'' AS [Material]
	,EAN AS [Barcode]
	,[ReOrderLevel]
	--,'' AS PartResponsible
	--,'' AS [StartDate]
	--,'' AS [EndDate]
FROM [stage].[JEN_NO_Part]
WHERE [PartDescription] != 'IKKE BRUK !!'
GO
PRINT N'Creating [dm_ALL].[fctBudget]'
GO
CREATE VIEW [dm_ALL].[fctBudget] AS

SELECT  [BudgetID]
,[CustomerID]
,[CompanyID]
,[PartID]
,[WarehouseID]
,[ProjectID]
,[DepartmentID]
,[BudgetPeriodDateID]
,[PartitionKey]
,[BudgetType]
,[BudgetName]
,[BudgetDescription]
,[Company]
,[BudgetPeriod]
,[BudgetPeriodDate]
,[PeriodType]
,[CustomerNum]
,[PartNum]
,[SalesPersonCode]
,[SalesPersonName]
,[BudgetSales]
,[BudgetCost]
,[GrossProfitInvoiced]
,[GrossMarginInvoicedPercent]
,[BudgetFinance]
,[WarehouseCode]
,[CostBearerNum]
,[CostUnitNum]
,[ProjectNum]
,[AccountNum]
,[AccountGroupNum]
FROM dm.FactBudget
GO
PRINT N'Creating [stage].[CER_LV_Part]'
GO
CREATE TABLE [stage].[CER_LV_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartDescription] [nvarchar] (max) NULL,
[PartDescription2] [nvarchar] (max) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[ProductGroup2] [nvarchar] (50) NULL,
[ProductGroup3] [nvarchar] (50) NULL,
[ProductGroup4] [nvarchar] (50) NULL,
[CommodityCode] [nvarchar] (50) NULL,
[CountryOfOrigin] [nvarchar] (50) NULL,
[NetWeight] [decimal] (18, 4) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[ReorderLevel] [decimal] (18, 4) NULL,
[EAN] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_LV_Part]'
GO
CREATE VIEW [stage].[vCER_LV_Part] AS
--COMMENT EMPTY FIELDS // ADD UPPER() TRIM() INTO PartID 2022-12-21 VA
SELECT 
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company,'#',TRIM([PartNum])))) AS PartID
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company),'#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',Company)) AS CompanyID
	,CONCAT(Company,'#',[PartNum]) AS PartCode
	,PartitionKey

	,Company
	,TRIM([PartNum]) AS [PartNum]
	--,'' AS [PartName]
	,[PartDescription]
	,[PartDescription2]
	--,'' AS [PartDescription3]
	--,NULL AS MainSupplier
	--,NULL AS AlternativeSupplier
	,[ProductGroup]
	,[ProductGroup2]
	--,'' AS [ProductGroup3]
	--,'' AS [ProductGroup4]
	--,'' AS [Brand]
	,[CommodityCode]
	--,'' PartReplacementNum
	--,'' AS PartStatus
	,[CountryOfOrigin]
	,[NetWeight]
	--,'' AS UoM
	--,'' AS [Material]
	--,'' AS [Barcode]
	,MAX([ReorderLevel]) AS [ReOrderLevel]
	--,'' AS PartResponsible
	--,'' AS [StartDate]
	--,'' AS [EndDate]
	--,0 AS [MinOrderQty]
	,MAX([SupplierCode]) AS [SupplierCode]
FROM 
	[stage].[CER_LV_Part]
GROUP BY
	PartitionKey, Company, [PartNum], [PartDescription], [PartDescription2], [ProductGroup], [ProductGroup2], [CommodityCode], [CountryOfOrigin], [NetWeight] --, [ReorderLevel], [MinOrderQty], [SupplierCode]
GO
PRINT N'Creating [stage].[CER_DK_Project]'
GO
CREATE TABLE [stage].[CER_DK_Project]
(
[PartitionKey] [nvarchar] (50) NULL,
[Company] [nvarchar] (8) NOT NULL,
[MainProjectNum] [nvarchar] (50) NULL,
[ProjectNum] [nvarchar] (50) NOT NULL,
[ProjectNumSubLine] [nvarchar] (50) NULL,
[ProjectDescription] [nvarchar] (max) NULL,
[Organisation] [nvarchar] (50) NULL,
[ProjectStatus] [nvarchar] (50) NULL,
[ProjectCategory] [nvarchar] (50) NULL,
[WBSElement] [nvarchar] (50) NULL,
[Level] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[ProjectResponsible] [nvarchar] (50) NULL,
[Comments] [nvarchar] (max) NULL,
[StartDate] [date] NULL,
[EndDate] [date] NULL,
[EstEndDate] [date] NULL,
[ProjectCompletion] [decimal] (18, 4) NULL,
[ActualCost] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vCER_DK_Project]'
GO




CREATE VIEW [stage].[vCER_DK_Project] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(upper(TRIM([COMPANY])), '#', UPPER(trim([ProjectNum]))))) AS ProjectID
	,UPPER(CONCAT(TRIM([COMPANY]),'#',UPPER(TRIM([ProjectNum])) )) AS ProjectCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([COMPANY])))) AS CompanyID
	,PartitionKey

	,Company 
	,MainProjectNum
	,UPPER(trim(ProjectNum)) as [ProjectNum]
	,[ProjectDescription]
	,[Organisation]
	,ProjectStatus
	,ProjectCategory
	,[WBSElement]
	,'' AS [ObjectNum]
	,[Level]
	,[Currency]
	,trim([WarehouseCode]) as [WarehouseCode]
	,ProjectResponsible
	,Comments
	,COALESCE(CONVERT(date, [StartDate],112),'1900-01-01') AS StartDate
	,COALESCE(CONVERT(date, [EndDate],112),'1900-01-01') AS EndDate
	,COALESCE(CONVERT(date,[EstEndDate],112),'1900-01-01') AS EstEndDate
	,NULL AS ProjectCompletion
	,(ActualCost) AS ActualCost --SUM
FROM [stage].[CER_DK_Project]
--GROUP BY Company ,MainProjectNum,[ProjectNum],[ProjectDescription],[Organisation],ProjectStatus,ProjectCategory,[WBSElement],[ObjectNum],[Level]
--	,[Currency],[WarehouseCode],ProjectResponsible,Comments,[StartDate],EndDate,EstEndDate, PartitionKey
GO
PRINT N'Creating [stage].[SUM_UK_Warehouse]'
GO
CREATE TABLE [stage].[SUM_UK_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (12) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL,
[WarehouseDistrict] [nvarchar] (100) NULL,
[WarehouseAddress] [nvarchar] (100) NULL,
[WarehouseDescription] [nvarchar] (100) NULL,
[WarehouseType] [nvarchar] (100) NULL,
[WarehouseCountry] [nvarchar] (100) NULL,
[Site] [nvarchar] (100) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartDescription] [nvarchar] (50) NULL,
[PartDescription2] [nvarchar] (50) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[ProductGroup2] [nvarchar] (50) NULL,
[CountryOfOriginCode] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vSUM_UK_Warehouse]'
GO
CREATE VIEW [stage].[vSUM_UK_Warehouse] AS
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(dbo.summers()), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey
	,UPPER(TRIM(dbo.summers())) AS Company
	,UPPER(TRIM([WarehouseCode])) AS [WarehouseCode]
	,trim([WarehouseName]) as [WarehouseName]
	,trim([WarehouseDistrict]) as [WarehouseDistrict]
	,trim([WarehouseAddress]) as [WarehouseAddress]
	,trim([WarehouseDescription]) as [WarehouseDescription]
	,trim([WarehouseType]) as [WarehouseType]
	,trim([WarehouseCountry]) [WarehouseCountry]
	,trim([Site]) AS [WarehouseSite]
	,[Partnum]
FROM [stage].[SUM_UK_Warehouse]
GO
PRINT N'Creating [stage].[AXL_DE_OLine]'
GO
CREATE TABLE [stage].[AXL_DE_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[NeedbyDate] [date] NULL,
[ExpDelivDate] [date] NULL,
[EDCExpDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (10) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[SalesPerson] [nvarchar] (50) NULL,
[WareHouseCode] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[BusinessChain] [nvarchar] (50) NULL,
[SalesOrderCategory] [nvarchar] (100) NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL,
[PartDesc] [nvarchar] (max) NULL,
[APV_Cost_EUR] [nvarchar] (50) NULL,
[APV_Item] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXL_DE_OLine]'
GO



CREATE VIEW [stage].[vAXL_DE_OLine] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(PartDesc))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum), '#', (IIF(TRIM([PartNum]) LIKE 'IACO%' , 'MISC. CHARGES', TRIM(PartDesc) )) )))) AS PartID
	,CONVERT(int, replace(convert(date, OrderDate), '-', '')) AS SalesOrderDateID
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine))) AS SalesOrderCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(CustNum) AS CustomerNum 
	,TRIM(OrderNum) AS [SalesOrderNum]
	,TRIM(OrderLine) AS [SalesOrderLine]
	,TRIM(OrderSubLine) AS [SalesOrderSubLine]
	,CONVERT(nvarchar(50), TRIM(OrderType)) AS [SalesOrderType]
	,TRIM([SalesOrderCategory]) AS [SalesOrderCategory]
	,OrderDate AS [SalesOrderDate]
	,NeedbyDate
	,ExpDelivDate AS [ExpDelivDate]
	,EDCExpDelivDate
	,ActualDelivDate
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,OrderQty AS [SalesOrderQty]
	,DelivQty
	,RemainingQty
	,Unit AS [UoM]
	,UnitPrice
	,UnitCost
	,LEFT(TRIM(Currency), 3) AS Currency
	,ExchangeRate
	,LEFT(TRIM(OpenRelease), 1) AS OpenRelease
	,DiscountAmount
	,DiscountPercent
	,NULL AS CashDiscOffered
	,NULL AS CashDiscUsed
	,TRIM(PartNum) AS PartNum
	,UPPER(PartDesc) AS PartDesc
	,'' AS [PartType]
	,CONVERT(nvarchar(50), PartStatus) AS PartStatus
	,TRIM(SalesPerson) AS [SalesPersonName]
	,TRIM(WareHouseCode) AS WarehouseCode
	,'' AS IndexKey
	,TRIM(SalesChannel) AS SalesChannel
	,TRIM(BusinessChain) AS [Department]
	,Res3 AS [ProjectNum] -- = FreeOfCharge: Y = yes, N = no
	,'' AS Cancellation
	,Res1 AS SORes1
	,Res2 AS SORes2
	,Res3 AS SORes3
FROM stage.AXL_DE_OLine
WHERE OrderDate >= '2015-01-01'
GO
PRINT N'Creating [stage].[CER_NO_SOLine]'
GO
CREATE TABLE [stage].[CER_NO_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderRel] [nvarchar] (50) NULL,
[LineFlag] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (100) NULL,
[PartNum] [nvarchar] (50) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Indexkey] [nvarchar] (50) NULL,
[Site] [nvarchar] (50) NULL,
[OrderType] [int] NULL,
[Kit_UnitPrice] [decimal] (18, 4) NULL,
[Kit_Discount] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[CER_NO_mapSite]'
GO
CREATE TABLE [stage].[CER_NO_mapSite]
(
[Company] [nvarchar] (50) NULL,
[CostUnitNum] [nvarchar] (50) NULL,
[CostUnitName] [nvarchar] (100) NULL,
[CostUnitStatus] [nvarchar] (100) NULL,
[CostUnitGroup] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vCER_NO_SOLine]'
GO

CREATE VIEW [stage].[vCER_NO_SOLine] AS
--COMMENT EMPTY FIELDS // ADD TRIM() INTO PartID,CustomerID,WarehouseID 2022-12-16 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(SO.Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine)))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(SO.Company, '#', OrderNum, '#', OrderLine, '#', OrderRel, '#', InvoiceNum))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(SO.Company, '#', CustNum, '#', InvoiceNum))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(SO.Company, '#', TRIM(OrderNum)))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', SO.Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(SO.Company), '#', TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(SO.Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(SO.Company), '#', TRIM(PartNum))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(SO.Company, '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) ))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(SO.Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(SO.Company, '#', WarehouseCode))) AS WarehouseID
	,CONCAT(SO.Company,'#',OrderNum,'#',OrderLine) AS SalesOrderCode 
	,CONVERT(int, replace(convert(date,InvoiceDate),'-','')) AS SalesInvoiceDateID  --Redundant?
	,CONCAT(SO.Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine)) AS SalesInvoiceCode --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( SO.Company,'#','') ))	AS ProjectID
	,PartitionKey

	,UPPER(TRIM(SO.Company)) AS Company
	,TRIM(SalesPerson) AS SalesPersonName
	,UPPER(TRIM(CustNum)) AS CustomerNum
	,UPPER(TRIM(PartNum)) AS PartNum
	--,CASE WHEN TRIM(OrderNum) = '0' THEN 'PrimaryPart' ELSE 'SubPart' END  AS PartType
	,LineFlag AS PartType		--Changed to LineFlag since it seems to be a better indicator át request of An /SM 2021-04-28
	,TRIM(OrderNum) AS SalesOrderNum
	,TRIM(OrderLine) AS SalesOrderLine
	,TRIM(OrderSubLine) AS SalesOrderSubLine
--	,OrderRel AS OrderRelNum
	,CONVERT(nvarchar(50), OrderType) AS SalesOrderType
	,TRIM(InvoiceNum) AS SalesInvoiceNum
	,TRIM(InvoiceLine) AS SalesInvoiceLine
	--,'' AS SalesInvoiceType
	,CASE WHEN InvoiceDate = '' THEN '1901-01-01' ELSE CONVERT(date, InvoiceDate) END AS SalesInvoiceDate
	,ActualDeliveryDate AS ActualDelivDate
	,SellingShipQty AS SalesInvoiceQty
	,'' AS UoM
	--,CASE WHEN LineFlag = 'Main' AND UnitPrice = 0 THEN Kit_UnitPrice --was
	--	ELSE UnitPrice
	--	END AS UnitPrice --	
	,UnitPrice
	,IIF(UnitPrice = 0, 0, UnitCost) AS UnitCost
	--,CASE WHEN LineFlag = 'Main' AND UnitPrice = 0 THEN Kit_Discount
	--	ELSE DiscountAmount 
	--	END AS DiscountAmount
	,IIF(UnitPrice = 0, 0, DiscountAmount) AS DiscountAmount
	--,NULL AS DiscountPercent
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	,TotalMiscChrg
	--,NULL AS VATAmount
	,'NOK' AS Currency
	,CONVERT(decimal (18,4), 1) AS ExchangeRate
	,CreditMemo
	--,'' AS [SalesChannel]
	,m.CostUnitGroup AS [Department]
	,CASE WHEN WarehouseCode = '' OR WarehouseCode is NULL THEN 'Other' ELSE WarehouseCode END AS WarehouseCode
	--,NULL AS DeliveryAddress
	,LEFT(m.CostUnitName, 50) AS CostBearerNum 
	,[Site] AS CostUnitNum
	--,'' AS ReturnComment
	--,'' AS ReturnNum
	--,'' AS ProjectNum
	,IndexKey
	,LineFlag AS SIRes1
	--,'' AS SIRes2 
	--,'' AS SIRes3 -- added 20201220 to solve NO sites issue

FROM stage.CER_NO_SOLine SO
	LEFT JOIN [stage].[CER_NO_mapSite] m ON SO.Site = m.CostUnitNum
WHERE InvoiceNum IS NOT NULL --LineFlag = 'Main'
--GROUP BY PartitionKey, Company, CustNum, OrderNum, OrderLine, OrderSubLine, OrderRel, UnitPrice, UnitCost, DiscountAmount, PartNum, SalesPerson, WarehouseCode, LineFlag,OrderType, InvoiceNum, InvoiceLine, InvoiceDate, ActualDeliveryDate, SellingShipQty, TotalMiscChrg, CreditMemo, Indexkey, Kit_UnitPrice, Kit_Discount, [Site]
GO
PRINT N'Creating [dm_LS].[fctSalesLedger]'
GO

CREATE VIEW [dm_LS].[fctSalesLedger] AS 

SELECT 
 sl.[SalesLedgerID]
,sl.[SalesPersonNameID]
,sl.[Company]
,sl.[CustomerNum]
,sl.[SalesInvoiceNum]
,sl.[SalesInvoiceDate]
,sl.[SalesDueDate]
,sl.[SalesLastPaymentDate]
,sl.[InvoiceAmount]
,sl.[RemainingInvoiceAmount]
,sl.[ExchangeRate]
,sl.[Currency]
,sl.[VATAmount]
,sl.[VATCode]
,sl.[PayToName]
,sl.[PayToCity]
,sl.[PayToContact]
,sl.[PaymentTerms]
,sl.[SLRes1]
,sl.[SLRes2]
,sl.[SLRes3]
,sl.[SalesLedgerCode]
,sl.[CompanyID]
,sl.[PartitionKey]
,sl.[PaidInvoiceAmount]
,sl.[AccountingDate]
,sl.[AgingPeriod]
,sl.[AgingSort]
,sl.[VATCodeDesc]
,sl.[CustomerID]
,sl.[LinkToOriginalInvoice]
,sl.[SalesInvoiceDateID]
,sl.[PaymentStatus]
,sl.[WarehouseID]
FROM [dm].[FactSalesLedger] sl
LEFT JOIN dbo.Company com ON sl.Company = com.Company
WHERE com.BusinessArea = 'Lifting Solutions' AND com.[Status] = 'Active'

  --WHERE Company  IN ('AFISCM', 'CDKCERT', 'CEECERT', 'CFICERT', 'CLTCERT', 'CLVCERT', 'CSECERT', 'CUKCERT', 'CNOEHAU', 'CNOCERT', 'CERPL', 'CyESA', 'HFIHAKL', 'TRACLEV'
		--,'MENBE14','MENNL01','MENNL02','MENNL03','MENNL04','MENNL07','MENNL11')
GO
PRINT N'Creating [stage].[JEN_SE_SupplierAgreement]'
GO
CREATE TABLE [stage].[JEN_SE_SupplierAgreement]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[AgreementCode] [nvarchar] (50) NULL,
[AgreementDescription] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DelivTime] [nvarchar] (10) NULL,
[Currency] [nvarchar] (10) NULL,
[AgreementStart] [date] NULL,
[AgreementEnd] [date] NULL
)
GO
PRINT N'Creating [stage].[vJEN_SE_SupplierAgreement]'
GO
CREATE VIEW [stage].[vJEN_SE_SupplierAgreement] AS 
--COMMENT EMPTY FIELDS
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]), '#', TRIM(AgreementCode), '#', TRIM([PartNum]), '#', TRIM([SupplierNum]), '#', TRIM([Currency]))))) AS SupplierAgreementID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum))))) AS SupplierID  
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(SupplierNum))))) AS SupplierID  
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Currency])))) AS CurrencyID --Redundant?
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,AgreementCode
	,AgreementDescription
	,[DiscountPercent]
	,MAX([UnitPrice]) AS [UnitPrice]
	--,0 AS AgreementQty
	,UPPER(TRIM([Currency])) AS Currency
	,MAX([DelivTime]) AS [DelivTime]
	,MAX(AgreementStart) AS AgreementStart
	,AgreementEnd
	--,'' AS [SupplierTerms]
	--,0	AS FulfilledQty
	--,0  AS RemainingQty
	--,''	AS UoM
	--,'' AS  SARes1
	--,'' AS  SARes2
	--,'' AS  SARes3
FROM 
	[stage].[JEN_SE_SupplierAgreement]

GROUP BY [PartitionKey], [Company], AgreementCode, AgreementDescription, PartNum, SupplierNum, [DiscountPercent],  [Currency],  AgreementEnd
--WHERE 
--	RecordType = 'D'
GO
PRINT N'Creating [dm_ALL].[dimSupplier]'
GO
CREATE VIEW [dm_ALL].[dimSupplier] AS 

SELECT 
 [SupplierID]
,[CompanyID]
,[Company]
,[SupplierNum]
,[MainSupplierName]
,[SupplierName]
,[Supplier]
,[TelephoneNum]
,[Email]
,[ZipCode]
,[City]
,[District]
,[CountryCode]
,[CountryName]
,[Region]
,[SupplierCategory]
,[SupplierResponsible]
,[AddressLine]
,[FullAddressLine]
,[AccountNum]
,[OrganizationNum]
,[VATNum]
,[InternalExternal]
,[CodeOfConduct]
,[CustomerNum]
,[SupplierScore]
,[MinOrderQty]
,[MinOrderValue]
,[Website]
,[Comments]
,[IsMaterialSupplier]
,[DUNS]
,[DUNS_MatchScore]
,[is_inferred]
,[is_deleted]
,[is_validCountryCode]
,[DUNS_Status]
FROM [dm].[DimSupplier]
GO
PRINT N'Creating [stage].[AXL_DC_SalesLedger]'
GO
CREATE TABLE [stage].[AXL_DC_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceAmount] [decimal] (18, 4) NULL,
[RemainAmount] [decimal] (18, 4) NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vAXL_DC_SalesLedger]'
GO
CREATE VIEW [stage].[vAXL_DC_SalesLedger] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(sl.Company, '#', TRIM(sl.CustNum), '#', TRIM(sl.InvoiceNum))))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(sl.Company))) AS CompanyID
	,UPPER(CONCAT(sl.Company, '#', TRIM(sl.CustNum), '#', TRIM(sl.InvoiceNum))) AS SalesLedgerCode
	,sl.PartitionKey

	,UPPER(sl.Company) AS Company
	,UPPER(TRIM(sl.CustNum)) AS CustomerNum
	,TRIM(sl.InvoiceNum) AS [SalesInvoiceNum]
	,IIF(so.InvoiceDate = '' OR so.InvoiceDate IS NULL, '1900-01-01', so.InvoiceDate) AS [SalesInvoiceDate] --
	,CONVERT(date, DueDate) AS SalesDueDate
	,CONVERT(date, LastPaymentDate) AS LastPaymentDate
	,[InvoiceAmount]
	,[RemainAmount] AS [RemainingInvoiceAmount]
	,NULL AS CashDiscOffered
	,NULL AS CashDiscUsed
	,NULL AS [ExchangeRate]
	,NULL AS [Currency]
	,NULL AS [VATAmount]
	,NULL AS [VATCode]
	,NULL AS [PayToName]
	,NULL AS [PayToCity]
	,NULL AS [PayToContact]
	,NULL AS [PaymentTerms]
	,sl.Res1 AS SLRes1
	,sl.Res2 AS SLRes2
	,sl.Res3 AS SLRes3
FROM stage.AXL_DC_SalesLedger sl
	LEFT JOIN stage.AXL_CZ_SOLine so ON TRIM(sl.InvoiceNum) = TRIM(so.InvoiceNum)
WHERE DueDate > '2015-01-01'
GROUP BY
	sl.PartitionKey, sl.Company, sl.CustNum, sl.InvoiceNum, sl.Res2, sl.Res1, sl.Res3, sl.[InvoiceAmount], sl.[RemainAmount], so.InvoiceDate, DueDate, LastPaymentDate
GO
PRINT N'Creating [stage].[SKS_FI_Part]'
GO
CREATE TABLE [stage].[SKS_FI_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[MANDT] [nvarchar] (3) NOT NULL,
[VKORG] [nvarchar] (4) NOT NULL,
[COMPANY] [nvarchar] (8) NOT NULL,
[PARTNUM] [nvarchar] (50) NOT NULL,
[PARTDESCRIPTION] [nvarchar] (max) NULL,
[PARTDESCRIPTION2] [nvarchar] (max) NULL,
[PRODUCTGROUP] [nvarchar] (100) NULL,
[PRODUCTGROUP2] [nvarchar] (100) NULL,
[PRODUCTGROUP4] [nvarchar] (100) NULL,
[COMMODITYCODE] [nvarchar] (50) NULL,
[COUNTRYOFORIGIN] [nvarchar] (50) NULL,
[NETWEIGHT] [decimal] (18, 4) NULL,
[SUPPLIERCODE] [nvarchar] (50) NULL,
[REORDERLEVEL] [decimal] (18, 4) NULL,
[WAREHOUSECODE] [nvarchar] (50) NULL,
[MEINS] [nvarchar] (3) NULL,
[PRODUCTGROUPTXT] [nvarchar] (50) NULL,
[PRODUCTGROUP2TXT] [nvarchar] (50) NULL,
[PARTNAME] [nvarchar] (50) NULL,
[PRODUCTGROUP3] [nvarchar] (50) NULL,
[BRAND] [nvarchar] (50) NULL,
[MODEL] [nvarchar] (50) NULL,
[VOLUME] [nvarchar] (50) NULL,
[MATERIAL] [nvarchar] (50) NULL,
[SUPPLIERNAME] [nvarchar] (200) NULL,
[SUPPLIERPRICE] [decimal] (18, 4) NULL,
[STARTDATE] [nvarchar] (8) NULL,
[ENDDATE] [nvarchar] (8) NULL,
[MATKL] [nvarchar] (20) NULL,
[PARTSTATUS] [nvarchar] (100) NULL,
[PRCTR] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vSKS_FI_Part]'
GO





CREATE VIEW [stage].[vSKS_FI_Part] AS
--COMMENT EMPTY FIELDS // ADD UPPER()TRIM() INTO PartID
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([COMPANY]),'#',TRIM([PARTNUM]),'#',TRIM([VKORG]))))) AS PartID
	--CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([COMPANY],'#',[PARTNUM],'#',[VKORG]))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',[Company])) AS CompanyID
	,CONCAT([Company],'#',RIGHT([PARTNUM], 7)) AS PartCode
	,PartitionKey

	,CASE WHEN COMPANY = 'SKSSWE' THEN 'JSESKSSW' ELSE COMPANY END AS Company 
	,IIF(ISNUMERIC([PARTNUM]) = 1,CAST(CAST(trim([PARTNUM]) AS int)as nvarchar(50)),(trim([PARTNUM]))) AS [PartNum]
	,[PARTNAME] AS [PartName]
	,[PARTDESCRIPTION] AS [PartDescription]
	,[PARTDESCRIPTION2] AS [PartDescription2]
	--,'' AS [PartDescription3]
	,NULLIF(SUPPLIERCODE,'') AS MainSupplier
	,CASE
		WHEN NULLIF(NULLIF(SUPPLIERCODE,'') ,NULL) IS NULL THEN NULL
		ELSE CONCAT(SUPPLIERCODE, ' - ',SUPPLIERNAME)
		END AS AlternativeSupplier
	--,CONCAT(SUPPLIERCODE, ' - ',SUPPLIERNAME) AS AlternativeSupplier
	,CONCAT([PRODUCTGROUP] + ' - ', [PRODUCTGROUPTXT]) AS [ProductGroup]
	,CONCAT([PRODUCTGROUP2] + ' - ', [PRODUCTGROUP2TXT]) AS [ProductGroup2]
	,[PRODUCTGROUP] AS [ProductGroup3]  
	,[ProductGroup4] -- PRODUCTGROUP4 added by FN 20210416; --106 665 of 177 270 records have a value in PRODUCTGROUP4 (ABC Indicator).
	--,'' AS [Brand] 
	,[COMMODITYCODE] AS [CommodityCode]
	--,'' AS PartReplacementNum
	,PartStatus
	,[COUNTRYOFORIGIN] AS [CountryOfOrigin]
	,[NETWEIGHT] AS [NetWeight]
	--,'' AS UoM
	--,[VOLUME] AS [Volume]
	,CASE WHEN MATKL = 'ZCONS' THEN 'Consumables'
		WHEN MATKL = 'ZDIEN' THEN 'Service'
		WHEN MATKL = 'ZDIEN_FRE' THEN 'Freight'
		WHEN MATKL = 'ZFERT' THEN 'Finished materials'
		WHEN MATKL = 'ZHALB' THEN 'Semifinished matr.'
		WHEN MATKL = 'ZHAWA' THEN 'Trading goods'
		WHEN MATKL = 'ZROH' THEN 'Raw materials'
		WHEN MATKL = 'ZVERP' THEN 'Packaging material'
		WHEN MATKL = 'ZZMAT' THEN 'SKS Config. material'
		END AS [Material] -- this Material is not ment from the beginning for such as Plast, Metal etc; But rather now for Matreial Group in SKS, such as artichle for Consumables, Service, 'Trading goods' etc in DimPart 20210106
	--,'' AS Barcode
	,[REORDERLEVEL] AS [ReOrderLevel]
	,[PRCTR] AS PartResponsible
	,CASE WHEN trim([STARTDATE]) = '00000000' THEN CAST('19010101' AS date) ELSE CAST(trim([STARTDATE]) AS date) END AS [StartDate] --[STARTDATE] AS [StartDate]
	,CASE WHEN trim([ENDDATE]) = '00000000' THEN CAST('19010101' AS date) ELSE CAST(trim([ENDDATE]) AS date) END AS [EndDate] --[ENDDATE] AS [EndDate]
FROM 
	[stage].[SKS_FI_Part]
	--the filter about company is because in the same ERP is sending 3 records about another company. 2023-03-10 (other solution would be put this clause in the deltaloadstatemnt)
WHERE  [VKORG] NOT IN ('FI00','SE10') and Company != 'FI10'

/*
CASE WHEN MATKL = 'ZCONS' THEN 'Consumables'
		WHEN MATKL = 'ZDIEN' THEN 'Service'
		WHEN MATKL = 'ZDIEN_FRE' THEN 'Freight'
		WHEN MATKL = 'ZFERT' THEN 'Finished materials'
		WHEN MATKL = 'ZHALB' THEN 'Semifinished matr.'
		WHEN MATKL = 'ZHAWA' THEN 'Trading goods'
		WHEN MATKL = 'ZROH' THEN 'Raw materials'
		WHEN MATKL = 'ZVERP' THEN 'Packaging material'
		WHEN MATKL = 'ZZMAT' THEN 'SKS Config. material'
		END AS [Material]	-- Items type, such as Packaging material, Trading goods ...
*/
GO
PRINT N'Creating [stage].[ACO_UK_Customer]'
GO
CREATE TABLE [stage].[ACO_UK_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[MainCustomerName] [nvarchar] (100) NULL,
[CustomerName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[AddressLine3] [nvarchar] (100) NULL,
[TelephoneNumber1] [nvarchar] (50) NULL,
[PHONE2] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[CITY] [nvarchar] (50) NULL,
[STATE] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[Email] [nvarchar] (500) NULL,
[CCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (100) NULL,
[Division] [nvarchar] (50) NULL,
[CustomerIndustry] [nvarchar] (50) NULL,
[CustomerSubIndustry] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[SalesPersonResponsible] [nvarchar] (100) NULL,
[VATRegNo] [nvarchar] (50) NULL,
[AccountString] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[CustomerType] [nvarchar] (50) NULL,
[CustomerABC] [nvarchar] (50) NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vACO_UK_Customer]'
GO

CREATE VIEW [stage].[vACO_UK_Customer] AS
-- ADD UPPER()/ TRIM(COMPANY) INTO CustomerID 12-13-2022 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) as CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',Company)) AS CompanyID
	,CONCAT(Company,'#',TRIM([CustomerNum])) AS CustomerCode
	,PartitionKey

	,Company
	,TRIM(CustomerNum) AS [CustomerNum]
	,MainCustomerName
    ,dbo.ProperCase(CustomerName) AS CustomerName
	,LEFT([AddressLine1], 50) AS [AddressLine1]
	,LEFT([AddressLine2], 50) AS [AddressLine2]
	,LEFT([AddressLine3], 50) AS [AddressLine3]
	,[TelephoneNumber1]	AS [TelephoneNum1]
	,[PHONE2] AS [TelephoneNum2]
	,[Email]
	,[ZipCode]
	,CASE WHEN [City] = ' '	AND LEFT(AddressLine3, 1) IN ('1','2','3','4','5','6','7','8','9') THEN trim(substring(replace((AddressLine3),' ',		''), 6, 100)) ELSE ([City]) end AS [City]
	,IIF([State]= ' ',null,[State]) AS [State]
	,[District]	AS SalesDistrict
	--,CCode AS [CountryCode]
	,CASE 
		WHEN LEN(TRIM(CCode)) = 3 THEN (SELECT [Alpha-2 code] FROM DBO.CountryCodes WHERE [Alpha-3 code] = TRIM(dbo.ProperCase(CountryName)))
		ELSE NULLIF(TRIM(CCode),'')
	END as CountryCode
	,dbo.ProperCase(trim(CountryName)) AS [CountryName]
	,Division
	,CustomerIndustry
	,CustomerSubIndustry
	,[AddressLine1] AS [AddressLine]
	,CONCAT(trim(dbo.ProperCase(Countryname)), + ', ' + trim([City]), + ', ' + TRIM([ZipCode]), + ', ' + trim(addressline1)) AS [FullAddressLine]
	,LEFT([CustomerGroup], charindex(' ', [CustomerGroup])-1)	AS [CustomerGroup]
	,dbo.ProperCase(CustomerGroup) AS [CustomerSubGroup]
	,[SalesRepCode]	AS SalesPersonCode
	,dbo.ProperCase(SalesPersonName) AS [SalesPersonName]
	,[SalesPersonResponsible]
	,[VATRegNo] AS [VATNum]
	--,'' AS OrganizationNum
	,[AccountString]	AS AccountNum
	,[InternalExternal]
	,[CustomerType]
	,[CustomerABC]		AS CustomerScore
	,GETDATE() AS [ValidFrom]
	,DATEADD(year,1,GETDATE()) AS [ValidTo]


FROM [stage].[ACO_UK_Customer]
GO
PRINT N'Creating [stage].[JEN_SK_PurchaseInvoice]'
GO
CREATE TABLE [stage].[JEN_SK_PurchaseInvoice]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[LineType] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaserName] [nvarchar] (100) NULL,
[OrderType] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[InvoiceType] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[PurchaseInvoiceQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CreditMemo] [nvarchar] (1) NULL,
[WarehouseCode] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vJEN_SK_PurchaseInvoice]'
GO
CREATE VIEW [stage].[vJEN_SK_PurchaseInvoice] AS
--COMMENT empty fields // ADD TRIM()INTO PartID,WarehouseID 2022-12-13 VA
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(OrderType), '#', TRIM(InvoiceNum), '#', TRIM(InvoiceType), '#', TRIM(WarehouseCode))))) AS PurchaseInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(PurchaseOrderSubLine))))) AS PurchaseOrderID
	,UPPER(CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine))) AS PurchaseOrderCode
	,UPPER(CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(InvoiceNum))) AS PurchaseInvoiceCode --Redundant?
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM(Company))) AS CompanyID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierCode))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierCode))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM([PartNum]))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(InvoiceNum))))) AS PurchaseLedgerID
	,CONVERT(int, replace(InvoiceDate, '-', '')) AS PurchaseInvoiceDateID --Redundant?
	,PartitionKey

	,TRIM(UPPER(Company)) AS Company
	,TRIM(PurchaseOrderNum) AS PurchaseOrderNum
	,TRIM(PurchaseOrderLine) AS PurchaseOrderLine
	,TRIM(PurchaseOrderSubLine) AS PurchaseOrderSubLine
	,(TRIM(OrderType)) AS PurchaseOrderType --MIN
	,TRIM(InvoiceNum) AS PurchaseInvoiceNum
	,InvoiceLine AS PurchaseInvoiceLine
	,InvoiceType AS PurchaseInvoiceType
	,InvoiceDate AS PurchaseInvoiceDate
	,MAX(ActualDeliveryDate) AS ActualDelivDate
	,TRIM(UPPER(SupplierCode)) AS SupplierNum
	,TRIM(UPPER([PartNum])) AS PartNum
	,SUM(PurchaseInvoiceQty) AS PurchaseInvoiceQty --MAX(PurchaseShipQty)
	--,'' AS UoM
	,AVG(UnitPrice) AS UnitPrice
	--,0 AS DiscountPercent
	,SUM(DiscountAmount) AS DiscountAmount
	,SUM(TotalMiscChrg) AS TotalMiscChrg
	--,0 AS VATAmount
	,AVG(ExchangeRate) AS ExchangeRate
	,CurrencyCode AS Currency
	,TRIM(CreditMemo) AS CreditMemo
	,TRIM(PurchaserName) AS PurchaserName
	,TRIM(WarehouseCode) AS WarehouseCode
	--,'' AS PurchaseChannel
	--,'' AS Comment
	--,'' AS PIRes1
	--,'' AS PIRes2
	--,'' AS PIRes3
	,LineType
	--,'' AS OrderDelivLineNum --
FROM stage.JEN_SK_PurchaseInvoice

GROUP BY
	PartitionKey, Company, PurchaseOrderNum, InvoiceNum, SupplierCode, PartNum, PurchaserName, InvoiceLine, InvoiceType, InvoiceDate, CreditMemo, WarehouseCode, CurrencyCode, LineType, PurchaseOrderLine , PurchaseOrderSubLine, OrderType
GO
PRINT N'Creating [stage].[OCS_SE_ProductionOrder]'
GO
CREATE TABLE [stage].[OCS_SE_ProductionOrder]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[ProductionOrderNum] [nvarchar] (50) NOT NULL,
[ProductionOrderLineNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[UoM] [nvarchar] (50) NULL,
[PartType] [nvarchar] (50) NULL,
[OrderQuantity] [nvarchar] (50) NULL,
[CompletedQuantity] [nvarchar] (50) NULL,
[RemainingQty] [nvarchar] (50) NULL,
[Status] [nvarchar] (50) NULL,
[MaterialCost] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[BinNum] [nvarchar] (50) NULL,
[CostUnitNum] [nvarchar] (50) NULL,
[SalesOrderNum] [nvarchar] (50) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[ProductionOrderCreaterName] [nvarchar] (50) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL,
[OrderCreateDate] [nvarchar] (50) NULL,
[RequestedEndDate] [nvarchar] (50) NULL,
[TotalHoursPlanned] [nvarchar] (50) NULL,
[TotalHoursSpent] [nvarchar] (50) NULL,
[LabourCost] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vOCS_SE_ProductionOrder]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vOCS_SE_ProductionOrder]
	AS SELECT
    	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(ProductionOrderNum), '#', TRIM(ProductionOrderLineNum), '#',TRIM(PartNum)))))  as [ProductionOrderID]
      ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) as CustomerID
	  ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) as CompanyID
	  ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID 
	  ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	  ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SalesOrderNum))))) AS SalesOrderNumID  
	  ,[PartitionKey]                                  
      ,UPPER(TRIM([Company]))  AS     "Company"                                  
      ,UPPER(TRIM([ProductionOrderNum])) AS    "ProductionOrderNum"                    
      ,UPPER(TRIM([ProductionOrderLineNum]))  AS  "ProductionOrderLineNum"                 
      ,UPPER(TRIM([PartNum])) AS   "PartNum"                                 
      ,[Uom]                                        
      ,[PartType]
      ,CONVERT(decimal(18,4), Replace([OrderQuantity], ',', '.')) AS "OrderQuantity"
      --,CONVERT(decimal(18,4), Replace([ScrappedQty Assembled Item], ',', '.')) AS "ScrappedQty"
      ,CONVERT(decimal(18,4), Replace([CompletedQuantity], ',', '.')) AS "CompletedQuantity"
      ,CONVERT(decimal(18,4), Replace([RemainingQty], ',', '.')) AS "RemainingQty"                           
      ,[Status] 
      ,CASE WHEN [OrderCreateDate] = '' OR [OrderCreateDate] is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, [OrderCreateDate]) END AS "OrderCreateDate"
      ,CASE WHEN RequestedEndDate = '' OR RequestedEndDate is NULL or RequestedEndDate = '1201-06-28' or  RequestedEndDate = '0' THEN CONVERT(date,'1900-01-01')  ELSE CONVERT(date, RequestedEndDate) END AS "RequestedEndDate"
      --,CASE WHEN [StartDate] = '' OR [StartDate] is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, [StartDate]) END AS "StartDate"
      --,CASE WHEN [EndDate] = '' OR [EndDate] is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, [EndDate]) END AS "EndDate"                                
      --,[OrderType]                                  
      ,UPPER(TRIM([WarehouseCode]))   AS "WarehouseCode"                               
      ,UPPER(TRIM([SalesOrderNum])) AS "SalesOrderNum"                              
      ,UPPER(TRIM([CustomerNum]))  AS  "CustomerNum"                          
      ,[ProductionOrderCreaterName]  AS   "ProductionOrderCreaterName"
      --,[CurrentResourceGroup]
      ,[Currency]
      ,[BinNum]
      ,[CostUnitNum]
      ,[ExchangeRate]
      ,[MaterialCost]
      ,cast(TotalHoursPlanned	 as decimal(18,4))	as 		TotalHoursPlanned		
      ,cast(TotalHoursSpent as decimal(18,4)) as TotalHoursSpent
      ,cast(LabourCost as decimal(18,4))as LabourCost


      ,CASE WHEN CreatedTimeStamp = '' OR CreatedTimeStamp is NULL THEN CONVERT(datetime,'1900-01-01') ELSE CONVERT(datetime, left(CreatedTimeStamp,19 )) END AS CreatedTimeStamp
      ,CASE WHEN [ModifiedTimeStamp] = '' OR [ModifiedTimeStamp] is NULL THEN CONVERT(datetime,'1900-01-01') ELSE CONVERT(datetime, left(ModifiedTimeStamp,19 )) END AS ModifiedTimeStamp
	
	 FROM [stage].[OCS_SE_ProductionOrder]
GO
PRINT N'Creating [dm_LS].[fctPurchaseOrder]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE VIEW [dm_LS].[fctPurchaseOrder] AS

SELECT 

 po.[PurchaseOrderID]
,po.[PurchaseOrderNumID]
,po.[PurchaseInvoiceID]
,po.[CompanyID]
,po.[SupplierID]
,po.[CustomerID]
,po.[PartID]
,po.[WarehouseID]
,po.[CurrencyID]
,po.[PurchaseOrderDateID]
,po.[PurchaseInvoiceDateID]
,po.[Company]
,po.[PurchaseOrderNum]
,po.[PurchaseOrderLine]
,po.[PurchaseOrderSubLine]
,po.[PurchaseOrderType]
,po.[PurchaseOrderDate]
,po.[PurchaseOrderStatus]
,po.[OrgReqDelivDate]
,po.[CommittedDelivDate]
,po.[CommittedShipDate]
,po.[ActualDelivDate]
,po.[ReqDelivDate]
,po.[PurchaseInvoiceNum]
,po.[PartNum]
,po.[SupplierNum]
,po.[SupplierPartNum]
,po.[SupplierInvoiceNum]
,po.[DelivCustomerNum]
,po.[PartStatus]
,po.[OrderQty]
,po.[ReceiveQty]
,po.[InvoiceQty]
,po.[MinOrderQty]
,po.[UoM]
,po.[UnitPrice]
,po.[DiscountPercent]
,po.[DiscountAmount]
,po.[ExchangeRate]
,po.[Currency]
,po.[PurchaserName]
,po.[WarehouseCode]
,po.[ReceivingNum]
,po.[DelivTime]
,po.[PurchaseChannel]
,po.[Documents]
,po.[Comments]
,po.[PORes1]
,po.[PORes2]
,po.[PORes3]
,po.[InvoiceStatus]
,po.[DaysSinceOrder]
,po.[OrgCommittedDelivDate]
,po.[IsOrderClosed]

FROM [dm].[FactPurchaseOrder] po
LEFT JOIN dbo.Company com ON po.Company = com.Company
WHERE com.BusinessArea = 'Lifting Solutions' AND com.[Status] = 'Active'
--WHERE Company  in ('AFISCM', 'CDKCERT', 'CEECERT', 'CFICERT', 'CLTCERT', 'CLVCERT', 'CSECERT', 'CUKCERT', 'CNOEHAU', 'CNOCERT', 'CERPL', 'CyESA', 'HFIHAKL', 'TRACLEV')  -- LS basket
GO
PRINT N'Creating [stage].[WID_FI_SupplierAgreement]'
GO
CREATE TABLE [stage].[WID_FI_SupplierAgreement]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[AgreementCode] [nvarchar] (50) NULL,
[AgreementDescription] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DelivTime] [nvarchar] (10) NULL,
[Currency] [nvarchar] (10) NULL,
[AgreementStart] [date] NULL,
[AgreementEnd] [date] NULL
)
GO
PRINT N'Creating [stage].[vWID_FI_SupplierAgreement]'
GO
CREATE VIEW [stage].[vWID_FI_SupplierAgreement] AS 
--COMMENT EMPTY FIELDS
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]), '#', TRIM(AgreementCode), '#', TRIM([PartNum]), '#', TRIM([SupplierNum]), '#', TRIM([Currency]))))) AS SupplierAgreementID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum))))) AS SupplierID 
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(SupplierNum))))) AS SupplierID  
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Currency])))) AS CurrencyID --Redundant?
	,[PartitionKey]

	,([Company]) AS Company --UPPER
	,(TRIM(SupplierNum)) AS SupplierNum
	,(TRIM(PartNum)) AS PartNum
	,AgreementCode
	,AgreementDescription
	,[DiscountPercent]
	,([UnitPrice]) AS [UnitPrice] --MAX
	--,NULL AS AgreementQty
	,(TRIM([Currency])) AS Currency
	,([DelivTime]) AS [DelivTime] --MAX
	,(AgreementStart) AS AgreementStart
	,AgreementEnd
	--,'' AS [SupplierTerms]
	--,0	AS FulfilledQty
	--,0  AS RemainingQty
	--,''	AS UoM
	--,'' AS  SARes1
	--,'' AS  SARes2
	--,'' AS  SARes3
FROM 
	[stage].[WID_FI_SupplierAgreement]
--WHERE  UnitPrice <> 0
GROUP BY [PartitionKey], [Company], AgreementCode, AgreementDescription, TRIM(PartNum), TRIM(SupplierNum), [DiscountPercent],  TRIM([Currency]),  AgreementEnd, [UnitPrice], [DelivTime], AgreementStart

--	RecordType = 'D'
GO
PRINT N'Creating [dm_ALL].[fctSalesInvoice]'
GO
CREATE VIEW [dm_ALL].[fctSalesInvoice] AS

SELECT 
[SalesInvoiceID]
,[SalesOrderID]
,[SalesOrderNumID]
,[CustomerID]
,[CompanyID]
,[PartID]
,[WarehouseID]
,[SalesPersonNameID]
,[DepartmentID]
,[Company]
,[SalesInvoiceCode]
,[SalesInvoiceDateID]
,[ProjectID]
,[SalesPersonName]
,[CustomerNum]
,[PartNum]
,[PartType]
,[SalesOrderNum]
,[SalesOrderLine]
,[SalesOrderSubLine]
,[SalesOrderType]
,[SalesInvoiceNum]
,[SalesInvoiceLine]
,[SalesInvoiceType]
,[SalesInvoiceDate]
,[ActualDelivDate]
,[SalesInvoiceQty]
,[UoM]
,[UnitPrice]
,[UnitCost]
,[DiscountPercent]
,[DiscountAmount]
,[TotalMiscChrg]
,[Currency]
,[ExchangeRate]
,[VATAmount]
,[CreditMemo]
,[Department]
,[ProjectNum]
,[WarehouseCode]
,[CostBearerNum]
,[CostUnitNum]
,[ReturnComment]
,[ReturnNum]
,[OrderHandler]
,[SalesChannel]
,[NeedbyDate]
,[ExpDelivDate]
,[SalesOrderCode]
,[SalesOrderDateID]
,[SalesOrderDate]
,[ConfirmedDelivDate]
,[PartStatus]
,[AxInterSalesChannel]
,[DueDate]
,[LastPaymentDate]
,[SalesInvoiceStatus]
,[CashDiscountOffered]
,[CashDiscountUsed]
,[IsUpdatingStock]
,[SIRes1]
,[SIRes2]
,[SIRes3]
,[SIRes4]
,[SIRes5]
,[SIRes6]
FROM dm.FactSalesInvoice
GO
PRINT N'Creating [stage].[OCS_SE_Warehouse]'
GO
CREATE TABLE [stage].[OCS_SE_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseID] [nvarchar] (50) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL,
[WarehouseDistrict] [nvarchar] (50) NULL,
[WarehouseAddress] [nvarchar] (100) NULL,
[WarehouseDescription] [nvarchar] (100) NULL,
[WarehouseType] [nvarchar] (50) NULL,
[WarehouseCountry] [nvarchar] (50) NULL,
[Site] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vOCS_SE_Warehouse]'
GO

CREATE VIEW [stage].[vOCS_SE_Warehouse] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseID]))))) AS WarehouseID
	,PartitionKey

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([WarehouseID])) AS [WarehouseCode]
	,[WarehouseName]
	,[WarehouseDistrict]
	,[WarehouseAddress]
	,[WarehouseDescription]
	,[WarehouseType]
	,[WarehouseCountry]
	,[Site] AS [WarehouseSite]
FROM [stage].[OCS_SE_Warehouse]

GROUP BY 
	PartitionKey,[Company],[WarehouseID],[WarehouseName],[WarehouseDistrict],[WarehouseAddress],[WarehouseDescription],[WarehouseType],[WarehouseCountry],[Site]
GO
PRINT N'Creating [stage].[CER_FI_SalesLedger]'
GO
CREATE TABLE [stage].[CER_FI_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (10) NULL,
[InvoiceNum] [nvarchar] (25) NULL,
[InvoiceDate] [datetime] NULL,
[DueDate] [datetime] NULL,
[LastPaymentDate] [datetime] NULL,
[InvoiceAmountOC] [decimal] (18, 8) NULL,
[PaidAmountOC] [decimal] (18, 8) NULL,
[OpenAmountOC] [decimal] (18, 8) NULL,
[ExchangeRate] [decimal] (18, 8) NULL,
[Currency] [nvarchar] (10) NULL,
[VATAmount] [decimal] (18, 8) NULL,
[VATCode] [nvarchar] (25) NULL
)
GO
PRINT N'Creating [stage].[vCER_FI_SalesLedger]'
GO


CREATE VIEW [stage].[vCER_FI_SalesLedger] AS
--COMMENT EMPTY FIELD // ADD TRIM() INTO CustomerID 2022-12-20 VA
--SALES LEDGER ID CHANGE 23-02-24 VA
SELECT
--	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum), '#', InvoiceNum)))) AS SalesLedgerID
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum), '#',TRIM(InvoiceNum))))) AS SalesLedgerID,
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(Company)))) AS CompanyID,
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID,
	--CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ))))) AS CustomerID,
	CONCAT(Company,'#',CustNum, '#', InvoiceNum) AS SalesLedgerCode,
	PartitionKey,

	UPPER(TRIM(Company)) AS Company,
	UPPER(TRIM(CustNum)) AS CustomerNum,
	--UPPER(TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum))) AS CustomerNum,
	TRIM(InvoiceNum) AS SalesInvoiceNum,
	InvoiceDate AS SalesInvoiceDate,
	CONVERT(date, DueDate) AS SalesDueDate,
	CONVERT(date, LastPaymentDate) AS SalesLastPaymentDate,
	InvoiceAmountOC AS InvoiceAmount,
	OpenAmountOC AS RemainingInvoiceAmount,
	ExchangeRate,
	Currency,
	VATAmount,
	VATCode,
	--'' AS PayToName,
	--'' AS PayToCity,
	--'' AS PayToContact,
	--'' AS PaymentTerms,
	--'' AS SLRes1,
	--'' AS SLRes2,
	--'' AS SLRes3
	OpenAmountOC AS PaidInvoiceAmount
	,'1900-01-01' AS AccountingDate
	--,'' AS AgingPeriod
	--,'' AS AgingSort
	--,'' AS VATCodeDesc
	--,'' AS LinkToOriginalInvoice
FROM 
	stage.CER_FI_SalesLedger
GO
PRINT N'Creating [stage].[CER_DK_Customer]'
GO
CREATE TABLE [stage].[CER_DK_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[CustomerName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (50) NULL,
[Email] [nvarchar] (100) NULL,
[CustomerABC] [nvarchar] (50) NULL,
[City] [nvarchar] (50) NULL,
[ZIP] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[Division] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNr] [nvarchar] (20) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (2) NULL,
[SalesPersonName] [nvarchar] (30) NULL,
[CountryCode] [nvarchar] (10) NULL,
[CustomerPriceGroup] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_DK_Customer]'
GO

CREATE VIEW [stage].[vCER_DK_Customer] AS
--COMMENT EMPTY FIELDS 2022-12-14 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',[Company])) AS CompanyID
	,CONCAT([Company],'#',TRIM([CustomerNum])) AS CustomerCode
	,PartitionKey

	,Company
    ,TRIM(CustomerNum) AS CustomerNum
	--,'' AS MainCustomerName
    ,[dbo].[ProperCase](CustomerName) AS CustomerName
    ,[AddressLine1]
    ,[AddressLine2]
    ,[AddressLine3]
	,[TelephoneNumber1] AS [TelephoneNum1]
	--,'' AS [TelephoneNum2]
	,[Email]
	,[ZIP] AS ZipCode
    ,IIF([City]= ' ',null,[dbo].[ProperCase]([City])) AS [City]    
    ,IIF([State]= ' ',null,[State]) AS [State]
	,[District] AS SalesDistrict
    ,CASE WHEN CountryName is null THEN 'Denmark' ELSE CountryName END AS CountryName
	,Division
	--,'' AS CustomerIndustry
	--,'' AS CustomerSubIndustry
	,TRIM(CONCAT([dbo].[ProperCase](AddressLine1),' ',[dbo].[ProperCase](AddressLine2))) AS AddressLine
	,CONCAT(TRIM(CountryName), + ', ' + TRIM(City), + ', ' + TRIM(Zip),  + ', ' + TRIM([AddressLine1])) AS FullAddressLine
    ,[dbo].[ProperCase](CustomerGroup) AS CustomerGroup
	,[dbo].[ProperCase](CustomerSubGroup) AS CustomerSubGroup
    ,[SalesRepCode]	AS SalesPersonCode
	,[dbo].[ProperCase](SalesPersonName) AS SalesPersonName
	--,'' AS [SalesPersonResponsible]
    ,TRIM([VATRegNr]) AS [VATNum]
	--,'' AS OrganizationNum
	,[AccountString]	AS AccountNum
	,[InternalExternal]
	,[CustomerABC] AS CustomerScore
	--,'' AS CustomerType
	,[CustomerPriceGroup] as CRes1
	,case when len(CountryCode) > 2 then LEFT(CountryCode,2)
	else CountryCode
	end as CountryCode
FROM [stage].[CER_DK_Customer]
GO
PRINT N'Creating [stage].[SVE_SE_OLine]'
GO
CREATE TABLE [stage].[SVE_SE_OLine]
(
[PartitionKey] [nvarchar] (50) NULL,
[Company] [nvarchar] (8) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[SalesOrderNum] [nvarchar] (50) NULL,
[SalesOrderLine] [nvarchar] (50) NULL,
[SalesOrderSubLine] [nvarchar] (max) NULL,
[SalesOrderType] [nvarchar] (max) NULL,
[SalesOrderCategory] [nvarchar] (50) NULL,
[SalesOrderDate] [nvarchar] (50) NULL,
[NeedbyDate] [nvarchar] (50) NULL,
[ExpDelivDate] [nvarchar] (50) NULL,
[ActualDelivDate] [nvarchar] (50) NULL,
[SalesInvoiceNum] [nvarchar] (50) NULL,
[SalesOrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (50) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartType] [nvarchar] (max) NULL,
[PartStatus] [nvarchar] (max) NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (max) NULL,
[Department] [nvarchar] (50) NULL,
[ProjectNum] [nvarchar] (max) NULL,
[IndexKey] [nvarchar] (max) NULL,
[SORes1] [nvarchar] (max) NULL,
[SORes2] [nvarchar] (max) NULL,
[SORes3] [nvarchar] (max) NULL
)
GO
PRINT N'Creating index [IX_SVE_SE_OLine] on [stage].[SVE_SE_OLine]'
GO
CREATE NONCLUSTERED INDEX [IX_SVE_SE_OLine] ON [stage].[SVE_SE_OLine] ([SalesOrderNum])
GO
PRINT N'Creating [stage].[vSVE_SE_OLine]'
GO


CREATE VIEW [stage].[vSVE_SE_OLine] AS
--COMMENT EMPTY FIELDS // ADD TRIM() UPPER() INTO PartID,WarehouseID,CustomerID 23-01-03 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM([SalesOrderNum]), '#', TRIM([SalesOrderLine]), '#', TRIM([SalesOrderCategory])))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(CustomerNum IS NULL OR CustomerNum = '', 'MISSINGCUSTOMER', CustomerNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM([WarehouseCode])))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM([SalesOrderNum])))) AS SalesOrderNumID
	,CONCAT(Company, '#', TRIM(CustomerNum), '#', TRIM(SalesOrderNum), '#', TRIM(SalesOrderLine), '#', TRIM(SalesInvoiceNum)) AS SalesOrderCode
	--CONCAT(Company, '#', TRIM(SalesOrderNum), '#', TRIM(SalesOrderLine), '#', SUBSTRING(TRIM(SalesInvoiceNum), PATINDEX('%[0-9]%', SalesInvoiceNum ), 50)) AS SalesOrderCode --otiginal. why?
	,CONVERT(int, replace(convert(date, [SalesOrderDate]), '-', '')) AS SalesOrderDateID  --redundent?
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM([ProjectNum])))) AS ProjectID
	,PartitionKey

	,TRIM(Company) AS Company
	,TRIM(CustomerNum) AS CustomerNum
	,TRIM([SalesOrderNum]) AS [SalesOrderNum]
	,TRIM([SalesOrderLine]) AS [SalesOrderLine]
	,TRIM([SalesOrderSubLine]) AS [SalesOrderSubLine]
	,[SalesOrderType]
	,TRIM([SalesOrderCategory]) AS [SalesOrderCategory]
	,IIF([SalesOrderDate] = '' OR [SalesOrderDate] IS NULL, '1990-01-01', TRY_CONVERT(date, [SalesOrderDate])) AS [SalesOrderDate]
	,IIF([NeedbyDate] = '' OR [NeedbyDate] IS NULL, '1990-01-01', TRY_CONVERT(date,[NeedbyDate])) AS [NeedbyDate]
	,IIF([ExpDelivDate] = '' OR [ExpDelivDate] IS NULL, '1990-01-01', TRY_CONVERT(date,[ExpDelivDate])) AS [ExpDelivDate]
	,IIF([ExpDelivDate] = '' OR [ExpDelivDate] IS NULL, '1990-01-01', TRY_CONVERT(date,[ExpDelivDate])) AS ConfirmedDelivDate
	,IIF(ActualDelivDate = '' OR ActualDelivDate IS NULL, '1990-01-01', TRY_CONVERT(date,ActualDelivDate)) AS ActualDelivDate
	,TRIM(REPLACE(SalesInvoiceNum, ' ', '')) AS [SalesInvoiceNum]
	,IIF(TRIM([SalesOrderCategory]) = 'K', [DelivQty], [SalesOrderQty]) AS [SalesOrderQty]
	,[DelivQty]
	,CASE WHEN TRIM([SalesOrderCategory]) = 'K' THEN 0
		WHEN TRIM(ProjectNum) = 'A' THEN 0 --service order case A = Avslutade order
--		WHEN [DelivQty] >= [SalesOrderQty] AND TRIM([SalesOrderCategory]) NOT LIKE 'S%' THEN 0 -- Normal order case; 
		WHEN [SalesOrderQty] >= 0 AND [RemainingQty] < 0  THEN 0 -- if budgetQty = [SalesOrderQty] < 0 then Credit; > 0 means not credit and then if [RemainingQty] means levQty exceeds Ordered, then the Remaining is still not negative.
		ELSE [RemainingQty] END AS [RemainingQty]
	--,NULL AS SalesInvoiceQty
	,TRIM([UoM]) AS [UoM]
	,[UnitPrice]
	,[UnitCost]
	,[Currency]
	,[ExchangeRate]
	,IIF([OpenRelease] = 0, 1, 0) AS [OpenRelease] --Sverull Pyramid, 0 = Open; 1 = Closed. We AxInter BI is just opposite
	,[DiscountPercent]
	,(CONVERT(decimal(18,4), UnitPrice)*IIF(TRIM([SalesOrderCategory]) = 'K', [DelivQty], [SalesOrderQty])*CONVERT(decimal(18,4), DiscountPercent)/100) AS [DiscountAmount]
	,TRIM(PartNum) AS PartNum
	,[PartType]
	,[PartStatus]
	,TRIM([SalesPersonName]) AS [SalesPersonName]
	,TRIM([WarehouseCode]) AS [WarehouseCode]
	,[SalesChannel]
	,CASE WHEN [SalesChannel] = 'Webshop' THEN 'Webshop'
		WHEN [SalesOrderType] = 'Kassaförsäljning' THEN 'Over-the-Counter'
		ELSE 'Normal Order Handling' END AS AxInterSalesChannel
	,TRIM([Department]) AS [Department]
	,[ProjectNum] -- for service order: A- avsllutade
	,[IndexKey]
	--,'' AS Cancellation
	,[SORes1]
	,[SORes2]
	,[SORes3]
	--,NULL AS [TotalMiscChrg]
FROM [stage].[SVE_SE_OLine]
WHERE PartNum <> '' AND [SalesOrderQty] IS NOT NULL AND [UnitPrice] IS NOT NULL AND [UnitCost] IS NOT NULL -- AND [DelivQty] IS NOT NULL   --NeedbyDate <> '2016-05' --AND [SalesOrderDate] <> '1990-01-01' --[Company] IS NOT NULL  AND 
GO
PRINT N'Creating [stage].[CER_LV_PurchaseInvoice]'
GO
CREATE TABLE [stage].[CER_LV_PurchaseInvoice]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaseOrderType] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[PurchaseInvoiceLine] [nvarchar] (50) NULL,
[PurchaseInvoiceDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PurchaserName] [nvarchar] (100) NULL,
[PurchaseInvoiceQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_LV_PurchaseInvoice]'
GO
CREATE VIEW [stage].[vCER_LV_PurchaseInvoice] AS
--COMMENT EMPTY FIELDS 2022-12-21 VA
SELECT 
--	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum),'#',TRIM(PurchaseOrderNum),'#',TRIM(PurchaseOrderLine),'#'
--		,TRIM(PurchaseOrderSubLine),'#',TRIM(PurchaseInvoiceNum), '#', PartNum, '#', UnitPrice, '#', DiscountAmount
--		, '#', PurchaseInvoiceQty, '#', ActualDelivDate, '#', TRIM(WarehouseCode))))) AS PurchaseInvoiceID --'#', PurchaseOrderType
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum), '#', TRIM(PartNum), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(PurchaseOrderSubLine), '#', TRIM(PurchaseInvoiceNum), '#', TRIM(PurchaseInvoiceLine), '#', TRIM(WarehouseCode))))) AS PurchaseInvoiceID
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseInvoiceNum), '#', PartNum)) AS PurchaseInvoiceCode
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum))) AS PurchaseOrderNumCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum),'#',TRIM(PurchaseOrderLine),'#',TRIM(PurchaseInvoiceNum))))) AS PurchaseOrderID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum))))) AS SupplierID
    ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT(int, replace(PurchaseInvoiceDate,'-','')) AS PurchaseInvoiceDateID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#', TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum),'#',TRIM(PurchaseOrderNum))))) AS PurchaseLedgerID --
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum),'#',TRIM(PurchaseOrderNum))) AS PurchaseOrderCode
	,PartitionKey

	,UPPER(TRIM(Company)) AS Company
	,UPPER(TRIM(PurchaseOrderNum)) AS PurchaseOrderNum
	,UPPER(TRIM(PurchaseOrderLine)) AS PurchaseOrderLine
	,UPPER(TRIM(PurchaseOrderSubLine)) AS PurchaseOrderSubLine
	,PurchaseOrderType
	,UPPER(TRIM(PurchaseInvoiceNum)) AS PurchaseInvoiceNum
	,UPPER(TRIM(PurchaseInvoiceLine)) AS PurchaseInvoiceLine -- was 'na' added Purchase Order Delivery Line Number  /DZ 20230220
	--,'' AS PurchaseInvoiceType
	,PurchaseInvoiceDate
	,ActualDelivDate
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,PurchaseInvoiceQty
	--,'' AS UoM
	,UnitPrice
	--,0 AS DiscountPercent
	,DiscountAmount
	,TotalMiscChrg
	--,0 AS VATAmount
	,Currency
	,ExchangeRate
	--,'' AS CreditMemo
	,PurchaserName
	,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
	--,'' AS PurchaseChannel
	--,'' AS Comment
	--,'' AS PIRes1
	--,'' AS PIRes2
	--,'' AS PIRes3
	--,'' AS OrderDelivLineNum
FROM stage.CER_LV_PurchaseInvoice

--GROUP BY
--	PartitionKey, Company, PurchaseOrderNum, PurchaseInvoiceNum, PurchaseInvoiceline, SupplierNum, PartNum, PurchaseOrderLine, PurchaseOrderSubLine, PurchaseInvoiceQty, UnitPrice, WarehouseCode, PurchaserName, PurchaseInvoiceDate, ActualDelivDate, TotalMiscChrg, PurchaseOrderType, DiscountAmount, Currency, ExchangeRate 
	
	--, PurchaseOrderType, [Site], OrderDelivLineNum, , DiscountPercent, PurchaserName, PurchaseInvoiceLine, PurchaseInvoiceType, PurchaseInvoiceDate, ActualDelivDate, TotalMiscChrg, CreditMemo,UoM,PurchaseChannel, LastPaymentNum, VATAmount, CreditMemo, PurchaseInvoiceLine, PurchaseInvoiceType, 
GO
PRINT N'Creating [dm_PT].[dimWarehouse]'
GO
CREATE VIEW [dm_PT].[dimWarehouse] AS

SELECT 
 whs.[WareHouseID]
,whs.[CompanyID]
,whs.[Company]
,whs.[WarehouseCode]
,whs.[WarehouseName]
,whs.[WarehouseDistrict]
,whs.[WarehouseAddress]
,whs.[WarehouseDescription]
,whs.[WarehouseType]
,whs.[WarehouseCountry]
,whs.[WarehouseSite]
FROM [dm].[DimWarehouse] whs
LEFT JOIN dbo.Company com ON whs.Company = com.Company
WHERE com.BusinessArea = 'Power Transmission Solutions' AND com.[Status] = 'Active'

--WHERE [Company] in ('ACZARKOV', 'AcornUK', 'BSIBELL', 'JDKJENSS', 'JDKKALTE', 'JFIJENSS', 'MNLMAK', 'JNOJENSS', 'NORNO', 'JSEJENSS', 'SSWSE', 'NomoSE', 'NomoDK', 'NomoFI', 'NomoNo', 'PASSEROT', 'SKSSCOFI', 'SCOFI', 'SMKFI', 'SNLSPRUI', 'SPRUITNL', 'SVESE')  -- The PT basket
GO
PRINT N'Creating [stage].[MIT_UK_Part]'
GO
CREATE TABLE [stage].[MIT_UK_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartDescription] [nvarchar] (100) NULL,
[PartDescription2] [nvarchar] (100) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[ProductGroup2] [nvarchar] (50) NULL,
[CommodityCode] [nvarchar] (50) NULL,
[CountryOfOrigin] [nvarchar] (50) NULL,
[NetWeight] [decimal] (18, 4) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[ReorderLevel] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vMIT_UK_Part]'
GO
CREATE VIEW [stage].[vMIT_UK_Part] AS
--COMMENT EMPTY FIELDS // ADD UPPER() TRIM() INTO PartID 22-12-28 VA
SELECT 
	--CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([PartNum])))) AS PartID
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',[Company])) AS CompanyID
	,CONCAT([Company],'#',TRIM([PartNum])) AS PartCode
	,PartitionKey

	,[Company]
	,TRIM([PartNum]) AS [PartNum] -- different cases are used for PartNum, it affects query results! data-Input quality should be improved!
	--,'' AS [PartName]
	,MAX([PartDescription]) AS [PartDescription]
	,MAX([PartDescription2]) AS [PartDescription2]
	--,'' AS [PartDescription3]
	--,NULL AS MainSupplier
	--,NULL AS AlternativeSupplier
	,MAX([ProductGroup]) AS [ProductGroup]
	--,'' AS [ProductGroup2]
	--,'' AS [ProductGroup3]
	--,'' AS [ProductGroup4]
	--,'' AS [Brand]
	,TRIM([CommodityCode]) AS [CommodityCode]
	--,'' AS PartReplacementNum
	--,'' AS PartStatus
	,TRIM([CountryOfOrigin]) AS [CountryOfOrigin]
	,[NetWeight]
	--,'' AS UoM
	--,'' AS [Material]
	--,'' AS [Barcode]
	,MAX([ReorderLevel]) AS [ReorderLevel]
	--,'' AS PartResponsible
	--,'' AS [StartDate]
	--,'' AS [EndDate]
	--,'' AS ItemStatus
FROM [stage].[MIT_UK_Part]

GROUP BY 
	PartitionKey, Company, TRIM([PartNum]), TRIM([CommodityCode]), TRIM([CountryOfOrigin]), NetWeight
GO
PRINT N'Creating [dm_ALL].[dimDepartment]'
GO
create view [dm_ALL].[dimDepartment] as

select 
	
[DepartmentID]
, CompanyID
,[Company]
,[DepartmentCode]
,[DepartmentName]
,[DepartmentSite]
,[Address]
,[ZipCode]
,[City]
,[State]
,[CountryCode]
,[CountryName]
,[DepartmentType]
,[DepartmentDescription]
,[DptRes1]
,[DptRes2]
,[DptRes3]
from dm.dimDepartment
GO
PRINT N'Creating [stage].[FOR_SE_CostBearer]'
GO
CREATE TABLE [stage].[FOR_SE_CostBearer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CostBearerNum] [nvarchar] (50) NULL,
[CostBearerName] [nvarchar] (100) NULL,
[CostBearerStatus] [nvarchar] (50) NULL,
[CostBearerGroup] [nvarchar] (50) NULL,
[CostBearerGroup2] [nvarchar] (50) NULL,
[CostBearerGroup3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vFOR_SE_CostBearer]'
GO

-- Good-to-know:
-- DESCRIBE (AND DATE) ANY CHANGES TO STANDARD SCRIPT HERE.

CREATE VIEW [stage].[vFOR_SE_CostBearer] AS

SELECT
--------------------------------------------- Keys/ IDs ---------------------------------------------
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company, '#', CostBearerNum))) AS CostBearerID,
	CONCAT(Company,'#',CostBearerNum) AS CostBearerCode,
	CONVERT([binary](32),HASHBYTES('SHA2_256',Company)) AS CompanyID,
	PartitionKey,

--------------------------------------------- Regular Fields ---------------------------------------------
---Mandatory Fields ---
	Company,
	CostBearerNum,

---Valuable Fields ---
	CostBearerName,
	CostBearerStatus,
	CostBearerGroup,

--- Good-to-have Fields ---
	CostBearerGroup2,
	CostBearerGroup3,

--------------------------------------------- Meta Data ---------------------------------------------
--CONVERT(date, ModifiedTimeStamp) AS ModifiedTimeStamp,
--CONVERT(date, CreatedTimeStamp) AS CreatedTimeStamp,
--TRIM(IsActiveRecord) AS IsActiveRecord,

--------------------------------------------- Extra Fields ---------------------------------------------
	'' AS CBRes1,
	'' AS CBRes2,
	'' AS CBRes3

FROM 
	stage.FOR_SE_CostBearer
/*GROUP BY
	PartitionKey, Company, CostBearerNum,CostBearerName,CostBearerStatus,CostBearerGroup,CostBearerGroup2,CostBearerGroup3 */
GO
PRINT N'Creating [stage].[ARK_CZ_CustomerAgreement]'
GO
CREATE TABLE [stage].[ARK_CZ_CustomerAgreement]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[AgreementCode] [nvarchar] (50) NULL,
[AgreementDescription] [nvarchar] (max) NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[AgreementQty] [decimal] (18, 4) NULL,
[FullfiledQty] [decimal] (18, 4) NULL,
[DelivTime] [nvarchar] (10) NULL,
[Currency] [nvarchar] (10) NULL,
[AgreementStart] [date] NULL,
[AgreementEnd] [date] NULL,
[CustomerTerms] [nvarchar] (100) NULL,
[CARes1] [nvarchar] (100) NULL,
[CARes2] [nvarchar] (100) NULL,
[CARes3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vARK_CZ_CustomerAgreement]'
GO
CREATE VIEW [stage].[vARK_CZ_CustomerAgreement] AS 
--ADD UPPER()TRIM() INTO CustomerID,PartID 2022-12-16 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(TRIM([Company]), '#', TRIM([AgreementCode]), '#', TRIM([PartNum]), '#', TRIM(CustomerNum)))) AS CustomerAgreementID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM([Company]))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustomerNum)))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM([Currency]))) AS CurrencyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM([PartNum]))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM([PartNum])))) AS PartID
	,[PartitionKey]

	,[Company]
	,TRIM(CustomerNum) AS CustomerNum
	,TRIM([PartNum]) AS PartNum
	,[AgreementCode]
	,[AgreementDescription]
	,[DiscountPercent]
	,([UnitPrice]) AS [UnitPrice]
	,[AgreementQty]
	,[FullfiledQty] AS FulfilledQty
	,[AgreementQty] -[FullfiledQty] AS RemainingQty
	--,'' AS UoM
	,[Currency]
	,[DelivTime]
	,[AgreementStart]
	,[AgreementEnd]
	,[CustomerTerms]
	,[AgreementQty] AS CARes1
	,[FullfiledQty] AS CARes2
	,CARes3
FROM 
	[stage].[ARK_CZ_CustomerAgreement]
WHERE [AgreementQty] <> 0
--GROUP BY [PartitionKey], [Company], CustomerNum, [PartNum], [AgreementCode], [AgreementDescription], [DiscountPercent], [AgreementQty], [Currency], [DelivTime],[AgreementStart],[AgreementEnd],[CustomerTerms],[FullfiledQty],CARes2,CARes3
GO
PRINT N'Creating [stage].[WID_FI_Customer]'
GO
CREATE TABLE [stage].[WID_FI_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[CustomerName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (50) NULL,
[TelephoneNumber2] [nvarchar] (50) NULL,
[Email] [nvarchar] (100) NULL,
[ABCCode] [nchar] (10) NULL,
[City] [nvarchar] (50) NULL,
[ZIP] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[VATRegNr] [nvarchar] (20) NULL,
[OrganizationNum] [nvarchar] (100) NULL,
[AccountString] [nvarchar] (50) NULL,
[CustomerABC] [nvarchar] (10) NULL,
[CustomerType] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vWID_FI_Customer]'
GO


CREATE VIEW [stage].[vWID_FI_Customer] AS
--COMMENT EMPTY FIELDS // ADD UPPER()TRIM() INTO CustomerID
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustomerNum)))) AS CustomerID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', [Company])) AS CompanyID
	,CONCAT([Company], '#', TRIM([CustomerNum])) AS CustomerCode
	,PartitionKey

	,Company
    ,TRIM(CustomerNum) AS CustomerNum
	--,'' AS MainCustomerName
    ,CustomerName AS CustomerName
    ,[AddressLine1]
    ,[AddressLine2]
    ,[AddressLine3]
	,[TelephoneNumber1]	AS [TelephoneNum1]
	,[TelephoneNumber2]	AS [TelephoneNum2]
	,[Email]
	,[ZIP] AS ZipCode
    ,IIF([City]= ' ',null,[dbo].[ProperCase]([City])) AS [City]    
    ,IIF([State]= ' ',null,[State]) AS [State]
	,[District]		AS SalesDistrict
	,case when len(TRIM(customer.CountryCode)) = 3 then cc.[Alpha-2 code]
	else iif(customer.countryName is null, 'FI', customer.countryCode)
	end AS CountryCode
    ,[dbo].[ProperCase](customer.CountryName) AS CountryName
	--,'' AS Division
	--,'' AS CustomerIndustry
	--,'' AS CustomerSubIndustry
	,TRIM(CONCAT(AddressLine1,' ',AddressLine2)) as AddressLine
	,CONCAT(customer.Countryname, + ',  ' + trim([AddressLine3]), + ',  ' + TRIM([AddressLine2]), + ',  ' + trim(addressline1)) AS FullAddressLine
    ,CustomerGroup AS CustomerGroup
	,CustomerSubGroup AS CustomerSubGroup
	,[SalesRepCode]	 AS SalesPersonCode
    ,SalesPersonName
	--,'' AS [SalesPersonResponsible]
    ,TRIM([VATRegNr]) AS [VATNum]
	,OrganizationNum
	,[AccountString] AS AccountNum
	,CASE WHEN CustomerGroup = 'INTERNAL SALES' and customernum not in ('1283','CEU','CEX','CFIN') THEN 'I'
	else 'E' END AS [InternalExternal] --,'' AS [InternalExternal]
	,CustomerABC AS CustomerScore
	,CustomerType

  FROM [stage].[WID_FI_Customer] as customer
	left join dbo.CountryCodes as cc
		on customer.CountryCode = cc.[Alpha-3 code]
GO
PRINT N'Creating [stage].[AXL_HU_OLine]'
GO
CREATE TABLE [stage].[AXL_HU_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[NeedbyDate] [date] NULL,
[ExpDelivDate] [date] NULL,
[EDCExpDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (10) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[SalesPerson] [nvarchar] (50) NULL,
[WareHouseCode] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[BusinessChain] [nvarchar] (50) NULL,
[SalesOrderCategory] [nvarchar] (100) NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL,
[PartDesc] [nvarchar] (max) NULL,
[APV_Cost_EUR] [nvarchar] (50) NULL,
[APV_Item] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXL_HU_OLine]'
GO
CREATE VIEW [stage].[vAXL_HU_OLine] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(PartDesc))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum), '#', (IIF(TRIM([PartNum]) LIKE 'IACO%' , 'MISC. CHARGES', TRIM(PartDesc) )) )))) AS PartID
	,CONVERT(int, replace(convert(date, OrderDate), '-', '')) AS SalesOrderDateID
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine))) AS SalesOrderCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(CustNum) AS CustomerNum 
	,TRIM(OrderNum) AS [SalesOrderNum]
	,TRIM(OrderLine) AS [SalesOrderLine]
	,TRIM(OrderSubLine) AS [SalesOrderSubLine]
	,CONVERT(nvarchar(50), TRIM(OrderType)) AS [SalesOrderType]
	,TRIM([SalesOrderCategory]) AS [SalesOrderCategory]
	,OrderDate AS [SalesOrderDate]
	,NeedbyDate
	,ExpDelivDate AS [ExpDelivDate]
	,EDCExpDelivDate
	,ActualDelivDate
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,OrderQty AS [SalesOrderQty]
	,DelivQty
	,RemainingQty
	,Unit AS [UoM]
	,UnitPrice
	,UnitCost
	,LEFT(TRIM(Currency), 3) AS Currency
	,ExchangeRate
	,LEFT(TRIM(OpenRelease), 1) AS OpenRelease
	,DiscountAmount
	,DiscountPercent
	,NULL AS CashDiscOffered
	,NULL AS CashDiscUsed
	,TRIM(PartNum) AS PartNum
	,UPPER(PartDesc) AS PartDesc
	,'' AS [PartType]
	,CONVERT(nvarchar(50), PartStatus) AS PartStatus
	,TRIM(SalesPerson) AS [SalesPersonName]
	,TRIM(WareHouseCode) AS WarehouseCode
	,'' AS IndexKey
	,TRIM(SalesChannel) AS SalesChannel
	,TRIM(BusinessChain) AS [Department]
	,Res3 AS [ProjectNum] -- = FreeOfCharge: Y = yes, N = no
	,'' AS Cancellation
	,Res1 AS SORes1
	,Res2 AS SORes2
	,Res3 AS SORes3
FROM stage.AXL_HU_OLine
WHERE OrderDate >= '2015-01-01'
GO
PRINT N'Creating [stage].[ARK_PI_StockBalance]'
GO
CREATE TABLE [stage].[ARK_PI_StockBalance]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[Currency] [nvarchar] (50) NULL,
[BinNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NOT NULL,
[DelivTime] [int] NULL,
[LastStockTakeDate] [date] NULL,
[LastStdCostCalDate] [date] NULL,
[MaxStockQty] [decimal] (18, 4) NULL,
[StockBalance] [decimal] (18, 4) NULL,
[StockValue] [decimal] (18, 4) NULL,
[ReserveQty] [decimal] (18, 4) NULL,
[BackOrderQty] [decimal] (18, 4) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[StockTakeDiff] [decimal] (18, 4) NULL,
[ReOrderLevel] [decimal] (18, 4) NULL,
[SafetyStock] [decimal] (18, 4) NULL,
[OptimalOrderQty] [decimal] (18, 4) NULL,
[SBRes1] [nvarchar] (50) NULL,
[SBRes2] [nvarchar] (50) NULL,
[SBRes3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vARK_PI_StockBalance]'
GO
CREATE VIEW [stage].[vARK_PI_StockBalance] AS
--COMMENT EMPTY FIELDS // ADD TRIM() INTO PartID,WarehouseID 2022-12-16 VA
--ADD TRIM() INTO Supplier ID 23-01-23 VA
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT([Company],'#',TRIM(UPPER([PartNum])),'#',TRIM([WarehouseCode]))))) AS ItemWarehouseID
	,UPPER(CONCAT([Company],'#',TRIM(UPPER([PartNum])),'#',TRIM([WarehouseCode]))) AS ItemWarehouseCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',TRIM([Company]))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT([Company],'#',TRIM(UPPER([SupplierNum])))))) AS SupplierID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM(UPPER([PartNum])))))) AS PartID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT([Company],'#',TRIM(UPPER([PartNum])))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT([Company],'#',TRIM([WarehouseCode]))))) AS WarehouseID
	,[PartitionKey]

	,[Company]
	,TRIM([WarehouseCode]) AS WarehouseCode
	,Currency
	,[BinNum]
	,BatchNum
	,TRIM(UPPER([SupplierNum])) AS [SupplierNum]
	,TRIM(UPPER([PartNum])) AS PartNum
	,[DelivTime]
	,convert(date, SBRes1) AS LastStockTakeDate
	,convert(date, LastStdCostCalDate) AS LastStdCostCalDate
	,SafetyStock
	,MaxStockQty
	,[StockBalance]
	,StockValue
	,IIF([StockBalance] <> 0, StockValue/[StockBalance], 0) AS AvgCost --0, IIF added 20211108 efter Emil
	,ReserveQty
	,BackOrderQty
	,OrderQty
	,SBRes2 AS StockTakeDiff
	,[ReOrderLevel]
	,[OptimalOrderQty]
	--,'' AS SBRes1
	--,'' AS SBRes2
	,SBRes3
FROM 
	[stage].[ARK_PI_StockBalance]
GO
PRINT N'Creating [dm_PT].[fctSalesOrder]'
GO


CREATE VIEW [dm_PT].[fctSalesOrder] AS

SELECT 
 so.[SalesOrderID]
,so.[SalesOrderNumID]
,so.[CustomerID]
,so.[CompanyID]
,so.[PartID]
,so.[WarehouseID]
,so.[ProjectID]
,so.[SalesPersonNameID]
,so.[DepartmentID]
,so.[SalesOrderDateID]
,so.[Company]
,so.[CustomerNum]
,so.[SalesOrderNum]
,so.[SalesOrderLine]
,so.[SalesOrderSubLine]
,so.[SalesOrderType]
,so.[SalesOrderCategory]
,so.[SalesOrderDate]
,so.[NeedbyDate]
,so.[ExpDelivDate]
,so.[ConfirmedDelivDate]
,so.[SalesInvoiceNum]
,so.[SalesOrderQty]
,so.[DelivQty]
,so.[RemainingQty]
,so.[UoM]
,so.[UnitPrice]
,so.[UnitCost]
,so.[Currency]
,so.[ExchangeRate]
,so.[OpenRelease]
,so.[OrderStatus]
,so.[DiscountAmount]
,so.[DiscountPercent]
,so.[PartNum]
,so.[PartType]
,so.[PartStatus]
,so.[SalesPersonName]
,so.[WarehouseCode]
,so.[SalesChannel]
,so.[AxInterSalesChannel]
,so.[Department]
,so.[ProjectNum]
,so.[ActualDelivDate]
,so.[SalesInvoiceQty]
,so.[TotalMiscChrg]
,so.[IsUpdatingStock]
,so.[SORes1]
,so.[SORes2]
,so.[SORes3]
,so.[SORes4]
,so.[SORes5]
,so.[SORes6]
FROM dm.FactSalesOrder so
LEFT JOIN dbo.Company com ON so.Company = com.Company
WHERE com.BusinessArea = 'Power Transmission Solutions' AND com.[Status] = 'Active'

--WHERE [Company] in ('SVESE', 'ACZARKOV', 'AcornUK', 'BSIBELL', 'JDKJENSS', 'JDKKALTE', 'JFIJENSS', 'MNLMAK', 'JNOJENSS', 'NORNO', 'JSEJENSS', 'SSWSE', 'NomoSE', 'NomoDK', 'NomoFI', 'NomoNo', 'PASSEROT', 'SKSSCOFI', 'SCOFI', 'SMKFI', 'SNLSPRUI', 'SPRUITNL')  -- The PT basket 

 --AND SalesOrderDate >= DATEADD(YEAR,-5, GETDATE()) --Added to decrease SSAS memory usage /SM 2021-04-26
-- The PT basket
-- 'ACZARKOV', 'AUKACOR', 'BSIBELL', 'JDKJENSS', 'JDKKALTE', 'JFIJENSS', 'JNOJENSS', 'JNOORBEL', 'JSEJENSS', 'JSESKSSW', 'MNLMAK', 'NomoSE', 'NomoDK', 'NomoFI', 'NomoNo', 'PASSEROT', 'SKSSCOFI', 'SCOFI', 'SMKFI', 'SNLSPRUI', 'SVESE'
--GROUP BY   -- Aggregate those fields in dw.FactOrder which have more than one values, such as different NeedbyDate & DelivDate and different discountPercent, left over fields should by in GROUP BY
GO
PRINT N'Creating [stage].[OCS_SE_GeneralLedgerTimeCost]'
GO
CREATE TABLE [stage].[OCS_SE_GeneralLedgerTimeCost]
(
[Projekt] [nvarchar] (50) NULL,
[Konto] [nvarchar] (50) NULL,
[Timmar] [nvarchar] (50) NULL,
[Belopp] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[OCS_SE_GeneralLedger]'
GO
CREATE TABLE [stage].[OCS_SE_GeneralLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[AccountNum] [nvarchar] (50) NULL,
[CostUnitNum] [nvarchar] (50) NULL,
[ProjectNum] [nvarchar] (50) NULL,
[JournalType] [nvarchar] (50) NULL,
[JournalDate] [nvarchar] (50) NULL,
[JournalNum] [nvarchar] (50) NULL,
[JournalLine] [nvarchar] (50) NULL,
[AccountingDate] [nvarchar] (50) NULL,
[Description] [nvarchar] (max) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [nvarchar] (50) NULL,
[TransactionAmount] [nvarchar] (50) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[SalesInvoiceNum] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[SupplierInvoiceNum] [nvarchar] (50) NULL,
[LinktoOriginalInvoice] [nvarchar] (500) NULL,
[TransactionNum] [nvarchar] (50) NULL,
[IsManual] [nvarchar] (50) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL,
[IndexKey] [nvarchar] (50) NULL,
[InvoiceAmountLC] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vOCS_SE_GeneralLedger]'
GO
CREATE VIEW [stage].[vOCS_SE_GeneralLedger] AS
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([ProjectNum]), '#', TRIM([AccountNum]), '#', TRIM([JournalNum]), '#', TRIM([JournalLine]), '#', TRIM([CostUnitNum]))))) AS GeneralLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([AccountNum]))))) AS AccountID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierNum))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustomerNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(ProjectNum))))) AS ProjectID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([CostUnitNum]))))) AS CostUnitID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', '')))) AS CostBearerID
	,PartitionKey

	,Company
	,TRIM([AccountNum]) AS [AccountNum]
	,TRIM([JournalNum]) AS [JournalNum]
	,TRIM([JournalLine]) AS [JournalLine]
	,TRIM([ProjectNum]) AS [ProjectNum]
	,CASE WHEN TRIM([Description]) IN ('justering IB', 'ingående balans','ingående balans 1110','ingående balans 1130', 'Korr IB konto 1229', 'Korr för IB-bokn')  THEN 'Opening Balance'
	      ELSE TRIM([JournalType]) END AS [JournalType]
	,TRIM([Description]) AS [Description]
	,'' AS [CostBearerNum]
	,CASE WHEN TRIM([Description]) IN ('justering IB', 'ingående balans','ingående balans 1110','ingående balans 1130', 'Korr IB konto 1229', 'Korr för IB-bokn')  THEN CONVERT(date, '2016-01-01')
	      ELSE CONVERT(date, CONCAT(LEFT([AccountingDate], 4), '-', SUBSTRING([AccountingDate], 5, 2), '-', RIGHT([AccountingDate],2))) END AS AccountingDate 
	,CASE WHEN TRIM([Description]) IN('justering IB', 'ingående balans','ingående balans 1110','ingående balans 1130', 'Korr IB konto 1229', 'Korr för IB-bokn')  THEN CONVERT(date, '2016-01-01')
	      ELSE CONVERT(date, [JournalDate]) END AS JournalDate 
	,IIF([Currency] = '€UR','EUR',trim([Currency])) As [Currency]
	,IIF([Currency] = 'SEK', 1, CONVERT(decimal(18,4), ExchangeRate)) AS ExchangeRate
	,CONVERT(decimal(18,4), TransactionAmount) AS InvoiceAmount
	,CONVERT(decimal(18,4),InvoiceAmountLC) AS InvoiceAmountLC
	,TRIM([CostUnitNum]) AS [CostUnitNum]
	,TRIM(CustomerNum) AS CustomerNum
	,TRIM(SupplierNum) AS SupplierNum
	,TRIM(SalesInvoiceNum) AS SalesInvoiceNum
	,TRIM(PurchaseInvoiceNum) AS PurchaseInvoiceNum
	,TRIM(SupplierInvoiceNum) AS SupplierInvoiceNum
	,TRIM([TransactionNum])	AS [TransactionNum]
	,'' AS DeliveryCountry
	,'' AS [VATCode]
	,'' AS [VATCodeDesc]
	,'' AS UserIDApproved
	,'' AS IsActiveRecord
	,IsManual
	,[LinktoOriginalInvoice] AS [LinkToOriginalInvoice]
	,IndexKey AS GLRes1
	,ModifiedTimeStamp AS GLRes2
	,CreatedTimeStamp AS GlRes3

FROM 
	stage.OCS_SE_GeneralLedger
	where (AccountingDate = '20151231' AND JournalType not IN ('40','91')) OR AccountingDate >= '20160101'  -- added 2023-04-19 SB, to include OB for 2016-01 (org acc.date 2015-12-31), but exclude random depreciation transaction from before 2016.

/*GROUP BY
	PartitionKey, SysRowID, Company, [SupplierNum], [CustomerNum], [CostUnitNum], [CostBearerNum], [SupplierInvoiceNum], [JournalDate], [AccountingDate], [Currency], [AmountSystemCurrency], [AccountNum], [JournalType], [TransactionNum], [JournalNum], [JournalLine], [Description], [VATCode], [LinktoOriginalInvoice], [APInvoiceNum], [ARInvoiceNum], [FiscalPeriod], [VATCodeDesc],[FiscalYear]
	*/

UNION ALL

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT('OCSSE', '#', TRIM([Projekt]), '#', TRIM(Konto))))) AS GeneralLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(N'OCSSE'))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT('OCSSE', '#', TRIM(Konto))))) AS AccountID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT('OCSSE', '#', '')))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT('OCSSE', '#', '')))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT('OCSSE', '#', TRIM([Projekt]))))) AS ProjectID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT('OCSSE', '#', '')))) AS CostUnitID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT('OCSSE', '#', '')))) AS CostBearerID
	,CONVERT(date, GETDATE()) AS PartitionKey

	,'OCSSE' AS Company
	,TRIM(Konto) AS [AccountNum]
	,'' AS [JournalNum]
	,'' AS [JournalLine]
	,TRIM([Projekt]) AS [ProjectNum]
	,'AxInterBI' AS [JournalType]
	,'OCS Current Month Salary Costs' AS [Description]
	,'' AS [CostBearerNum]
	,CONVERT(date, GETDATE()-1) AS AccountingDate
	,CONVERT(date, GETDATE()-1) AS JournalDate 
	,'SEK' As [Currency]
	,1 AS ExchangeRate
	,CONVERT(decimal(18,4), REPLACE([Belopp], ',', '.')) AS InvoiceAmount
	,CONVERT(decimal(18,4), REPLACE([Belopp], ',', '.')) AS InvoiceAmountLC
	,'' AS [CostUnitNum]
	,'' AS CustomerNum
	,'' AS SupplierNum
	,'' AS SalesInvoiceNum
	,'' AS PurchaseInvoiceNum
	,'' AS SupplierInvoiceNum
	,''	AS [TransactionNum]
	,'' AS DeliveryCountry
	,'' AS [VATCode]
	,'' AS [VATCodeDesc]
	,'' AS UserIDApproved
	,1 AS IsActiveRecord
	,1 AS IsManual
	,'' AS [LinkToOriginalInvoice]
	,'' AS GLRes1
	,'' AS GLRes2
	,'' AS GlRes3

FROM 
	stage.OCS_SE_GeneralLedgerTimeCost
--where (AccountingDate = '20151231' AND JournalType not IN ('40','91')) OR AccountingDate >= '20160101'
GO
PRINT N'Creating [dm_ALL].[fctSalesOrderLog]'
GO
CREATE   VIEW [dm_ALL].[fctSalesOrderLog] AS

SELECT  [SalesOrderLogID]
,[CompanyID]
,[CustomerID]
,[PartID]
,[WarehouseID]
,[SalesPersonNameID]
,[SalesOrderDateID]
,[PartitionKey]
,[Company]
,[CustomerNum]
,[SalesOrderNum]
,[SalesOrderLine]
,[SalesOrderSubLine]
,[SalesOrderType]
,[SalesOrderLogType]
,[SalesOrderDate]
,[SalesOrderLogDate]
,[SalesInvoiceNum]
,[SalesOrderQty]
,[UoM]
,[UnitPrice]
,[UnitCost]
,[Currency]
,[ExchangeRate]
,[OpenRelease]
,[DiscountPercent]
,[DiscountAmount]
,[PartNum]
,[PartType]
,[SalesPersonName]
,[Department]
,[WarehouseCode]
FROM [dm].[FactSalesOrderLog]
GO
PRINT N'Creating [stage].[NOM_DK_PurchaseOrder]'
GO
CREATE TABLE [stage].[NOM_DK_PurchaseOrder]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [varchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaseOrderType] [nvarchar] (50) NULL,
[PurchaseOrderDate] [date] NULL,
[PurchaseOrderStatus] [nvarchar] (50) NULL,
[OpenRelease] [nvarchar] (50) NULL,
[OrgReqDelivDate] [date] NULL,
[CommittedDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[ReqDelivDate] [date] NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[SupplierPartNum] [nvarchar] (50) NULL,
[SupplierInvoiceNum] [nvarchar] (50) NULL,
[DelivCustomerNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[PurchaseOrderQty] [decimal] (18, 4) NULL,
[ReceiveQty] [decimal] (18, 4) NULL,
[PurchaseInvoiceQty] [decimal] (18, 4) NULL,
[MinOrderQty] [decimal] (18, 4) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[LandedCost] [decimal] (18, 4) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[PurchaserName] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[RecievingNum] [nvarchar] (50) NULL,
[DelivTimeWorkDays] [nvarchar] (50) NULL,
[DelivTime] [nvarchar] (50) NULL,
[PurchaseChannel] [nvarchar] (50) NULL,
[Documents] [nvarchar] (50) NULL,
[Comments] [nvarchar] (max) NULL,
[PORes1] [nvarchar] (50) NULL,
[PORes2] [nvarchar] (50) NULL,
[PORes3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vNOM_DK_PurchaseOrder]'
GO
CREATE VIEW [stage].[vNOM_DK_PurchaseOrder] AS
--ADD TRIM() INTO PartID,CustomerID 23-01-05 VA
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(PurchaseInvoiceNum))))) AS PurchaseOrderID
	,UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine))) AS PurchaseOrderCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseInvoiceNum))))) AS PurchaseInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(Currency)))) AS CurrencyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(DelivCustomerNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(DelivCustomerNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum))))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierNum))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,PartitionKey AS PartitionKey

	,UPPER(TRIM(Company)) AS Company
	,UPPER(TRIM(PurchaseOrderNum)) AS PurchaseOrderNum
	,UPPER(TRIM(PurchaseOrderLine)) AS PurchaseOrderLine
	,UPPER(TRIM(PurchaseOrderLine)) AS PurchaseOrderSubLine
	,TRIM(PurchaseOrderType) AS PurchaseOrderType
	,PurchaseOrderDate
	,PurchaseOrderStatus
	,OpenRelease
	,OrgReqDelivDate
	,CommittedDelivDate
	,ActualDelivDate
	,ReqDelivDate
	,UPPER(TRIM(PurchaseInvoiceNum)) AS [PurchaseInvoiceNum]
	,UPPER(TRIM(PartNum)) AS PartNum
	,UPPER(TRIM(SupplierNum)) AS [SupplierNum]
	,TRIM(SupplierPartNum) AS SupplierPartNum
	,TRIM(SupplierInvoiceNum) AS SupplierInvoiceNum
	,TRIM(DelivCustomerNum) AS [DelivCustomerNum]
	,PartStatus
	,PurchaseOrderQty
	,ReceiveQty
	,PurchaseInvoiceQty AS InvoiceQty
	,MinOrderQty
	,[UoM]
	,UnitPrice
	,DiscountPercent
	,DiscountAmount
	,LandedCost
	,ExchangeRate
	,Currency
	,TRIM(PurchaserName) AS PurchaserName
	,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
	,TRIM(RecievingNum) AS ReceivingNum
	,DelivTime
	,PurchaseChannel
	,Documents
	,TRIM(Comments) AS Comments
	,PORes1 
	,PORes2 
	,PORes3
FROM 
	[stage].[NOM_DK_PurchaseOrder]
	
GROUP BY
	PartitionKey, Company, PurchaseOrderNum, PurchaseOrderLine, SupplierNum, DelivCustomerNum, PurchaseOrderStatus, PurchaseInvoiceNum, PartNum, OpenRelease, PurchaseOrderType, UnitPrice, PurchaseOrderQty, ReceiveQty, PurchaseInvoiceQty, MinOrderQty, UoM,  ExchangeRate, Currency, PurchaseOrderDate, ActualDelivDate, OrgReqDelivDate, CommittedDelivDate, ReqDelivDate, PurchaserName, WarehouseCode, DiscountPercent, DiscountAmount, RecievingNum, DelivTime, DelivTimeWorkDays, PurchaseChannel, SupplierPartNum, SupplierInvoiceNum,PartStatus,Documents, Comments, PORes1, PORes2, PORes3, LandedCost --, SysRowID, LeadTime
GO
PRINT N'Creating [stage].[MIT_UK_OLine]'
GO
CREATE TABLE [stage].[MIT_UK_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderRelNum] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[DelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[SumUnitCost] [decimal] (18, 4) NULL,
[SumUnitPrice] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[CurrExchRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (1) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [int] NULL,
[NeedbyDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (50) NULL,
[SalesReturnOrderNum] [nvarchar] (50) NULL,
[SalesReturnInvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vMIT_UK_OLine]'
GO
CREATE VIEW [stage].[vMIT_UK_OLine] AS
--COMMENT EMPTY FIELDS // ADD UPPER() INTO PartID,CustomerID,WarehouseID 22-12-28 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', IIF(OrderQty < 0, 1, 0)))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ) ))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID 
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) ) ))) AS PartID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WareHouseID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(WarehouseCode)))) AS WareHouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum)))) AS SalesOrderNumID
	,CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(InvoiceNum)) AS SalesOrderCode
	,CONVERT(int, replace(convert(date, OrderDate),'-','')) AS SalesOrderDateID  -- Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey

	,TRIM(Company) AS Company 
	,TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ) AS CustomerNum 
	,TRIM(OrderNum) AS SalesOrderNum
	,TRIM(OrderLine) AS SalesOrderLine
	,TRIM(OrderSubLine) AS SalesOrderSubLine -- added Sales in front of OrderSubLine 20210324
	--,'' AS SalesOrderType
	--,'' AS [SalesOrderCategory] -- added 20210324
	,OrderDate AS SalesOrderDate
	,NeedbyDate
	,DelivDate AS ExpDelivDate
	,CAST('1900-01-01' AS date) AS ActualDelivDate
	,CAST('1900-01-01' AS date) AS ConfirmedDelivDate
	,TRIM(InvoiceNum) AS SalesInvoiceNum
	,OrderQty AS SalesOrderQty
	,DelivQty
	,RemainingQty
	--,NULL AS SalesInvoiceQty
	--,'' AS UoM
	,UnitPrice
	,UnitCost
	,Currency
	,CurrExChRate AS ExchangeRate
	,OpenRelease
	,DiscountAmount
	,DiscountPercent
	,TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) ) AS PartNum
	--,'' AS [PartType] -- added 20210324
	,PartStatus
	,SalesPerson AS SalesPersonName
	,TRIM(WarehouseCode) AS WarehouseCode
	,'Normal Order Handling' AS SalesChannel
	,'Normal Order Handling' AS AxInterSalesChannel
	--,'' AS [Department] --Deaprtment
	--,'' AS ProjectNum
	--,'' AS IndexKey
	,IIF(OrderQty < 0, 'R', '0') AS Cancellation 
	--,'' AS SORes1
	--,'' AS SORes2
	--,'' AS SORes3
	--,NULL AS [TotalMiscChrg]
FROM stage.MIT_UK_OLine
GO
PRINT N'Creating [stage].[NOM_FI_Customer]'
GO
CREATE TABLE [stage].[NOM_FI_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[CustomerName] [nvarchar] (100) NULL,
[MainCustomerName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[AddressLine3] [nvarchar] (100) NULL,
[ABCCode] [nvarchar] (10) NULL,
[City] [nvarchar] (50) NULL,
[Zip] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerMainGroup] [nchar] (10) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNr] [nvarchar] (20) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (2) NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[OrganizationNum] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vNOM_FI_Customer]'
GO
CREATE VIEW [stage].[vNOM_FI_Customer] AS
--COMMENT EMPTY FIELDS 2022-12-15 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID
    ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,UPPER(CONCAT([Company],'#',TRIM([CustomerNum]))) AS CustomerCode
	
	,PartitionKey
	,UPPER(TRIM(Company)) AS Company
    ,UPPER(TRIM(CustomerNum)) AS CustomerNum
	,MainCustomerName
    ,[dbo].[ProperCase](CustomerName) AS CustomerName
    ,[AddressLine1]
    ,[AddressLine2]
    ,[AddressLine3]
	--,'' AS [TelephoneNum1]
	--,'' AS [TelephoneNum2]
	--,'' AS [Email]
	,[ZIP] AS ZipCode
    ,IIF([City]= ' ',NULL,[dbo].[ProperCase]([City])) AS [City]    
    ,IIF([State]= ' ',NULL,[State]) AS [State]
	,[District]	AS SalesDistrict
	,TRIM(CountryCode) AS CountryCode
    ,[dbo].[ProperCase](CountryName) AS CountryName
	--,'' AS Division
	--,'' AS CustomerIndustry
	--,'' AS CustomerSubIndustry
	,[dbo].[ProperCase](TRIM(CONCAT(AddressLine1,' ',AddressLine2))) as AddressLine
	,[dbo].[ProperCase](concat_ws(',',coalesce(TRIM(CountryName),null),coalesce(IIF([State]= ' ',null,TRIM([State])),IIF(City= ' ',null,TRIM(City)),IIF(ZIP= ' ',null,TRIM(ZIP))),IIF([AddressLine3]=' ',null, TRIM([AddressLine3]))
		,coalesce(IIF([addressline1]= ' ',null,TRIM([addressline1])),IIF([addressline2]= ' ',null,TRIM([addressline2])))
		,coalesce(IIF([addressline2]= ' ',null,TRIM([addressline2])),IIF([addressline3]= ' ',null,TRIM([addressline3]))))) AS FullAddressLine
    ,[dbo].[ProperCase](CustomerMainGroup) AS CustomerGroup
	,[dbo].[ProperCase](CustomerGroup) AS CustomerSubGroup
	,[SalesRepCode] AS SalesPersonCode
    ,[dbo].[ProperCase](SalesPersonName) AS SalesPersonName
	--,'' AS [SalesPersonResponsible]
    ,TRIM([VATRegNr]) AS [VATNum]
	--,'' AS OrganizationNum
	,[AccountString] AS AccountNum
	,[InternalExternal]
	,[ABCCode] AS CustomerScore
	--,'' AS CustomerType
	,GETDATE() AS ValidFrom
	,DATEADD(year,1,GETDATE()) AS ValidTo
	,OrganizationNum
FROM [stage].[NOM_FI_Customer]
GO
PRINT N'Creating [stage].[CER_NO_SalesLedger]'
GO
CREATE TABLE [stage].[CER_NO_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[CompanyCustomer] [nvarchar] (100) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[DaysPastDue] [smallint] NULL,
[FiscalYear] [smallint] NULL,
[FiscalPeriod] [smallint] NULL,
[AgingPeriod] [nvarchar] (100) NULL,
[AgingSort] [smallint] NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 8) NULL,
[VATCode] [nvarchar] (50) NULL,
[VATCodeDesc] [nvarchar] (500) NULL,
[LocalAmount] [decimal] (18, 4) NULL,
[LocalRemainingAmount] [decimal] (18, 4) NULL,
[OriginalAmount] [decimal] (18, 4) NULL,
[RemainingAmount] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vCER_NO_SalesLedger]'
GO

CREATE VIEW [stage].[vCER_NO_SalesLedger] AS
--change ledger id  23-02-27 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', CustNum, '#', InvoiceNum))) AS SalesLedgerID,
	CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID,
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID,
	--CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ))))) AS CustomerID,
	CONCAT(Company,'#',CustNum, '#', InvoiceNum) AS SalesLedgerCode,
	PartitionKey,

	UPPER(TRIM(Company)) AS Company,
	UPPER(TRIM(CustNum)) AS CustomerNum,
	TRIM(InvoiceNum) AS SalesInvoiceNum,
	InvoiceDate AS SalesInvoiceDate,
	CONVERT(date, DueDate) AS SalesDueDate,
	CONVERT(date, LastPaymentDate) AS SalesLastPaymentDate,
	OriginalAmount AS InvoiceAmount,
	OriginalAmount - RemainingAmount AS PaidInvoiceAmount,
	RemainingAmount AS RemainingInvoiceAmount,
	ExchangeRate,
	Currency,
	NULL AS VATAmount,
	VATCode,
	--'' AS PayToName,
	--'' AS PayToCity,
	--'' AS PayToContact,
	--'' AS PaymentTerms,
	--'' AS SLRes1,
	--'' AS SLRes2,
	--'' AS SLRes3
	'1900-01-01' AS AccountingDate
	,AgingPeriod
	,AgingSort
	,VATCodeDesc
	--,'' AS LinkToOriginalInvoice
FROM 
	stage.CER_NO_SalesLedger
GO
PRINT N'Creating [stage].[JEN_NB_Part]'
GO
CREATE TABLE [stage].[JEN_NB_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartDescription] [nvarchar] (100) NULL,
[PartDescription2] [nvarchar] (100) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[ProductGroup2] [nvarchar] (50) NULL,
[CommodityCode] [nvarchar] (50) NULL,
[CountryOfOrigin] [nvarchar] (50) NULL,
[NetWeight] [decimal] (18, 4) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[ReorderLevel] [decimal] (18, 4) NULL,
[EAN] [nvarchar] (50) NULL,
[StockItemStatus] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vJEN_NB_Part]'
GO

CREATE VIEW [stage].[vJEN_NB_Part] AS
--COMMENT EMPETY FIELDS // ADD TRIM() INTO PartID 23-01-03 VA
SELECT 
--  CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company], '#', [PartNum])))) AS PartID
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,UPPER(CONCAT([Company],'#',[PartNum])) AS PartCode
	,PartitionKey

	,UPPER([Company]) AS [Company]
	,UPPER(TRIM([PartNum])) AS [PartNum]
	--,'' AS [PartName]
	,[PartDescription]
	,[PartDescription2]
	--,'' AS [PartDescription3]
	,SupplierCode AS MainSupplier
	--,NULL AS AlternativeSupplier
	,[ProductGroup]
	,[ProductGroup2]
	--,'' AS [ProductGroup3]
	--,'' AS [ProductGroup4]
	--,'' AS [Brand]
	,[CommodityCode]
	--,'' AS PartReplacementNum
	,StockItemStatus AS PartStatus
	,[CountryOfOrigin]
	,[NetWeight]
	--,'' AS UoM
	--,'' AS [Material]
	,EAN AS [Barcode]
	,[ReOrderLevel]
	--,'' AS PartResponsible
	--,'' AS [StartDate]
	--,'' AS [EndDate]
FROM [stage].[JEN_NB_Part]
GO
PRINT N'Creating [dm_PT].[DimRLS]'
GO

CREATE VIEW [dm_PT].[DimRLS] AS
SELECT 
	 [id]
,[Company]
,[Email]
,[RLSTable]
,[RLSField]
,[RLSValue]
,[AccessType]
,[SourceList]
,[Modified_at]
,[Author]
,[BusinessArea]
FROM [dm].DimRLS AS RLS
WHERE BusinessArea = 'Power Transmission Solutions'
GO
PRINT N'Creating [stage].[CER_DE_PurchaseInvoice]'
GO
CREATE TABLE [stage].[CER_DE_PurchaseInvoice]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (8) NULL,
[PurchaseOrderNum] [nvarchar] (20) NULL,
[PurchaseOrderLine] [int] NULL,
[PurchaseOrderSubLine] [int] NULL,
[PurchaseOrderType] [int] NULL,
[PurchaseInvoiceNum] [nvarchar] (20) NULL,
[PurchaseInvoiceLine] [int] NULL,
[PurchaseInvoiceType] [int] NULL,
[PurchaseInvoiceDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[SupplierNum] [nvarchar] (20) NULL,
[PurchaseInvoiceQty] [decimal] (9, 2) NULL,
[UoM] [nvarchar] (10) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DiscountPercent] [decimal] (9, 2) NULL,
[DiscountAmount] [decimal] (9, 2) NULL,
[TotalMiscChrg] [int] NULL,
[VATAmount] [decimal] (9, 2) NULL,
[ExchangeRate] [decimal] (9, 2) NULL,
[Currency] [nvarchar] (10) NULL,
[CreditMemo] [varchar] (1) NULL,
[WarehouseCode] [nvarchar] (10) NULL,
[PurchaseChannel] [int] NULL,
[Comments] [int] NULL,
[PIRes1] [int] NULL,
[PIRes2] [int] NULL,
[PIRes3] [int] NULL,
[PartNum] [nvarchar] (20) NULL
)
GO
PRINT N'Creating [stage].[vCER_DE_PurchaseInvoice]'
GO
CREATE view [stage].[vCER_DE_PurchaseInvoice]
as
--ADD TRIM() UPPER() INTO PartID,WarehouseID  2023-01-03 VA
--ADD TRIM() into SupplierID 23-01-23 VA
select 
CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(PurchaseInvoiceNum), '#',PurchaseInvoiceLine,'#', TRIM(PartNum)))) AS PurchaseInvoiceID, --TRIM(PurchaseInvoiceLine)
Company,
PurchaseOrderNum,
PurchaseOrderLine,
PurchaseOrderSubLine,
PurchaseOrderType,
PurchaseInvoiceNum,
PurchaseInvoiceLine,
PurchaseInvoiceType,
PurchaseInvoiceDate,
ActualDelivDate,
SupplierNum,
PartNum,
PurchaseInvoiceQty,
UoM,
case 
	when cast(UnitPrice as decimal(18,4)) = cast(VATAmount as decimal(18,4)) then 0
	else UnitPrice
end as UnitPrice,
DiscountPercent,
DiscountAmount,
TotalMiscChrg,
VATAmount,
ExchangeRate,
Currency,
CreditMemo,
--null as PurchaserName,
WarehouseCode,
PurchaseChannel,
PIRes1,
PIRes2,
PIRes3,
CONCAT(TRIM(Company),'#',TRIM(PurchaseInvoiceNum), '#', PurchaseInvoiceLine) AS PurchaseInvoiceCode,
UPPER(CONCAT(Company,'#',SupplierNum,'#',PurchaseOrderNum,'#',TRIM(PurchaseInvoiceNum))) AS PurchaseOrderCode,
CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID,
CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',  TRIM(PurchaseOrderNum),'#',PurchaseOrderLine,'#',TRIM(PurchaseInvoiceNum))))) AS PurchaseOrderID,
CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM(SupplierNum))))) AS SupplierID,
--CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT([Company],'#',SupplierNum)))) AS SupplierID,
CONVERT([binary](32),HASHBYTES('SHA2_256',Company)) AS CompanyID,
CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID,
--CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(PartNum)))) AS PartID,
CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(WarehouseCode))))) AS WarehouseID,
--CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(WarehouseCode))))) AS WarehouseID,
CONVERT(int, replace(PurchaseInvoiceDate,'-','')) AS PurchaseInvoiceDateID,
CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#', SupplierNum, '#', TRIM(PurchaseInvoiceNum))))) AS PurchaseLedgerID,
PartitionKey,
Comments AS Comment
FROM stage.CER_DE_PurchaseInvoice
GO
PRINT N'Creating [dm_ALL].[fctStockTransaction]'
GO
CREATE VIEW [dm_ALL].[fctStockTransaction] AS

SELECT 
 [StockTransactionID]
,[CompanyID]
,[PartID]
,[WarehouseID]
,[CurrencyID]
,[TransactionDateID]
,[SupplierID]
,[PurchaseOrderNumID]
,[PurchaseInvoiceID]
,[CustomerID]
,[SalesOrderNumID]
,[SalesInvoiceID]
,[CurrencyMonthKey]
,[Company]
,[WarehouseCode]
,[TransactionCode]
,[TransactionDescription]
,[IssuerReceiverNum]
,[IssuerReceiverName]
,[OrderNum]
,[OrderLine]
,[InvoiceNum]
,[InvoiceLine]
,[PartNum]
,[BinNum]
,[BatchNum]
,[TransactionDate]
,[TransactionTime]
,[TransactionQty]
,[TransactionValue]
,[CostPrice]
,[SalesUnitPrice]
,[Currency]
,[Reference]
,[AdjustmentDate]
,[IndexKey]
,[InternalExternal]
FROM dm.FactStockTransaction
GO
PRINT N'Creating [stage].[AXI_HQ_OpenBalance_Calc]'
GO
CREATE TABLE [stage].[AXI_HQ_OpenBalance_Calc]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (8) NOT NULL,
[AccountNum] [nvarchar] (50) NULL,
[CostUnitNum] [nvarchar] (50) NULL,
[CostBearerNum] [nvarchar] (50) NULL,
[ProjectNum] [nvarchar] (50) NULL,
[JournalType] [nvarchar] (50) NULL,
[JournalDate] [date] NULL,
[Description] [nvarchar] (500) NULL,
[OpeningBalance] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OBRes1] [nvarchar] (100) NULL,
[OBRes2] [nvarchar] (100) NULL,
[OBRes3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[AXI_HQ_OpenBalance]'
GO
CREATE TABLE [stage].[AXI_HQ_OpenBalance]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (8) NOT NULL,
[AccountNum] [nvarchar] (50) NULL,
[CostUnitNum] [nvarchar] (50) NULL,
[CostBearerNum] [nvarchar] (50) NULL,
[ProjectNum] [nvarchar] (50) NULL,
[JournalType] [nvarchar] (50) NULL,
[JournalDate] [date] NULL,
[Description] [nvarchar] (500) NULL,
[OpeningBalance] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OBRes1] [nvarchar] (100) NULL,
[OBRes2] [nvarchar] (100) NULL,
[OBRes3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vAXI_HQ_OpenBalance]'
GO





/****** Script for SelectTopNRows command from SSMS  ******/
CREATE VIEW [stage].[vAXI_HQ_OpenBalance] AS
/*SELECT distinct	--We use distinct because AccountNum = 8316 and 8317 have what looks like duplicate rows. But they all have opening balance 0 so it doesn't matter much /SM 2021-12-17
	
	  CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', JournalDate, '#', AccountNum, '#', CostUnitNum ))) AS OpenBalanceID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', AccountNum ))) AS AccountID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', RIGHT('000000' + [CostUnitNum], 6 ) ))) AS CostUnitID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', CostBearerNum ))) AS CostBearerID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', '' ))) AS ProjectID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',Company)) AS CompanyID
	  ,CONVERT(varchar, GETDATE(), 23) AS PartitionKey
      ,[Company]
      ,[AccountNum]
      ,RIGHT('000000'+ [CostUnitNum], 6 ) AS  [CostUnitNum]
      ,[CostBearerNum]
      ,[ProjectNum]
      ,[JournalType]
      ,[JournalDate]
	  ,[JournalDate] as AccountingDate
      ,[Description]
      ,[OpeningBalance]
      ,[Currency]
      ,[ExchangeRate]
      ,[OBRes1]
      ,[OBRes2]
      ,[OBRes3]
  FROM [stage].[AXI_HQ_OpenBalance]
  where upper(Company) = 'AXISE'*/
 with ctm as (
select  [PartitionKey], [Company], [AccountNum], [CostUnitNum], [CostBearerNum], [ProjectNum], [JournalType], [JournalDate], [Description], [OpeningBalance], [Currency], [ExchangeRate], [OBRes1], [OBRes2], [OBRes3] from stage.AXI_HQ_OpenBalance where Company = 'AXISE' 
)
select distinct


IIF(op.AccountNum is null,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(TRIM(op_cal.Company),'#', op_cal.JournalDate, '#',TRIM(op_cal.AccountNum), '#',TRIM(op_cal.CostUnitNum)))),CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(TRIM(op.Company),'#',op.JournalDate, '#',TRIM(op.AccountNum), '#',TRIM(op.CostUnitNum))))) as OpenBalanceID
,IIF(op.AccountNum is null,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(TRIM(op_cal.Company),'#',TRIM(op_cal.AccountNum)))),CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(TRIM(op.Company),'#',TRIM(op.AccountNum))))) AS AccountID
,IIF(op.[CostUnitNum] is null,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(TRIM(op_cal.Company),'#', RIGHT('000000' + op_cal.[CostUnitNum], 6 )))),CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(TRIM(op.Company),'#', RIGHT('000000' + op.[CostUnitNum], 6 ))))) AS CostUnitID
,IIF(op.[CostBearerNum] is null,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(TRIM(op_cal.Company),'#', TRIM(op_cal.CostBearerNum)))),CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(TRIM(op.Company),'#',TRIM(op.CostBearerNum))))) AS CostBearerID
,IIF(op.[Company] is null,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(TRIM(op_cal.Company),'#', '' ))),CONVERT(binary(32),HASHBYTES('SHA2_256',CONCAT(TRIM(op.Company),'#', '' )))) AS ProjectID
,IIF(op.[Company] is null,CONVERT(binary(32), HASHBYTES('SHA2_256',op_cal.Company)),CONVERT(binary(32), HASHBYTES('SHA2_256',op.Company))) AS CompanyID
,CONVERT(varchar, GETDATE(), 23) AS PartitionKey
,IIF(op.AccountNum is null,op_cal.AccountNum,op.AccountNum) as AccountNum
,IIF(op.[Company] is null,op_cal.[Company],op.[Company]) as [Company]
,iif(op.[CostUnitNum] is null,RIGHT('000000'+ op_cal.[CostUnitNum], 6 ),RIGHT('000000'+ op.[CostUnitNum], 6 )) as [CostUnitNum]
,iif(op.[CostBearerNum] is null,op_cal.[CostBearerNum],op.[CostBearerNum]) as [CostBearerNum]
,iif(op.[ProjectNum] is null,op_cal.[ProjectNum],op.[ProjectNum]) as [ProjectNum]
,iif(op.[JournalType] is null,op_cal.[JournalType],op.[JournalType]) as [JournalType]
,iif(op.[JournalDate] is null,op_cal.[JournalDate],op.[JournalDate]) as [JournalDate]
,iif(op.[JournalDate] is null,op_cal.[JournalDate],op.[JournalDate]) as AccountingDate
,iif(op.[Description] is null,op_cal.[Description],op.[Description]) as [Description]
,iif(op.[OpeningBalance] is null,op_cal.[OpeningBalance],op.[OpeningBalance]) as [OpeningBalance]
,iif(op.[Currency] is null,op_cal.[Currency],op.[Currency]) as [Currency]
,iif(op.[ExchangeRate] is null,op_cal.[ExchangeRate],op.[ExchangeRate]) as [ExchangeRate]
,iif(op.[OBRes1] is null,op_cal.[OBRes1],op.[OBRes1]) as [OBRes1]
,iif(op.[OBRes2] is null,op_cal.[OBRes2],op.[OBRes2]) as [OBRes2]
,iif(op.[OBRes3] is null,op_cal.[OBRes3],op.[OBRes3]) as [OBRes3]
--,iif(op.AccountNum is null,'op_cal','op') as [origen]
FROM ctm as op
 full outer join [stage].[AXI_HQ_OpenBalance_Calc] as op_cal
	on op_cal.[AccountNum] = op.[AccountNum] and op_cal.[JournalDate] = op.[JournalDate] and op_cal.[CostUnitNum] = op.[CostUnitNum] and op.Company = op_cal.Company
GO
PRINT N'Creating [stage].[FOR_SE_CustomerAgreement]'
GO
CREATE TABLE [stage].[FOR_SE_CustomerAgreement]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[RecordType] [nvarchar] (50) NULL,
[RecTypeDesc] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivTime] [nvarchar] (10) NULL,
[CurrencyCode] [nvarchar] (10) NULL,
[CustomerTerms] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vFOR_SE_CustomerAgreement]'
GO
CREATE VIEW [stage].[vFOR_SE_CustomerAgreement] AS 
--COMMENT EMPTY FIELDS 2022-12-20 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([RecordType]), '#', TRIM([PartNum]), '#', TRIM([CustNum]))))) AS CustomerAgreementID --CustomerAgreementID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID  
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM(CustNum)) AS CustomerNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,[RecordType] AS AgreementCode
	,[RecTypeDesc] AS AgreementDescription
	,[DiscountPercent]
	,MAX([UnitPrice])	as [UnitPrice]
	,[OrderQty] AS AgreementQty
	,UPPER(TRIM([CurrencyCode])) AS Currency
	,[DelivTime]
	--,'' AS AgreementStart
	--,'' AS AgreementEnd
	--,'' AS CustomerTerms
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([CurrencyCode])))) AS CurrencyID
	--,'' AS [ValidFromDate]
	--,'' AS [ValidToDate]
	--,0	AS FulfilledQty
	--,0  AS RemainingQty
	--,''	AS UoM
	--,'' AS CARes1
	--,'' AS CARes2
	--,'' AS CARes3
FROM 
	[stage].[FOR_SE_CustomerAgreement]
GROUP BY [PartitionKey],[Company],[RecordType],[RecTypeDesc],[CurrencyCode],[PartNum],[CustNum],[DiscountPercent], [OrderQty], [DelivTime]
--WHERE 
--	RecordType = 'D'
GO
PRINT N'Creating [stage].[FOR_SE_Supplier]'
GO
CREATE TABLE [stage].[FOR_SE_Supplier]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[SupplierName] [nvarchar] (100) NULL,
[Addressline1] [nvarchar] (100) NULL,
[Addressline2] [nvarchar] (100) NULL,
[Addressline3] [nvarchar] (100) NULL,
[City] [nvarchar] (50) NULL,
[ZIP] [nvarchar] (50) NULL,
[Region] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (100) NULL,
[SupplierCategory] [nvarchar] (50) NULL,
[Reference] [nvarchar] (100) NULL,
[BankAccountNum] [nvarchar] (50) NULL,
[VATNum] [nvarchar] (50) NULL,
[TelephoneNum] [nvarchar] (20) NULL,
[Email] [nvarchar] (100) NULL,
[Website] [nvarchar] (100) NULL,
[CodeOfConduct] [nvarchar] (2) NULL,
[MinOrderQty] [decimal] (18, 4) NULL,
[Comment] [nvarchar] (max) NULL,
[InternalExternal] [nvarchar] (100) NULL,
[SupplierABC] [nvarchar] (50) NULL,
[CustomerCode] [nvarchar] (50) NULL,
[Buyer] [nvarchar] (100) NULL,
[OrganisationNum] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vFOR_SE_Supplier]'
GO

CREATE VIEW [stage].[vFOR_SE_Supplier] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([SupplierNum]))))) AS SupplierID
    ,UPPER(CONCAT([Company], '#', TRIM([SupplierNum]))) AS SupplierCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Company])))) AS CompanyID
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([SupplierNum])) AS SupplierNum
	,[dbo].[ProperCase](TRIM(SupplierName)) AS MainSupplierName
	,[dbo].[ProperCase](TRIM(SupplierName)) AS SupplierName
	,TRIM([AddressLine1]) AS AddressLine1
    ,TRIM([AddressLine2]) AS AddressLine2
    ,TRIM([AddressLine3]) AS AddressLine3
	,[TelephoneNum]
	,[Email]
	,TRIM([ZIP]) AS ZipCode
	,TRIM([City]) AS City
	--,'' AS District
	,IIF(CountryName IS null OR CountryName = '', 'SE', CountryCode) AS CountryCode
    ,IIF(CountryName IS null OR CountryName = '', 'Sweden', CountryName) AS CountryName
	,[Region] 
	,TRIM([SupplierCategory]) AS SupplierCategory 
	,TRIM(Buyer) AS SupplierResponsible
	,[dbo].[ProperCase](TRIM(concat (addressline1+' '+ addressline2, null))) AS AddressLine
	,[dbo].[ProperCase](TRIM(concat_ws(',',coalesce([dbo].[ProperCase](CountryName),null),IIF(City= ' ',null,trim(substring(replace([dbo].[ProperCase](AddressLine3),' ', ''), 6, 100))),IIF(ZIP= ' ',null,[dbo].[udf_GetNumeric]([Addressline3]))
		,coalesce(IIF([addressline1]= ' ',null,[addressline1]),IIF([addressline2]= ' ',null,[addressline2]))
		,coalesce(IIF([addressline2]= ' ',null,[addressline2]),IIF([addressline3]= ' ',null,[addressline3]))))) AS FullAddressLine
	,[BankAccountNum] AS [AccountNum] 
	,[VATNum]
	,OrganisationNum AS OrganizationNum
	,iif([InternalExternal] = 'True', 'Internal', 'External') as InternalExternal
	,[CodeOfConduct]
	,[CustomerCode] AS CustomerNum
	,TRIM([SupplierABC]) AS SupplierScore
	,[MinOrderQty]
	,0 AS MinOrderValue	
	,[Website]
	,TRIM([Comment]) AS Comments
	--,'' AS SRes1
	--,'' AS SRes2
	--,'' AS SRes3

FROM [stage].[FOR_SE_Supplier]
/*GROUP BY 
      [PartitionKey],[Company],[SupplierNum],[SupplierName],[AddressLine1],[AddressLine2],[AddressLine3],[City],[ZIP],[Region],[CountryName]
	  ,[SupplierCategory],[Reference],[BankAccountNum],[VATNum],[SupplierABC],[CustomerCode],[TelephoneNum],[Email],[Website],[CodeOfConduct]
	  ,[MinOrderQty],[InternalName],[Comment] */
GO
PRINT N'Creating [stage].[SVE_SE_PurchaseInvoice]'
GO
CREATE TABLE [stage].[SVE_SE_PurchaseInvoice]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[PurchaseInvoiceLine] [nvarchar] (50) NULL,
[PurchaseInvoiceSubLine] [nvarchar] (50) NULL,
[PurchaseOrderType] [nvarchar] (50) NULL,
[PurchaseInvoiceType] [nvarchar] (50) NULL,
[PurchaseInvoiceDate] [nvarchar] (50) NULL,
[ActualRecieveDate] [nvarchar] (50) NULL,
[ActualShipDate] [nvarchar] (50) NULL,
[UoM] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PurchaseInvoiceQty] [nvarchar] (50) NULL,
[Kost] [nvarchar] (50) NULL,
[UnitPrice] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [nvarchar] (50) NULL,
[DiscountPercent] [nvarchar] (50) NULL,
[DiscountAmount] [nvarchar] (50) NULL,
[TotalMiscChrg] [nvarchar] (50) NULL,
[VATAmount] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PurchaseChannel] [nvarchar] (100) NULL,
[PurchaserName] [nvarchar] (100) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Comment] [nvarchar] (50) NULL,
[Trandate] [nvarchar] (50) NULL,
[CreatedTime] [nvarchar] (50) NULL,
[IsActiveRecord] [nvarchar] (50) NULL,
[IsCreditMemo] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vSVE_SE_PurchaseInvoice]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vSVE_SE_PurchaseInvoice] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(PurchaseOrderSubLine), '#', TRIM(PurchaseInvoiceNum), '#', CreatedTime )))) AS PurchaseInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine))))) AS PurchaseOrderID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(trim(Company), '#', TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum))))) AS PurchaseLedgerID
	,CONVERT(int, ActualRecieveDate) AS PurchaseInvoiceDateID
	,UPPER(CONCAT(Company, '#', TRIM(SupplierNum), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine))) AS PurchaseOrderCode
	,UPPER(CONCAT(Company, '#', TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum))) AS PurchaseInvoiceCode 
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(PurchaseOrderNum) AS PurchaseOrderNum
	,TRIM(PurchaseOrderLine) AS PurchaseOrderLine
	,TRIM(PurchaseOrderSubLine) AS PurchaseOrderSubLine
	,TRIM(PurchaseOrderType) AS PurchaseOrderType 
	,TRIM(PurchaseInvoiceNum) AS PurchaseInvoiceNum
	,TRIM(PurchaseInvoiceLine) PurchaseInvoiceLine
	--,'' PurchaseInvoiceType
	,CONVERT(date, IIF(PurchaseInvoiceDate = '', '1900-01-01', PurchaseInvoiceDate)) AS PurchaseInvoiceDate
	,CONVERT(date, IIF(ActualShipDate = '', '1900-01-01', ActualShipDate)) AS ActualShipDate 
	,CONVERT(date, IIF(ActualRecieveDate = '', '1900-01-01', ActualRecieveDate)) AS ActualRecieveDate
	,CONVERT(date, IIF(ActualRecieveDate = '', '1900-01-01', ActualRecieveDate)) AS ActualDelivDate
	,TRIM(UPPER(SupplierNum)) AS SupplierNum
	,IIF(TRIM(UPPER([PartNum])) = '' OR [PartNum] IS NULL, '99', TRIM(UPPER([PartNum]))) AS PartNum
	,SUM(CONVERT(decimal(18,4), PurchaseInvoiceQty)) AS PurchaseInvoiceQty --sum different batch payment --
	,TRIM(UoM) AS UoM
	,IIF(CONVERT(decimal(18,4), ExchangeRate) = 0
		, IIF(SUM(CONVERT(decimal(18,4), PurchaseInvoiceQty)) = 0, UnitPrice, SUM(CONVERT(decimal(18,4), Kost))/SUM(CONVERT(decimal(18,4), PurchaseInvoiceQty)))/1
		, IIF(SUM(CONVERT(decimal(18,4), PurchaseInvoiceQty)) = 0, UnitPrice, SUM(CONVERT(decimal(18,4), Kost))/SUM(CONVERT(decimal(18,4), PurchaseInvoiceQty)))/(CONVERT(decimal(18,4), ExchangeRate))
		) AS UnitPrice
	,CONVERT(decimal(18,4), DiscountPercent) AS DiscountPercent
	,CONVERT(decimal(18,4), DiscountAmount) AS DiscountAmount
	,CONVERT(decimal(18,4), TotalMiscChrg) AS TotalMiscChrg
	--,NULL AS VATAmount
	,CONVERT(decimal(18,4), ExchangeRate) AS ExchangeRate -- first date and the latest date invoice can have different curr.rates, not neccessarily who is the lagest, so average them --
	,TRIM(Currency) AS Currency
	,IIF(SUM(CONVERT(decimal(18,4), PurchaseInvoiceQty)) < 0, '1', '0') AS CreditMemo
	,TRIM(PurchaserName) AS PurchaserName
	,TRIM(WarehouseCode) AS WarehouseCode
	,TRIM(PurchaseChannel) AS PurchaseChannel
	,TRIM(Comment) AS Comment
	,(CreatedTime) AS PIRes1
	--,'' AS PIRes2
	--,'' AS PIRes3
FROM stage.SVE_SE_PurchaseInvoice
WHERE TRIM(PurchaseInvoiceNum) <> '' AND ActualRecieveDate > '20180101' --and (CONVERT(decimal(18,4), PurchaseInvoiceQty)) != 0

GROUP BY
	PartitionKey, Company, PurchaseOrderNum, PurchaseOrderLine, PurchaseOrderSubLine, PurchaseOrderType, PurchaseInvoiceNum, PurchaseInvoiceLine, PurchaseInvoiceDate, ActualRecieveDate, ActualShipDate, CreatedTime
	, SupplierNum, PartNum, UoM, PurchaserName, ExchangeRate, PurchaseChannel, Currency, Comment, CreditMemo, WarehouseCode, DiscountPercent, DiscountAmount, TotalMiscChrg, Kost, UnitPrice
--HAVING SUM(CONVERT(decimal(18,4), PurchaseInvoiceQty)) != 0
	--, PurchaseInvoiceQty, ActualDelivDate, CreatedTime
GO
PRINT N'Creating [stage].[HAK_FI_Warehouse]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[HAK_FI_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseID] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[WarehouseName] [nvarchar] (100) NULL,
[WarehouseDistrict] [nvarchar] (50) NULL,
[WarehouseAddress] [nvarchar] (100) NULL,
[WarehouseType] [nvarchar] (50) NULL,
[WarehouseCountry] [nvarchar] (50) NULL,
[Site] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vHAK_FI_Warehouse]'
GO

CREATE VIEW [stage].[vHAK_FI_Warehouse] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([WarehouseCode])) AS [WarehouseCode]
	,[WarehouseName]
	,[WarehouseDistrict]
	,[WarehouseAddress]
	--,'' AS [WarehouseDescription]
	,[WarehouseType]
	,[WarehouseCountry]
	,[Site] AS [WarehouseSite]
FROM [stage].[HAK_FI_Warehouse]

GROUP BY 
	PartitionKey,[Company],[WarehouseCode],[WarehouseName],[WarehouseDistrict],[WarehouseAddress],[WarehouseType],[WarehouseCountry],[Site]
GO
PRINT N'Creating [dm_PT].[fctProductionOrder]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO

CREATE VIEW [dm_PT].[fctProductionOrder]
AS
SELECT ProductionOrderID
	  ,CustomerID
	  ,PartID
	  ,WarehouseID
	  ,SalesOrderNumID
	  ,CostUnitID
	  ,CompanyID
      ,dm.[Company]
      ,[ProductionOrderNum]
      ,[ProductionOrderLineNum]
      ,[ProductionOrderSubLineNum]
      ,[PartNum]
      ,[Version]
      ,[UoM]
      ,[PartType]
      ,[OrderQuantity]
      ,[ScrappedQty]
      ,[CompletedQuantity]
      ,[RemainingQty]
      ,[Status]
      ,[CurrentOperationStage]
      ,[CurrentResourceGroup]
      ,[OrderCreateDate]
      ,[RequestedEndDate]
      ,[PlannedStartDate]
      ,[PlannedEndDate]
      ,[StartDate]
      ,[EndDate]
      ,[OrderType]
      ,[TotalHoursPlanned]
      ,[TotalHoursSpent]
      ,[SetupHoursSpent]
      ,[MaterialCost]
      ,[LabourCost]
      ,[OtherCost]
      ,[Currency]
      ,[ExchangeRate]
      ,[WarehouseCode]
      ,[BinNum]
      ,[CostUnitNum]
      ,[SalesOrderNum]
      ,[CustomerNum]
      ,[ProductionOrderCreaterName]
      ,[BatchNum]
FROM dm.FactProductionOrder as dm
INNER JOIN (
select distinct Company
from dbo.Company com
WHERE com.BusinessArea = 'Power Transmission Solutions' AND com.[Status] = 'Active'
) AS aux
	ON dm.Company = aux.Company;
GO
PRINT N'Creating [stage].[ACO_UK_RLS]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[ACO_UK_RLS]
(
[Value] [nvarchar] (200) NULL,
[Email] [nvarchar] (200) NOT NULL,
[All] [smallint] NULL,
[RLSType] [nvarchar] (200) NULL
)
GO
PRINT N'Creating [stage].[vACO_UK_RLS]'
GO
/****** Script for SelectTopNRows command from SSMS  ******/

create view [stage].[vACO_UK_RLS] AS

SELECT 
		CONCAT('ACORNUK', '-',[Email],'-',[Value],'-',RLSType) AS EmailID
		,FORMAT(GETDATE(),'yyyy-MM-dd hh:mm:ss') AS PartitionKey
		,'ACORNUK'	AS Company
	  ,[Value]	AS [Name]
      ,[Email]
      ,[RLSType]
  FROM [stage].[ACO_UK_RLS]
GO
PRINT N'Creating [dm_ALL].[fctPurchaseOrderDistinct]'
GO

CREATE VIEW [dm_ALL].[fctPurchaseOrderDistinct] AS

SELECT  [PurchaseOrderNumID]
,[CompanyID]
,[SupplierID]
,[PurchaseOrderNum]
,[Company]
,[Supplier]

FROM dm.FactPurchaseOrderDistinct
GO
PRINT N'Creating [stage].[vAXHSE_HQ_OpenBalance]'
GO







/****** Script for SelectTopNRows command from SSMS  ******/
CREATE VIEW [stage].[vAXHSE_HQ_OpenBalance] AS
SELECT distinct	--We use distinct because AccountNum = 8316 and 8317 have what looks like duplicate rows. But they all have opening balance 0 so it doesn't matter much /SM 2021-12-17
		
	  CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', JournalDate, '#', AccountNum, '#', CostUnitNum ))) AS OpenBalanceID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', AccountNum ))) AS AccountID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', RIGHT('000000' + [CostUnitNum], 6 ) ))) AS CostUnitID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', CostBearerNum ))) AS CostBearerID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', '' ))) AS ProjectID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',Company)) AS CompanyID
	  ,CONVERT(varchar, GETDATE(), 23) AS PartitionKey
      ,[Company]
      ,[AccountNum]
      ,RIGHT('000000'+ [CostUnitNum], 6 ) AS  [CostUnitNum]
      ,[CostBearerNum]
      ,[ProjectNum]
      ,[JournalType]
      ,[JournalDate]
	  ,[JournalDate] as AccountingDate
      ,[Description]
      ,[OpeningBalance]
      ,[Currency]
      ,[ExchangeRate]
      ,[OBRes1]
      ,[OBRes2]
      ,[OBRes3]
  FROM [stage].[AXI_HQ_OpenBalance]
  where upper(Company) = 'AXHSE'
/*
  union 

  SELECT distinct	
		
	  CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', TransactionDate, '#', AccountNum))) AS OpenBalanceID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', AccountNum ))) AS AccountID
	  ,NULL	 AS CostUnitID
	  ,NULL  AS CostBearerID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', '' ))) AS ProjectID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',Company)) AS CompanyID
	  ,CONVERT(varchar, GETDATE(), 23) AS PartitionKey

      ,[Company]
      ,[AccountNum]
	  ,[AccountingDate]
	  ,'OB' AS JournalType
      ,concat ('OpenBalance', '-' ,[Description]) as "Description"
      ,[Opening Balance]						  as [OpeningBalance]
	  ,[TransactionDate]						  as [JournalDate]
      ,NULL AS  [CostUnitNum]
      ,NULL AS	[CostBearerNum]
      ,NULL AS	[ProjectNum]
      ,NULL AS	[Currency]
      , 1	AS	[ExchangeRate]
      ,NULL AS	[OBRes1]
      ,NULL AS	[OBRes2]
      ,NULL AS	[OBRes3]



  FROM [stage].[AXHSE_HQ_OpenBalance_sharepoint]
  where upper(Company) = 'AXHSE'
*/
GO
PRINT N'Creating [stage].[AXL_DC_OLine]'
GO
CREATE TABLE [stage].[AXL_DC_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[NeedbyDate] [date] NULL,
[ExpDelivDate] [date] NULL,
[EDCExpDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (10) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[SalesPerson] [nvarchar] (50) NULL,
[WareHouseCode] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[BusinessChain] [nvarchar] (50) NULL,
[SalesOrderCategory] [nvarchar] (50) NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL,
[PartDesc] [nvarchar] (max) NULL,
[APV_Cost_EUR] [nvarchar] (50) NULL,
[APV_Item] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXL_DC_OLine]'
GO
CREATE VIEW [stage].[vAXL_DC_OLine] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(PartDesc))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum), '#', (IIF(TRIM([PartNum]) LIKE 'IACO%' , 'MISC. CHARGES', TRIM(PartDesc) )) )))) AS PartID
	,CONVERT(int, replace(convert(date, OrderDate), '-', '')) AS SalesOrderDateID
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine))) AS SalesOrderCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(CustNum) AS CustomerNum 
	,TRIM(OrderNum) AS [SalesOrderNum]
	,TRIM(OrderLine) AS [SalesOrderLine]
	,TRIM(OrderSubLine) AS [SalesOrderSubLine]
	,CONVERT(nvarchar(50), TRIM(OrderType)) AS [SalesOrderType]
	,TRIM([SalesOrderCategory]) AS [SalesOrderCategory]
	,OrderDate AS [SalesOrderDate]
	,NeedbyDate
	,ExpDelivDate AS [ExpDelivDate]
	,EDCExpDelivDate
	,ActualDelivDate
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,OrderQty AS [SalesOrderQty]
	,DelivQty
	,RemainingQty
	,Unit AS [UoM]
	,UnitPrice
	,UnitCost
	,LEFT(TRIM(Currency), 3) AS Currency
	,ExchangeRate
	,LEFT(TRIM(OpenRelease), 1) AS OpenRelease
	,DiscountAmount
	,DiscountPercent
	,NULL AS CashDiscOffered
	,NULL AS CashDiscUsed
	,TRIM(PartNum) AS PartNum
	,UPPER(PartDesc) AS PartDesc
	,'' AS [PartType]
	,CONVERT(nvarchar(50), PartStatus) AS PartStatus
	,TRIM(SalesPerson) AS [SalesPersonName]
	,TRIM(WareHouseCode) AS WarehouseCode
	,'' AS IndexKey
	,TRIM(SalesChannel) AS SalesChannel
	,TRIM(BusinessChain) AS [Department]
	,Res3 AS [ProjectNum] -- = FreeOfCharge: Y = yes, N = no
	,'' AS Cancellation
	,Res1 AS SORes1
	,Res2 AS SORes2
	,Res3 AS SORes3
FROM stage.AXL_DC_OLine
WHERE OrderDate >= '2015-01-01'
GO
PRINT N'Creating [stage].[SUM_UK_Customer]'
GO
CREATE TABLE [stage].[SUM_UK_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (12) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[MainCustomerName] [nvarchar] (100) NULL,
[CustomerName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[AddressLine3] [nvarchar] (100) NULL,
[TelephoneNumber1] [nvarchar] (50) NULL,
[PHONE2] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[CITY] [nvarchar] (50) NULL,
[STATE] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[Email] [nvarchar] (500) NULL,
[CCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (100) NULL,
[Division] [nvarchar] (50) NULL,
[CustomerIndustry] [nvarchar] (50) NULL,
[CustomerSubIndustry] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[SalesPersonResponsible] [nvarchar] (100) NULL,
[VATRegNo] [nvarchar] (50) NULL,
[AccountString] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[CustomerType] [nvarchar] (50) NULL,
[CustomerABC] [nvarchar] (50) NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vSUM_UK_Customer]'
GO
CREATE VIEW [stage].[vSUM_UK_Customer] AS 
SELECT 
	PartitionKey,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(dbo.summers())))) AS CompanyID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(dbo.summers()),'#',TRIM(CustomerNum))))) AS CustomerID,
	UPPER(TRIM(dbo.summers())) as Company,
	CustomerNum,
	MainCustomerName,
	CustomerName,
	AddressLine1,
	AddressLine2,
	AddressLine3,
	TelephoneNumber1,
	PHONE2,
	ZipCode,
	CITY,
	STATE,
	CCode,
	TRIM(CountryName) as CountryName,
	Division,
	CustomerIndustry,
	CustomerSubIndustry,
	CustomerGroup,
	CustomerSubGroup,
	nullif(trim(SalesRepCode),'') as SalesRepCode,
	VATRegNo

FROM 
	 stage.SUM_UK_Customer
GO
PRINT N'Creating [stage].[AXL_IT_SOLine]'
GO
CREATE TABLE [stage].[AXL_IT_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[InvoiceType] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (22, 8) NULL,
[UnitCost] [decimal] (22, 8) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[VAT] [decimal] (18, 4) NULL,
[CashDiscountOffered] [decimal] (18, 4) NULL,
[CashDiscountUsed] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OrderType] [nvarchar] (50) NULL,
[SalesChannel] [varchar] (10) NULL,
[BusinessChain] [varchar] (10) NULL,
[Res1] [varchar] (100) NULL,
[Res2] [varchar] (100) NULL,
[Res3] [varchar] (100) NULL,
[PartDesc] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[vAXL_IT_SOLine]'
GO
CREATE VIEW [stage].[vAXL_IT_SOLine] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine), '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(PartNum), '#', TRIM(PartDesc))))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(PartDesc))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(InvoiceNum))))) AS SalesLedgerID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum), '#', (IIF(TRIM([PartNum]) LIKE 'IACO%' , 'MISC. CHARGES', TRIM([PartDesc]))))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT(int, IIF(InvoiceDate = '', 19900101, replace(convert(date, InvoiceDate), '-', ''))) AS SalesInvoiceDateID
	,UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine))) AS SalesInvoiceCode
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine))) AS SalesOrderCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(SalesPerson) AS SalesPersonName
	,TRIM(CustNum) AS [CustomerNum]
	,TRIM(PartNum) AS PartNum
	,UPPER(PartDesc) AS PartDesc
	,'' AS [PartType]
	,TRIM(OrderNum) AS [SalesOrderNum]
	,CAST(OrderLine AS text) AS [SalesOrderLine]
	,TRIM(OrderSubLine) AS [SalesOrderSubLine]
	,TRIM(OrderType) AS [SalesOrderType]
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,TRIM(InvoiceLine) AS [SalesInvoiceLine]
	,TRIM(InvoiceType) AS [SalesInvoiceType]
	,CASE WHEN InvoiceDate = '' THEN '1900-01-01' ELSE CONVERT(date, InvoiceDate) END AS [SalesInvoiceDate]
	,ActualDeliveryDate AS [ActualDelivDate]
	,SellingShipQty AS [SalesInvoiceQty]
	,TRIM(Unit) AS [UoM]
	,UnitPrice
	,UnitCost
	,DiscountAmount
	,IIF(UnitPrice*SellingShipQty = 0, 0, DiscountAmount/UnitPrice*SellingShipQty) AS DiscountPercent
	,CONVERT(decimal(18,4), CashDiscountOffered) AS [CashDiscOffered] 
	,CONVERT(decimal(18,4), CashDiscountUsed) AS [CashDiscUsed] 
	,TotalMiscChrg
	,VAT AS [VATAmount]
	,Currency
	,ExchangeRate
	,TRIM(CreditMemo) AS CreditMemo
	,TRIM([SalesChannel]) AS [SalesChannel]
	,TRIM([BusinessChain]) AS [Department]
	,TRIM(WarehouseCode) AS WarehouseCode
	,NULL AS [CostBearerNum]
	,NULL AS [CostUnitNum]
	,NULL AS [ReturnComment]
	,NULL AS [ReturnNum]
	,NULL AS [ProjectNum]
	,'' AS [IndexKey]
	,Res1 AS SIRes1
	,Res2 AS SIRes2
	,Res3 AS SIRes3
FROM stage.AXL_IT_SOLine


	--,CASE WHEN OrderType = 'MD' THEN 1 
	--		WHEN OrderType = 'MT' THEN 2
	--		WHEN OrderType = 'MR' THEN 3
	--		WHEN OrderType = 'IV' THEN 4
	--		WHEN OrderType = 'Misc. Charges' THEN 5 --added after Ulf changes in the night /DZ
	--	ELSE OrderType END AS [SalesOrderType]

--GROUP BY
--	PartitionKey, Company, SalesPerson, CustNum, PartNum, PartDesc, OrderNum, OrderLine, OrderSubLine,OrderType, InvoiceNum, InvoiceLine, InvoiceDate, SellingShipQty, UnitPrice, UnitCost, DiscountAmount, TotalMiscChrg, WarehouseCode, CreditMemo, ActualDeliveryDate, Currency, ExchangeRate, InvoiceType, Res1, Res2, Res3, Unit, VAT, SalesChannel, BusinessChain, CashDiscountOffered, CashDiscountUsed
GO
PRINT N'Creating [stage].[CER_NO_Part]'
GO
CREATE TABLE [stage].[CER_NO_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartDescription] [nvarchar] (max) NULL,
[PartDescription2] [nvarchar] (max) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[ProductGroup2] [nvarchar] (50) NULL,
[Brand] [nvarchar] (50) NULL,
[CommodityCode] [nvarchar] (50) NULL,
[CountryOfOrigin] [nvarchar] (50) NULL,
[NetWeight] [decimal] (18, 4) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[MinOrderQty] [decimal] (18, 4) NULL,
[ReorderLevel] [decimal] (18, 4) NULL,
[ItemStatus] [int] NULL
)
GO
PRINT N'Creating [stage].[vCER_NO_Part]'
GO
CREATE VIEW [stage].[vCER_NO_Part] AS
--COMMENT EMPTY FIELDS / ADD TRIM()UPPER() INTO PartID 2022-12-16 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company),'#',TRIM([PartNum]))))) AS PartID
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company,'#',TRIM([PartNum])))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',Company)) AS CompanyID
	,CONCAT(Company,'#',[PartNum]) AS PartCode
	,PartitionKey

	,Company
	,TRIM([PartNum]) AS [PartNum]
	--,'' AS [PartName]
	,[PartDescription]
	,[PartDescription2]
	--,'' AS [PartDescription3]
	--,NULL AS MainSupplier
	--,NULL AS AlternativeSupplier
	,[ProductGroup]
	,[ProductGroup2]
	--,'' AS [ProductGroup3]
	--,'' AS [ProductGroup4]
	,[Brand]
	,[CommodityCode]
	--,'' PartReplacementNum
	,[ItemStatus] AS PartStatus
	,[CountryOfOrigin]
	,[NetWeight]
	--,'' AS UoM
	--,'' AS [Material]
	--,'' AS [Barcode]
	,MAX([ReorderLevel]) AS [ReOrderLevel]
	--,'' AS PartResponsible
	--,'' AS [StartDate]
	--,'' AS [EndDate]
	,MAX([MinOrderQty]) AS [MinOrderQty]
	,MAX([SupplierCode]) AS [SupplierCode]
FROM 
	[stage].[CER_NO_Part]
GROUP BY
	PartitionKey, Company, [PartNum], [PartDescription], [PartDescription2], [ProductGroup], [ProductGroup2], [Brand], [CommodityCode], [CountryOfOrigin], [NetWeight], [ItemStatus]--, [ReorderLevel], [MinOrderQty], [SupplierCode]
GO
PRINT N'Creating [dm_PT].[dimSalesOrderDistinct]'
GO




CREATE VIEW [dm_PT].[dimSalesOrderDistinct] AS

SELECT sod.[CompanyID]
,sod.[Company]
,sod.[SalesOrderNumID]
,sod.[SalesOrderNum]
,sod.[CustomerID]
,sod.[Customer]
,sod.[SalesPersonName]
,sod.[SalesChannel]
,sod.[AxInterSalesChannel]
,sod.[Department]
FROM dm.DimSalesOrderDistinct sod
--LEFT JOIN dbo.Company com ON sod.Company = com.Company
--WHERE com.BusinessArea = 'Power Transmission Solutions' AND com.[Status] = 'Active'

WHERE [Company] in ('ACZARKOV', 'AcornUK', 'BSIBELL', 'JDKJENSS', 'JDKKALTE', 'JFIJENSS', 'MNLMAK', 'JNOJENSS', 'NORNO', 'JSEJENSS', 'SSWSE', 'NomoSE', 'NomoDK', ' NomoFI', 'NomoNo', 'PASSEROT', 'SKSSCOFI', 'SCOFI', 'SMKFI', 'SNLSPRUI', 'SPRUITNL', 'SVESE')  -- The PT basket
	 --AND InvoiceDate >=  DATEADD(YEAR,-5, GETDATE())  -- Added to decrease SSAS memory usage /SM 2021-04-26
GO
PRINT N'Creating [stage].[SVE_SE_Customer]'
GO
CREATE TABLE [stage].[SVE_SE_Customer]
(
[PartitionKey] [nvarchar] (50) NULL,
[Company] [nvarchar] (8) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[MainCustomerName] [nvarchar] (max) NULL,
[CustomerName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (max) NULL,
[AddressLine3] [nvarchar] (max) NULL,
[TelephoneNum1] [nvarchar] (50) NULL,
[TelephoneNum2] [nvarchar] (50) NULL,
[Email] [nvarchar] (100) NULL,
[ZipCode] [nvarchar] (50) NULL,
[City] [nvarchar] (100) NULL,
[State] [nvarchar] (max) NULL,
[SalesDistrict] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[Division] [nvarchar] (max) NULL,
[CustomerIndustry] [nvarchar] (50) NULL,
[CustomerSubIndustry] [nvarchar] (max) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (max) NULL,
[SalesPersonCode] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[SalesPersonResponsible] [nvarchar] (50) NULL,
[VATNum] [nvarchar] (50) NULL,
[AccountNum] [nvarchar] (max) NULL,
[InternalExternal] [nvarchar] (max) NULL,
[CustomerScore] [nvarchar] (50) NULL,
[CustomerType] [nvarchar] (50) NULL,
[CRes1] [nvarchar] (max) NULL,
[CRes2] [nvarchar] (max) NULL,
[CRes3] [nvarchar] (max) NULL
)
GO
PRINT N'Creating index [IX_SVE_SE_Customer] on [stage].[SVE_SE_Customer]'
GO
CREATE NONCLUSTERED INDEX [IX_SVE_SE_Customer] ON [stage].[SVE_SE_Customer] ([CustomerNum])
GO
PRINT N'Creating [stage].[vSVE_SE_Customer]'
GO
CREATE VIEW  [stage].[vSVE_SE_Customer] AS
--ADD UPPER() TRIM() INTO CustomerID 23-01-03 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum)))))   AS CustomerID
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustomerNum)))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [Company])) AS CompanyID
	,CONCAT([Company], '#', TRIM([CustomerNum])) AS CustomerCode
	,PartitionKey

	,[Company]
	,TRIM(CustomerNum) AS [CustomerNum]
	,(TRIM([MainCustomerName])) AS [MainCustomerName]
	,(TRIM(CustomerName)) AS [CustomerName]
	,TRIM([AddressLine1]) AS [AddressLine1]
	,TRIM([AddressLine2]) AS [AddressLine2]
	,TRIM([AddressLine3]) AS [AddressLine3]
	,TRIM([TelephoneNum1]) AS [TelephoneNum1]
	,TRIM([TelephoneNum2]) AS [TelephoneNum2]
	,TRIM([Email]) AS [Email]
	,TRIM([ZipCode]) AS [ZipCode]
	,TRIM(SUBSTRING(REPLACE([City], ' ', ''), 6, 100)) AS [City]
	,TRIM([State]) AS [State]
	,TRIM([SalesDistrict]) AS [SalesDistrict]
	,CASE 
		WHEN TRIM([CountryName]) = 'Sverige' AND [CountryCode] = '' THEN 'SE'
		WHEN TRIM([CountryName]) = 'Sverige' AND [CountryCode] IS NULL THEN 'SE'
		WHEN TRIM([CountryName]) is null AND [CountryCode] IS NULL THEN 'SE'
		ELSE TRIM([CountryCode]) END AS [CountryCode]
	,IIF(TRIM([CountryName]) = '', 'Sverige', TRIM([CountryName])) AS [CountryName]
	,TRIM([Division]) AS [Division]
	,TRIM([CustomerIndustry]) AS [CustomerIndustry]
	,TRIM([CustomerSubIndustry]) AS [CustomerSubIndustry]
	,TRIM([CustomerGroup]) AS [CustomerGroup]
	,TRIM([CustomerSubGroup]) AS [CustomerSubGroup]
	,TRIM([SalesPersonCode]) AS [SalesPersonCode]
	,(TRIM([SalesPersonName])) AS [SalesPersonName]
	,TRIM([SalesPersonResponsible]) AS [SalesPersonResponsible]
	,[VATNum] AS [VATNum]
	--,'' AS OrganizationNum
	,[AccountNum] AS [AccountNum]
	,TRIM([InternalExternal]) AS [InternalExternal]
	,TRIM([CustomerScore]) AS [CustomerScore]
	,TRIM([CustomerType]) AS [CustomerType]
	,TRIM([AddressLine1]) AS [AddressLine]
	,CONCAT((TRIM(Countryname)), + ', ' + TRIM(SUBSTRING(REPLACE([City], ' ', ''), 6, 100)), + ', ' + TRIM([ZipCode]), + ', ' + TRIM(addressline1)) AS [FullAddressLine]
FROM [stage].[SVE_SE_Customer]
GO
PRINT N'Creating [dm_ALL].[fctSalesOrder]'
GO
CREATE VIEW [dm_ALL].[fctSalesOrder] AS

SELECT 
[SalesOrderID]
,[SalesOrderNumID]
,[CustomerID]
,[CompanyID]
,[PartID]
,[WarehouseID]
,[ProjectID]
,[SalesPersonNameID]
,[DepartmentID]
,[SalesOrderDateID]
,[Company]
,[CustomerNum]
,[SalesOrderNum]
,[SalesOrderLine]
,[SalesOrderSubLine]
,[SalesOrderType]
,[SalesOrderCategory]
,[SalesOrderDate]
,[NeedbyDate]
,[ExpDelivDate]
,[ConfirmedDelivDate]
,[SalesInvoiceNum]
,[SalesOrderQty]
,[DelivQty]
,[RemainingQty]
,[UoM]
,[UnitPrice]
,[UnitCost]
,[Currency]
,[ExchangeRate]
,[OpenRelease]
,[OrderStatus]
,[DiscountAmount]
,[DiscountPercent]
,[PartNum]
,[PartType]
,[PartStatus]
,[SalesPersonName]
,[WarehouseCode]
,[SalesChannel]
,[AxInterSalesChannel]
,[Department]
,[ProjectNum]
,[ActualDelivDate]
,[SalesInvoiceQty]
,[TotalMiscChrg]
,[IsUpdatingStock]
,[SORes1]
,[SORes2]
,[SORes3]
,[SORes4]
,[SORes5]
,[SORes6]
FROM dm.FactSalesOrder
GO
PRINT N'Creating [stage].[OCS_SE_Budget]'
GO
CREATE TABLE [stage].[OCS_SE_Budget]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[YearMonth] [nvarchar] (50) NOT NULL,
[CustomerNum] [nvarchar] (50) NULL,
[ProjectNum] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (200) NULL,
[BudgetDescription] [nvarchar] (500) NULL,
[BudgetSales] [decimal] (18, 4) NULL,
[BudgetCost] [decimal] (18, 4) NULL,
[BudgetGrossProfit] [decimal] (18, 4) NULL,
[BudgetGrossMargin] [decimal] (18, 4) NULL,
[AccountNum] [nvarchar] (50) NULL,
[BudgetNo] [nvarchar] (50) NULL,
[LnNo] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vOCS_SE_Budget]'
GO

CREATE VIEW [stage].[vOCS_SE_Budget] AS
--Some troubles with finding a column combination for PK
WITH CTE AS (
SELECT distinct
	 PartitionKey
 	  ,[Company]
	  ,ProjectNum
	  ,AccountNum
      ,YearMonth
      ,CustomerNum
	  ,[ProductGroup]
      ,[CustomerGroup]
	  ,SalesPersonName
	  ,[BudgetDescription]
      ,BudgetSales 
      ,BudgetCost
	  ,BudgetGrossProfit AS GrossProfitInvoiced
	  ,BudgetGrossMargin AS [GrossMarginInvoicedPercent]
	  ,BudgetNo
	  ,ROW_NUMBER() OVER (PARTITION BY [AccountNum], CustomerNum, YearMonth, ProjectNum, BudgetDescription ORDER BY BudgetSales, BudgetCost) AS RowNum
	   FROM [stage].[OCS_SE_Budget]
	   WHERE YearMonth <> 0 AND AccountNum >= '3000'
)

--COMMENT EMPTY FIELDS // ADD TRIM() INTO CustomerID 2022-12-21 VA
SELECT 
	 CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#', YearMonth, '#', TRIM(CustomerNum), '#', TRIM(ProjectNum), '#', TRIM(AccountNum), '#',  TRIM([BudgetDescription]), '#', RowNum )))) AS BudgetID
	 ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID
	 --,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(CustomerNum))))) AS CustomerID
	 ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	 ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([ProductGroup]))))) AS PartID
	 ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',null)))) AS WarehouseID
	 ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',ProjectNum)))) AS ProjectID
	 ,PartitionKey
	 ,CAST(YearMonth AS int)*100 + 1	AS BudgetPeriodDateID
 	  ,[Company]
	  ,YearMonth AS BudgetPeriod
      ,CAST(LEFT(YearMonth,4) + '-' + RIGHT(YearMonth,2) + '-' + '01' AS date)	AS BudgetPeriodDate 
	  ,'Monthly' AS PeriodType
      ,CustomerNum AS CustomerNum
	  ,[ProductGroup] AS  PartNum
	  ,[ProductGroup]
      ,[CustomerGroup]
      --, '' AS SalesPersonCode
	  ,SalesPersonName
	  ,CASE WHEN BudgetNo = '5' THEN '5 Calculation'
			WHEN BudgetNo = '6' THEN '6 CR'
			WHEN BudgetNo = '50' THEN '50 Additional costs'
			END AS BudgetType
	  ,LEFT([BudgetDescription],100) AS BudgetName
	  ,[BudgetDescription]
      ,CASE WHEN CAST(AccountNum as int) BETWEEN 3000 and 3999 THEN  BudgetSales - BudgetCost ELSE 0 END	AS BudgetSales
      ,CASE WHEN CAST(AccountNum as int) >= 4000 THEN  BudgetCost - BudgetSales ELSE 0 END	AS BudgetCost
	  ,'SEK' AS Currency
	  --,0	AS BudgetFinance
	  ,GrossProfitInvoiced
	  ,[GrossMarginInvoicedPercent]
	  --,'' AS WarehouseCode
	  --,'' AS CostBearerNum
	  --,'' AS CostUnitNum
	  ,ProjectNum
	  ,AccountNum
	  --,'' AS AccountGroupNum
	  --,'' AS BRes1
	  --,'' AS BRes2
	  --,'' AS BRes3
	   FROM CTE
GO
PRINT N'Creating [stage].[CER_DK_PurchaseLedger]'
GO
CREATE TABLE [stage].[CER_DK_PurchaseLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[DueDate] [date] NULL,
[PurchaseInvoiceDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[InvoiceAmount] [decimal] (18, 4) NULL,
[RemainingInvoiceAmount] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[Currency] [nchar] (10) NULL,
[VATAmount] [decimal] (18, 4) NULL,
[VATCode] [nvarchar] (50) NULL,
[PayToName] [nvarchar] (200) NULL,
[PayToCity] [nvarchar] (100) NULL,
[PayToContact] [nvarchar] (100) NULL,
[PaymentTerms] [nvarchar] (100) NULL,
[PrePaymentNum] [nvarchar] (50) NULL,
[LastPaymentNum] [nvarchar] (50) NULL,
[PLRes1] [nvarchar] (100) NULL,
[PLRes2] [nvarchar] (100) NULL,
[PLRes3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vCER_DK_PurchaseLedger]'
GO












CREATE VIEW [stage].[vCER_DK_PurchaseLedger] AS

SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company, '#', SupplierNum, '#', PurchaseInvoiceNum))) AS PurchaseLedgerID
	,CONCAT(Company,'#',SupplierNum, '#', PurchaseInvoiceNum) AS PurchaseLedgerCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',Company)) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',PurchaseInvoiceNum))) AS PurchaseInvoiceID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(''))))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM(Currency)))) AS CurrencyID --Redundant?
	,CONVERT(int, replace(convert(date,PurchaseInvoiceDate),'-','')) AS PurchaseInvoiceDateID  --Redundant?
	,PartitionKey

	,Company
	,COALESCE(SupplierNum, '') AS SupplierNum
	,PurchaseOrderNum
	,PurchaseInvoiceNum
	--,SupplierInvoiceNum
	,[PurchaseInvoiceDate]
	,DueDate	AS PurchaseDueDate
	,CONVERT(date, LastPaymentDate) AS PurchaseLastPaymentDate
	,[InvoiceAmount]	AS InvoiceAmount
	,[InvoiceAmount] - [RemainingInvoiceAmount] AS PaidInvoiceAmount
	,[RemainingInvoiceAmount]	AS RemainingInvoiceAmount
	,CASE WHEN [RemainingInvoiceAmount] ='0' THEN 'Settled'
	WHEN [RemainingInvoiceAmount] <>'0' AND DATEDIFF(DAY, DueDate, GETDATE())<'-7' THEN 'Not Due Yet'
	WHEN [RemainingInvoiceAmount] <>'0' AND DATEDIFF(DAY, DueDate, GETDATE())BETWEEN '-7' AND '0' THEN 'Due in (0-7)'
	WHEN [RemainingInvoiceAmount] <>'0' AND DATEDIFF(DAY, DueDate, GETDATE())BETWEEN '1' AND '14' THEN 'Overdue (1-14)'
	WHEN [RemainingInvoiceAmount] <>'0' AND DATEDIFF(DAY, DueDate, GETDATE())BETWEEN '15' AND '30' THEN 'Overdue (15-30)'
	WHEN [RemainingInvoiceAmount] <>'0' AND DATEDIFF(DAY, DueDate, GETDATE())BETWEEN '31' AND '60' THEN 'Overdue (31-60)'
	WHEN [RemainingInvoiceAmount] <>'0' AND DATEDIFF(DAY, DueDate, GETDATE())>'60' THEN 'Overdue (60>)'
	ELSE '' END AS [AgingPeriod]
	,CASE WHEN [RemainingInvoiceAmount] ='0' THEN 0
	WHEN [RemainingInvoiceAmount] <>'0' AND DATEDIFF(DAY, DueDate, GETDATE())<'-7' THEN 1
	WHEN [RemainingInvoiceAmount] <>'0' AND DATEDIFF(DAY, DueDate, GETDATE())BETWEEN '-7' AND '0' THEN 2
	WHEN [RemainingInvoiceAmount] <>'0' AND DATEDIFF(DAY, DueDate, GETDATE())BETWEEN '1' AND '14' THEN 3
	WHEN [RemainingInvoiceAmount] <>'0' AND DATEDIFF(DAY, DueDate, GETDATE())BETWEEN '15' AND '30' THEN 4
	WHEN [RemainingInvoiceAmount] <>'0' AND DATEDIFF(DAY, DueDate, GETDATE())BETWEEN '31' AND '60' THEN 5
	WHEN [RemainingInvoiceAmount] <>'0' AND DATEDIFF(DAY, DueDate, GETDATE())>'60' THEN 6
	ELSE 7 END AS [AgingSort]
	,COALESCE([Currency], 'DKK') AS Currency
	,ExchangeRate
	,VATAmount
	,[VATCode]
	,'' AS PayToName
	,'' AS PayToCity
	,'' AS PayToContact
	,'' AS PaymentTerms
	,'' AS PrePaymentNum
	,'' AS LastPaymentNum
	,''	AS [VATCodeDesc]
	,'' AS [LinkToOriginalInvoice]
	,PLRes1
	,PLRes2
	,PlRes3
	,'1900-01-01' AS AccountingDate
FROM 
	stage.CER_DK_PurchaseLedger
GO
PRINT N'Creating [stage].[CER_DK_Supplier]'
GO
CREATE TABLE [stage].[CER_DK_Supplier]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[MainSupplierName] [nvarchar] (100) NULL,
[SupplierName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[AddressLine3] [nvarchar] (100) NULL,
[TelephoneNum] [nvarchar] (50) NULL,
[Email] [nvarchar] (200) NULL,
[ZipCode] [nvarchar] (50) NULL,
[City] [nvarchar] (100) NULL,
[District] [nvarchar] (100) NULL,
[Country] [nvarchar] (10) NULL,
[CountryName] [nvarchar] (100) NULL,
[Region] [nvarchar] (50) NULL,
[SupplierCategory] [nvarchar] (100) NULL,
[SupplierResponsible] [nvarchar] (100) NULL,
[AccountNum] [nvarchar] (50) NULL,
[VATNum] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[CodeOfConduct] [nvarchar] (500) NULL,
[SupplierScore] [nvarchar] (50) NULL,
[MinOrderQty] [decimal] (18, 4) NULL,
[MinOrderValue] [decimal] (18, 4) NULL,
[Website] [nvarchar] (500) NULL,
[Comments] [nvarchar] (500) NULL,
[SRes1] [nvarchar] (50) NULL,
[SRes2] [nvarchar] (50) NULL,
[SRes3] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (10) NULL
)
GO
PRINT N'Creating [stage].[vCER_DK_Supplier]'
GO

CREATE VIEW [stage].[vCER_DK_Supplier] AS
--ADD TRIM() SupplierID 23-01-23 VA
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID
--	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT([Company],'#',TRIM([SupplierNum]))))) AS SupplierID
    ,UPPER(CONCAT([Company],'#',TRIM([SupplierNum]))) AS SupplierCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256',[Company])) AS CompanyID
	,[PartitionKey]

	,Company
	,UPPER(TRIM([SupplierNum])) AS SupplierNum
	,[dbo].[ProperCase](TRIM(MainSupplierName)) AS MainSupplierName
	,[dbo].[ProperCase](TRIM(SupplierName)) AS SupplierName
	,TRIM([AddressLine1]) AS AddressLine1
    ,TRIM([AddressLine2]) AS AddressLine2
    ,TRIM([AddressLine3]) AS AddressLine3
	,[TelephoneNum]
	,[Email]
	,TRIM([ZipCode]) AS ZipCode
	,TRIM([City]) AS City
	,District
	,CountryName
	,[Region] 
	,TRIM([SupplierCategory]) AS SupplierCategory 
	,TRIM([SupplierResponsible]) AS SupplierResponsible
	,[dbo].[ProperCase](TRIM(concat (addressline1+' '+ addressline2, null))) AS AddressLine
	,[dbo].[ProperCase](TRIM(concat_ws(',',coalesce([dbo].[ProperCase](CountryName),null),IIF(City= ' ',null,trim(substring(replace([dbo].[ProperCase](AddressLine3),' ', ''), 6, 100))),IIF(ZipCode= ' ',null,[dbo].[udf_GetNumeric]([Addressline3]))
		,coalesce(IIF([addressline1]= ' ',null,[addressline1]),IIF([addressline2]= ' ',null,[addressline2]))
		,coalesce(IIF([addressline2]= ' ',null,[addressline2]),IIF([addressline3]= ' ',null,[addressline3]))))) AS FullAddressLine
	,[AccountNum] 
	,[VATNum]
	--,'' AS OrganizationNum
	,[InternalExternal]
	,[CodeOfConduct]
	--,'' AS CustomerNum
	,SupplierScore
	,[MinOrderQty]
	,MinOrderValue	
	,[Website]
	,TRIM([Comments]) AS Comments
	,SRes1
	,SRes2
	,SRes3
	,case when len(CountryCode) > 2 then LEFT(CountryCode,2)
	else CountryCode
	end as CountryCode
	,case when  left(SupplierCategory,1) in ('8','9') then '0' else '1' end as [IsMaterialSupplier]
FROM [stage].[CER_DK_Supplier]
/*GROUP BY 
      [PartitionKey],[Company],[SupplierNum],MainSupplierName,[SupplierName],[AddressLine1],[AddressLine2],[AddressLine3],[City],[ZipCode],[Region],District, [CountryName]
	  ,[SupplierCategory],[SupplierResponsible],[Reference],[AccountNum],[VATNum],[SupplierScore],[CustomerNum],[TelephoneNum],[Email],[Website],[CodeOfConduct]
	  ,[MinOrderQty],[InternalExternal],[Comments]
	  */
GO
PRINT N'Creating [stage].[OCS_SE_PurchaseClaims]'
GO
CREATE TABLE [stage].[OCS_SE_PurchaseClaims]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[ClaimNum] [nvarchar] (50) NULL,
[ClaimDescription] [nvarchar] (50) NULL,
[ClaimType] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[Comment] [nvarchar] (50) NULL,
[CLRes1] [nvarchar] (50) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vOCS_SE_PurchaseClaims]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vOCS_SE_PurchaseClaims] as

SELECT

--------------------------------------------- Keys/ IDs ---------------------------------------------
CONVERT(binary(32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(COMPANY), '#', TRIM(ClaimNum))))) AS ClaimID
--,CONVERT(binary(32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(COMPANY), '#', TRIM(CustomerNum))))) AS CustomerID
,CONVERT(binary(32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(COMPANY), '#', TRIM(SupplierNum))))) AS SupplierID
,CONVERT(binary(32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(COMPANY), '#', TRIM(PartNum))))) AS PartID
,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) as CompanyID
,PartitionKey

--------------------------------------------- Regular Fields ---------------------------------------------
---Mandatory Fields ---
,UPPER(TRIM(Company)) AS Company
,UPPER(TRIM(ClaimNum)) AS ClaimNum
,UPPER(TRIM(PartNum)) AS PartNum

--Valuable Fields ---
--,UPPER(TRIM(CustomerNum)) AS CustomerNum
--,UPPER(TRIM(SalesOrderNum)) AS SalesOrderNum
,UPPER(TRIM(SupplierNum)) AS SupplierNum
,UPPER(TRIM(PurchaseOrderNum)) AS PurchaseOrderNum
--,UPPER(TRIM(ClaimHandler)) AS ClaimHandler
--,UPPER(TRIM(ClaimResponsible)) AS ClaimResponsible
--,CASE WHEN CreateDate = '' OR CreateDate is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, CreateDate) END AS CreateDate
--,CASE WHEN StartDate = '' OR StartDate is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, StartDate) END AS StartDate
--,CASE WHEN EndDate = '' OR EndDate is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, EndDate) END AS EndDate
--,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
,UPPER(TRIM(Comment)) AS Comment

--- Good-to-have Fields ---
--,UPPER(TRIM(CreateTime)) AS CreateTime
--,UPPER(TRIM(StartTime)) AS StartTime
--,UPPER(TRIM(EndTime)) AS EndTime
--,UPPER(TRIM(SalesOrderLine)) AS SalesOrderLine
,UPPER(TRIM(PurchaseOrderLine)) AS PurchaseOrderLine
,UPPER(TRIM(ClaimDescription)) AS ClaimDescription
,UPPER(TRIM(ClaimType)) AS ClaimType
--,UPPER(TRIM(ClaimGroup)) AS ClaimGroup
--,UPPER(TRIM(ClaimPriority)) AS ClaimPriority

--------------------------------------------- Meta Data ---------------------------------------------
,CONVERT(date, CreatedTimeStamp) AS CreatedTimeStamp
,CONVERT(date, ModifiedTimeStamp) AS ModifiedTimeStamp
--,TRIM(IsActiveRecord) AS IsActiveRecord

--------------------------------------------- Extra Fields ---------------------------------------------
,UPPER(TRIM(CLRes1)) AS CLRes1
--,UPPER(TRIM(CLRes2)) AS CLRes2
--,UPPER(TRIM(CLRes3)) AS CLRes3

FROM
[stage].[OCS_SE_PurchaseClaims]
GO
PRINT N'Creating [stage].[JEN_DK_OLine]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[JEN_DK_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderRelNum] [nvarchar] (50) NULL,
[CustNumDel] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[ERPOrderStatus] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[NeedbyDate] [date] NULL,
[DelivDate] [date] NULL,
[ConfirmedDelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[SumUnitCost] [decimal] (18, 4) NULL,
[SumUnitPrice] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[CurrExchRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (1) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[Site] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[SalesPerson] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (500) NULL,
[SalesReturnOrderNum] [nvarchar] (50) NULL,
[SalesReturnInvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vJEN_DK_OLine]'
GO


CREATE VIEW [stage].[vJEN_DK_OLine]  AS
--COMMENT EMPTY FIELDS // ADD TRIM() INTO CustomerID,WarehouseID,PartID 2022-12-29 VA
--CUSTOMERNUM / PARTNUM 23-02-17 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(OrderRelNum), '#', TRIM(InvoiceNum), '#', TRIM(SalesReturnOrderNum), '#', TRIM(SalesReturnInvoiceNum))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company,'#',TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company),'#',TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) ))))) AS PartID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID 
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,UPPER(CONCAT(Company, '#', OrderNum, '#', OrderLine, '#', OrderSubLine, '#', InvoiceNum)) AS SalesOrderCode
	,CONVERT(int, replace(convert(date, OrderDate), '-', '')) AS SalesOrderDateID   --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', '') )))	AS ProjectID
	,PartitionKey 

	,UPPER(Company) AS Company 
	,TRIM(CustNum) AS CustomerNum
	,TRIM(OrderNum)		AS SalesOrderNum
	,TRIM(OrderLine)		AS SalesOrderLine
	,TRIM(OrderSubLine)	AS SalesOrderSubLine
	,TRIM(OrderType)		AS SalesOrderType
	,TRIM(ERPOrderStatus)	AS SalesOrderCategory	--Added ERPOrderStatus here because SalesOrderCategory is unused field for JENS S.
	,TRIM(OrderRelNum)	AS SalesOrderRelNum
	,OrderDate		AS SalesOrderDate
	,NeedbyDate
	,DelivDate		AS ExpDelivDate
	,CAST('1900-01-01' AS date) AS ActualDelivDate
	,ConfirmedDelivDate AS ConfirmedDelivDate
	,TRIM(InvoiceNum)		AS SalesInvoiceNum
	,OrderQty		AS SalesOrderQty
	,DelivQty
	,RemainingQty
	--,NULL AS SalesInvoiceQty
	--,''				AS UoM
	,UnitPrice
	,UnitCost
	,SumUnitPrice
	,SumUnitCost
	,CurrencyCode	AS Currency
	,CurrExchRate	AS ExchangeRate
	,OpenRelease
	,DiscountAmount
	,DiscountPercent
	,TRIM(PartNum) AS PartNum
	--,''				AS PartType
	--,'0'				AS PartStatus
	,TRIM(SalesPerson)	AS SalesPersonName
	,TRIM(WarehouseCode) AS WarehouseCode
	--,'' AS SalesChannel
	,'Normal Order Handling' AS AxInterSalesChannel
	--,'' AS Department
	--,'' AS ProjectNum
	--,'' AS IndexKey
	--,'0' AS Cancellation
	,CustNumDel AS SORes1
	--,'' AS SORes2
	--,'' AS SORes3
	,ReturnComment
	,TRIM(SalesReturnOrderNum) AS SalesReturnOrderNum
	,TRIM(SalesReturnInvoiceNum) AS SalesReturnInvoiceNum
	--,NULL AS [TotalMiscChrg]
FROM stage.JEN_DK_OLine
GO
PRINT N'Creating [dm_PT].[fctBudget]'
GO
CREATE VIEW [dm_PT].[fctBudget] AS

SELECT [bdg].[BudgetID], [bdg].[CustomerID], [bdg].[CompanyID], [bdg].[PartID], [bdg].[WarehouseID], [bdg].[ProjectID], [bdg].[DepartmentID], [bdg].[BudgetPeriodDateID], [bdg].[PartitionKey], [bdg].[BudgetType], [bdg].[BudgetName], [bdg].[BudgetDescription], [bdg].[Company], [bdg].[BudgetPeriod], [bdg].[BudgetPeriodDate], [bdg].[PeriodType], [bdg].[CustomerNum], [bdg].[PartNum], [bdg].[SalesPersonCode], [bdg].[SalesPersonName], [bdg].[BudgetSales], [bdg].[BudgetCost], [bdg].[GrossProfitInvoiced], [bdg].[GrossMarginInvoicedPercent], [bdg].[BudgetFinance], [bdg].[WarehouseCode], [bdg].[CostBearerNum], [bdg].[CostUnitNum], [bdg].[ProjectNum], [bdg].[AccountNum], [bdg].[AccountGroupNum]
FROM dm.FactBudget bdg
LEFT JOIN dbo.Company com ON bdg.Company = com.Company
WHERE com.BusinessArea = 'Power Transmission Solutions' AND com.[Status] = 'Active'

--WHERE [Company] in ('ACZARKOV', 'AcornUK', 'BSIBELL', 'JDKJENSS', 'JDKKALTE', 'JFIJENSS', 'MNLMAK', 'JNOJENSS', 'JNOORBEL', 'JSEJENSS', 'JSESKSSW', 'NomoSE', 'NomoDK', 'NomoFI', 'NomoNo', 'PASSEROT', 'SKSSCOFI', 'SCOFI', 'SMKFI', 'SNLSPRUI', 'SVESE')  -- The PT basket


--GROUP BY   -- Aggregate those fields in dw.FactOrder which have more than one values, such as different NeedbyDate & DelivDate and different discountPercent, left over fields should by in GROUP BY
GO
PRINT N'Creating [stage].[AXI_HQ_Account_excel]'
GO
CREATE TABLE [stage].[AXI_HQ_Account_excel]
(
[AccountNum] [nvarchar] (50) NULL,
[PartitionKey] [varchar] (50) NULL,
[AccountName] [nvarchar] (200) NULL,
[AccountName English] [nvarchar] (200) NULL,
[AccountStatus] [nvarchar] (50) NULL,
[BalanceAccount] [nvarchar] (100) NULL,
[TransactionAccount] [nvarchar] (100) NULL,
[Assets] [nvarchar] (100) NULL,
[Amortization] [nvarchar] (50) NULL,
[Costs] [nvarchar] (100) NULL,
[LiabilitiesAndEquity] [nvarchar] (100) NULL,
[Revenue] [nvarchar] (100) NULL,
[CurrentAssets] [nvarchar] (100) NULL,
[CurrentLiabilities] [nvarchar] (100) NULL,
[Deprecation] [nvarchar] (100) NULL,
[Equity] [nvarchar] (100) NULL,
[Liability] [nvarchar] (50) NULL,
[Interest] [nvarchar] (50) NULL,
[Tax] [nvarchar] (50) NULL,
[Materials] [nvarchar] (50) NULL,
[Expenses] [nvarchar] (50) NULL,
[AccountReceivables] [nvarchar] (100) NULL,
[CashAndEquivalents] [nvarchar] (100) NULL,
[AccountType] [nvarchar] (50) NULL,
[AccountType2] [nvarchar] (50) NULL,
[AccountType3] [nvarchar] (50) NULL,
[AccountType4] [nvarchar] (50) NULL,
[AccountType5] [nvarchar] (100) NULL,
[AccountType6] [nvarchar] (100) NULL,
[AccountType7] [nvarchar] (100) NULL,
[AccountType8] [nvarchar] (100) NULL,
[AccountType9] [nvarchar] (100) NULL,
[AccountType10] [nvarchar] (100) NULL,
[AccountGroupNum] [nvarchar] (50) NULL,
[AccountGroupName] [nvarchar] (200) NULL,
[AccountGroup] [nvarchar] (100) NULL,
[AccountGroup2] [nvarchar] (100) NULL,
[AccountGroup3] [nvarchar] (100) NULL,
[Statement] [nvarchar] (100) NULL,
[StatementNum] [nvarchar] (50) NULL,
[AccRes1] [nvarchar] (100) NULL,
[AccRes2] [nvarchar] (100) NULL,
[AccRes3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vAXI_HQ_Account_excel]'
GO














/****** Script for SelectTopNRows command from SSMS  ******/

CREATE VIEW  [stage].[vAXI_HQ_Account_excel] AS

SELECT 
	CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(N'AXISE', '#', [AccountNum]))) AS AccountID
	,CONVERT(binary(32), HASHBYTES('SHA2_256',N'AXISE')) AS CompanyID
	,CONCAT(N'AXISE', '#', [AccountNum]) AS AccountCode
	,CONVERT(varchar, GETDATE(), 23) AS PartitionKey
	,N'AXISE'	AS [Company]
	,nullif([AccountNum]					  ,'NULL') as [AccountNum]
	,nullif([AccountName]					  ,'NULL') as [AccountName]
	,nullif([AccountName English]			  ,'NULL') AS [AccountName2]
	,nullif(CONCAT(AccountNum,'-',AccountName),'NULL') AS Account
	,nullif([AccountStatus]					  ,'NULL') as [AccountStatus]			
	,nullif([BalanceAccount]				  ,'NULL') as [BalanceAccount]		
	,nullif([TransactionAccount]			  ,'NULL') as [TransactionAccount]	
	,nullif([Assets]						  ,'NULL') as [Assets]				
	,nullif([Amortization]					  ,'NULL') as [Amortization]			
	,nullif([Costs]							  ,'NULL') as [Costs]					
	,nullif([LiabilitiesAndEquity]			  ,'NULL') as [LiabilitiesAndEquity]	
	,nullif([Revenue]						  ,'NULL') as [Revenue]				
	,nullif([CurrentAssets]					  ,'NULL') as [CurrentAssets]			
	,nullif([CurrentLiabilities]			  ,'NULL') as [CurrentLiabilities]	
	,nullif([Deprecation] 					  ,'NULL') as [Deprecation] 			
	,nullif([Equity]						  ,'NULL') as [Equity]				
	,nullif([AccountReceivables]			  ,'NULL') as [AccountReceivables]	
	,nullif([CashAndEquivalents]			  ,'NULL') as [CashAndEquivalents]	
	,nullif(Liability						  ,'NULL') as Liability				
	,nullif(Tax								  ,'NULL') as Tax						
	,nullif(Interest						  ,'NULL') as Interest				
	,nullif(Materials						  ,'NULL') as Materials				
	,nullif(Expenses						  ,'NULL') as Expenses				
	,nullif([AccountType]					  ,'NULL') as [AccountType]			
	,nullif([AccountType2]					  ,'NULL') as [AccountType2]			
	,nullif([AccountType3]					  ,'NULL') as [AccountType3]			
	,nullif([AccountType4]					  ,'NULL') as [AccountType4]			
	,nullif([AccountType5]					  ,'NULL') as [AccountType5]			
	,nullif([AccountType6]					  ,'NULL') as [AccountType6]			
	,nullif([AccountType7]					  ,'NULL') as [AccountType7]			
	,nullif([AccountType8]					  ,'NULL') as [AccountType8]			
	,nullif([AccountType9]					  ,'NULL') as [AccountType9]			
	,nullif([AccountType10]					  ,'NULL') as [AccountType10]			
	,nullif([AccountGroupNum]				  ,'NULL') as [AccountGroupNum]		
	,nullif([AccountGroupName]				  ,'NULL') as [AccountGroupName]		
	,nullif([AccountGroup]					  ,'NULL') as [AccountGroup]			
	,nullif([AccountGroup2]					  ,'NULL') as [AccountGroup2]			
	,nullif([AccountGroup3]					  ,'NULL') as [AccountGroup3]			
	,nullif([Statement]						  ,'NULL') as [Statement]				   --83161 to 83173 different currencies, sub-account of 8311 also cost
	,'From sharepoint' AS [AccRes1]
	,[AccRes2]
	,[AccRes3]
	, CASE 
	    WHEN trim(AccountGroupName) = 'Rental of premises' THEN 1
		WHEN trim(AccountGroupName) = 'Consumable material' THEN 2 
		WHEN trim(AccountGroupName) = 'Vehicle costs' THEN 3
		WHEN trim(AccountGroupName) = 'Travel costs' THEN 4
		WHEN trim(AccountGroupName) = 'Representation' THEN 5
		WHEN trim(AccountGroupName) = 'It costs' THEN 6
		WHEN trim(AccountGroupName) = 'Auditing costs' THEN 7
		WHEN trim(AccountGroupName) = 'Consulting cost' THEN 8
		WHEN trim(AccountGroupName) = 'Interim staff' THEN 9
		WHEN trim(AccountGroupName) = 'Other external cost' THEN 10
		WHEN trim(AccountGroupName) = 'Staff cost' THEN 11
		WHEN trim(AccountGroupName) = 'Depreciation' THEN 12
		WHEN trim(AccountGroupName) = 'Foreign exchange adjustments on WC' THEN 13
		WHEN trim(AccountGroupName) = 'Financial cost' THEN 14
		WHEN trim(AccountGroupName) = 'Taxes' THEN 15
	    ELSE 0 END AS AccountGroupOrder
	       
  FROM [stage].[AXI_HQ_Account_excel] AS A
--  LEFT JOIN [stage].[AXI_HQ_Account_map_complement] AS m ON A.AccountNum = m.Konto
  WHERE A.AccountNum IS NOT NULL
GO
PRINT N'Creating [dm_ALL].[fctStockBalance]'
GO

CREATE VIEW [dm_ALL].[fctStockBalance] AS

SELECT 
 [StockBalanceID]
,[CompanyID]
,[SupplierID]
,[PartID]
,[WarehouseID]
,[CurrencyMonthKey]
,[Company]
,[Currency]
,[BinNum]
,[BatchNum]
,[SupplierNum]
,[PartNum]
,[DelivTime]
,[LastStockTakeDate]
,[LastStdCostCalDate]
,[SafetyStock]
,[MaxStockQty]
,[StockBalance]
,[StockValue]
,[AvgCost]
,[ReserveQty]
,[BackOrderQty]
,[OrderQty]
,[StockTakeDiff]
,[ReOrderLevel]
,[OptimalOrderQty]
,[WarehouseCode]
,[SBRes1]
,[SBRes2]
,[SBRes3]
FROM dm.FactStockBalance
GO
PRINT N'Creating [stage].[Nom_NO_StockTransactionOB]'
GO
CREATE TABLE [stage].[Nom_NO_StockTransactionOB]
(
[Company] [nvarchar] (50) NULL,
[IndexKey] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[TransactionCode] [nvarchar] (50) NULL,
[TransactionDescription] [nvarchar] (50) NULL,
[IssuerReceiverNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[BinNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[TransactionDate] [nvarchar] (50) NULL,
[TransactionTime] [nvarchar] (50) NULL,
[TransactionQty] [nvarchar] (50) NULL,
[TransactionValue] [nvarchar] (50) NULL,
[CostPrice] [nvarchar] (50) NULL,
[SalesUnitPrice] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[Reference] [nvarchar] (50) NULL,
[AdjustmentDate] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vNOM_NO_SOLineHist]'
GO

CREATE VIEW [stage].[vNOM_NO_SOLineHist] AS

SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(IssuerReceiverNum), '#', TRIM(OrderNum), '#', TRIM(PartNum), '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine))))) AS SalesInvoiceID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(OrderNum),'#',TRIM(OrderLine),'#',TRIM(InvoiceNum))))) AS SalesOrderID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(IssuerReceiverNum), '#', TRIM(InvoiceNum))))) AS SalesLedgerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(OrderNum))))) AS SalesOrderNumID  
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(IssuerReceiverNum))))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID 
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(OrderNum),'#',TRIM(OrderLine))) AS SalesOrderCode 
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(InvoiceNum))))) AS SalesInvoiceNumID 
	,CONVERT(int, replace(convert(date,TransactionDate),'-','')) AS SalesInvoiceDateID
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(InvoiceNum),'#',TRIM(InvoiceLine))) AS SalesInvoiceCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,'2022-04-05 10:00' AS PartitionKey

	,UPPER(TRIM(Company)) AS Company
	,'' AS SalesPersonName
	,UPPER(TRIM(IssuerReceiverNum)) AS CustomerNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,CASE WHEN TRIM(OrderNum) = '0' THEN 'PrimaryPart' ELSE 'SubPart' END  AS PartType
	,UPPER(TRIM(OrderNum)) AS SalesOrderNum
	,UPPER(TRIM(OrderLine)) AS SalesOrderLine
	,'' AS SalesOrderSubLine-- '0' as OrderSubLine
	,'' AS SalesOrderType
	,TRIM(InvoiceNum) AS SalesInvoiceNum
	,UPPER(TRIM(InvoiceLine)) AS SalesInvoiceLine
	,'' AS SalesInvoiceType
	,CONVERT(date, TransactionDate) AS SalesInvoiceDate
	,CONVERT(date, TransactionDate) AS ActualDelivDate
	,IIF(TransactionQty IS NULL, 0, TRY_CONVERT(decimal(18,2), REPLACE(REPLACE(TransactionQty, ' ', ''), ',', '.')))*-1 AS SalesInvoiceQty
	,'' AS UoM
	,IIF(SalesUnitPrice IS NULL, 0, TRY_CONVERT(decimal(18,4), REPLACE(REPLACE(SalesUnitPrice, ' ', ''), ',', '.'))) AS UnitPrice
	,IIF(CostPrice IS NULL, 0, TRY_CONVERT(decimal(18,4), REPLACE(REPLACE(CostPrice, ' ', ''), ',', '.'))) AS UnitCost
	,0 AS DiscountPercent
	,0 AS DiscountAmount
	,0 AS CashDiscountOffered
	,0 AS CashDiscountUsed
	,0 AS TotalMiscChrg
	,NULL AS VATAmount
	,'NOK' AS Currency
	,1 AS ExchangeRate
	,'0' AS CreditMemo
	,'Normal Order Handling' AS SalesChannel
	,'' AS Department
	,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
	,NULL AS DeliveryAddress
	,'' AS CostBearerNum
	,'' AS CostUnitNum
	,'' AS ReturnComment
	,'' AS ReturnNum
	,'' AS ProjectNum
	,IndexKey
	,'' AS SIRes1
	,'' AS SIRes2
	,'history data import' AS SIRes3
FROM stage.Nom_NO_StockTransactionOB
WHERE TransactionDate > '2014-12-31'
--GROUP BY
--	PartitionKey, Company, CustNum, OrderNum, OrderLine, OrderSubLine, OrderType, InvoiceNum, InvoiceLine, InvoiceDate, SellingShipQty, UnitPrice, UnitCost, Currency, ExchangeRate, TotalMiscChrg, DiscountAmount,PartNum, SalesPerson,  WarehouseCode, CreditMemo,SalesChannel
GO
PRINT N'Creating [stage].[CER_NO_BC_PurchaseLedger]'
GO
CREATE TABLE [stage].[CER_NO_BC_PurchaseLedger]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[PurchaseInvoiceDate] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [nvarchar] (50) NULL,
[SupplierInvoiceNum] [nvarchar] (50) NULL,
[IsInvoiceClosed] [nvarchar] (50) NULL,
[InvoiceAmount] [nvarchar] (50) NULL,
[PurchaseDueDate] [nvarchar] (50) NULL,
[RemainingInvoiceAmount] [nvarchar] (50) NULL,
[VATAmount] [nvarchar] (50) NULL,
[PaymentTerms] [nvarchar] (50) NULL,
[PayToName] [nvarchar] (50) NULL,
[PayToCity] [nvarchar] (50) NULL,
[PayToContact] [nvarchar] (50) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL,
[AccountingDate] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_NO_BC_PurchaseLedger]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vCER_NO_BC_PurchaseLedger] as
SELECT

--------------------------------------------- Keys/ IDs ---------------------------------------------
CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum))))) AS PurchaseLedgerID -- shall = in Invoice
,UPPER(CONCAT(Company, '#', TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum))) AS PurchaseLedgerCode --Redundant?
,CONVERT(binary(32), HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID
,CONVERT(binary(32), HASHBYTES('SHA2_256',UPPER(CONCAT(Company, '#', TRIM(SupplierNum))))) AS SupplierID
,CONVERT(binary(32), HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(PurchaseInvoiceNum))))) AS PurchaseInvoiceID --Redundant?
--,CONVERT(binary(32), HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID --Redundant?
,CONVERT(binary(32), HASHBYTES('SHA2_256',UPPER(TRIM(Currency)))) AS CurrencyID --Redundant?
,CONVERT(int, replace(convert(date,PurchaseInvoiceDate),'-','')) AS PurchaseInvoiceDateID --Redundant?
,PartitionKey

--------------------------------------------- Regular Fields ---------------------------------------------
---Mandatory Fields ---
,UPPER(TRIM(Company)) AS Company
,UPPER(TRIM(SupplierNum)) AS SupplierNum
,UPPER(TRIM(PurchaseInvoiceNum)) AS PurchaseInvoiceNum
,CASE WHEN PurchaseInvoiceDate = '' OR PurchaseInvoiceDate is NULL THEN NULL ELSE CONVERT(date, PurchaseInvoiceDate) END AS PurchaseInvoiceDate
,CONVERT(decimal(18,4), Replace(InvoiceAmount, ',', '.')) AS InvoiceAmount
--,CONVERT(decimal(18,4), Replace(PaidInvoiceAmount, ',', '.')) AS PaidInvoiceAmount
,CONVERT(decimal(18,4), Replace(RemainingInvoiceAmount, ',', '.')) AS RemainingInvoiceAmount
,UPPER(TRIM(Currency)) AS Currency
,CONVERT(decimal(18,4), Replace(ExchangeRate, ',', '.')) AS ExchangeRate

--Valuable Fields ---

--,UPPER(TRIM(PurchaseOrderNum)) AS PurchaseOrderNum
,UPPER(TRIM(SupplierInvoiceNum)) AS SupplierInvoiceNum
,CASE WHEN PurchaseDueDate = '' OR PurchaseDueDate is NULL THEN NULL ELSE CONVERT(date, PurchaseDueDate) END AS PurchaseDueDate
--,CASE WHEN PurchaseLastPaymentDate = '' OR PurchaseLastPaymentDate is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, PurchaseLastPaymentDate) END AS PurchaseLastPaymentDate
--,CASE WHEN AccountingDate = '' OR AccountingDate is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, AccountingDate) END AS AccountingDate
,CONVERT(decimal(18,4), Replace(VATAmount, ',', '.')) AS VATAmount
,UPPER(TRIM(PaymentTerms)) AS PaymentTerms

--- Good-to-have Fields ---
--,UPPER(TRIM(LinktoOriginalInvoice)) AS LinktoOriginalInvoice
--,UPPER(TRIM(VATCode)) AS VATCode
--,UPPER(TRIM(VATCodeDesc)) AS VATCodeDesc
,UPPER(TRIM(PayToName)) AS PayToName
,UPPER(TRIM(PayToCity)) AS PayToCity
,UPPER(TRIM(PayToContact)) AS PayToContact
--,UPPER(TRIM(PrePaymentNum)) AS PrePaymentNum
--,UPPER(TRIM(LastPaymentNum)) AS LastPaymentNum

--------------------------------------------- Meta Data ---------------------------------------------
,CONVERT(date, CreatedTimeStamp) AS CreatedTimeStamp
,CONVERT(date, ModifiedTimeStamp) AS ModifiedTimeStamp
--,TRIM(IsActiveRecord) AS IsActiveRecord

--------------------------------------------- Extra Fields ---------------------------------------------
--,UPPER(TRIM(PLRes1)) AS PLRes1
--,UPPER(TRIM(PLRes2)) AS PLRes2
--,UPPER(TRIM(PLRes3)) AS PLRes3

FROM [stage].[CER_NO_BC_PurchaseLedger]
GO
PRINT N'Creating [stage].[SUM_UK_OLine]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[SUM_UK_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[NeedByDate] [date] NULL,
[Delivdate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (10) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[Site] [nvarchar] (50) NULL,
[SalesPerson] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[BusinessChain] [nvarchar] (50) NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vSUM_UK_OLine]'
GO
CREATE VIEW [stage].[vSUM_UK_OLine] AS

SELECT
	 CONVERT([binary](32), HASHBYTES('SHA2_256',  CONCAT(UPPER(TRIM(dbo.summers())), '#', UPPER(TRIM(OrderNum)), '#', UPPER(TRIM(OrderLine)), '#', UPPER(TRIM(OrderSubLine))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(dbo.summers()))))	 AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(dbo.summers()), '#', TRIM(CustNum)))))	 AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(dbo.summers()) ,'#', TRIM(PartNum)))))	AS PartID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(dbo.summers()), '#', TRIM([WarehouseCode])))))	 AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(dbo.summers()),'#',TRIM(OrderNum))))) AS SalesOrderNumID
	,CONCAT(UPPER(TRIM(dbo.summers())), '#', UPPER(TRIM(CustNum)), '#', UPPER(TRIM(OrderNum)), '#', UPPER(TRIM(OrderLine)))	AS SalesOrderCode
	,CONVERT(int, replace(convert(date, OrderDate), '-', '')) AS SalesOrderDateID   --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(dbo.summers()),'#',''))))	 AS ProjectID
	,PartitionKey 

	,UPPER(TRIM(dbo.summers())) AS Company 
	,TRIM(CustNum) AS CustomerNum 
	,TRIM(OrderNum)	AS SalesOrderNum
	,CONVERT(nvarchar(50), TRIM(OrderLine)) AS SalesOrderLine
	--,TRIM(OrderSubLine)	AS SalesOrderSubLine
	,CONVERT(nvarchar(50), OrderType) AS SalesOrderType
	--,'' AS SalesOrderCategory
	,OrderDate AS SalesOrderDate
	,[NeedByDate] AS NeedbyDate
	,[Delivdate] AS ExpDelivDate
	,CAST('1900-01-01' AS date) AS ActualDelivDate
	,CAST('1900-01-01' AS date) AS ConfirmedDelivDate
	--,TRIM(InvoiceNum) AS SalesInvoiceNum
	,OrderQty AS SalesOrderQty
	,DelivQty
	,RemainingQty
	--,NULL AS SalesInvoiceQty
	,[Unit] AS UoM
	,UnitPrice
	,UnitCost
	,LEFT(Currency, 3) AS Currency
	,IIF(LEFT(Currency, 3) = 'GBP', 1, ExchangeRate) AS ExchangeRate
	,LEFT(CONVERT(char(1), MAX(OpenRelease)), 1) AS OpenRelease
	,DiscountAmount
	,DiscountPercent
	,PartNum AS PartNum
	--,'' AS PartType
	,CONVERT(nvarchar(50), PartStatus) AS PartStatus
	,dbo.ProperCase(SalesPerson) AS SalesPersonName
	,TRIM(WarehouseCode) AS WarehouseCode
	,CASE	WHEN LEN(SalesChannel) = 8 THEN 'EXPRESS'	
			WHEN LEN(SalesChannel) = 12 THEN 'ADVANCE'
			WHEN CustNum LIKE 'RSCOMP%' THEN 'EDI'
			WHEN SalesPerson = '' THEN 'IMPORTED'
			ELSE SalesChannel END AS SalesChannel
	,CASE WHEN CustNum LIKE 'RSCOMP%' THEN 'EDI'
		WHEN LEN(SalesChannel) = 12 THEN 'Webshop'
		WHEN LEN(SalesChannel) = 8 THEN 'Webshop'
		ELSE 'Normal Order Handling' END AS AxInterSalesChannel
	,BusinessChain AS Department
	--,'' AS ProjectNum
	--,'' AS IndexKey
	--,'0' AS Cancellation
	--,Res1 AS SORes1
	--,Res2 AS SORes2
	--,Res3 AS SORes3
	--,NULL AS [TotalMiscChrg]
FROM stage.SUM_UK_OLine
GROUP BY PartitionKey, Company, OrderNum, OrderLine, OrderSubLine, CustNum, PartNum, OrderDate, OrderType, [NeedByDate], [Delivdate], InvoiceNum, OrderQty, DelivQty, RemainingQty, [Unit],
	UnitPrice, UnitCost, Currency, ExchangeRate, DiscountAmount, DiscountPercent, PartNum, PartStatus, SalesPerson, WarehouseCode, SalesChannel, BusinessChain, Res1, Res2, Res3
GO
PRINT N'Creating [stage].[TMT_FI_SalesLedger]'
GO
CREATE TABLE [stage].[TMT_FI_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (10) NULL,
[InvoiceNum] [nvarchar] (25) NULL,
[InvoiceDate] [datetime] NULL,
[DueDate] [datetime] NULL,
[LastPaymentDate] [datetime] NULL
)
GO
PRINT N'Creating [stage].[vTMT_FI_SalesLedger]'
GO
CREATE VIEW [stage].[vTMT_FI_SalesLedger] AS
--COMMENT EMPTY FIELDS // ADD TRIM() INTO CustomerID 23-01-09 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', CustNum, '#', InvoiceNum)))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	,UPPER(CONCAT(Company, '#', CustNum, '#', InvoiceNum)) AS SalesLedgerCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(CustNum) AS CustomerNum
	,TRIM(InvoiceNum) AS SalesInvoiceNum
	,InvoiceDate AS SalesInvoiceDate
	,CONVERT(date, DueDate) AS SalesDueDate
	,'1900-01-01' AS SalesLastPaymentDate --CASE WHEN CONVERT(date, LastPaymentDate) = Null THEN '1900-01-01'  ELSE CONVERT(date, LastPaymentDate) END AS LastPaymentDate -- When TMT has values for this field then change back to the values
	--,0 AS InvoiceAmount
	--,0 AS RemainingInvoiceAmount
	,1 AS ExchangeRate
	--,'' AS Currency
	--,0 AS VATAmount
	--,'' AS VATCode
	--,'' AS PayToName
	--,'' AS PayToCity
	--,'' AS PayToContact
	--,'' AS PaymentTerms
	--,'' AS SLRes1
	--,'' AS SLRes2
	--,'' AS SLRes3
	--,NULL AS PaidInvoiceAmount
	,'1900-01-01' AS AccountingDate
	--,NULL AS AgingPeriod
	--,NULL AS AgingSort
	--,NULL AS VATCodeDesc
	--,NULL AS LinkToOriginalInvoice

FROM 
	stage.TMT_FI_SalesLedger
GO
PRINT N'Creating [stage].[JEN_SK_Part]'
GO
CREATE TABLE [stage].[JEN_SK_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartDescription] [nvarchar] (100) NULL,
[PartDescription2] [nvarchar] (200) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[ProductGroup2] [nvarchar] (200) NULL,
[CommodityCode] [nvarchar] (50) NULL,
[CountryOfOrigin] [nvarchar] (50) NULL,
[NetWeight] [decimal] (18, 4) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[ReorderLevel] [decimal] (18, 4) NULL,
[EAN] [nvarchar] (50) NULL,
[StockItemStatus] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vJEN_SK_Part]'
GO

CREATE VIEW [stage].[vJEN_SK_Part] AS
--COMMENT empty fields / ADD UPPER() TRIM() INTO PartID 2022-12-13 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
	--CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',[PartNum]))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',[Company])) AS CompanyID
	,CONCAT([Company],'#',[PartNum]) AS PartCode
	,PartitionKey

	,[Company]
	,[PartNum]
	--,'' AS [PartName]
	,[PartDescription]
	,[PartDescription2]
	--,'' AS [PartDescription3]
	,SupplierCode AS MainSupplier
	--,NULL AS AlternativeSupplier
	,[ProductGroup]
	,[ProductGroup2]
	--,'' AS [ProductGroup3]
	--,'' AS [ProductGroup4]
	--,'' AS [Brand]
	,[CommodityCode]
	--,'' AS PartReplacementNum
	,StockItemStatus AS PartStatus
	,[CountryOfOrigin]
	,[NetWeight]
	--,'' AS UoM
	--,'' AS [Material]
	,EAN AS [Barcode]
	,[ReOrderLevel]
	--,'' AS PartResponsible
	--,'' AS [StartDate]
	--,'' AS [EndDate]

FROM [stage].[JEN_SK_Part]
GO
PRINT N'Creating [dm_PT].[dimCustomerAgreement]'
GO
CREATE VIEW [dm_PT].[dimCustomerAgreement] AS
-- AS decided by Ian & Random Forest AB on the 7th May 2020, the data is spliting after data-warehouse for each Business Group
SELECT ca.[CompanyID]
,ca.[CustomerID]
,ca.[PartID]
,ca.[CurrencyID]
,ca.[Company]
,ca.[CustomerNum]
,ca.[PartNum]
,ca.[AgreementCode]
,ca.[AgreementDescription]
,ca.[DiscountPercent]
,ca.[UnitPrice]
,ca.[AgreementQty]
,ca.[Currency]
,ca.[DelivTime]
,ca.[AgreementStart]
,ca.[AgreementEnd]
,ca.[CustomerTerms]
,ca.[FulfilledQty]
,ca.[RemainingQty]
,ca.[UoM]
,ca.[PartitionKey]
,ca.[ExchangeRate]
FROM [dm].[DimCustomerAgreement] ca
LEFT JOIN dbo.Company com ON ca.Company = com.Company
WHERE com.BusinessArea = 'Power Transmission Solutions' AND com.[Status] = 'Active'
--It is a dynamic Company addition in the sub-dataset in a way that so long a company is added in its parent dataset, this company will automatically appear in its assigend Business Area sub-dataset.
--This company addtion should in its first hand appear in the dbo.Company with correct attributes.

--WHERE [Company] in ('ACZARKOV', 'AcornUK', 'BSIBELL', 'JDKJENSS', 'JDKKALTE', 'JFIJENSS', 'MNLMAK', 'JNOJENSS', 'JNOORBEL', 'JSEJENSS', 'JSESKSSW', 'NORNO', 'SSWSE', 'NomoSE', 'NomoDK', 'NomoFI', 'NomoNo', 'PASSEROT', 'SKSSCOFI', 'SCOFI', 'SMKFI', 'SNLSPRUI', 'SPRUITNL', 'SVESE')  -- The PT basket --
GO
PRINT N'Creating [stage].[FOR_SE_OpenBalance]'
GO
CREATE TABLE [stage].[FOR_SE_OpenBalance]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[AccountNum] [nvarchar] (50) NULL,
[CostUnitNum] [nvarchar] (50) NULL,
[JournalDate] [date] NULL,
[Description] [nvarchar] (500) NULL,
[FiscalYear] [nvarchar] (50) NULL,
[FiscalPeriod] [nvarchar] (50) NULL,
[AmountSystemCurrency] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vFOR_SE_OpenBalance]'
GO


CREATE VIEW [stage].[vFOR_SE_OpenBalance] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', [AccountNum], '#', [CostUnitNum], '#', [Description], '#', [FiscalYear]))) AS OpenBalanceID,
	CONVERT([binary](32), HASHBYTES('SHA2_256',Company)) AS CompanyID,
	CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT(Company, '#', AccountNum))) AS AccountID,
	CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT(Company, '#', CostUnitNum))) AS CostUnitID,
	CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT(Company, '#', '')))AS CostBearerID,
	CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT(Company, '#', ''))) AS ProjectID,
	PartitionKey,

	Company,
	[AccountNum],
	[CostUnitNum],
	'' AS CostBearerNum,
	'' AS ProjectNum,
	'' AS JournalType,
	[JournalDate],
	[JournalDate] AS [AccountingDate], --CONVERT(date, '1900-01-01')
	[Description],
	[FiscalYear],
	[FiscalPeriod],
	[AmountSystemCurrency]	AS OpeningBalance,
	Currency,
	ExchangeRate,
	'' AS OBRes1,
	'' AS OBRes2,
	'' AS OBRes3
FROM 
	stage.FOR_SE_OpenBalance
GO
PRINT N'Creating [dm_ALL].[DimSalesPersonName]'
GO
CREATE VIEW [dm_ALL].[DimSalesPersonName] AS
SELECT  [SalesPersonNameID]
,[Company]
,[SalesPersonName]
FROM dm.DimSalesPersonName
GO
PRINT N'Creating [stage].[CER_EE_Warehouse]'
GO
CREATE TABLE [stage].[CER_EE_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL,
[WarehouseDistrict] [nvarchar] (50) NULL,
[WarehouseAddress] [nvarchar] (100) NULL,
[WarehouseType] [nvarchar] (50) NULL,
[WarehouseCountry] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_EE_Warehouse]'
GO

CREATE VIEW [stage].[vCER_EE_Warehouse] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([WarehouseCode])) AS [WarehouseCode]
	,[WarehouseName]
	,[WarehouseDistrict]
	,[WarehouseAddress]
	--,'' AS [WarehouseDescription]
	,[WarehouseType]
	,[WarehouseCountry]
	--,'' AS [WarehouseSite]
FROM [stage].[CER_EE_Warehouse]

GROUP BY 
	PartitionKey,[Company],[WarehouseCode],[WarehouseName],[WarehouseDistrict],[WarehouseAddress],[WarehouseType],[WarehouseCountry]
GO
PRINT N'Creating [stage].[ATZ_UK_Part]'
GO
CREATE TABLE [stage].[ATZ_UK_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartDescription] [nvarchar] (100) NULL,
[PartDescription2] [nvarchar] (100) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[ProductGroup2] [nvarchar] (50) NULL,
[CommodityCode] [nvarchar] (50) NULL,
[CountryOfOrigin] [nvarchar] (50) NULL,
[NetWeight] [decimal] (18, 4) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[ReorderLevel] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vATZ_UK_Part]'
GO
CREATE VIEW [stage].[vATZ_UK_Part] AS
--COMMENT EMPTY FIELDS // ADD UPPER() TRIM() INTO PartID
SELECT 
	--CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([PartNum])))) AS PartID
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',[Company])) AS CompanyID
	,CONCAT([Company],'#',TRIM([PartNum])) AS PartCode
	,PartitionKey

	,[Company]
	,TRIM([PartNum]) AS [PartNum] -- different cases are used for PartNum, it affects query results! data-Input quality should be improved!
	--,'' AS [PartName]
	,MAX([PartDescription]) AS [PartDescription]
	,MAX([PartDescription2]) AS [PartDescription2]
	--,'' AS [PartDescription3]
	--,NULL AS MainSupplier
	--,NULL AS AlternativeSupplier
	,MAX([ProductGroup]) AS [ProductGroup]
	--,'' AS [ProductGroup2]
	--,'' AS [ProductGroup3]
	--,'' AS [ProductGroup4]
	--,'' AS [Brand]
	,TRIM([CommodityCode]) AS [CommodityCode]
	--,'' AS PartReplacementNum
	--,'' AS PartStatus
	,TRIM([CountryOfOrigin]) AS [CountryOfOrigin]
	,[NetWeight]
	--,'' AS UoM
	--,'' AS [Material]
	--,'' AS [Barcode]
	,MAX([ReorderLevel]) AS [ReOrderLevel]
	--,'' AS PartResponsible
	--,'' AS [StartDate]
	--,'' AS [EndDate]
FROM [stage].[ATZ_UK_Part]

GROUP BY 
	PartitionKey, Company, TRIM([PartNum]), TRIM([CommodityCode]), TRIM([CountryOfOrigin]), NetWeight
GO
PRINT N'Creating [stage].[HAK_FI_Customer]'
GO
CREATE TABLE [stage].[HAK_FI_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[CustomerName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (20) NULL,
[TelephoneNumber2] [nvarchar] (20) NULL,
[Email] [nvarchar] (100) NULL,
[ABCCode] [nchar] (10) NULL,
[City] [nvarchar] (50) NULL,
[ZIP] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNr] [nvarchar] (20) NULL,
[OrganizationNum] [nvarchar] (100) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (2) NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[CustomerType] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vHAK_FI_Customer]'
GO
CREATE VIEW [stage].[vHAK_FI_Customer] AS
--COMMENT EMPTY FIELDS // ADD UPPER()TRIM() INTO CustomerID 2022-12-21 VA
--This company have rows added from the fact tables to match.
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(UPPER(CustomerNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [Company])) AS CompanyID
	,CONCAT([Company], '#', TRIM(UPPER(CustomerNum))) AS CustomerCode
	,PartitionKey

	,Company
	,TRIM(UPPER(CustomerNum)) AS [CustomerNum]
	--,'' AS MainCustomerName
	,TRIM([dbo].[ProperCase](CustomerName)) AS  [CustomerName]
	,TRIM([AddressLine1]) AS [AddressLine1]
	,TRIM([AddressLine2]) AS [AddressLine2]
	,TRIM([AddressLine3]) AS [AddressLine3]
	,TRIM([TelephoneNumber1]) AS [TelephoneNum1]
	,TRIM([TelephoneNumber2]) AS [TelephoneNum2]
	,TRIM([Email]) AS [Email]
	,TRIM([ZIP]) AS [ZipCode]
	,CASE WHEN TRIM([City]) = ' '	AND LEFT(TRIM(AddressLine3), 1) IN ('1','2','3','4','5','6','7','8','9') THEN TRIM(substring(replace([dbo].[ProperCase](TRIM(AddressLine3)),' ', ''), 6, 100)) ELSE [dbo].[ProperCase](TRIM([City])) end AS [City]
	,IIF(TRIM([State])= ' ',null,TRIM([State])) AS [State]
	,TRIM([District]) AS [SalesDistrict]
	,IIF(TRIM(CountryName) = '' OR TRIM(CountryName) IS NULL, 'FI', TRIM(CountryCode)) AS CountryCode
	,IIF(TRIM(CountryName) = '' OR TRIM(CountryName) IS NULL, 'Finland', TRIM(CountryName)) AS [CountryName]
	--,'' AS Division
	--,'' AS CustomerIndustry
	--,'' AS CustomerSubIndustry
	,TRIM([AddressLine1]) AS [AddressLine]
	,CONCAT( TRIM(Countryname), + ',  ' + TRIM([City]), + ',  ' + TRIM([Zip]), + ',  ' + TRIM(addressline1) ) AS [FullAddressLine]
	,[dbo].[ProperCase](TRIM(CustomerGroup)) AS [CustomerGroup]
	,[dbo].[ProperCase](TRIM(CustomerGroup)) AS [CustomerSubGroup]
	,TRIM([SalesRepCode]) AS [SalesPersonCode]
	,[dbo].[ProperCase](TRIM(SalesPersonName)) AS [SalesPersonName]
	--,'' AS [SalesPersonResponsible]
	,HASHBYTES('SHA2_256', TRIM([VATRegNr])) AS [VATNum]
	,OrganizationNum
	,HASHBYTES('SHA2_256', TRIM([AccountString])) AS [AccountNum]
	,TRIM([InternalExternal]) AS [InternalExternal]
	,TRIM([ABCCode]) AS [CustomerScore]
	,TRIM([CustomerType]) AS [CustomerType]

FROM [stage].[HAK_FI_Customer]
WHERE CustomerNum != '134144'
GROUP BY
	PartitionKey, Company, CustomerNum, CustomerName, [AddressLine1], [AddressLine2], [AddressLine3], [TelephoneNumber1], [TelephoneNumber2], [Email], [ZIP], [City], TRIM([State]), [District], CountryName, CountryCode, CustomerGroup, [SalesRepCode], SalesPersonName, [VATRegNr], OrganizationNum, [AccountString], [InternalExternal], [ABCCode], [CustomerType]
GO
PRINT N'Creating [stage].[AXL_UK_SOLine]'
GO
CREATE TABLE [stage].[AXL_UK_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[InvoiceType] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (22, 8) NULL,
[UnitCost] [decimal] (22, 8) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[VAT] [decimal] (18, 4) NULL,
[CashDiscountOffered] [decimal] (18, 4) NULL,
[CashDiscountUsed] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OrderType] [nvarchar] (50) NULL,
[SalesChannel] [varchar] (10) NULL,
[BusinessChain] [varchar] (10) NULL,
[Res1] [varchar] (100) NULL,
[Res2] [varchar] (100) NULL,
[Res3] [varchar] (100) NULL,
[PartDesc] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[vAXL_UK_SOLine]'
GO
CREATE VIEW [stage].[vAXL_UK_SOLine] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine), '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(PartNum), '#', TRIM(PartDesc))))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(PartDesc))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(InvoiceNum))))) AS SalesLedgerID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum), '#', (IIF(TRIM([PartNum]) LIKE 'IACO%' , 'MISC. CHARGES', TRIM([PartDesc]))))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT(int, IIF(InvoiceDate = '', 19900101, replace(convert(date, InvoiceDate), '-', ''))) AS SalesInvoiceDateID
	,UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine))) AS SalesInvoiceCode
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine))) AS SalesOrderCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(SalesPerson) AS SalesPersonName
	,TRIM(CustNum) AS [CustomerNum]
	,TRIM(PartNum) AS PartNum
	,UPPER(PartDesc) AS PartDesc
	,'' AS [PartType]
	,TRIM(OrderNum) AS [SalesOrderNum]
	,CAST(OrderLine AS text) AS [SalesOrderLine]
	,TRIM(OrderSubLine) AS [SalesOrderSubLine]
	,TRIM(OrderType) AS [SalesOrderType]
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,TRIM(InvoiceLine) AS [SalesInvoiceLine]
	,TRIM(InvoiceType) AS [SalesInvoiceType]
	,CASE WHEN InvoiceDate = '' THEN '1900-01-01' ELSE CONVERT(date, InvoiceDate) END AS [SalesInvoiceDate]
	,ActualDeliveryDate AS [ActualDelivDate]
	,SellingShipQty AS [SalesInvoiceQty]
	,TRIM(Unit) AS [UoM]
	,UnitPrice
	,UnitCost
	,DiscountAmount
	,IIF(UnitPrice*SellingShipQty = 0, 0, DiscountAmount/UnitPrice*SellingShipQty) AS DiscountPercent
	,CONVERT(decimal(18,4), CashDiscountOffered) AS [CashDiscOffered] 
	,CONVERT(decimal(18,4), CashDiscountUsed) AS [CashDiscUsed] 
	,TotalMiscChrg
	,VAT AS [VATAmount]
	,Currency
	,ExchangeRate
	,TRIM(CreditMemo) AS CreditMemo
	,TRIM([SalesChannel]) AS [SalesChannel]
	,TRIM([BusinessChain]) AS [Department]
	,TRIM(WarehouseCode) AS WarehouseCode
	,NULL AS [CostBearerNum]
	,NULL AS [CostUnitNum]
	,NULL AS [ReturnComment]
	,NULL AS [ReturnNum]
	,NULL AS [ProjectNum]
	,'' AS [IndexKey]
	,Res1 AS SIRes1
	,Res2 AS SIRes2
	,Res3 AS SIRes3
FROM stage.AXL_UK_SOLine


	--,CASE WHEN OrderType = 'MD' THEN 1 
	--		WHEN OrderType = 'MT' THEN 2
	--		WHEN OrderType = 'MR' THEN 3
	--		WHEN OrderType = 'IV' THEN 4
	--		WHEN OrderType = 'Misc. Charges' THEN 5 --added after Ulf changes in the night /DZ
	--	ELSE OrderType END AS [SalesOrderType]

--GROUP BY
--	PartitionKey, Company, SalesPerson, CustNum, PartNum, PartDesc, OrderNum, OrderLine, OrderSubLine,OrderType, InvoiceNum, InvoiceLine, InvoiceDate, SellingShipQty, UnitPrice, UnitCost, DiscountAmount, TotalMiscChrg, WarehouseCode, CreditMemo, ActualDeliveryDate, Currency, ExchangeRate, InvoiceType, Res1, Res2, Res3, Unit, VAT, SalesChannel, BusinessChain, CashDiscountOffered, CashDiscountUsed
GO
PRINT N'Creating [stage].[PAS_PL_SOLine]'
GO
CREATE TABLE [stage].[PAS_PL_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[company] [nvarchar] (8) NOT NULL,
[idpozycji] [nvarchar] (50) NULL,
[salesperson] [nvarchar] (150) NULL,
[custnum] [nvarchar] (50) NULL,
[partnum] [nvarchar] (50) NULL,
[ordernum] [nvarchar] (50) NULL,
[orderline] [nvarchar] (50) NULL,
[ordersubline] [nvarchar] (50) NULL,
[orderrelnum] [nvarchar] (50) NULL,
[ordertype] [nvarchar] (50) NULL,
[invoicenum] [nvarchar] (50) NULL,
[invoiceline] [nvarchar] (50) NULL,
[invoicetype] [nvarchar] (50) NULL,
[invoicedate] [date] NULL,
[actualdeliverydate] [nvarchar] (50) NULL,
[sellingshipqty] [decimal] (18, 4) NULL,
[unitprice] [decimal] (18, 4) NULL,
[unitcost] [decimal] (18, 4) NULL,
[discountamount] [decimal] (18, 4) NULL,
[totalmiscchrg] [decimal] (18, 4) NULL,
[site] [nvarchar] (50) NULL,
[creditmemo] [nvarchar] (100) NULL,
[indexkey] [nvarchar] (50) NULL,
[warehouseid] [nvarchar] (50) NULL,
[res1] [nvarchar] (100) NULL,
[res2] [nvarchar] (100) NULL,
[res3] [nvarchar] (100) NULL,
[vat] [nvarchar] (50) NULL,
[currency] [nvarchar] (50) NULL,
[exchangerate] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vPAS_PL_SOLine]'
GO
CREATE VIEW [stage].[vPAS_PL_SOLine] AS
--COMMENT EMPTY FIELDS // ADD TRIM() INTO CustomerID,PartID 23-01-05 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(company, '#',  TRIM(UPPER(custnum)), '#', TRIM(UPPER(ordernum)), '#', TRIM(UPPER(invoicenum)), '#', TRIM(UPPER(invoiceline)), '#', TRIM(idpozycji) ))) AS SalesInvoiceID --, '#', TRIM(UPPER(partnum)), '#',  TRIM(idpozycji) --, '#', IIF(sellingshipqty < 0, 'Return', '')
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(company, '#', TRIM(UPPER(ordernum)), '#', TRIM(UPPER(orderline)), '#', TRIM(UPPER(invoicenum))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(company, '#', TRIM(UPPER(custnum)), '#', TRIM(UPPER(invoicenum))))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(company,'#',TRIM(UPPER(ordernum)) ))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', company)) AS CompanyID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(company), '#', TRIM(custnum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(company, '#', TRIM(UPPER(custnum)) ))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(company), '#', TRIM(partnum)) ))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(company, '#', TRIM(UPPER(partnum)) ))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(company), '#', TRIM(warehouseid))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(company, '#', TRIM(UPPER(warehouseid))))) AS WarehouseID
	,CONCAT(company, '#', TRIM(UPPER(ordernum)), '#', TRIM(UPPER(orderline)), '#', TRIM(UPPER(invoicenum))) AS SalesOrderCode
	,CONVERT(int, replace(convert(date,invoicedate),'-','')) AS SalesInvoiceDateID  
	,CONCAT(company,'#', TRIM(UPPER(invoicenum)), '#', TRIM(UPPER(invoiceline)) ) AS SalesInvoiceCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey

	,company
	,salesperson AS SalesPersonName
	,TRIM(UPPER(custnum)) AS CustomerNum
	,TRIM(UPPER(partnum)) AS PartNum
	,IIF(sellingshipqty < 0, 'Return', '') AS PartType
	,TRIM(UPPER(ordernum)) AS SalesOrderNum
	,TRIM(UPPER(orderline)) AS SalesOrderLine
	,TRIM(ordersubline) AS SalesOrderSubLine
	,TRIM(ordertype) AS SalesOrderType
 	,TRIM(UPPER(invoicenum)) AS SalesInvoiceNum
	,TRIM(UPPER(invoiceline)) AS SalesInvoiceLine
	,TRIM(invoicetype) AS SalesInvoiceType
	,CASE WHEN invoicedate = '' THEN '1900-01-01' ELSE CONVERT(date, invoicedate) END AS SalesInvoiceDate
	,actualdeliverydate AS ActualDelivDate
	,sellingshipqty AS SalesInvoiceQty
	--,'' AS UoM
	,unitprice AS UnitPrice -- ATT.!, the net price
	,unitcost AS UnitCost
	--,0 AS DiscountPercent
	--,0 AS DiscountAmount
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	,totalmiscchrg AS TotalMiscChrg
	--,NULL AS VATAmount
	,'PLN' AS Currency
	,1 AS ExchangeRate
	,TRIM(creditmemo) AS CreditMemo
	--,CASE WHEN TRIM(UPPER(invoicenum)) like '%PP%' THEN 'Over The Counter sales'
	--	WHEN SalesChannel = 'B2B' THEN 'Webshop'
	--	ELSE 'Normal Order Handling' END AS SalesChannel
	,CASE WHEN TRIM(UPPER(invoicenum)) like '%PP%' THEN 'Over-the-Counter'
--		WHEN saleschannel = 'B2B' THEN 'Webshop'
		ELSE 'Normal Order Handling' END AS saleschannel
	,IIF(RIGHT(SUBSTRING(TRIM(UPPER(invoicenum)), 5, 3), 1) = '/', SUBSTRING(TRIM(UPPER(invoicenum)), 5, 2),  SUBSTRING(TRIM(UPPER(invoicenum)), 5, 3)) AS Department
	,IIF(TRIM(UPPER(PartNum)) like 'U%', 'Service', TRIM(UPPER(warehouseID))) AS WarehouseCode
	--,NULL AS DeliveryAddress
	--,'' AS CostBearerNum
	--,'' AS CostUnitNum
	--,'' AS ReturnComment
	--,'' AS ReturnNum
	--,'' AS ProjectNum
	,TRIM(idpozycji) AS IndexKey
	,res1 AS SIRes1
	,res2 AS SIRes2
	,res3 AS SIRes3
FROM 
	stage.PAS_PL_SOLine
WHERE
	TRIM(invoicetype) <> 'Pre-Invoice' -- DZ added based on the new Invoice source data situation
GROUP BY
	PartitionKey, company, SalesPerson, TRIM(UPPER(custnum)), TRIM(UPPER(partnum)), TRIM(UPPER(ordernum)), TRIM(UPPER(orderline)), ordersubline, ordertype, TRIM(UPPER(invoicenum)), TRIM(UPPER(invoiceline)), TRIM(invoicetype), invoicedate, actualdeliverydate, sellingshipqty, unitprice, unitcost, TRIM(creditmemo), discountamount, totalmiscchrg, TRIM(UPPER(warehouseid)), res1, res2, res3, TRIM(idpozycji) --, saleschannel
GO
PRINT N'Creating [dm_PT].[fctSalesLedger]'
GO

CREATE VIEW [dm_PT].[fctSalesLedger] AS 

SELECT 
 sl.[SalesLedgerID]
,sl.[SalesPersonNameID]
,sl.[Company]
,sl.[CustomerNum]
,sl.[SalesInvoiceNum]
,sl.[SalesInvoiceDate]
,sl.[SalesDueDate]
,sl.[SalesLastPaymentDate]
,sl.[InvoiceAmount]
,sl.[RemainingInvoiceAmount]
,sl.[ExchangeRate]
,sl.[Currency]
,sl.[VATAmount]
,sl.[VATCode]
,sl.[PayToName]
,sl.[PayToCity]
,sl.[PayToContact]
,sl.[PaymentTerms]
,sl.[SLRes1]
,sl.[SLRes2]
,sl.[SLRes3]
,sl.[SalesLedgerCode]
,sl.[CompanyID]
,sl.[PartitionKey]
,sl.[PaidInvoiceAmount]
,sl.[AccountingDate]
,sl.[AgingPeriod]
,sl.[AgingSort]
,sl.[VATCodeDesc]
,sl.[CustomerID]
,sl.[LinkToOriginalInvoice]
,sl.[SalesInvoiceDateID]
,sl.[PaymentStatus]
,sl.[WarehouseID]
FROM [dm].[FactSalesLedger] sl
LEFT JOIN dbo.Company com ON sl.Company = com.Company
WHERE com.BusinessArea = 'Power Transmission Solutions' AND com.[Status] = 'Active'


  --WHERE Company  IN ('ACZARKOV', 'AcornUK', 'BSIBELL', 'JDKJENSS', 'JDKKALTE', 'JFIJENSS', 'MNLMAK', 'JNOJENSS', 'NORNO', 'JSEJENSS', 'SSWSE', 'NomoSE', 'NomoDK', 'NomoFI', 'NomoNo', 'PASSEROT', 'SKSSCOFI', 'SCOFI', 'SMKFI', 'SNLSPRUI', 'SPRUITNL', 'SVESE', 'SPRUITNL')
GO
PRINT N'Creating [stage].[TRA_SE_SalesLedger]'
GO
CREATE TABLE [stage].[TRA_SE_SalesLedger]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (10) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[SalesInvoiceNum] [nvarchar] (50) NULL,
[SalesInvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[InvoiceAmount] [decimal] (18, 4) NULL,
[RemainingInvoiceAmount] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[VATAmount] [decimal] (18, 4) NULL,
[VATCode] [nvarchar] (50) NULL,
[momsbeskrivning] [nvarchar] (50) NULL,
[PaymentTerms] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vTRA_SE_SalesLedger]'
GO

CREATE VIEW [stage].[vTRA_SE_SalesLedger] AS
--COMMENT EMPTY FIELDS // ADD UPPER()TRIM() INTO CustomerID 2022-12-27 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(UPPER(Company), '#', TRIM(CustomerNum), '#', TRIM(SalesInvoiceNum)))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(UPPER([Company]), '#', TRIM(CustomerNum)))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM(CustomerNum))))) AS CustomerID
	,CONCAT(UPPER(Company), '#', TRIM(CustomerNum), '#', TRIM(SalesInvoiceNum)) AS SalesLedgerCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(CustomerNum) AS CustomerNum
	,TRIM(SalesInvoiceNum) AS SalesInvoiceNum
	,CONVERT(date, SalesInvoiceDate) AS SalesInvoiceDate
	,CONVERT(date, DueDate) AS SalesDueDate
	,CONVERT(date, LastPaymentDate) AS SalesLastPaymentDate
	,InvoiceAmount
	,RemainingInvoiceAmount
	,ExchangeRate
	,Currency
	,VATAmount
	,momsbeskrivning AS VATCode
	--,'' AS PayToName
	--,'' AS PayToCity
	--,'' AS PayToContact
	,PaymentTerms
	--,'' AS SLRes1
	--,'' AS SLRes2
	--,'' AS SLRes3
	--,NULL			AS PaidInvoiceAmount
	,'1900-01-01' AS AccountingDate
	--,NULL AS AgingPeriod
	--,NULL AS AgingSort
	--,NULL AS VATCodeDesc
	--,NULL AS LinkToOriginalInvoice
FROM 
	stage.TRA_SE_SalesLedger
GO
PRINT N'Creating [dm_ALL].[dimWarehouse]'
GO

CREATE VIEW [dm_ALL].[dimWarehouse] AS

SELECT 
 whs.[WareHouseID]
,whs.[CompanyID]
,whs.[Company]
,whs.[WarehouseCode]
,whs.[WarehouseName]
,whs.[WarehouseDistrict]
,whs.[WarehouseAddress]
,whs.[WarehouseDescription]
,whs.[WarehouseType]
,whs.[WarehouseCountry]
,whs.[WarehouseSite]
FROM dm.DimWarehouse as whs
GO
PRINT N'Creating [stage].[SPR_NL_OLine]'
GO
CREATE TABLE [stage].[SPR_NL_OLine]
(
[PartitionKey] [nvarchar] (50) NULL,
[Company] [nvarchar] (8) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[SalesOrderNum] [nvarchar] (50) NULL,
[SaleOrderLine] [nvarchar] (50) NULL,
[SalesOrderSubLine] [nvarchar] (50) NULL,
[SalesOrderType] [nvarchar] (50) NULL,
[SalesOrderCategory] [nvarchar] (50) NULL,
[SalesOrderStatus] [nvarchar] (50) NULL,
[SalesOrderDate] [nvarchar] (50) NULL,
[NeedByDate] [nvarchar] (50) NULL,
[ExpDelivDate] [nvarchar] (50) NULL,
[ActualDelivDate] [nvarchar] (50) NULL,
[SalesInvoiceNum] [nvarchar] (50) NULL,
[SalesOrderQty] [nvarchar] (50) NULL,
[DelivQty] [nvarchar] (50) NULL,
[InvoiceQty] [nvarchar] (50) NULL,
[RemainingQty] [nvarchar] (50) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [nvarchar] (50) NULL,
[UnitCost] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [nvarchar] (50) NULL,
[OpenRelease] [nvarchar] (50) NULL,
[DiscountPercent] [nvarchar] (50) NULL,
[DiscountAmount] [nvarchar] (50) NULL,
[TotalMiscChrg] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartType] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[Department] [nvarchar] (50) NULL,
[ProjectNum] [nvarchar] (50) NULL,
[IndexKey] [nvarchar] (50) NULL,
[SORes1] [nvarchar] (100) NULL,
[SORes2] [nvarchar] (100) NULL,
[SORes3] [nvarchar] (100) NULL,
[ABC_Customer] [nvarchar] (50) NULL,
[OrderDiscountPercentage] [nvarchar] (50) NULL,
[NettLineTotalOrdered] [nvarchar] (50) NULL,
[DeliveredQtyAmount] [nvarchar] (50) NULL,
[InvoiceQtyAmount] [nvarchar] (50) NULL,
[RemainingQtyAmount] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vSPR_NL_OLine]'
GO
CREATE VIEW [stage].[vSPR_NL_OLine] AS
--COMMENT EMPTY FIELDS // ADD TRIM() UPPER()INTO PartID,WarehouseID,CustomerID 23-01-09 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM([SalesOrderNum]), '#', TRIM([SaleOrderLine]), '#', TRIM([SalesOrderSubLine]) ))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [Company])) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustomerNum)))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM([PartNum]))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM([PartNum])))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WareHouseID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(WarehouseCode)))) AS WareHouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(SalesOrderNum)))) AS SalesOrderNumID
	,CONCAT(Company, '#', TRIM(CustomerNum), '#', TRIM(SalesOrderNum), '#', TRIM(SaleOrderLine), '#', TRIM(PartNum)) AS SalesOrderCode
	,CONVERT(int, CONCAT('20', SUBSTRING([SalesOrderDate], 7,2),SUBSTRING([SalesOrderDate], 4,2),SUBSTRING([SalesOrderDate], 1,2))) AS SalesOrderDateID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey

	,[Company]
	,TRIM([CustomerNum]) AS [CustomerNum]
	,TRIM([SalesOrderNum]) AS [SalesOrderNum]
	,TRIM([SaleOrderLine]) AS [SalesOrderLine]
	,TRIM([SalesOrderSubLine]) AS [SalesOrderSubLine]
	,[SalesOrderType]
	,TRIM([SalesOrderCategory]) AS [SalesOrderCategory]
	,CONCAT('20', SUBSTRING([SalesOrderDate], 7,2), '-', SUBSTRING([SalesOrderDate], 4,2), '-', SUBSTRING([SalesOrderDate], 1,2)) AS [SalesOrderDate]
	,IIF([NeedbyDate] = '?', '1900-01-01', CONCAT('20', SUBSTRING([NeedbyDate], 7,2), '-', SUBSTRING([NeedbyDate], 4,2), '-', SUBSTRING([NeedbyDate], 1,2))) AS [NeedbyDate] 
	,IIF([ExpDelivDate] = '31/12/9999', '1900-01-01', CONCAT('20', SUBSTRING([ExpDelivDate], 7,2), '-', SUBSTRING([ExpDelivDate], 4,2), '-', SUBSTRING([ExpDelivDate], 1,2))) AS [ExpDelivDate]
	,IIF(ActualDelivDate = 'na', '1900-01-01', CONCAT('20', SUBSTRING(ActualDelivDate, 7,2), '-', SUBSTRING(ActualDelivDate, 4,2), '-', SUBSTRING(ActualDelivDate, 1,2))) AS ActualDelivDate
	,CONCAT('20', SUBSTRING([ExpDelivDate], 7,2), '-', SUBSTRING([ExpDelivDate], 4,2), '-', SUBSTRING([ExpDelivDate], 1,2)) AS ConfirmedDelivDate 
	,TRIM([SalesInvoiceNum]) AS [SalesInvoiceNum]
	,CONVERT(decimal(18,4), REPLACE([SalesOrderQty], ',', '.')) AS [SalesOrderQty]
	,CONVERT(decimal(18,4), REPLACE([DelivQty], ',', '.')) AS [DelivQty]
--	,[InvoiceQty]
	,CONVERT(decimal(18,4), REPLACE([RemainingQty], ',', '.')) AS [RemainingQty]
	,CONVERT(decimal(18,4), REPLACE(InvoiceQty, ',', '.')) AS SalesInvoiceQty
	,TRIM([UoM]) AS [UoM]
	,CONVERT(decimal(18,4), REPLACE(NettLineTotalOrdered, ',', '.'))/CONVERT(decimal(18,4), REPLACE([SalesOrderQty], ',', '.')) AS [UnitPrice] --REPLACE([UnitPrice], ',', '.')
	,REPLACE(REPLACE([UnitCost], '?', 0), ',', '.') AS [UnitCost]
	--,NULL AS [TotalMiscChrg] --CONVERT(decimal(18,4), REPLACE([SalesOrderQty], ',', '.'))*REPLACE([UnitPrice], ',', '.')*CAST(REPLACE([OrderDiscountPercentage], ',', '.') AS Decimal(18,4))*-1/1
	,CONVERT(decimal(18,4), REPLACE(NettLineTotalOrdered, ',', '.')) AS [SORes1]
	,REPLACE(DeliveredQtyAmount, ',', '.') AS [SORes2]
	,REPLACE(RemainingQtyAmount, ',', '.') AS [SORes3]
	,SalesOrderStatus AS [OpenRelease] --IIF([SalesInvoiceNum] IS NULL, 1, 0)  AS 
	,CONVERT(decimal(18,4), REPLACE(REPLACE([DiscountPercent], '?', 0), ',', '.')) AS [DiscountPercent] 
	--,NULL AS [DiscountAmount] --CONVERT(decimal(18,4), REPLACE([DiscountAmount], ',', '.'))
	,CONVERT(decimal(18,4), Replace(TotalMiscChrg, ',', '.')) AS TotalMiscChrg
	,TRIM([PartNum]) AS [PartNum]
	,TRIM([PartType]) AS [PartType]
	,TRIM([PartStatus]) AS [PartStatus]
	,TRIM([SalesPersonName]) AS [SalesPersonName]
	,TRIM([WarehouseCode]) AS [WarehouseCode]
	,[Currency]
	,CONVERT(decimal(18,4), [ExchangeRate]) AS [ExchangeRate]
	,TRIM([SalesChannel]) AS [SalesChannel]
	,TRIM([SalesChannel]) AS AxInterSalesChannel
	,TRIM([Department]) AS [Department]
	,IIF(SalesOrderStatus = 'Closed' AND DeliveredQtyAmount = '0', '1', '0') AS [ProjectNum]  --use as cancellation for Spruit as it is i the model and PBI, not the Cancellation itself
	,[IndexKey]
	,IIF(SalesOrderStatus = 'Closed' AND DeliveredQtyAmount = '0', '1', '0') AS Cancellation
FROM [stage].[SPR_NL_OLine]
--WHERE CONVERT(decimal(18,4), REPLACE([SalesOrderQty], ',', '.')) > 0
--GROUP BY
--	PartitionKey, Company, SalesPersonName, CustomerNum, PartNum, PartType, SalesOrderNum, SalesOrderLine,SalesOrderSubLine, SalesOrderType, SalesInvoiceNum, [SalesOrderDate], UoM, WarehouseCode, Currency, ExchangeRate, Indexkey, SalesChannel, Department,  ProjectNum, SORes1, SORes2, SORes3, [SalesOrderCategory], [NeedbyDate], [ExpDelivDate], [PartStatus], [OpenRelease], [DelivQty], [SalesOrderQty], [RemainingQty]   --, UnitPrice, UnitCost, DiscountPercent, DiscountAmount
GO
PRINT N'Creating [stage].[CER_SE_PurchaseLedger]'
GO
CREATE TABLE [stage].[CER_SE_PurchaseLedger]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierCode] [nvarchar] (50) NOT NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[InvoiceLCYAmount] [decimal] (18, 4) NOT NULL,
[InvoiceCurrAmount] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (10) NULL,
[VATPaid] [decimal] (18, 4) NULL,
[VATcode] [nvarchar] (10) NULL,
[PayToName] [nvarchar] (50) NULL,
[PaymentTermsCode] [nvarchar] (50) NULL,
[PrepaymentNum] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_SE_PurchaseLedger]'
GO
CREATE VIEW [stage].[vCER_SE_PurchaseLedger] AS 
--ADD TRIM() INTO Supplier 23-01-23 VA COMMENT EMPTY FIELDS
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(SupplierCode), '#', TRIM(PurchaseInvoiceNum)))) AS PurchaseLedgerID -- shall = in Invoice
	,CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(PurchaseInvoiceNum)) AS PurchaseLedgerCode --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',TRIM(Company))) AS CompanyID --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierCode))))) AS SupplierID --Redundant?
	--,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(Company, '#', TRIM(UPPER(SupplierCode)))))) AS SupplierID --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(PurchaseInvoiceNum)))) AS PurchaseInvoiceID --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM(CurrencyCode)))) AS CurrencyID --Redundant?
	,CONVERT(int, replace(convert(date,InvoiceDate),'-','')) AS PurchaseInvoiceDateID  --Redundant?
	,[PartitionKey]

	,[Company]
	,TRIM(UPPER(SupplierCode)) AS SupplierNum
	,[PurchaseOrderNum]
	,[PurchaseInvoiceNum]
	,CONVERT(date, [InvoiceDate]) AS PurchaseInvoiceDate
	,CONVERT(date, [DueDate]) AS PurchaseDueDate
	,CONVERT(date, [LastPaymentDate]) AS PurchaseLastPaymentDate
	,[InvoiceLCYAmount] 
	,[InvoiceCurrAmount] AS InvoiceAmount
--	,IIF([InvoiceCurrAmount]=0, null, [InvoiceLCYAmount]/[InvoiceCurrAmount]) AS ExchangeRate
	,[ExchangeRate]
	,[CurrencyCode] AS Currency
	,[VATPaid]	AS VATAmount
	,[VATcode]	AS VATCode
	,[PayToName]
	--,'' AS [PayToCity]
	--,'' AS [PayToContact]
	,[PaymentTermsCode]	AS PaymentTerms
	,[PrepaymentNum]
	--,'' AS LastPaymentNum
	--,'' AS PLRES1
	--,'' AS PLRES2
	--,'' AS PLRES3
	--,NULL AS PaidInvoiceAmount
	--,NULL AS RemainingInvoiceAmount
	--,NULL AS LinkToOriginalInvoice
	,CAST('1900-01-01' AS date) AS AccountingDate
	--,NULL AS AgingPeriod
	--,NULL AS AgingSort
	--,NULL AS VATCodeDesc
FROM 
	[stage].[CER_SE_PurchaseLedger]
GO
PRINT N'Creating [stage].[ABK_SE_Customer]'
GO
CREATE TABLE [stage].[ABK_SE_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[MainCustomerName] [nvarchar] (100) NULL,
[CustomerName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[AddressLine3] [nvarchar] (100) NULL,
[TelephoneNumber1] [nvarchar] (50) NULL,
[Email] [nvarchar] (100) NULL,
[ZipCode] [nvarchar] (50) NULL,
[City] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[DistrictNm] [nvarchar] (200) NULL,
[CDelTrm] [nvarchar] (50) NULL,
[CDelTrmNm] [nvarchar] (200) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[Division] [nvarchar] (50) NULL,
[CustomerIndustry] [nvarchar] (50) NULL,
[CustomerSubIndustry] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[SalesPersonResponsible] [nvarchar] (100) NULL,
[VATRegNo] [nvarchar] (30) NULL,
[CustPrGr] [nvarchar] (100) NULL,
[CustPrGrTxt] [nvarchar] (100) NULL,
[OrganizationNum] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vABK_SE_Customer]'
GO
CREATE VIEW [stage].[vABK_SE_Customer] AS
--COMMENT EMPTY FIELDS 2022-12-21 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONCAT(Company, '#', TRIM([CustomerNum])) AS CustomerCode
	,PartitionKey

	,Company
	,TRIM(CustomerNum) AS [CustomerNum]
	,MainCustomerName
    ,[dbo].[ProperCase](CustomerName) AS CustomerName
	,LEFT([AddressLine1], 100) AS [AddressLine1]
	,LEFT([AddressLine2], 100) AS [AddressLine2]
	,LEFT([AddressLine3], 100) AS [AddressLine3]
	,[TelephoneNumber1] AS [TelephoneNum1]
	--,'' AS [TelephoneNum2]
	,[Email]
	,[ZipCode]
	,CASE WHEN [City] = ' '	AND LEFT(AddressLine3, 1) IN ('1','2','3','4','5','6','7','8','9') THEN trim(substring(replace([dbo].[ProperCase](AddressLine3),' ', ''), 6, 100)) ELSE [dbo].[ProperCase]([City]) end AS [City]
	,[State]
	,[DistrictNm] AS SalesDistrict
	,IIF([CountryName] = '' OR [CountryName] IS NULL, 'SE', [CountryCode]) AS [CountryCode]
	,[dbo].[ProperCase]([CountryName]) AS [CountryName]
	,Division
	,CustomerIndustry
	,CustomerSubIndustry
	,[AddressLine3] AS [AddressLine]
	,CONCAT([dbo].[ProperCase](TRIM([CountryName])), + ',  ' + [dbo].[ProperCase](TRIM([City])), + ',  ' + TRIM([ZipCode]), + ',  ' + trim(addressline3)) AS [FullAddressLine]
	,[CustomerGroup] -- Belongs to Gr3
	,[CustomerSubGroup] -- SellerID
	,[SalesRepCode] AS SalesPersonCode
	,[dbo].[ProperCase](SalesPersonName) AS [SalesPersonName]
	,[SalesPersonResponsible]
	,[VATRegNo] AS [VATNum]
	,OrganizationNum
	--,''	AS [AccountNum] 
	,IIF(SalesPersonName = 'Koncernföretag', 'I', 'E') AS [InternalExternal]
	,[CustomerSubGroup] AS [CustomerScore]
	,CDelTrmNm AS [CustomerType]

FROM [stage].[ABK_SE_Customer]
GO
PRINT N'Creating [stage].[HAK_FI_SOLine]'
GO
CREATE TABLE [stage].[HAK_FI_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderRel] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (100) NULL,
[PartNum] [nvarchar] (50) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Indexkey] [nvarchar] (50) NULL,
[Site] [nvarchar] (50) NULL,
[OrderType] [int] NULL
)
GO
PRINT N'Creating [stage].[vHAK_FI_SOLine]'
GO

CREATE VIEW [stage].[vHAK_FI_SOLine] AS
--COMMENT EMPTY FIELD // ADD TRIM() UPPER() INTO WarehouseID,CustomerID 2022-12-21 VA 
-- CHANGE SALESORDERCODE AND SalesLedgerID 23-02-20 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(UPPER(CustNum)), '#', TRIM(UPPER(OrderNum)), '#', TRIM(UPPER(PartNum)), '#', TRIM(UPPER(InvoiceNum)), '#', TRIM(UPPER(InvoiceLine)) ))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(UPPER(OrderNum)), '#', TRIM(UPPER(OrderLine)), '#', TRIM(UPPER(InvoiceNum))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum), '#', TRIM(InvoiceNum))))) AS SalesLedgerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(UPPER(IIF(CustNum = '' OR CustNum IS NULL, 'MissingCustomer', CustNum))), '#', TRIM(UPPER(InvoiceNum))))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(UPPER(OrderNum)) ))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(UPPER(IIF(CustNum = '' OR CustNum IS NULL, 'MissingCustomer', CustNum))) ))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(UPPER(IIF(PartNum = '' OR PartNum IS NULL, 'MissingPart', PartNum))) ))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', WarehouseCode))) AS WarehouseID
	--,UPPER(CONCAT(TRIM(Company), '#', TRIM(OrderNum), '#', TRIM(PartNum))) AS SalesOrderCode
	,CONCAT(Company, '#', TRIM(UPPER(OrderNum)), '#', TRIM(UPPER(IIF(PartNum = '' OR PartNum IS NULL, 'MissingPart', PartNum)))) AS SalesOrderCode
	,CONVERT(int, replace(convert(date,InvoiceDate),'-','')) AS SalesInvoiceDateID  
	,CONCAT(Company, '#', TRIM(UPPER(InvoiceNum)), '#', TRIM(UPPER(InvoiceLine)) ) AS SalesInvoiceCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey

	,TRIM(Company) AS Company
	,TRIM(SalesPerson) AS SalesPersonName
	,TRIM(UPPER(CustNum)) AS CustomerNum -- IIF(CustNum = '' OR CustNum IS NULL, 'MissingCustomer', CustNum)
	,TRIM(UPPER(PartNum)) AS PartNum -- IIF(PartNum = '' OR PartNum IS NULL, 'MissingPart', PartNum)
	,CASE WHEN TRIM(UPPER(OrderNum)) = '0' THEN 'PrimaryPart' ELSE 'SubPart' END  AS PartType
	,TRIM(UPPER(OrderNum)) AS SalesOrderNum
	,TRIM(UPPER(OrderLine)) AS SalesOrderLine
	,OrderSubLine AS SalesOrderSubLine
--	,OrderRel AS OrderRelNum
	,OrderType AS SalesOrderType
 	,TRIM(UPPER(InvoiceNum)) AS SalesInvoiceNum
	,TRIM(UPPER(InvoiceLine)) AS SalesInvoiceLine
	--,'' AS SalesInvoiceType
	,CASE WHEN InvoiceDate = '' THEN '1901-01-01' ELSE CONVERT(date, InvoiceDate) END AS SalesInvoiceDate
	,ActualDeliveryDate AS ActualDelivDate
	,SellingShipQty AS SalesInvoiceQty
	--,'' AS UoM
	,UnitPrice
	,CASE WHEN CreditMemo = '1' THEN UnitCost*-1 ELSE UnitCost END AS UnitCost
	--,0 AS DiscountPercent
	,DiscountAmount
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	,TotalMiscChrg
	--,0 AS VATAmount
	,'EUR' AS Currency
	,CONVERT(decimal (18,4), 1) AS ExchangeRate
	,CreditMemo
	--,'' AS SalesChannel
	--,'' AS Department
	,WarehouseCode
	--,NULL AS DeliveryAddress
	--,'' AS CostBearerNum
	--,'' AS CostUnitNum
	--,'' AS ReturnComment
	--,'' AS ReturnNum
	--,'' AS ProjectNum
	--,'' AS IndexKey
	--,'' AS SIRes1
	--,'' AS SIRes2
	--,'' AS SIRes3
FROM 
	stage.HAK_FI_SOLine
GROUP BY
	PartitionKey, Company, SalesPerson, CustNum, PartNum, TRIM(UPPER(OrderNum)), TRIM(UPPER(OrderLine)), OrderSubLine, OrderType,InvoiceNum, TRIM(UPPER(InvoiceLine)), InvoiceDate, ActualDeliveryDate, SellingShipQty, UnitPrice, UnitCost, CreditMemo, DiscountAmount, TotalMiscChrg, WarehouseCode--, TRIM(UPPER([Site]))
GO
PRINT N'Creating [stage].[SCM_FI_Part]'
GO
CREATE TABLE [stage].[SCM_FI_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[PartNum] [nvarchar] (50) NULL,
[UOM] [nvarchar] (50) NULL,
[ConvFactor] [decimal] (18, 4) NULL,
[PartDescription] [nvarchar] (max) NULL,
[PartDescription2] [nvarchar] (max) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[ProductGroup2] [nvarchar] (50) NULL,
[CommodityCode] [nvarchar] (50) NULL,
[CountryOfOrigin] [nvarchar] (50) NULL,
[NetWeight] [decimal] (18, 4) NULL,
[Site] [nvarchar] (50) NULL,
[Brand] [nvarchar] (50) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[ReorderLevel] [decimal] (18, 4) NULL,
[MinOrderQty] [decimal] (18, 4) NULL,
[StartDate] [date] NULL,
[EndDate] [date] NULL,
[ItemStatus] [int] NULL
)
GO
PRINT N'Creating [stage].[vSCM_FI_Part]'
GO
CREATE VIEW [stage].[vSCM_FI_Part] AS
--COMMENT EMPTY FIELDS // ADD TRIM() UPPER() INTO PartID 2022-12-21
-- Made change 2023-05-26 because of  IT Support Ticket 104973 where box quantity was requested as a new field. Since the stage table can have multiple partnums per site and UoM, a CTE had to be made to do the correct grouping.
with first_result as (
SELECT 
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company] ,'#', [PartNum]))) AS PartID--,'#', [Site]
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', MAX(TRIM([PartNum])))))) AS PartID  
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,CONCAT([Company], '#', MAX(TRIM([PartNum])), '#', MAX([Site])) AS PartCode
	,PartitionKey

	,[Company]
	,MAX(TRIM([PartNum])) AS [PartNum]
	,'' AS UoM
	--,'' AS [PartName]
	,[PartDescription]
	,[PartDescription2]
	--,'' AS [PartDescription3]
	--,NULL AS MainSupplier
	--,NULL AS AlternativeSupplier
	,[ProductGroup]
	,[ProductGroup2]
	,MAX([Site]) AS [ProductGroup3]
	--,MAX(replace(ConvFactor,'.0000','')) AS [ProductGroup4]
	,iif(trim(UOM) = 'BOX' and ConvFactor != '0.0000', MAX(replace(ConvFactor,'.0000','')), '') AS [ProductGroup4]
	,[Brand] -- added 20201125
	,[CommodityCode]
	--,'' AS PartReplacementNum
	--,'' AS PartStatus
	,[CountryOfOrigin]
	,[NetWeight]
	--,'' AS [Material]
	--,'' AS [Barcode]
	,MAX([ReorderLevel]) AS [ReOrderLevel]
	--,'' AS PartResponsible
	--,'' AS [StartDate]
	--,'' AS [EndDate]
FROM [stage].[SCM_FI_Part]
GROUP BY
	PartitionKey, [Company], [PartDescription], [PartDescription2], [ProductGroup], [ProductGroup2], [CommodityCode], [CountryOfOrigin], [NetWeight], [Brand], [UOM], [ConvFactor]
	)

select 	
     PartID  
	,CompanyID
	,max(PartCode) AS PartCode
	,PartitionKey
	,[Company]
	,[PartNum]
	,UoM
	,[PartDescription]
	,[PartDescription2]
	,[ProductGroup]
	,[ProductGroup2]
	,MAX([ProductGroup3]) AS [ProductGroup3]
	,MAX([ProductGroup4]) AS  [ProductGroup4]
	,[Brand] -- added 20201125
	,[CommodityCode]
	,[CountryOfOrigin]
	,[NetWeight]
	,[ReOrderLevel]
	
from first_result

group by PartID, CompanyID, PartitionKey, [Company], [PartNum], [PartDescription], [PartDescription2], [ProductGroup], [ProductGroup2],  [CommodityCode], [CountryOfOrigin], [NetWeight], [Brand], [UOM],[ReOrderLevel]
GO
PRINT N'Creating [dm_PT].[fctPurchaseOrderDistinct]'
GO

CREATE VIEW [dm_PT].[fctPurchaseOrderDistinct] AS

SELECT pod.[PurchaseOrderNumID]
,pod.[CompanyID]
,pod.[SupplierID]
,pod.[PurchaseOrderNum]
,pod.[Company]
,pod.[Supplier]
FROM [dm].[FactPurchaseOrderDistinct] pod
--LEFT JOIN dbo.Company com ON pod.Company = com.Company
--WHERE com.BusinessArea = 'Power Transmission Solutions' AND com.[Status] = 'Active'

WHERE [Company] in ('ACZARKOV', 'AcornUK', 'BSIBELL', 'JDKJENSS', 'JDKKALTE', 'JFIJENSS', 'MNLMAK', 'JNOJENSS', 'JNOORBEL', 'JSEJENSS', 'JSESKSSW', 'NORNO', 'SSWSE', 'NomoSE', 'NomoDK', 'NomoFI', 'NomoNo', 'PASSEROT', 'SKSSCOFI', 'SCOFI', 'SMKFI', 'SNLSPRUI', 'SVESE')  -- The PT basket --
GO
PRINT N'Creating [stage].[TRA_FR_SOLine]'
GO
CREATE TABLE [stage].[TRA_FR_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartType] [nvarchar] (50) NULL,
[SalesOrderNum] [nvarchar] (50) NULL,
[SalesOrderLine] [nvarchar] (50) NULL,
[SalesOrderSubLine] [nvarchar] (50) NULL,
[SalesOrderType] [nvarchar] (50) NULL,
[SalesInvoiceNum] [nvarchar] (50) NULL,
[SalesInvoiceLine] [nvarchar] (50) NULL,
[SalesInvoiceType] [nvarchar] (50) NULL,
[SalesInvoiceDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[SalesInvoiceQty] [decimal] (18, 4) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[CashDiscountOffered] [decimal] (18, 4) NULL,
[CashDiscountUsed] [decimal] (18, 4) NULL,
[VATAmount] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[Department] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[CostBearerNum] [nvarchar] (50) NULL,
[CostUnitNum] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (max) NULL,
[ReturnNum] [nvarchar] (50) NULL,
[ProjectNum] [nvarchar] (50) NULL,
[IndexKey] [nvarchar] (50) NULL,
[SIRes1] [nvarchar] (100) NULL,
[SIRes2] [nvarchar] (100) NULL,
[SIRes3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vTRA_FR_SOLine]'
GO
CREATE VIEW [stage].[vTRA_FR_SOLine] AS
--ADD UPPER() INTO PartID,CustomerID,WarehouseID 22-12-29 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(UPPER(Company), '#', TRIM(CustomerNum), '#', TRIM(SalesOrderNum), '#', TRIM(SalesOrderLine), '#', TRIM(SalesOrderSubLine), '#', TRIM(PartNum), '#', TRIM(SalesInvoiceNum), '#', TRIM(SalesOrderType), '#', TRIM(WarehouseCode)))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(UPPER(Company), '#', TRIM(SalesOrderNum), '#', TRIM(SalesOrderLine)))) AS SalesOrderID
--	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(SalesInvoiceNum)))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(UPPER(Company), '#', TRIM(CustomerNum), '#', TRIM(SalesInvoiceNum)))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(UPPER(Company), '#', TRIM(SalesOrderNum)))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(UPPER(Company), '#', TRIM(IIF(CustomerNum IS NULL OR CustomerNum = '', 'MISSINGCUSTOMER', CustomerNum))))) AS CustomerID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(UPPER(Company), '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WareHouseID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(UPPER(Company), '#', WarehouseCode))) AS WareHouseID
	,CONCAT(UPPER(Company), '#', TRIM(IIF(CustomerNum IS NULL OR CustomerNum = '', 'MISSINGCUSTOMER', CustomerNum)), '#', TRIM(SalesOrderNum), '#', TRIM(SalesOrderLine), '#', SUBSTRING(TRIM(SalesInvoiceNum), 2, 50)) AS SalesOrderCode 
	,CONVERT(int, replace(convert(date,SalesInvoiceDate), '-', '')) AS SalesInvoiceDateID 
	,CONCAT(UPPER(Company), '#', TRIM(REPLACE(SalesInvoiceNum, ' ', ''))) AS SalesInvoiceCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT( UPPER(Company), '#', '') ))	AS ProjectID
	,PartitionKey

	,TRIM(UPPER(Company)) AS Company
	,TRIM(SalesPersonName) AS SalesPersonName
	,TRIM(IIF(CustomerNum IS NULL OR CustomerNum = '', 'MISSINGCUSTOMER', CustomerNum)) AS CustomerNum
	,TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum)) AS PartNum
	,TRIM(PartType) AS PartType
	,TRIM(SalesOrderNum) AS SalesOrderNum
	,TRIM(SalesOrderLine) AS SalesOrderLine
	,TRIM(SalesOrderSubLine) AS SalesOrderSubLine
	,TRIM(SalesOrderType) AS SalesOrderType
	,TRIM(REPLACE(SalesInvoiceNum, ' ', '')) AS SalesInvoiceNum
	,TRIM(SalesInvoiceLine) AS SalesInvoiceLine
	,TRIM(SalesInvoiceType) AS SalesInvoiceType
	,SalesInvoiceDate
	,ActualDelivDate
	,UoM
	,SalesInvoiceQty
	,UnitPrice
	,UnitCost
	,DiscountPercent 
	,DiscountAmount 
	,CashDiscountOffered
	,CashDiscountUsed
	,(TotalMiscChrg) AS TotalMiscChrg
	,(VATAmount) AS VATAmount
	,Currency
	,(ExchangeRate) AS ExchangeRate
	,IIF(TRIM(SalesOrderType) = 'Avoir', 1, 0) AS CreditMemo
	,TRIM(SalesChannel) AS SalesChannel
	,CASE WHEN SalesPersonName = 'Cessions Inter Agences' THEN 'Traction Levage Internal'
		WHEN CustomerNum in ('20589', '21842', '24961', '26612', '26663', '26725', '26805', '26899', '27161', '27175', '27252', '27318', '27382', '27410', '27488', '27633', '27747', '27981', '28140', '28553', '28559', '28591', '28597', '28599', '28608', '28631', '28651', '9251') THEN 'AxInter Internal Sales'
		ELSE 'External Sales' END AS Department
	,TRIM(WarehouseCode) AS WarehouseCode
	--,NULL AS DeliveryAddress
	,CostBearerNum
	,CostUnitNum
	,ReturnComment
	,TRIM(ReturnNum) AS ReturnNum
	,TRIM(ProjectNum) AS ProjectNum
	,TRIM(IndexKey) AS IndexKey
	,SIRes1
	,SIRes2
	,SIRes3

FROM stage.TRA_FR_SOLine
WHERE SalesInvoiceNum <> ''

--GROUP BY
--	PartitionKey, Company, SalesPersonName, CustomerNum, PartNum, PartType, SalesOrderNum, SalesOrderLine, SalesOrderSubLine, SalesOrderType, SalesInvoiceNum, SalesInvoiceDate, ActualDelivDate, UoM, WarehouseCode, Currency, CreditMemo, Indexkey, SalesChannel, Department, CostBearerNum, CostUnitNum, ReturnComment, ReturnNum, ProjectNum, SIRes1, SIRes2, SIRes3, TotalMiscChrg, VATAmount, ExchangeRate--, UnitCost, LinePrice, SalesInvoiceQty
GO
PRINT N'Creating [dm_ALL].[fctProductionOrder]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [dm_ALL].[fctProductionOrder]
	AS 
	
	SELECT 
	[ProductionOrderID]
      ,[CustomerID]
      ,[PartID]
      ,[WarehouseID]
      ,[SalesOrderNumID]
      ,[CostUnitID]
      ,[CompanyID]
      ,[Company]
      ,[ProductionOrderNum]
      ,[ProductionOrderLineNum]
      ,[ProductionOrderSubLineNum]
      ,[PartNum]
      ,[Version]
      ,[UoM]
      ,[PartType]
      ,[OrderQuantity]
      ,[ScrappedQty]
      ,[CompletedQuantity]
      ,[RemainingQty]
      ,[Status]
      ,[CurrentOperationStage]
      ,[CurrentResourceGroup]
      ,[OrderCreateDate]
      ,[RequestedEndDate]
      ,[PlannedStartDate]
      ,[PlannedEndDate]
      ,[StartDate]
      ,[EndDate]
      ,[OrderType]
      ,[TotalHoursPlanned]
      ,[TotalHoursSpent]
      ,[SetupHoursSpent]
      ,[MaterialCost]
      ,[LabourCost]
      ,[OtherCost]
      ,[Currency]
      ,[ExchangeRate]
      ,[WarehouseCode]
      ,[BinNum]
      ,[CostUnitNum]
      ,[SalesOrderNum]
      ,[CustomerNum]
      ,[ProductionOrderCreaterName]
      ,[BatchNum]
	FROM dm.FactProductionOrder
GO
PRINT N'Creating [stage].[CER_FI_OLine]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[CER_FI_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (30) NULL,
[OrderNum] [nvarchar] (30) NULL,
[OrderLine] [nvarchar] (30) NULL,
[OrderSubLine] [nvarchar] (30) NULL,
[OrderRelNum] [nvarchar] (30) NULL,
[OrderDate] [date] NULL,
[DelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (30) NULL,
[OrderQty] [decimal] (38, 8) NULL,
[DelivQty] [decimal] (38, 8) NULL,
[RemainingQty] [decimal] (38, 8) NULL,
[UnitPrice] [numeric] (28, 8) NULL,
[UnitCost] [numeric] (28, 8) NULL,
[SumUnitCost] [numeric] (38, 6) NULL,
[SumUnitPrice] [numeric] (38, 6) NULL,
[CurrExchRate] [decimal] (28, 8) NULL,
[CurrencyCode] [nvarchar] (30) NULL,
[OpenRelease] [nvarchar] (1) NULL,
[DiscountPercent] [decimal] (38, 6) NULL,
[DiscountAmount] [numeric] (38, 6) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[NeedbyDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (50) NULL,
[SalesReturnOrderNum] [nvarchar] (30) NULL,
[SalesReturnInvoiceNum] [nvarchar] (30) NULL,
[WarehouseCode] [nvarchar] (30) NULL,
[OrderType] [nvarchar] (30) NULL,
[ConfirmedDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL
)
GO
PRINT N'Creating [stage].[vCER_FI_OLine]'
GO

CREATE VIEW [stage].[vCER_FI_OLine] AS
--COMMENT EMPTY FIELD // ADD TRIM() INTO CustomerID,PartID,WarehouseID 2022-12-20 VA
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',OrderNum,'#',OrderLine,'#',OrderSubLine,'#',InvoiceNum))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) ))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(WarehouseCode))))) AS WarehouseID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company,'#',WarehouseCode))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company,'#',TRIM(OrderNum)))) AS SalesOrderNumID
	--,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) ))) AS SalesOrderCode
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine),'#',InvoiceNum )) AS SalesOrderCode
	,CONVERT(int, replace(convert(date, OrderDate),'-','')) AS SalesOrderDateID  --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey 

	,UPPER(TRIM(Company)) AS Company 
	,UPPER(TRIM(CustNum)) AS CustomerNum  
	--,UPPER(TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum))) AS CustomerNum  
	,TRIM(OrderNum) AS SalesOrderNum
	,TRIM(OrderLine) AS SalesOrderLine
	,TRIM(OrderSubLine) AS SalesOrderSubLine
	,TRIM(OrderType) AS SalesOrderType
	--,'' AS SalesOrderCategory
	,OrderDate AS SalesOrderDate
	,NeedbyDate
	,DelivDate AS ExpDelivDate
	,ActualDelivDate
	,ConfirmedDelivDate
	--,'0' AS Cancellation
	,TRIM(InvoiceNum) AS SalesInvoiceNum
	,OrderQty AS SalesOrderQty
	,DelivQty
	,RemainingQty
	--,NULL AS SalesInvoiceQty
	--,'' AS UoM
	,UnitPrice
	,UnitCost
	,CurrencyCode AS Currency
	,1/CurrExChRate AS ExchangeRate  --Testing out 1/CurrExChRate because ExchangeRate seemed to be reversed for CFICERT /SM 2021-07-08
	,OpenRelease
	,DiscountAmount
	,DiscountPercent
	--,UPPER(TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) )) AS PartNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,IIF(OrderSubLine = '000000',  'Main',  'Sub' ) AS PartType -- added 20210422 /DZ
	,PartStatus
	,TRIM(SalesPerson) AS SalesPersonName
	,TRIM(WarehouseCode) AS WarehouseCode
	,'Normal Order Handling' AS SalesChannel
	,'Normal Order Handling' AS AxInterSalesChannel
	--,'' AS Department
	--,'' AS ProjectNum
	--,'' AS IndexKey
	--,'' AS SORes1
	--,'' AS SORes2
	--,'' AS SORes3
	--,NULL AS [TotalMiscChrg]
FROM stage.CER_FI_OLine
GROUP BY
	PartitionKey, Company, CustNum, OrderNum, OrderLine, OrderSubLine, OrderDate, NeedbyDate, DelivDate, InvoiceNum, OrderQty, DelivQty, RemainingQty, UnitPrice, UnitCost, CurrExChRate, CurrencyCode, OpenRelease, DiscountAmount, DiscountPercent, PartNum, PartStatus, SalesPerson, WarehouseCode, OrderType,ActualDelivDate
	,ConfirmedDelivDate
GO
PRINT N'Creating [stage].[CER_FI_StockBalance]'
GO
CREATE TABLE [stage].[CER_FI_StockBalance]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[Currency] [nvarchar] (50) NULL,
[BinNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (70) NOT NULL,
[DelivTime] [int] NULL,
[LastStockTakeDate] [date] NULL,
[LastStdCostCalDate] [date] NULL,
[MaxStockQty] [decimal] (18, 4) NULL,
[StockBalance] [decimal] (18, 4) NULL,
[StockValue] [decimal] (18, 4) NULL,
[AvgCost] [decimal] (18, 4) NULL,
[LandedCost] [decimal] (18, 4) NULL,
[ReserveQty] [decimal] (18, 4) NULL,
[BackOrderQty] [decimal] (18, 4) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[StockTakeDiff] [decimal] (18, 4) NULL,
[ReOrderLevel] [decimal] (18, 4) NULL,
[OptimalOrderQty] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vCER_FI_StockBalance]'
GO
CREATE   VIEW [stage].[vCER_FI_StockBalance] AS
--COMMENT EMPTY FIELDS 2022-12-21 VA 
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]),'#',TRIM([WarehouseCode]))))) AS ItemWarehouseID
	,UPPER(CONCAT([Company],'#',TRIM([PartNum]),'#',TRIM([WarehouseCode]))) AS ItemWarehouseCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID -- var '0000000'
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([WarehouseCode])) AS WarehouseCode
	,Currency
	,BinNum
	,BatchNum
	,UPPER(TRIM([SupplierNum])) AS SupplierNum
	,UPPER(TRIM([PartNum])) AS PartNum
	,[DelivTime]
	,convert(date, [LastStockTakeDate]) AS LastStockTakeDate
	,LastStdCostCalDate
	--,0 AS SafetyStock
	,MaxStockQty
	,[StockBalance]
	,[StockBalance]*[AvgCost] AS StockValue
	,[AvgCost]
	,[ReserveQty]
	,[BackOrderQty]
	,[OrderQty]
	,[StockTakeDiff]
	,[ReOrderLevel]
	,[OptimalOrderQty]
	,LandedCost AS SBRes1
	--,'' AS SBRes2
	--,'' AS SBRes3
	,StockValue AS [FIFOValue]
	,'' AS [DelivTimeToWHS]-- will not be sent out to new companies, not delete in DW for that use as reservation
	,'' AS [DelivTimeDesc]-- will not be sent out to new companies, not delete in DW for that use as reservation
	,'' AS [DaysOnStock]
	,convert(date, '') AS OrderDateSupplier
	,convert(date, '') AS OrderDateCust
	,'' AS BatchNoPrefix-- will not be sent out to new companies, not delete in DW for that use as reservation
	,'' AS BatchNoSuffix-- will not be sent out to new companies, not delete in DW for that use as reservation
	
FROM 
	[stage].[CER_FI_StockBalance]
GROUP BY
	[PartitionKey],[Company],[PartNum],[WarehouseCode],[StockBalance],[ReserveQty],[BackOrderQty],[OrderQty],[StockTakeDiff],[ReOrderLevel],BinNum,[SupplierNum],[DelivTime], [LastStockTakeDate],LastStdCostCalDate,
	BatchNum, StockValue,[OptimalOrderQty], MaxStockQty,Currency, [AvgCost], LandedCost --BatchNoPrefix,BatchNoSuffix,,[DelivTimeToWHS]
GO
PRINT N'Creating [stage].[NOM_SE_Customer]'
GO
CREATE TABLE [stage].[NOM_SE_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[CustomerName] [nvarchar] (100) NULL,
[MainCustomerName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[AddressLine3] [nvarchar] (100) NULL,
[ABCCode] [nvarchar] (10) NULL,
[City] [nvarchar] (50) NULL,
[Zip] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerMainGroup] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNr] [nvarchar] (20) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (2) NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[OrganizationNum] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vNOM_SE_Customer]'
GO
CREATE VIEW [stage].[vNOM_SE_Customer] AS
--COMMENT EMPTY FIELDS 2022-12-20 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID
    ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,UPPER(CONCAT([Company],'#',TRIM([CustomerNum]))) AS CustomerCode
	
	,PartitionKey
	,UPPER(TRIM(Company)) AS Company
    ,UPPER(TRIM(CustomerNum)) AS CustomerNum
	,MainCustomerName
    ,[dbo].[ProperCase](CustomerName) AS CustomerName
    ,[AddressLine1]
    ,[AddressLine2]
    ,[AddressLine3]
	--,'' AS [TelephoneNum1]
	--,'' AS [TelephoneNum2]
	--,'' AS [Email]
	,[ZIP] AS ZipCode
    ,IIF([City]= ' ',NULL,[dbo].[ProperCase]([City])) AS [City]    
    ,IIF([State]= ' ',NULL,[State]) AS [State]
	,[District]	AS SalesDistrict
	,TRIM(CountryCode) AS CountryCode
    ,[dbo].[ProperCase](CountryName) AS CountryName
	--,'' AS Division
	--,'' AS CustomerIndustry
	--,'' AS CustomerSubIndustry
	,[dbo].[ProperCase](TRIM(CONCAT(AddressLine1,' ',AddressLine2))) as AddressLine
	,[dbo].[ProperCase](concat_ws(',',coalesce(TRIM(CountryName),null),coalesce(IIF([State]= ' ',null,TRIM([State])),IIF(City= ' ',null,TRIM(City)),IIF(ZIP= ' ',null,TRIM(ZIP))),IIF([AddressLine3]=' ',null, TRIM([AddressLine3]))
		,coalesce(IIF([addressline1]= ' ',null,TRIM([addressline1])),IIF([addressline2]= ' ',null,TRIM([addressline2])))
		,coalesce(IIF([addressline2]= ' ',null,TRIM([addressline2])),IIF([addressline3]= ' ',null,TRIM([addressline3]))))) AS FullAddressLine
    ,[dbo].[ProperCase](CustomerMainGroup) AS CustomerGroup
	,[dbo].[ProperCase](CustomerGroup) AS CustomerSubGroup
	,[SalesRepCode] AS SalesPersonCode
    ,[dbo].[ProperCase](SalesPersonName) AS SalesPersonName
	--,'' AS [SalesPersonResponsible]
    ,TRIM([VATRegNr]) AS [VATNum]
	,OrganizationNum
	,[AccountString] AS AccountNum
	,[InternalExternal]
	,[ABCCode] AS CustomerScore
	--,'' AS CustomerType
	,GETDATE() AS ValidFrom
	,DATEADD(year,1,GETDATE()) AS ValidTo
FROM [stage].[NOM_SE_Customer]
GO
PRINT N'Creating [stage].[ROR_SE_SalesLedger]'
GO
CREATE TABLE [stage].[ROR_SE_SalesLedger]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (8) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[SalesInvoiceNum] [nvarchar] (50) NULL,
[SalesInvoiceDate] [date] NULL,
[SalesDueDate] [date] NULL,
[SalesLastPaymentDate] [date] NULL,
[AccountingDate] [date] NULL,
[InvoiceAmount] [decimal] (18, 4) NULL,
[PaidInvoiceAmount] [decimal] (18, 4) NULL,
[RemainingInvoiceAmount] [decimal] (18, 4) NULL,
[ExchangeRate] [nvarchar] (max) NULL,
[Currency] [nvarchar] (50) NULL,
[VATAmount] [decimal] (18, 4) NULL,
[VATCode] [nvarchar] (50) NULL,
[PayToName] [nvarchar] (50) NULL,
[PayToCity] [nvarchar] (50) NULL,
[PayToContact] [nvarchar] (50) NULL,
[PaymentTerms] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vROR_SE_SalesLedger]'
GO


CREATE VIEW [stage].[vROR_SE_SalesLedger] AS
--COMMENT EMPTY FIELDS // ADD UPPER() TRIM() CustomerID 2022-12-21 VA
--CUSTOMER NUM 23-02-17 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(CAST('ROROSE' AS NVARCHAR(6)), '#', TRIM(SalesInvoiceNum)))) AS SalesLedgerID --, '#', TRIM(CustomerNum)
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CAST('ROROSE' AS NVARCHAR(6)))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(CAST('ROROSE' AS NVARCHAR(6))), '#', TRIM(CustomerNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(CAST('ROROSE' AS NVARCHAR(6)), '#', TRIM(IIF(CustomerNum IS NULL OR CustomerNum = '', 'MISSINGCUSTOMER', CustomerNum))))) AS CustomerID
	,CONCAT(CAST('ROROSE' AS NVARCHAR(6)), '#', TRIM(CustomerNum), '#', TRIM(SalesInvoiceNum)) AS SalesLedgerCode
	,PartitionKey

	,CAST('ROROSE' AS NVARCHAR(6)) AS Company
	,TRIM(CustomerNum) AS CustomerNum
	,TRIM(SalesInvoiceNum) AS SalesInvoiceNum
	,SalesInvoiceDate
	,SalesDueDate
	,SalesLastPaymentDate
	,InvoiceAmount
	,RemainingInvoiceAmount
	,PaidInvoiceAmount
	,CONVERT(decimal(18,5), LEFT(ExchangeRate, 7)) AS ExchangeRate
	,Currency
	,VATAmount
	,VATCode
	,PayToName
	,PayToCity
	,PayToContact
	,PaymentTerms
	--,'' AS SLRes1
	--,'' AS SLRes2
	--,'' AS SLRes3
	,AccountingDate
	--,'' AS AgingPeriod
	--,'' AS AgingSort
	--,'' AS VATCodeDesc
	--,'' AS LinkToOriginalInvoice
FROM 
	stage.ROR_SE_SalesLedger
GO
PRINT N'Creating [stage].[vFOR_FR_Budget]'
GO



/****** Script for SelectTopNRows command from SSMS  ******/

CREATE VIEW [stage].[vFOR_FR_Budget] AS
WITH tmp AS (
SELECT 
	   CONVERT(varchar(50), getdate(), 112) AS PartitionKey --Temporary added
	  ,UPPER([Company]) AS Company
      ,DATEFROMPARTS( CAST(2022 AS int) --Year
					, CAST(01 AS int) --Month
						, 1) AS PeriodDate
	  ,'Yearly' AS PeriodType
      ,COALESCE(NULLIF(TRIM([CustomerNum]),''), CONCAT('BUD','-' + NULLIF(TRIM(CustomerGroup),''),'-' + NULLIF(TRIM(SalesPersonCode),''))) AS CustomerNum
	  ,IIF(NULLIF(TRIM(ProductGroup),'') IS NOT NULL,  CONCAT('BUD','-' + NULLIF(TRIM(ProductGroup),'')), '' ) AS PartNum
      ,[CustomerGroup]
      ,[SalesPersonCode]
      ,[ProductGroup]
      ,SUM(CAST([BudgetSales] AS decimal(18,0))) AS Sales
      ,NULL AS Cost --SUM([BudgetCost])
	  
  FROM [stage].[FOR_FR_Budget]
  GROUP BY Company, [CustomerNum], [CustomerGroup], SalesPersonCode, [ProductGroup]
  )

SELECT
	 CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#', PeriodDate, '#', TRIM(CustomerNum), '#', TRIM(PartNum) )))) AS BudgetID
	 ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID
	 ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	 ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
	 ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',null)))) AS WarehouseID
	 ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',null)))) AS ProjectID
	 ,YEAR(PeriodDate)*10000 + MONTH(PeriodDate)*100 + DAY(PeriodDate)	AS BudgetPeriodDateID
	 ,PartitionKey
	  ,'Yearly' AS BudgetType
	  --,'' AS BudgetName
	  --,'' AS [BudgetDescription]
 	  ,[Company]
	  ,'2022' AS [BudgetPeriod]
      ,PeriodDate AS [BudgetPeriodDate]
	  ,PeriodType
      ,CustomerNum
      ,[CustomerGroup]
	  ,PartNum
 	  ,[ProductGroup]
      --,'' AS SalesPersonCode
	  --,'' AS SalesPersonName
      ,[Sales] AS [BudgetSales]
      ,NULL AS [BudgetCost]
	  ,'EUR' AS [Currency]
	  ,NULL AS GrossProfitInvoiced
	  ,NULL AS [GrossMarginInvoicedPercent] --(Sales - Cost)/NULLIF(Sales, 0)
	  ,NULL AS [BudgetFinance]
	  --,'' AS WarehouseCode
	  --,'' AS CostBearerNum
	  --,'' AS CostUnitNum
	  --,'' AS ProjectNum
	  --,'' AS AccountNum
	  --,'' AS [AccountGroupNum]
--	  ,NULL AS SalesOrderAmount
      --,'' AS [BRes1]
      --,'' AS [BRes2]
      --,'' AS [BRes3]
	  FROM tmp
GO
PRINT N'Creating [dm_PT].[fctStockBalance]'
GO
CREATE VIEW [dm_PT].[fctStockBalance] AS

SELECT 
 sb.[StockBalanceID]
,sb.[CompanyID]
,sb.[SupplierID]
,sb.[PartID]
,sb.[WarehouseID]
,sb.[CurrencyMonthKey]
,sb.[Company]
,sb.[Currency]
,sb.[BinNum]
,sb.[BatchNum]
,sb.[SupplierNum]
,sb.[PartNum]
,sb.[DelivTime]
,sb.[LastStockTakeDate]
,sb.[LastStdCostCalDate]
,sb.[SafetyStock]
,sb.[MaxStockQty]
,sb.[StockBalance]
,sb.[StockValue]
,sb.[AvgCost]
,sb.[ReserveQty]
,sb.[BackOrderQty]
,sb.[OrderQty]
,sb.[StockTakeDiff]
,sb.[ReOrderLevel]
,sb.[OptimalOrderQty]
,sb.[WarehouseCode]
,sb.[SBRes1]
,sb.[SBRes2]
,sb.[SBRes3]
FROM dm.FactStockBalance sb
LEFT JOIN dbo.Company com ON sb.Company = com.Company
WHERE com.BusinessArea = 'Power Transmission Solutions' AND com.[Status] = 'Active'



--WHERE [Company] in ('ACZARKOV', 'AcornUK', 'BSIBELL', 'JDKJENSS', 'JDKKALTE', 'JFIJENSS', 'MNLMAK', 'JNOJENSS', 'JNOORBEL', 'JSEJENSS', 'JSESKSSW', 'NORNO', 'SSWSE', 'NomoSE', 'NomoDK', 'NomoFI', 'NomoNo', 'PASSEROT', 'SKSSCOFI', 'SCOFI', 'SMKFI', 'SNLSPRUI', 'SPRUITNL', 'SVESE')  -- The PT basket --
GO
PRINT N'Creating [stage].[TMT_FI_Supplier]'
GO
CREATE TABLE [stage].[TMT_FI_Supplier]
(
[Company] [nvarchar] (8) NULL,
[PartitionKey] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[MainSupplierName] [nvarchar] (50) NULL,
[SupplierName] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[SupplierCategory] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (200) NULL,
[AddressLine2] [nvarchar] (200) NULL,
[AddressLine3] [nchar] (10) NULL,
[ZipCode] [nvarchar] (50) NULL,
[City] [nvarchar] (200) NULL,
[TelephoneNum] [nvarchar] (50) NULL,
[Email] [nvarchar] (100) NULL,
[Website] [nvarchar] (100) NULL,
[VATNum] [nvarchar] (50) NULL,
[AccountNum] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[SupplierScore] [nvarchar] (50) NULL,
[SupplierResponsible] [nvarchar] (50) NULL,
[Comments] [nvarchar] (max) NULL,
[CodeOfConduct] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vTMT_FI_Supplier]'
GO


CREATE VIEW [stage].[vTMT_FI_Supplier] AS
--COMMENT EMPTY FIEL 23-01-09 VA
--add trim() into SupplierID 23-01-24 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(trim(s.Company), '#', TRIM([SupplierNum]))))) AS SupplierID
--	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([SupplierNum]))))) AS SupplierID
    ,UPPER(CONCAT('FITMT', '#', TRIM([SupplierNum]))) AS SupplierCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(s.Company))) AS CompanyID
	,getdate() AS [PartitionKey] --

	,UPPER(s.Company) AS Company
	,UPPER(TRIM([SupplierNum])) AS SupplierNum
	,CONCAT(TRIM(s.Suppliernum), '-', TRIM([MainSupplierName])) AS MainSupplierName
	,TRIM([MainSupplierName]) AS SupplierName -- was SupplierName, but so few, on 20230302 meeting we, Petre, Jaako & Sam decided to only use [MainSupplierName] 20230302 /DZ
	,TRIM(AddressLine1) AS AddressLine1
    ,TRIM(AddressLine2) AS AddressLine2
    ,TRIM(AddressLine3) AS AddressLine3
	,TRIM([TelephoneNum]) AS [TelephoneNum]
	,TRIM(Email) AS [Email]
	,TRIM(ZipCode) AS ZipCode
	,TRIM([City]) AS City
	--,'' AS District
	,IIF(CountryName IS NULL, 'FI', CountryCode) AS CountryCode
	,TRIM(CountryName) AS CountryName
	--,'' AS [Region] 
	--,'' AS SupplierCategory 
	,SupplierResponsible
	,IIF(AddressLine1 = '', TRIM([AddressLine2]), TRIM([AddressLine1])) AS AddressLine
	,Concat(TRIM(CountryName), ', ', TRIM([City]), ', ', TRIM(ZipCode), ', ', IIF(AddressLine1 = '', TRIM([AddressLine2]), TRIM([AddressLine1]))) AS FullAddressLine
	,TRIM([AccountNum]) AS [AccountNum]
	,TRIM([VATNum]) AS [VATNum]
	--,'' AS OrganizationNum
	,InternalExternal AS InternalExternal
	,[CodeOfConduct]
	--,'' AS CustomerNum
	,TRIM(SupplierScore) AS SupplierScore
	--,NULL AS [MinOrderQty]
	--,NULL AS MinOrderValue	
	,[Website]
	,TRIM(Comments) AS Comments
	--,'' AS SRes1
	--,'' AS SRes2
	--,'' AS SRes3
FROM [stage].[TMT_FI_Supplier] s
--	LEFT JOIN [stage].[TMT_FI_Part] p ON p.SupplierCode = s.SupplierNum
--GROUP BY 
--      s.[PartitionKey], s.[Company], s.[SupplierNum], s.[SupplierName], s.[AddressLine1], s.[AddressLine2], s.[AddressLine3], s.[City], s.[ZipCode],  s.[CountryName]
--	  ,s.[SupplierCategory], s.[VATNum], s.[TelephoneNum], s.[Email], s.[Website], s.[CodeOfConduct], s.[Comments], s.InternalExternal, s.MainSupplierName, p.SupplierCode
GO
PRINT N'Creating [dm_ALL].[fctPurchaseInvoice]'
GO
CREATE VIEW [dm_ALL].[fctPurchaseInvoice] AS

SELECT 
 [PurchaseInvoiceID]
,[CompanyID]
,[SupplierID]
,[PartID]
,[WarehouseID]
,[PurchaseOrderNumID]
,[CurrencyID]
,[PurchaseInvoiceDateID]
,[Company]
,[PurchaseOrderNum]
,[PurchaseOrderLine]
,[PurchaseOrderType]
,[PurchaseInvoiceNum]
,[PurchaseInvoiceLine]
,[PurchaseInvoiceType]
,[PurchaseInvoiceDate]
,[ActualDelivDate]
,[SupplierNum]
,[PartNum]
,[PurchaseInvoiceQty]
,[UoM]
,[UnitPrice]
,[DiscountPercent]
,[DiscountAmount]
,[TotalMiscChrg]
,[VATAmount]
,[Currency]
,[ExchangeRate]
,[CreditMemo]
,[PurchaserName]
,[WarehouseCode]
,[PurchaseChannel]
,[Comment]
,[PIRes1]
,[PIRes2]
,[PIRes3]
,[PIRes4]
,[PurchaseInvoiceAmountOC]
,[PurchaseOrderDate]
,[ReqDelivDate]
,[OrgReqDelivDate]
,[CommittedDelivDate]
,[OrgCommittedDelivDate]
,[DueDate]
,[PaymentDate]
,[InvoiceStatus]
FROM dm.FactPurchaseInvoice
GO
PRINT N'Creating [stage].[AXL_IE_SalesLedger]'
GO
CREATE TABLE [stage].[AXL_IE_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceAmount] [decimal] (18, 4) NULL,
[RemainAmount] [decimal] (18, 4) NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vAXL_IE_SalesLedger]'
GO
CREATE VIEW [stage].[vAXL_IE_SalesLedger] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(sl.Company, '#', TRIM(sl.CustNum), '#', TRIM(sl.InvoiceNum))))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(sl.Company))) AS CompanyID
	,UPPER(CONCAT(sl.Company, '#', TRIM(sl.CustNum), '#', TRIM(sl.InvoiceNum))) AS SalesLedgerCode
	,sl.PartitionKey

	,UPPER(sl.Company) AS Company
	,UPPER(TRIM(sl.CustNum)) AS CustomerNum
	,TRIM(sl.InvoiceNum) AS [SalesInvoiceNum]
	,IIF(so.InvoiceDate = '' OR so.InvoiceDate IS NULL, '1900-01-01', so.InvoiceDate) AS [SalesInvoiceDate] --
	,CONVERT(date, DueDate) AS SalesDueDate
	,CONVERT(date, LastPaymentDate) AS LastPaymentDate
	,[InvoiceAmount]
	,[RemainAmount] AS [RemainingInvoiceAmount]
	,NULL AS CashDiscOffered
	,NULL AS CashDiscUsed
	,NULL AS [ExchangeRate]
	,NULL AS [Currency]
	,NULL AS [VATAmount]
	,NULL AS [VATCode]
	,NULL AS [PayToName]
	,NULL AS [PayToCity]
	,NULL AS [PayToContact]
	,NULL AS [PaymentTerms]
	,sl.Res1 AS SLRes1
	,sl.Res2 AS SLRes2
	,sl.Res3 AS SLRes3
FROM stage.AXL_IE_SalesLedger sl
	LEFT JOIN stage.AXL_CZ_SOLine so ON TRIM(sl.InvoiceNum) = TRIM(so.InvoiceNum)
WHERE DueDate > '2015-01-01'
GROUP BY
	sl.PartitionKey, sl.Company, sl.CustNum, sl.InvoiceNum, sl.Res2, sl.Res1, sl.Res3, sl.[InvoiceAmount], sl.[RemainAmount], so.InvoiceDate, DueDate, LastPaymentDate
GO
PRINT N'Creating [stage].[FOR_ES_Part]'
GO
CREATE TABLE [stage].[FOR_ES_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PartNum] [nvarchar] (100) NOT NULL,
[PartName] [nvarchar] (200) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[ProductGroup2] [nvarchar] (50) NULL,
[NetWeight] [decimal] (22, 8) NULL,
[UoM] [nvarchar] (14) NULL,
[Material] [nvarchar] (200) NULL,
[Barcode] [nvarchar] (50) NULL,
[ReOrderLevel] [decimal] (22, 8) NULL
)
GO
PRINT N'Creating [stage].[vFOR_ES_Part]'
GO








CREATE view [stage].[vFOR_ES_Part] AS

SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))) AS PartCode
	,PartitionKey

	,[Company]
	,UPPER(TRIM([PartNum])) AS PartNum
	,[PartName]
	--,''	AS [PartDescription]
	--,''	AS [PartDescription2]
	--,'' AS [PartDescription3]
	,NULL AS MainSupplier
	,NULL AS AlternativeSupplier
	,[ProductGroup]
	,[ProductGroup2]
	--,'' AS [ProductGroup3]
	--,'' AS [ProductGroup4]
	--,'' AS [Brand]
	--,'' AS [CommodityCode]
	--,'' AS PartReplacementNum
	--,'' AS PartStatus
	--,'' AS [CountryOfOrigin]
	,[NetWeight]
	,UoM
	,[Material]
	,[Barcode]
	,[ReOrderLevel]
	--,'' PartResponsible
	--,'' AS [StartDate]
	--,'' AS [EndDate]
FROM [stage].[FOR_ES_Part]
--GROUP BY [PartitionKey],[Company],[PartNum],[PartDescription],[PartDescription2],[ProductGroup],[ProductGroup2],[ProductGroup3],[CommodityCode],[CountryOfOrigin],[NetWeight],[ReorderLevel]
GO
PRINT N'Creating [stage].[CER_NO_Supplier]'
GO
CREATE TABLE [stage].[CER_NO_Supplier]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[MainSupplierName] [nvarchar] (100) NULL,
[SupplierName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[AddressLine3] [nvarchar] (100) NULL,
[TelephoneNum] [nvarchar] (20) NULL,
[Email] [nvarchar] (100) NULL,
[City] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (100) NULL,
[Region] [nvarchar] (50) NULL,
[SupplierCategory] [nvarchar] (50) NULL,
[SupplierResponsible] [nvarchar] (50) NULL,
[AccountNum] [nvarchar] (50) NULL,
[VATNum] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (100) NULL,
[CodeOfConduct] [nvarchar] (2) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[Reference] [nvarchar] (100) NULL,
[SupplierScore] [nvarchar] (50) NULL,
[MinOrderQty] [decimal] (18, 4) NULL,
[Website] [nvarchar] (100) NULL,
[Comments] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[vCER_NO_Supplier]'
GO







CREATE VIEW [stage].[vCER_NO_Supplier] AS

SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID
    ,UPPER(CONCAT([Company],'#',TRIM([SupplierNum]))) AS SupplierCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([SupplierNum])) AS SupplierNum
	,[dbo].[ProperCase](TRIM(MainSupplierName)) AS MainSupplierName
	,[dbo].[ProperCase](TRIM(SupplierName)) AS SupplierName
	,TRIM([AddressLine1]) AS AddressLine1
    ,TRIM([AddressLine2]) AS AddressLine2
    ,TRIM([AddressLine3]) AS AddressLine3
	,[TelephoneNum]
	,[Email]
	,TRIM([ZipCode]) AS ZipCode
	,TRIM([City]) AS City
	,District
	,CountryName
	,[Region] 
	,TRIM([SupplierCategory]) AS SupplierCategory 
	,TRIM([SupplierResponsible]) AS SupplierResponsible
	,[dbo].[ProperCase](TRIM(concat (addressline1+' '+ addressline2, null))) AS AddressLine
	,[dbo].[ProperCase](TRIM(concat_ws(',',coalesce([dbo].[ProperCase](CountryName),null),IIF(City= ' ',null,trim(substring(replace([dbo].[ProperCase](AddressLine3),' ', ''), 6, 100))),IIF(ZipCode= ' ',null,[dbo].[udf_GetNumeric]([Addressline3]))
		,coalesce(IIF([addressline1]= ' ',null,[addressline1]),IIF([addressline2]= ' ',null,[addressline2]))
		,coalesce(IIF([addressline2]= ' ',null,[addressline2]),IIF([addressline3]= ' ',null,[addressline3]))))) AS FullAddressLine
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [AccountNum])) AS [AccountNum] --required by Ian Morgan & approved by Emil T on 20200630
	,[VATNum]
	,'' AS OrganizationNum
	,[InternalExternal]
	,[CodeOfConduct]
	,CustomerNum
	,TRIM([SupplierScore]) AS SupplierScore
	,[MinOrderQty]
	,0 AS MinOrderValue	
	,[Website]
	,TRIM([Comments]) AS Comments
	--,'' AS SRes1
	--,'' AS SRes2
	--,'' AS SRes3
	,CountryCode
FROM [stage].[CER_NO_Supplier]
GROUP BY 
      [PartitionKey],[Company],[SupplierNum],MainSupplierName,[SupplierName],[AddressLine1],[AddressLine2],[AddressLine3],[City],[ZipCode],[Region],District, [CountryName]
	  ,[SupplierCategory],[SupplierResponsible],[Reference],[AccountNum],[VATNum],[SupplierScore],[CustomerNum],[TelephoneNum],[Email],[Website],[CodeOfConduct]
	  ,[MinOrderQty],[InternalExternal],[Comments],CountryCode
GO
PRINT N'Creating [stage].[NOM_DK_SOLine]'
GO
CREATE TABLE [stage].[NOM_DK_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (100) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[PartClass] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (10) NULL,
[PartNum] [nvarchar] (50) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[Indexkey] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[UpdateStock] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vNOM_DK_SOLine]'
GO
CREATE VIEW [stage].[vNOM_DK_SOLine] AS
--COMMENT EMPTY FIELDS 23-01-03 VA
SELECT
	--CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(InvoiceNum),'#',TRIM(InvoiceLine)))) AS SalesOrderID
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(PartNum), '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine))))) AS SalesInvoiceID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(OrderNum),'#',TRIM(OrderLine),'#',TRIM(InvoiceNum))))) AS SalesOrderID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustNum), '#', TRIM(InvoiceNum))))) AS SalesLedgerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(OrderNum))))) AS SalesOrderNumID  
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID 
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(OrderNum),'#',TRIM(OrderLine))) AS SalesOrderCode 
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(InvoiceNum))))) AS SalesInvoiceNumID --Redundant?
	,CONVERT(int, replace(convert(date,InvoiceDate),'-','')) AS SalesInvoiceDateID										--Redundant?
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(InvoiceNum),'#',TRIM(InvoiceLine))) AS SalesInvoiceCode						--Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey

	,UPPER(TRIM(Company)) AS Company
	,SalesPerson AS SalesPersonName
	,UPPER(TRIM(CustNum)) AS CustomerNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,CASE WHEN TRIM(OrderNum) = '0' THEN 'PrimaryPart' ELSE 'SubPart' END  AS PartType
	,UPPER(TRIM(OrderNum)) AS SalesOrderNum
	,UPPER(TRIM(OrderLine)) AS SalesOrderLine
	,UPPER(TRIM(OrderSubLine)) AS SalesOrderSubLine-- '0' as OrderSubLine
	,OrderType AS SalesOrderType
	,InvoiceNum AS SalesInvoiceNum
	,UPPER(TRIM(InvoiceLine)) AS SalesInvoiceLine
	--,'' AS SalesInvoiceType
	,CONVERT(date, InvoiceDate) AS SalesInvoiceDate
	,CONVERT(date, ActualDeliveryDate) AS ActualDelivDate
	,CASE WHEN CreditMemo = '1' THEN -1*ABS(SellingShipQty)
--		WHEN UnitCost = 0 THEN 0 
		ELSE SellingShipQty END AS SalesInvoiceQty
	,ABS(UnitPrice) AS UnitPrice 
	,ABS(UnitCost) AS UnitCost  
	--,'' AS UoM
	--,0 AS DiscountPercent
	,DiscountAmount --CASE WHEN UnitPrice < 0 THEN ABS(DiscountAmount) ELSE -1*ABS(DiscountAmount) END AS 
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	,TotalMiscChrg
	--,0 AS VATAmount
	,Currency
	,ExchangeRate
	,CreditMemo
	,SalesChannel
	,UpdateStock AS IsUpdatingStock
	--,'' AS Department
	,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
	--,NULL AS DeliveryAddress
	--,'' AS CostBearerNum
	--,'' AS CostUnitNum
	--,'' AS ReturnComment
	--,'' AS ReturnNum
	,TRIM(PartClass) AS ProjectNum  --lL & DZ 2022-08-25
	,MAX(Indexkey) AS IndexKey
	--,'' AS SIRes1
	--,'' AS SIRes2
	--,'' AS SIRes3
FROM stage.NOM_DK_SOLine
GROUP BY
	PartitionKey, Company, CustNum, OrderNum, OrderLine, OrderSubLine, OrderType, InvoiceNum, InvoiceLine, InvoiceDate, SellingShipQty, UnitPrice, UnitCost, Currency, ExchangeRate, TotalMiscChrg, DiscountAmount,PartNum, SalesPerson,  WarehouseCode, CreditMemo, SalesChannel, UpdateStock, PartClass, ActualDeliveryDate
GO
PRINT N'Creating [stage].[SKS_FI_OLine]'
GO
CREATE TABLE [stage].[SKS_FI_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[MANDT] [nvarchar] (50) NOT NULL,
[COMPANY] [nvarchar] (8) NOT NULL,
[CUSTNUM] [nvarchar] (50) NULL,
[ORDERNUM] [nvarchar] (50) NULL,
[ORDERLINE] [nvarchar] (50) NULL,
[ORDERSUBLINE] [nvarchar] (50) NULL,
[ORDERRELNUM] [nvarchar] (50) NULL,
[ORDERDATE] [nvarchar] (8) NULL,
[ACTUALDELIVERYDATE] [nvarchar] (8) NULL,
[DELIVDATE] [nvarchar] (8) NULL,
[CONFIRMED_DEL_DATE] [nvarchar] (50) NULL,
[INVOICENUM] [nvarchar] (50) NULL,
[ORDERQTY] [decimal] (18, 4) NULL,
[DELIVQTY] [decimal] (18, 4) NULL,
[REMAININGQTY] [decimal] (18, 4) NULL,
[UNITPRICE] [decimal] (18, 4) NULL,
[UNITCOST] [decimal] (18, 4) NULL,
[SUMUNITCOST] [decimal] (18, 4) NULL,
[SUMUNITPRICE] [decimal] (18, 4) NULL,
[CURREXCHRATE] [decimal] (18, 4) NULL,
[OPENRELEASE] [nvarchar] (1) NULL,
[DISCOUNTPERCENT] [decimal] (18, 4) NULL,
[DISCOUNTAMOUNT] [decimal] (18, 4) NULL,
[PARTNUM] [nvarchar] (50) NULL,
[PARTSTATUS] [nvarchar] (max) NULL,
[NEEDBYDATE] [nvarchar] (8) NULL,
[RETURNCOMMENT] [nvarchar] (max) NULL,
[SALESRETURNORDERNUM] [nvarchar] (50) NULL,
[SALESRETURNINVOICENUM] [nvarchar] (50) NULL,
[WAREHOUSECODE] [nvarchar] (50) NULL,
[SALESPERSON] [nvarchar] (80) NULL,
[VBTYP] [nvarchar] (10) NULL,
[ERNAM] [nvarchar] (12) NULL,
[VKORG] [nvarchar] (40) NULL,
[VRKME] [nvarchar] (30) NULL,
[ARKTX] [nvarchar] (400) NULL,
[PSTYV] [nvarchar] (40) NULL,
[KNUMV] [nvarchar] (100) NULL,
[ORDERTYPE] [nvarchar] (4) NULL,
[CURRENCY] [nvarchar] (50) NULL,
[EXCHANGERATE] [decimal] (18, 4) NULL,
[SALESCHANNEL] [nvarchar] (50) NULL,
[BUSINESSCHAIN] [nvarchar] (50) NULL,
[PROJECTNUM] [nvarchar] (50) NULL,
[WBS_ELEMENT] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vSKS_FI_OLine]'
GO











CREATE VIEW [stage].[vSKS_FI_OLine] AS
--COMMENT EMPTY FIELDS // ADD TRIM()UPPER() INTO PartID,CustomerID,WarehouseID 2022-12-16 VA
--customarnum and partnum change 2023-02-15
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(COMPANY, '#', ORDERNUM, '#', ORDERLINE, '#', ORDERRELNUM, '#', TRIM([VKORG])))) AS SalesOrderID --Commented to remove duplicate rows in dw table /*'#', INVOICENUM,*/
	,CONVERT([binary](32), HASHBYTES('SHA2_256', COMPANY)) AS CompanyID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(COMPANY, '#', TRIM(IIF(CUSTNUM IS NULL OR CUSTNUM = '', 'MISSINGCUSTOMER', CUSTNUM)), '#', TRIM([VKORG])))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(COMPANY), '#', TRIM(CUSTNUM), '#', TRIM([VKORG]))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(COMPANY, '#', TRIM(IIF(PARTNUM IS NULL OR PARTNUM = '', 'MISSINGPART',  PARTNUM) ), '#', TRIM([VKORG])))) AS PartID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(COMPANY), '#', TRIM(PARTNUM), '#', TRIM([VKORG]))))) AS PartID 
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(COMPANY, '#', TRIM(WAREHOUSECODE)))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(COMPANY), '#', TRIM(WAREHOUSECODE))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(COMPANY, '#', TRIM(ORDERNUM)))) AS SalesOrderNumID
	,CONCAT(COMPANY, '#', ORDERNUM, '#', ORDERLINE, '#', INVOICENUM) AS SalesOrderCode
	,CONVERT(int, ORDERDATE) AS SalesOrderDateID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT( Company, '#', PROJECTNUM) ))	AS ProjectID
	,PartitionKey 

	,CASE WHEN COMPANY = 'SKSSWE' THEN 'JSESKSSW' ELSE COMPANY END AS Company 
	,IIF(ISNUMERIC([CUSTNUM]) = 1,CAST(CAST(trim([CUSTNUM]) AS int)as nvarchar(50)),(trim([CUSTNUM]))) AS CustomerNum
	,trim(ORDERNUM) AS SalesOrderNum
	,ORDERLINE AS SalesOrderLine
	,ORDERSUBLINE AS SalesOrderSubLine
	,ORDERTYPE AS SalesOrderType
	--,'' AS SalesOrderCategory
	,ORDERRELNUM AS SalesOrderRelNum
	,CASE WHEN MAX(trim([ORDERDATE])) = '00000000' THEN CAST('19010101' AS date) ELSE CAST(MAX(trim([ORDERDATE])) AS date) END AS SalesOrderDate
	,CASE WHEN MIN(trim([NEEDBYDATE])) like '%.%' THEN CAST('19010101' AS date) WHEN MIN(trim([NEEDBYDATE])) = '00000000' THEN CAST('19010101' AS date) ELSE CAST(MIN(trim([NEEDBYDATE])) AS date) END AS NeedbyDate 
	,CASE WHEN MAX(trim(CONFIRMED_DEL_DATE)) = '00000000' THEN CAST('19010101' AS date) ELSE CAST(MAX(trim(CONFIRMED_DEL_DATE)) AS date) END AS ExpDelivDate
	,CAST(COALESCE(IIF(ACTUALDELIVERYDATE = '00000000', '19010101', ACTUALDELIVERYDATE), '1900-01-01') AS date) AS ActualDelivDate
	,CASE WHEN MAX(trim(CONFIRMED_DEL_DATE)) = '00000000' THEN CAST('19010101' AS date) ELSE CAST(MAX(trim(CONFIRMED_DEL_DATE)) AS date) END AS ConfirmedDelivDate
	,INVOICENUM AS SalesInvoiceNum
	,IIF(ORDERTYPE IN ('RE','G2'), -1*abs(orderqty),ORDERQTY) AS SalesOrderQty
	,DELIVQTY AS DelivQty
	,REMAININGQTY AS RemainingQty 
	--,NULL AS SalesInvoiceQty
	--,'' AS UoM
	,UNITPRICE AS UnitPrice
	,UNITCOST AS UnitCost
	,CURRENCY AS Currency
	,EXCHANGERATE AS ExchangeRate
	,SUMUNITPRICE AS SumUnitPrice
	,SUMUNITCOST AS SumUnitCost
	,CASE WHEN OPENRELEASE = '1' THEN '0' ELSE '1' END AS OpenRelease  --tested swapping the openrelease status /SM 2021-06-03
	,ABS(DISCOUNTAMOUNT) AS DiscountAmount

	,DISCOUNTPERCENT AS DiscountPercent
	,IIF(ISNUMERIC([PARTNUM]) = 1,CAST(CAST(trim([PARTNUM]) AS int)as nvarchar(50)),(trim([PARTNUM]))) AS PartNum
	--,'' AS PartType
	,PARTSTATUS AS PartStatus
	,SALESPERSON AS SalesPersonName
	,TRIM(WAREHOUSECODE) AS WarehouseCode
	--,'' AS SalesChannel
	,CASE WHEN ORDERTYPE = 'ZEDI' THEN 'EDI'
		ELSE 'Normal Order Handling' END AS AxInterSalesChannel
	,BUSINESSCHAIN AS Department
	,PROJECTNUM AS ProjectNum
	--,'' AS IndexKey
	--,'' AS Cancellation
	--,'' AS SORes1 
	,WBS_ELEMENT AS SORes2 -- 20210212
	--,'' AS SORes3
	,RETURNCOMMENT AS ReturnComment
	,SALESRETURNORDERNUM AS SalesReturnOrderNum
	,SALESRETURNINVOICENUM AS SalesReturnInvoiceNum
	--,NULL AS [TotalMiscChrg]
FROM stage.SKS_FI_OLine
WHERE [VKORG] NOT IN ('FI00','SE10')
GROUP BY
	PartitionKey, Company, CUSTNUM, ORDERNUM, ORDERLINE, ORDERSUBLINE, ORDERTYPE, ORDERRELNUM, trim([ORDERDATE]), trim([NEEDBYDATE]), trim([DELIVDATE]), INVOICENUM, ORDERQTY, DELIVQTY, REMAININGQTY, UNITPRICE, UNITCOST
	, SUMUNITPRICE, SUMUNITCOST, CURRENCY, EXCHANGERATE, OPENRELEASE, DISCOUNTAMOUNT, DISCOUNTPERCENT, PARTNUM, PARTSTATUS, SALESPERSON, RETURNCOMMENT, SALESRETURNORDERNUM, SALESRETURNINVOICENUM, TRIM(WAREHOUSECODE), SALESCHANNEL
	, BUSINESSCHAIN, VKORG, [ORDERDATE], PROJECTNUM, CONFIRMED_DEL_DATE, WBS_ELEMENT, ACTUALDELIVERYDATE
GO
PRINT N'Creating [dm_PT].[fctSalesOrderLog]'
GO
CREATE VIEW [dm_PT].[fctSalesOrderLog] AS

SELECT sol.[SalesOrderLogID]
,sol.[CompanyID]
,sol.[CustomerID]
,sol.[PartID]
,sol.[WarehouseID]
,sol.[SalesPersonNameID]
,sol.[SalesOrderDateID]
,sol.[PartitionKey]
,sol.[Company]
,sol.[CustomerNum]
,sol.[SalesOrderNum]
,sol.[SalesOrderLine]
,sol.[SalesOrderSubLine]
,sol.[SalesOrderType]
,sol.[SalesOrderLogType]
,sol.[SalesOrderDate]
,sol.[SalesOrderLogDate]
,sol.[SalesInvoiceNum]
,sol.[SalesOrderQty]
,sol.[UoM]
,sol.[UnitPrice]
,sol.[UnitCost]
,sol.[Currency]
,sol.[ExchangeRate]
,sol.[OpenRelease]
,sol.[DiscountPercent]
,sol.[DiscountAmount]
,sol.[PartNum]
,sol.[PartType]
,sol.[SalesPersonName]
,sol.[Department]
,sol.[WarehouseCode]
  FROM [dm].[FactSalesOrderLog] sol
  LEFT JOIN dbo.Company com ON sol.Company = com.Company
WHERE com.BusinessArea = 'Power Transmission Solutions' AND com.[Status] = 'Active'

--WHERE Company in ('SKSSCOFI', 'SCOFI', 'SMKFI', 'BSIBELL', 'NomoSE', 'NomoDK', 'NomoFI', 'NomoNo', 'ACZARKOV', 'JSEJENSS', 'JDKJENSS', 'JNOJENSS', 'JSESKSSW', /*'MAK',*/ 'PPLPASSE', 'SNLSPRUI','SVESE' /*, 'PASSEROT'*/)  -- The PT basket
GO
PRINT N'Creating [stage].[ATZ_UK_SOLine]'
GO
CREATE TABLE [stage].[ATZ_UK_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderRel] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Indexkey] [nvarchar] (50) NULL,
[Site] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[CurrExchRate] [decimal] (18, 4) NULL,
[Department] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vATZ_UK_SOLine]'
GO
CREATE VIEW [stage].[vATZ_UK_SOLine] AS
--COMMENT EMPTY FIELDS // ADD UPPER()TRIM() INTO PartID,CustomerID,WarehouseID 2022-12-27 VA
--Problem with the group by clause,need to resolve. 2022-12-27 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(OrderNum),'#',TRIM(OrderLine),'#',TRIM(OrderSubLine),'#',TRIM(InvoiceNum)))) AS SalesInvoiceID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(OrderNum),'#',TRIM(OrderLine),'#',TRIM(OrderSubLine),'#',TRIM(InvoiceNum)))) AS SalesOrderID --were SakesOrderID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ), '#', TRIM(InvoiceNum)))) AS SalesLedgerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(OrderNum)))) AS SalesOrderNumID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',Company)) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum)))))) AS CustomerID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ) ))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum)))))) AS PartID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) ) ))) AS PartID 
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(WarehouseCode))))) AS WarehouseID
	--	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(WarehouseCode)))) AS WarehouseID
	,CONCAT(Company,'#',TRIM(OrderNum),'#',TRIM(OrderLine),'#',TRIM(OrderSubLine),'#',TRIM(InvoiceNum)) AS SalesOrderCode
	,CONVERT(int, replace(convert(date,InvoiceDate),'-','')) AS SalesInvoiceDateID 
	,CONCAT(Company,TRIM(OrderNum),TRIM(OrderLine),TRIM(OrderSubLine),TRIM(InvoiceNum)) AS SalesInvoiceCode -- Redundant and possible not correct
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey

	,TRIM(Company) AS Company
	,TRIM(SalesPersonName) AS SalesPersonName
	,TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ) AS CustomerNum
	,TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) ) AS PartNum
	,CASE WHEN TRIM(OrderNum) = '0' THEN 'PrimaryPart' ELSE 'SubPart' END  AS PartType
	,TRIM(OrderNum) AS SalesOrderNum
	,TRIM(OrderLine) AS SalesOrderLine
	,TRIM(OrderSubLine) AS SalesOrderSubLine
	--,'' AS SalesOrderType
	,TRIM(InvoiceNum) AS SalesInvoiceNum
	--,'' AS SalesInvoiceLine
	--,'' AS SalesInvoiceType
	,convert(date, InvoiceDate) AS SalesInvoiceDate
	,ActualDeliveryDate		AS ActualDelivDate
	,SUM(SellingShipQty) AS SalesInvoiceQty
	--,'' AS UoM
	,UnitPrice
	,UnitCost
	--,NULL AS DiscountPercent
	,SUM(DiscountAmount) AS DiscountAmount
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	,TotalMiscChrg
	--,NULL AS VATAmount
	,Currency
	,CurrExchRate AS ExchangeRate
	,CreditMemo
	,'ATZ All products' AS SalesChannel --Used as a "mother" category of Department /Sm 2021-06-18
	,COALESCE(Department,'ATZ All products')  AS Department
	,TRIM(WarehouseCode) AS WarehouseCode
	--,NULL AS DeliveryAddress
	--,'' AS CostBearerNum
	--,'' AS CostUnitNum
	--,'' AS ReturnComment
	--,'' AS ReturnNum
	--,'' AS ProjectNum
	--,'' AS IndexKey
	--,'' AS SIRes1 -- DZ added "SI" prefix 20210324
	--,'' AS SIRes2 -- DZ added "SI" prefix 20210324
	--,'' AS SIRes3 -- DZ added "SI" prefix 20210324

FROM stage.ATZ_UK_SOLine AS SO
GROUP BY PartitionKey, Company, SalesPersonName, TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ), TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) ) ,OrderNum, OrderLine, OrderSubLine, InvoiceNum, InvoiceDate, ActualDeliveryDate, UnitPrice, UnitCost, TotalMiscChrg,Department, WarehouseCode, CurrExchRate, Currency, CreditMemo
GO
PRINT N'Creating [dm_ALL].[fctSalesLedger]'
GO
CREATE VIEW [dm_ALL].[fctSalesLedger] AS 
SELECT 
 [SalesLedgerID]
,[SalesPersonNameID]
,[Company]
,[CustomerNum]
,[SalesInvoiceNum]
,[SalesInvoiceDate]
,[SalesDueDate]
,[SalesLastPaymentDate]
,[InvoiceAmount]
,[RemainingInvoiceAmount]
,[ExchangeRate]
,[Currency]
,[VATAmount]
,[VATCode]
,[PayToName]
,[PayToCity]
,[PayToContact]
,[PaymentTerms]
,[SLRes1]
,[SLRes2]
,[SLRes3]
,[SalesLedgerCode]
,[CompanyID]
,[PartitionKey]
,[PaidInvoiceAmount]
,[AccountingDate]
,[AgingPeriod]
,[AgingSort]
,[VATCodeDesc]
,[CustomerID]
,[LinkToOriginalInvoice]
,[SalesInvoiceDateID]
,[PaymentStatus]
,[WarehouseID]
FROM [dm].[FactSalesLedger]
GO
PRINT N'Creating [stage].[JEN_DK_SupplierAgreement]'
GO
CREATE TABLE [stage].[JEN_DK_SupplierAgreement]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[RecordType] [nvarchar] (50) NULL,
[RecordTypeDesc] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[Discount] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[Qty] [decimal] (18, 4) NULL,
[DelivTimeWeeks] [nvarchar] (10) NULL,
[CurrencyCode] [nvarchar] (10) NULL
)
GO
PRINT N'Creating [stage].[vJEN_DK_SupplierAgreement]'
GO
CREATE VIEW [stage].[vJEN_DK_SupplierAgreement] AS 
--comment empty fields 22-12-29 VA
--ADD TRIM() INTO SupplierID 23-01-23 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]), '#', TRIM(RecordType), '#', TRIM([PartNum]), '#', TRIM([SupplierNum]), '#', TRIM(CurrencyCode))))) AS SupplierAgreementID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum))))) AS SupplierID  
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(SupplierNum))))) AS SupplierID  
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(CurrencyCode)))) AS CurrencyID --Redundant?
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,RecordType AS AgreementCode
	,RecordTypeDesc AS AgreementDescription
	,Discount AS [DiscountPercent]
	,MAX([UnitPrice]) AS [UnitPrice]
	--,NULL AS AgreementQty
	,UPPER(TRIM(CurrencyCode)) AS Currency
	,MAX(DelivTimeWeeks) AS [DelivTime]
	--,'' AS AgreementStart
	--,'' AS AgreementEnd
	--,'' AS [SupplierTerms]
	--,NULL	AS FulfilledQty
	--,NULL  AS RemainingQty
	--,''	AS UoM
	--,'' AS  SARes1
	--,'' AS  SARes2
	--,'' AS  SARes3
FROM 
	[stage].[JEN_DK_SupplierAgreement]

GROUP BY [PartitionKey], [Company], RecordType, RecordTypeDesc, PartNum, SupplierNum, Discount,  CurrencyCode
--WHERE 
--	RecordType = 'D'
GO
PRINT N'Creating [stage].[JEN_SK_PurchaseOrder]'
GO
CREATE TABLE [stage].[JEN_SK_PurchaseOrder]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [varchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[LineType] [nvarchar] (50) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[InvoiceSupplierCode] [nvarchar] (50) NULL,
[DelivCustCode] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[PurchaseDelivLine] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[ItemType] [int] NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[OrderedQty] [decimal] (18, 4) NULL,
[ReceivedQty] [decimal] (18, 4) NULL,
[InvoicedQty] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[CommitedDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[ReqDelivDate] [date] NULL,
[DelivDate] [date] NULL,
[OrgReqDelivDate] [date] NULL,
[IsOrderClosed] [nvarchar] (50) NULL,
[PurchaserName] [nvarchar] (50) NULL,
[RecievingNumber] [nvarchar] (50) NULL,
[LeadTime] [nvarchar] (50) NULL,
[Comments] [nvarchar] (max) NULL,
[WarehouseCode] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vJEN_SK_PurchaseOrder]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO

CREATE VIEW [stage].[vJEN_SK_PurchaseOrder] AS
--COMMENT EMPTY FIELDS / ADD UPPER() TRIM() CustomerID PartID,WarehouseID 2022-12-19 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderType), '#', TRIM(PartNum), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(PurchaserName), '#', IsOrderClosed)))) AS PurchaseOrderID -- was included in ID: ", '#', TRIM(PurchaseOrderSubLine), '#', TRIM(InvoiceNum),'#',TRIM(UPPER([PartNum])), '#', TRIM(UPPER(SupplierCode)), '#', OrderedQty", '#', TRIM(InvoiceNum)
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', '')))) AS PurchaseInvoiceID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(DelivCustCode))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(DelivCustCode))))) AS CustomerID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(UPPER(SupplierCode)))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierCode))))) AS SupplierID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(UPPER([PartNum])))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Trim(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([CurrencyCode])))) AS CurrencyID
	,UPPER(CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine))) AS PurchaseOrderCode
	,PartitionKey

	,TRIM(UPPER(Company)) AS Company
	,TRIM(PurchaseOrderNum) AS PurchaseOrderNum
	,TRIM(PurchaseOrderLine) AS PurchaseOrderLine
	,TRIM(PurchaseOrderSubLine) AS PurchaseOrderSubLine
	,TRIM(OrderType) AS PurchaseOrderType
	,TRIM(UPPER([PartNum])) AS PartNum
	,TRIM(UPPER(SupplierCode)) AS SupplierNum
	,TRIM(DelivCustCode) AS DelivCustomerNum
	,'' AS PurchaseInvoiceNum --TRIM(InvoiceNum) -- remove so avoid duplication / InvoiceNum and in the ID /DZ
	,OrderDate AS PurchaseOrderDate
	,MAX(OrgReqDelivDate) AS OrgReqDelivDate
	,MAX(DelivDate) AS DelivDate
	,MAX(ReqDelivDate) AS ReqDelivDate
	,MAX(CommitedDelivDate) AS CommittedDelivDate
	,MAX(ActualDelivDate) AS ActualDelivDate
	,SUM(OrderedQty) AS PurchaseOrderQty
	,SUM(ReceivedQty) AS ReceiveQty
	,SUM(InvoicedQty) AS InvoiceQty
--	,IIF(AVG(ReceivedQty) < AVG(OrderedQty), 'Open', 'Closed') AS PurchaseOrderStatus
	,CASE WHEN IsOrderClosed = '' OR IsOrderClosed = '1' THEN 'Closed'
		WHEN IsOrderClosed = 'Tiffany Telfer' THEN 'Closed'
		WHEN IsOrderClosed = 'SALDON FRÅN SAP' THEN 'Closed'
		WHEN IsOrderClosed = '0' THEN 'Open'
		ELSE IsOrderClosed END AS PurchaseOrderStatus
	,IsOrderClosed AS IsClosed
	--,'' AS SupplierPartNum
	--,'' AS [SupplierInvoiceNum] 
	--,'' AS PartStatus
	--,0 AS MinOrderQty
	--,'' AS UoM
	--,0 AS LandedCost
	,AVG(UnitPrice) AS UnitPrice
	,AVG(IIF(UnitPrice*OrderedQty*ExchangeRate = 0, 0, 100*DiscountAmount/(UnitPrice*OrderedQty*ExchangeRate))) AS DiscountPercent --was DiscountPercent -- changed 20230227 /DZ
	,SUM(DiscountAmount) AS DiscountAmount --was UnitPrice*OrderedQty*DiscountPercent/100  -- changed 20230227 /DZ
	,SUM(TotalMiscChrg) AS TotalMiscChrg
	,AVG(ExchangeRate) AS ExchangeRate
	,CASE WHEN CurrencyCode = '15' THEN 'EUR' WHEN CurrencyCode = '2' THEN 'USD' ELSE CurrencyCode END AS Currency
	,TRIM(PurchaserName) AS PurchaserName
	,TRIM(WarehouseCode) AS WarehouseCode
	,TRIM(RecievingNumber) AS ReceivingNum
	,IIF(LeadTime = 'na', NULL, Leadtime) AS DelivTime
	,CASE WHEN CONVERT(NVARCHAR(50),TRIM([LineType])) like '0' THEN 'Stock Item Line' WHEN CONVERT(NVARCHAR(50),TRIM([LineType])) like '1' THEN 'Non Stock Item Line' ELSE NULL END AS [LineType]
	,CONVERT(NVARCHAR(50),ItemType) AS ItemType
	,TRIM(Comments) AS Comments
	--,'' AS PurchaseChannel
	--,'' AS Documents
	--,'' AS PORes1
	--,'' AS PORes2
	--,'' AS PORes3
	--,'' AS DaysSincePOrder
FROM [stage].[JEN_SK_PurchaseOrder]

GROUP BY
	PartitionKey, Company, PurchaseOrderNum, PurchaseOrderLine, PurchaseOrderSubLine, SupplierCode, DelivCustCode, LineType, PartNum, OrderType, CurrencyCode, ItemType, OrderDate, PurchaserName, RecievingNumber, LeadTime, Comments, WarehouseCode, IsOrderClosed
GO
PRINT N'Creating [stage].[CYE_ES_Supplier]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[CYE_ES_Supplier]
(
[PartitionKey] [nvarchar] (50) NULL,
[Company] [nvarchar] (8) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[MainSupplierName] [nvarchar] (100) NULL,
[SupplierName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[TelephoneNum] [nvarchar] (50) NULL,
[Email] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[City] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[Region] [nvarchar] (50) NULL,
[SupplierCategory] [nvarchar] (50) NULL,
[SupplierResponsible] [nvarchar] (50) NULL,
[AccountNum] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[VATNum] [nvarchar] (50) NULL,
[CodeOfConduct] [nvarchar] (50) NULL,
[SupplierScore] [nvarchar] (50) NULL,
[MinOrderQty] [decimal] (18, 0) NULL,
[MinOrderValue] [decimal] (18, 0) NULL,
[Website] [nvarchar] (50) NULL,
[Comments] [nvarchar] (500) NULL,
[SRes1] [nvarchar] (50) NULL,
[SRes2] [nvarchar] (50) NULL,
[SRes3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCYE_ES_Supplier]'
GO

CREATE VIEW [stage].[vCYE_ES_Supplier] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID
	--CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company],'#',TRIM([SupplierNum]))))) AS SupplierID
    ,UPPER(CONCAT([Company], '#', TRIM([SupplierNum]))) AS SupplierCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,[PartitionKey]

	,UPPER([Company]) AS Company
	,UPPER(TRIM([SupplierNum])) AS SupplierNum
	,MainSupplierName
	,[dbo].[ProperCase](TRIM(SupplierName)) AS SupplierName
	,AddressLine1
    ,AddressLine2
    ,AddressLine3
	,[TelephoneNum]
	,[Email]
	,ZipCode
	,City
	,District
	,CountryCode
	,CountryName
	,[Region] 
	,SupplierCategory 
	,SupplierResponsible
	,[dbo].[ProperCase](TRIM(concat ('' +' '+ '' , null))) AS AddressLine
	,CONCAT(CountryName, ', ', City, ', ', ZipCode, ', ',  AddressLine1) AS FullAddressLine
	,[AccountNum] 
	,[VATNum]
	--,'' AS OrganizationNum
	,InternalExternal
	,[CodeOfConduct]
	--,'' AS CustomerNum
	,SupplierScore
	,[MinOrderQty]
	,MinOrderValue	
	,[Website]
	,Comments
	,SRes1
	,SRes2
	,SRes3

FROM [stage].[CYE_ES_Supplier]
/*GROUP BY 
      [PartitionKey],[Company],[SupplierNum],[SupplierName],[AddressLine1],[AddressLine2],[AddressLine3],[City],[ZIP],[Region],[CountryName]
	  ,[SupplierCategory],[Reference],[BankAccountNum],[VATNum],[SupplierABC],[CustomerCode],[TelephoneNum],[Email],[Website],[CodeOfConduct]
	  ,[MinOrderQty],[InternalName],[Comment] */
GO
PRINT N'Creating [stage].[AXL_N1_Customer]'
GO
CREATE TABLE [stage].[AXL_N1_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[MainCustomerName] [nvarchar] (100) NULL,
[CustomerName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[AddressLine] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (20) NULL,
[TelephoneNumber2] [nvarchar] (20) NULL,
[Email] [nvarchar] (100) NULL,
[City] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[Division] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (50) NULL,
[CustomerIndustry] [nvarchar] (50) NULL,
[CustomerSubIndustry] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNo] [nvarchar] (50) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[CustomerABC] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[SalesPersonResponsible] [nvarchar] (50) NULL,
[CustomerType] [nvarchar] (50) NULL,
[Res1] [nvarchar] (50) NULL,
[Res2] [nvarchar] (50) NULL,
[Res3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXL_N1_Customer]'
GO


CREATE VIEW [stage].[vAXL_N1_Customer] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustomerNum))) )) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,UPPER(CONCAT([Company], '#', TRIM([CustomerNum]))) AS CustomerCode
	,PartitionKey

	,UPPER(Company) AS Company
	,UPPER(TRIM(CustomerNum)) AS [CustomerNum]
	,TRIM(MainCustomerName) AS MainCustomerName
	,TRIM(CustomerName) AS  [CustomerName]
	,TRIM([AddressLine1]) AS [AddressLine1]
	,TRIM([AddressLine2]) AS [AddressLine2]
	,TRIM([AddressLine3]) AS [AddressLine3]
	,TRIM([TelephoneNumber1]) AS [TelephoneNum1]
	,TRIM([TelephoneNumber2]) AS [TelephoneNum2]
	,TRIM([Email]) AS [Email]
	,TRIM([ZipCode]) AS [ZipCode]
	,TRIM([City]) AS [City]
	,TRIM([State]) AS [State]
	,TRIM([District]) AS [SalesDistrict]
	,TRIM(con.CountryName) AS CountryName
	,TRIM([ISOAlpha2Code]) AS [CountryCode]
	,TRIM([Division]) AS [Division]
	,TRIM([CustomerIndustry]) AS [CustomerIndustry]
	,TRIM([CustomerSubIndustry]) AS [CustomerSubIndustry]
	,TRIM([AddressLine3]) AS [AddressLine]
	,CONCAT(TRIM(con.CountryName), + ',  ' + TRIM([City]), + ',  ' + TRIM([ZipCode]), + ',  ' + TRIM(addressline3)) AS [FullAddressLine]
	,TRIM(CustomerGroup) AS [CustomerGroup]
	,TRIM(CustomerGroup) AS [CustomerSubGroup]
	,TRIM([SalesRepCode]) AS [SalesPersonCode]
	,TRIM(SalesPersonName) AS [SalesPersonName]
	,TRIM([SalesPersonResponsible]) AS [SalesPersonResponsible]
	,TRIM([VATRegNo]) AS [VATNum]
	,TRIM([AccountString]) AS [AccountNum]
	,TRIM([InternalExternal]) AS [InternalExternal]
	,TRIM([CustomerABC]) AS [CustomerScore]
	,TRIM([CustomerType]) AS [CustomerType]
FROM [stage].[AXL_N1_Customer] com
	LEFT JOIN dbo.Country con ON com.CountryName = con.[ISOAlpha2Code]

--GROUP BY
--	PartitionKey, Company, CustomerNum, CustomerName, MainCustomerName, [AddressLine1], [AddressLine2], [AddressLine3], [TelephoneNumber1], [TelephoneNumber2], [Email], [ZipCode], [City], [State], [District], [CountryName], [Division], [CustomerIndustry], [CustomerSubIndustry], CustomerGroup, [SalesRepCode], SalesPersonName, [SalesPersonResponsible], [VATRegNo], [AccountString], [InternalExternal], [CustomerABC], [CustomerType]

--	Stagetablename in ('AXL_AU_Customer', 'AXL_DC_Customer', 'AXL_HU_Customer', 'AXL_IE_Customer', 'AXL_PL_Customer', 'AXL_PT_Customer', 'AXL_UK_Customer')
GO
PRINT N'Creating [stage].[SVE_SE_SalesLedger]'
GO
CREATE TABLE [stage].[SVE_SE_SalesLedger]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (8) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[SalesInvoiceNum] [nvarchar] (50) NULL,
[SalesInvoiceDate] [nvarchar] (50) NULL,
[DueDate] [nvarchar] (50) NULL,
[LastPaymentDate] [nvarchar] (50) NULL,
[InvoiceAmount] [decimal] (18, 4) NULL,
[RemainingInvoiceAmount] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[VATAmount] [decimal] (18, 4) NULL,
[VATCode] [nvarchar] (50) NULL,
[PayToName] [nvarchar] (50) NULL,
[PayToCity] [nvarchar] (50) NULL,
[PayToContact] [nvarchar] (50) NULL,
[PaymentTerms] [nvarchar] (50) NULL
)
GO
PRINT N'Creating index [IX_SVE_SE_SalesLedger] on [stage].[SVE_SE_SalesLedger]'
GO
CREATE NONCLUSTERED INDEX [IX_SVE_SE_SalesLedger] ON [stage].[SVE_SE_SalesLedger] ([PartitionKey])
GO
PRINT N'Creating [stage].[vSVE_SE_SalesLedger]'
GO

CREATE VIEW [stage].[vSVE_SE_SalesLedger] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(SalesInvoiceNum)))) AS SalesLedgerID --, '#', TRIM(CustomerNum)
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(CustomerNum IS NULL OR CustomerNum = '', 'MISSINGCUSTOMER', CustomerNum))))) AS CustomerID
	,CONCAT(Company, '#', TRIM(CustomerNum), '#', TRIM(SalesInvoiceNum)) AS SalesLedgerCode
	,PartitionKey

	,TRIM(Company) AS Company
	,TRIM(IIF(CustomerNum IS NULL OR CustomerNum = '', 'MISSINGCUSTOMER', CustomerNum)) AS CustomerNum
	,TRIM(SalesInvoiceNum) AS SalesInvoiceNum
	,TRY_CONVERT(date, SalesInvoiceDate) AS SalesInvoiceDate
	,IIF(LEFT(TRIM(SalesInvoiceNum), 1) = 'Q', TRY_CONVERT(date, SalesInvoiceDate), TRY_CONVERT(date, DueDate)) AS SalesDueDate
	,IIF(LEFT(TRIM(SalesInvoiceNum), 1) = 'Q', TRY_CONVERT(date, SalesInvoiceDate), TRY_CONVERT(date, LastPaymentDate)) AS SalesLastPaymentDate
	,InvoiceAmount
	,RemainingInvoiceAmount
	,NULL AS PaidInvoiceAmount
	,ExchangeRate
	,Currency
	,VATAmount
	,VATCode
	,PayToName
	,PayToCity
	,PayToContact
	,PaymentTerms
	,'' AS SLRes1
	,'' AS SLRes2
	,'' AS SLRes3
	,'1900-01-01' AS AccountingDate
	,'' AS AgingPeriod
	,'' AS AgingSort
	,'' AS VATCodeDesc
	,'' AS LinkToOriginalInvoice
FROM 
	stage.SVE_SE_SalesLedger
GO
PRINT N'Creating [dm_PT].[dimSupplier]'
GO

CREATE VIEW [dm_PT].[dimSupplier] AS

SELECT 
 sup.[SupplierID]
,sup.[CompanyID]
,sup.[Company]
,sup.[SupplierNum]
,sup.[MainSupplierName]
,sup.[SupplierName]
,sup.[Supplier]
,sup.[TelephoneNum]
,sup.[Email]
,sup.[ZipCode]
,sup.[City]
,sup.[District]
,sup.[CountryCode]
,sup.[CountryName]
,sup.[Region]
,sup.[SupplierCategory]
,sup.[SupplierResponsible]
,sup.[AddressLine]
,sup.[FullAddressLine]
,sup.[AccountNum]
,sup.[OrganizationNum]
,sup.[VATNum]
,sup.[InternalExternal]
,sup.[CodeOfConduct]
,sup.[CustomerNum]
,sup.[SupplierScore]
,sup.[MinOrderQty]
,sup.[MinOrderValue]
,sup.[Website]
,sup.[Comments]
,sup.[IsMaterialSupplier]
,sup.[DUNS]
,sup.[DUNS_MatchScore]
,sup.[is_inferred]
,sup.[is_deleted]
,sup.[is_validCountryCode]
,sup.[DUNS_Status]
FROM [dm].[DimSupplier] sup
LEFT JOIN dbo.Company com ON sup.Company = com.Company
WHERE com.BusinessArea = 'Power Transmission Solutions' AND com.[Status] = 'Active'

--WHERE [Company] in ('ACZARKOV', 'AcornUK', 'BSIBELL', 'JDKJENSS', 'JDKKALTE', 'JFIJENSS', 'MNLMAK', 'JNOJENSS', 'JNOORBEL', 'JSEJENSS', 'JSESKSSW', 'NORNO', 'SSWSE', 'NomoSE', 'NomoDK', 'NomoFI', 'NomoNo', 'PASSEROT', 'SKSSCOFI', 'SCOFI', 'SMKFI', 'SNLSPRUI', 'SPRUITNL', 'SVESE')  -- The PT basket --
GO
PRINT N'Creating [stage].[MEN_NL_SOLine]'
GO
CREATE TABLE [stage].[MEN_NL_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[InvoiceHandler] [nvarchar] (200) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartType] [nvarchar] (50) NULL,
[SalesOrderNum] [nvarchar] (50) NULL,
[SalesOrderLine] [nvarchar] (50) NULL,
[SalesOrderSubLine] [nvarchar] (50) NULL,
[SalesOrderType] [nvarchar] (50) NULL,
[SalesInvoiceNum] [nvarchar] (50) NOT NULL,
[SalesInvoiceLine] [nvarchar] (50) NULL,
[SalesInvoiceType] [nvarchar] (50) NULL,
[SalesInvoiceDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[SalesInvoiceQty] [decimal] (18, 8) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 8) NULL,
[UnitCost] [decimal] (18, 8) NULL,
[DiscountPercent] [decimal] (18, 8) NULL,
[DiscountAmount] [decimal] (18, 8) NULL,
[CashDiscountOffered] [decimal] (18, 8) NULL,
[CashDiscountUsed] [decimal] (18, 8) NULL,
[TotalMiscChrg] [decimal] (18, 8) NULL,
[VATAmount] [decimal] (18, 8) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 8) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[SalesChanel] [nvarchar] (50) NULL,
[Department] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[CostBearerNum] [nvarchar] (50) NULL,
[CostUnitNum] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (500) NULL,
[ReturnNum] [nvarchar] (50) NULL,
[ProjectNum] [nvarchar] (50) NULL,
[Indexkey] [nvarchar] (50) NULL,
[SIRes1] [nvarchar] (100) NULL,
[SIRes2] [nvarchar] (100) NULL,
[SIRes3] [nvarchar] (100) NULL,
[DebiteurKey] [nvarchar] (50) NULL,
[ProductKey] [nvarchar] (50) NULL,
[DW_TimeStamp] [date] NULL,
[SalesAmount] [decimal] (18, 8) NULL,
[SalesInvoiceQty_2] [decimal] (18, 8) NULL,
[CustomerNumPayer] [nvarchar] (50) NULL,
[InternalSalesIdentifier] [bit] NULL
)
GO
PRINT N'Creating [stage].[vMEN_NL_SOLine]'
GO



CREATE VIEW [stage].[vMEN_NL_SOLine] AS
/*
This query is likely overengineered. Could likely be simplified a lot by sacrificing correct UnitPrice and base things on SalesAmount.
What we try to accomplish here is to handle logic related to assembled products. The assembled products should have their SalesAmount 
*/

WITH 
--SOLine but with Company Code and ProductIsAssembly from dim part
SOLine AS ( 
	SELECT [so].[PartitionKey], [so].[Company], [so].[InvoiceHandler], [so].[CustomerNum], [so].[PartNum], [so].[PartType], [so].[SalesOrderNum], [so].[SalesOrderLine], [so].[SalesOrderSubLine], [so].[SalesOrderType], [so].[SalesInvoiceNum], [so].[SalesInvoiceLine], [so].[SalesInvoiceType], [so].[SalesInvoiceDate], [so].[ActualDelivDate], [so].[SalesInvoiceQty], [so].[UoM], [so].[UnitPrice], [so].[UnitCost], [so].[DiscountPercent], [so].[DiscountAmount], [so].[CashDiscountOffered], [so].[CashDiscountUsed], [so].[TotalMiscChrg], [so].[VATAmount], [so].[Currency], [so].[ExchangeRate], [so].[CreditMemo], [so].[SalesChanel], [so].[Department], [so].[WarehouseCode], [so].[CostBearerNum], [so].[CostUnitNum], [so].[ReturnComment], [so].[ReturnNum], [so].[ProjectNum], [so].[Indexkey], [so].[SIRes1], [so].[SIRes2], [so].[SIRes3], [so].[DebiteurKey], [so].[ProductKey], [so].[DW_TimeStamp], [so].[SalesAmount], [so].[SalesInvoiceQty_2], [so].[CustomerNumPayer], [so].[InternalSalesIdentifier]
			,CASE WHEN so.Company = '14' THEN  CONCAT(N'MENBE',so.Company) 
				ELSE  CONCAT(N'MENNL',so.Company) END AS CompanyCode
			,ROW_NUMBER() OVER	(Partition BY Company, SalesInvoiceNum, SalesInvoiceLine, PartNum ORDER BY SalesAmount) AS rownum

	FROM [stage].[MEN_NL_SOLine] so
)
--COMMENT EMPTY FIELDS // ADD TRIM()UPPER() INTO WarehouseID 23-01-12 VA
--Invoice lines with no assembly products
SELECT  
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(CompanyCode, '#', SalesInvoiceNum, '#', SalesInvoiceLine, '#', PartNum, '#', Rownum ))) AS SalesInvoiceID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(CompanyCode,'#',SalesOrderNum,'#',SalesOrderLine,'#',SalesInvoiceNum))) AS SalesOrderID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(CompanyCode, '#', TRIM(SalesInvoiceNum)))) AS SalesLedgerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(CompanyCode,'#',SalesOrderNum))) AS SalesOrderNumID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(CompanyCode,'#',CustomerNum))) AS CustomerID
    ,CONVERT([binary](32),HASHBYTES('SHA2_256',CompanyCode)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(CompanyCode, '#', PartNum))) AS PartID 
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([CompanyCode]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([CompanyCode],'#',UPPER([WarehouseCode])))) AS WarehouseID
	,CONCAT(CompanyCode,'#',SalesOrderNum,'#',SalesOrderLine, '#',SalesInvoiceNum, '#' , PartNum) as SalesOrderCode 
	,CONVERT(int, replace(convert(date,SalesInvoiceDate),'-','')) AS SalesInvoiceDateID  --Redundant?
	,CONCAT(CompanyCode,'#',TRIM(SalesInvoiceNum),'#',TRIM(SalesInvoiceLine)) AS SalesInvoiceCode --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( CompanyCode,'#','') ))	AS ProjectID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(CompanyCode,'#',trim(Department)))) AS DepartmentID
	,PartitionKey

	,CompanyCode AS Company
	,InvoiceHandler AS SalesPersonName
	,TRIM(CustomerNum)	AS CustomerNum
	,TRIM(PartNum)		AS PartNum
	,PartType
	,SalesOrderNum
	,SalesOrderLine
	,SalesOrderSubLine
	,SalesOrderType
	,SalesInvoiceNum
	,SalesInvoiceLine
	,InternalSalesIdentifier AS SalesInvoiceType --Temporarily using SalesInvoiceType for this Internal flag
	,SalesInvoiceDate
	,ActualDelivDate
	,UoM
	,COALESCE(NULLIF(SalesInvoiceQty_2,0),1) AS SalesInvoiceQty
	,(SalesAmount+DiscountAmount)/COALESCE(NULLIF(SalesInvoiceQty_2,0),1) UnitPrice
	,UnitCost
	,DiscountPercent
	,DiscountAmount
	,CashDiscountOffered
	,CashDiscountUsed
	,TotalMiscChrg
	,VATAmount
	,COALESCE(UPPER(Currency),'EUR') AS Currency
	,COALESCE([ExchangeRate], 1) AS ExchangeRate
	,CreditMemo
	,SalesChanel	AS SalesChannel
	,Department
	,WarehouseCode
	--,NULL AS DeliveryAddress
	,CostBearerNum
	,CostUnitNum
	,ReturnComment
	,ReturnNum
	,ProjectNum
	,IndexKey
	,SalesAmount  AS SIRes1
	--,''  AS SIRes2
	,InternalSalesIdentifier AS SIRes3
FROM SOLine
--where SalesOrderNum = 668536 and PartNum = '99874718' and SalesOrderLine = 290
--where CompanyCode = 'MENNL02'
GO
PRINT N'Creating [dm_ALL].[dimProject]'
GO
CREATE VIEW [dm_ALL].[dimProject] AS

SELECT 
[ProjectID]
,[ProjectCode]
,[PartitionKey]
,[Company]
,[MainProjectNum]
,[ProjectNum]
,[ProjectDescription]
,[Project]
,[Organisation]
,[ProjectStatus]
,[ProjectCategory]
,[WBSElement]
,[ObjectNum]
,[Level]
,[Currency]
,[WarehouseCode]
,[ProjectResponsible]
,[Comments]
,[StartDate]
,[EndDate]
,[EstEndDate]
,[ActualCost]
FROM [dm].[DimProject]
GO
PRINT N'Creating [stage].[WID_FI_Part]'
GO
CREATE TABLE [stage].[WID_FI_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartDescription] [nvarchar] (max) NULL,
[PartDescription2] [nvarchar] (max) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[ProductGroup2] [nvarchar] (50) NULL,
[Brand] [nvarchar] (50) NULL,
[CommodityCode] [nvarchar] (50) NULL,
[CountryOfOrigin] [nvarchar] (50) NULL,
[PartResponsible] [nvarchar] (50) NULL,
[NetWeight] [decimal] (18, 4) NULL,
[PackingSize] [decimal] (18, 4) NULL,
[PartStatus] [nvarchar] (50) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[SupplierPartNum] [nvarchar] (50) NULL,
[ReorderLevel] [decimal] (18, 4) NULL,
[EAN] [nvarchar] (50) NULL,
[MainSupplier] [nvarchar] (100) NULL,
[AlternativeSupplier] [nvarchar] (100) NULL,
[AvgCost] [decimal] (18, 4) NULL,
[LandedCost] [decimal] (18, 4) NULL,
[StartDate] [date] NULL,
[EndDate] [date] NULL,
[CodeOfConduct] [nvarchar] (50) NULL,
[InfoClient] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[vWID_FI_Part]'
GO


CREATE VIEW [stage].[vWID_FI_Part] AS
--COMMENT EMPTY FIELDS / ADD UPPER()TRIP() INTO PartID 2022-12-15 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([PartNum]))))) AS PartID
--	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', TRIM([PartNum])))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',[Company])) AS CompanyID
	,CONCAT([Company], '#', TRIM([PartNum])) AS PartCode
	,PartitionKey

	,[Company]
	,TRIM([PartNum]) AS [PartNum]
	--,'' AS [PartName]
	,[PartDescription]
	,[PartDescription2]
	--,'' AS [PartDescription3]
	,TRIM(MainSupplier) AS MainSupplier
	,TRIM(AlternativeSupplier) AS AlternativeSupplier
	,[ProductGroup]
	,[ProductGroup2]
	--,'' AS [ProductGroup3]
	,CodeOfConduct AS [ProductGroup4]
	,TRIM([Brand]) AS [Brand]
	,[CommodityCode]
	,SupplierPartNum AS PartReplacementNum
	,PartStatus
	,[CountryOfOrigin]
	,CASE 
		WHEN PartResponsible = 'JN' THEN 'Janne Nyqvist'
		WHEN PartResponsible = 'MT' THEN 'Markku Tiikkainen'
		WHEN PartResponsible = 'RM' THEN 'Risto Malm'
		WHEN PartResponsible = 'SV' THEN 'Sami Venho'
		WHEN PartResponsible = 'TK' THEN 'Tanja Keiho'
		WHEN PartResponsible = 'TH' THEN 'Toni Hovi'
		WHEN PartResponsible = 'JMA' THEN 'Juuso Makkonen'
		ELSE 'Others' END AS PartResponsible
	,[NetWeight]
	--,'' AS UoM
	,PackingSize AS [Material]
	,EAN AS [Barcode]
	,[ReOrderLevel]
	,[StartDate]
	,[EndDate]
	,nullif(trim([InfoClient]),'') as [PARes1]

FROM [stage].[WID_FI_Part]
GO
PRINT N'Creating [stage].[NOM_SE_StockTransaction]'
GO
CREATE TABLE [stage].[NOM_SE_StockTransaction]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[IndexKey] [nvarchar] (50) NOT NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[TransactionCode] [nvarchar] (50) NULL,
[TransactionDescription] [varchar] (100) NULL,
[TransactionType] [nvarchar] (50) NULL,
[IssuerReceiverNum] [nvarchar] (50) NULL,
[OrderNum] [nchar] (50) NULL,
[OrderLine] [nchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[BinNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[TransactionDate] [date] NULL,
[TransactionTime] [nvarchar] (10) NULL,
[CreateDate] [date] NULL,
[FIFOBatchID] [nvarchar] (50) NULL,
[SupplierBatchID] [nvarchar] (50) NULL,
[TransactionQty] [decimal] (18, 4) NULL,
[TransactionValue] [decimal] (18, 4) NULL,
[CostPrice] [decimal] (18, 4) NULL,
[SalesUnitPrice] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (10) NULL,
[Reference] [nvarchar] (50) NULL,
[AdjustmentDate] [date] NULL,
[InternalExternal] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vNOM_SE_StockTransaction]'
GO
CREATE VIEW [stage].[vNOM_SE_StockTransaction] AS 
--ADD TRIM() INTO CustomerID,PartID 2022-12-20 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', TRIM(IndexKey)))) AS StockTransactionID
	,UPPER([Company]) AS [Company]
	,UPPER(TRIM([PartNum])) AS [PartNum]
	,UPPER(TRIM([WarehouseCode])) AS WarehouseCode
	,IIF(TRIM(IssuerReceiverNum)='', NULL, UPPER(TRIM(IssuerReceiverNum))) AS IssuerReceiverNum
	,TransactionCode
	,TransactionType AS TransactionDescription
	,IIF(TRIM([OrderNum])='', NULL,TRIM(OrderNum)) AS OrderNum
	,OrderLine
	,IIF(TRIM([InvoiceNum])='', NULL,TRIM(InvoiceNum)) AS InvoiceNum
	,InvoiceLine
	,IIF(TRIM([BinNum])='', NULL,TRIM(BinNum)) AS BinNum
	,IIF(TRIM([BatchNum])='', NULL,TRIM(BatchNum)) AS BatchNum
	,CONVERT(date, TransactionDate) AS TransactionDate
	,TransactionTime
	,TransactionQty
	,TransactionValue
	,[CostPrice]
	,SalesUnitPrice
	,IIF(TRIM([Currency])='', NULL,TRIM(Currency)) AS Currency
	,[Reference]
	,CONVERT(date, AdjustmentDate) AS AdjustmentDate
	,IIF(InternalExternal = 'I', 'Internal', 'External') AS InternalExternal
	,CreateDate AS STRes1
	,FIFOBatchID AS STRes2
	,TransactionDescription AS STRes3

	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT([Company],'#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,IIF(TransactionCode in ('930', '931', '936'), CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company], '#', TRIM([InvoiceNum]))))), NULL) AS PurchaseInvoiceID
--	,IIF(TransactionCode in ('930', '931', '936', '907'), CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company], '#', TRIM([OrderNum]))))), NULL) AS PurchaseOrderNumID
	,IIF(TransactionType = 'Incomming Goods', CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company], '#', TRIM([OrderNum]))))), NULL) AS PurchaseOrderNumID
	,IIF(TransactionCode in ('800', '801', '815'), CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company], '#', TRIM([OrderNum]))))), NULL) AS SalesOrderNumID
	,IIF(TransactionCode in ('800', '801', '815'), CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company], '#', TRIM([InvoiceNum]))))), NULL) AS SalesInvoiceID
	--,IIF(TransactionCode in ('800', '801', '815'), CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT([Company],'#',TRIM(IssuerReceiverNum))))), NULL) AS CustomerID
	,IIF(TransactionCode in ('800', '801', '815'), CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM(IssuerReceiverNum))))), NULL) AS CustomerID
	,IIF(TransactionCode in ('930', '931', '936'), CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company], '#', TRIM(IssuerReceiverNum))))), NULL) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Currency])))) AS CurrencyID
	,PartitionKey
	,IndexKey

FROM [stage].[NOM_SE_StockTransaction]
GO
PRINT N'Creating [stage].[SUM_UK_Salesledger]'
GO
CREATE TABLE [stage].[SUM_UK_Salesledger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[Res1] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vSUM_UK_Salesledger]'
GO
CREATE VIEW [stage].[vSUM_UK_Salesledger] AS
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(UPPER(TRIM(dbo.summers())), '#', UPPER(TRIM(CustNum)), '#', UPPER(TRIM(InvoiceNum)) ))) AS SalesLedgerID  --, '#', DueDate, '#', LastPayDate *This should be add in the id? VA
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(dbo.summers())))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(dbo.summers()),'#',TRIM(CustNum))))) AS CustomerID
	,CONCAT(UPPER(TRIM(dbo.summers())), '#', UPPER(TRIM(CustNum)), '#', UPPER(TRIM(InvoiceNum))) AS SalesLedgerCode
	,PartitionKey

	,UPPER(TRIM(dbo.summers())) AS Company
	,TRIM(CustNum) AS CustomerNum
	,TRIM(InvoiceNum) AS SalesInvoiceNum  -- various blank spaces after InvoiceNum, it affects query results! data-Input quality should be improved!
	,isnull(nullif(InvoiceDate,''),'1900-01-01') AS SalesInvoiceDate
	,CONVERT(date, MIN(DueDate)) AS SalesDueDate
	,CONVERT(date, MAX(LastPaymentDate)) AS SalesLastPaymentDate
	--NULL AS InvoiceAmount,
	--NULL AS RemainingInvoiceAmount,
	,1 AS ExchangeRate
	,'GBP' AS Currency
	--NULL AS VATAmount,
	--'' AS VATCode,
	--'' AS PayToName,
	--'' AS PayToCity,
	--'' AS PayToContact,
	--'' AS PaymentTerms,
	--'' AS SLRes1
	--'' AS SLRes2,
	--'' AS SLRes3
	--NULL AS PaidInvoiceAmount,
	--'1900-01-01' AS AccountingDate,
	--NULL AS AgingPeriod,
	--NULL AS AgingSort,
	--NULL AS VATCodeDesc,
	--NULL AS LinkToOriginalInvoice
FROM 
	stage.SUM_UK_Salesledger
GROUP BY
	PartitionKey, Company, TRIM(CustNum), TRIM(InvoiceNum), InvoiceDate
GO
PRINT N'Creating [stage].[TMT_FI_Warehouse]'
GO
CREATE TABLE [stage].[TMT_FI_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseID] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL,
[WarehouseDistrict] [nvarchar] (50) NULL,
[WarehouseAddress] [nvarchar] (100) NULL,
[WarehouseDescription] [nvarchar] (max) NULL,
[WarehouseType] [nvarchar] (50) NULL,
[WarehouseCountry] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vTMT_FI_Warehouse]'
GO
CREATE VIEW [stage].[vTMT_FI_Warehouse] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey

	,UPPER([Company]) AS [Company]
	,TRIM([WarehouseCode]) AS [WarehouseCode]
	,[WarehouseName]
	,[WarehouseDistrict]
	,[WarehouseAddress]
	,[WarehouseDescription]
	,[WarehouseType]
	,[WarehouseCountry]
	,'' AS WarehouseSite
FROM [stage].[TMT_FI_Warehouse]
GO
PRINT N'Creating [stage].[CER_FI_StockTransaction]'
GO
CREATE TABLE [stage].[CER_FI_StockTransaction]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SysRowID] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[BinNumber] [nvarchar] (50) NULL,
[BatchID] [nvarchar] (50) NULL,
[FIFOBatchID] [nvarchar] (50) NULL,
[SupplierBatchID] [nvarchar] (50) NULL,
[TranDate] [date] NULL,
[CreateDate] [date] NULL,
[CreateTime] [nvarchar] (50) NULL,
[TranDT] [nvarchar] (50) NULL,
[TranType] [nvarchar] (50) NULL,
[TranTypeDesc] [nvarchar] (500) NULL,
[TranSource] [nvarchar] (50) NULL,
[Reference] [nvarchar] (50) NULL,
[TranQty] [decimal] (18, 4) NULL,
[IssuerReceiverCode] [nvarchar] (50) NULL,
[CostPrice] [decimal] (18, 4) NULL,
[SellingPrice] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[TranValue] [decimal] (18, 4) NULL,
[InternalExternal] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_FI_StockTransaction]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vCER_FI_StockTransaction] AS 

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([SysRowID]))))) AS StockTransactionID
	,UPPER(CONCAT([Company], '#', TRIM([SysRowID]))) AS StockTransactionCode --StockTransactionCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(([Company]))))) AS CompanyID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#' ,TRIM(UPPER([PartNum])))))) AS PartID
 	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,IIF(TranSource = '0x31', CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([OrderNum]))))), NULL) AS SalesOrderNumID
	,IIF(TranSource <> '0x31', CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([OrderNum]))))), NULL) AS PurchaseOrderNumID
--	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([OrderNum])))) AS PurchaseOrderID
	,IIF(TranSource = '0x31', CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([InvoiceNum]))))), NULL) AS SalesInvoiceID
	,IIF(TranSource <> '0x31', CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]),'#',TRIM([InvoiceNum]))))), NULL) AS PurchaseInvoiceID
	,IIF(TranSource = '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([IssuerReceiverCode]))))), NULL) AS CustomerID
	,IIF(TranSource <> '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([IssuerReceiverCode]))))), NULL) AS SupplierID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([CurrencyCode])))) AS CurrencyID
	,[PartitionKey]

    
    ,TRIM([Company]) AS Company -- 
	,TRIM([WarehouseCode]) AS WarehouseCode
	,[TranType]		AS TransactionCode
    ,[TranTypeDesc]	AS TransactionDescription
	,TRIM([IssuerReceiverCode]) AS IssuerReceiverNum
	,IIF(TRIM([OrderNum])='', NULL, TRIM(OrderNum)) AS OrderNum 
	,IIF([TranType] = '01', TRIM([OrderNum]), '') AS SalesOrderNum
	,IIF([TranType] = '01', TRIM([InvoiceNum]), '') AS SalesInvoiceNum
	,IIF([TranType] = '01', TRIM([IssuerReceiverCode]), '') AS CustomerNum
	,IIF([TranType] = '00', TRIM([OrderNum]), '') AS PurchaseOrderNum
	,IIF([TranType] = '00', TRIM([InvoiceNum]), '') AS PurchaseInvoiceNum
	,IIF([TranType] = '00', TRIM([IssuerReceiverCode]), '') AS SupplierNum
	,'' AS OrderLine
	,IIF(TRIM([InvoiceNum])='', NULL,TRIM(InvoiceNum)) AS InvoiceNum
	,'' AS InvoiceLine
    ,TRIM(UPPER([PartNum])) AS PartNum
    ,IIF(TRIM([BinNumber])='', NULL,TRIM(BinNumber)) AS BinNum
    ,IIF(TRIM([BatchID])='', NULL,TRIM(BatchID)) AS BatchNum
    ,convert(date, [TranDate]) AS TransactionDate
    ,[CreateTime] AS TransactionTime
	,[TranQty] AS TransactionQty
    ,[TranValue] AS TransactionValue
	,[CostPrice]
    ,[SellingPrice] AS SalesUnitPrice
	,'EUR' AS Currency
	,1 AS ExchangeRate
	,[Reference]
	,convert(date, [CreateDate]) AS AdjustmentDate
	,InternalExternal
	,IIF(InternalExternal = 'Internal', 1, 0) AS IsInternalTransaction
	,'' AS STRes1
	,'' AS STRes2
	,'' AS STRes3
    ,[SysRowID] AS IndexKey
	,IIF(TRIM([FIFOBatchID])='', NULL,TRIM(FIFOBatchID)) AS FIFOBatchID
    ,IIF(TRIM([SupplierBatchID])='', NULL,TRIM(SupplierBatchID)) AS SupplierBatchID
	,[TranDT]
    ,[TranSource]
				 
FROM 
	[stage].[CER_FI_StockTransaction]
GO
PRINT N'Creating [dm_PT].[fctStockTransaction]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE VIEW [dm_PT].[fctStockTransaction] AS

SELECT 
 st.[StockTransactionID]
,st.[CompanyID]
,st.[PartID]
,st.[WarehouseID]
,st.[CurrencyID]
,st.[TransactionDateID]
,st.[SupplierID]
,st.[PurchaseOrderNumID]
,st.[PurchaseInvoiceID]
,st.[CustomerID]
,st.[SalesOrderNumID]
,st.[SalesInvoiceID]
,st.[CurrencyMonthKey]
,st.[Company]
,st.[WarehouseCode]
,st.[TransactionCode]
,st.[TransactionDescription]
,st.[IssuerReceiverNum]
,st.[IssuerReceiverName]
,st.[OrderNum]
,st.[OrderLine]
,st.[InvoiceNum]
,st.[InvoiceLine]
,st.[PartNum]
,st.[BinNum]
,st.[BatchNum]
,st.[TransactionDate]
,st.[TransactionTime]
,st.[TransactionQty]
,st.[TransactionValue]
,st.[CostPrice]
,st.[SalesUnitPrice]
,st.[Currency]
,st.[Reference]
,st.[AdjustmentDate]
,st.[IndexKey]
,st.[InternalExternal]
FROM dm.FactStockTransaction st
LEFT JOIN dbo.Company com ON st.Company = com.Company
WHERE com.BusinessArea = 'Power Transmission Solutions' AND com.[Status] = 'Active'


--WHERE [Company] in ('ACZARKOV', 'AcornUK', 'BSIBELL', 'JDKJENSS', 'JDKKALTE', 'JFIJENSS', 'MNLMAK', 'JNOJENSS', 'NORNO', 'JSEJENSS', 'SSWSE', 'NomoSE', 'NomoDK', 'NomoFI', 'NomoNo', 'NORNO', 'PASSEROT', 'SKSSCOFI', 'SCOFI', 'SMKFI', 'SNLSPRUI', 'SPRUITNL', 'SVESE')  -- The PT basket --
GO
PRINT N'Creating [stage].[ACO_UK_Part]'
GO
CREATE TABLE [stage].[ACO_UK_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartName] [nvarchar] (100) NULL,
[PartDescription] [nvarchar] (max) NULL,
[PartDescription2] [nvarchar] (max) NULL,
[PartDescription3] [nvarchar] (max) NULL,
[ProductGroup] [nvarchar] (255) NULL,
[ProductGroup2] [nvarchar] (255) NULL,
[ProductGroup3] [nvarchar] (255) NULL,
[ProductGroup4] [nvarchar] (255) NULL,
[CountryOfOrigin] [nvarchar] (50) NULL,
[Brand] [nvarchar] (50) NULL,
[CommodityCode] [nvarchar] (50) NULL,
[PartNumReplacement] [nvarchar] (50) NULL,
[NetWeight] [nvarchar] (50) NULL,
[Volume] [decimal] (18, 4) NULL,
[Material] [nvarchar] (50) NULL,
[Site] [nvarchar] (50) NULL,
[Barcode] [nvarchar] (50) NULL,
[ReorderLevel] [decimal] (18, 4) NULL,
[MinOrderQty] [decimal] (18, 4) NULL,
[StartDate] [date] NULL,
[EndDate] [date] NULL,
[ItemStatus] [int] NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vACO_UK_Part]'
GO



CREATE VIEW [stage].[vACO_UK_Part] AS
--COMMENT empty fields / ADD UPPER() TRIM() INTO PartID
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM(PartNum))))) AS PartID 
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company] ,'#', PartNum))) AS PartID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [Company])) AS CompanyID
	,CONCAT([Company],'#', TRIM(PartNum)) AS PartCode
	,PartitionKey


	,[Company]
	,TRIM(PartNum) AS [PartNum]
	,[PartName]
	,[PartDescription]
	,[PartDescription2]
	,[PartDescription3]
	,TRIM([ProductGroup]) AS ProductGroup
	,TRIM([ProductGroup2])	AS ProductGroup2	
	,TRIM([ProductGroup3]) AS ProductGroup3
	,TRIM([ProductGroup4]) AS ProductGroup4
	,COALESCE(B.BrandReportingName, 'Other') AS [Brand] 
	--,NULL AS MainSupplier
	--,NULL AS AlternativeSupplier
	,[CommodityCode]
	--,'' AS PartReplacementNum
	--,'' AS PartStatus
	,[CountryOfOrigin]
	,TRY_CONVERT(decimal(18,4), [NetWeight]) AS NetWeight -- Added try_convert since stage table field was changed to nvarchar to handle rows skipped in pipeline /SM 2021-04-20
	--,'' AS UoM
	,[Material]
	,[Barcode]
	,[ReOrderLevel]
	--,'' AS PartResponsible
	,[StartDate]
	,[EndDate]
	,[Site]

FROM [stage].[ACO_UK_Part] AS P
LEFT JOIN [stage].[ACO_UK_mapBrand] B ON P.Brand = B.BrandERPName
GROUP BY
	PartitionKey, [Company], TRIM(PartNum), [PartName], [PartDescription], [PartDescription2], B.BrandReportingName, [PartDescription3], [ProductGroup3], [ProductGroup4], [ProductGroup], [ProductGroup2], [CommodityCode], [CountryOfOrigin], [NetWeight], [Brand], [Barcode], [Volume], [Material], [Site], [StartDate], [EndDate], [ReorderLevel]
GO
PRINT N'Creating [dm_ALL].[dimCustomerAgreement]'
GO

CREATE VIEW [dm_ALL].[dimCustomerAgreement] AS
SELECT [CompanyID]
,[CustomerID]
,[PartID]
,[CurrencyID]
,[Company]
,[CustomerNum]
,[PartNum]
,[AgreementCode]
,[AgreementDescription]
,[DiscountPercent]
,[UnitPrice]
,[AgreementQty]
,[Currency]
,[DelivTime]
,[AgreementStart]
,[AgreementEnd]
,[CustomerTerms]
,[FulfilledQty]
,[RemainingQty]
,[UoM]
,[PartitionKey]
,[ExchangeRate]
FROM [dm].[DimCustomerAgreement]
GO
PRINT N'Creating [stage].[TMT_FI_SOLine]'
GO
CREATE TABLE [stage].[TMT_FI_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderRel] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (100) NULL,
[PartNum] [nvarchar] (50) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[IndexKey] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[Site] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[SalesPersonNumber_real] [nvarchar] (50) NULL,
[SalesPersonName_real] [nvarchar] (100) NULL,
[OrderHandler] [nvarchar] (50) NULL,
[Version] [varchar] (20) NULL
)
GO
PRINT N'Creating [stage].[vTMT_FI_SOLine]'
GO
CREATE VIEW [stage].[vTMT_FI_SOLine] AS
--COMMENT EMPTY FIELD // ADD TRIM() INTO CustomerID,PartID 23-01-09 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(PartNum), '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine))))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', OrderNum, '#', OrderLine, '#', InvoiceNum)))) AS SalesOrderID --redundent?
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', CustNum, '#', InvoiceNum)))) AS SalesLedgerID -- Same as in Invoice view
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID --redundent?
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company],'#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(InvoiceNum))) AS SalesOrderCode
	,CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine)) AS SalesInvoiceCode --redundent?
	,CONVERT(int, replace(convert(date,InvoiceDate),'-','')) AS SalesInvoiceDateID  --redundent?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(OrderHandler) AS SalesPersonName
	,UPPER(TRIM(CustNum)) AS CustomerNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,CASE WHEN TRIM(OrderNum) = '0' THEN 'PrimaryPart' ELSE 'SubPart' END  AS PartType
	,TRIM(OrderNum) AS SalesOrderNum
	,TRIM(OrderLine) AS SalesOrderLine
	,TRIM(OrderSubLine) AS SalesOrderSubLine
	,CASE WHEN OrderType = '1' THEN 'Eur Tilaus'
		WHEN OrderType = '2' THEN 'Hyvitys'
		WHEN OrderType = '3' THEN 'Käteismyynti'
		WHEN OrderType = '4' THEN 'Käthyvitys'
		WHEN OrderType = '5' THEN 'Toim.hyvitys'
		WHEN OrderType = '6' THEN 'Toimitus'
		WHEN OrderType = '7' THEN 'Ulk EURHyvit'
		WHEN OrderType = '8' THEN 'Ulk.Eur Til'
		WHEN OrderType = '9' THEN 'Ulk.Toim.hyv'
		ELSE COALESCE(CAST(OrderType AS NVARCHAR), '0')
		END AS SalesOrderType 
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,TRIM(InvoiceLine) AS [SalesInvoiceLine]
	--,'' AS SalesInvoiceType
	,CASE WHEN InvoiceDate = '' THEN '1901-01-01' ELSE CONVERT(date, InvoiceDate) END AS SalesInvoiceDate
	,ActualDeliveryDate AS [ActualDelivDate]
	,SellingShipQty AS [SalesInvoiceQty]
	--,'' AS [UoM]
	,UnitPrice
	,UnitCost
	,DiscountAmount
	,IIF(UnitPrice*SellingShipQty <> 0, DiscountAmount/UnitPrice*SellingShipQty, 0) AS [DiscountPercent]
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	--,0 AS TotalMiscChrg -- There is data in the stage table for TotalMiscChrg. However, it shouldn't be used to calculate the invoice amount as there "can be eg. transport costs, additional labour costs, custom clearance cost and additional material costs from completely another company." according to Petri Seppänen - SB 2022-11-17
	--,0 AS [VATAmount]
	,TRIM(WarehouseCode) AS WarehouseCode
	--,NULL AS DeliveryAddress
	,Currency
	,ExchangeRate
	,CreditMemo
	--,'' AS [SalesChannel]
	--,'' AS [Department]
	--,'' AS [CostBearerNum]
	--,'' AS [CostUnitNum]
	--,'' AS [ReturnComment]
	--,'' AS [ReturnNum]
	--,'' AS [ProjectNum]
	,MAX(Indexkey) AS Indexkey
	,SalesPersonNumber_real AS SIRes1
	,SalesPersonName_real AS SIRes2
	--,'' AS SIRes3
FROM stage.TMT_FI_SOLine AS SO

GROUP BY
	PartitionKey, Company, OrderHandler, CustNum, PartNum, OrderNum, OrderLine, OrderSubLine, OrderType, InvoiceNum, InvoiceLine, InvoiceDate, ActualDeliveryDate, SellingShipQty, UnitPrice, UnitCost, DiscountAmount, TotalMiscChrg, WarehouseCode, Currency, ExchangeRate, CreditMemo, SalesPersonNumber_real, SalesPersonName_real

--	,[Site]
--	,OrderRel AS OrderRelNum
	--,CASE WHEN OrderType Like 'Eur Tilaus' THEN CONVERT(INT, 1)
	--	WHEN OrderType='Hyvitys' THEN CONVERT(INT, 2)
	--	WHEN OrderType='Käteismyynti' THEN CONVERT(INT, 3)
	--	WHEN OrderType='Käthyvitys' THEN CONVERT(INT, 4)
	--	WHEN OrderType='Toim.hyvitys' THEN CONVERT(INT, 5)
	--	WHEN OrderType='Toimitus' THEN CONVERT(INT, 6)
	--	WHEN OrderType='Ulk EURHyvit' THEN CONVERT(INT, 7)
	--	WHEN OrderType='Ulk.Eur Til' THEN CONVERT(INT, 8)
	--	WHEN OrderType='Ulk.Toim.hyv' THEN CONVERT(INT, 9)
	--	ELSE CONVERT(INT, 0) END AS OrderType
GO
PRINT N'Creating [stage].[OCS_SE_Project]'
GO
CREATE TABLE [stage].[OCS_SE_Project]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[MainProjectNum] [nvarchar] (50) NULL,
[ProjectNum] [nvarchar] (50) NULL,
[ProjectDescription] [nvarchar] (500) NULL,
[Organisation] [nvarchar] (50) NULL,
[ProjectStatus] [nvarchar] (50) NULL,
[ProjectCategory] [nvarchar] (50) NULL,
[WBSElement] [nvarchar] (50) NULL,
[ObjectNum] [nvarchar] (50) NULL,
[Level] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[ProjectResponsible] [nvarchar] (200) NULL,
[Comments] [nvarchar] (500) NULL,
[StartDate] [nvarchar] (50) NULL,
[EndDate] [nvarchar] (50) NULL,
[EstEndDate] [nvarchar] (50) NULL,
[CurrentValue_Total] [decimal] (18, 8) NULL,
[AccGr] [nvarchar] (50) NULL,
[AccountGroupName] [nvarchar] (200) NULL,
[AccountNum] [nvarchar] (50) NULL,
[AccountName] [nvarchar] (200) NULL,
[ActualCost] [decimal] (18, 8) NULL
)
GO
PRINT N'Creating [stage].[vOCS_SE_Project]'
GO









CREATE VIEW [stage].[vOCS_SE_Project] AS

SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM([COMPANY]),'#',[ProjectNum]))) AS ProjectID
	,UPPER(CONCAT(TRIM([COMPANY]),'#',[ProjectNum] )) AS ProjectCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([COMPANY])))) AS CompanyID
	,PartitionKey

	,Company 
	,MainProjectNum
	,[ProjectNum]
	,[ProjectDescription]
	,[Organisation]
	,ProjectStatus
	,ProjectCategory
	,[WBSElement]
	,[ObjectNum]
	,[Level]
	,[Currency]
	,[WarehouseCode]
	,ProjectResponsible
	,Comments
	,COALESCE(TRY_CONVERT(date, [StartDate],112),'1900-01-01') AS StartDate
	,COALESCE(TRY_CONVERT(date, [EndDate],112),'1900-01-01') AS EndDate
	,COALESCE(TRY_CONVERT(date,[EstEndDate],112),'1900-01-01') AS EstEndDate
	,NULL AS ProjectCompletion
	,SUM(ActualCost) AS ActualCost
FROM [stage].[OCS_SE_Project]
GROUP BY Company ,MainProjectNum,[ProjectNum],[ProjectDescription],[Organisation],ProjectStatus,ProjectCategory,[WBSElement],[ObjectNum],[Level]
	,[Currency],[WarehouseCode],ProjectResponsible,Comments,[StartDate],EndDate,EstEndDate, PartitionKey
GO
PRINT N'Creating [stage].[CER_SE_Customer]'
GO
CREATE TABLE [stage].[CER_SE_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[CustomerName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (50) NULL,
[TelephoneNumber2] [nvarchar] (50) NULL,
[Email] [nvarchar] (100) NULL,
[ABCCode] [nchar] (10) NULL,
[City] [nvarchar] (50) NULL,
[ZIP] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNr] [nvarchar] (20) NULL,
[OrganizationNum] [nvarchar] (100) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (2) NULL,
[SalesPersonName] [nvarchar] (30) NULL,
[CustomerType] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_SE_Customer]'
GO

CREATE VIEW [stage].[vCER_SE_Customer] AS
--COMMINT empty field / ADD Trim(company) into CustomerID 12-12-2022 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [Company])) AS CompanyID
	,CONCAT([Company], '#', UPPER(TRIM([CustomerNum]))) AS CustomerCode
	,PartitionKey

	,Company
	,UPPER(TRIM(CustomerNum)) AS CustomerNum
	--,'' AS MainCustomerName
	,[dbo].[ProperCase](CustomerName) AS CustomerName
	,[AddressLine1]
	,[AddressLine2]
	,[AddressLine3]
	,[TelephoneNumber1] AS [TelephoneNum1]
	,[TelephoneNumber2] AS [TelephoneNum2]
	,cast([Email] as NVARCHAR(100)) as [Email]
	,CASE WHEN LEN(TRIM(customer.CountryCode)) = 3 then cc.[Alpha-2 code]
	else IIF(customer.CountryName is null, 'SE', customer.CountryCode) 
	end AS CountryCode
	,CASE 
		WHEN (customer.countryname like 'Sweden' or customer.countryname is null) AND LEFT(AddressLine3, 1) IN ('1','2','3','4','5','6','7','8','9') THEN substring(replace([dbo].[ProperCase](AddressLine3), ' ', ''), 1,5)
		WHEN customer.countryname like 'Sweden' AND AddressLine3 = '' THEN substring(replace([dbo].[ProperCase](AddressLine2), ' ', ''), 1,5)
		ELSE null END AS ZipCode
	,CASE 
		WHEN [City] = ' '	AND LEFT(AddressLine3, 1) IN ('1','2','3','4','5','6','7','8','9') THEN trim(substring(replace([dbo].[ProperCase](AddressLine3),' ',		''), 6, 100))
		WHEN [City] = ' '	AND AddressLine3 = '' THEN trim(substring(replace([dbo].[ProperCase](AddressLine2),' ',		''), 6, 100))
		ELSE [dbo].[ProperCase]([City]) END AS [City]
	,IIF([State]= ' ',null,[State]) AS [State]
	,[District] AS SalesDistrict
	,[dbo].[ProperCase](customer.CountryName) AS CountryName
	--,'' AS Division
	--,'' AS CustomerIndustry
	--,'' AS CustomerSubIndustry
	,[dbo].[ProperCase](TRIM(concat (addressline1+' '+ addressline2, null))) AS AddressLine
	,CONCAT(customer.Countryname
		, + ', ' + CASE 
			WHEN [City] = ' ' AND LEFT(AddressLine3, 1) IN ('1','2','3','4','5','6','7','8','9') THEN trim(substring(replace([dbo].[ProperCase](AddressLine3),' ',		''), 6, 100))
			WHEN [City] = ' ' AND AddressLine3 = '' THEN trim(substring(replace([dbo].[ProperCase](AddressLine2),' ',		''), 6, 100))
			ELSE [dbo].[ProperCase]([City]) END
		, + ', ' + CASE 
			WHEN (customer.countryname like 'Sweden' or customer.countryname is null) AND LEFT(AddressLine3, 1) IN ('1','2','3','4','5','6','7','8','9') THEN substring(replace([dbo].[ProperCase](AddressLine3), ' ', ''), 1, 5)
			WHEN customer.countryname like 'Sweden' AND AddressLine3 = '' THEN substring(replace([dbo].[ProperCase](AddressLine2), ' ', ''), 1,5)
			ELSE null END
		, + ', ' + [dbo].[ProperCase](TRIM(concat (addressline1 +' ' + addressline2, null)))) AS FullAddressLine
	,[dbo].[ProperCase](CustomerGroup) AS CustomerGroup
	,[dbo].[ProperCase](CustomerGroup) AS CustomerSubGroup
	,[SalesRepCode] AS SalesPersonCode
	,[dbo].[ProperCase](SalesPersonName) AS SalesPersonName
	--,'' AS [SalesPersonResponsible]
	,[VATRegNr] AS VATNum
	,OrganizationNum
	,[AccountString] AS AccountNum
	,[InternalExternal]
	,[ABCCode] AS CustomerScore
	,CustomerType
	,GETDATE() AS ValidFrom
	,DATEADD(year,1,GETDATE()) AS ValidTo
FROM [stage].[CER_SE_Customer] as customer
	 LEFT JOIN dbo.CountryCodes as cc
		ON cc.[Alpha-3 code] = customer.CountryCode
GO
PRINT N'Creating [stage].[ARK_CZ_PurchaseOrder]'
GO
CREATE TABLE [stage].[ARK_CZ_PurchaseOrder]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [varchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaseOrderType] [nvarchar] (50) NULL,
[PurchaseOrderDate] [date] NULL,
[OrgReqDelivDate] [date] NULL,
[CommittedDelivDate] [date] NULL,
[ExpDelivDate] [date] NULL,
[ReqDelivDate] [date] NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[SupplierInvoiceNum] [nvarchar] (50) NULL,
[DelivCustomerNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[ReceiveQty] [decimal] (18, 4) NULL,
[InvoiceQty] [decimal] (18, 4) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[PurchaserName] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[ReceivingNum] [nvarchar] (50) NULL,
[DelivTime] [nvarchar] (50) NULL,
[PurchaseChannel] [nvarchar] (50) NULL,
[PORes1] [nvarchar] (50) NULL,
[Res2] [nvarchar] (50) NULL,
[Res3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vARK_CZ_PurchaseOrder]'
GO


CREATE VIEW [stage].[vARK_CZ_PurchaseOrder] AS
--COMMENT EMPTY FIELDS // ADD TRIM() INTO CustomerID,PartID,WarehouseID 2022-12-16 VA
--ADD TRIM() INTO SupplierID 23-01-23
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine))))) AS PurchaseOrderID 
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(PurchaseInvoiceNum))))) AS PurchaseInvoiceID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(DelivCustomerNum))))) AS CustomerID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(DelivCustomerNum))))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum))))) AS SupplierID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(UPPER(SupplierNum)))))) AS SupplierID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM([PartNum]))))) AS PartID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(UPPER([PartNum])))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(WarehouseCode))))) AS WarehouseID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',TRIM([Company]))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Currency])))) AS CurrencyID
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum),'#',TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine))) AS PurchaseOrderCode
	,PartitionKey AS PartitionKey

	,Company AS Company
	,TRIM(PurchaseOrderNum) AS PurchaseOrderNum
	,TRIM(PurchaseOrderLine) AS PurchaseOrderLine
	,TRIM(PurchaseOrderSubLine) AS PurchaseOrderSubLine
	,TRIM(PurchaseOrderType) AS PurchaseOrderType
	--,'' AS PurchaseOrderStatus
	,PurchaseOrderDate
	,OrgReqDelivDate
	,CommittedDelivDate
	--, '' AS ActualDelivDate
	,ExpDelivDate --
	,ReqDelivDate AS ReqDelivDate
	,TRIM(PurchaseInvoiceNum) AS PurchaseInvoiceNum
	,TRIM(UPPER([PartNum])) AS PartNum
	,TRIM(UPPER(SupplierNum)) AS SupplierNum
	--,'' AS SupplierPartNum
	--,'' AS [SupplierInvoiceNum] 
	,TRIM(DelivCustomerNum) AS DelivCustomerNum
	,PartStatus
	,OrderQty		AS PurchaseOrderQty
	,ReceiveQty
	,InvoiceQty
	--,NULL AS MinOrderQty
	,UoM
	,UnitPrice
	,DiscountPercent
	,DiscountAmount
	,0 AS LandedCost
	,ExchangeRate
	,CASE WHEN Currency = '15' THEN 'EUR' WHEN Currency = '2' THEN 'USD' ELSE Currency END AS Currency
	,TRIM(PurchaserName) AS PurchaserName
	,TRIM(WarehouseCode) AS WarehouseCode
	,ReceivingNum
	,DelivTime
	,PurchaseChannel
	--,'' AS Documents
	--,'' AS Comments
	,PORes1
	,Res2 AS PORes2
	,Res3 AS PORes3

	--,CASE WHEN CONVERT(NVARCHAR(50), TRIM([LineType])) like '0' THEN 'Stock Item Line' WHEN CONVERT(NVARCHAR(50), TRIM([LineType])) like '1' THEN 'Non Stock Item Line' ELSE NULL END AS [LineType]
	--,NULL AS TotalMiscChrg
--	--,CONVERT(NVARCHAR(50), ItemType) AS ItemType
--	,'' AS DaysSincePOrder
FROM 
	[stage].[ARK_CZ_PurchaseOrder]
--WHERE PurchaseOrderDate >= DATEADD(year, -1, GETDATE()) --Added this where clause as semi-incremental load functinoality since it doesn't work easily on meta-param table. /SM 2021-10-01	
--GROUP BY
--	PartitionKey, Company, PurchaseOrderNum, PurchaseOrderLine, PurchaseOrderSubLine, SupplierNum, DelivCustomerNum, PurchaseInvoiceNum, PartNum, PurchaseOrderType, DiscountPercent, OrderQty, ReceiveQty, InvoiceQty, ExchangeRate, Currency, PurchaseOrderDate, OrgReqDelivDate, CommittedDelivDate, ExpDelivDate, ReqDelivDate, PurchaserName, ReceivingNum, DelivTime, WarehouseCode, DiscountPercent, DiscountAmount, PurchaseChannel, PORes1, Res2, Res3, PartStatus,  UnitPrice, UoM
GO
PRINT N'Creating [stage].[CER_UK_SalesOrderLog]'
GO
CREATE TABLE [stage].[CER_UK_SalesOrderLog]
(
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[DelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[CurrExchRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (50) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[NeedbyDate] [date] NULL,
[SalesPerson] [nvarchar] (100) NULL,
[ReturnComment] [nvarchar] (500) NULL,
[SalesReturnInvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[CancellationCode] [nvarchar] (50) NULL,
[IndexKey] [nvarchar] (50) NOT NULL,
[PartitionKey] [varchar] (50) NULL,
[TransactionDate] [date] NULL
)
GO
PRINT N'Creating [stage].[vCER_UK_SalesOrderLog]'
GO
CREATE VIEW [stage].[vCER_UK_SalesOrderLog] As
--COMMENT EMPTY FIELD 2022-12-19 // ADD UPPER()TRIM() PartID,WarehouseID INTO 2022-12-20 VA
SELECT 
	
	  CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', IndexKey)))) AS SalesOrderLogID
	  ,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM(Company))) AS CompanyID
	  ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	  ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	  --,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(UPPER(PartNum))))) AS PartID
	  ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	  --,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(UPPER(WarehouseCode))))) AS WarehouseID
	  --,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(UPPER(PartNum)))) AS SalesOrderCode 
	  ,CONVERT(int, replace(convert(date, OrderDate),'-','')) AS SalesOrderDateID   --redundent
	  ,PartitionKey

	  ,[Company]
      ,[CustNum]	AS CustomerNum
      ,[OrderNum]	AS SalesOrderNum
      ,[OrderLine]	AS SalesOrderLine
      ,[OrderSubLine]	AS SalesOrderSubLine
      ,[OrderType]		AS SalesOrderType
	  --,'' AS SalesOrderLogType
      ,[OrderDate]		AS SalesOrderDate
	  ,[TransactionDate]	AS SalesOrderLogDate
--      ,[DelivDate]		AS ExpDelivDate
      ,[InvoiceNum]		AS SalesInvoiceNum
      ,[OrderQty]		AS SalesOrderQty
	  --,''				AS UoM
      ,[UnitPrice]
      ,[UnitCost]
      ,[Currency]
      ,[CurrExchRate]	AS ExchangeRate
      ,[OpenRelease]
      ,[DiscountPercent]
      ,[DiscountAmount]
      ,[PartNum]
	  ,IIF(OrderSubLine = '000000', 'Main', 'Sub' ) AS PartType
--      ,[NeedbyDate]
      ,[SalesPerson]	AS SalesPersonName
	  --,''				AS Department
      ,[ReturnComment]
      ,[SalesReturnInvoiceNum]
      ,[WarehouseCode]
      ,[CancellationCode]
      ,[IndexKey]
	  --,'' AS SORes1
	  --,'' AS SORes2
	  --,'' AS SORes3
	  
  FROM [stage].[CER_UK_SalesOrderLog]
GO
PRINT N'Creating [dm_PT].[fctPurchaseInvoiceDistinct]'
GO



CREATE VIEW [dm_PT].[fctPurchaseInvoiceDistinct] AS
--only for Arkov for test
SELECT 
	convert(bigint, PL.[PurchaseInvoiceID]) AS [PurchaseInvoiceID]
	,convert(bigint, PL.[CompanyID]) AS [CompanyID]
	,convert(bigint, PL.[SupplierID]) AS [SupplierID]
	,SupplierNum
	,MIn(PL.Company) AS Company
FROM 
	[dw].[PurchaseLedger] AS PL
WHERE Company = 'ACZARKOV'
GROUP BY 
	PL.[PurchaseInvoiceID], PL.CompanyID, PL.[SupplierID], SupplierNum
GO
PRINT N'Creating [axbus].[IOW_PL_SOLine]'
GO
CREATE TABLE [axbus].[IOW_PL_SOLine]
(
[PartitionKey] [nvarchar] (50) NULL,
[Company] [nvarchar] (50) NOT NULL,
[InvoiceHandler] [nvarchar] (max) NULL,
[CustomerNum] [nvarchar] (max) NULL,
[PartNum] [nvarchar] (max) NULL,
[PartType] [nvarchar] (max) NULL,
[SalesOrderNum] [nvarchar] (max) NULL,
[SalesOrderLine] [nvarchar] (max) NULL,
[SalesOrderSubLine] [nvarchar] (max) NULL,
[SalesOrderType] [nvarchar] (max) NULL,
[SalesInvoiceNum] [nvarchar] (max) NULL,
[SalesInvoiceLine] [nvarchar] (max) NULL,
[SalesInvoiceType] [nvarchar] (max) NULL,
[SalesInvoiceDate] [nvarchar] (max) NULL,
[ActualDelivDate] [nvarchar] (max) NULL,
[SalesInvoiceQty] [nvarchar] (max) NULL,
[UoM] [nvarchar] (max) NULL,
[UnitPrice] [nvarchar] (max) NULL,
[UnitCost] [nvarchar] (max) NULL,
[DiscountPercent] [nvarchar] (max) NULL,
[DiscountAmount] [nvarchar] (max) NULL,
[CashDiscountOffered] [nvarchar] (max) NULL,
[CashDiscountUsed] [nvarchar] (max) NULL,
[TotalMiscChrg] [nvarchar] (max) NULL,
[VATAmount] [nvarchar] (max) NULL,
[UnitCost2] [nvarchar] (max) NULL,
[Currency] [nvarchar] (max) NULL,
[ExchangeRate] [nvarchar] (max) NULL,
[CreditMemo] [nvarchar] (max) NULL,
[SalesChannel] [nvarchar] (max) NULL,
[Department] [nvarchar] (max) NULL,
[WarehouseCode] [nvarchar] (max) NULL,
[CostBearerNum] [nvarchar] (max) NULL,
[CostUnitNum] [nvarchar] (max) NULL,
[ReturnComment] [nvarchar] (max) NULL,
[ReturnNum] [nvarchar] (max) NULL,
[ProjectNum] [nvarchar] (max) NULL,
[IndexKey] [nvarchar] (max) NULL,
[SIRes1] [nvarchar] (max) NULL,
[SIRes2] [nvarchar] (max) NULL,
[SIRes3] [nvarchar] (max) NULL,
[AddressLine] [nvarchar] (max) NULL,
[ZipCode] [nvarchar] (max) NULL,
[City] [nvarchar] (max) NULL,
[Country] [nvarchar] (max) NULL,
[UnitCost2Curr] [nvarchar] (max) NULL,
[ExchangeRate2] [nvarchar] (max) NULL,
[sysCurrency] [nvarchar] (max) NULL,
[CreatedTimeStamp] [nvarchar] (max) NULL,
[ModifiedTimeStamp] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[vIOW_PL_SOLine]'
GO





CREATE VIEW [stage].[vIOW_PL_SOLine] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustomerNum), '#', TRIM(SalesOrderNum), '#', TRIM(SalesOrderLine), '#', TRIM(PartNum), '#', TRIM(SalesInvoiceNum), '#', TRIM(SalesInvoiceLine))))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SalesOrderNum), '#', TRIM(SalesOrderLine))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustomerNum), '#', TRIM(SalesInvoiceNum))))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SalesOrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustomerNum))))) AS CustomerID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', WarehouseCode)))) AS WarehouseID
	,UPPER(CONCAT(Company, '#', TRIM(CustomerNum), '#', TRIM(SalesOrderNum), '#', TRIM(SalesOrderLine), '#', TRIM(SalesInvoiceNum))) AS SalesOrderCode
	,UPPER(CONVERT(int, IIF([SalesInvoiceDate] is null, '19000101', REPLACE(SalesInvoiceDate, '-', '')))) AS SalesInvoiceDateID
	,UPPER(CONCAT(Company, '#', TRIM(SalesInvoiceNum))) AS SalesInvoiceCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT( Company, '#', ProjectNum) ))) AS ProjectID
	,PartitionKey  --getdate() AS 

	,UPPER(Company) AS Company
	,UPPER(TRIM(CustomerNum)) AS CustomerNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,TRIM(InvoiceHandler) AS SalesPersonName
	,PartType
	,TRIM(SalesOrderNum) AS SalesOrderNum
	,TRIM(SalesOrderLine) AS SalesOrderLine
	,LEFT(TRIM(SalesOrderSubLine), 50) AS SalesOrderSubLine
	,TRIM(SalesOrderType) AS SalesOrderType
	,TRIM(SalesInvoiceNum) AS SalesInvoiceNum 
	,TRIM(SalesInvoiceLine) AS SalesInvoiceLine
	,TRIM(SalesInvoiceType) AS SalesInvoiceType 
	,IIF([SalesInvoiceDate] is null, '1900-01-01', CAST(SalesInvoiceDate AS date)) AS [SalesInvoiceDate]
	,IIF([ActualDelivDate] is null, '1900-01-01', CAST(ActualDelivDate as date)) AS [ActualDelivDate]
	,UoM
	,IIF(SalesInvoiceType = 'Credit Note/Invoice reversal', -1*CONVERT(decimal(18,4),  REPLACE(SalesInvoiceQty, ',', '.')), CONVERT(decimal(18,4),  REPLACE(SalesInvoiceQty, ',', '.'))) AS SalesInvoiceQty --IIF(SalesInvoiceType = 'Credit Note/Invoice reversal', -1*REPLACE(SalesInvoiceQty, ',', '.'),
	,CONVERT(decimal(18,4), REPLACE(UNITPRICE, ',', '.')) AS UnitPrice
	,CONVERT(decimal(18,4), REPLACE(UnitCost, ',', '.')) AS UnitCost
	--,CONVERT(decimal(18,4), (CONVERT(decimal(18,4), REPLACE(UnitCost, ',', '.'))/CONVERT(decimal(18,4), REPLACE(ExchangeRate, ',', '.'))))  AS UnitCost  -- convert to original currency cost
	,CONVERT(decimal(18,4), REPLACE(DiscountPercent, ',', '.')) AS DiscountPercent
	,CONVERT(decimal(18,4), REPLACE(DiscountAmount, ',', '.')) AS DiscountAmount
	,NULL AS TotalMiscChrg -- the differences between UnitCost and Unitcost2, taken in consideration of its currency rate to PLN --CONVERT(decimal(18,4), (CONVERT(decimal(18,4), REPLACE(UnitCost, ',', '.'))/IIF(ExchangeRate2 IS NULL, NULL, CONVERT(decimal(18,4), REPLACE(ExchangeRate2, ',', '.'))) - CONVERT(decimal(18,4), REPLACE(UnitCost, ',', '.'))/CONVERT(decimal(18,4), REPLACE(ExchangeRate, ',', '.'))))*-1
	,NULL AS CashDiscountOffered
	,NULL AS CashDiscountUsed
	,CONVERT(decimal(18,4), REPLACE(VATAmount, ',', '.')) AS VATAmount
	,CONVERT(decimal(18,4), REPLACE([ExchangeRate], ',', '.')) AS [ExchangeRate]--IIF(Currency = 'EUR', CONVERT(decimal(18,4), REPLACE(sysCurrency, ',', '.')), CONVERT(decimal(18,4), REPLACE(ExchangeRate, ',', '.'))) AS ExchangeRate
	,LEFT([Currency], 50) AS [Currency] --CASE WHEN CONVERT(decimal(18,4), REPLACE(ExchangeRate, ',', '.')) = 1 THEN  'PLN'
										--	WHEN UnitCost2Curr = 'EUR' THEN 'EUR'
										--	WHEN Currency IS NULL AND CONVERT(decimal(18,4), REPLACE(ExchangeRate, ',', '.')) > 4 AND sysCurrency = '1.0' THEN 'EUR'
										--	ELSE Currency END AS Currency
	,IIF(TRIM(SalesInvoiceType) = 'Correction Invoice', '1', TRIM(CreditMemo)) AS CreditMemo
	,SalesChannel
	,Department
	,WarehouseCode
	,AddressLine AS DeliveryAddress
	,CostBearerNum
	,CostUnitNum
	,ReturnComment
	,ReturnNum
	,ProjectNum
	,IndexKey
	,UnitCost2Curr AS SIRes1
	,'' AS SIRes2
	,'' AS SIRes3
	,IIF(UnitCost2 IS NULL, NULL, CONVERT(decimal(18,4), REPLACE(UnitCost2, ',', '.'))) AS SIRes4
	,IIF(ExchangeRate2 IS NULL AND UnitCost2Curr = 'EUR', 1, CONVERT(decimal(18,4), REPLACE(ExchangeRate2, ',', '.'))) AS SIRes5 -- previously IIF(ExchangeRate2 IS NULL, NULL,...) | SB 2023-02-10
	,sysCurrency AS SIRes6 --for system currency

FROM axbus.IOW_PL_SOLine
--GROUP BY
--	PartitionKey, Company, CustomerNum, PartNum, PartType, SalesOrderNum, SalesOrderLine, SalesOrderType, SalesInvoiceNum, SALESINVOICETYPE, SALESORDERTYPE, SalesInvoiceDate, UoM, SalesInvoiceQty, DiscountPercent, Currency, ExchangeRate, CreditMemo, VATAmount, ReturnNum, UnitPrice, UnitCost, SalesChannel, Department, WarehouseCode, TotalMiscChrg, SalesOrderSubLine, SalesInvoiceLine, ActualDelivDate, ProjectNum, InvoiceHandler, DiscountAmount, DiscountPercent, UnitCost2, ExchangeRate2, AddressLine, CostBearerNum, CostUnitNum, ReturnComment, IndexKey, UnitCost2Curr,sysCurrency

--raw data has many issues, the above etl is for that the data can pull into dw for further improvement
GO
PRINT N'Creating [dm_ALL].[fctPurchaseOrder]'
GO
CREATE VIEW [dm_ALL].[fctPurchaseOrder] AS

SELECT 
[PurchaseOrderID]
,[PurchaseOrderNumID]
,[PurchaseInvoiceID]
,[CompanyID]
,[SupplierID]
,[CustomerID]
,[PartID]
,[WarehouseID]
,[CurrencyID]
,[PurchaseOrderDateID]
,[PurchaseInvoiceDateID]
,[Company]
,[PurchaseOrderNum]
,[PurchaseOrderLine]
,[PurchaseOrderSubLine]
,[PurchaseOrderType]
,[PurchaseOrderDate]
,[PurchaseOrderStatus]
,[OrgReqDelivDate]
,[CommittedDelivDate]
,[CommittedShipDate]
,[ActualDelivDate]
,[ReqDelivDate]
,[PurchaseInvoiceNum]
,[PartNum]
,[SupplierNum]
,[SupplierPartNum]
,[SupplierInvoiceNum]
,[DelivCustomerNum]
,[PartStatus]
,[OrderQty]
,[ReceiveQty]
,[InvoiceQty]
,[MinOrderQty]
,[UoM]
,[UnitPrice]
,[DiscountPercent]
,[DiscountAmount]
,[ExchangeRate]
,[Currency]
,[PurchaserName]
,[WarehouseCode]
,[ReceivingNum]
,[DelivTime]
,[PurchaseChannel]
,[Documents]
,[Comments]
,[PORes1]
,[PORes2]
,[PORes3]
,[InvoiceStatus]
,[DaysSinceOrder]
,[OrgCommittedDelivDate]
,[IsOrderClosed]

FROM [dm].[FactPurchaseOrder]
GO
PRINT N'Creating [stage].[CER_NO_PurchaseLedger]'
GO
CREATE TABLE [stage].[CER_NO_PurchaseLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[CompanySupplier] [nvarchar] (100) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[SupplierInvoiceNum] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[DaysPastDue] [int] NULL,
[FiscalYear] [nchar] (4) NULL,
[FiscalPeriod] [nchar] (2) NULL,
[AgingPeriod] [nvarchar] (50) NULL,
[AgingSort] [int] NULL,
[Currency] [nchar] (10) NULL,
[ExchangeRate] [decimal] (18, 8) NULL,
[VATCode] [nchar] (4) NULL,
[VATCodeDesc] [nvarchar] (max) NULL,
[LocalAmount] [decimal] (18, 4) NULL,
[LocalRemainingAmount] [decimal] (18, 4) NULL,
[OriginalAmount] [decimal] (18, 4) NULL,
[RemainingAmount] [decimal] (18, 4) NULL,
[LinktoOriginalInvoice] [nvarchar] (500) NULL
)
GO
PRINT N'Creating [stage].[vCER_NO_PurchaseLedger]'
GO










CREATE VIEW [stage].[vCER_NO_PurchaseLedger] AS

SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company, '#', SupplierNum, '#', InvoiceNum))) AS PurchaseLedgerID
	,CONCAT(Company,'#',SupplierNum, '#', InvoiceNum) AS PurchaseLedgerCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',Company)) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',InvoiceNum))) AS PurchaseInvoiceID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(''))))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM(Currency)))) AS CurrencyID --Redundant?
	,CONVERT(int, replace(convert(date,InvoiceDate),'-','')) AS PurchaseInvoiceDateID  --Redundant?
	,PartitionKey

	,Company
	,SupplierNum
	,CompanySupplier
	,'' AS PurchaseOrderNum
	,InvoiceNum	AS PurchaseInvoiceNum
	,SupplierInvoiceNum
	,CONVERT(date, [InvoiceDate]) AS [PurchaseInvoiceDate]
	,CONVERT(date, DueDate) AS PurchaseDueDate
	,CONVERT(date, LastPaymentDate) AS PurchaseLastPaymentDate
	,[OriginalAmount]	AS InvoiceAmount
	,[OriginalAmount] - RemainingAmount AS PaidInvoiceAmount
	,[RemainingAmount]	AS RemainingInvoiceAmount
	,DaysPastDue
	,[FiscalYear]
	,[FiscalPeriod]
	,[AgingPeriod]
	,AgingSort
	,[Currency]
	,ExchangeRate
	,0 AS VATAmount
	,[VATCode]
	,'' AS PayToName
	,'' AS PayToCity
	,'' AS PayToContact
	,'' AS PaymentTerms
	,'' AS PrePaymentNum
	,'' AS LastPaymentNum
	,[VATCodeDesc]
	,[LocalAmount]
	,[LocalRemainingAmount]
	,[LinktoOriginalInvoice]
	,'' AS PLRes1
	,'' AS PLRes2
	,'' AS PlRes3
	,'1900-01-01' AS AccountingDate
FROM 
	stage.CER_NO_PurchaseLedger
GROUP BY
	PartitionKey, Company, SupplierNum, CompanySupplier, ExchangeRate, InvoiceNum, SupplierInvoiceNum, [InvoiceDate], DueDate, LastPaymentDate, [Currency], [LocalAmount], [LocalRemainingAmount], [OriginalAmount], [RemainingAmount], [LinktoOriginalInvoice],[FiscalYear], [FiscalPeriod],[AgingPeriod], [VATCode], [VATCodeDesc], DaysPastDue, AgingSort
GO
PRINT N'Creating [stage].[NOM_FI_SalesLedger]'
GO
CREATE TABLE [stage].[NOM_FI_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (25) NULL,
[InvoiceDate] [datetime] NULL,
[DueDate] [datetime] NULL,
[LastPaymentDate] [datetime] NULL
)
GO
PRINT N'Creating [stage].[vNOM_FI_SalesLedger]'
GO
CREATE VIEW [stage].[vNOM_FI_SalesLedger] AS
--COMMENT EMPTY FIELDS 2022-12-15 VA
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#', TRIM(CustNum), '#', TRIM(InvoiceNum))))) AS SalesLedgerID,
	CONVERT([binary](32),HASHBYTES('SHA2_256', UPPER(TRIM(Company)))) AS CompanyID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustNum))))) AS CustomerID,
	UPPER(CONCAT(TRIM(Company),'#', TRIM(CustNum), '#', TRIM(InvoiceNum))) AS SalesLedgerCode,
	PartitionKey,

	UPPER(TRIM(Company)) AS Company,
	UPPER(TRIM(CustNum)) as CustomerNum,
	UPPER(TRIM(InvoiceNum)) as SalesInvoiceNum,
	CONVERT(DATE, InvoiceDate) AS SalesInvoiceDate,
	CONVERT(date, DueDate) AS SalesDueDate,
	CONVERT(date, LastPaymentDate) AS SalesLastPaymentDate,
	--0 AS InvoiceAmount,
	--0 AS RemainingInvoiceAmount,
	--0 AS ExchangeRate,
	--'' AS Currency,
	--0 AS VATAmount,
	--'' AS VATCode,
	--'' AS PayToName,
	--'' AS PayToCity,
	--'' AS PayToContact,
	--'' AS PaymentTerms,
	--'' AS SLRes1,
	--'' AS SLRes2,
	--'' AS SLRes3
	--,NULL			AS PaidInvoiceAmount
	'1900-01-01' AS AccountingDate
	--,NULL AS AgingPeriod
	--,NULL AS AgingSort
	--,NULL AS VATCodeDesc
	--,NULL AS LinkToOriginalInvoice
FROM 
	stage.NOM_FI_SalesLedger
GO
PRINT N'Creating [stage].[ATZ_UK_Customer]'
GO
CREATE TABLE [stage].[ATZ_UK_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[CustomerName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[ABCCode] [nchar] (10) NULL,
[City] [nvarchar] (50) NULL,
[ZIP] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNr] [nvarchar] (20) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (2) NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[CustomerABC] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vATZ_UK_Customer]'
GO
CREATE VIEW [stage].[vATZ_UK_Customer] AS
--COMMENT EMPTY FIELDS // ADD UPPER() TRIM() INTO CustomerID 2022-12-27 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID
	--CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(CustomerNum)))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',[Company])) AS CompanyID
	,CONCAT([Company],'#',TRIM([CustomerNum])) AS CustomerCode
	,PartitionKey

	,Company
	,TRIM(CustomerNum) AS [CustomerNum]
	--,'' AS MainCustomerName
	,[dbo].[ProperCase](CustomerName) AS  [CustomerName]
	,[AddressLine1]
	,[AddressLine2]
	,[AddressLine3]
	--,'' AS [TelephoneNum1]
	--,'' AS [TelephoneNum2]
	--,'' AS [Email]
	,[ZIP] AS [ZipCode]
	,CASE WHEN [City] = ' '	AND LEFT(AddressLine3, 1) IN ('1','2','3','4','5','6','7','8','9') THEN trim(substring(replace([dbo].[ProperCase](AddressLine3),' ',		''), 6, 100)) ELSE [dbo].[ProperCase]([City]) end AS [City]
	,IIF([State]= ' ',null,[State]) AS [State]
	,[District]	AS SalesDistrict
	,IIF(CountryCode = 'EL', 'GR', CountryCode) AS CountryCode
	,[dbo].[ProperCase](CountryName) AS [CountryName]
	--,'' AS Division
	--,'' AS CustomerIndustry
	--,'' AS CustomerSubIndustry
	,[AddressLine1] AS [AddressLine]
	,CONCAT(Countryname, + ',  ' + trim([City]), + ',  ' + TRIM([Zip]), + ',  ' + trim(addressline1)) AS [FullAddressLine]
	,[dbo].[ProperCase](CustomerGroup) AS [CustomerGroup]
	,[dbo].[ProperCase](CustomerGroup) AS [CustomerSubGroup]
	,[SalesRepCode]	AS SalesPersonCode
	,[dbo].[ProperCase](SalesPersonName) AS [SalesPersonName]
	--,'' AS [SalesPersonResponsible]
	,[VATRegNr]		AS VATNum
	--,'' AS OrganizationNum
	,[AccountString]	AS AccountNum
	,[InternalExternal]
	,[CustomerABC]	AS CustomerScore
	--,'' AS [CustomerType]
	,GETDATE() AS [ValidFrom]
	,DATEADD(year,1,GETDATE()) AS [ValidTo]
FROM [stage].[ATZ_UK_Customer]
GO
PRINT N'Creating [stage].[LEX_FR_Part]'
GO
CREATE TABLE [stage].[LEX_FR_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartName] [nvarchar] (50) NULL,
[PartDescription] [nvarchar] (max) NULL,
[PartDescription2] [nvarchar] (max) NULL,
[PartDescription3] [nvarchar] (max) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[ProductGroup2] [nvarchar] (50) NULL,
[ProductGroup3] [nvarchar] (50) NULL,
[ProductGroup4] [nvarchar] (50) NULL,
[Brand] [nvarchar] (50) NULL,
[CommodityCode] [nvarchar] (50) NULL,
[PartNumReplacement] [nvarchar] (50) NULL,
[CountryOfOrigin] [nvarchar] (50) NULL,
[NetWeight] [decimal] (18, 4) NULL,
[Volume] [decimal] (18, 4) NULL,
[Material] [nvarchar] (50) NULL,
[Barcode] [nvarchar] (50) NULL,
[StartDate] [date] NULL,
[EndDate] [date] NULL,
[TEST] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vLEX_FR_Part]'
GO
CREATE VIEW [stage].[vLEX_FR_Part] AS
--COMMENT EMPTY FIELDS / ADD TRIM()UPPER() INTO PartID 2022-12-13 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([PartNum]))))) AS PartID
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', TRIM([PartNum])))) AS PartID
	,CONCAT([Company], '#', TRIM([PartNum])) AS PartCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [Company])) AS CompanyID
	,PartitionKey

	,[Company]
	,TRIM([PartNum]) AS [PartNum]
	,[PartName]
	,[PartDescription]
	,[PartDescription2]
	,[PartDescription3]
	--,NULL AS MainSupplier
	--,NULL AS AlternativeSupplier
	,[ProductGroup]
	,[ProductGroup2]
	,[ProductGroup3]
	,[ProductGroup4]
	,[Brand]
	,[CommodityCode]
	--,'' AS [PartReplacementNum]
	--,'' AS [PartStatus]
	,[CountryOfOrigin]
	,[NetWeight]
	--,'' AS [UoM]
	,[Material]
	,[Barcode]
	--,0 AS [ReorderLevel]
	--,'' AS [PartResponsible]
	,[StartDate]
	,[EndDate]
FROM [stage].[LEX_FR_Part]
GO
PRINT N'Creating [stage].[FOR_SE_Account]'
GO
CREATE TABLE [stage].[FOR_SE_Account]
(
[PartitionKey] [nvarchar] (50) NULL,
[Company] [nvarchar] (50) NULL,
[Account] [nvarchar] (80) NULL,
[AccountNum] [nvarchar] (50) NULL,
[AccountName] [nvarchar] (50) NULL,
[AccountStatus] [nvarchar] (50) NULL,
[AccountType] [nvarchar] (50) NULL,
[AccountType2] [nvarchar] (50) NULL,
[AccountType3] [nvarchar] (50) NULL,
[AccountType4] [nvarchar] (50) NULL,
[AccountType5] [nvarchar] (50) NULL,
[AccountGroupNum] [nvarchar] (50) NULL,
[AccountGroupName] [nvarchar] (50) NULL,
[AccountGroup] [nvarchar] (50) NULL,
[Statement] [nvarchar] (50) NULL,
[StatementNum] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vFOR_SE_Account]'
GO

-- Good-to-know:
-- DESCRIBE (AND DATE) ANY CHANGES TO STANDARD SCRIPT HERE.

CREATE VIEW [stage].[vFOR_SE_Account] AS
SELECT

--------------------------------------------- Keys/ IDs ---------------------------------------------
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company, '#', [AccountNum]))) AS AccountID,
	CONCAT(Company, '#', [AccountNum], '#', [AccountName]) AS AccountCode,
	CONVERT([binary](32), HASHBYTES('SHA2_256',Company)) AS CompanyID,
	PartitionKey,

--------------------------------------------- Regular Fields ---------------------------------------------
---Mandatory Fields ---
	Company,
	[AccountNum],
	[AccountName],
	NULL AS [AccountName2],
	[Account],
	[AccountGroupNum],
	IIF(AccountType = 'B', '1', '') AS BalanceAccount,
	'' AS TransactionAccount,
	IIF([AccountType2] = 'Assets', '1', '') AS Assets,
	IIF([AccountNum] = '780700', '1', '') AS Amortization,
	IIF([AccountType2] = 'Cost', '1', '') AS Costs,
	IIF([AccountType2] = 'Liabilities and Equity', '1', '') AS LiabilitiesAndEquity,
	IIF([AccountType2] = 'Revenue', '1', '') AS Revenue,
	IIF([AccountNum] between '140000' AND '199999', '1', '') AS CurrentAssets,
	IIF([AccountNum] between '240000' AND '259999', '1', '') AS CurrentLiabilities,
--	IIF([AccountGroupNum] = '78', '1', '') AS Deprecation,
	IIF([AccountNum] BETWEEN '780000' AND '780610' OR [AccountNum] = '781000', '1', '') AS Deprecation,
	IIF([AccountNum] between '200000' AND '219999', '1', '') AS Equity,
	IIF([AccountNum] between '150000' AND '179999', '1', '') AS AccountReceivables,
	IIF([AccountNum] between '190000' AND '199999', '1', '') AS CashAndEquivalents,
	IIF([AccountNum] between '820000' AND '840000', '1', '') AS Interest,
	IIF([AccountNum] between '220000' AND '299999', '1', '') AS Liability,
	IIF([AccountNum] between '890000' AND '893999', '1', '') AS Tax,
	IIF([Statement] = 'Materials', '1', '') AS Materials,
	IIF([Statement] = 'Expenses', '1', '') AS Expenses,
	CASE 
	     WHEN [AccountType] = 'B' THEN 'B'
		 WHEN [AccountType] = 'I' THEN 'R'
		 ELSE [AccountType]
      END as [AccountType],
	
---Valuable Fields ---
	[AccountGroupName],
	[Statement],
	[AccountStatus],

--- Good-to-have Fields ---
	[AccountType2],
	[AccountType3],
	[AccountType4],
	[AccountType5],
	'' AS AccountType6,
	'' AS AccountType7,
	'' AS AccountType8,
	'' AS AccountType9,
	'' AS AccountType10,
	[AccountGroup],
	NULL AS [AccountGroup2],
	NULL AS [AccountGroup3],
	[StatementNum],
	

--------------------------------------------- Meta Data ---------------------------------------------
--,CONVERT(date, ModifiedTimeStamp) AS ModifiedTimeStamp
--,CONVERT(date, CreatedTimeStamp) AS CreatedTimeStamp
--,TRIM(IsActiveRecord) AS IsActiveRecord
--------------------------------------------- Extra Fields ---------------------------------------------
UPPER(TRIM('')) AS AccRes1,
UPPER(TRIM('')) AS AccRes2,
UPPER(TRIM('')) AS AccRes3

FROM 
	stage.FOR_SE_Account  -- from the static stage.fncCNO_Account which is directly imported from Excel file, 20210517 /DZ
GO
PRINT N'Creating [dm_PT].[fctSalesInvoice]'
GO


CREATE VIEW [dm_PT].[fctSalesInvoice] AS

SELECT 
 si.[SalesInvoiceID]
,si.[SalesOrderID]
,si.[SalesOrderNumID]
,si.[CustomerID]
,si.[CompanyID]
,si.[PartID]
,si.[WarehouseID]
,si.[SalesPersonNameID]
,si.[DepartmentID]
,si.[Company]
,si.[SalesInvoiceCode]
,si.[SalesInvoiceDateID]
,si.[ProjectID]
,si.[SalesPersonName]
,si.[CustomerNum]
,si.[PartNum]
,si.[PartType]
,si.[SalesOrderNum]
,si.[SalesOrderLine]
,si.[SalesOrderSubLine]
,si.[SalesOrderType]
,si.[SalesInvoiceNum]
,si.[SalesInvoiceLine]
,si.[SalesInvoiceType]
,si.[SalesInvoiceDate]
,si.[ActualDelivDate]
,si.[SalesInvoiceQty]
,si.[UoM]
,si.[UnitPrice]
,si.[UnitCost]
,si.[DiscountPercent]
,si.[DiscountAmount]
,si.[TotalMiscChrg]
,si.[Currency]
,si.[ExchangeRate]
,si.[VATAmount]
,si.[CreditMemo]
,si.[Department]
,si.[ProjectNum]
,si.[WarehouseCode]
,si.[CostBearerNum]
,si.[CostUnitNum]
,si.[ReturnComment]
,si.[ReturnNum]
,si.[OrderHandler]
,si.[SalesChannel]
,si.[NeedbyDate]
,si.[ExpDelivDate]
,si.[SalesOrderCode]
,si.[SalesOrderDateID]
,si.[SalesOrderDate]
,si.[ConfirmedDelivDate]
,si.[PartStatus]
,si.[AxInterSalesChannel]
,si.[DueDate]
,si.[LastPaymentDate]
,si.[SalesInvoiceStatus]
,si.[CashDiscountOffered]
,si.[CashDiscountUsed]
,si.[IsUpdatingStock]
,si.[SIRes1]
,si.[SIRes2]
,si.[SIRes3]
,si.[SIRes4]
,si.[SIRes5]
,si.[SIRes6]
FROM dm.FactSalesInvoice si
LEFT JOIN dbo.Company com ON si.Company = com.Company
WHERE com.BusinessArea = 'Power Transmission Solutions' AND com.[Status] = 'Active'


--WHERE [Company] in ('ACZARKOV', 'AcornUK', 'BSIBELL', 'JDKJENSS', 'JDKKALTE', 'JFIJENSS', 'MNLMAK', 'JNOJENSS', 'NORNO', 'JSEJENSS', 'SSWSE', 'NomoSE', 'NomoDK', 'NomoFI', 'NomoNo', 'PASSEROT', 'SKSSCOFI', 'SCOFI', 'SMKFI', 'SNLSPRUI', 'SPRUITNL', 'SVESE', 'SPRUITNL')  -- The PT basket
GO
PRINT N'Creating [stage].[CER_LT_Part]'
GO
CREATE TABLE [stage].[CER_LT_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartDescription] [nvarchar] (max) NULL,
[PartDescription2] [nvarchar] (max) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[ProductGroup2] [nvarchar] (50) NULL,
[ProductGroup3] [nvarchar] (50) NULL,
[ProductGroup4] [nvarchar] (50) NULL,
[CommodityCode] [nvarchar] (50) NULL,
[CountryOfOrigin] [nvarchar] (50) NULL,
[NetWeight] [decimal] (18, 4) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[ReorderLevel] [decimal] (18, 4) NULL,
[EAN] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_LT_Part]'
GO
CREATE VIEW [stage].[vCER_LT_Part] AS
--COMMENT EMPTY FIELDS // ADD UPPER()TRIM() INTO PartID 2022-12-14 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM([PartNum]))))) AS PartID
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company,'#',TRIM([PartNum])))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',Company)) AS CompanyID
	,CONCAT(Company,'#',[PartNum]) AS PartCode
	,PartitionKey

	,Company
	,TRIM([PartNum]) AS [PartNum]
	--,'' AS [PartName]
	,[PartDescription]
	,[PartDescription2]
	--,'' AS [PartDescription3]
	--,NULL AS MainSupplier
	--,NULL AS AlternativeSupplier
	,[ProductGroup]
	,[ProductGroup2]
	,[ProductGroup3]
	--,'' AS [ProductGroup4]
	--,'' AS [Brand]
	,[CommodityCode]
	--,'' PartReplacementNum
	--,'' AS PartStatus
	,[CountryOfOrigin]
	,[NetWeight]
	--,'' AS UoM
	--,'' AS [Material]
	--,'' AS [Barcode]
	,MAX([ReorderLevel]) AS [ReOrderLevel]
	--,'' AS PartResponsible
	--,'' AS [StartDate]
	--,'' AS [EndDate]
	--,0 AS [MinOrderQty]
	,MAX([SupplierCode]) AS [SupplierCode]
FROM 
	[stage].[CER_LT_Part]
GROUP BY
	PartitionKey, Company, [PartNum], [PartDescription], [PartDescription2], [ProductGroup], [ProductGroup2], [ProductGroup3], [CommodityCode], [CountryOfOrigin], [NetWeight] --, [ReorderLevel], [MinOrderQty], [SupplierCode]
GO
PRINT N'Creating [dm_ALL].[fctPurchaseLedger]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [dm_ALL].[fctPurchaseLedger]
	AS 

SELECT 
 [PurchaseLedgerID]
,[Company]
,[SupplierNum]
,[PurchaseOrderNum]
,[PurchaseInvoiceNum]
,[PurchaseInvoiceDate]
,[PurchaseDueDate]
,[PurchaseLastPaymentDate]
,[InvoiceAmount]
,[ExchangeRate]
,[Currency]
,[VATAmount]
,[VATCode]
,[PayToName]
,[PayToCity]
,[PayToContact]
,[PaymentTerms]
,[PrePaymentNum]
,[LastPaymentNum]
,[PLRes1]
,[PLRes2]
,[PLRes3]
,[PurchaseLedgerCode]
,[CompanyID]
,[SupplierID]
,[PurchaseInvoiceID]
,[PurchaseOrderNumID]
,[CurrencyID]
,[PurchaseInvoiceDateID]
,[PartitionKey]
,[PaidInvoiceAmount]
,[RemainingInvoiceAmount]
,[AccountingDate]
,[AgingPeriod]
,[AgingSort]
,[VATCodeDesc]
,[LinkToOriginalInvoice]
  FROM [dm].[FactPurchaseLedger]
GO
PRINT N'Creating [stage].[JEN_SK_OLine]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[JEN_SK_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderRelNum] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[ERPOrderStatus] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[NeedbyDate] [date] NULL,
[DelivDate] [date] NULL,
[ConfirmedDelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[SumUnitCost] [decimal] (18, 4) NULL,
[SumUnitPrice] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[CurrExchRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (1) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[Site] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[SalesPerson] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (500) NULL,
[SalesReturnOrderNum] [nvarchar] (50) NULL,
[SalesReturnInvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vJEN_SK_OLine]'
GO
CREATE VIEW [stage].[vJEN_SK_OLine] AS
--COMMENT empty fields // ADD UPPER()TRIM() INTO PartID,CustomerID 2022-12-13 VA
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',OrderNum,'#',OrderLine,'#',OrderSubLine,'#',OrderRelNum,'#',InvoiceNum,'#',SalesReturnOrderNum,'#',SalesReturnInvoiceNum))) AS SalesOrderID -- ext OrderRelNum
	,CONVERT([binary](32),HASHBYTES('SHA2_256',Company)) AS CompanyID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) )))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) )))) AS PartID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID 
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(WarehouseCode))))) AS WareHouseID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(WarehouseCode)))) AS WareHouseID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(OrderNum)))) AS SalesOrderNumID
	,CONCAT(Company,'#',OrderNum,'#',OrderLine,'#',OrderSubLine, '#',InvoiceNum) AS SalesOrderCode
	,CONVERT(int, replace(convert(date, OrderDate),'-','')) AS SalesOrderDateID   --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey 

	,Company 
	,TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ) AS CustomerNum 
	,OrderNum		AS SalesOrderNum
	,OrderLine		AS SalesOrderLine
	,OrderSubLine	AS SalesOrderSubLine
	,OrderType		AS SalesOrderType
	,ERPOrderStatus	AS SalesOrderCategory	--Added ERPOrderStatus here because SalesOrderCategory is unused field for JENS S.
	,OrderRelNum	AS SalesOrderRelNum
	,OrderDate		AS SalesOrderDate
	,NeedbyDate
	,DelivDate		AS ExpDelivDate
	,CAST('1900-01-01' AS date) AS ActualDelivDate
	,ConfirmedDelivDate
	,InvoiceNum		AS SalesInvoiceNum
	,OrderQty		AS SalesOrderQty
	,DelivQty
	,RemainingQty
	--,NULL AS SalesInvoiceQty
	--,''				AS UoM
	,UnitPrice
	,UnitCost
	,CurrencyCode	AS Currency
	,CurrExchRate	AS ExchangeRate
	,OpenRelease
	,DiscountAmount
	,DiscountPercent
	,TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) ) AS PartNum
	--,''				AS PartType
	--,'0'				AS PartStatus
	,SalesPerson	AS SalesPersonName
	,TRIM(WarehouseCode) AS WarehouseCode
	,CASE WHEN TRIM(SalesPerson) = 'EDI - Digital Order' THEN 'EDI'
		ELSE 'Normal Order Handling' END AS SalesChannel
	,CASE WHEN TRIM(SalesPerson) = 'EDI - Digital Order' THEN 'EDI'
		ELSE 'Normal Order Handling' END AS AxInterSalesChannel
	--,'' AS Department
	--,'' AS ProjectNum
	--,'' AS IndexKey
	--,'0' AS Cancellation
	--,'' AS SORes1
	--,'' AS SORes2
	--,'' AS SORes3
	,ReturnComment
	,SalesReturnOrderNum
	,SalesReturnInvoiceNum
	--,NULL AS [TotalMiscChrg]
FROM stage.JEN_SK_OLine
GO
PRINT N'Creating [stage].[FOR_PL_PurchaseOrder]'
GO
CREATE TABLE [stage].[FOR_PL_PurchaseOrder]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [varchar] (20) NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderDate] [nvarchar] (50) NULL,
[IsClosed] [nvarchar] (20) NULL,
[OrgReqDelivDate] [nvarchar] (50) NULL,
[OrgCommittedShipDate] [nvarchar] (50) NULL,
[CommittedDelivDate] [nvarchar] (50) NULL,
[OrgCommittedDelivDate] [nvarchar] (50) NULL,
[CommittedShipDate] [nvarchar] (50) NULL,
[ActualDelivDate] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (100) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[SupplierPartNum] [nvarchar] (100) NULL,
[SupplierInvoiceNum] [nvarchar] (200) NULL,
[DelivCustomerNum] [nvarchar] (50) NULL,
[PurchaseOrderQty] [nvarchar] (50) NULL,
[ReceiveQty] [nvarchar] (50) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [nvarchar] (50) NULL,
[DiscountPercent] [nvarchar] (50) NULL,
[DiscountAmount] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [nvarchar] (50) NULL,
[PurchaserName] [nvarchar] (310) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[ReceivingNum] [nvarchar] (200) NULL,
[Comments] [nvarchar] (600) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL,
[PurchaseOrderType] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaseOrderStatus] [nvarchar] (25) NULL
)
GO
PRINT N'Creating [stage].[vFOR_PL_PurchaseOrder]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vFOR_PL_PurchaseOrder]
	AS 
	
SELECT 
--------------------------------------------- Keys IDs ---------------------------------------------

CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum),'#',TRIM(PurchaseOrderLine),'#',TRIM(PurchaseOrderSubline))))) AS PurchaseOrderID
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM('PurchaseInvoiceNum'))))) AS PurchaseInvoiceID -- Created a fake ID in order to avoid breaking the model due to null values in a field that is part of a relationship
,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(WarehouseCode))))) AS WarehouseID
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(TRIM(Currency)))) AS CurrencyID
,UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum),'#',TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine))) AS PurchaseOrderCode
, PartitionKey
--------------------------------------------- Regular Fields ---------------------------------------------
,UPPER(TRIM(Company)) AS Company
,UPPER(TRIM(PurchaseOrderNum)) AS PurchaseOrderNum
,UPPER(TRIM(PurchaseOrderLine)) AS PurchaseOrderLine
,UPPER(TRIM(PurchaseOrderSubline)) AS PurchaseOrderSubline
,UPPER(TRIM(PartNum)) AS PartNum
,UPPER(TRIM(SupplierNum)) AS SupplierNum
,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
,iif(trim(PurchaseOrderDate) = '' or PurchaseOrderDate is null,cast('1900-01-01' as date), PurchaseOrderDate) as PurchaseOrderDate
,CONVERT(decimal(18,4), Replace(PurchaseOrderQty, ',', '.')) AS PurchaseOrderQty
,CONVERT(decimal(18,4), Replace(ReceiveQty, ',', '.')) AS ReceiveQty
--,CONVERT(decimal(18,4), Replace(qty, ',', '.')) AS InvoiceQty
,CONVERT(decimal(18,4), Replace(UnitPrice, ',', '.')) as UnitPrice
,CONVERT(decimal(18,4), Replace(ExchangeRate, ',', '.')) AS ExchangeRate
, Currency
, cast(IsClosed as bit) as IsClosed 

,cast(ActualDelivDate as date) as ActualDelivDate
,cast(CommittedDelivDate		as date) as CommittedDelivDate
,cast(OrgCommittedDelivDate		as date) as OrgCommittedDelivDate
,cast(CommittedShipDate			as date) as CommittedShipDate
,cast(OrgCommittedShipDate		as date) as OrgCommittedShipDate
,cast(OrgReqDelivDate			as date) as OrgReqDelivDate
,cast(DiscountAmount  as decimal(18,4)) as DiscountAmount
,cast(DiscountPercent as decimal(18,4)) as DiscountPercent

,PurchaserName
,DelivCustomerNum
,SupplierPartNum
,SupplierInvoiceNum
,UoM
,ReceivingNum
,Comments
,[PurchaseOrderType]
,PurchaseOrderStatus



FROM stage.FOR_PL_PurchaseOrder
GO
PRINT N'Creating [stage].[MAK_NL_OLine]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[MAK_NL_OLine]
(
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NULL,
[SalesOrderNum] [nvarchar] (50) NULL,
[SalesOrderLine] [nvarchar] (50) NULL,
[SalesOrderType] [nvarchar] (50) NULL,
[SalesOrderDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[NeedbyDate] [date] NULL,
[ExpDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[CommittedDelivDate] [date] NULL,
[SalesOrderQty] [decimal] (18, 8) NULL,
[DelivQty] [decimal] (18, 8) NULL,
[RemainingQty] [decimal] (18, 8) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 8) NULL,
[UnitCost] [decimal] (18, 8) NULL,
[Currency] [nvarchar] (50) NULL,
[IsOrderClosed] [nvarchar] (50) NULL,
[DiscountPercent] [decimal] (18, 8) NULL,
[DiscountAmountCalc] [decimal] (18, 8) NULL,
[NetLineAmount] [decimal] (18, 8) NULL,
[PartNum] [nvarchar] (100) NULL,
[PartStatus] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[ReturnComment] [nvarchar] (max) NULL,
[SalesReturnInvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Ordersort] [nvarchar] (50) NULL,
[CustomerOrderNum] [nvarchar] (50) NULL,
[CustomerItemID] [nvarchar] (50) NULL,
[DCPAGMP] [nvarchar] (100) NULL,
[MainItem] [nvarchar] (100) NULL,
[PartitionKey] [nvarchar] (50) NULL,
[Cancellation] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vMAK_NL_OLine]'
GO


CREATE VIEW [stage].[vMAK_NL_OLine] AS
--COMMENT empty field / ADD UPPER() TRIM() INTO PartID/CustomerID 13-12-2022 VA
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SalesOrderNum),'#',TRIM(SalesOrderLine), '#', TRIM(PartNum) )))) AS SalesOrderID
	,CONCAT(TRIM(Company),'#',TRIM(SalesOrderNum),'#',TRIM(SalesOrderLine)) as SalesOrderCode --'#',OrderSubLine,
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) as CustomerID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM(Company),'#',TRIM(CustomerNum)))) as CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) as CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID 
	--,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT(Company, '#', TRIM(PartNum)))) AS PartID 
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',WarehouseCode))) AS WareHouseID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',upper(CONCAT(trim(Company),'#',trim(WarehouseCode))))) AS WareHouseID -- TO 2022-12-13
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(SalesOrderNum)))) AS SalesOrderNumID
	,YEAR(SalesOrderDate)*10000+MONTH(SalesOrderDate)*100+DAY(SalesOrderDate) AS SalesOrderDateID  
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey 

	,UPPER(TRIM(Company)) AS Company
	,UPPER(TRIM(CustomerNum)) AS CustomerNum 
	,TRIM(SalesOrderNum) AS SalesOrderNum
	,TRIM(SalesOrderLine) AS SalesOrderLine
	--,'' AS SalesOrderSubLine
	,SalesOrderType AS SalesOrderType
	--,'' SalesOrderCategory
	--,'' AS SalesOrderRelNum
	,SalesOrderDate	
	,NeedbyDate
	,ExpDelivDate
	,ActualDelivDate
	,CommittedDelivDate AS ConfirmedDelivDate
	,InvoiceNum AS SalesInvoiceNum
	,SalesOrderQty
	,DelivQty
	,RemainingQty
	--,NULL AS SalesInvoiceQty
	,UoM
	,UnitPrice/100.0 AS UnitPrice
	,UnitCost/100.0 AS UnitCost
	,Currency
	,1 AS ExchangeRate
	,IIF(IsOrderClosed = 1, 0, 1) AS OpenRelease --original logica/values
	,IIF(IsOrderClosed = 1, 1, 0) AS IsOrderClosed --amended logica/values & naming
--	,COALESCE( UnitPrice/100.0 *  SalesOrderQty * DiscountPercent/100 ,0) AS DiscountAmount
	,DiscountAmountCalc/100 AS DiscountAmount
	,COALESCE(DiscountAmountCalc/100/NULLIF((UnitPrice/100.0 * SalesOrderQty),0),0)	AS DiscountPercent
	,UPPER(TRIM(PartNum)) AS PartNum
	,CASE WHEN TRIM(SalesOrderLine) = '0' THEN 'Main Part' ELSE 'Sub Part' END  AS PartType
	,PartStatus
	,[dbo].[ProperCase](SalesPersonName) AS SalesPersonName
	,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
	--,'' AS SalesChannel
	,IIF(SalesOrderNum LIKE 'TNT%', 'EDI', 'Normal Order Handling') AS AxInterSalesChannel
	--,'' AS Department
	--,'' AS ProjectNum
	--,'' AS IndexKey
	,[Cancellation]
	--,IIF([Cancellation] = '1', 1, 0) AS is_deleted
	--,'' AS SORes1
	--,'' AS SORes2
	--,'' AS SORes3

	,ReturnComment
	--,'' AS SalesReturnOrderNum
	,SalesReturnInvoiceNum
	--,NULL AS [TotalMiscChrg]
FROM stage.MAK_NL_OLine
WHERE Cancellation != 1 --the SalesInvoiceQty = 0 and the OpenRelease(order)= “X” (Cancellation = 1) orders should not show at all -- ticket #116500
--Where DCPAGMP <> '*'
/*GROUP BY Company, SalesOrderNum, SalesOrderLine, PartNum, CustomerNum, SalesOrderDate, SalesOrderType, UoM,InvoiceNum, PartitionKey, NeedbyDate, ExpDelivDate	,SalesOrderQty, DelivQty	,UnitPrice
	,UnitCost, Currency, OpenRelease, DiscountPercent, PartStatus,SalesPersonName, ReturnComment, SalesReturnInvoiceNum, WarehouseCode*/
GO
PRINT N'Creating [stage].[CER_DE_Warehouse]'
GO
CREATE TABLE [stage].[CER_DE_Warehouse]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (8) NULL,
[WarehouseCode] [nvarchar] (10) NULL,
[WarehouseName] [nvarchar] (100) NULL,
[WarehouseAddress] [nvarchar] (131) NULL
)
GO
PRINT N'Creating [stage].[vCER_DE_Warehouse]'
GO

create view [stage].[vCER_DE_Warehouse]
as

select 
CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company], '#', TRIM([WarehouseCode]))))) AS WarehouseID,
Company,
WarehouseCode,
WarehouseName,
null as [WarehouseDistrict],
WarehouseAddress,
null as WarehouseDescription,
null as WarehouseType,
null as WarehouseCountry,
null as WarehouseSite,
PartitionKey
FROM stage.CER_DE_Warehouse;
GO
PRINT N'Creating [stage].[FOR_ES_Supplier]'
GO
CREATE TABLE [stage].[FOR_ES_Supplier]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (20) NULL,
[MainSupplierName] [nvarchar] (80) NULL,
[SupplierName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[TelephoneNum] [nvarchar] (100) NULL,
[Email] [nvarchar] (100) NULL,
[ZipCode] [nvarchar] (100) NULL,
[City] [nvarchar] (100) NULL,
[District] [nvarchar] (100) NULL,
[CountryName] [nvarchar] (100) NULL,
[SupplierResponsible] [nvarchar] (100) NULL,
[VATNum] [nvarchar] (100) NULL,
[CodeOfConduct_Group] [nvarchar] (100) NULL,
[CodeOfConduct] [nvarchar] (100) NULL,
[Website] [nvarchar] (100) NULL,
[SupplierCategory] [nvarchar] (100) NULL,
[SupplierScore] [nvarchar] (30) NULL,
[SupplierCategoryCode] [nvarchar] (15) NULL,
[OrganizationNum] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vFOR_ES_Supplier]'
GO


CREATE VIEW [stage].[vFOR_ES_Supplier] AS 
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([SupplierNum]))))) AS SupplierID
	,UPPER(CONCAT([Company],'#',TRIM([SupplierNum]))) AS SupplierCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM([Company]))) AS CompanyID
	,[PartitionKey]
	,[Company]
	,TRIM([SupplierNum]) AS SupplierNum
	,MainSupplierName
	,SupplierName
	,AddressLine1
	,[TelephoneNum]
	,[Email]
	,TRIM([ZipCode]) AS ZipCode
	,TRIM([City]) AS City
	,District
	,CountryName
	,TRIM([SupplierResponsible]) AS SupplierResponsible
	,[VATNum]
	,IIF(trim([CodeOfConduct]) = 'Y' or trim([CodeOfConduct_Group]) = 'Y', 'Yes', 'No') as [CodeOfConduct]
	,[Website]
	,SupplierCategory
	, case when SupplierCategory in ('ACREEDOR AXINTER','ACREEDOR AXLOAD','PROVEEDOR AXINTER','PROVEEDOR AXLOAD') 
		then 'Internal' 
		else 'External' 
	  end as [Internal/External]
	, SupplierScore
	,[OrganizationNum] as [OrganizationNum]
FROM 
	 [stage].[FOR_ES_Supplier]
GO
PRINT N'Creating [dm_PT].[fctPurchaseLedger]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [dm_PT].[fctPurchaseLedger]
	AS 

SELECT 
 pl.[PurchaseLedgerID]
,pl.[Company]
,pl.[SupplierNum]
,pl.[PurchaseOrderNum]
,pl.[PurchaseInvoiceNum]
,pl.[PurchaseInvoiceDate]
,pl.[PurchaseDueDate]
,pl.[PurchaseLastPaymentDate]
,pl.[InvoiceAmount]
,pl.[ExchangeRate]
,pl.[Currency]
,pl.[VATAmount]
,pl.[VATCode]
,pl.[PayToName]
,pl.[PayToCity]
,pl.[PayToContact]
,pl.[PaymentTerms]
,pl.[PrePaymentNum]
,pl.[LastPaymentNum]
,pl.[PLRes1]
,pl.[PLRes2]
,pl.[PLRes3]
,pl.[PurchaseLedgerCode]
,pl.[CompanyID]
,pl.[SupplierID]
,pl.[PurchaseInvoiceID]
,pl.[PurchaseOrderNumID]
,pl.[CurrencyID]
,pl.[PurchaseInvoiceDateID]
,pl.[PartitionKey]
,pl.[PaidInvoiceAmount]
,pl.[RemainingInvoiceAmount]
,pl.[AccountingDate]
,pl.[AgingPeriod]
,pl.[AgingSort]
,pl.[VATCodeDesc]
,pl.[LinkToOriginalInvoice]
FROM [dm].[FactPurchaseLedger]  as pl
LEFT JOIN dbo.Company com ON pl.Company = com.Company
WHERE com.BusinessArea = 'Power Transmission Solutions' AND com.[Status] = 'Active'
GO
PRINT N'Creating [stage].[FOR_PL_PurchaseInvoice]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[FOR_PL_PurchaseInvoice]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [varchar] (20) NULL,
[PIRes1] [nvarchar] (40) NULL,
[PurchaseInvoiceNum] [nvarchar] (80) NULL,
[PurchaseInvoiceLine] [nvarchar] (80) NULL,
[PurchaseOrderNum] [nvarchar] (80) NULL,
[PurchaseOrderLine] [nvarchar] (80) NULL,
[PurchaseInvoiceType] [nvarchar] (80) NULL,
[PurchaseInvoiceDate] [nvarchar] (80) NULL,
[ActualShipDate] [nvarchar] (80) NULL,
[ActualRecieveDate] [nvarchar] (80) NULL,
[IsInvoiceClosed] [nvarchar] (80) NULL,
[SupplierNum] [nvarchar] (80) NULL,
[PartNum] [nvarchar] (80) NULL,
[PurchaseInvoiceQty] [nvarchar] (80) NULL,
[UoM] [nvarchar] (80) NULL,
[UnitPrice] [nvarchar] (80) NULL,
[DiscountPercent] [nvarchar] (80) NULL,
[DiscountAmount] [nvarchar] (80) NULL,
[TotalMiscChrg] [nvarchar] (80) NULL,
[ExchangeRate] [nvarchar] (80) NULL,
[Currency] [nvarchar] (80) NULL,
[IsCreditMemo] [nvarchar] (80) NULL,
[PurchaserName] [nvarchar] (80) NULL,
[WarehouseCode] [nvarchar] (80) NULL,
[Comment] [nvarchar] (300) NULL,
[CreatedTimeStamp] [varchar] (50) NULL,
[ModifiedTimeStamp] [varchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (25) NULL
)
GO
PRINT N'Creating [stage].[vFOR_PL_PurchaseInvoice]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vFOR_PL_PurchaseInvoice]
	AS 
	
SELECT 
------------- ID's -------------

CONVERT(binary(32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseInvoiceNum), '#', TRIM(PurchaseInvoiceLine), '#', TRIM(PIRes1))))) AS PurchaseInvoiceID
,UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseInvoiceNum), '#', TRIM(PurchaseInvoiceLine))) AS PurchaseInvoiceCode
,UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum))) AS PurchaseOrderNumCode
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum),'#',TRIM(PurchaseOrderLine),'#',TRIM(PurchaseOrderSubLine))))) AS PurchaseOrderID
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum))))) AS SupplierID
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(WarehouseCode))))) AS WarehouseID
,CONVERT(int, replace(cast(PurchaseInvoiceDate as date),'-','')) AS PurchaseInvoiceDateID
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#', TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum),'#',TRIM(PurchaseOrderNum))))) AS PurchaseLedgerID
,UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine) )) AS PurchaseOrderCode
,PartitionKey

------------- Mandatory fields -------------
,Company
,trim([PurchaseInvoiceNum]) as [PurchaseInvoiceNum]
,trim(PurchaseInvoiceLine ) as PurchaseInvoiceLine
--PurchaseInvoiceSubLine
,trim([PurchaseOrderNum]  ) as [PurchaseOrderNum]
,trim([PurchaseOrderLine] ) as [PurchaseOrderLine]
,trim(PurchaseOrderSubLine) as PurchaseOrderSubLine
,cast(PurchaseInvoiceDate as date) as PurchaseInvoiceDate
,cast([ActualShipDate]    as date) as ActualShipDate
,nullif(trim([PartNum]           ),'') as PartNum
,cast([PurchaseInvoiceQty] as decimal(18,4)) as [PurchaseInvoiceQty] 
,cast(UnitPrice as decimal(18,4)) as UnitPrice       
,iif(cast(ExchangeRate as decimal(18,4)) = 0,1,cast(ExchangeRate as decimal(18,4))) as ExchangeRate
,nullif(trim([Currency]),'') as Currency
-- IsCreditMemo
--CreatedTimeStamp
--ModifiedTimeStamp
--IsActiveRecord
,nullif(trim([SupplierNum] ),'') As SupplierNum

------------- Other fields -------------
           
--,[DocType]
,PurchaseInvoiceType
,cast([ActualRecieveDate]  as date) as ActualRecieveDate
,cast([IsInvoiceClosed]   as bit) as IsInvoiceClosed 
,nullif(trim([UoM]               ),'') as UoM
,cast([DiscountPercent] as decimal(18,4)) as [DiscountPercent]       
,cast([DiscountAmount] as decimal(18,4)) as [DiscountAmount]          
,cast([TotalMiscChrg] as decimal(18,4)) as [TotalMiscChrg]          
,cast([IsCreditMemo]   as bit) as [CreditMemo] 
,nullif(trim([PurchaserName]),'') as PurchaserName
,nullif(trim([WarehouseCode]),'') as [WarehouseCode]
,nullif(trim([Comment]),'') as Comment
FROM stage.FOR_PL_PurchaseInvoice
GO
PRINT N'Creating [dm_AX].[fctFinanceOpeningBalance]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO





CREATE VIEW [dm_AX].[fctFinanceOpeningBalance] AS
SELECT  [OpenBalanceID]
,[AccountID]
,[CostUnitID]
,[CostBearerID]
,[ProjectID]
,[CompanyID]
,[PartitionKey]
,[Company]
,[AccountNum]
,[CostUnitNum]
,[CostBearerNum]
,[ProjectNum]
,[JournalType]
,[JournalDate]
,[Description]
,[OpeningBalance]
,[AccountingDate]
  FROM [dm].[FactFinanceOpeningBalance]
WHERE [Company] in ('AXISE','AXHSE') -- HQ basket
GO
PRINT N'Creating [stage].[vFOR_FR_OLine]'
GO
CREATE VIEW [stage].[vFOR_FR_OLine] AS
--COMMENT EMPTY FIELDS // ADD UPPER()TRIM() INTO PartID,CustomerID 2022-12-14 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(SalesChannel) ))) AS SalesOrderID --, '#', NeedByDate, '#', PartNum --, '#', DelivQty, '#', UnitPrice, '#', UnitCost /*, '#', TRIM(OrderSubLine) */
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustomerNum)))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM([PartNum]))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM([PartNum])))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum)))) AS SalesOrderNumID
	,CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderSubLine), '#', TRIM(InvoiceNum)) AS SalesOrderCode

	,CONVERT(int, replace(convert(date, OrderDate), '-', '')) AS SalesOrderDateID  --redundent?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey 

	,Company 
	,TRIM(CustomerNum) AS CustomerNum
	,TRIM(OrderNum) AS [SalesOrderNum]
	,TRIM(OrderLine) AS [SalesOrderLine]
	,MIN(OrderSubLine) AS [SalesOrderSubLine]
	,LabelQuotations AS [SalesOrderType]
	,QuotationNum AS [SalesOrderCategory] -- QuotationNum - Reference num to a quotating. Putting it in SalesOrderCategory since it is not used for Forankra FR
	,OrderDate AS [SalesOrderDate]
	,NeedByDate AS [NeedbyDate]
	,DelivDate AS [ExpDelivDate]
	,CAST('1900-01-01' AS date) AS ActualDelivDate
	,CAST('1900-01-01' AS date) AS ConfirmedDelivDate
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,OrderQty AS [SalesOrderQty]
	,IIF(LabelQuotations IN ('3','4'), OrderQty, 0) AS DelivQty -- TÖ/DZ 20221129
	,IIF(LabelQuotations ='2', OrderQty, 0) AS RemainingQty -- TÖ/DZ 20221129
	,IIF(LabelQuotations ='4', OrderQty, 0) AS SalesInvoiceQty -- TÖ/DZ 20221129
	--,'' AS [UoM]
	,UnitPrice
	,AVG(UnitCost) as UnitCost
	,COALESCE(Currency, 'EUR') AS Currency
	,COALESCE(ExchangeRate, 1) AS ExchangeRate
	,CASE WHEN LabelQuotations IN ('3','4') THEN '0' ELSE '1' END  AS OpenRelease  --LabelQuotations = 4 means Closed order
	,DiscountAmount
	,DiscountPercent
	,TRIM([PartNum]) AS PartNum
	--,'' AS [PartType]
	,PartStatus
	,SalesPersonName
	,TRIM(WarehouseCode) AS WarehouseCode
	,SalesChannel
	,'Normal Order Handling' AS AxInterSalesChannel
	,BusinessChannel AS [Department]
	,SuspendingFlag AS [ProjectNum] -- Since BackOrder needs this flag=1, so use [ProjectNum] for SuspendingFlag for ACK. /DZ. 20211104
	--,'' AS [IndexKey]
	--,'0' AS Cancellation
	--,'' AS SORes1
	--,'' AS SORes2
	--,'' AS SORes3
	--,'' AS ReturnComment
	--,'' AS SalesReturnOrderNum
	--,'' AS SalesReturnInvoiceNum
	--,NULL AS [TotalMiscChrg]
FROM stage.FOR_FR_OLine
WHERE SuspendingFlag <> 2 --since these are orders that they do not consider 'real' unless they are reactivated. by John D 20210902 -- /DZ
GROUP BY PartitionKey ,Company, CustomerNum, OrderNum, OrderLine,/*OrderSubLine,*/OrderType,OrderDate, NeedByDate,DelivDate,InvoiceNum,OrderQty
	/*,DelivQty */ ,RemainingQty, UnitPrice, /*UnitCost,*/ Currency, ExchangeRate, DiscountAmount, DiscountPercent, PartNum, PartStatus
	,SalesPersonName,WarehouseCode, SalesChannel, BusinessChannel, LabelQuotations,QuotationNum, OrderSubLine, SuspendingFlag
--	order by OpenRelease desc
GO
PRINT N'Creating [stage].[CER_NO_Warehouse]'
GO
CREATE TABLE [stage].[CER_NO_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseID] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[WarehouseName] [nvarchar] (100) NULL,
[WarehouseDistrict] [nvarchar] (50) NULL,
[WarehouseAddress] [nvarchar] (100) NULL,
[WarehouseType] [nvarchar] (50) NULL,
[WarehouseCountry] [nvarchar] (50) NULL,
[Site] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_NO_Warehouse]'
GO

CREATE VIEW [stage].[vCER_NO_Warehouse] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([WarehouseCode])) AS [WarehouseCode]
	,[WarehouseName]
	,[WarehouseDistrict]
	,[WarehouseAddress]
	--,'' AS [WarehouseDescription]
	,[WarehouseType]
	,[WarehouseCountry]
	,[Site] AS [WarehouseSite]
FROM [stage].[CER_NO_Warehouse]

GROUP BY 
	PartitionKey,[Company],[WarehouseCode],[WarehouseName],[WarehouseDistrict],[WarehouseAddress],[WarehouseType],[WarehouseCountry],[Site]
GO
PRINT N'Creating [stage].[JEN_NB_Customer]'
GO
CREATE TABLE [stage].[JEN_NB_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[CustomerName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (50) NULL,
[TelephoneNumber2] [nvarchar] (50) NULL,
[Email] [nvarchar] (100) NULL,
[ABCCode] [nchar] (10) NULL,
[City] [nvarchar] (50) NULL,
[ZIP] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNr] [nvarchar] (20) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (30) NULL,
[CustomerType] [nvarchar] (50) NULL,
[InactiveCustomer] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (10) NULL
)
GO
PRINT N'Creating [stage].[vJEN_NB_Customer]'
GO
CREATE VIEW [stage].[vJEN_NB_Customer] AS
--COMMENT EMPTY FIELDS // ADD TRIM() INTO CustomerID 23-01-03 VA
SELECT 
	--CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustomerNum))))) AS CustomerID
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,UPPER(CONCAT([Company], '#', TRIM([CustomerNum]))) AS CustomerCode
	,PartitionKey

	,UPPER([Company]) AS Company
	,UPPER(TRIM(CustomerNum)) AS CustomerNum
	,[dbo].[ProperCase](CustomerName) AS MainCustomerName --add according to taskCard
    ,[dbo].[ProperCase](CustomerName) AS CustomerName -- can be replaced by if there is sub- Customer name
	,CASE WHEN [AddressLine1] is null OR [AddressLine1] = '' THEN [AddressLine2]  
		ELSE [AddressLine1] END AS [AddressLine1] -- added 20210204 SM
	,[AddressLine2]
	,[AddressLine3]
	,[TelephoneNumber1]	AS [TelephoneNum1]
	,[TelephoneNumber2]	AS [TelephoneNum2]
	,Email
	-- Previous logic
--	,CASE WHEN countryname like 'Sweden' AND LEFT(AddressLine3, 1) IN ('1','2','3','4','5','6','7','8','9')	THEN substring(replace([dbo].[ProperCase](AddressLine3), ' ', ''), 1,5) ELSE null end AS ZipCode
	,TRIM(SUBSTRING(AddressLine3, 1, PATINDEX('%[ ][A-ZÅÄÖ]%',AddressLine3)))	AS [ZipCode]
	--,CASE WHEN [City] = ' '	AND LEFT(AddressLine3, 1) IN ('1','2','3','4','5','6','7','8','9') THEN trim(substring(replace([dbo].[ProperCase](AddressLine3),' ',		''), 6, 100)) ELSE [dbo].[ProperCase]([City]) end AS [City]
	,[dbo].[ProperCase](TRIM(SUBSTRING(AddressLine3,PATINDEX('%[ ][A-ZÅÄÖ]%',AddressLine3 ) + 1, 100)))		AS [City]
	,IIF([State]= ' ',null,[State]) AS [State]
	,[District]	AS SalesDistrict
	,[dbo].[ProperCase](CountryName) AS CountryName
	--,'' AS Division
	--,'' AS CustomerIndustry
	--,'' AS CustomerSubIndustry
	,[dbo].[ProperCase](TRIM(CONCAT (addressline1+' '+ addressline2, null))) AS AddressLine
	,CONCAT(Countryname, +','+
		--CASE WHEN countryname like 'Sweden'	AND LEFT(AddressLine3, 1) IN ('1','2','3','4','5','6','7','8','9')
		--THEN trim(substring(REPLACE([dbo].[ProperCase](AddressLine3),' ', ''), 6, 100)) ELSE null end	+','+
		[dbo].[ProperCase](TRIM(SUBSTRING(AddressLine3,PATINDEX('%[ ][A-ZÅÄÖ]%',AddressLine3 ) + 1, 100))) +','+
		--CASE WHEN countryname like 'Sweden'	AND LEFT(AddressLine3, 1) IN ('1','2','3','4','5','6','7','8','9')
		--THEN substring(replace([dbo].[ProperCase](AddressLine3), ' ', ''), 1,5) ELSE null end	+','+
		TRIM(SUBSTRING(AddressLine3, 1, PATINDEX('%[ ][A-ZÅÄÖ]%',AddressLine3))) +','+
		[dbo].[ProperCase](TRIM(CONCAT (addressline1+' '+ addressline2, null)))) AS FullAddressLine
	,[dbo].[ProperCase](CustomerGroup) AS CustomerGroup
	,[dbo].[ProperCase](CustomerGroup) AS CustomerSubGroup	
	,[SalesRepCode] AS SalesPersonCode
	,[dbo].[ProperCase](SalesPersonName) AS SalesPersonName
	--,'' AS [SalesPersonResponsible]
	,[VATRegNr] AS VATNum
	--,'' AS OrganizationNum
	,[AccountString] AS AccountNum
	,[InternalExternal]
	,[ABCCode] AS CustomerScore
	,CustomerType
	--,'' AS ValidFrom
	--,'' AS ValidTo
	,CountryCode
FROM [stage].[JEN_NB_Customer]
WHERE CustomerNum NOT LIKE 'INTR%' -- SM added according to validtion feedback 2021-02-09
GO
PRINT N'Creating [stage].[TRA_FR_SalesLedger]'
GO
CREATE TABLE [stage].[TRA_FR_SalesLedger]
(
[PartitionKey] [nvarchar] (50) NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (100) NULL,
[SalesInvoiceNum] [nvarchar] (50) NULL,
[SalesInvoiceDate] [nvarchar] (50) NULL,
[DueDate] [nvarchar] (50) NULL,
[LastPaymentDate] [nvarchar] (50) NULL,
[InvoiceAmount] [decimal] (18, 4) NULL,
[RemainingInvoiceAmount] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[VATAmount] [nvarchar] (50) NULL,
[VATCode] [nvarchar] (50) NULL,
[PayToName] [nvarchar] (50) NULL,
[PayToCity] [nvarchar] (50) NULL,
[PayToContact] [nvarchar] (50) NULL,
[PaymentTerms] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vTRA_FR_SalesLedger]'
GO
CREATE VIEW [stage].[vTRA_FR_SalesLedger] AS
--ADD UPPER() TRIM() INTO CustomerID 22-12-29 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(UPPER(Company), '#', TRIM(CustomerNum), '#', TRIM(SalesInvoiceNum)))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM(CustomerNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(UPPER([Company]), '#', TRIM(CustomerNum)))) AS CustomerID
	,CONCAT(UPPER(Company), '#', TRIM(CustomerNum), '#', TRIM(SalesInvoiceNum)) AS SalesLedgerCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(CustomerNum) AS CustomerNum
	,TRIM(SalesInvoiceNum) AS SalesInvoiceNum
	,SalesInvoiceDate
	,DueDate As SalesDueDate
	,LastPaymentDate AS SalesLastPaymentDate
	,CAST('1900-01-01' AS date) AS AccountingDate
	,InvoiceAmount
	,InvoiceAmount - RemainingInvoiceAmount AS PaidInvoiceAmount
	,RemainingInvoiceAmount
	,ExchangeRate
	,Currency
	,VATAmount
	,VATCode
	,PayToName
	,PayToCity
	--,'' AS PayToContact
	,PaymentTerms
	--,'' AS SLRes1
	--,'' AS SLRes2
	--,'' AS SLRes3
	--,'' AS AgingPeriod
	--,'' AS AgingSort
	--,'' AS VATCodeDesc
	--,'' AS LinkToOriginalInvoice
FROM 
	stage.TRA_FR_SalesLedger
GO
PRINT N'Creating [stage].[CER_UK_StockTransaction]'
GO
CREATE TABLE [stage].[CER_UK_StockTransaction]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SysRowID] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[BinNumber] [nvarchar] (50) NULL,
[BatchID] [nvarchar] (50) NULL,
[FIFOBatchID] [nvarchar] (50) NULL,
[SupplierBatchID] [nvarchar] (50) NULL,
[TranDate] [date] NULL,
[CreateDate] [date] NULL,
[CreateTime] [nvarchar] (50) NULL,
[TranDT] [nvarchar] (50) NULL,
[TranType] [nvarchar] (50) NULL,
[TranTypeDesc] [nvarchar] (500) NULL,
[TranSource] [nvarchar] (50) NULL,
[Reference] [nvarchar] (50) NULL,
[TranQty] [decimal] (18, 4) NULL,
[IssuerReceiverCode] [nvarchar] (50) NULL,
[CostPrice] [decimal] (18, 4) NULL,
[SellingPrice] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[TranValue] [decimal] (18, 4) NULL,
[InternalExternal] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_UK_StockTransaction]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vCER_UK_StockTransaction] AS 

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([SysRowID]))))) AS StockTransactionID
	,UPPER(CONCAT([Company], '#', TRIM([SysRowID]))) AS StockTransactionCode --StockTransactionCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(([Company]))))) AS CompanyID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#' ,TRIM(UPPER([PartNum])))))) AS PartID
 	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,IIF(TranSource = '0x31', CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([OrderNum]))))), NULL) AS SalesOrderNumID
	,IIF(TranSource <> '0x31', CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([OrderNum]))))), NULL) AS PurchaseOrderNumID
--	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([OrderNum])))) AS PurchaseOrderID
	,IIF(TranSource = '0x31', CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([InvoiceNum]))))), NULL) AS SalesInvoiceID
	,IIF(TranSource <> '0x31', CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]),'#',TRIM([InvoiceNum]))))), NULL) AS PurchaseInvoiceID
	,IIF(TranSource = '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([IssuerReceiverCode]))))), NULL) AS CustomerID
	,IIF(TranSource <> '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([IssuerReceiverCode]))))), NULL) AS SupplierID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([CurrencyCode])))) AS CurrencyID
	,[PartitionKey]

    
    ,TRIM([Company]) AS Company -- 
	,TRIM([WarehouseCode]) AS WarehouseCode
	,[TranType]		AS TransactionCode
    ,[TranTypeDesc]	AS TransactionDescription
	,TRIM([IssuerReceiverCode]) AS IssuerReceiverNum
	,IIF(TRIM([OrderNum])='', NULL, TRIM(OrderNum)) AS OrderNum 
	,IIF([TranType] = '01', TRIM([OrderNum]), '') AS SalesOrderNum
	,IIF([TranType] = '01', TRIM([InvoiceNum]), '') AS SalesInvoiceNum
	,IIF([TranType] = '01', TRIM([IssuerReceiverCode]), '') AS CustomerNum
	,IIF([TranType] = '00', TRIM([OrderNum]), '') AS PurchaseOrderNum
	,IIF([TranType] = '00', TRIM([InvoiceNum]), '') AS PurchaseInvoiceNum
	,IIF([TranType] = '00', TRIM([IssuerReceiverCode]), '') AS SupplierNum
	,'' AS OrderLine
	,IIF(TRIM([InvoiceNum])='', NULL,TRIM(InvoiceNum)) AS InvoiceNum
	,'' AS InvoiceLine
    ,TRIM(UPPER([PartNum])) AS PartNum
    ,IIF(TRIM([BinNumber])='', NULL,TRIM(BinNumber)) AS BinNum
    ,IIF(TRIM([BatchID])='', NULL,TRIM(BatchID)) AS BatchNum
    ,convert(date, [TranDate]) AS TransactionDate
    ,[CreateTime] AS TransactionTime
	,[TranQty] AS TransactionQty
    ,[TranValue] AS TransactionValue
	,[CostPrice]
    ,[SellingPrice] AS SalesUnitPrice
	,'GBP' AS Currency
	,1 AS ExchangeRate
	,[Reference]
	,convert(date, [CreateDate]) AS AdjustmentDate
	,InternalExternal
	,IIF(InternalExternal = 'Internal', 1, 0) AS IsInternalTransaction
	,'' AS STRes1
	,'' AS STRes2
	,'' AS STRes3
    ,[SysRowID] AS IndexKey
	,IIF(TRIM([FIFOBatchID])='', NULL,TRIM(FIFOBatchID)) AS FIFOBatchID
    ,IIF(TRIM([SupplierBatchID])='', NULL,TRIM(SupplierBatchID)) AS SupplierBatchID
	,[TranDT]
    ,[TranSource]
				 
FROM 
	[stage].[CER_UK_StockTransaction]
GO
PRINT N'Creating [dm_PT].[DimSalesPersonName]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE VIEW [dm_PT].[DimSalesPersonName]
AS

SELECT sp.[SalesPersonNameID]
,sp.[Company]
,sp.[SalesPersonName]
FROM dm.DimSalesPersonName sp
LEFT JOIN dbo.Company com ON sp.Company = com.Company
WHERE com.BusinessArea = 'Power Transmission Solutions' AND com.[Status] = 'Active'

--WHERE Company IN ('ACZARKOV', 'AcornUK', 'BSIBELL', 'JDKJENSS', 'JDKKALTE', 'JFIJENSS', 'MNLMAK', 'JNOJENSS', 'NORNO', 'JSEJENSS', 'SSWSE', 'NomoSE', 'NomoDK', 'NomoFI', 'NomoNo', 'PASSEROT', 'SKSSCOFI', 'SCOFI', 'SMKFI', 'SNLSPRUI', 'SPRUITNL', 'SVESE', 'SPRUITNL');
GO
PRINT N'Creating [stage].[WID_FI_CustomerAgreement]'
GO
CREATE TABLE [stage].[WID_FI_CustomerAgreement]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[AgreementCode] [nvarchar] (50) NULL,
[AgreementDescription] [nvarchar] (50) NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DelivTime] [nvarchar] (10) NULL,
[Currency] [nvarchar] (10) NULL,
[AgreementStart] [date] NULL,
[AgreementEnd] [date] NULL
)
GO
PRINT N'Creating [stage].[vWID_FI_CustomerAgreement]'
GO
CREATE VIEW [stage].[vWID_FI_CustomerAgreement] AS 
--COMMENT EMPTY FIELDS / ADD UPPER() INTO PartID,CustomerID 2022-12-15 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM([Company]),'#',TRIM(AgreementCode),'#',TRIM([PartNum]),'#',TRIM(CustomerNum)))) AS CustomerAgreementID --CustomerAgreementID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',TRIM([Company]))) AS CompanyID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM(Company),'#',TRIM(CustomerNum)))) AS CustomerID 
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID 
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM(Company),'#',TRIM(PartNum)))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',TRIM([Currency]))) AS CurrencyID
	,[PartitionKey]

	,TRIM([Company]) AS Company
	,TRIM(CustomerNum) AS CustomerNum
	,TRIM(PartNum) AS PartNum
	,AgreementCode
	,AgreementDescription
	,DiscountPercent
	,MAX([UnitPrice]) AS [UnitPrice]
	--,NULL AS AgreementQty
	,TRIM([Currency]) AS Currency
	,[DelivTime]
	,AgreementStart
	,AgreementEnd
	--,NULL	AS FulfilledQty
	--,NULL  AS RemainingQty
	--,''	AS UoM
	--,'' AS CustomerTerms
	--,'' AS CARes1
	--,'' AS CARes2
	--,'' AS CARes3

	
FROM 
	[stage].[WID_FI_CustomerAgreement]
GROUP BY [PartitionKey], [Company], AgreementCode, AgreementDescription, [Currency], [PartNum], CustomerNum, [DiscountPercent], [DelivTime], AgreementStart, AgreementEnd
--WHERE 
--	RecordType = 'D'
GO
PRINT N'Creating [dm_AX].[fctFinanceBudget]'
GO




/****** Script for SelectTopNRows command from SSMS  ******/
CREATE VIEW [dm_AX].[fctFinanceBudget]	AS

SELECT  [BudgetID]
,[CompanyID]
,[AccountID]
,[CostUnitID]
,[CostBearerID]
,[ProjectID]
,[PartitionKey]
,[BudgetType]
,[BudgetName]
,[BudgetDescription]
,[Company]
,[BudgetPeriod]
,[BudgetPeriodDate]
,[PeriodType]
,[Currency]
,[BudgetFinance]
,[CostBearerNum]
,[CostUnitNum]
,[AccountNum]
,[AccountGroup]
,[ProjectNum]
,[BRes1]
,[BRes2]
,[BRes3]
,[ExchangeRate]
,[IsActiveRecord]
  FROM [dm].[FactFinanceBudget]
WHERE [Company] in ('AXISE','AXHSE') -- HQ basket
GO
PRINT N'Creating [stage].[BELL_SI_OLine]'
GO
CREATE TABLE [stage].[BELL_SI_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[Archived] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderRelNum] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[DeliveDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[UnitPrice] [numeric] (18, 4) NULL,
[UnitCost] [numeric] (18, 4) NULL,
[SumUnitCost] [numeric] (18, 4) NULL,
[SumUnitPrice] [numeric] (18, 4) NULL,
[SumOutstandingAmount] [numeric] (18, 4) NULL,
[SumOutstandingAmountExclVAT] [numeric] (18, 4) NULL,
[CurrExchRate] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[OpenRelease] [nvarchar] (1) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [numeric] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[NeedByDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (max) NULL,
[SalesReturnOrderNum] [nvarchar] (50) NULL,
[SalesReturnInvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vBELL_SI_OLine]'
GO
CREATE VIEW [stage].[vBELL_SI_OLine] AS
-- This CTE contains a ROW_NUMBER() statement to get the live version of a order line (field Archived = 0) whenever there is one.
-- It does so by partitioning on the fields in salesOrderID and then ordering it by Archived field, meaning that the live version should always have RowNum = 1 when it exists.
-- Under the CTE we do a simple select [fields] FRom cte
-- Using the field UoM to store Archived values.
WITH cte as(
--COMMENT EMPTY FIELDS // ADD UPPER() INTO PartID,CustomerID,WarehouseID 2022-12-27 VA
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#', CustNum,'#',OrderNum,'#',OrderLine,'#',OrderRelNum,'#',InvoiceNum,'#',IIF(LEFT(TRIM([PartNum]), 1) = 'I', SUBSTRING(TRIM([PartNum]), 2, 50), TRIM([PartNum])),'#',OrderDate))) AS SalesOrderID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',Company)) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(CustNum)))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',IIF(LEFT(TRIM([PartNum]), 1) = 'I', SUBSTRING(TRIM([PartNum]), 2, 50), TRIM([PartNum])))))) AS PartID 
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',IIF(LEFT(TRIM([PartNum]), 1) = 'I', SUBSTRING(TRIM([PartNum]), 2, 50), TRIM([PartNum]))))) AS PartID 
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',trim( WarehouseCode))))) AS WarehouseID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#', WarehouseCode))) AS WarehouseID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(OrderNum)))) AS SalesOrderNumID
	,CONCAT(Company, '#', OrderNum, '#', IIF(LEFT(TRIM([PartNum]), 1) = 'I', SUBSTRING(TRIM([PartNum]), 2, 50), TRIM([PartNum]))) AS SalesOrderCode -- should be identical as in Invoice table
	,CONVERT(int, replace(convert(date, OrderDate),'-','')) AS SalesOrderDateID  
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey 
	,ROW_NUMBER() OVER (PARTITION BY Company, CustNum, OrderNum,OrderLine,OrderRelNum,InvoiceNum, PartNum, OrderDate Order BY Archived) AS RowNum

	,Company 
	,TRIM(CustNum) AS CustomerNum
	,OrderNum		AS SalesOrderNum
	,OrderLine		AS SalesOrderLine
	,OrderSubLine	AS SalesOrderSubLine
	--,'' AS SalesOrderType
	--,'' AS SalesOrderCategory
	,OrderDate		AS SalesOrderDate
	,NeedbyDate
	,DeliveDate AS ExpDelivDate
	,CAST('1900-01-01' AS date) AS ActualDelivDate
	,CAST('1900-01-01' AS date) AS ConfirmedDelivDate
	,InvoiceNum		AS SalesInvoiceNum
	,OrderQty		AS SalesOrderQty
	,DelivQty		
	,RemainingQty
	--,NULL AS SalesInvoiceQty
	,Archived AS UoM
	,UnitPrice
	,UnitCost
	,CurrencyCode AS Currency
	,IIF(CurrencyCode = 'EUR', 1, 0) AS ExchangeRate
	,OpenRelease
	,DiscountAmount
	,DiscountPercent
	,IIF(LEFT(TRIM([PartNum]), 1) = 'I', SUBSTRING(TRIM([PartNum]), 2, 50), TRIM([PartNum])) AS PartNum
	--,'' AS PartType
	,PartStatus
	,SalesPerson AS SalesPersonName
	,TRIM(WarehouseCode) AS WarehouseCode
	,SalesChannel
	,CASE WHEN SalesChannel = 'magento' THEN 'Webshop'
		ELSE 'Normal Order Handling' END AS AxInterSalesChannel
	--,'' AS Department
	--,'' AS [ProjectNum]
	--,'' AS [IndexKey]
	--,'0' AS Cancellation
	--,'' AS SORes1
	--,'' AS SORes2
	--,'' AS SORes3
	--,NULL AS [TotalMiscChrg]
FROM stage.BELL_SI_Oline
--where Archived = 1 -- Temporary added to avoid problems
)

-- Here we simply select the rows with RowNum = 1. 
SELECT [SalesOrderID]
      ,[CompanyID]
      ,[CustomerID]
      ,[PartID]
      ,[WarehouseID]
      ,[SalesOrderNumID]
      ,[SalesOrderCode]
      ,[SalesOrderDateID]
	  ,ProjectID
      ,[PartitionKey]
      ,[Company]
      ,[CustomerNum]
      ,[SalesOrderNum]
      ,[SalesOrderLine]
      ,[SalesOrderSubLine]
      --,[SalesOrderType]
      --,[SalesOrderCategory]
      ,[SalesOrderDate]
      ,[NeedbyDate]
      ,[ExpDelivDate]
      ,[ActualDelivDate]
	  ,ConfirmedDelivDate
      ,[SalesInvoiceNum]
      ,[SalesOrderQty]
      ,[DelivQty]
      ,[RemainingQty]
	  ,NULL AS SalesInvoiceQty
      ,[UoM]
      ,[UnitPrice]
      ,[UnitCost]
      ,[Currency]
      ,[ExchangeRate]
      ,[OpenRelease]
      ,[DiscountAmount]
      ,[DiscountPercent]
      ,[PartNum]
      --,[PartType]
      ,[PartStatus]
      ,[SalesPersonName]
      ,[WarehouseCode]
      ,[SalesChannel]
	  ,AxInterSalesChannel
      --,[Department]
      --,[ProjectNum]
      --,[IndexKey]
      --,[Cancellation]
      --,[SORes1]
      --,[SORes2]
      --,[SORes3]
	  ,NULL AS [TotalMiscChrg]
FROM cte
Where RowNum = 1
GO
PRINT N'Creating [stage].[PAS_PL_Part]'
GO
CREATE TABLE [stage].[PAS_PL_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[company] [nvarchar] (8) NULL,
[partnum] [nvarchar] (50) NULL,
[partname] [nvarchar] (200) NULL,
[partdescription] [nvarchar] (max) NULL,
[partdescription2] [nvarchar] (max) NULL,
[productgroup] [nvarchar] (50) NULL,
[productgroup2] [nvarchar] (50) NULL,
[productgroup3] [nvarchar] (50) NULL,
[brand] [nvarchar] (50) NULL,
[model] [nvarchar] (50) NULL,
[commoditycode] [nvarchar] (50) NULL,
[partstatus] [nvarchar] (50) NULL,
[countryoforigin] [nvarchar] (50) NULL,
[netweight] [decimal] (18, 4) NULL,
[volume] [decimal] (18, 4) NULL,
[material] [nvarchar] (50) NULL,
[barcode] [nvarchar] (50) NULL,
[reorderlevel] [decimal] (18, 4) NULL,
[startdate] [date] NULL,
[enddate] [date] NULL,
[res1] [nvarchar] (50) NULL,
[res2] [nvarchar] (50) NULL,
[res3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vPAS_PL_Part]'
GO
CREATE VIEW [stage].[vPAS_PL_Part] AS
--COMMENT EMPTY FIELDS // ADD TRIM() INTO PartID 23-01-05 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([company]),'#', TRIM(partnum))))) AS PartID
     --CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([company] ,'#', TRIM(UPPER(partnum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [company])) AS CompanyID
	,CONCAT([company], '#', TRIM(UPPER(partnum))) AS PartCode
	,PartitionKey

	,[company] AS [Company]
	,TRIM(UPPER(partnum)) AS [PartNum]
	,TRIM([partname]) AS [PartName]
	,[partdescription] AS [PartDescription]
	,[partdescription2] AS [PartDescription2]
	--,'' AS [PartDescription3]
	--,NULL AS MainSupplier
	--,NULL AS AlternativeSupplier
	,iif(SUBSTRING(partnum, 1, 2) in ('WP','WU') ,'W – Own production',[productgroup]) AS [ProductGroup]
	,CASE 
	WHEN SUBSTRING(partnum, 1, 2) = 'WP' THEN 'WP – Gaskets'
	WHEN SUBSTRING(partnum, 1, 2) = 'WU' THEN 'WU – Seals'
	ELSE [productgroup2] END AS [ProductGroup2]
	,[productgroup3] AS [ProductGroup3]
	--,'' AS [ProductGroup4]
	,[brand] AS [Brand]
	,[commoditycode] AS [CommodityCode]
	,[partstatus] AS PartStatus
	--,'' AS PartReplacementNum
	,[countryoforigin] AS [CountryOfOrigin]
	,[netweight] AS [NetWeight]
	--,'' AS UoM
	,[material] AS [Material]
	,[barcode] AS [Barcode]
	,[reorderlevel] AS [ReOrderLevel]
	--,'' AS PartResponsible
	,[startdate] AS [StartDate]
	,[enddate] AS [EndDate]

FROM [stage].[PAS_PL_Part]
GO
PRINT N'Creating [stage].[JEN_SE_Customer]'
GO
CREATE TABLE [stage].[JEN_SE_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[CustomerName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (50) NULL,
[TelephoneNumber2] [nvarchar] (50) NULL,
[Email] [nvarchar] (100) NULL,
[ABCCode] [nchar] (10) NULL,
[City] [nvarchar] (50) NULL,
[ZIP] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNr] [nvarchar] (20) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (30) NULL,
[CustomerType] [nvarchar] (50) NULL,
[InactiveCustomer] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (10) NULL
)
GO
PRINT N'Creating [stage].[vJEN_SE_Customer]'
GO

CREATE VIEW [stage].[vJEN_SE_Customer] AS
--COMMENT EMPTY FIELDS // ADD UPPER()TRIM() INTO CustomerID 2022-12-19 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID
	--CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(CustomerNum)))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',upper(trim([Company])))) AS CompanyID
	,CONCAT([Company],'#',TRIM([CustomerNum])) AS CustomerCode
	,PartitionKey

	,Company
	,TRIM(CustomerNum) AS CustomerNum
	,[dbo].[ProperCase](CustomerName) AS MainCustomerName --add according to taskCard
    ,[dbo].[ProperCase](CustomerName) AS CustomerName -- can be replaced by if there is sub- Customer name
	,CASE WHEN [AddressLine1] is null OR [AddressLine1] = '' THEN [AddressLine2]  
		ELSE [AddressLine1] END AS [AddressLine1] -- added 20210204 SM
	,[AddressLine2]
	,[AddressLine3]
	,[TelephoneNumber1]	AS [TelephoneNum1]
	,[TelephoneNumber2]	AS [TelephoneNum2]
	,Email
	-- Previous logic
--	,CASE WHEN countryname like 'Sweden' AND LEFT(AddressLine3, 1) IN ('1','2','3','4','5','6','7','8','9')	THEN substring(replace([dbo].[ProperCase](AddressLine3), ' ', ''), 1,5) ELSE null end AS ZipCode
	,TRIM(SUBSTRING(AddressLine3, 1, PATINDEX('%[ ][A-ZÅÄÖ]%',AddressLine3)))	AS [ZipCode]
	--,CASE WHEN [City] = ' '	AND LEFT(AddressLine3, 1) IN ('1','2','3','4','5','6','7','8','9') THEN trim(substring(replace([dbo].[ProperCase](AddressLine3),' ',		''), 6, 100)) ELSE [dbo].[ProperCase]([City]) end AS [City]
	,[dbo].[ProperCase](TRIM(SUBSTRING(AddressLine3,PATINDEX('%[ ][A-ZÅÄÖ]%',AddressLine3 ) + 1, 100)))		AS [City]
	,IIF([State]= ' ',null,[State]) AS [State]
	,[District]	AS SalesDistrict
	,[dbo].[ProperCase](CountryName) AS CountryName
	,InactiveCustomer AS Division		--Added InactiveCustomer here because Division is unused field for JENS S.
	--,'' AS CustomerIndustry
	--,'' AS CustomerSubIndustry
	,[dbo].[ProperCase](TRIM(CONCAT (addressline1+' '+ addressline2, null))) AS AddressLine
	,CONCAT(Countryname, +','+
		--CASE WHEN countryname like 'Sweden'	AND LEFT(AddressLine3, 1) IN ('1','2','3','4','5','6','7','8','9')
		--THEN trim(substring(REPLACE([dbo].[ProperCase](AddressLine3),' ', ''), 6, 100)) ELSE null end	+','+
		[dbo].[ProperCase](TRIM(SUBSTRING(AddressLine3,PATINDEX('%[ ][A-ZÅÄÖ]%',AddressLine3 ) + 1, 100))) +','+
		--CASE WHEN countryname like 'Sweden'	AND LEFT(AddressLine3, 1) IN ('1','2','3','4','5','6','7','8','9')
		--THEN substring(replace([dbo].[ProperCase](AddressLine3), ' ', ''), 1,5) ELSE null end	+','+
		TRIM(SUBSTRING(AddressLine3, 1, PATINDEX('%[ ][A-ZÅÄÖ]%',AddressLine3))) +','+
		[dbo].[ProperCase](TRIM(CONCAT (addressline1+' '+ addressline2, null)))) AS FullAddressLine
	,[dbo].[ProperCase](CustomerGroup) AS CustomerGroup
	,[dbo].[ProperCase](CustomerGroup) AS CustomerSubGroup	
	,[SalesRepCode]		AS SalesPersonCode
	,[dbo].[ProperCase](SalesPersonName) AS SalesPersonName
	--,'' AS [SalesPersonResponsible]
	,[VATRegNr]		AS VATNum
	--,'' AS OrganizationNum
	,[AccountString]	AS AccountNum
	,[InternalExternal]
	,[ABCCode] AS CustomerScore
	,CustomerType
	,GETDATE() AS ValidFrom
	,DATEADD(year,1,GETDATE()) AS ValidTo
	,CountryCode
FROM [stage].[JEN_SE_Customer]
WHERE CustomerNum NOT LIKE 'INTR%' -- SM added according to validtion feedback 2021-02-09
GO
PRINT N'Creating [stage].[CER_SE_SalesLedger]'
GO
CREATE TABLE [stage].[CER_SE_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (10) NULL,
[InvoiceNum] [nvarchar] (25) NULL,
[InvoiceDate] [datetime] NULL,
[DueDate] [datetime] NULL,
[LastPaymentDate] [datetime] NULL,
[InvoiceAmountOC] [decimal] (18, 8) NULL,
[PaidAmountLC] [decimal] (18, 8) NULL,
[OpenAmountOC] [decimal] (18, 8) NULL,
[ExchangeRate] [decimal] (18, 8) NULL,
[Currency] [nvarchar] (10) NULL,
[VATAmount] [decimal] (18, 8) NULL,
[VATCode] [nvarchar] (25) NULL,
[VATPaidAmountLCU] [decimal] (18, 8) NULL
)
GO
PRINT N'Creating [stage].[vCER_SE_SalesLedger]'
GO




CREATE VIEW [stage].[vCER_SE_SalesLedger] AS
--ADD TRIM() INTO SalesLedgerID 27-02-2023 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(InvoiceNum))))) AS SalesLedgerID,
--	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum), '#', InvoiceNum)))) AS SalesLedgerID,
	CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM(Company))) AS CompanyID,
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID,
	--CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum)))))) AS CustomerID,
	UPPER(CONCAT(Company,'#',CustNum, '#', InvoiceNum)) AS SalesLedgerCode, --Redundant?
	PartitionKey,

	UPPER(TRIM(Company)) AS Company,
	UPPER(TRIM(CustNum)) AS CustomerNum,
	--UPPER(TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) )) AS CustomerNum,
	UPPER(TRIM(InvoiceNum)) AS SalesInvoiceNum,
	InvoiceDate AS SalesInvoiceDate,
	CONVERT(date, DueDate) AS SalesDueDate,
	CONVERT(date, LastPaymentDate) AS SalesLastPaymentDate,
	InvoiceAmountOC AS InvoiceAmount,
	OpenAmountOC AS RemainingInvoiceAmount,
	ExchangeRate,
	Currency,
	VATAmount,
	VATCode,
	--'' AS PayToName,
	--'' AS PayToCity,
	--'' AS PayToContact,
	--'' AS PaymentTerms,
	--'' AS SLRes1,
	--'' AS SLRes2,
	--'' AS SLRes3
	PaidAmountLC AS PaidInvoiceAmount
	,'1900-01-01' AS AccountingDate
	--,'' AS AgingPeriod
	--,'' AS AgingSort
	--,'' AS VATCodeDesc
	--,'' AS LinkToOriginalInvoice
FROM 
	stage.CER_SE_SalesLedger
GO
PRINT N'Creating [stage].[FOR_FR_SOLine]'
GO
CREATE TABLE [stage].[FOR_FR_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderRel] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (22, 8) NULL,
[UnitCost] [decimal] (22, 8) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Site] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[IndexKey] [varchar] (10) NULL
)
GO
PRINT N'Creating [stage].[vFOR_FR_SOLine]'
GO
CREATE VIEW [stage].[vFOR_FR_SOLine] AS
--COMMENT EMPTY FIELDS / ADD UPPER()TRIM() INTO CustomerID,PartID 2022-12-14 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine)))) AS SalesInvoiceID --
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum), '#', OrderLine))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustomerNum), '#', TRIM(InvoiceNum)))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum)))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustomerNum)))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(PartNum)))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderSubLine), '#', TRIM(InvoiceNum)) AS SalesOrderCode
	--CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(InvoiceNum)) AS SalesOrderCode --OLine
	,CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine)) AS SalesInvoiceCode  --redundent?
	,CONVERT(int, replace(convert(date, InvoiceDate), '-', '')) AS SalesInvoiceDateID  --redundent?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey

	,Company
	,SalesPersonName
	,TRIM(CustomerNum) AS [CustomerNum]
	,TRIM(PartNum) AS [PartNum]
	,CASE WHEN TRIM(OrderNum) = '0' THEN 'Main' ELSE 'Sub' END  AS PartType
	,TRIM(OrderNum) AS [SalesOrderNum]
	,TRIM(OrderLine) AS [SalesOrderLine]
	,TRIM([OrderSubLine]) AS [SalesOrderSubLine]
	,OrderType AS [SalesOrderType]
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,TRIM(InvoiceLine) AS [SalesInvoiceLine]
	--,'' AS [SalesInvoiceType]
	,CONVERT(date, InvoiceDate) AS [SalesInvoiceDate]
	,ActualDeliveryDate AS [ActualDelivDate]
	,SellingShipQty AS [SalesInvoiceQty]
	--,'' AS [UoM]
	,UnitPrice
	,UnitCost
	--,0 AS DiscountAmount
	,IIF((UnitPrice*SellingShipQty) <> 0, DiscountAmount/(UnitPrice*SellingShipQty), 0) AS [DiscountPercent]
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	--,0 AS TotalMiscChrg
	--,0 AS [VATAmount]
	,'EUR' AS Currency
	,CONVERT(decimal (18,4), 1) AS ExchangeRate
	,CreditMemo
	--,'' AS [SalesChannel]
	--,'' AS [Department]
	,TRIM([WarehouseCode]) AS WarehouseCode
	--,NULL AS DeliveryAddress
	--,'' AS [CostBearerNum]
	--,'' AS [CostUnitNum]
	--,'' AS [ReturnComment]
	--,'' AS [ReturnNum]
	--,'' AS [ProjectNum]
	,[IndexKey]
	--,'' AS SIRes1
	--,'' AS SIRes2
	--,'' AS SIRes3

FROM stage.FOR_FR_SOLine

GROUP BY
	PartitionKey,Company,SalesPersonName,CustomerNum,PartNum,OrderNum,OrderLine,OrderSubLine,OrderType,InvoiceNum,InvoiceLine, InvoiceDate,SellingShipQty,UnitPrice,UnitCost,DiscountAmount,TotalMiscChrg,WarehouseCode,CreditMemo, [IndexKey], ActualDeliveryDate--,OrderSubLine --,OrderRel, 
GO
PRINT N'Creating [dm_PT].[dimDepartment]'
GO


create view [dm_PT].[dimDepartment] as

select 
	 dpt.[DepartmentID]
	 ,dpt.CompanyID
,dpt.[Company]
,dpt.[DepartmentCode]
,dpt.[DepartmentName]
,dpt.[DepartmentSite]
,dpt.[Address]
,dpt.[ZipCode]
,dpt.[City]
,dpt.[State]
,dpt.[CountryCode]
,dpt.[CountryName]
,dpt.[DepartmentType]
,dpt.[DepartmentDescription]
,dpt.[DptRes1]
,dpt.[DptRes2]
,dpt.[DptRes3]
from dm.dimDepartment as dpt
LEFT JOIN DBO.Company as company
	on dpt.Company = company.Company
WHERE company.BusinessArea = 'Power Transmission Solutions' AND company.[Status] = 'Active';
GO
PRINT N'Creating [stage].[NOM_DK_Warehouse]'
GO
CREATE TABLE [stage].[NOM_DK_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[WarehouseCode] [nvarchar] (10) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vNOM_DK_Warehouse]'
GO
CREATE   view [stage].[vNOM_DK_Warehouse] AS
--Comment empty fields 23-01-05 VA
SELECT 
	
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey
	,[Company] AS Company
	,[WarehouseCode]
	,[WarehouseName]
	--,'' AS WarehouseDistrict
	--,'' AS WarehouseAddress
	--,'' AS WarehouseDescription
	--,'' AS WarehouseType
	--,'' AS WarehouseCountry
	--,'' AS WarehouseSite
FROM [stage].[NOM_DK_Warehouse]
GO
PRINT N'Creating [dm_AX].[dimCustomer]'
GO



--CREATE SCHEMA dm_AX

CREATE VIEW [dm_AX].[dimCustomer] AS

SELECT 
	   [CustomerID]
      ,[CompanyID]
      ,[Company]
      ,[CustomerNum]
      ,[MainCustomerName]
      ,[CustomerName]
      ,[Customer]
      ,[AddressLine1]
      ,[AddressLine2]
      ,[AddressLine3]
      ,[TelephoneNum1]
      ,[TelephoneNum2]
      ,[Email]
      ,[ZipCode]
      ,[City]
      ,[State]
      ,[SalesDistrict]
      ,[CountryCode]
      ,[CountryName]
      ,[Division]
      ,[CustomerIndustry]
      ,[CustomerSubIndustry]
      ,[AddressLine]
      ,[FullAddressLine]
      ,[CustomerGroup]
      ,[CustomerSubGroup]
      ,[SalesPersonCode]
      ,[SalesPersonName]
      ,[SalesPersonResponsible]
      ,[VATNum]
      ,[OrganizationNum]
      ,[AccountNum]
      ,[InternalExternal]
      ,[CustomerScore]
      ,[CustomerType]
      ,[CustomerCode]
      ,[CustomerStatus]
      ,[DUNS]
      ,[DUNS_MatchScore]
      ,[CRes1]
      ,[CRes2]
      ,[CRes3]
      ,[is_inferred]
      ,[is_deleted]
      ,[is_validCountryCode]
      ,[DUNS_Status]

FROM [dm].[DimCustomer]
WHERE [Company] in ('AXISE','AXHSE')  -- HQ basket
GO
PRINT N'Creating [stage].[AXL_NL_OLine]'
GO
CREATE TABLE [stage].[AXL_NL_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[NeedbyDate] [date] NULL,
[ExpDelivDate] [date] NULL,
[EDCExpDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (10) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[SalesPerson] [nvarchar] (50) NULL,
[WareHouseCode] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[BusinessChain] [nvarchar] (50) NULL,
[SalesOrderCategory] [nvarchar] (50) NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL,
[PartDesc] [nvarchar] (max) NULL,
[APV_Cost_EUR] [nvarchar] (50) NULL,
[APV_Item] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXL_NL_OLine]'
GO

CREATE VIEW [stage].[vAXL_NL_OLine] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(PartDesc))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum), '#', (IIF(TRIM([PartNum]) LIKE 'IACO%' , 'MISC. CHARGES', TRIM(PartDesc) )) )))) AS PartID
	,CONVERT(int, replace(convert(date, OrderDate), '-', '')) AS SalesOrderDateID
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine))) AS SalesOrderCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(CustNum) AS CustomerNum 
	,TRIM(OrderNum) AS [SalesOrderNum]
	,TRIM(OrderLine) AS [SalesOrderLine]
	,TRIM(OrderSubLine) AS [SalesOrderSubLine]
	,CONVERT(nvarchar(50), TRIM(OrderType)) AS [SalesOrderType]
	,TRIM([SalesOrderCategory]) AS [SalesOrderCategory]
	,OrderDate AS [SalesOrderDate]
	,NeedbyDate
	,ExpDelivDate AS [ExpDelivDate]
	,EDCExpDelivDate
	,ActualDelivDate
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,OrderQty AS [SalesOrderQty]
	,DelivQty
	,RemainingQty
	,Unit AS [UoM]
	,UnitPrice
	,UnitCost
	,LEFT(TRIM(Currency), 3) AS Currency
	,ExchangeRate
	,LEFT(TRIM(OpenRelease), 1) AS OpenRelease
	,DiscountAmount
	,DiscountPercent
	,NULL AS CashDiscOffered
	,NULL AS CashDiscUsed
	,TRIM(PartNum) AS PartNum
	,UPPER(PartDesc) AS PartDesc
	,'' AS [PartType]
	,CONVERT(nvarchar(50), PartStatus) AS PartStatus
	,TRIM(SalesPerson) AS [SalesPersonName]
	,TRIM(WareHouseCode) AS WarehouseCode
	,'' AS IndexKey
	,TRIM(SalesChannel) AS SalesChannel
	,TRIM(BusinessChain) AS [Department]
	,Res3 AS [ProjectNum] -- = FreeOfCharge: Y = yes, N = no
	,'' AS Cancellation
	,Res1 AS SORes1
	,Res2 AS SORes2
	,Res3 AS SORes3
FROM stage.AXL_NL_OLine
WHERE OrderDate >= '2015-01-01'
GO
PRINT N'Creating [stage].[OCS_SE_FinanceBudget]'
GO
CREATE TABLE [stage].[OCS_SE_FinanceBudget]
(
[PartitionKey] [nvarchar] (50) NULL,
[Company] [nvarchar] (8) NULL,
[ID] [nvarchar] (50) NULL,
[BudgetNo] [nvarchar] (50) NULL,
[LineNo] [nvarchar] (50) NULL,
[AccountNum] [nvarchar] (50) NULL,
[AccountGroupNum] [nvarchar] (200) NULL,
[CostUnitNum] [nvarchar] (50) NULL,
[BudgetPeriod] [nvarchar] (50) NULL,
[BudgetPeriodDate] [nvarchar] (50) NULL,
[BudgetFinance] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[BudgetName] [nvarchar] (50) NULL,
[BudgetDescription] [nvarchar] (max) NULL,
[ProjectNum] [nvarchar] (50) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vOCS_SE_FinanceBudget]'
GO





CREATE VIEW [stage].[vOCS_SE_FinanceBudget] AS 

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(b.Company),'#', TRIM(b.[AccountNum]), '#', TRIM(ID), '#', TRIM(ProjectNum), '#', TRIM([BudgetPeriod]), '#', TRIM(BudgetName), '#', TRIM([BudgetDescription]))))) AS BudgetID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(b.[Company])))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(b.Company), '#', TRIM(b.AccountNum))))) AS AccountID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(b.[Company]), '#', TRIM(CostUnitNum))))) AS CostUnitID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(b.[Company]), '#', TRIM(ProjectNum))))) AS CostBearerID removed 2023-03-22 SB
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM([COMPANY]),'#',[ProjectNum]))) AS ProjectID -- added 2023-03-22 SB
	,b.PartitionKey AS PartitionKey

	,UPPER(b.Company) AS Company
	,CASE WHEN left(AccountNum,1) IN ('3','4','5','6','7','8','9') then BudgetFinance * -1 
	      ELSE BudgetFinance END AS BudgetFinance -- case logic added 2023-04-19 SB. Revenue account budget amounts need to be flipped
	,BudgetName AS [PeriodType]
	,IIF([Currency] = '€UR','EUR',trim([Currency])) As [Currency]
	,IIF([Currency] = 'SEK',1, ExchangeRate) AS ExchangeRate
	,[BudgetPeriod] 
	,IIF(BudgetPeriodDate = 0, '1900-01-01', CONVERT(date, CONCAT(LEFT(BudgetPeriodDate, 4), '-', Substring(BudgetPeriodDate, 5,2), '-', RIGHT(BudgetPeriodDate, 2)))) AS BudgetPeriodDate
	,IIF(BudgetPeriodDate = 0, 'Year', 'Month') AS BudgetType
	,[BudgetName]
	,[BudgetDescription]
	,trim([ProjectNum]) as ProjectNum -- added 2023-03-22 SB
	,'' AS [CostBearerNum]
	,ID AS [CostUnitNum]
	,b.[AccountNum] AS [AccountNum]
	,'' AS [AccountGroup]
	,IIF(trim(BudgetNo) IN ('5','6','50'), 'Project Budget', 'Account Budget')      AS BRes1
	,BudgetNo AS BRes2
	,[LineNo] AS BRes3
FROM stage.OCS_SE_FinanceBudget b
--where trim(BudgetNo) NOT IN ('5','6','50') OR (trim(BudgetNo)  IN ('5','6','50') and (BudgetFinance > 0 OR left(trim(accountnum),1) = '3')) removed 2023-05-09 SB

--  LEFT JOIN stage.vOCS_SE_Account a ON a.AccountNum = b.AccountNum  -- copied from AXISE script, added 2023-01-31 by SB
--where LEFT(BudgetPeriod, 4) > '2022' --and BudgetPeriodDate != 0
GO
PRINT N'Creating [stage].[AXL_DE_Supplier]'
GO
CREATE TABLE [stage].[AXL_DE_Supplier]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [varchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[MainSupplierName] [nvarchar] (50) NULL,
[SupplierName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[TelephoneNum] [nvarchar] (50) NULL,
[Email] [nvarchar] (100) NULL,
[City] [nvarchar] (50) NULL,
[ZIP] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[Region] [nvarchar] (50) NULL,
[SupplierCategory] [nvarchar] (50) NULL,
[SupplierType] [nvarchar] (50) NULL,
[SupplierResponsible] [nvarchar] (50) NULL,
[BankAccountNum] [nvarchar] (50) NULL,
[VATNum] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[SupplierABC] [nvarchar] (50) NULL,
[MinOrderQty] [decimal] (18, 4) NULL,
[Website] [nvarchar] (100) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[CodeOfConduct] [nvarchar] (50) NULL,
[Comments] [nvarchar] (500) NULL,
[SRes1] [nvarchar] (100) NULL,
[SRes2] [nvarchar] (100) NULL,
[SRes3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vAXL_DE_Supplier]'
GO

CREATE VIEW [stage].[vAXL_DE_Supplier] AS

SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#', TRIM(UPPER([SupplierNum]))))) AS SupplierID
    ,CONCAT([Company],'#',TRIM(UPPER([SupplierNum]))) AS SupplierCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256',[Company])) AS CompanyID
	,[PartitionKey]

	,[Company]
	,TRIM(UPPER([SupplierNum])) AS SupplierNum
	,[dbo].[ProperCase](TRIM(MainSupplierName)) AS MainSupplierName
	,[dbo].[ProperCase](TRIM(SupplierName)) AS SupplierName
	,TRIM([AddressLine1]) AS AddressLine1
    ,TRIM([AddressLine2]) AS AddressLine2
    ,TRIM([AddressLine3]) AS AddressLine3
	,[TelephoneNum]
	,[Email]
	,District
	,TRIM([City]) AS City
	,TRIM([ZIP]) AS ZIP
	,[Region] 
	,CountryName
	,[dbo].[ProperCase](TRIM(concat (addressline1+' '+ addressline2, null))) AS AddressLine
	,[dbo].[ProperCase](TRIM(concat_ws(',',coalesce([dbo].[ProperCase](CountryName),null),IIF(City= ' ',null,trim(substring(replace([dbo].[ProperCase](AddressLine3),' ', ''), 6, 100))),IIF(ZIP= ' ',null,([Addressline3]))
		,coalesce(IIF([addressline1]= ' ',null,[addressline1]),IIF([addressline2]= ' ',null,[addressline2]))
		,coalesce(IIF([addressline2]= ' ',null,[addressline2]),IIF([addressline3]= ' ',null,[addressline3]))))) AS FullAddressLine
	,TRIM([SupplierCategory]) AS SupplierCategory
	,TRIM(SupplierResponsible) AS SupplierResponsible
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [BankAccountNum])) AS [BankAccountNum] --required by Ian Morgan & approved by Emil T on 20200630
	,[VATNum]
	,TRIM([SupplierABC]) AS SupplierABC
	,CustomerNum
	,[Website]
	,[CodeOfConduct]
	,[MinOrderQty]
	,InternalExternal
	,Comments
FROM [stage].[AXL_DE_Supplier]
GROUP BY
	PartitionKey, Company, UPPER([SupplierNum]), MainSupplierName, SupplierName, AddressLine1,AddressLine2, AddressLine3, [TelephoneNum], [Email], District, ZIP, City, [Region], CountryName, SupplierCategory, SupplierResponsible, [BankAccountNum], [VATNum], SupplierABC, [Website], [CodeOfConduct], [MinOrderQty], InternalExternal, Comments, CustomerNum
GO
PRINT N'Creating [stage].[JEN_NB_OLine]'
GO
CREATE TABLE [stage].[JEN_NB_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderRelNum] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[ERPOrderStatus] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[DelivDate] [date] NULL,
[ConfirmedDelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[NeedbyDate] [date] NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[SumUnitCost] [decimal] (18, 4) NULL,
[SumUnitPrice] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[CurrExchRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (1) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[Site] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[SalesPerson] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (500) NULL,
[SalesReturnOrderNum] [nvarchar] (50) NULL,
[SalesReturnInvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vJEN_NB_OLine]'
GO
CREATE VIEW [stage].[vJEN_NB_OLine] AS
--COMMENT EMPTY FIELDS // ADD TRIM() INTO CustomerID,WarehouseID, PartID 23-01-03 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', OrderType, '#', OrderNum, '#', OrderLine, '#', OrderSubLine, '#', SalesReturnOrderNum, '#', SalesReturnInvoiceNum)))) AS SalesOrderID -- ext , '#', OrderRelNum, '#', InvoiceNum
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID 
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) ))))) AS PartID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,UPPER(CONCAT(Company, '#', OrderNum, '#', OrderLine, '#', OrderSubLine, '#', InvoiceNum)) AS SalesOrderCode
	,CONVERT(int, replace(convert(date, OrderDate),'-','')) AS SalesOrderDateID   --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT( Company,'#','') )))	AS ProjectID
	,PartitionKey 

	,UPPER(Company) AS Company 
	,UPPER(TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) )) AS CustomerNum
	,UPPER(TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) )) AS PartNum
	,OrderNum		AS SalesOrderNum
	,OrderLine		AS SalesOrderLine
	,OrderSubLine	AS SalesOrderSubLine
	,OrderType		AS SalesOrderType
	,ERPOrderStatus	AS SalesOrderCategory	--Added ERPOrderStatus here because SalesOrderCategory is unused field for JENS S.
	,OrderRelNum	AS SalesOrderRelNum
	,OrderDate		AS SalesOrderDate
	,NeedbyDate
	,DelivDate		AS ExpDelivDate
	,CAST('1900-01-01' AS date) AS ActualDelivDate
	,ConfirmedDelivDate
	,InvoiceNum		AS SalesInvoiceNum
	,OrderQty		AS SalesOrderQty
	,DelivQty
	,RemainingQty
	--,NULL AS SalesInvoiceQty
	--,''				AS UoM
	,UnitPrice
	,UnitCost
	,SumUnitPrice
	,SumUnitCost
	,CurrencyCode	AS Currency
	,CurrExchRate	AS ExchangeRate
	,OpenRelease
	,DiscountAmount
	,DiscountPercent
	--,''				AS PartType
	--,'0'				AS PartStatus
	,SalesPerson	AS SalesPersonName
	,TRIM(WarehouseCode) AS WarehouseCode
	--,'' AS SalesChannel
	,'Normal Order Handling' AS AxInterSalesChannel
	--,'' AS Department
	--,'' AS ProjectNum
	--,'' AS IndexKey
	--,'0' AS Cancellation
	--,'' AS SORes1
	--,'' AS SORes2
	--,'' AS SORes3
	,ReturnComment
	,SalesReturnOrderNum
	,SalesReturnInvoiceNum
	--,NULL AS [TotalMiscChrg]
FROM stage.JEN_NB_OLine
GO
PRINT N'Creating [stage].[FOR_PL_StockBalance]'
GO
CREATE TABLE [stage].[FOR_PL_StockBalance]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [varchar] (20) NULL,
[WarehouseCode] [nvarchar] (15) NULL,
[PartNum] [nvarchar] (40) NULL,
[LastStockTakeDate] [nvarchar] (50) NULL,
[MaxStockQty] [nvarchar] (25) NULL,
[StockBalance] [nvarchar] (25) NULL,
[StockValue] [nvarchar] (40) NULL,
[Currency] [nvarchar] (20) NULL,
[SalesRemainingQty] [nvarchar] (30) NULL,
[PurchaseRemainingqty] [nvarchar] (30) NULL,
[ReOrderLevel] [nvarchar] (30) NULL,
[SafetyStock] [nvarchar] (30) NULL,
[AvgCost] [nvarchar] (50) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vFOR_PL_StockBalance]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vFOR_PL_StockBalance]
	AS SELECT 
	CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum),'#',TRIM(WarehouseCode))))) AS ItemWarehouseID
	,UPPER(CONCAT(Company,'#',TRIM(PartNum),'#',TRIM(WarehouseCode))) AS ItemWarehouseCode
	,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID
	--,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum))))) AS SupplierID
	,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(WarehouseCode))))) AS WarehouseID
	,PartitionKey

	----------- Mandatory fields ------------

	,upper(trim(Company)) As Company
	,nullif(trim(WarehouseCode),'') as WarehouseCode
	,nullif(trim(PartNum),'') as PartNum
	,cast(StockBalance as decimal(18,4)) as StockBalance
	,cast(StockValue as decimal(18,4)) as StockValue
	,trim(Currency) as Currency
	
	----------- Other fields ------------
	, cast([LastStockTakeDate] as date) as LastStockTakeDate
	--, BinNum
	--, SupplierNum
	--, DelivTime
	--,LastStockTakeDate
	--,StockTakeDiff
	--,ExchangeRate
	,cast(SalesRemainingQty as decimal(18,4)) as SalesRemainingQty
	,cast(PurchaseRemainingqty as decimal(18,4)) as PurchaseRemainingqty
	,cast(AvgCost as decimal(18,4)) as AvgCost
	,cast(MaxStockQty as decimal(18,4)) as MaxStockQty
	--,CreatedTimeStamp
	--,ModifiedTimeStamp
	--,IsActiveRecord
	--,LastStdCostCalDate
	,cast(ReOrderLevel as decimal(18,4)) as ReOrderLevel
	,cast(SafetyStock as decimal(18,4)) as SafetyStock
	--,OptimalOrderQty
	--,SBRes1
	--,SBRes2
	--,SBRes3


	FROM [stage].[FOR_PL_StockBalance]
GO
PRINT N'Creating [dm_PT].[dimCustomer]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO


CREATE VIEW [dm_PT].[dimCustomer] AS
-- AS decided by Ian & Random Forest AB on the 7th May 2020, the data is spliting after data-warehouse for each Business Group
SELECT cust.[CustomerID]
      ,cust.[CompanyID]
      ,cust.[Company]
      ,cust.[CustomerNum]
      ,cust.[MainCustomerName]
      ,cust.[CustomerName]
      ,cust.[Customer]
      ,cust.[AddressLine1]
      ,cust.[AddressLine2]
      ,cust.[AddressLine3]
      ,cust.[TelephoneNum1]
      ,cust.[TelephoneNum2]
      ,cust.[Email]
      ,cust.[ZipCode]
      ,cust.[City]
      ,cust.[State]
      ,cust.[SalesDistrict]
      ,cust.[CountryCode]
      ,cust.[CountryName]
      ,cust.[Division]
      ,cust.[CustomerIndustry]
      ,cust.[CustomerSubIndustry]
      ,cust.[AddressLine]
      ,cust.[FullAddressLine]
      ,cust.[CustomerGroup]
      ,cust.[CustomerSubGroup]
      ,cust.[SalesPersonCode]
      ,cust.[SalesPersonName]
      ,cust.[SalesPersonResponsible]
      ,cust.[VATNum]
      ,cust.[OrganizationNum]
      ,cust.[AccountNum]
      ,cust.[InternalExternal]
      ,cust.[CustomerScore]
      ,cust.[CustomerType]
      ,cust.[CustomerCode]
      ,cust.[CustomerStatus]
      ,cust.[DUNS]
      ,cust.[DUNS_MatchScore]
      ,cust.[CRes1]
      ,cust.[CRes2]
      ,cust.[CRes3]
      ,cust.[is_inferred]
      ,cust.[is_deleted]
      ,cust.[is_validCountryCode]
      ,cust.[DUNS_Status]
FROM [dm].[DimCustomer] cust
LEFT JOIN dbo.Company com ON cust.Company = com.Company
WHERE com.BusinessArea = 'Power Transmission Solutions' AND com.[Status] = 'Active'
--It is a dynamic Company addition in the sub-dataset in a way that so long a company is added in its parent dataset, this company will automatically appear in its assigend Business Area sub-dataset.
--This company addtion should in its first hand appear in the dbo.Company with correct attributes.


--WHERE [Company] in ('ACZARKOV', 'AcornUK', 'BSIBELL', 'JDKJENSS', 'JDKKALTE', 'JFIJENSS', 'MNLMAK', 'JNOJENSS', 'NORNO', 'JSEJENSS', 'SSWSE', 'NomoSE', 'NomoDK', 'NomoFI', 'NomoNo', 'PASSEROT', 'SKSSCOFI', 'SCOFI', 'SMKFI', 'SNLSPRUI', 'SPRUITNL', 'SVESE')  -- The PT basket
GO
PRINT N'Creating [stage].[SKS_FI_StockTransaction]'
GO
CREATE TABLE [stage].[SKS_FI_StockTransaction]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[MANDT] [nvarchar] (8) NULL,
[SYSROWID] [nvarchar] (50) NOT NULL,
[COMPANY] [nvarchar] (8) NOT NULL,
[WAREHOUSECODE] [nvarchar] (50) NULL,
[TRANSTYPE] [nvarchar] (50) NULL,
[TRANSTYPEDESC] [nvarchar] (max) NULL,
[PARTNUM] [nvarchar] (50) NULL,
[TRANQTY] [nvarchar] (50) NULL,
[BINNUM] [nvarchar] (50) NULL,
[BARTCHNUM] [nvarchar] (50) NULL,
[TRANSACTIONDATE] [nvarchar] (50) NULL,
[CREATEDATE] [nvarchar] (50) NULL,
[TRANSACTIONTIME] [nvarchar] (20) NULL,
[ORDERNUM] [nvarchar] (50) NULL,
[INVOICENUM] [nvarchar] (50) NULL,
[COSTPRICE] [nvarchar] (50) NULL,
[SELLINGPRICE] [nvarchar] (50) NULL,
[CURRENCY] [nvarchar] (50) NULL,
[ISSUERRECEIVERCODE] [nvarchar] (50) NULL,
[TRANSOURCE] [nvarchar] (50) NULL,
[TRANVALUE] [nvarchar] (50) NULL,
[REFERENCE] [nvarchar] (50) NULL,
[SRES1] [nvarchar] (50) NULL,
[SRES2] [nvarchar] (50) NULL,
[SRES3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vSKS_FI_ProductionOrder]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vSKS_FI_ProductionOrder] AS

WITH CTE AS (
SELECT 
	[PartitionKey], [MANDT], [SYSROWID], [COMPANY], [WAREHOUSECODE], [TRANSTYPE], [TRANSTYPEDESC], [PARTNUM], [TRANQTY], [BINNUM], [BARTCHNUM], [TRANSACTIONDATE], [CREATEDATE], [TRANSACTIONTIME], [ORDERNUM], [INVOICENUM], [COSTPRICE], [SELLINGPRICE], [CURRENCY], [ISSUERRECEIVERCODE], [TRANSOURCE], [TRANVALUE], [REFERENCE], [SRES1], [SRES2], [SRES3]
	,CAST(CASE WHEN [WAREHOUSECODE] = 'F251' THEN 'FI25'
			WHEN [WAREHOUSECODE] = 'F261' THEN 'FI26'
			--WHEN [WAREHOUSECODE] = 'SE10' THEN 'SE10'
			WHEN [WAREHOUSECODE] = 'F201' THEN 'FI20'
		ELSE [WAREHOUSECODE] END  AS nvarchar(10)) AS SKSCompCode
FROM 
	[stage].[SKS_FI_StockTransaction]  
WHERE [WAREHOUSECODE] IN ('FI25','FI26', 'FI20')
	and (TRIM(partnum) != '' and PARTNUM is not null)    -- Filter out PartNum that are missing a value. These are related to subcontracting/service and should not affect the stockvalue. /ET 2022-08-18
),
VKORG AS (
	SELECT Company, VKORG FROM stage.SKS_FI_Part WHERE COMPANY IN ('SMKFI', 'SCOFI')
)

SELECT 
    CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(st.Company), '#', TRIM([SYSROWID]), '#',TRIM(PartNum))))) AS [ProductionOrderID]
    ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(st.Company)))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(st.Company),'#',TRIM(st.PartNum),'#', MAX(TRIM(VKORG.VKORG)))))) AS PartID 
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(st.[Company]),'#',TRIM(st.[WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(st.Company),'#',TRIM([SYSROWID]))))) AS SalesOrderNumID  
	,[PartitionKey] 
	
    ,UPPER(TRIM(st.[Company])) AS "Company"                                  
    ,UPPER(TRIM([SYSROWID])) AS "ProductionOrderNum"                                   
    ,IIF(ISNUMERIC([PARTNUM]) = 1,CAST(CAST(trim([PARTNUM]) AS int)as nvarchar(50)),(trim([PARTNUM]))) AS   "PartNum"                                                                   
    ,'Component' as [PartType]
    ,TRY_CONVERT(decimal(18,4), IIF(CHARINDEX('-',TRANQTY) > 0, '-' + REPLACE(TRIM(TranQty), '-',''), TRIM(TRANQTY))) AS "OrderQuantity"
    ,TRY_CONVERT(decimal(18,4), IIF(CHARINDEX('-',TRANQTY) > 0, '-' + REPLACE(TRIM(TranQty), '-',''), TRIM(TRANQTY))) AS "CompletedQuantity"                        
    ,'Completed' as [Status] 
	,CASE WHEN TRANSACTIONDATE = '' OR TRANSACTIONDATE is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, TRANSACTIONDATE) END AS "OrderCreateDate"   
	,CASE WHEN TRANSACTIONDATE = '' OR TRANSACTIONDATE is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, TRANSACTIONDATE) END AS "StartDate"
	,CASE WHEN TRANSACTIONDATE = '' OR TRANSACTIONDATE is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, TRANSACTIONDATE) END AS "EndDate"                                                               
    ,UPPER(TRIM([WarehouseCode])) AS "WarehouseCode"                               
    ,UPPER(TRIM([SYSROWID])) AS "SalesOrderNum"                              
    ,'EUR' AS [Currency]
    , 1 as [ExchangeRate]
    ,TRY_CONVERT(decimal(18,4), IIF(CHARINDEX('-',TRANVALUE) > 0, '-' + REPLACE(TRIM(TRANVALUE), '-',''), TRIM(TRANVALUE))) AS [MaterialCost]
	
FROM [stage].SKS_FI_StockTransaction st
		LEFT JOIN VKORG ON st.Company = VKORG.COMPANY
WHERE TransType='261' and st.Company IN ('SMKFI', 'SCOFI')
GROUP BY st.Company, [SYSROWID], PartNum, st.[WAREHOUSECODE], TRANQTY, TRANSACTIONDATE, TRANVALUE, [PartitionKey]
GO
PRINT N'Creating [dm_AX].[fctGeneralLedger]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO






CREATE VIEW [dm_AX].[fctGeneralLedger] AS 
SELECT 
 [GeneralLedgerID]
,[AccountID]
,[CustomerID]
,[SupplierID]
,[CompanyID]
,[ProjectID]
,[CostUnitID]
,[CostBearerID]
,[PartitionKey]
,[Company]
,[AccountNum]
,[CostUnitNum]
,[CostBearerNum]
,[JournalType]
,[JournalDate]
,[JournalNum]
,[JournalLine]
,[AccountingDate]
,[Description]
,[Currency]
,[ExchangeRate]
,[InvoiceAmount]
,[InvoiceAmountLC]
,[CustomerNum]
,[SupplierNum]
,[SalesInvoiceNum]
,[PurchaseInvoiceNum]
,[SupplierInvoiceNum]
,[LinkToOriginalInvoice]
,[DeliveryCountry]
,[TransactionNum]
,[VATCode]
,[VATCodeDesc]
,[GLRes1]
,[GLRes2]
,[GLRes3]
  FROM [dm].[FactGeneralLedger]
WHERE [Company] in ('AXISE','AXHSE') -- HQ basket
GO
PRINT N'Creating [stage].[WID_FI_StockTransaction]'
GO
CREATE TABLE [stage].[WID_FI_StockTransaction]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SysRowID] [nchar] (8) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[OrderNum] [nchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[BinNumber] [nvarchar] (50) NULL,
[BatchID] [nvarchar] (50) NULL,
[FIFOBatchID] [nvarchar] (50) NULL,
[SupplierBatchID] [nvarchar] (50) NULL,
[TranDate] [date] NULL,
[CreateDate] [date] NULL,
[CreateTime] [nvarchar] (10) NULL,
[TranDT] [nvarchar] (50) NULL,
[TranType] [nchar] (2) NULL,
[TranTypeDesc] [varchar] (100) NULL,
[TranSource] [nvarchar] (50) NULL,
[Reference] [nvarchar] (50) NULL,
[IssuerReceiverCode] [nvarchar] (50) NULL,
[CostPrice] [decimal] (18, 4) NULL,
[SellingPrice] [decimal] (18, 4) NULL,
[TranQty] [decimal] (18, 4) NULL,
[TranValue] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (10) NULL,
[ExchangeRate] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vWID_FI_StockTransaction]'
GO
CREATE VIEW [stage].[vWID_FI_StockTransaction] AS 
--ADD UPPER()TRIM() INTO PartID,CustomerID 2022-12-15 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(st.[Company], '#', TRIM([SysRowID])))) AS StockTransactionID
	,st.[Company]
	,TRIM([WarehouseCode]) AS WarehouseCode
	,iif(CONVERT(date, [TranDate]) = '2012-10-31' and [TranTypeDesc] = 'Incoming Goods','OB',TranType) AS TransactionCode --CONCAT([Company], '#', TRIM([SysRowID]))
	,iif(CONVERT(date, [TranDate]) = '2012-10-31' and [TranTypeDesc] = 'Incoming Goods','Opening balance',[TranTypeDesc]) AS TransactionDescription
	,IIF(TRIM([IssuerReceiverCode])='', NULL,TRIM(IssuerReceiverCode)) AS IssuerReceiverNum
	,IIF(TRIM([OrderNum])='', NULL,TRIM(OrderNum)) AS OrderNum
	--,NULL AS OrderLine
	,IIF(TRIM([InvoiceNum])='', NULL,TRIM(InvoiceNum)) AS InvoiceNum
	--,NULL AS InvoiceLine
	,[PartNum]
	,IIF(TRIM([BinNumber])='', NULL,TRIM(BinNumber)) AS BinNum
	,IIF(TRIM([BatchID])='', NULL,TRIM(BatchID)) AS BatchNum
	,CONVERT(date, [TranDate]) AS TransactionDate
	,[CreateTime] AS TransactionTime
	,[TranQty] AS TransactionQty
	,IIF([PartNum] = '722018', 0, [TranValue]) AS TransactionValue -- to adjust the largiest straingh value in ERP iScala, a temp solution until Lauri find a good one
--	,[TranValue]  AS TransactionValue
	,[CostPrice]
	,[SellingPrice] AS SalesUnitPrice
	,IIF(TRIM([Currency])='', NULL,TRIM(Currency)) AS Currency
	,[Reference]
	,CONVERT(date, [CreateDate]) AS AdjustmentDate
--	,CASE WHEN c.CustomerGroup = 'CONCERN' OR c.CustomerGroup = 'INTERNAL SALES' THEN 'Internal'
--		ELSE 'External' END AS InternalExternal
	,IIF([TranTypeDesc] IN ('Incoming goods', 'Outgoing goods'), 'External', 'Internal') AS InternalExternal
	--,'' AS STRes1
	--,'' AS STRes2
	--,'' AS STRes3
--  ,FIFOBatchID
--  ,SupplierBatchID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',st.[Company])) AS CompanyID
    ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(st.[Company]),'#',TRIM([PartNum]))))) AS PartID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(st.[Company],'#',TRIM([PartNum])))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(st.[Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,IIF(TranSource <> '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(st.[Company],'#',TRIM([InvoiceNum])))), NULL) AS PurchaseInvoiceID
	,IIF(TranSource <> '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(st.[Company],'#',TRIM([OrderNum])))), NULL) AS PurchaseOrderNumID
	,IIF(TranSource = '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(st.[Company],'#',TRIM([OrderNum])))), NULL) AS SalesOrderNumID
	,IIF(TranSource = '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(st.[Company],'#',TRIM([InvoiceNum])))), NULL) AS SalesInvoiceID
	,IIF(TranSource = '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(st.[Company]),'#',TRIM([IssuerReceiverCode]))))), NULL) AS CustomerID
	--,IIF(TranSource = '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(st.[Company],'#',TRIM([IssuerReceiverCode])))), NULL) AS CustomerID
	,IIF(TranSource <> '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(st.[Company],'#',TRIM([IssuerReceiverCode])))), NULL) AS SupplierID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',TRIM([Currency]))) AS CurrencyID
	,st.PartitionKey
	,[SysRowID] AS IndexKey
FROM [stage].[WID_FI_StockTransaction] st
	--LEFT JOIN dw.Customer c ON st.Company = c.Company AND st.IssuerReceiverCode = c.CustomerNum
GO
PRINT N'Creating [stage].[AXL_DN_SalesLedger]'
GO
CREATE TABLE [stage].[AXL_DN_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceAmount] [decimal] (18, 4) NULL,
[RemainAmount] [decimal] (18, 4) NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vAXL_DN_SalesLedger]'
GO
CREATE VIEW [stage].[vAXL_DN_SalesLedger] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(sl.Company, '#', TRIM(sl.CustNum), '#', TRIM(sl.InvoiceNum))))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(sl.Company))) AS CompanyID
	,UPPER(CONCAT(sl.Company, '#', TRIM(sl.CustNum), '#', TRIM(sl.InvoiceNum))) AS SalesLedgerCode
	,sl.PartitionKey

	,UPPER(sl.Company) AS Company
	,UPPER(TRIM(sl.CustNum)) AS CustomerNum
	,TRIM(sl.InvoiceNum) AS [SalesInvoiceNum]
	,IIF(so.InvoiceDate = '' OR so.InvoiceDate IS NULL, '1900-01-01', so.InvoiceDate) AS [SalesInvoiceDate] --
	,CONVERT(date, DueDate) AS SalesDueDate
	,CONVERT(date, LastPaymentDate) AS LastPaymentDate
	,[InvoiceAmount]
	,[RemainAmount] AS [RemainingInvoiceAmount]
	,NULL AS CashDiscOffered
	,NULL AS CashDiscUsed
	,NULL AS [ExchangeRate]
	,NULL AS [Currency]
	,NULL AS [VATAmount]
	,NULL AS [VATCode]
	,NULL AS [PayToName]
	,NULL AS [PayToCity]
	,NULL AS [PayToContact]
	,NULL AS [PaymentTerms]
	,sl.Res1 AS SLRes1
	,sl.Res2 AS SLRes2
	,sl.Res3 AS SLRes3
FROM stage.AXL_DN_SalesLedger sl
	LEFT JOIN stage.AXL_CZ_SOLine so ON TRIM(sl.InvoiceNum) = TRIM(so.InvoiceNum)
WHERE DueDate > '2015-01-01'
GROUP BY
	sl.PartitionKey, sl.Company, sl.CustNum, sl.InvoiceNum, sl.Res2, sl.Res1, sl.Res3, sl.[InvoiceAmount], sl.[RemainAmount], so.InvoiceDate, DueDate, LastPaymentDate
GO
PRINT N'Creating [stage].[ARK_PI_SOLine]'
GO
CREATE TABLE [stage].[ARK_PI_SOLine]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[OrderDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderRelNum] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[InvoiceType] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[IndexKey] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[BusinessChain] [nvarchar] (50) NULL,
[Site] [nvarchar] (50) NULL,
[Res1] [nvarchar] (50) NULL,
[Res2] [nvarchar] (50) NULL,
[Res3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vARK_PI_SOLine]'
GO

CREATE VIEW [stage].[vARK_PI_SOLine] AS
--COMMENT EMPTY FIELDS // ADD UPPER()TRIM() INTO CustomerID 2022-12-16 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(SO.Company,'#',SO.CustNum,'#',SO.PartNum,'#',SO.OrderNum,'#',SO.InvoiceNum,'#',SO.InvoiceLine))) AS SalesInvoiceID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(SO.Company,'#',SO.CustNum, '#', SO.InvoiceNum))) AS SalesLedgerID
    ,CONVERT([binary](32),HASHBYTES('SHA2_256',SO.Company)) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(SO.Company),'#',TRIM(SO.CustNum))))) AS CustomerID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(SO.Company,'#',TRIM(SO.CustNum)))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(SO.Company),'#',TRIM(SO.PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(SO.Company), '#', TRIM(SO.WarehouseCode))))) AS WarehouseID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(SO.Company,'#',SO.OrderNum,'#',SO.OrderSubLine))) AS SalesOrderID --OrderRelNum Not OrderSubLine --,'#',SO.InvoiceNum --Redundent?
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(SO.Company,'#',TRIM(SO.OrderNum)))) AS SalesOrderNumID --Redundent?
	,CONCAT(SO.Company,'#', SO.OrderNum,'#', SO.OrderLine) AS SalesOrderCode -- should match dw.SalesOrder.SalesOrderCode
	,CONCAT(SO.Company,'#',SO.InvoiceNum,'#',SO.InvoiceLine) AS SalesInvoiceCode --IndexKey  --Redundent?
	,CONVERT(int, replace(convert(date,SO.InvoiceDate),'-','')) AS SalesInvoiceDateID  --Redundent?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',''))))	AS ProjectID
	,SO.PartitionKey

	,SO.Company
	,[dbo].[ProperCase](SO.SalesPerson) AS SalesPersonName
	,TRIM(SO.CustNum) AS CustomerNum
	,CASE WHEN TRIM(SO.PartNum) = '-NULL-' AND TRIM(SO.OrderNum) IS NULL THEN 'TextLine' ELSE TRIM(SO.PartNum) END AS PartNum -- ref TEAMS chat AxInter BI - Onboaring Arkov (Validation feedback & Way forward) fr Jiri 20210310
	,Res1 AS [PartType]
	,TRIM(SO.OrderNum) AS SalesOrderNum
	,SO.OrderLine AS [SalesOrderLine]
	,SO.OrderSubLine AS [SalesOrderSubLine]
	,CASE WHEN SO.OrderType = 'webshop' THEN 1 ELSE 0 END AS SalesOrderType
	,SO.InvoiceNum AS [SalesInvoiceNum]
	,SO.InvoiceLine AS [SalesInvoiceLine]
	,InvoiceType AS [SalesInvoiceType]
	,CONVERT(date, SO.InvoiceDate) AS SalesInvoiceDate
	,ActualDeliveryDate AS [ActualDelivDate]
	,SO.SellingShipQty AS [SalesInvoiceQty]
	--,'' AS [UoM]
	,SO.UnitPrice
	,SO.UnitCost
	,CASE WHEN (SO.UnitPrice * SO.SellingShipQty) = 0 THEN 0 ELSE SO.DiscountAmount / (SO.UnitPrice * SO.SellingShipQty) END AS [DiscountPercent]
	,SO.DiscountAmount
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	,SO.TotalMiscChrg
	,0 AS [VATAmount]
	,Currency
	,ExchangeRate
	,SO.WarehouseCode
	,SO.CreditMemo
	,CASE WHEN SalesChannel = 'POS' OR SalesChannel = 'WMS' THEN 'Over-the-counter'
		WHEN SalesChannel = 'WEBSHOP' OR SalesChannel = 'www.arkov.cz' THEN 'www.arkov.cz'
		WHEN SalesChannel = 'WEBSHOP' OR SalesChannel = 'www.arkov.sk' THEN 'www.arkov.sk'
		WHEN SalesChannel = 'EDI' THEN 'EDI'
		ELSE 'Normal Order Handling' END AS SalesChannel
	,SO.BusinessChain AS [Department]
	--,NULL AS DeliveryAddress
	--,'' AS [CostBearerNum]
	--,'' AS [CostUnitNum]
	--,'' AS [ReturnComment]
	--,'' AS [ReturnNum]
	--,'' AS [ProjectNum]
--	,SO.Indexkey -- ta inte in så längre
	--,'' AS [IndexKey]
	--,'' AS SIRes1
	--,'' AS SIRes2
	--,'' AS SIRes3

FROM 
	stage.ARK_PI_SOLine AS SO
--WHERE [InvoiceDate] >= DATEADD(year, -1, GETDATE()) --Added this where clause as semi-incremental load functinoality since it doesn't work easily on meta-param table. /SM 2021-10-01	
--GROUP BY
--	SO.PartitionKey, SO.Company, SO.SalesPerson, SO.CustNum, SO.PartNum, SO.OrderNum, SO.OrderLine, SO.OrderSubLine, SO.OrderType, SO.InvoiceNum, SO.InvoiceLine, SO.InvoiceType, SO.InvoiceDate, SO.ActualDeliveryDate, SO.SellingShipQty, SO.UnitPrice, SO.UnitCost, SO.DiscountAmount, SO.TotalMiscChrg, SO.WarehouseCode, SO.[Site], SO.CreditMemo, SO.ExchangeRate, SO.Currency, SO.SalesChannel, SO.BusinessChain, Res1
GO
PRINT N'Creating [stage].[MAK_NL_Warehouse]'
GO
CREATE TABLE [stage].[MAK_NL_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseID] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL,
[WarehouseDistrict] [nvarchar] (50) NULL,
[WarehouseAdress] [nvarchar] (100) NULL,
[WarehouseDescription] [nvarchar] (max) NULL,
[WarehouseType] [nvarchar] (50) NULL,
[WarehouseCountry] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vMAK_NL_Warehouse]'
GO

CREATE VIEW [stage].[vMAK_NL_Warehouse] AS 

-- We dont have to confuse ourselves. Even though the logic in the others tables is different, the result is the same.
-- At the end [stage].[MAK_NL_Warehouse].WarehouseID = [stage].[MAK_NL_oline].WarehouseCode or [stage].[MAK_NL_soline].WarehouseCode

SELECT 
		CONVERT([binary](32),HASHBYTES('SHA2_256',upper(CONCAT(trim(Company),'#',trim([WarehouseID]))))) AS WareHouseID
		,[PartitionKey]

      ,[Company]
      ,[WarehouseID] AS [WarehouseCode]
      ,[WarehouseName]
      ,[WarehouseDistrict]
      ,[WarehouseAdress]	AS WarehouseAddress
      ,[WarehouseDescription]
      ,[WarehouseType]
      ,[WarehouseCountry]
	  --,'' AS WarehouseSite
  FROM [stage].[MAK_NL_Warehouse]
GO
PRINT N'Creating [stage].[FOR_SE_Part]'
GO
CREATE TABLE [stage].[FOR_SE_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartDescription] [nvarchar] (max) NULL,
[PartDescription2] [nvarchar] (100) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[ProductGroup2] [nvarchar] (50) NULL,
[ProductGroup3] [nvarchar] (50) NULL,
[ProductGroup4] [nvarchar] (50) NULL,
[Site] [nvarchar] (50) NULL,
[CommodityCode] [nvarchar] (14) NULL,
[CountryOfOrigin] [nvarchar] (50) NULL,
[NetWeight] [decimal] (18, 8) NULL,
[PartResponsible] [nvarchar] (50) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[ReorderLevel] [decimal] (22, 8) NULL
)
GO
PRINT N'Creating [stage].[vFOR_SE_Part]'
GO
CREATE view [stage].[vFOR_SE_Part] AS
--COMMENT EMPTY FIELDS 2022-12-20 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Company])))) AS CompanyID
	,UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))) AS PartCode
	,PartitionKey

	,UPPER([Company]) AS [Company]
	,UPPER(TRIM([PartNum])) AS PartNum
	--,'' AS [PartName]
	,[PartDescription]
	,[PartDescription2]
	--,'' AS [PartDescription3]
	--,NULL AS MainSupplier
	--,NULL AS AlternativeSupplier
	,[ProductGroup]
	,[ProductGroup2]
	,[ProductGroup3]
	,[ProductGroup4]
	--,'' AS [Brand]
	,[CommodityCode]
	--,'' AS PartReplacementNum
	--,'' AS PartStatus
	,[CountryOfOrigin]
	,[NetWeight]
	--,'' AS UoM
	--,'' AS [Material]
	--,'' AS [Barcode]
	,[ReOrderLevel]
	,PartResponsible
	--,'' AS [StartDate]
	--,'' AS [EndDate]
FROM [stage].[FOR_SE_Part]
--GROUP BY 
--      [PartitionKey],[Company],[PartNum],[PartDescription],[PartDescription2],[ProductGroup],[ProductGroup2],[ProductGroup3],[CommodityCode],[CountryOfOrigin],[NetWeight],[ReorderLevel], [ProductGroup4], PartResponsible
GO
PRINT N'Creating [dm_PT].[fctPurchaseOrder]'
GO
CREATE VIEW [dm_PT].[fctPurchaseOrder] AS

SELECT 
 po.[PurchaseOrderID]
,po.[PurchaseOrderNumID]
,po.[PurchaseInvoiceID]
,po.[CompanyID]
,po.[SupplierID]
,po.[CustomerID]
,po.[PartID]
,po.[WarehouseID]
,po.[CurrencyID]
,po.[PurchaseOrderDateID]
,po.[PurchaseInvoiceDateID]
,po.[Company]
,po.[PurchaseOrderNum]
,po.[PurchaseOrderLine]
,po.[PurchaseOrderSubLine]
,po.[PurchaseOrderType]
,po.[PurchaseOrderDate]
,po.[PurchaseOrderStatus]
,po.[OrgReqDelivDate]
,po.[CommittedDelivDate]
,po.[CommittedShipDate]
,po.[ActualDelivDate]
,po.[ReqDelivDate]
,po.[PurchaseInvoiceNum]
,po.[PartNum]
,po.[SupplierNum]
,po.[SupplierPartNum]
,po.[SupplierInvoiceNum]
,po.[DelivCustomerNum]
,po.[PartStatus]
,po.[OrderQty]
,po.[ReceiveQty]
,po.[InvoiceQty]
,po.[MinOrderQty]
,po.[UoM]
,po.[UnitPrice]
,po.[DiscountPercent]
,po.[DiscountAmount]
,po.[ExchangeRate]
,po.[Currency]
,po.[PurchaserName]
,po.[WarehouseCode]
,po.[ReceivingNum]
,po.[DelivTime]
,po.[PurchaseChannel]
,po.[Documents]
,po.[Comments]
,po.[PORes1]
,po.[PORes2]
,po.[PORes3]
,po.[InvoiceStatus]
,po.[DaysSinceOrder]
,po.[OrgCommittedDelivDate]
,po.[IsOrderClosed]
FROM [dm].[FactPurchaseOrder] po
LEFT JOIN dbo.Company com ON po.Company = com.Company
WHERE com.BusinessArea = 'Power Transmission Solutions' AND com.[Status] = 'Active'


--WHERE [Company] in ('ACZARKOV', 'AcornUK', 'BSIBELL', 'JDKJENSS', 'JDKKALTE', 'JFIJENSS', 'MNLMAK', 'JNOJENSS', 'JNOORBEL', 'JSEJENSS', 'JSESKSSW', 'NORNO', 'SSWSE', 'NomoSE', 'NomoDK', 'NomoFI', 'NomoNo', 'PASSEROT', 'SKSSCOFI', 'SCOFI', 'SMKFI', 'SNLSPRUI', 'SVESE')  -- The PT basket --
GO
PRINT N'Creating [stage].[CER_FI_Part]'
GO
CREATE TABLE [stage].[CER_FI_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartDescription] [nvarchar] (25) NULL,
[PartDescription2] [nvarchar] (25) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[ProductGroup2] [nvarchar] (50) NULL,
[CommodityCode] [nvarchar] (14) NULL,
[CountryOfOrigin] [nvarchar] (50) NULL,
[NetWeight] [decimal] (18, 8) NULL,
[SupplierCode] [nvarchar] (10) NULL,
[ReorderLevel] [decimal] (20, 8) NULL,
[EAN] [nvarchar] (50) NULL,
[ProdCategory] [nvarchar] (50) NULL,
[ProdGroup] [nvarchar] (50) NULL,
[MainSupplier] [nvarchar] (50) NULL,
[AlternativeSupplier] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_FI_Part]'
GO
CREATE VIEW [stage].[vCER_FI_Part] AS
--COMMENT EMPTY FIELDS // ADD TRIM()UPPER() 2022-12-21 VA
SELECT 
	--CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',[PartNum]))) AS PartID
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',[Company])) AS CompanyID
	,CONCAT([Company],'#',[PartNum]) AS PartCode
	,PartitionKey

	,[Company]
	,[PartNum]
	--,'' AS [PartName]
	,[PartDescription]
	,[PartDescription2]
	--,''AS [PartDescription3]
	,MainSupplier
	,AlternativeSupplier
	,[ProductGroup]
	,[ProductGroup2]
	,ProdCategory AS [ProductGroup3]
	,ProdGroup AS [ProductGroup4]
	--,'' AS [Brand]
	,[CommodityCode]
	--,'' AS PartReplacementNum
	--,'' AS PartStatus
	,[CountryOfOrigin]
	,[NetWeight]
	--,'' AS [UoM]
	--,'' AS [Material]
	,EAN AS [Barcode]
	,[ReOrderLevel]
	--,'' AS PartResponsible
	--,'' AS [StartDate]
	--,'' AS [EndDate]

FROM [stage].[CER_FI_Part]
GO
PRINT N'Creating [dm_AX].[dimCostUnit]'
GO


CREATE VIEW [dm_AX].[dimCostUnit] AS 

SELECT 
 [CostUnitID]
,[PartitionKey]
,[CostUnitCode]
,[CompanyID]
,[Company]
,[CostUnitNum]
,[CostUnitName]
,[CostUnitStatus]
,[CostUnitGroup]
,[CostUnitGroup2]
,[CostUnitGroup3]
FROM [dm].[DimCostUnit]
WHERE [Company] in ('AXISE','AXHSE') -- HQ basket
GO
PRINT N'Creating [stage].[ARK_PI_Part]'
GO
CREATE TABLE [stage].[ARK_PI_Part]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (8) NULL,
[PartNum] [nvarchar] (100) NULL,
[PartName] [nvarchar] (100) NULL,
[PartDescription] [nvarchar] (600) NULL,
[PartDescription2] [nvarchar] (600) NULL,
[ProductGroup] [nvarchar] (200) NULL,
[ProductGroup2] [nvarchar] (200) NULL,
[ProductGroup3] [nvarchar] (200) NULL,
[ProductGroup4] [nvarchar] (200) NULL,
[Brand] [nvarchar] (50) NULL,
[Model] [nvarchar] (50) NULL,
[CommodityCode] [nvarchar] (50) NULL,
[CountryOfOrigin] [nvarchar] (50) NULL,
[NetWeight] [decimal] (18, 4) NULL,
[Volume] [decimal] (18, 4) NULL,
[Material] [nvarchar] (50) NULL,
[ReorderLevel] [decimal] (18, 4) NULL,
[PartStatus] [nvarchar] (50) NULL,
[StartDate] [date] NULL,
[EndDate] [date] NULL,
[Res1] [nvarchar] (50) NULL,
[Res2] [nvarchar] (50) NULL,
[Res3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vARK_PI_Part]'
GO
CREATE VIEW [stage].[vARK_PI_Part] AS
--ADD TRIM() INTO PartID 2022-12-16 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([PartNum]))))) AS PartID
	,CONCAT([Company], '#', TRIM([PartNum])) AS PartCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [Company])) AS CompanyID
	,PartitionKey

	,[Company]
	,TRIM([PartNum]) AS PartNum
	,LEFT([PartName], 100) AS [PartName]
	,[PartDescription]
	,[PartDescription2]
	,'Part' AS [PartDescription3]
	,NULL AS MainSupplier
	,NULL AS AlternativeSupplier
	,[ProductGroup]
	,[ProductGroup2]
	,[ProductGroup3]
	,[ProductGroup4]
	,[Brand]
	--,'' AS [Barcode]
	--,'' AS UOM
	,MAX([CommodityCode]) AS [CommodityCode]
	,[CountryOfOrigin]
	,[NetWeight]
	,[Volume]
	,[Material]
	,PartStatus
	--,'' AS [PartReplacementNum]
	--,'' AS [PartResponsible]
	,[ReorderLevel] AS [ReOrderLevel]
	,[StartDate]
	,[EndDate]

FROM 
	[stage].[ARK_PI_Part]
WHERE [PartNum] NOT IN ('TextLine', 'ServicePurchase')

GROUP BY
	PartitionKey, [Company], [PartNum], LEFT([PartName],100), [PartDescription], [PartDescription2], [ProductGroup],  [ProductGroup2], [ProductGroup3], [ProductGroup4], [Brand], [CountryOfOrigin], [NetWeight], [Volume], [Material], [ReorderLevel], [StartDate], [EndDate], PartStatus --, [CommodityCode]

-- Added as a quick fix to the null partNum relation to the invoice table. Added as a union to make the logic visible 
-- Should be replaced with Inferred member logic later /SM 2021-04-19
/*
UNION ALL

SELECT
	0x655F5AD0E529617C17DE44A8AB611798347A1DED06EA54AC1C79DAC013BEFEE8 AS PartID
	,CONCAT('ACZARKOV', '#', 'TextLine') AS PartCode
	,0x0C506A3C3C1F5F2AD836AC48E636BA9A9E1153166018D0E47910ADA53BD8BB3E AS CompanyID
	,'20210421'	AS PartitionKey
	,'ACZARKOV' AS [Company]
	,'TextLine' AS PartNum -- TextLine it will not work
	,'Service' AS [PartName]
	,'Service' AS	[PartDescription]
	,''	AS [PartDescription2]
	,'Service' AS [PartDescription3]
	,NULL AS MainSupplier
	,NULL AS AlternativeSupplier
	,'Service' AS [ProductGroup]
	,'' AS [ProductGroup2]
	,'' AS [ProductGroup3]
	,'' AS [ProductGroup4]
	,'' AS [Brand]
	,'' AS [Barcode]
	,'H' AS UOM
	,'' AS [CommodityCode]
	,'' AS [CountryOfOrigin]
	,0 AS [NetWeight]
	,0 AS [Volume]
	,'' AS [Material]
	,'' AS PartStatus
	,'' AS [PartReplacementNum]
	,'' AS [PartResponsible]
	,0 AS  [ReOrderLevel]
	,''	AS StartDate
	,''	AS EndDate

UNION ALL

SELECT
	0x655F5AD0E529617C17DE44A8AB611798347A1DED06EA54AC1C79DAC013BEFEE9 AS PartID
	,CONCAT('ACZARKOV', '#', 'ServicePurchase') AS PartCode
	,0x0C506A3C3C1F5F2AD836AC48E636BA9A9E1153166018D0E47910ADA53BD8BB3E AS CompanyID
	,'20211101'	AS PartitionKey
	,'ACZARKOV' AS [Company]
	,'ServicePurchase' AS PartNum
	,'Service' AS [PartName]
	,'Service' AS	[PartDescription]
	,''	AS [PartDescription2]
	,'Service' AS [PartDescription3]
	,NULL AS MainSupplier
	,NULL AS AlternativeSupplier
	,'Service' AS [ProductGroup]
	,'' AS [ProductGroup2]
	,'' AS [ProductGroup3]
	,'' AS [ProductGroup4]
	,'' AS [Brand]
	,'' AS [Barcode]
	,'H' AS UOM
	,'' AS [CommodityCode]
	,'' AS [CountryOfOrigin]
	,0 AS [NetWeight]
	,0 AS [Volume]
	,'' AS [Material]
	,'' AS PartStatus
	,'' AS [PartReplacementNum]
	,'' AS [PartResponsible]
	,0 AS  [ReOrderLevel]
	,''	AS StartDate
	,''	AS EndDate
*/
GO
PRINT N'Creating [stage].[JEN_NO_StockBalance]'
GO
CREATE TABLE [stage].[JEN_NO_StockBalance]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PartNum] [nvarchar] (70) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[FIFOValue] [decimal] (18, 4) NULL,
[StockBalance] [decimal] (18, 4) NULL,
[ReservedQty] [decimal] (18, 4) NULL,
[OptimalOrderQty] [decimal] (18, 4) NULL,
[BackOrderQty] [decimal] (18, 4) NULL,
[QtyOrdered] [decimal] (18, 4) NULL,
[StockTakDiff] [decimal] (18, 4) NULL,
[DelivTimeDesc] [nvarchar] (50) NULL,
[DelivTimeUnit] [int] NULL,
[DelivTimeToWHS] [int] NULL,
[ReOrderLevel] [decimal] (18, 4) NULL,
[DefaultBinNo] [nvarchar] (12) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[StockTakDate] [date] NULL,
[StdCostLaCaD] [date] NULL,
[DelivDateSupplier] [date] NULL,
[DelivDateCust] [date] NULL,
[OrderDateSupplier] [date] NULL,
[AvgCost] [decimal] (18, 4) NULL,
[LandedCost] [decimal] (18, 4) NULL,
[BatchNumber] [nvarchar] (50) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[MaxStockQty] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vJEN_NO_StockBalance]'
GO

CREATE VIEW [stage].[vJEN_NO_StockBalance] AS
--COMMENT EMPTY FIELDS // ADD UPPER()TRIM() INTO WarehouseID,PartID 2022-12-22 VA
--ADD TRIM()UPPER() INTO SupplierID 23-01-24 VA
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([PartNum]),'#',TRIM([WarehouseCode]),'#',TRIM([WarehouseCode]),'#',MAX([FIFOValue]),'#',MAX([StockTakDate]),'#'
	,MAX([StdCostLaCaD]),'#',MAX([DelivDateSupplier]),'#',MAX([DelivDateCust]),'#',MAX([DelivDateCust])))) AS ItemWarehouseID
	,CONCAT([Company],'#',TRIM([PartNum]),'#',TRIM([SupplierNum])) AS ItemWarehouseCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',[Company])) AS CompanyID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([SupplierNum])))) AS SupplierID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([PartNum])))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([WarehouseCode])))) AS WarehouseID
	,[PartitionKey]

	,TRIM([WarehouseCode]) AS WarehouseCode
	,CurrencyCode AS Currency
	,[Company]
	,TRIM([DefaultBinNo]) AS BinNum
	,BatchNumber AS BatchNum
	,[SupplierNum]
	,TRIM([PartNum]) AS PartNum
	,[DelivTimeUnit] AS [DelivTime]
	,MAX(convert(date, [StockTakDate])) AS LastStockTakeDate
	,MAX(convert(date, [StdCostLaCaD])) AS LastStdCostCalDate
	--,0 AS SafetyStock
	,MaxStockQty
	,[StockBalance]
	,AvgCost*[StockBalance] AS StockValue
	,AvgCost
	,[ReservedQty]		AS ReserveQty
	,[BackOrderQty]		AS BackOrderQty
	,[QtyOrdered]		AS OrderQty
	,[StockTakDiff]		AS StockTakeDiff
	,[ReOrderLevel]
	,[OptimalOrderQty]
	--,'' AS SBRes1
	--,'' AS SBRes2
	--,'' AS SBRes3
	,MAX([FIFOValue]) AS [FIFOValue]
	--,'' AS [DelivTimeToWHS]-- will not be sent out to new companies, not delete in DW for that use as reservation
	--,'' AS [DelivTimeDesc]-- will not be sent out to new companies, not delete in DW for that use as reservation
	--,'' AS [DaysOnStock]
--	,CASE WHEN TRIM(DefaultBinNo) like '' OR DefaultBinNo like  ' '
--		THEN NULL ELSE TRIM(DefaultBinNo) END AS DefaultBinNo
	,MAX(convert(date, [DelivDateSupplier])) AS DelivDateSupplier
	,MAX(convert(date, [DelivDateCust])) AS DelivDateCust
	,MAX(convert(date, [OrderDateSupplier])) AS OrderDateSupplier
	,convert(date, '') AS OrderDateCust
	--,'' AS BatchNoPrefix-- will not be sent out to new companies, not delete in DW for that use as reservation
	--,'' AS BatchNoSuffix-- will not be sent out to new companies, not delete in DW for that use as reservation
FROM 
	[stage].[JEN_NO_StockBalance]
GROUP BY
	[PartitionKey], [Company], [PartNum], [WarehouseCode], [StockBalance], [ReservedQty], [BackOrderQty], [QtyOrdered], [StockTakDiff], [DelivTimeToWHS], [DelivTimeToWHS], [DelivTimeUnit], [DelivTimeDesc], [ReOrderLevel], [OptimalOrderQty], [DefaultBinNo], [SupplierNum], BatchNumber, MaxStockQty, CurrencyCode, AvgCost
GO
PRINT N'Creating [stage].[NOM_NO_Customer]'
GO
CREATE TABLE [stage].[NOM_NO_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[CustomerName] [nvarchar] (100) NULL,
[MainCustomerName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[AddressLine3] [nvarchar] (100) NULL,
[ABCCode] [nvarchar] (10) NULL,
[City] [nvarchar] (50) NULL,
[Zip] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerMainGroup] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNr] [nvarchar] (20) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (2) NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[OrganizationNum] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vNOM_NO_Customer]'
GO
CREATE VIEW [stage].[vNOM_NO_Customer] AS
--COMMENT EMPT FIELDS 23-01-09
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID
    ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,UPPER(CONCAT([Company],'#',TRIM([CustomerNum]))) AS CustomerCode
	
	,PartitionKey
	,UPPER(TRIM(Company)) AS Company
    ,UPPER(TRIM(CustomerNum)) AS CustomerNum
	,MainCustomerName
    ,[dbo].[ProperCase](CustomerName) AS CustomerName
    ,[AddressLine1]
    ,[AddressLine2]
    ,[AddressLine3]
	--,'' AS [TelephoneNum1]
	--,'' AS [TelephoneNum2]
	--,'' AS [Email]
	,[ZIP] AS ZipCode
    ,IIF([City]= ' ',NULL,[dbo].[ProperCase]([City])) AS [City]    
    ,IIF([State]= ' ',NULL,[State]) AS [State]
	,[District]	AS SalesDistrict
	,TRIM(CountryCode) AS CountryCode
    ,[dbo].[ProperCase](CountryName) AS CountryName
	--,'' AS Division
	--,'' AS CustomerIndustry
	--,'' AS CustomerSubIndustry
	,[dbo].[ProperCase](TRIM(CONCAT(AddressLine1,' ',AddressLine2))) as AddressLine
	,[dbo].[ProperCase](concat_ws(',',coalesce(TRIM(CountryName),null),coalesce(IIF([State]= ' ',null,TRIM([State])),IIF(City= ' ',null,TRIM(City)),IIF(ZIP= ' ',null,TRIM(ZIP)),IIF([AddressLine3]=' ',null, TRIM([AddressLine3]))
		,coalesce(IIF([addressline1]= ' ',null,TRIM([addressline1])),IIF([addressline2]= ' ',null,TRIM([addressline2])))
		,coalesce(IIF([addressline2]= ' ',null,TRIM([addressline2])),IIF([addressline3]= ' ',null,TRIM([addressline3])))))) AS FullAddressLine
    ,[dbo].[ProperCase](CustomerMainGroup) AS CustomerGroup
	,[dbo].[ProperCase](CustomerGroup) AS CustomerSubGroup
	,[SalesRepCode] AS SalesPersonCode
    ,[dbo].[ProperCase](SalesPersonName) AS SalesPersonName
	--,'' AS [SalesPersonResponsible]
    ,TRIM([VATRegNr]) AS [VATNum]
	,OrganizationNum
	,[AccountString] AS AccountNum
	,[InternalExternal]
	,[ABCCode] AS CustomerScore
	--,'' AS CustomerType
	,GETDATE() AS ValidFrom
	,DATEADD(year,1,GETDATE()) AS ValidTo

FROM [stage].[NOM_NO_Customer]
GO
PRINT N'Creating [stage].[WID_EE_PurchaseInvoice]'
GO
CREATE TABLE [stage].[WID_EE_PurchaseInvoice]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[LineType] [nvarchar] (50) NULL,
[OrderDelivLineNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaserName] [nvarchar] (100) NULL,
[OrderType] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[InvoiceType] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[ReqDelivDate] [date] NULL,
[PurchaseShipQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CreditMemo] [nvarchar] (1) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[IndexKey] [nvarchar] (50) NULL,
[FullyShipp01] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vWID_EE_PurchaseInvoice]'
GO
CREATE VIEW [stage].[vWID_EE_PurchaseInvoice] AS
--COMMENT EMPTY FIELDS // ADD TRIM()UPPER()INTO PartID 2022-12-23 VA
--ADD TRIM() UPPER() INTO SupplierID 23-01-24 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IndexKey)))) AS PurchaseInvoiceID
	,CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(InvoiceNum)) AS PurchaseInvoiceCode
--	CONCAT(Company,'#',TRIM(SupplierCode),'#',TRIM(PurchaseOrderNum),'#',TRIM(PurchaseOrderLine)) AS PurchaseOrderCode
	,CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(PurchaseOrderNum), '#', TRIM(PartNum), '#', TRIM(InvoiceNum)) AS PurchaseOrderCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(PurchaseOrderNum)))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(PurchaseOrderNum), '#', TRIM(InvoiceNum)))) AS PurchaseOrderID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(SupplierCode)))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierCode))))) AS SupplierID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(PartNum)))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT(int, replace(convert(date, InvoiceDate), '-', '')) AS PurchaseInvoiceDateID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(InvoiceNum), '#', TRIM(PurchaseOrderNum)))) AS PurchaseLedgerID
	,PartitionKey

	,Company
	,TRIM(PurchaseOrderNum) AS PurchaseOrderNum
	,TRIM(PurchaseOrderLine) AS PurchaseOrderLine
	,TRIM(PurchaseOrderSubLine) AS PurchaseOrderSubLine
	,TRIM(OrderType) AS PurchaseOrderType
	,TRIM(InvoiceNum) AS PurchaseInvoiceNum
	,InvoiceLine AS PurchaseInvoiceLine
	,InvoiceType AS PurchaseInvoiceType
	,InvoiceDate AS PurchaseInvoiceDate
	,ActualDeliveryDate AS ActualDelivDate
	,TRIM(SupplierCode) AS SupplierNum
	,TRIM(PartNum) AS PartNum
	,PurchaseShipQty AS PurchaseInvoiceQty
	--,NULL AS UoM
	,UnitPrice
	,DiscountAmount -- since it is invoiceed price, not listed price, so the discount should be zero
	,IIF(PurchaseShipQty*UnitPrice = 0, 0, DiscountAmount/(PurchaseShipQty*UnitPrice)) AS DiscountPercent -- since it is invoiceed price, not listed price, so the discount should be zero
	,TotalMiscChrg
	--,NULL AS VATAmount
	,Currency
	,ExchangeRate
	,TRIM(CreditMemo) AS CreditMemo
	,TRIM(PurchaserName) AS PurchaserName
	,TRIM(WarehouseCode) AS WarehouseCode
	,LineType AS PurchaseChannel
	--,'' AS Comment
	,IndexKey AS PIRes1
	,FullyShipp01 AS PIRes2
	,ReqDelivDate AS PIRes3
FROM stage.WID_EE_PurchaseInvoice

--GROUP BY
--	PartitionKey, Company, PurchaseOrderNum, InvoiceNum, SupplierCode, PartNum, OrderDelivLineNum, PurchaseOrderLine, PurchaseOrderSubLine, PurchaserName, InvoiceLine, InvoiceType, InvoiceDate, ActualDeliveryDate, PurchaseShipQty, UnitPrice, DiscountAmount, TotalMiscChrg, CreditMemo, WarehouseCode, Currency, ExchangeRate, OrderType, LineType, IndexKey, FullyShipp01, ReqDelivDate
  --, OrderType, [Site]
GO
PRINT N'Creating [stage].[JEN_SK_CustomerAgreement]'
GO
CREATE TABLE [stage].[JEN_SK_CustomerAgreement]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[AgreementCode] [nvarchar] (50) NULL,
[AgreementDescription] [nvarchar] (50) NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DelivTime] [nvarchar] (10) NULL,
[Currency] [nvarchar] (10) NULL,
[AgreementStart] [date] NULL,
[AgreementEnd] [date] NULL
)
GO
PRINT N'Creating [stage].[vJEN_SK_CustomerAgreement]'
GO
CREATE VIEW [stage].[vJEN_SK_CustomerAgreement] AS 
--COMMENT empty fields // PartID,CustomerID OK 2022-12-13 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM(AgreementCode),'#',TRIM([PartNum]),'#',TRIM(CustomerNum))))) AS CustomerAgreementID --CustomerAgreementID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID  
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM([Currency])))) AS CurrencyID
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM(CustomerNum)) AS CustomerNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,AgreementCode
	,AgreementDescription
	,DiscountPercent
	,MAX([UnitPrice]) AS [UnitPrice]
	--,0 AS AgreementQty
	,UPPER(TRIM([Currency])) AS Currency
	,[DelivTime]
	,AgreementStart
	,AgreementEnd
	--,'' AS CustomerTerms
	--,0	AS FulfilledQty
	--,0  AS RemainingQty
	--,''	AS UoM
	--,'' AS CARes1
	--,'' AS CARes2
	--,'' AS CARes3
FROM 
	[stage].[JEN_SK_CustomerAgreement]
GROUP BY [PartitionKey], [Company], AgreementCode, AgreementDescription, [Currency], [PartNum], CustomerNum, [DiscountPercent], [DelivTime], AgreementStart, AgreementEnd
--WHERE 
--	RecordType = 'D'
GO
PRINT N'Creating [dm_PT].[dimProject]'
GO
CREATE VIEW [dm_PT].[dimProject] AS
-- AS decided by Ian & Random Forest AB on the 7th May 2020, the data is spliting after data-warehouse for each Business Group
SELECT 
 proj.[ProjectID]
,proj.[ProjectCode]
,proj.[PartitionKey]
,proj.[Company]
,proj.[MainProjectNum]
,proj.[ProjectNum]
,proj.[ProjectDescription]
,proj.[Project]
,proj.[Organisation]
,proj.[ProjectStatus]
,proj.[ProjectCategory]
,proj.[WBSElement]
,proj.[ObjectNum]
,proj.[Level]
,proj.[Currency]
,proj.[WarehouseCode]
,proj.[ProjectResponsible]
,proj.[Comments]
,proj.[StartDate]
,proj.[EndDate]
,proj.[EstEndDate]
,proj.[ActualCost]
FROM [dm].[DimProject] proj
LEFT JOIN dbo.Company com ON proj.Company = com.Company
WHERE com.BusinessArea = 'Power Transmission Solutions' AND com.[Status] = 'Active'

--WHERE [Company] in ('ACZARKOV', 'AcornUK', 'BSIBELL', 'JDKJENSS', 'JDKKALTE', 'JFIJENSS', 'MNLMAK', 'JNOJENSS', 'JNOORBEL', 'JSEJENSS', 'JSESKSSW', 'NomoSE', 'NomoDK', 'NomoFI', 'NomoNo', 'PASSEROT', 'SKSSCOFI', 'SCOFI', 'SMKFI', 'SNLSPRUI', 'SPRUITNL', 'SVESE')  -- The PT basket
GO
PRINT N'Creating [stage].[CER_SE_OLine]'
GO
CREATE TABLE [stage].[CER_SE_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderRelNum] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[DelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (38, 8) NULL,
[DelivQty] [decimal] (38, 8) NULL,
[RemainingQty] [decimal] (38, 8) NULL,
[UnitPrice] [numeric] (28, 8) NULL,
[UnitCost] [numeric] (28, 8) NULL,
[CurrencyCode] [nchar] (10) NULL,
[CurrExchRate] [decimal] (28, 8) NULL,
[OpenRelease] [nvarchar] (1) NULL,
[DiscountPercent] [decimal] (38, 6) NULL,
[DiscountAmount] [numeric] (38, 6) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[NeedbyDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (100) NULL,
[SalesReturnOrderNum] [nvarchar] (50) NULL,
[SalesReturnInvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_SE_OLine]'
GO


CREATE VIEW [stage].[vCER_SE_OLine] AS
--COMMENT empty fields / ADD TRIM(Company) into PartID/CustomerID VA - 12-13-2022
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', OrderNum, '#', OrderLine, '#', OrderSubLine, '#', InvoiceNum)))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', UPPER(TRIM(PartNum)))) AS SalesOrderCode 
	--,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', UPPER(TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) )))) AS SalesOrderCode -- important to match SalesInvoice's SalesOrderCode
	,CONVERT(int, replace(convert(date, OrderDate),'-','')) AS SalesOrderDateID   --redundent
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey 

	,UPPER(TRIM(Company)) AS Company
	,UPPER(TRIM(CustNum)) AS CustomerNum 
	--,UPPER(TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum))) AS CustomerNum 
	,TRIM(OrderNum) AS SalesOrderNum
	,TRIM(OrderLine) AS SalesOrderLine
	,TRIM(OrderSubLine) AS SalesOrderSubLine
	,TRIM(OrderType) AS SalesOrderType
	--,'' AS SalesOrderCategory
	,OrderDate AS SalesOrderDate
	,NeedbyDate
	,DelivDate AS ExpDelivDate
	,CAST('1900-01-01' AS date) AS ActualDelivDate
	,CAST('1900-01-01' AS date) AS ConfirmedDelivDate
	,TRIM(InvoiceNum) AS SalesInvoiceNum
	,OrderQty AS SalesOrderQty
	,DelivQty	
	,RemainingQty
	--,NULL AS SalesInvoiceQty
	--,'' AS UoM
	,UnitPrice
	,UnitCost
	,TRIM(CurrencyCode) AS Currency
	,CurrExChRate AS ExchangeRate
	,OpenRelease
--	,OrderQty*UnitPrice AS LineAmt --temp
	,OrderQty*UnitPrice*DiscountPercent/100 AS DiscountAmount
	,DiscountPercent
	,UPPER(TRIM(PartNum)) AS PartNum
	--,UPPER(TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum))) AS PartNum
	,IIF(OrderSubLine = '000000', 'Main', 'Sub' ) AS PartType -- changed from '' on 20210422 after ET
	,PartStatus
	,TRIM(SalesPerson) AS SalesPersonName
	,TRIM(WarehouseCode) AS WarehouseCode
	--,'' AS SalesChannel
	,CASE WHEN TRIM(SalesPerson) = 'Order entered through EDI' THEN 'EDI'
		WHEN TRIM(SalesPerson) = 'docparser' THEN 'PDF Scan'
		WHEN TRIM(SalesPerson) = 'Webshop Order' THEN 'Webshop'
		ELSE 'Normal Order Handling' END AS AxInterSalesChannel
	--,'' AS Department
	--,'' AS ProjectNum
	--,'' AS IndexKey
	--,'' AS Cancellation
	--,'' AS SORes1
	--,'' AS SORes2
	--,'' AS SORes3
	--,NULL AS [TotalMiscChrg]
FROM stage.CER_SE_OLine

GROUP BY
	PartitionKey, Company, CustNum, OrderNum, OrderLine, OrderSubLine, OrderRelNum, OrderRelNum, OrderDate, NeedbyDate, DelivDate, InvoiceNum, OrderQty, DelivQty, RemainingQty, UnitPrice, UnitCost, CurrExChRate, OpenRelease, DiscountAmount, DiscountPercent, PartNum, PartStatus, SalesPerson, WarehouseCode, CurrencyCode, OrderType
GO
PRINT N'Creating [dm_AX].[fctSalesLedger]'
GO



CREATE VIEW [dm_AX].[fctSalesLedger] AS 
SELECT 
 [SalesLedgerID]
,[SalesPersonNameID]
,[Company]
,[CustomerNum]
,[SalesInvoiceNum]
,[SalesInvoiceDate]
,[SalesDueDate]
,[SalesLastPaymentDate]
,[InvoiceAmount]
,[RemainingInvoiceAmount]
,[ExchangeRate]
,[Currency]
,[VATAmount]
,[VATCode]
,[PayToName]
,[PayToCity]
,[PayToContact]
,[PaymentTerms]
,[SLRes1]
,[SLRes2]
,[SLRes3]
,[SalesLedgerCode]
,[CompanyID]
,[PartitionKey]
,[PaidInvoiceAmount]
,[AccountingDate]
,[AgingPeriod]
,[AgingSort]
,[VATCodeDesc]
,[CustomerID]
,[LinkToOriginalInvoice]
,[SalesInvoiceDateID]
,[PaymentStatus]
,[WarehouseID]
  FROM [dm].[FactSalesLedger]
WHERE [Company] in ('AXISE','AXHSE')
GO
PRINT N'Creating [stage].[AXI_HQ_Customer]'
GO
CREATE TABLE [stage].[AXI_HQ_Customer]
(
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[MainCustomerName] [nvarchar] (100) NULL,
[CustomerName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[AddressLine3] [nvarchar] (100) NULL,
[TelephoneNum1] [nvarchar] (50) NULL,
[TelephoneNum2] [nvarchar] (50) NULL,
[Email] [nvarchar] (100) NULL,
[ZipCode] [nvarchar] (50) NULL,
[City] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[SalesDistrict] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[Division] [nvarchar] (50) NULL,
[CustomerIndustry] [nvarchar] (50) NULL,
[CustomerSubIndustry] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (50) NULL,
[SalesPersonCode] [nvarchar] (50) NULL,
[SalesPersonName] [varchar] (100) NULL,
[SalesPersonResponsible] [nvarchar] (100) NULL,
[VATNum] [nvarchar] (50) NULL,
[AccountNum] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[CustomerScore] [nvarchar] (20) NULL,
[CustomerType] [nvarchar] (50) NULL,
[PartitionKey] [varchar] (50) NULL,
[CognosCompany] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vAXI_HQ_Customer]'
GO






CREATE VIEW [stage].[vAXI_HQ_Customer] AS
SELECT 
	  CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', CustomerNum ))) AS CustomerID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',Company)) AS CompanyID
	  ,CONCAT(Company,'#', CustomerNum ) AS CustomerCode
	  ,CONVERT(varchar, GETDATE(), 23) AS PartitionKey

	  ,[Company]
      ,[CustomerNum]
      ,[MainCustomerName]
      ,[CustomerName]
      ,[AddressLine1]
      ,[AddressLine2]
      ,[AddressLine3]
      ,[TelephoneNum1]
      ,[TelephoneNum2]
      ,[Email]
      ,[ZipCode]
      ,[City]
      ,[State]
      ,[SalesDistrict]
      ,[CountryName]
      ,[Division]
      ,[CustomerIndustry]
      ,[CustomerSubIndustry]
	  ,CONCAT(NULLIF(TRIM(AddressLine1),'') ,', ' +  NULLIF(TRIM(AddressLine2),'')) AS AddressLine
	  ,CONCAT(NULLIF(TRIM(CountryName),'') ,', ' + NULLIF(TRIM([City]),''),', ' + NULLIF(TRIM([ZipCode]),''),', ' + NULLIF(TRIM(AddressLine1),''),', ' + NULLIF(TRIM(AddressLine2),'')  ) AS FullAddressLine
      ,[CustomerGroup]
      ,[CustomerSubGroup]
      ,[SalesPersonCode]
      ,[SalesPersonName]
      ,[SalesPersonResponsible]
      ,[VATNum]
	  --,'' AS OrganizationNum
      ,[AccountNum]
      ,'AxInter'	AS [InternalExternal]
      ,[CustomerScore]
      ,[CustomerType]
      , CognosCompany as CRes1
  FROM [stage].[AXI_HQ_Customer]
	where UPPER(Company) = 'AXISE'
GO
PRINT N'Creating [stage].[GPI_FR_SOLine]'
GO
CREATE TABLE [stage].[GPI_FR_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderRel] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Site] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[IndexKey] [varchar] (10) NULL
)
GO
PRINT N'Creating [stage].[vGPI_FR_SOLine]'
GO
CREATE VIEW [stage].[vGPI_FR_SOLine] AS
--COMMENT EMPTY FIELDS // ADD UPPER() TRIM() INTO CustomerID,PartID 22-12-28 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine)))) AS SalesInvoiceID --
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum), '#', OrderLine))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustomerNum), '#', TRIM(InvoiceNum)))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum)))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustomerNum)))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(PartNum)))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(InvoiceNum)) AS SalesOrderCode
	--CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(InvoiceNum)) AS SalesOrderCode --OLine
	,CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine)) AS SalesInvoiceCode  --redundent?
	,CONVERT(int, replace(convert(date, InvoiceDate), '-', '')) AS SalesInvoiceDateID  --redundent?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey

	,Company
	,SalesPersonName
	,TRIM(CustomerNum) AS [CustomerNum]
	,TRIM(PartNum) AS [PartNum]
	,CASE WHEN TRIM(OrderNum) = '0' THEN 'Main' ELSE 'Sub' END  AS PartType
	,TRIM(OrderNum) AS [SalesOrderNum]
	,TRIM(OrderLine) AS [SalesOrderLine]
	,TRIM([OrderSubLine]) AS [SalesOrderSubLine]
	,OrderType AS [SalesOrderType]
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,TRIM(InvoiceLine) AS [SalesInvoiceLine]
	--,'' AS [SalesInvoiceType]
	,CONVERT(date, InvoiceDate) AS [SalesInvoiceDate]
	,ActualDeliveryDate AS [ActualDelivDate]
	,SellingShipQty AS [SalesInvoiceQty]
	--,'' AS [UoM]
	,UnitPrice
	,UnitCost
	--,0 AS DiscountAmount
	,IIF((UnitPrice*SellingShipQty) <> 0, DiscountAmount/(UnitPrice*SellingShipQty), 0) AS [DiscountPercent]
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	--,0 AS TotalMiscChrg
	--,0 AS [VATAmount]
	,'EUR' AS Currency
	,CONVERT(decimal (18,4), 1) AS ExchangeRate
	,CreditMemo
	--,'' AS [SalesChannel]
	--,'' AS [Department]
	,TRIM([WarehouseCode]) AS WarehouseCode
	--,NULL AS DeliveryAddress
	--,'' AS [CostBearerNum]
	--,'' AS [CostUnitNum]
	--,'' AS [ReturnComment]
	--,'' AS [ReturnNum]
	--,'' AS [ProjectNum]
	,[IndexKey]
	--,'' AS SIRes1
	--,'' AS SIRes2
	--,'' AS SIRes3

FROM stage.GPI_FR_SOLine

GROUP BY
	PartitionKey,Company,SalesPersonName,CustomerNum,PartNum,OrderNum,OrderLine,OrderSubLine,OrderType,InvoiceNum,InvoiceLine, InvoiceDate,SellingShipQty,UnitPrice,UnitCost,DiscountAmount,TotalMiscChrg,WarehouseCode,CreditMemo, [IndexKey], ActualDeliveryDate--,OrderSubLine --,OrderRel, 
GO
PRINT N'Creating [stage].[MIT_UK_SOLine]'
GO
CREATE TABLE [stage].[MIT_UK_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderRel] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Indexkey] [nvarchar] (50) NULL,
[Site] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[CurrExchRate] [decimal] (18, 4) NULL,
[Department] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vMIT_UK_SOLine]'
GO
CREATE VIEW [stage].[vMIT_UK_SOLine] AS
--COMMENT EMPTY FIELDS // ADD UPPER() INTO PartID,CustomerID,WarehouseID 22-12-28 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(InvoiceNum) ))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(InvoiceNum)))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ), '#', TRIM(InvoiceNum)))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum)))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ) ))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID 
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) ) ))) AS PartID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WareHouseID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(WarehouseCode)))) AS WareHouseID
	,CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(InvoiceNum)) AS SalesOrderCode
	,CONVERT(int, replace(convert(date,InvoiceDate),'-','')) AS SalesInvoiceDateID   -- Redundant
	,CONCAT(Company, TRIM(OrderNum), TRIM(OrderLine), TRIM(OrderSubLine), TRIM(InvoiceNum)) AS SalesInvoiceCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(InvoiceNum)))) AS SalesInvoiceNumID --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT( Company, '#', '') )) AS ProjectID
	,PartitionKey

	,TRIM(Company) AS Company
	,TRIM(SalesPersonName) AS SalesPersonName
	,TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ) AS CustomerNum
	,TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) ) AS PartNum
	,CASE WHEN TRIM(OrderNum) = '0' THEN 'PrimaryPart' ELSE 'SubPart' END  AS PartType --DZ added 20210324. SM added dm logic to stage 20210325
	,TRIM(OrderNum) AS SalesOrderNum
	,TRIM(OrderLine) AS SalesOrderLine
	,TRIM(OrderSubLine) AS SalesOrderSubLine
	--,'' AS SalesOrderType
	,TRIM(InvoiceNum) AS SalesInvoiceNum
	--,'' AS SalesInvoiceLine
	--,'' AS SalesInvoiceType
	,convert(date, InvoiceDate) AS SalesInvoiceDate
	,ActualDeliveryDate		AS ActualDelivDate
	,SUM(SellingShipQty) AS SalesInvoiceQty
	--,'' AS UoM
	,UnitPrice
	,UnitCost
	--,NULL AS DiscountPercent
	,SUM(DiscountAmount) AS DiscountAmount
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	,TotalMiscChrg
	--,NULL VATAmount
	,Currency
	,CurrExchRate AS ExchangeRate
	,CreditMemo
	,CASE WHEN TRIM(Department) IN ('HSL SERV','QB Service Fire Div', 'QUEENBOROUGH SERVICE') THEN 'Service' 
		  WHEN TRIM(Department) IN ('HSLPARTS', 'QB PARTS') THEN 'Parts' 
		  WHEN TRIM(Department) IN ('QB UNITS') THEN 'Units' 	
		  WHEN TRIM(Department) IN ('Peter Fenton') THEN 'Sundry'
		  ELSE 'Other'	END		AS SalesChannel  --Uses this field as "mother" category for department /SM 2021-06-18
	,CASE TRIM(Department) 
		WHEN 'Hensall WIP'			THEN 'HS WIP'
		WHEN 'HSL SERV'				THEN 'HS Service'
		WHEN 'HSLPARTS'				THEN 'HS Parts'
		WHEN 'QB Service Fire Div'	THEN 'QB Service Fire Division'
		WHEN 'QUEENBOROUGH SERVICE'	THEN 'QB Service'
		WHEN 'Queenborough WIP'		THEN 'QB WIP'
		ELSE dbo.ProperCase(TRIM(Department)) END	AS [Department]
	,TRIM(WarehouseCode) AS WarehouseCode
	--,NULL AS DeliveryAddress
	--,'' AS CostBearerNum
	--,'' AS CostUnitNum
	--,'' AS ReturnComment
	--,'' AS ReturnNum
	--,'' AS ProjectNum
	--,'' AS IndexKey
	--,'' AS SIRes1
	--,'' AS SIRes2
	--,'' AS SIRes3
--	,[Site]
FROM stage.MIT_UK_SOLine AS SO
GROUP BY PartitionKey, Company, SalesPersonName, CustNum, PartNum ,OrderNum, OrderLine, OrderSubLine, InvoiceNum, InvoiceDate, ActualDeliveryDate, UnitPrice, UnitCost, TotalMiscChrg,Department, WarehouseCode, CurrExchRate, Currency, CreditMemo
GO
PRINT N'Creating [stage].[ACO_UK_Warehouse]'
GO
CREATE TABLE [stage].[ACO_UK_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL,
[WarehouseDistrict] [nvarchar] (50) NULL,
[WarehouseAddress] [nvarchar] (100) NULL,
[WarehouseDescription] [nvarchar] (100) NULL,
[WarehouseType] [nvarchar] (100) NULL,
[WarehouseCountry] [nvarchar] (100) NULL,
[Site] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vACO_UK_Warehouse]'
GO

CREATE VIEW [stage].[vACO_UK_Warehouse] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([WarehouseCode])) AS [WarehouseCode]
	,[WarehouseName]
	,[WarehouseDistrict]
	,[WarehouseAddress]
	,[WarehouseDescription]
	,[WarehouseType]
	,[WarehouseCountry]
	,[Site] AS [WarehouseSite]
FROM [stage].[ACO_UK_Warehouse]

GROUP BY 
	PartitionKey,[Company],[WarehouseCode],[WarehouseName],[WarehouseDistrict],[WarehouseAddress],[WarehouseDescription],[WarehouseType],[WarehouseCountry],[Site]
GO
PRINT N'Creating [stage].[AXL_SY_SOLine]'
GO
CREATE TABLE [stage].[AXL_SY_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[InvoiceType] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (22, 8) NULL,
[UnitCost] [decimal] (22, 8) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[VAT] [decimal] (18, 4) NULL,
[CashDiscountOffered] [decimal] (18, 4) NULL,
[CashDiscountUsed] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OrderType] [nvarchar] (50) NULL,
[SalesChannel] [varchar] (10) NULL,
[BusinessChain] [varchar] (10) NULL,
[Res1] [varchar] (100) NULL,
[Res2] [varchar] (100) NULL,
[Res3] [varchar] (100) NULL,
[PartDesc] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[vAXL_SY_SOLine]'
GO
CREATE VIEW [stage].[vAXL_SY_SOLine] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine), '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(PartNum), '#', TRIM(PartDesc))))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(PartDesc))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(InvoiceNum))))) AS SalesLedgerID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum), '#', (IIF(TRIM([PartNum]) LIKE 'IACO%' , 'MISC. CHARGES', TRIM([PartDesc]))))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT(int, IIF(InvoiceDate = '', 19900101, replace(convert(date, InvoiceDate), '-', ''))) AS SalesInvoiceDateID
	,UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine))) AS SalesInvoiceCode
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine))) AS SalesOrderCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(SalesPerson) AS SalesPersonName
	,TRIM(CustNum) AS [CustomerNum]
	,TRIM(PartNum) AS PartNum
	,UPPER(PartDesc) AS PartDesc
	,'' AS [PartType]
	,TRIM(OrderNum) AS [SalesOrderNum]
	,CAST(OrderLine AS text) AS [SalesOrderLine]
	,TRIM(OrderSubLine) AS [SalesOrderSubLine]
	,TRIM(OrderType) AS [SalesOrderType]
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,TRIM(InvoiceLine) AS [SalesInvoiceLine]
	,TRIM(InvoiceType) AS [SalesInvoiceType]
	,CASE WHEN InvoiceDate = '' THEN '1900-01-01' ELSE CONVERT(date, InvoiceDate) END AS [SalesInvoiceDate]
	,ActualDeliveryDate AS [ActualDelivDate]
	,SellingShipQty AS [SalesInvoiceQty]
	,TRIM(Unit) AS [UoM]
	,UnitPrice
	,UnitCost
	,DiscountAmount
	,IIF(UnitPrice*SellingShipQty = 0, 0, DiscountAmount/UnitPrice*SellingShipQty) AS DiscountPercent
	,CONVERT(decimal(18,4), CashDiscountOffered) AS [CashDiscOffered] 
	,CONVERT(decimal(18,4), CashDiscountUsed) AS [CashDiscUsed] 
	,TotalMiscChrg
	,VAT AS [VATAmount]
	,Currency
	,ExchangeRate
	,TRIM(CreditMemo) AS CreditMemo
	,TRIM([SalesChannel]) AS [SalesChannel]
	,TRIM([BusinessChain]) AS [Department]
	,TRIM(WarehouseCode) AS WarehouseCode
	,NULL AS [CostBearerNum]
	,NULL AS [CostUnitNum]
	,NULL AS [ReturnComment]
	,NULL AS [ReturnNum]
	,NULL AS [ProjectNum]
	,'' AS [IndexKey]
	,Res1 AS SIRes1
	,Res2 AS SIRes2
	,Res3 AS SIRes3
FROM stage.AXL_SY_SOLine


	--,CASE WHEN OrderType = 'MD' THEN 1 
	--		WHEN OrderType = 'MT' THEN 2
	--		WHEN OrderType = 'MR' THEN 3
	--		WHEN OrderType = 'IV' THEN 4
	--		WHEN OrderType = 'Misc. Charges' THEN 5 --added after Ulf changes in the night /DZ
	--	ELSE OrderType END AS [SalesOrderType]

--GROUP BY
--	PartitionKey, Company, SalesPerson, CustNum, PartNum, PartDesc, OrderNum, OrderLine, OrderSubLine,OrderType, InvoiceNum, InvoiceLine, InvoiceDate, SellingShipQty, UnitPrice, UnitCost, DiscountAmount, TotalMiscChrg, WarehouseCode, CreditMemo, ActualDeliveryDate, Currency, ExchangeRate, InvoiceType, Res1, Res2, Res3, Unit, VAT, SalesChannel, BusinessChain, CashDiscountOffered, CashDiscountUsed
GO
PRINT N'Creating [dm_PT].[fctPurchaseInvoice]'
GO

CREATE VIEW [dm_PT].[fctPurchaseInvoice] AS

SELECT 
 pinv.[PurchaseInvoiceID]
,pinv.[CompanyID]
,pinv.[SupplierID]
,pinv.[PartID]
,pinv.[WarehouseID]
,pinv.[PurchaseOrderNumID]
,pinv.[CurrencyID]
,pinv.[PurchaseInvoiceDateID]
,pinv.[Company]
,pinv.[PurchaseOrderNum]
,pinv.[PurchaseOrderLine]
,pinv.[PurchaseOrderType]
,pinv.[PurchaseInvoiceNum]
,pinv.[PurchaseInvoiceLine]
,pinv.[PurchaseInvoiceType]
,pinv.[PurchaseInvoiceDate]
,pinv.[ActualDelivDate]
,pinv.[SupplierNum]
,pinv.[PartNum]
,pinv.[PurchaseInvoiceQty]
,pinv.[UoM]
,pinv.[UnitPrice]
,pinv.[DiscountPercent]
,pinv.[DiscountAmount]
,pinv.[TotalMiscChrg]
,pinv.[VATAmount]
,pinv.[Currency]
,pinv.[ExchangeRate]
,pinv.[CreditMemo]
,pinv.[PurchaserName]
,pinv.[WarehouseCode]
,pinv.[PurchaseChannel]
,pinv.[Comment]
,pinv.[PIRes1]
,pinv.[PIRes2]
,pinv.[PIRes3]
,pinv.[PIRes4]
,pinv.[PurchaseInvoiceAmountOC]
,pinv.[PurchaseOrderDate]
,pinv.[ReqDelivDate]
,pinv.[OrgReqDelivDate]
,pinv.[CommittedDelivDate]
,pinv.[OrgCommittedDelivDate]
,pinv.[DueDate]
,pinv.[PaymentDate]
,pinv.[InvoiceStatus]
FROM [dm].[FactPurchaseInvoice] pinv
LEFT JOIN dbo.Company com ON pinv.Company = com.Company
WHERE com.BusinessArea = 'Power Transmission Solutions' AND com.[Status] = 'Active'


--WHERE [Company] in ('ACZARKOV', 'AcornUK', 'BSIBELL', 'JDKJENSS', 'JDKKALTE', 'JFIJENSS', 'MNLMAK', 'JNOJENSS', 'JNOORBEL', 'JSEJENSS', 'JSESKSSW', 'NORNO', 'SSWSE', 'NomoSE', 'NomoDK', 'NomoFI', 'NomoNo', 'PASSEROT', 'SKSSCOFI', 'SCOFI', 'SMKFI', 'SNLSPRUI', 'SVESE')  -- The PT basket --
GO
PRINT N'Creating [stage].[SPR_NL_Budget]'
GO
CREATE TABLE [stage].[SPR_NL_Budget]
(
[PartitionKey] [nvarchar] (25) NULL,
[Company] [nvarchar] (12) NULL,
[BudgetPeriodDate] [nvarchar] (15) NULL,
[PeriodType] [nvarchar] (15) NULL,
[Currency] [nvarchar] (10) NULL,
[BudgetSales] [nvarchar] (15) NULL
)
GO
PRINT N'Creating [stage].[vSPR_NL_Budget]'
GO

create view [stage].[vSPR_NL_Budget] as
select 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#', cast(BudgetPeriodDate as date))))) AS BudgetID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',upper(trim(Company)))) AS CompanyID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',null)))) AS ProjectID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',null)))) AS WarehouseID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',null)))) AS PartID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',null)))) AS CustomerID,
	YEAR(cast(BudgetPeriodDate as date))*10000 + MONTH(cast(BudgetPeriodDate as date))*100 + DAY(cast(BudgetPeriodDate as date))	AS BudgetPeriodDateID,
	PartitionKey,
	Company,
	cast(BudgetPeriodDate as date) AS BudgetPeriodDate,
	PeriodType,
	try_cast(replace(BudgetSales               ,',','.') as numeric(18,5)) as BudgetSales 
from stage.SPR_NL_Budget
;
GO
PRINT N'Creating [dm_AX].[dimProject]'
GO

CREATE VIEW [dm_AX].[dimProject] AS

SELECT 
[ProjectID]
,[ProjectCode]
,[PartitionKey]
,[Company]
,[MainProjectNum]
,[ProjectNum]
,[ProjectDescription]
,[Project]
,[Organisation]
,[ProjectStatus]
,[ProjectCategory]
,[WBSElement]
,[ObjectNum]
,[Level]
,[Currency]
,[WarehouseCode]
,[ProjectResponsible]
,[Comments]
,[StartDate]
,[EndDate]
,[EstEndDate]
,[ActualCost]
FROM [dm].[DimProject] 
WHERE Company IN ('AXISE','AXHSE')
GO
PRINT N'Creating [stage].[FOR_SE_OLine]'
GO
CREATE TABLE [stage].[FOR_SE_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderRelNum] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[DelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (38, 8) NULL,
[DelivQty] [decimal] (38, 8) NULL,
[RemainingQty] [decimal] (38, 8) NULL,
[UnitPrice] [decimal] (28, 8) NULL,
[UnitCost] [decimal] (28, 8) NULL,
[SumUnitCost] [decimal] (38, 8) NULL,
[SumUnitPrice] [decimal] (38, 12) NULL,
[CurrExchRate] [decimal] (28, 12) NULL,
[OpenRelease] [int] NULL,
[DiscountPercent] [decimal] (38, 6) NULL,
[DiscountAmount] [numeric] (38, 6) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [int] NULL,
[NeedbyDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (max) NULL,
[SalesReturnOrderNum] [nvarchar] (50) NULL,
[SalesReturnInvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vFOR_SE_OLine]'
GO

CREATE VIEW [stage].[vFOR_SE_OLine] AS
--COMMENT EMPTY FIELD // CustomerID,PartID Adjust 2022-12-20 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderRelNum))))) AS SalesOrderID
	,UPPER(CONCAT(Company, '#', OrderNum, '#', OrderLine, '#', InvoiceNum)) AS SalesOrderCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ) )))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) ) )))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(OrderNum))))) AS SalesOrderNumID  
	,CONVERT(int, replace(convert(date, OrderDate),'-','')) AS SalesOrderDateID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey

	,UPPER(TRIM(Company)) AS Company 
	,UPPER(TRIM(CustNum)) AS CustomerNum 
	--,UPPER(TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) )) AS CustomerNum 
	,CASE WHEN OrderNum is not NULL or OrderNum > '0' THEN UPPER(TRIM(OrderNum)) END AS SalesOrderNum
	,UPPER(TRIM(OrderLine)) AS SalesOrderLine
	,UPPER(TRIM(OrderSubLine)) AS SalesOrderSubLine
	--,'' AS SalesOrderType
	--,'' AS SalesOrderCategory
	,UPPER(TRIM(OrderRelNum)) AS SalesOrderRelNum --Currently just set = '1'
	,OrderDate AS SalesOrderDate
	,NeedbyDate
	,DelivDate AS ExpDelivDate
	,CAST('1900-01-01' AS date) AS ActualDelivDate
	,CAST('1900-01-01' AS date) AS ConfirmedDelivDate
	,UPPER(TRIM(InvoiceNum)) AS SalesInvoiceNum
	,OrderQty AS SalesOrderQty
	,DelivQty
	,RemainingQty
	--,NULL AS SalesInvoiceQty
	--,'' AS UoM
	,UnitPrice
	,UnitCost
	,'SEK' AS Currency --Changed from '' to 'SEK' /SM 2021-08-19
	,1 AS ExchangeRate  --CurrExChRate AS ExchangeRate /SM 2021-08-19
	,OpenRelease
	,DiscountAmount
	,DiscountPercent
	,UPPER(TRIM(PartNum)) AS PartNum
	--,UPPER(TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) )) AS PartNum
	--,'' AS PartType
	,PartStatus
	,TRIM(SalesPerson) AS SalesPersonName
	,UPPER(TRIM(WarehouseCode)) as WarehouseCode
	,SalesChannel
	,iif(SalesChannel = 'EDI', 'EDI', 'Normal Order Handling') AS AxInterSalesChannel
	--,'' AS Department
	--,'' AS ProjectNum
	--,'' AS IndexKey
	--,'0' AS Cancellation
	--,'' AS SORes1
	--,'' AS SORes2
	--,'' AS SORes3
	--,NULL AS [TotalMiscChrg]
FROM stage.FOR_SE_OLine
GROUP BY PartitionKey,Company, CustNum, OrderNum, OrderLine, OrderSubLine, OrderRelNum, OrderDate, NeedbyDate, DelivDate, InvoiceNum, OrderQty, DelivQty, RemainingQty, UnitPrice, UnitCost, SumUnitCost, SumUnitPrice, CurrExChRate, OpenRelease, DiscountAmount, DiscountPercent, PartNum, PartStatus, SalesPerson, WarehouseCode, SalesChannel

	--1:07
GO
PRINT N'Creating [stage].[TRA_FR_OLine]'
GO
CREATE TABLE [stage].[TRA_FR_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartType] [nvarchar] (50) NULL,
[SalesOrderNum] [nvarchar] (50) NULL,
[SalesOrderLine] [nvarchar] (50) NULL,
[SalesOrderSubLine] [nvarchar] (50) NULL,
[SalesOrderType] [nvarchar] (50) NULL,
[SalesOrderCategory] [nvarchar] (50) NULL,
[SalesOrderStatus] [nvarchar] (50) NULL,
[SalesInvoiceNum] [nvarchar] (50) NULL,
[SalesOrderDate] [date] NULL,
[NeedbyDate] [date] NULL,
[ExpDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[SalesOrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[IndexKey] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vTRA_FR_OLine]'
GO
CREATE VIEW [stage].[vTRA_FR_OLine] AS
--COMMENT EMPTY FIELDS // ADD UPPER()TRIM() INTO PartID,CustomerID,WarehouseID 22-12-29 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(UPPER(Company), '#', TRIM(CustomerNum), '#', TRIM(SalesOrderNum), '#', TRIM(SalesOrderLine), '#', TRIM(SalesOrderSubLine), '#', TRIM(PartNum), '#', TRIM(SalesOrderType), '#', TRIM(WarehouseCode)))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(UPPER(Company), '#', TRIM(SalesOrderNum)))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(UPPER(Company), '#', TRIM(IIF(CustomerNum IS NULL OR CustomerNum = '', 'MISSINGCUSTOMER', CustomerNum))))) AS CustomerID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(UPPER(Company), '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#',TRIM(WarehouseCode))))) AS WareHouseID
	,CONCAT(Company, '#', TRIM(IIF(CustomerNum IS NULL OR CustomerNum = '', 'MISSINGCUSTOMER', CustomerNum)), '#', TRIM(SalesOrderNum), '#', TRIM(SalesOrderLine), '#', SUBSTRING(TRIM(SalesInvoiceNum), 2, 50)) AS SalesOrderCode 
	,CONVERT(int, replace(convert(date,SalesOrderDate), '-', '')) AS SalesOrderDateID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT( Company, '#', '') ))	AS ProjectID
	,PartitionKey

	,TRIM(UPPER(Company)) AS Company
	,IIF(TRIM(SalesPersonName) = 'Cessions Inter Agences', 'Traction Levage Internal', TRIM(SalesPersonName)) AS SalesPersonName
	,TRIM(IIF(CustomerNum IS NULL OR CustomerNum = '', 'MISSINGCUSTOMER', CustomerNum)) AS CustomerNum
	,TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum)) AS PartNum
	,TRIM(PartType) AS PartType
	,TRIM(SalesOrderNum) AS SalesOrderNum
	,TRIM(SalesOrderLine) AS SalesOrderLine
	,TRIM(SalesOrderSubLine) AS SalesOrderSubLine
	,TRIM(SalesOrderType) AS SalesOrderType
	,CASE WHEN Right(TRIM(SalesOrderNum), 2) = '.0' THEN 'InitialOrder'
		WHEN Right(TRIM(SalesOrderNum), 2) = '.1' THEN 'OrderPartialDeliv2'
		WHEN Right(TRIM(SalesOrderNum), 2) = '.2' THEN 'OrderPartialDeliv3'
		WHEN Right(TRIM(SalesOrderNum), 2) = '.3' THEN 'OrderPartialDeliv4'
		WHEN Right(TRIM(SalesOrderNum), 2) = '.4' THEN 'OrderPartialDeliv5'
		WHEN Right(TRIM(SalesOrderNum), 2) = '.5' THEN 'OrderPartialDeliv6'
		WHEN Right(TRIM(SalesOrderNum), 2) = '.6' THEN 'OrderPartialDeliv7'
		END AS SalesOrderCategory
	,TRIM(SalesOrderStatus) AS SalesOrderStatus
	,TRIM(SalesInvoiceNum) AS SalesInvoiceNum
	,SalesOrderDate
	,ExpDelivDate AS NeedbyDate
	,ExpDelivDate
	,'1900-01-01' AS ConfirmedDelivDate
	,ActualDelivDate
	,UoM
	,SalesOrderQty
	,DelivQty
	,IIF(RemainingQty > 0, RemainingQty, SalesOrderQty - DelivQty) AS RemainingQty
	--,NULL AS SalesInvoiceQty
	,UnitPrice
	,UnitCost
	,DiscountPercent 
	,DiscountAmount 
	,Currency
	,(ExchangeRate) AS ExchangeRate
	,TRIM(SalesOrderStatus) AS OpenRelease
	--,'' AS PartStatus
	,TRIM(WarehouseCode) AS WarehouseCode
	--,'' AS SalesChannel
	--,'' AS AxInterSalesChannel
	,CASE WHEN SalesPersonName = 'Cessions Inter Agences' THEN 'Traction Levage Internal Order'
		WHEN CustomerNum in ('20589', '21842', '24961', '26612', '26663', '26725', '26805', '26899', '27161', '27175', '27252', '27318', '27382', '27410', '27488', '27633', '27747', '27981', '28140', '28553', '28559', '28591', '28597', '28599', '28608', '28631', '28651', '9251') THEN 'AxInter Internal Order'
		ELSE 'External Order' END AS Department
	--,'' AS ProjectNum
	,IndexKey
	--,'' AS Cancellation
	--,'' AS SORes1
	--,'' AS SORes2
	--,'' AS SORes3
	--,NULL AS [TotalMiscChrg]
FROM stage.TRA_FR_OLine

--GROUP BY
--	PartitionKey, Company, SalesPersonName, CustomerNum, PartNum, PartType, SalesOrderNum, SalesOrderLine, SalesOrderSubLine, SalesOrderType, SalesInvoiceNum, SalesInvoiceDate, ActualDelivDate, UoM, WarehouseCode, Currency, CreditMemo, Indexkey, SalesChannel, Department, CostBearerNum, CostUnitNum, ReturnComment, ReturnNum, ProjectNum, SIRes1, SIRes2, SIRes3, TotalMiscChrg, VATAmount, ExchangeRate--, UnitCost, LinePrice, SalesInvoiceQty
GO
PRINT N'Creating [stage].[GPI_FR_Customer]'
GO
CREATE TABLE [stage].[GPI_FR_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[MainCustomerName] [nvarchar] (50) NULL,
[CustomerName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (50) NULL,
[Email] [nvarchar] (200) NULL,
[CustomerABC] [nvarchar] (50) NULL,
[City] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[Division] [nvarchar] (50) NULL,
[CustomerIndustry] [nvarchar] (50) NULL,
[CustomerSubIndustry] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[SalesPersonResponsible] [nvarchar] (50) NULL,
[VatRegNo] [nvarchar] (50) NULL,
[AccountString] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[CustomerType] [nvarchar] (50) NULL,
[Commercial2] [nvarchar] (50) NULL,
[Commercial3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vGPI_FR_Customer]'
GO

CREATE VIEW [stage].[vGPI_FR_Customer] AS
--COMMENT EMPTY FIELD // ADD UPPER()TRIM() INTO CustomerID 22-12-28 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustomerNum)))) AS CustomerID
    ,CONCAT([Company], '#', TRIM([CustomerNum])) AS CustomerCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [Company])) AS CompanyID
	,PartitionKey

	,Company
    ,TRIM(CustomerNum) AS CustomerNum
	,MainCustomerName
    ,[dbo].[ProperCase](CustomerName) AS CustomerName
    ,[AddressLine1]
    ,[AddressLine2]
    ,[AddressLine3]
	,[TelephoneNumber1] AS [TelephoneNum1]
	--,'' AS [TelephoneNum2]
	,[Email]
	,ZipCode
    ,IIF([City]= ' ', null, [dbo].[ProperCase]([City])) AS [City]    
    ,IIF([State]= ' ', null, [State]) AS [State]
	,[District] AS [SalesDistrict]
    ,[dbo].[ProperCase](customer.CountryName) AS CountryName
	,Division
	,CustomerIndustry
	,CustomerSubIndustry
	,[dbo].[ProperCase](TRIM(CONCAT(AddressLine1,' ',AddressLine2))) AS AddressLine
	,[dbo].[ProperCase](concat_ws(',',coalesce(customer.CountryName,null),coalesce(IIF([State]= ' ',null,[State]),IIF(City= ' ',null,City),IIF(ZipCode= ' ',null,ZipCode)),IIF([AddressLine3]=' ',null, [AddressLine3])
		,coalesce(IIF([addressline1]= ' ',null,[addressline1]),IIF([addressline2]= ' ',null,[addressline2]))
		,coalesce(IIF([addressline2]= ' ',null,[addressline2]),IIF([addressline3]= ' ',null,[addressline3])))) AS FullAddressLine
    ,[dbo].[ProperCase](CustomerGroup) AS CustomerGroup
	,[dbo].[ProperCase](CustomerSubGroup) AS CustomerSubGroup
	,[SalesRepCode] AS [SalesPersonCode]
	,[dbo].[ProperCase](SalesPersonName) AS SalesPersonName
	,Commercial3 AS [SalesPersonResponsible] -- Should potentially be put into "Extra field" instead - SB 2022-11-30
    ,TRIM([VatRegNo]) AS [VATNum]
	--,'' AS OrganizationNum 
	,[AccountString] AS [AccountNum]
	--,'' AS [InternalExternal]
	,Commercial2 AS [CustomerScore]  -- Should potentially be put into "Extra field" instead - SB 2022-11-30
	,CustomerType
	,case when len(trim(customer.CountryName)) = 3 then cc.[Alpha-2 code]
	else customer.CountryName 
	end as CountryCode
FROM [stage].[GPI_FR_Customer] as customer
	LEFT JOIN dbo.CountryCodes as cc
		on customer.CountryName = cc.[Alpha-3 code]
GO
PRINT N'Creating [stage].[SKS_FI_Supplier]'
GO
CREATE TABLE [stage].[SKS_FI_Supplier]
(
[PartitionKey] [varchar] (50) NOT NULL,
[EKORG] [nvarchar] (50) NOT NULL,
[SUPPLIERNUM] [nvarchar] (50) NOT NULL,
[MAINSUPPLIERNAME] [nvarchar] (100) NULL,
[SUPPLIERNAME] [nvarchar] (100) NULL,
[ADDRESSLINE1] [nvarchar] (100) NULL,
[ADDRESSLINE2] [nvarchar] (100) NULL,
[ADDRESSLINE3] [nvarchar] (100) NULL,
[TELEPHONENUM] [nvarchar] (20) NULL,
[EMAIL] [nvarchar] (200) NULL,
[CITY] [nvarchar] (50) NULL,
[ZIP] [nvarchar] (50) NULL,
[DISTRICT] [nvarchar] (50) NULL,
[COUNTRYNAME] [nvarchar] (100) NULL,
[REGION] [nvarchar] (50) NULL,
[SUPPLIERCATEGORY] [nvarchar] (50) NULL,
[SUPPLIERRESPONSIBLE] [nvarchar] (50) NULL,
[BANKACCOUNTNUM] [nvarchar] (50) NULL,
[VATNUM] [nvarchar] (50) NULL,
[INTERNALEXTERNAL] [nvarchar] (100) NULL,
[CUSTOMERNUM] [nvarchar] (50) NULL,
[CODEOFCONDUCT] [nvarchar] (200) NULL,
[SUPPLIERABC] [nvarchar] (50) NULL,
[MINORDERQTY] [nvarchar] (50) NULL,
[WEBSITE] [nvarchar] (100) NULL,
[COMMENTS] [nvarchar] (max) NULL,
[SRES1] [nvarchar] (100) NULL,
[SRES2] [nvarchar] (100) NULL,
[SRES3] [nvarchar] (100) NULL,
[MANDT] [nvarchar] (50) NULL,
[BUKRS] [nvarchar] (100) NULL,
[INTCA] [nvarchar] (12) NULL
)
GO
PRINT N'Creating [stage].[vSKS_FI_Supplier]'
GO

CREATE view [stage].[vSKS_FI_Supplier] AS
--ADD UPPEER() TRIM() INTO SupplierID
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(BUKRS), '#', TRIM([SupplierNum]),'#', TRIM(EKORG))))) AS SupplierID
    ,CONCAT(BUKRS, '#', TRIM([SupplierNum]), EKORG ) AS SupplierCode --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',  BUKRS)) AS CompanyID
	,[PartitionKey]

--	,CASE WHEN BUKRS = 'SKSSWE' THEN 'JSESKSSW' WHEN [EKORG] = 'SE10'  THEN 'JSESKSSW' ELSE BUKRS END  AS Company
	,BUKRS AS Company
	,TRIM([SupplierNum]) AS [SupplierNum]
	,MainSupplierName
	,IIF(SupplierName = '', MainSupplierName, SupplierName) AS SupplierName
	,[AddressLine1]
    ,[AddressLine2]
    --,'' AS [AddressLine3]
	,[TelephoneNum]
	,[Email]
	,ZIP AS ZipCode
	,[City]
	,'' AS [District]
	,ADDRESSLINE3 AS CountryName
	,CUSTOMERNUM CustomerNum
	,[Region]
	,[SupplierCategory]
	,[SupplierResponsible]
	,TRIM(concat ([AddressLine1]+' '+ addressline2, null)) AS AddressLine
	,TRIM(concat_ws(',', [AddressLine3], ZIP, City, [AddressLine1])) AS FullAddressLine
	,CONVERT([binary](32), HASHBYTES('SHA2_256', BANKACCOUNTNUM)) AS [AccountNum] 
	,[VATNum]
	,'' AS OrganizationNum
	,[InternalExternal]
	,NULLIF(TRIM([CodeOfConduct]),'') AS [CodeOfConduct]
	,SUPPLIERABC AS [SupplierScore]
	,TRY_CONVERT(decimal(18,4), MINORDERQTY) AS [MinOrderQty]
	,NULL AS [MinOrderValue]
	,[Website]
	,[Comments]
	,SRES1 AS SRes1
	,SRES2 AS SRes2
	,MANDT AS SRes3
	,INTCA as CountryCode
FROM [stage].[SKS_FI_Supplier]
WHERE  EKORG NOT IN ('FI00','FI10','SE10','')
GO
PRINT N'Creating [stage].[OCS_SE_StockTransaction]'
GO
CREATE TABLE [stage].[OCS_SE_StockTransaction]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[IndexKey] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[TransactionCode] [nvarchar] (50) NULL,
[TransactionCodeDescription] [nvarchar] (50) NULL,
[IsInternalTransaction] [nvarchar] (50) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[SalesOrderNum] [nvarchar] (50) NULL,
[SalesOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[SalesInvoiceNum] [nvarchar] (50) NULL,
[SalesInvoiceLine] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[PurchaseInvoiceLine] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[BinNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[TransactionDate] [nvarchar] (50) NULL,
[TransactionQty] [nvarchar] (50) NULL,
[TransactionValue] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [nvarchar] (50) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vOCS_SE_StockTransaction]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vOCS_SE_StockTransaction] AS
	 SELECT 
--------------------------------------------- Keys/ IDs ---------------------------------------------
CONVERT(binary(32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IndexKey)))) AS StockTransactionID
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(Company))) AS CompanyID
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(PartNum))))) AS PartID
,CONVERT(binary(32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(SalesInvoiceNum))))) AS PurchaseInvoiceID
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(SalesOrderNum))))) AS PurchaseOrderNumID
,CONVERT(binary(32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company,'#',TRIM(SalesOrderNum))))) AS SalesOrderNumID
, CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(SalesInvoiceNum))))) AS SalesInvoiceID
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(CustomerNum))))) AS CustomerID
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(SupplierNum))))) AS SupplierID
,CONVERT(binary(32),HASHBYTES('SHA2_256',TRIM(Currency))) AS CurrencyID
,PartitionKey

--------------------------------------------- Regular Fields ---------------------------------------------
---Mandatory Fields ---
,UPPER(TRIM(Company)) AS Company
,UPPER(TRIM(IndexKey)) AS IndexKey
,UPPER(TRIM(TransactionCode)) AS TransactionCode
,UPPER(TRIM(PartNum)) AS PartNum
,CASE WHEN TransactionDate = '' OR TransactionDate is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, TransactionDate) END AS TransactionDate
,CONVERT(decimal(18,4), Replace(TransactionQty, ',', '.')) AS TransactionQty
,CONVERT(decimal(18,4), Replace(TransactionValue, ',', '.')) AS TransactionValue

---Valuable Fields ---

,iif (SalesOrderNum = null or SalesOrderNum = '' ,upper(trim(PurchaseOrderNum)),upper(trim(SalesOrderNum))) as OrderNum
,iif (SalesOrderLine = null or SalesOrderLine = '' ,upper(trim(PurchaseOrderLine)),upper(trim(SalesOrderLine))) as OrderLine
,iif (SalesInvoiceNum = null or SalesInvoiceNum = '' ,upper(trim(PurchaseInvoiceNum)),upper(trim(SalesInvoiceNum))) as InvoiceNum
,iif (SalesInvoiceLine = null or SalesInvoiceLine = '' ,upper(trim(PurchaseInvoiceLine)),upper(trim(SalesInvoiceLine))) as InvoiceLine
,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
,UPPER(TRIM(TransactionCodeDescription)) AS TransactionDescription
,UPPER(TRIM(IsInternalTransaction)) AS IsInternalTransaction
,UPPER(TRIM(CustomerNum)) AS CustomerNum
,UPPER(TRIM(SupplierNum)) AS SupplierNum
,UPPER(TRIM(SalesOrderNum)) AS SalesOrderNum
,UPPER(TRIM(PurchaseOrderNum)) AS PurchaseOrderNum
,UPPER(TRIM(SalesInvoiceNum)) AS SalesInvoiceNum
,UPPER(TRIM(PurchaseInvoiceNum)) AS PurchaseInvoiceNum
,UPPER(TRIM('SEK')) AS Currency
,1 AS ExchangeRate
--,UPPER(TRIM(Reference)) AS Reference
--,CASE WHEN AdjustmentDate = '' OR AdjustmentDate is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, AdjustmentDate) END AS AdjustmentDate
--,CASE WHEN AgreementEnd = '' OR AgreementEnd is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, AgreementEnd) END AS AgreementEnd

--- Good-to-have Fields ---
,UPPER(TRIM(SalesOrderLine)) AS SalesOrderLine
,UPPER(TRIM(PurchaseOrderLine)) AS PurchaseOrderLine
,UPPER(TRIM(SalesInvoiceLine)) AS SalesInvoiceLine
,UPPER(TRIM(PurchaseInvoiceLine)) AS PurchaseInvoiceLine
,UPPER(TRIM(BinNum)) AS BinNum
,UPPER(TRIM(BatchNum)) AS BatchNum
--,UPPER(TRIM(TransactionTime)) AS TransactionTime

--------------------------------------------- Meta Data ---------------------------------------------
,CONVERT(date, CreatedTimeStamp) AS CreatedTimeStamp
,CONVERT(date, ModifiedTimeStamp) AS ModifiedTimeStamp
--,TRIM(IsActiveRecord) AS IsActiveRecord

--------------------------------------------- Extra Fields ---------------------------------------------
--,UPPER(TRIM(STRes1)) AS STRes1
--,UPPER(TRIM(STRes2)) AS STRes2
--,UPPER(TRIM(STRes3)) AS STRes3
 FROM [stage].[OCS_SE_StockTransaction]
GO
PRINT N'Creating [dm_TS].[dimDepartment]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO


create view [dm_TS].[dimDepartment] as

select 
dpt.[DepartmentID]
,dpt.CompanyID
,dpt.[Company]
,dpt.[DepartmentCode]
,dpt.[DepartmentName]
,dpt.[DepartmentSite]
,dpt.[Address]
,dpt.[ZipCode]
,dpt.[City]
,dpt.[State]
,dpt.[CountryCode]
,dpt.[CountryName]
,dpt.[DepartmentType]
,dpt.[DepartmentDescription]
,dpt.[DptRes1]
,dpt.[DptRes2]
,dpt.[DptRes3]
from dm.dimDepartment as dpt
LEFT JOIN DBO.Company as company
	on dpt.Company = company.Company
WHERE company.BusinessArea = 'Transport Solutions' AND company.[Status] = 'Active';
GO
PRINT N'Creating [stage].[ARK_CZ_Supplier]'
GO
CREATE TABLE [stage].[ARK_CZ_Supplier]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[MainSupplierName] [nvarchar] (100) NULL,
[SupplierName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[AddressLine3] [nvarchar] (100) NULL,
[TelephoneNum] [nvarchar] (20) NULL,
[Email] [nvarchar] (200) NULL,
[City] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[Disctrict] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (100) NULL,
[Region] [nvarchar] (50) NULL,
[SupplierCategory] [nvarchar] (50) NULL,
[SupplierResponsible] [nvarchar] (50) NULL,
[AccountNum] [nvarchar] (50) NULL,
[VATNum] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (100) NULL,
[CodeOfConduct] [nvarchar] (200) NULL,
[SupplierScore] [nvarchar] (50) NULL,
[MinOrderQty] [decimal] (18, 4) NULL,
[MinOrderValue] [decimal] (18, 4) NULL,
[Website] [nvarchar] (100) NULL,
[Comments] [nvarchar] (max) NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vARK_CZ_Supplier]'
GO
CREATE view [stage].[vARK_CZ_Supplier] AS
--ADD TRIM()UPPER() INTO SupplierID 23-01-23 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([SupplierNum]))))) AS SupplierID
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', TRIM([SupplierNum])))) AS SupplierID
    ,UPPER(CONCAT([Company], '#', TRIM([SupplierNum]))) AS SupplierCode --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM([Company]))) AS CompanyID
	,[PartitionKey]

	,TRIM([Company]) AS Company
	,TRIM([SupplierNum]) AS [SupplierNum]
	,MainSupplierName
	,SupplierName
	,[AddressLine1]
    ,[AddressLine2]
    ,[AddressLine3]
	,[TelephoneNum]
	,[Email]
	,ZipCode
	,[City]
	,Disctrict AS [District]
	,TRIM(CountryCode) AS CountryCode
	,TRIM(CountryName) AS CountryName
	,'' CustomerNum
	,[Region]
	,[SupplierCategory]
	,[SupplierResponsible]
	,TRIM(concat ([AddressLine1]+' '+ addressline2, null)) AS AddressLine
	,TRIM(concat_ws(',', CountryName, City, IIF(ZipCode= ' ', null, ZipCode )
		,coalesce(IIF([AddressLine1]= ' ', null, [AddressLine1]), IIF([AddressLine2]= ' ', null, [AddressLine2]))
		,coalesce(IIF([AddressLine2]= ' ', null, [AddressLine2]), IIF([AddressLine3]= ' ', null, [AddressLine3])))) AS FullAddressLine
	,CONVERT([binary](32), HASHBYTES('SHA2_256', AccountNum)) AS [AccountNum] --approved by Emil T on 20200630. --Should likely be changed to Azure mask 2021-03-15 /SM
	,[VATNum]
	--,'' AS OrganizationNum
	,[InternalExternal]
	,[CodeOfConduct]
	,[SupplierScore]
	,TRY_CONVERT(decimal(18,4), [MinOrderQty]) AS [MinOrderQty]
	,[MinOrderValue]
	,[Website]
	,[Comments]
	,Res1 AS SRes1
	,Res2 AS SRes2
	,Res3 AS SRes3
FROM [stage].[ARK_CZ_Supplier]
GO
PRINT N'Creating [dm_AX].[fctPurchaseLedger]'
GO




CREATE VIEW [dm_AX].[fctPurchaseLedger] AS
SELECT 
 [PurchaseLedgerID]
,[Company]
,[SupplierNum]
,[PurchaseOrderNum]
,[PurchaseInvoiceNum]
,[PurchaseInvoiceDate]
,[PurchaseDueDate]
,[PurchaseLastPaymentDate]
,[InvoiceAmount]
,[ExchangeRate]
,[Currency]
,[VATAmount]
,[VATCode]
,[PayToName]
,[PayToCity]
,[PayToContact]
,[PaymentTerms]
,[PrePaymentNum]
,[LastPaymentNum]
,[PLRes1]
,[PLRes2]
,[PLRes3]
,[PurchaseLedgerCode]
,[CompanyID]
,[SupplierID]
,[PurchaseInvoiceID]
,[PurchaseOrderNumID]
,[CurrencyID]
,[PurchaseInvoiceDateID]
,[PartitionKey]
,[PaidInvoiceAmount]
,[RemainingInvoiceAmount]
,[AccountingDate]
,[AgingPeriod]
,[AgingSort]
,[VATCodeDesc]
,[LinkToOriginalInvoice]
  FROM [dm].[FactPurchaseLedger]
WHERE [Company] in ('AXISE','AXHSE') -- HQ basket
GO
PRINT N'Creating [stage].[AXL_NL_SalesLedger]'
GO
CREATE TABLE [stage].[AXL_NL_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceAmount] [decimal] (18, 4) NULL,
[RemainAmount] [decimal] (18, 4) NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vAXL_NL_SalesLedger]'
GO
CREATE VIEW [stage].[vAXL_NL_SalesLedger] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(sl.Company, '#', TRIM(sl.CustNum), '#', TRIM(sl.InvoiceNum))))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(sl.Company))) AS CompanyID
	,UPPER(CONCAT(sl.Company, '#', TRIM(sl.CustNum), '#', TRIM(sl.InvoiceNum))) AS SalesLedgerCode
	,sl.PartitionKey

	,UPPER(sl.Company) AS Company
	,UPPER(TRIM(sl.CustNum)) AS CustomerNum
	,TRIM(sl.InvoiceNum) AS [SalesInvoiceNum]
	,IIF(so.InvoiceDate = '' OR so.InvoiceDate IS NULL, '1900-01-01', so.InvoiceDate) AS [SalesInvoiceDate] --
	,CONVERT(date, DueDate) AS SalesDueDate
	,CONVERT(date, LastPaymentDate) AS LastPaymentDate
	,[InvoiceAmount]
	,[RemainAmount] AS [RemainingInvoiceAmount]
	,NULL AS CashDiscOffered
	,NULL AS CashDiscUsed
	,NULL AS [ExchangeRate]
	,NULL AS [Currency]
	,NULL AS [VATAmount]
	,NULL AS [VATCode]
	,NULL AS [PayToName]
	,NULL AS [PayToCity]
	,NULL AS [PayToContact]
	,NULL AS [PaymentTerms]
	,sl.Res1 AS SLRes1
	,sl.Res2 AS SLRes2
	,sl.Res3 AS SLRes3
FROM stage.AXL_NL_SalesLedger sl
	LEFT JOIN stage.AXL_CZ_SOLine so ON TRIM(sl.InvoiceNum) = TRIM(so.InvoiceNum)
WHERE DueDate > '2015-01-01'
GROUP BY
	sl.PartitionKey, sl.Company, sl.CustNum, sl.InvoiceNum, sl.Res2, sl.Res1, sl.Res3, sl.[InvoiceAmount], sl.[RemainAmount], so.InvoiceDate, DueDate, LastPaymentDate
GO
PRINT N'Creating [stage].[NOM_DK_PurchaseInvoice]'
GO
CREATE TABLE [stage].[NOM_DK_PurchaseInvoice]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaseOrderType] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[PurchaseInvoiceLine] [nvarchar] (50) NULL,
[PurchaseInvoiceType] [nvarchar] (50) NULL,
[PurchaseInvoiceDate] [nvarchar] (50) NULL,
[ActualDelivDate] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PurchaseInvoiceQty] [decimal] (18, 4) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[VATAmount] [decimal] (18, 4) NULL,
[CreditMemo] [nvarchar] (1) NULL,
[PurchaserName] [nvarchar] (100) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[PurchaseChannel] [nvarchar] (50) NULL,
[Comment] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[vNOM_DK_PurchaseInvoice]'
GO
CREATE VIEW [stage].[vNOM_DK_PurchaseInvoice] AS
--COMMENT EMPTY FIELDS 23-01-03 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company),'#', TRIM(PurchaseOrderNum),'#', TRIM(PurchaseOrderLine),'#', TRIM(PurchaseOrderSubLine),'#',TRIM(PurchaseInvoiceNum), '#', TRIM(PurchaseInvoiceLine))))) AS PurchaseInvoiceID 
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseInvoiceNum), '#', TRIM(PurchaseInvoiceLine), '#', PartNum)) AS PurchaseInvoiceCode
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum))) AS PurchaseOrderNumCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum),'#',TRIM(PurchaseOrderLine),'#',TRIM(PurchaseInvoiceNum))))) AS PurchaseOrderID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum))))) AS SupplierID
    ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT(int, replace(PurchaseInvoiceDate,'-','')) AS PurchaseInvoiceDateID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#', TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum),'#',TRIM(PurchaseOrderNum))))) AS PurchaseLedgerID --match PurchaseLedgerID in [vSCM_FI_PurchaseLedger]
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum),'#',TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine))) AS PurchaseOrderCode
--	,UPPER(CONCAT(Company, '#', TRIM(SupplierNum), '#', TRIM(PurchaseOrderNum), TRIM(PurchaseOrderLine), TRIM(PurchaseInvoiceNum))) AS PurchaseOrderCode
	,PartitionKey
	,UPPER(TRIM(Company)) AS Company
	,UPPER(TRIM(PurchaseOrderNum)) AS PurchaseOrderNum
	,UPPER(TRIM(PurchaseOrderLine)) AS PurchaseOrderLine
	,UPPER(TRIM(PurchaseOrderSubLine)) AS PurchaseOrderSubLine
	,PurchaseOrderType
	,UPPER(TRIM(PurchaseInvoiceNum)) AS PurchaseInvoiceNum
	,UPPER(TRIM(PurchaseInvoiceLine)) AS PurchaseInvoiceLine
	,PurchaseInvoiceType
	,cast(PurchaseInvoiceDate AS date) AS PurchaseInvoiceDate
	,try_CAST(ActualDelivDate AS DATE) AS ActualDelivDate
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,PurchaseInvoiceQty
	,UoM
	,UnitPrice
	,DiscountPercent
	,DiscountAmount
	,TotalMiscChrg
	,VATAmount
	,ExchangeRate
	,Currency
	,CreditMemo
	,PurchaserName
	,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
	,PurchaseChannel
	--,'' AS Comment
	--,'' AS PIRes1
	--,'' AS PIRes2
	--,'' AS PIRes3
	--,'' AS LineType
	--,'' AS OrderDelivLineNum
FROM stage.NOM_DK_PurchaseInvoice

GROUP BY
	PartitionKey, Company, PurchaseOrderNum, PurchaseInvoiceNum, SupplierNum, PartNum, PurchaseOrderLine, PurchaseOrderSubLine, PurchaseInvoiceQty, UnitPrice, WarehouseCode,PurchaserName, PurchaseInvoiceLine, PurchaseInvoiceType, PurchaseInvoiceDate, ActualDelivDate, TotalMiscChrg, CreditMemo, PurchaseOrderType,DiscountAmount,Currency,ExchangeRate, UoM, VATAmount, PurchaseChannel, DiscountPercent, DiscountAmount--, LastPaymentNum --, OrderType, [Site], OrderDelivLineNum, , DiscountPercent, PurchaserName, InvoiceLine, InvoiceType, InvoiceDate, ActualDeliveryDate, TotalMiscChrg, CreditMemo
GO
PRINT N'Creating [stage].[WID_EE_Supplier]'
GO
CREATE TABLE [stage].[WID_EE_Supplier]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[Name] [nvarchar] (100) NULL,
[Addressline1] [nvarchar] (100) NULL,
[Addressline2] [nvarchar] (100) NULL,
[Addressline3] [nvarchar] (100) NULL,
[City] [nvarchar] (50) NULL,
[ZIP] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (100) NULL,
[Region] [nvarchar] (50) NULL,
[SupplierCategory] [nvarchar] (100) NULL,
[Reference] [nvarchar] (100) NULL,
[BankAccountNum] [nvarchar] (50) NULL,
[VATNum] [nvarchar] (50) NULL,
[OrganizationNum] [nvarchar] (100) NULL,
[ABCCode] [nvarchar] (50) NULL,
[CustomerCode] [nvarchar] (50) NULL,
[TelephoneNum] [nvarchar] (50) NULL,
[Email] [nvarchar] (200) NULL,
[CodeOfConduct] [nvarchar] (500) NULL,
[MinOrderQty] [int] NULL,
[InternalName] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vWID_EE_Supplier]'
GO

CREATE VIEW [stage].[vWID_EE_Supplier] AS
--ADD UPPER()TRIM() INTO SupplierID 23-01-24 VA
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID
    ,CONCAT([Company],'#',[SupplierNum]) AS SupplierCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',[Company])) AS CompanyID
	,[PartitionKey]

	,[Company]
	,TRIM([SupplierNum]) AS [SupplierNum]
	--,'' AS MainSupplierName
	,[dbo].[ProperCase]([Name]) AS SupplierName
	,[AddressLine1]
    ,[AddressLine2]
    ,[AddressLine3]
	--,'' AS [TelephoneNum]
	--,'' AS [Email]
	,ZIP	AS ZipCode
	,trim(substring(replace([dbo].[ProperCase](AddressLine3),' ', ''), 6, 100))  AS [City]
	--,'' AS [District]
	,case when len(TRIM(CountryCode)) > 2 then cc.[Alpha-2 code]
	else TRIM(CountryCode)
	end AS CountryCode
	,[dbo].[ProperCase](supplier.[CountryName]) AS CountryName
	--,'' AS [Region]
	,[SupplierCategory]
	,[Reference] AS [SupplierResponsible]
	,[dbo].[ProperCase](TRIM(concat (addressline1+' '+ addressline2, null))) as AddressLine
	,[dbo].[ProperCase](TRIM(concat_ws(',',coalesce([dbo].[ProperCase](supplier.CountryName),null),IIF(City= ' ',null,trim(substring(replace([dbo].[ProperCase](AddressLine3),' ', ''), 6, 100))),IIF(ZIP= ' ',null,[dbo].[udf_GetNumeric]([Addressline3]))
		,coalesce(IIF([addressline1]= ' ',null,[addressline1]),IIF([addressline2]= ' ',null,[addressline2]))
		,coalesce(IIF([addressline2]= ' ',null,[addressline2]),IIF([addressline3]= ' ',null,[addressline3]))))) AS FullAddressLine
	,[BankAccountNum] AS [AccountNum] --required by Ian Morgan & approved by Emil T on 20200630
	,[VATNum]
	,OrganizationNum
	--,'' AS [InternalExternal]
	,[CodeOfConduct]
	,[CustomerCode] AS CustomerNum
	,[ABCCode] AS [SupplierScore]
	,[MinOrderQty]
	--,0 AS MinOrderValue
	--,'' AS [Website]
	--,'' AS [Comments]
	--,'' AS SRes1
	--,'' AS SRes2
	--,'' AS SRes3
FROM [stage].[WID_EE_Supplier] as supplier
left join dbo.CountryCodes as cc
	on trim(supplier.CountryCode) = cc.[Alpha-3 code]
GO
PRINT N'Creating [stage].[AXL_DE_Customer]'
GO
CREATE TABLE [stage].[AXL_DE_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[MainCustomerName] [nvarchar] (100) NULL,
[CustomerName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[AddressLine] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (20) NULL,
[TelephoneNumber2] [nvarchar] (20) NULL,
[Email] [nvarchar] (100) NULL,
[City] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[Division] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (50) NULL,
[CustomerIndustry] [nvarchar] (50) NULL,
[CustomerSubIndustry] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNo] [nvarchar] (50) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[CustomerABC] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[SalesPersonResponsible] [nvarchar] (50) NULL,
[CustomerType] [nvarchar] (50) NULL,
[Res1] [nvarchar] (50) NULL,
[Res2] [nvarchar] (50) NULL,
[Res3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXL_DE_Customer]'
GO

CREATE VIEW [stage].[vAXL_DE_Customer] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustomerNum))) )) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,UPPER(CONCAT([Company], '#', TRIM([CustomerNum]))) AS CustomerCode
	,PartitionKey

	,UPPER(Company) AS Company
	,UPPER(TRIM(CustomerNum)) AS [CustomerNum]
	,TRIM(MainCustomerName) AS MainCustomerName
	,TRIM(CustomerName) AS  [CustomerName]
	,TRIM([AddressLine1]) AS [AddressLine1]
	,TRIM([AddressLine2]) AS [AddressLine2]
	,TRIM([AddressLine3]) AS [AddressLine3]
	,TRIM([TelephoneNumber1]) AS [TelephoneNum1]
	,TRIM([TelephoneNumber2]) AS [TelephoneNum2]
	,TRIM([Email]) AS [Email]
	,TRIM([ZipCode]) AS [ZipCode]
	,TRIM([City]) AS [City]
	,TRIM([State]) AS [State]
	,TRIM([District]) AS [SalesDistrict]
	,TRIM(con.CountryName) AS CountryName
	,TRIM([ISOAlpha2Code]) AS [CountryCode]
	,TRIM([Division]) AS [Division]
	,TRIM([CustomerIndustry]) AS [CustomerIndustry]
	,TRIM([CustomerSubIndustry]) AS [CustomerSubIndustry]
	,TRIM([AddressLine3]) AS [AddressLine]
	,CONCAT(TRIM(con.CountryName), + ',  ' + TRIM([City]), + ',  ' + TRIM([ZipCode]), + ',  ' + TRIM(addressline3)) AS [FullAddressLine]
	,TRIM(CustomerGroup) AS [CustomerGroup]
	,TRIM(CustomerGroup) AS [CustomerSubGroup]
	,TRIM([SalesRepCode]) AS [SalesPersonCode]
	,TRIM(SalesPersonName) AS [SalesPersonName]
	,TRIM([SalesPersonResponsible]) AS [SalesPersonResponsible]
	,TRIM([VATRegNo]) AS [VATNum]
	,TRIM([AccountString]) AS [AccountNum]
	,TRIM([InternalExternal]) AS [InternalExternal]
	,TRIM([CustomerABC]) AS [CustomerScore]
	,TRIM([CustomerType]) AS [CustomerType]
FROM [stage].[AXL_DE_Customer] com
	LEFT JOIN dbo.Country con ON com.CountryName = con.[ISOAlpha2Code]

--GROUP BY
--	PartitionKey, Company, CustomerNum, CustomerName, MainCustomerName, [AddressLine1], [AddressLine2], [AddressLine3], [TelephoneNumber1], [TelephoneNumber2], [Email], [ZipCode], [City], [State], [District], [CountryName], [Division], [CustomerIndustry], [CustomerSubIndustry], CustomerGroup, [SalesRepCode], SalesPersonName, [SalesPersonResponsible], [VATRegNo], [AccountString], [InternalExternal], [CustomerABC], [CustomerType]

--	Stagetablename in ('AXL_AU_Customer', 'AXL_DC_Customer', 'AXL_HU_Customer', 'AXL_IE_Customer', 'AXL_PL_Customer', 'AXL_PT_Customer', 'AXL_UK_Customer')
GO
PRINT N'Creating [stage].[FOR_ES_ProductionOrder]'
GO
CREATE TABLE [stage].[FOR_ES_ProductionOrder]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[ProductionOrderNum] [nvarchar] (50) NOT NULL,
[ProductionOrderLineNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[Uom] [nvarchar] (50) NULL,
[PartType] [nvarchar] (50) NULL,
[OrderQty] [nvarchar] (50) NULL,
[ScrappedQty Assembled Item] [nvarchar] (50) NULL,
[CompletedQty Assembled Item] [nvarchar] (50) NULL,
[RemainingQty] [nvarchar] (50) NULL,
[Status] [nvarchar] (50) NULL,
[CurrentOperationStage_Preparado] [nvarchar] (50) NULL,
[CurrentOperationStage_Cosido] [nvarchar] (50) NULL,
[CurrentOpeartionStage_Empaquetado] [nvarchar] (50) NULL,
[OrderCreateDate] [nvarchar] (50) NULL,
[RequestedEndDate] [nvarchar] (50) NULL,
[StartDate] [nvarchar] (50) NULL,
[EndDate] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[Warehouse] [nvarchar] (50) NULL,
[SalesOrderNum] [nvarchar] (50) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[ ProductionOrderCreaterName] [nvarchar] (50) NULL,
[CurrentResourceGroup] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [nvarchar] (50) NULL,
[PlannedEndDate] [nvarchar] (50) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vFOR_ES_ProductionOrder]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vFOR_ES_ProductionOrder]
	AS SELECT
    	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(ProductionOrderNum), '#', TRIM(ProductionOrderLineNum), '#',TRIM(PartNum)))))  as [ProductionOrderID]
      ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) as CustomerID
	  ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) as CompanyID
	  ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID 
	  ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([Warehouse]))))) AS WarehouseID
	  ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SalesOrderNum))))) AS SalesOrderNumID  
	  ,[PartitionKey]                                  
      ,UPPER(TRIM([Company]))  AS     "Company"                                  
      ,UPPER(TRIM([ProductionOrderNum])) AS    "ProductionOrderNum"                    
      ,UPPER(TRIM([ProductionOrderLineNum]))  AS  "ProductionOrderLineNum"                 
      ,UPPER(TRIM([PartNum])) AS   "PartNum"                                 
      ,[Uom]                                        
      ,[PartType]
      ,IIF(PartType = 'Component',-1 * CONVERT(decimal(18,4), Replace([OrderQty], ',', '.')), CONVERT(decimal(18,4), Replace([OrderQty], ',', '.'))) AS "OrderQuantity"
      ,IIF(PartType = 'Component',-1* CONVERT(decimal(18,4), Replace([ScrappedQty Assembled Item], ',', '.')),CONVERT(decimal(18,4), Replace([ScrappedQty Assembled Item], ',', '.'))) AS "ScrappedQty"
      ,IIF(PartType = 'Component',-1* CONVERT(decimal(18,4), Replace([CompletedQty Assembled Item], ',', '.')),CONVERT(decimal(18,4), Replace([CompletedQty Assembled Item], ',', '.'))) AS "CompletedQuantity"
      ,IIF(PartType = 'Component',-1* CONVERT(decimal(18,4), Replace([RemainingQty], ',', '.')),CONVERT(decimal(18,4), Replace([RemainingQty], ',', '.'))) AS "RemainingQty"                          
      ,[Status]
      ,CASE 
        WHEN [CurrentOperationStage_Preparado]  = '.' AND [CurrentOperationStage_Preparado] = '.' AND [CurrentOpeartionStage_Empaquetado]  = '.'    THEN 'NotStarted'
        WHEN [CurrentOperationStage_Preparado]  = 'OK' AND [CurrentOperationStage_Preparado] = '.' AND [CurrentOpeartionStage_Empaquetado]  = '.'   THEN 'Prepared'
        WHEN [CurrentOperationStage_Preparado]  = 'OK' AND [CurrentOperationStage_Cosido] = '.' AND [CurrentOpeartionStage_Empaquetado]  = 'OK'     THEN 'Sewing'
        WHEN [CurrentOperationStage_Preparado]  = 'OK' AND [CurrentOperationStage_Cosido] = 'OK' AND [CurrentOpeartionStage_Empaquetado]  = '.'     THEN 'Packaging'
        WHEN [CurrentOperationStage_Preparado]  = 'OK' AND [CurrentOperationStage_Cosido] = 'OK' AND [CurrentOpeartionStage_Empaquetado]  = 'OK'    THEN 'ReadyToSend'
        ELSE NULL END AS "CurrentOperationStage"  
      ,CASE WHEN [OrderCreateDate] = '' OR [OrderCreateDate] is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, [OrderCreateDate]) END AS "OrderCreateDate"
      ,CASE WHEN [PlannedEndDate] = '' OR [PlannedEndDate] is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, [PlannedEndDate]) END AS "PlannedEndDate"
      ,CASE WHEN [StartDate] = '' OR [StartDate] is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, [StartDate]) END AS "StartDate"
      ,CASE WHEN [EndDate] = '' OR [EndDate] is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, [EndDate]) END AS "EndDate"                                
      ,[OrderType]                                  
      ,UPPER(TRIM([Warehouse]))   AS "WarehouseCode"                               
      ,UPPER(TRIM([SalesOrderNum])) AS "SalesOrderNum"                              
      ,UPPER(TRIM([CustomerNum]))  AS  "CustomerNum"                          
      ,[ ProductionOrderCreaterName]  AS   "ProductionOrderCreaterName"
      ,[CurrentResourceGroup]
      ,[Currency]
      ,[ExchangeRate]
      ,CASE WHEN CreatedTimeStamp = '' OR CreatedTimeStamp is NULL THEN CONVERT(datetime,'1900-01-01') ELSE CONVERT(datetime, left(CreatedTimeStamp,19 )) END AS CreatedTimeStamp
      ,CASE WHEN [ModifiedTimeStamp] = '' OR [ModifiedTimeStamp] is NULL THEN CONVERT(datetime,'1900-01-01') ELSE CONVERT(datetime, left(ModifiedTimeStamp,19 )) END AS ModifiedTimeStamp
	
	 FROM [stage].[FOR_ES_ProductionOrder]
GO
PRINT N'Creating [dm_TS].[dimProject]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO













CREATE VIEW [dm_TS].[dimProject] AS

SELECT 
 proj.[ProjectID]
,proj.[ProjectCode]
,proj.[PartitionKey]
,proj.[Company]
,proj.[MainProjectNum]
,proj.[ProjectNum]
,proj.[ProjectDescription]
,proj.[Project]
,proj.[Organisation]
,proj.[ProjectStatus]
,proj.[ProjectCategory]
,proj.[WBSElement]
,proj.[ObjectNum]
,proj.[Level]
,proj.[Currency]
,proj.[WarehouseCode]
,proj.[ProjectResponsible]
,proj.[Comments]
,proj.[StartDate]
,proj.[EndDate]
,proj.[EstEndDate]
,proj.[ActualCost]
FROM [dm].[DimProject] as proj
WHERE proj.[Company] in ('FESFORA', 'FSEFORA', 'FFRFORA', 'FFRGPI', 'FFRLEX', 'IFIWIDN', 'IEEWIDN', 'TMTFI', 'TMTEE', 'FITMT', 'EETMT', 'ABKSE','STESE')
GO
PRINT N'Creating [stage].[MEN_NL_Department]'
GO
CREATE TABLE [stage].[MEN_NL_Department]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (12) NOT NULL,
[Department] [nvarchar] (50) NULL,
[DepartmentText] [nvarchar] (50) NULL,
[DW_TimeStamp] [nvarchar] (30) NULL
)
GO
PRINT N'Creating [stage].[vMEN_NL_Department]'
GO

CREATE VIEW [stage].[vMEN_NL_Department] AS
WITH CTE AS (
SELECT CASE WHEN Company = '14' THEN  CONCAT(N'MENBE',Company)
			ELSE  CONCAT(N'MENNL',Company) END AS CompanyCode		--Doing this to have the company code in nvarchar and don't need to repeat CAST(CONCAT('MEN-',Company) AS nvarchar(50)) everywhere /SM
	  ,[PartitionKey], [Company], [Department], [DepartmentText], [DW_TimeStamp]
  FROM stage.MEN_NL_Department
)


SELECT 
	  CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(CompanyCode,'#',trim(Department)))) AS DepartmentID
	  ,CONVERT([binary](32),HASHBYTES('SHA2_256',CompanyCode)) AS CompanyID
	  ,[PartitionKey]
      ,[CompanyCode] AS Company
	  ,Department as DepartmentCode
	  ,DepartmentText as DepartmentName
	  --,DW_TimeStamp
  FROM CTE
GO
PRINT N'Creating [dm_AX].[DimRLS]'
GO


CREATE VIEW [dm_AX].[DimRLS] AS
SELECT 
	 [id]
,[Company]
,[Email]
,[RLSTable]
,[RLSField]
,[RLSValue]
,[AccessType]
,[SourceList]
,[Modified_at]
,[Author]
,[BusinessArea]
FROM [dm].DimRLS AS RLS
WHERE [Company] in ('AXISE','AXHSE') -- HQ basket  SB 2023-02-07    -- previously WHERE BusinessArea = 'Finance'
GO
PRINT N'Creating [stage].[CER_DK_StockTransaction]'
GO
CREATE TABLE [stage].[CER_DK_StockTransaction]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[IndexKey] [nvarchar] (50) NOT NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[TransactionCode] [nvarchar] (50) NULL,
[TransactionDescription] [nvarchar] (200) NULL,
[IssuerReceiverNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[BinNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[TransactionDate] [date] NULL,
[TransactionTime] [nvarchar] (50) NULL,
[TransactionQty] [decimal] (18, 4) NULL,
[TransactionValue] [decimal] (18, 4) NULL,
[CostPrice] [decimal] (18, 4) NULL,
[SalesUnitPrice] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[Reference] [nvarchar] (50) NULL,
[AdjustmentDate] [date] NULL,
[STRes1] [nvarchar] (50) NULL,
[STRes2] [nvarchar] (50) NULL,
[STRes3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_DK_StockTransaction]'
GO
CREATE VIEW [stage].[vCER_DK_StockTransaction] AS 
--ADD TRIM() INTO PartID,WarehouseID 2022-12-14 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#', IndexKey)))) AS StockTransactionID
	,UPPER(CONCAT([Company],'#',TRIM(IndexKey))) AS StockTransactionCode --StockTransactionCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',[Company])) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM(PartNum))))) AS PartID
    --,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT([Company],'#',TRIM(PartNum))))) AS PartID
 	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company], '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(OrderNum)))) AS PurchaseOrderNumID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([InvoiceNum]))))) AS SalesInvoiceID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([InvoiceNum]))))) AS PurchaseInvoiceID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#', '')))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#','')))) AS SupplierID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Currency])))) AS CurrencyID
	,[PartitionKey]

    ,Company -- 
	,WarehouseCode
	,iif(TransactionDate = '2017-04-28' and LEFT(InvoiceNum,7) =  'ÅBNING','OB',TransactionCode) AS TransactionCode
    ,CASE	WHEN TRIM(TransactionDescription) = 'Sale' THEN 'Outgoing goods' 
			WHEN TRIM(TransactionDescription) = 'Purchase' THEN 'Incoming goods' 
			when  TransactionDate = '2017-04-28' and LEFT(TRIM(InvoiceNum),7) =  'ÅBNING' then 'Opening balance'
				END AS TransactionDescription
	--,'' AS IssuerReceiverNum
	,OrderNum 
	,OrderLine
	,InvoiceNum
	,InvoiceLine
    ,COALESCE(TRIM(UPPER([PartNum])),'') AS PartNum
    ,BinNum
    ,BatchNum
    ,TransactionDate
    ,TransactionTime
	,TransactionQty
    ,TransactionValue
	,[CostPrice]
    ,SalesUnitPrice
	,Currency
	,[Reference]
	,AdjustmentDate
	,CASE WHEN TransactionDescription IN ('Sale','Purchase') THEN 'External' ELSE 'Internal' END	AS InternalExternal
	,STRes1
	,STRes2
	,STRes3
    ,IndexKey
	
FROM 
	[stage].[CER_DK_StockTransaction]
GO
PRINT N'Creating [stage].[TMT_FI_PurchaseOrder]'
GO
CREATE TABLE [stage].[TMT_FI_PurchaseOrder]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [varchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaseOrderType] [nvarchar] (50) NULL,
[PurchaseOrderDate] [date] NULL,
[PurchaseOrderStatus] [nvarchar] (50) NULL,
[OpenRelease] [nvarchar] (50) NULL,
[OrgReqDelivDate] [date] NULL,
[OrgCommittedDelivDate] [date] NULL,
[CommittedDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[ReqDelivDate] [date] NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[Version] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[SupplierPartNum] [nvarchar] (50) NULL,
[SupplierInvoiceNum] [nvarchar] (50) NULL,
[DelivCustomerNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[PurchaseOrderQty] [decimal] (18, 4) NULL,
[ReceiveQty] [decimal] (18, 4) NULL,
[PurchaseInvoiceQty] [decimal] (18, 4) NULL,
[MinOrderQty] [decimal] (18, 4) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[LandedCost] [decimal] (18, 4) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[PurchaserName] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[ReceivingNum] [nvarchar] (50) NULL,
[DelivTime] [nvarchar] (50) NULL,
[PurchaseChannel] [nvarchar] (50) NULL,
[Documents] [nvarchar] (50) NULL,
[Comments] [nvarchar] (max) NULL,
[IsOrderClosed] [nvarchar] (50) NULL,
[PORes1] [nvarchar] (50) NULL,
[PORes2] [nvarchar] (50) NULL,
[PORes3] [nvarchar] (50) NULL,
[PmtLineNum] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vTMT_FI_PurchaseOrder]'
GO
CREATE VIEW [stage].[vTMT_FI_PurchaseOrder] AS
--COMMENT EMPTY FIELDS // ADD TRIM() INTO CustomerID 23-01-09 
--ADD TRIM() INTO SupplierID 23-01-04 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine) )))) AS PurchaseOrderID 
	,UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine))) AS PurchaseOrderCode --
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', '')))) AS PurchaseInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(Currency)))) AS CurrencyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(DelivCustomerNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(DelivCustomerNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum))))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierNum))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,getdate() AS PartitionKey -- 

	,UPPER(Company) AS Company
	,UPPER(TRIM(PartNum)) AS PartNum
	,UPPER(TRIM(SupplierNum)) AS [SupplierNum]
	,(TRIM(PurchaseOrderNum)) AS PurchaseOrderNum
	,(TRIM(PurchaseOrderLine)) AS PurchaseOrderLine
	,TRIM(PurchaseOrderSubLine) AS PurchaseOrderSubLine -- invoiceline
	,TRIM(PurchaseOrderType) AS PurchaseOrderType
	,CASE WHEN IsOrderClosed = '1' THEN '1'
			WHEN SUM(ReceiveQty) > PurchaseOrderQty THEN '0' -- after discusstion with Petri 20230316 /DZ
			WHEN SUM(ReceiveQty) < PurchaseOrderQty AND PurchaseOrderDate < '2022-10-01' THEN '0' -- after discusstion with Petri 20230316 /DZ
			ELSE '0' END AS PurchaseOrderStatus
	,CASE WHEN IsOrderClosed = '1' THEN '1'
			WHEN SUM(ReceiveQty) > PurchaseOrderQty THEN '0' -- after discusstion with Petri 20230316 /DZ
			WHEN SUM(ReceiveQty) < PurchaseOrderQty AND PurchaseOrderDate < '2022-10-01' THEN '0' -- after discusstion with Petri 20230316 /DZ
			ELSE '0' END AS IsClosed
	,IIF(PurchaseOrderDate IS NULL, '1900-01-01', PurchaseOrderDate) AS PurchaseOrderDate
	,IIF(OrgReqDelivDate IS NULL, '1900-01-01', OrgReqDelivDate) AS OrgReqDelivDate
--	,OrgCommittedDelivDate
	,IIF(CommittedDelivDate IS NULL, '1900-01-01', CommittedDelivDate) AS CommittedDelivDate
	,IIF(ActualDelivDate IS NULL, '1900-01-01', ActualDelivDate) AS ActualDelivDate
	,IIF(ActualDelivDate IS NULL, '1900-01-01', ReqDelivDate) AS ReqDelivDate
	--,'' AS PurchaseInvoiceNum  -- MIN(IIF(TRIM(PurchaseInvoiceNum) = '0',  Null, UPPER(TRIM(PurchaseInvoiceNum))))
	,TRIM(SupplierPartNum) AS SupplierPartNum
	,MIN(TRIM(SupplierInvoiceNum)) AS SupplierInvoiceNum
	,TRIM(DelivCustomerNum) AS [DelivCustomerNum]
	,PartStatus
	,PurchaseOrderQty
	,SUM(ReceiveQty) as ReceiveQty
	,SUM(PurchaseInvoiceQty) AS InvoiceQty
	,MinOrderQty
	,[UoM]
	,UnitPrice
	,DiscountPercent
	,DiscountAmount
	,LandedCost
	,IIF(ExchangeRate = 0, 0, 1/ExchangeRate) AS ExchangeRate -- 
	,Currency
	,UPPER(TRIM(PurchaserName)) AS PurchaserName
	,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
	,TRIM(ReceivingNum) AS ReceivingNum
	,datediff(day, LEFT(DelivTime, 10), getdate()) AS DelivTime
	,PurchaseChannel
	,Documents
	,TRIM(Comments) AS Comments
	,[Version] AS PORes1 
	--,'' AS PORes2 
	--,'' AS PORes3
FROM 
	[stage].[TMT_FI_PurchaseOrder]
	
GROUP BY
	PartitionKey, Company, PurchaseOrderNum, PurchaseOrderLine, PurchaseOrderSubLine, SupplierNum, DelivCustomerNum, PurchaseOrderStatus, PartNum, PurchaseOrderType, UnitPrice, PurchaseOrderQty, MinOrderQty, UoM,  ExchangeRate, Currency, PurchaseOrderDate, ActualDelivDate, OrgReqDelivDate, CommittedDelivDate, ReqDelivDate, PurchaserName, WarehouseCode, DiscountPercent, DiscountAmount, DelivTime, PurchaseChannel, SupplierPartNum, PartStatus,Documents, Comments, LandedCost, ReceivingNum, [Version], IsOrderClosed--, SysRowID, LeadTime
GO
PRINT N'Creating [stage].[OCS_SE_SOLine]'
GO
CREATE TABLE [stage].[OCS_SE_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SalesPerson] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[InvoiceType] [nvarchar] (50) NULL,
[InvoiceDate] [nvarchar] (50) NULL,
[ActualDeliveryDate] [nvarchar] (50) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[VAT] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CreditMemo] [nvarchar] (100) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[BusinessChain] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[ProjectNum] [nvarchar] (50) NULL,
[JNo] [nvarchar] (50) NULL,
[SellingShipQty_2] [decimal] (18, 4) NULL,
[trtp] [nvarchar] (50) NULL,
[OrdPrGr] [nvarchar] (50) NULL,
[OrdTp] [nvarchar] (50) NULL,
[TransGr] [nvarchar] (50) NULL,
[LstInvDt] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vOCS_SE_SOLine]'
GO
CREATE VIEW [stage].[vOCS_SE_SOLine] AS
--COMMENT EMPTY FIELD // ADD UPPER()TRIM() INTO PartID,CustomerID,WarehouseID 2022-12-21 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(PartNum), '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine), '#', SellingShipQty,'#', UnitPrice, '#', UnitCost))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', OrderNum, '#', OrderLine, '#', InvoiceNum))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', CustNum, '#', InvoiceNum))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum)))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustNum)))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', PartNum))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', WarehouseCode))) AS WarehouseID
	,CONCAT(Company, '#', OrderNum, '#', OrderLine, '#', InvoiceNum) AS SalesOrderCode
	,CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine)) AS SalesInvoiceCode --redundent?
	,CONVERT(int, replace(convert(date, InvoiceDate), '-', '')) AS SalesInvoiceDateID --redundent?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#',[ProjectNum]) ))	AS ProjectID
	,PartitionKey

	,Company
	,[dbo].[ProperCase](SalesPerson) AS SalesPersonName
	,TRIM(CustNum) AS CustomerNum
	,TRIM(PartNum) AS PartNum
	--,'' AS PartType
	,TRIM(OrderNum) AS SalesOrderNum
	,OrderLine AS SalesOrderLine
	--,'' AS SalesOrderSubLine
	,[OrderType] AS SalesOrderType
	--,'' AS OrderCategory
	,InvoiceNum AS SalesInvoiceNum
	,InvoiceLine AS SalesInvoiceLine
	,InvoiceType AS SalesInvoiceType
	,IIF(InvoiceDate = '',  CONVERT(date, '1901-01-01'),  CONVERT(date, InvoiceDate)) AS SalesInvoiceDate
	,IIF(ActualDeliveryDate = '0', CONVERT(date, '1901-01-01'), CONVERT(date, ActualDeliveryDate)) AS ActualDelivDate
	,SellingShipQty AS SalesInvoiceQty
	,[Unit] AS UoM
	,UnitPrice
	,UnitCost
	,IIF( (UnitPrice*SellingShipQty) = 0, 0, DiscountAmount/(UnitPrice*SellingShipQty) ) AS DiscountPercent
	,DiscountAmount
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	,TotalMiscChrg
	,[VAT] AS VATAmount
	,Currency
	,CONVERT(decimal (18,4), ExchangeRate) AS ExchangeRate
	,IIF(SellingShipQty < 0, '1', '0') AS CreditMemo
	,[SalesChannel] AS SalesChannel
	,[BusinessChain] AS Department
	,WarehouseCode
	--,NULL AS DeliveryAddress
	--,'' AS CostBearerNum
	--,'' AS CostUnitNum
	--,'' AS ReturnComment
	--,'' AS ReturnNum
	,[ProjectNum] AS ProjectNum
	--,'' AS IndexKey
	--,'' AS SIRes1
	--,'' AS SIRes2
	--,'' AS SIRes3
FROM stage.OCS_SE_SOLine
GROUP BY
	PartitionKey, Company, SalesPerson, CustNum, PartNum, OrderNum, OrderLine, OrderType, InvoiceNum, InvoiceLine, InvoiceDate, ActualDeliveryDate, SellingShipQty, UnitPrice, UnitCost, DiscountAmount, TotalMiscChrg, WarehouseCode, CreditMemo,  ExchangeRate, InvoiceType, Currency, [ProjectNum], [VAT], [Unit], [SalesChannel], [BusinessChain]
GO
PRINT N'Creating [stage].[AXL_SF_OLine]'
GO
CREATE TABLE [stage].[AXL_SF_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[NeedbyDate] [date] NULL,
[ExpDelivDate] [date] NULL,
[EDCExpDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (10) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[SalesPerson] [nvarchar] (50) NULL,
[WareHouseCode] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[BusinessChain] [nvarchar] (50) NULL,
[SalesOrderCategory] [nvarchar] (100) NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL,
[PartDesc] [nvarchar] (max) NULL,
[APV_Cost_EUR] [nvarchar] (50) NULL,
[APV_Item] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXL_SF_OLine]'
GO

CREATE VIEW [stage].[vAXL_SF_OLine] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(PartDesc))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum), '#', (IIF(TRIM([PartNum]) LIKE 'IACO%' , 'MISC. CHARGES', TRIM(PartDesc) )) )))) AS PartID
	,CONVERT(int, replace(convert(date, OrderDate), '-', '')) AS SalesOrderDateID
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine))) AS SalesOrderCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(CustNum) AS CustomerNum 
	,TRIM(OrderNum) AS [SalesOrderNum]
	,TRIM(OrderLine) AS [SalesOrderLine]
	,TRIM(OrderSubLine) AS [SalesOrderSubLine]
	,CONVERT(nvarchar(50), TRIM(OrderType)) AS [SalesOrderType]
	,TRIM([SalesOrderCategory]) AS [SalesOrderCategory]
	,OrderDate AS [SalesOrderDate]
	,NeedbyDate
	,ExpDelivDate AS [ExpDelivDate]
	,EDCExpDelivDate
	,ActualDelivDate
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,OrderQty AS [SalesOrderQty]
	,DelivQty
	,RemainingQty
	,Unit AS [UoM]
	,UnitPrice
	,UnitCost
	,LEFT(TRIM(Currency), 3) AS Currency
	,ExchangeRate
	,LEFT(TRIM(OpenRelease), 1) AS OpenRelease
	,DiscountAmount
	,DiscountPercent
	,NULL AS CashDiscOffered
	,NULL AS CashDiscUsed
	,TRIM(PartNum) AS PartNum
	,UPPER(PartDesc) AS PartDesc
	,'' AS [PartType]
	,CONVERT(nvarchar(50), PartStatus) AS PartStatus
	,TRIM(SalesPerson) AS [SalesPersonName]
	,TRIM(WareHouseCode) AS WarehouseCode
	,'' AS IndexKey
	,TRIM(SalesChannel) AS SalesChannel
	,TRIM(BusinessChain) AS [Department]
	,Res3 AS [ProjectNum] -- = FreeOfCharge: Y = yes, N = no
	,'' AS Cancellation
	,Res1 AS SORes1
	,Res2 AS SORes2
	,Res3 AS SORes3
FROM stage.AXL_SF_OLine
WHERE OrderDate >= '2015-01-01'
GO
PRINT N'Creating [stage].[SPR_NL_SalesLedger]'
GO
CREATE TABLE [stage].[SPR_NL_SalesLedger]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (8) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[SalesInvoiceNum] [nvarchar] (50) NULL,
[SalesInvoiceDate] [nvarchar] (50) NULL,
[SalesDueDate] [nvarchar] (50) NULL,
[SalesLastPaymentDate] [nvarchar] (50) NULL,
[AccountingDate] [nvarchar] (50) NULL,
[ExchangeRate] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[InvoiceAmount] [nvarchar] (50) NULL,
[RemainingInvoiceAmount] [nvarchar] (50) NULL,
[PaidInvoiceAmount] [nvarchar] (50) NULL,
[VATAmount] [nvarchar] (50) NULL,
[VATCode] [nvarchar] (50) NULL,
[PayToName] [nvarchar] (50) NULL,
[PayToCity] [nvarchar] (50) NULL,
[PayToContact] [nvarchar] (50) NULL,
[AgingPeriod] [nvarchar] (50) NULL,
[PaymentTerms] [nvarchar] (50) NULL,
[SLRes1] [nvarchar] (50) NULL,
[SLRes2] [nvarchar] (50) NULL,
[SLRes3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vSPR_NL_SalesLedger]'
GO


CREATE VIEW [stage].[vSPR_NL_SalesLedger] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustomerNum), '#', TRIM(SalesInvoiceNum)))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustomerNum)))) AS CustomerID
	,CONCAT(Company, '#', TRIM(CustomerNum), '#', TRIM(SalesInvoiceNum)) AS SalesLedgerCode
	,PartitionKey

	,Company
	,TRIM(CustomerNum) AS CustomerNum
	,TRIM(SalesInvoiceNum) AS SalesInvoiceNum
	,CONCAT('20', SUBSTRING([SalesInvoiceDate], 7,2), '-', SUBSTRING([SalesInvoiceDate], 4,2), '-', SUBSTRING([SalesInvoiceDate], 1,2)) AS SalesInvoiceDate
	,CONCAT('20', SUBSTRING(SalesDueDate, 7,2), '-', SUBSTRING(SalesDueDate, 4,2), '-', SUBSTRING(SalesDueDate, 1,2)) AS SalesDueDate
	,MAX(CONCAT('20', SUBSTRING(SalesLastPaymentDate, 7,2), '-', SUBSTRING(SalesLastPaymentDate, 4,2), '-', SUBSTRING(SalesLastPaymentDate, 1,2))) AS SalesLastPaymentDate
	,IIF(InvoiceAmount = 'na', NULL, TRY_CONVERT(decimal(18,4), InvoiceAmount)) AS InvoiceAmount
	,IIF(PaidInvoiceAmount = 'na', NULL, TRY_CONVERT(decimal(18,4), PaidInvoiceAmount)) AS PaidInvoiceAmount
	,IIF(RemainingInvoiceAmount = 'na', NULL, TRY_CONVERT(decimal(18,4), RemainingInvoiceAmount)) AS RemainingInvoiceAmount
	,1 AS ExchangeRate
	,'EUR' AS Currency
	,IIF(VATAmount = 'na', NULL, TRY_CONVERT(decimal(18,4), VATAmount)) AS VATAmount
	,VATCode
	,PayToName
	,PayToCity
	,PayToContact
	,PaymentTerms
	,SLRes1
	,SLRes2
	,SLRes3
	,TRY_CONVERT(date, '1900-01-01') AS AccountingDate
	,'' AS AgingPeriod
	,'' AS VATCodeDesc
	,'' AS LinkToOriginalInvoice
	,'' AS AgingSort
FROM 
	stage.SPR_NL_SalesLedger
GROUP BY

	PartitionKey, Company, CustomerNum, SalesInvoiceNum, SalesInvoiceDate, [SalesDueDate], InvoiceAmount, PaidInvoiceAmount, RemainingInvoiceAmount, VATAmount, VATCode, PayToName, PayToCity, PayToContact, PaymentTerms, SLRes1, SLRes2, SLRes3
GO
PRINT N'Creating [dm_TS].[fctBudget]'
GO



CREATE VIEW [dm_TS].[fctBudget] AS

SELECT bdg.[BudgetID]
,bdg.[CustomerID]
,bdg.[CompanyID]
,bdg.[PartID]
,bdg.[WarehouseID]
,bdg.[ProjectID]
,bdg.[DepartmentID]
,bdg.[BudgetPeriodDateID]
,bdg.[PartitionKey]
,bdg.[BudgetType]
,bdg.[BudgetName]
,bdg.[BudgetDescription]
,bdg.[Company]
,bdg.[BudgetPeriod]
,bdg.[BudgetPeriodDate]
,bdg.[PeriodType]
,bdg.[CustomerNum]
,bdg.[PartNum]
,bdg.[SalesPersonCode]
,bdg.[SalesPersonName]
,bdg.[BudgetSales]
,bdg.[BudgetCost]
,bdg.[GrossProfitInvoiced]
,bdg.[GrossMarginInvoicedPercent]
,bdg.[BudgetFinance]
,bdg.[WarehouseCode]
,bdg.[CostBearerNum]
,bdg.[CostUnitNum]
,bdg.[ProjectNum]
,bdg.[AccountNum]
,bdg.[AccountGroupNum]
FROM dm.FactBudget as bdg
WHERE bdg.Company in ('FESFORA', 'FSEFORA', 'FFRFORA', 'FFRGPI', 'FFRLEX', 'IFIWIDN', 'IEEWIDN', 'TMTFI', 'TMTEE', 'FITMT', 'EETMT', 'ABKSE', 'ROROSE','STESE')
GO
PRINT N'Creating [stage].[WID_EE_OLine]'
GO
CREATE TABLE [stage].[WID_EE_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderRelNum] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[DelivDate] [date] NULL,
[NeedbyDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (1) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[SalesPerson] [nvarchar] (100) NULL,
[ReturnComment] [nvarchar] (max) NULL,
[SalesReturnOrderNum] [nvarchar] (50) NULL,
[SalesReturnInvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vWID_EE_OLine]'
GO


CREATE VIEW [stage].[vWID_EE_OLine] AS
--COMMENT EMPTY FIELDS // ADD UPPER() TRIM () INTO WarehouseID,CustomerID, PartID 2022-12-23 VA
--CHANGE PARNUM/CUSTOMERNUM 23-02-17 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(InvoiceNum)))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(WarehouseCode)))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum)))) AS SalesOrderNumID
	,CONVERT(int, REPLACE(CONVERT(date, OrderDate), '-', '')) AS SalesOrderDateID
	,CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(InvoiceNum))  AS SalesOrderCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey 

	,TRIM(Company) AS Company 
	,TRIM(CustNum) AS CustomerNum 
	,TRIM(OrderNum) AS SalesOrderNum
	,TRIM(OrderLine) AS SalesOrderLine
	,TRIM(OrderSubLine) AS SalesOrderSubLine
	,TRIM(OrderType) AS SalesOrderType
	--,'' AS SalesOrderCategory
	,TRIM(OrderRelNum) AS SalesOrderRelNum
	,OrderDate AS SalesOrderDate
	,NeedbyDate
	,DelivDate AS ExpDelivDate
	,DelivDate AS ActualDelivDate --CAST('1900-01-01' AS date) -- DZ 20210825
	,CAST('1900-01-01' AS date) AS ConfirmedDelivDate
	,TRIM(InvoiceNum) AS SalesInvoiceNum
	,OrderQty AS SalesOrderQty
	,DelivQty
	,RemainingQty
	--,NULL AS SalesInvoiceQty
	--,'' AS UoM
	,UnitPrice
	,UnitCost
	,Currency
	,ExchangeRate
	,OpenRelease
	,DiscountAmount
	,DiscountPercent
	,TRIM(PartNum) AS PartNum
	,IIF(OrderSubLine = '000000', 'Main', 'Sub' )  AS PartType
	,PartStatus
	,TRIM(SalesPerson) AS SalesPersonName
	,TRIM(WarehouseCode) AS WarehouseCode
	,CASE WHEN TRIM(CustNum) = 'CFIN' THEN 'Cash Customer' 
			WHEN TRIM(CustNum) = 'CEX' THEN 'Cash Customer Export'
			WHEN TRIM(CustNum) = 'CEU' THEN 'Cash Customer EU'
			ELSE 'Normal' END AS SalesChannel
	,CASE WHEN LEFT(CustNum, 1) = 'C' THEN 'Over-the-Counter'
		WHEN SalesPerson = 'Verkkokauppa' THEN 'Webshop'
		ELSE 'Normal Order Handling' END AS AxInterSalesChannel
	--,'' AS Department
	--,'' AS ProjectNum
	--,'' AS IndexKey
	--,'' AS Cancellation
	--,'' AS SORes1
	--,'' AS SORes2
	--,'' AS SORes3
	,ReturnComment
	,SalesReturnOrderNum
	,SalesReturnInvoiceNum
	--,NULL AS [TotalMiscChrg]
FROM stage.WID_EE_OLine
--WHERE OrderType = '1'
--GROUP BY
--	PartitionKey,Company,CustNum,OrderNum,OrderLine,OrderSubLine,OrderRelNum,OrderRelNum,OrderDate,NeedbyDate,DelivDate,OrderQty,DelivQty,RemainingQty,UnitPrice,UnitCost, ExchangeRate, OpenRelease,DiscountAmount,DiscountPercent,PartNum,PartStatus, SalesPerson, ReturnComment, SalesReturnOrderNum,WarehouseCode,Currency, SalesReturnInvoiceNum, InvoiceNum, OrderType
GO
PRINT N'Creating [dm_AX].[dimFinanceAccount]'
GO











CREATE VIEW [dm_AX].[dimFinanceAccount] AS 

SELECT  [AccountID]
,[AccountCode]
,[CompanyID]
,[PartitionKey]
,[Company]
,[AccountNum]
,[AccountName]
,[AccountName2]
,[Account]
,[AccountStatus]
,[BalanceAccount]
,[TransactionAccount]
,[Assets]
,[Amortization]
,[Costs]
,[LiabilitiesAndEquity]
,[Revenue]
,[CurrentAssets]
,[CurrentLiabilities]
,[Deprecation]
,[Equity]
,[Liability]
,[Interest]
,[Tax]
,[Materials]
,[Expenses]
,[AccountReceivables]
,[CashAndEquivalents]
,[AccountType]
,[AccountType2]
,[AccountType3]
,[AccountType4]
,[AccountType5]
,[AccountType6]
,[AccountType7]
,[AccountType8]
,[AccountType9]
,[AccountType10]
,[AccountGroupNum]
,[AccountGroupName]
,[AccountGroupOrder]
,[AccountGroup]
,[AccountGroup2]
,[AccountGroup3]
,[Statement]
,[StatementNum]
FROM [dm].[DimFinanceAccount]
WHERE [Company] in ('AXISE','AXHSE') -- HQ basket
GO
PRINT N'Creating [stage].[CER_DE_SalesInvoice]'
GO
CREATE TABLE [stage].[CER_DE_SalesInvoice]
(
[PartitionKey] [nvarchar] (40) NULL,
[Company] [nvarchar] (15) NULL,
[SalesInvoiceNum] [nvarchar] (30) NULL,
[SalesInvoiceLine] [nvarchar] (20) NULL,
[SalesInvoiceDate] [nvarchar] (35) NULL,
[ActualDelivDate] [nvarchar] (35) NULL,
[DeliveryAddress] [nvarchar] (120) NULL,
[DeliveryCity] [nvarchar] (50) NULL,
[DeliveryCountry] [nvarchar] (50) NULL,
[DeliveryZipCode] [nvarchar] (20) NULL,
[CustomerNum] [nvarchar] (35) NULL,
[PartNum] [nvarchar] (35) NULL,
[UnitPrice] [nvarchar] (25) NULL,
[UnitCost] [nvarchar] (25) NULL,
[VATAmount] [nvarchar] (25) NULL,
[SalesInvoiceQty] [nvarchar] (25) NULL,
[Currency] [nvarchar] (25) NULL,
[ExchangeRate] [nvarchar] (15) NULL,
[WarehouseCode] [nvarchar] (30) NULL,
[DiscountAmount] [nvarchar] (25) NULL,
[DiscountPercent] [nvarchar] (25) NULL,
[IsCreditMemo] [nvarchar] (15) NULL,
[SalesOrderNum] [nvarchar] (30) NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[UoM] [nvarchar] (40) NULL,
[SalesOrderType] [nvarchar] (40) NULL
)
GO
PRINT N'Creating [stage].[vCER_DE_SalesInvoice]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vCER_DE_SalesInvoice]
	AS SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(SalesInvoiceNum), '#', TRIM(SalesInvoiceLine))))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company], '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
	--, SalesOrderID i miss the line level
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', CustomerNum, '#', SalesInvoiceNum))) AS SalesLedgerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',SalesOrderNum)))) AS SalesOrderNumID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID

	 ,PartitionKey      
	,[Company]         
	,[SalesInvoiceNum] 
	,[SalesInvoiceLine]
	,[SalesInvoiceDate]
	,[ActualDelivDate] 
	,[DeliveryAddress] 
	,[DeliveryCity]    
	,[DeliveryCountry] 
	,[DeliveryZipCode] 
	,[CustomerNum]     
	,[PartNum]         
	,[UnitPrice]       
	,[UnitCost]        
	,[VATAmount]       
	,[SalesInvoiceQty] 
	,[Currency]        
	,[ExchangeRate]    
	,[WarehouseCode]   
	,[DiscountAmount]  
	,[DiscountPercent] 
	,[IsCreditMemo]    
	,[SalesOrderNum]   
	,[SalesPersonName] 
	,[UoM]             
	,SalesOrderType
	FROM stage.CER_DE_SalesInvoice
GO
PRINT N'Creating [stage].[WID_EE_Warehouse]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[WID_EE_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL,
[WarehouseDistrict] [nvarchar] (50) NULL,
[WarehouseAddress] [nvarchar] (100) NULL,
[WarehouseType] [nvarchar] (50) NULL,
[WarehouseCountry] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vWID_EE_Warehouse]'
GO
CREATE VIEW [stage].[vWID_EE_Warehouse] AS
--COMMENT EMPTY FIELD 2022-12-23 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey

	,[Company]
	,TRIM([WarehouseCode]) AS [WarehouseCode]
	,[WarehouseName]
	,[WarehouseDistrict]
	,[WarehouseAddress]
	--,'' AS [WarehouseDescription]
	,[WarehouseType]
	,[WarehouseCountry]
	--,'' AS WarehouseSite
FROM [stage].[WID_EE_Warehouse]
GO
PRINT N'Creating [stage].[ACO_UK_SOLine_Manual_Adjustment]'
GO
CREATE TABLE [stage].[ACO_UK_SOLine_Manual_Adjustment]
(
[PartitionKey] [varchar] (50) NULL,
[SopNumber] [nvarchar] (50) NULL,
[SOPTYPE] [nvarchar] (50) NULL,
[GLPostingDate] [nvarchar] (50) NULL,
[ItemNumber] [nvarchar] (200) NULL,
[Brand] [nvarchar] (100) NULL,
[ExtendedPrice] [nvarchar] (50) NULL,
[ExtendedCost] [nvarchar] (50) NULL,
[QUANTITY] [nvarchar] (50) NULL,
[CUSTNMBR] [nvarchar] (50) NULL,
[Item_Class] [nvarchar] (50) NULL,
[UserToEnter] [nvarchar] (50) NULL,
[Discount] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[ACO_UK_SOLine]'
GO
CREATE TABLE [stage].[ACO_UK_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SalesPerson] [nvarchar] (100) NULL,
[CustNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[InvoiceType] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[VAT] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[BusinessChain] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Res1] [varchar] (100) NULL,
[Res2] [varchar] (100) NULL,
[Res3] [varchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vACO_UK_SOLine]'
GO




CREATE VIEW [stage].[vACO_UK_SOLine] AS

WITH CTE AS (
SELECT  
		[SopNumber]
      ,[SOPTYPE]
      ,COALESCE(TRY_CONVERT(date, [GLPostingdate]), TRY_CONVERT(date, [GLPostingDate], 103)) AS GLPostingDate
      ,[ItemNumber]
      ,[Brand]
      ,COALESCE(TRY_CONVERT(decimal(18,4), REPLACE(REPLACE([ExtendedPrice],',','.'),' ','')),0) AS [ExtendedPrice]
      ,COALESCE(TRY_CONVERT(decimal(18,4), REPLACE(REPLACE([ExtendedCost],',','.'),' ','')),0) AS [ExtendedCost]
      ,COALESCE(NULLIF(TRY_CONVERT(Decimal(18,4),[QUANTITY]),0)	,1) AS Quantity
      ,[CUSTNMBR]
      ,[Item_Class]
      ,[UserToEnter]
      ,COALESCE(TRY_CONVERT(Decimal(18,4),[Discount])	,0) AS Discount
	,ROW_NUMBER() OVER (Partition BY SOPNumber ORDER BY CUSTNMBR, ItemNumber, ExtendedPrice, ExtendedCost)	AS RowNum
	,N'ACORNUK' AS Company
  FROM [stage].[ACO_UK_SOLine_Manual_Adjustment]
  WHERE SOPNumber IS NOT NULL
)
--COMMENT empty fields / ADD UPPER() TRIM() INTO CustomerID/WarehouseID 13-12-2022
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(PartNum), '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine)))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(InvoiceNum)))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(InvoiceNum)))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum)))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID 
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', PartNum))) AS PartID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WareHouseID
	,CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(InvoiceLine)) AS SalesOrderCode --Changed from TRIM(OrderLine) to TRIM(InvoiceLine), 20210604 /DZ
	,CONVERT(int, replace(convert(date,InvoiceDate), '-', '')) AS SalesInvoiceDateID  --Redundant?
	,CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceType)) AS SalesInvoiceCode --Redundant??
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey

	,Company
	,[dbo].[ProperCase](SalesPerson) AS SalesPersonName
	,TRIM(CustNum) AS CustomerNum
	,TRIM(PartNum) AS PartNum
	,CASE WHEN TRIM(OrderNum) = '0' THEN 'PrimaryPart' ELSE 'SubPart' END  AS PartType
	,TRIM(OrderNum) AS SalesOrderNum
	,TRIM(OrderLine) AS SalesOrderLine
	,NULL AS SalesOrderSubLine
	,OrderType AS SalesOrderType
	,TRIM(InvoiceNum) AS SalesInvoiceNum
	,TRIM(InvoiceLine) AS SalesInvoiceLine
	,InvoiceType AS SalesInvoiceType
	,CASE WHEN InvoiceDate = '' THEN '1901-01-01' ELSE CONVERT(date, InvoiceDate) END AS SalesInvoiceDate
	,ActualDeliveryDate	AS ActualDelivDate
	,SellingShipQty	AS SalesInvoiceQty
	--,'' AS UoM
	,UnitPrice
	,UnitCost
	,IIF(SellingShipQty*UnitPrice = 0, 0, DiscountAmount/SellingShipQty*UnitPrice) AS DiscountPercent
	,DiscountAmount
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	,TotalMiscChrg
	--,NULL AS VATAmount
	,LEFT(Currency, 3) AS Currency
	,IIF(LEFT(Currency, 3) = 'GBP', 1, ExchangeRate) AS ExchangeRate
	--,CreditMemo
	,IIF(OrderType = '4', 1, 0) AS  CreditMemo
	,CASE	WHEN LEN(SalesChannel) = 8 THEN 'EXPRESS'	
			WHEN LEN(SalesChannel) = 12 THEN 'ADVANCE'
			WHEN CustNum LIKE 'RSCOMP%' THEN 'EDI'
			WHEN SalesPerson = '' THEN 'IMPORTED'
			ELSE SalesChannel END AS SalesChannel
	,CASE WHEN NULLIF(TRIM(SalesPerson),'') IS NULL THEN 'Digital'
			ELSE 'Manual' END	AS Department
	,TRIM(WarehouseCode) AS WarehouseCode
	--,NULL AS DeliveryAddress
	--,'' AS CostBearerNum
	--,'' AS CostUnitNum
	--,'' AS ReturnComment
	--,'' AS ReturnNum
	--,'' AS ProjectNum
	--,'' AS [IndexKey]
	,Res1	AS SIRes1
	,Res2	AS SIRes2
	,Res3	AS SIRes3

FROM stage.ACO_UK_SOLine AS SO
WHERE TRIM(InvoiceNum) NOT IN (SELECT TRIM(SOPNUMBE) FROM [stage].[ACO_UK_SOLine_Manual_Adjustment_Remove] WHERE [SOPNUMBE] IS NOT NULL)
GROUP BY
	PartitionKey, Company, SalesPerson, CustNum, PartNum, OrderNum, OrderLine, OrderType, InvoiceNum, InvoiceLine, InvoiceDate, SellingShipQty, UnitPrice, UnitCost, DiscountAmount, TotalMiscChrg, WarehouseCode, CreditMemo, SalesChannel, ActualDeliveryDate, Currency, ExchangeRate, InvoiceType, Res1, Res2, Res3

union 


SELECT 
CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(CTE.Company,  '#', SOPNumber, '#', RowNum))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(CTE.Company, '#', SOPNumber, '#', CUSTNMBR, '#', ItemNumber  ))) AS SalesOrderID --Not really relevant
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(CTE.Company, '#', CUSTNMBR, '#', SOPNumber))) AS SalesLedgerID --Not really relevant
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(CTE.Company, '#', SOPNumber))) AS SalesOrderNumID --Not really relevant
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CTE.Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(CTE.Company), '#', TRIM(CUSTNMBR))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(CTE.Company, '#', CUSTNMBR))) AS CustomerID
	,COALESCE(P.PartID, CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(CTE.Company), '#',TRIM(ItemNumber)))))) AS PartID 
	--,COALESCE(P.PartID, CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT(CTE.Company, '#',ItemNumber)))) AS PartID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(CTE.Company, '#', ''))) AS WareHouseID --Not really relevant
	,CONCAT(CTE.Company, '#', SOPNumber,'' ) AS SalesOrderCode --Not really relevant
	,CONVERT(int, replace(convert(date,GLPostingDate), '-', '')) AS SalesInvoiceDateID  --Redundant?
	,CONCAT(CTE.Company, '#', SOPNumber) AS SalesInvoiceCode --Redundant??
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( CTE.Company,'#','') ))	AS ProjectID
	,FORMAT(GETDATE(), 'yyyy-MM-dd hh:mm:ss') PartitionKey

	,CTE.Company
	,[dbo].[ProperCase](UserToEnter) AS SalesPersonName
	,TRIM(CUSTNMBR) AS CustomerNum
	,TRIM(ItemNumber) AS PartNum
	,NULL  AS PartType
	,NULL AS SalesOrderNum
	,NULL AS SalesOrderLine
	,NULL AS SalesOrderSubLine
	,SOPTYPE AS SalesOrderType
	,SopNumber AS SalesInvoiceNum
	,'' AS SalesInvoiceLine
	,SOPTYPE AS SalesInvoiceType
	,CASE WHEN GLPostingDate = '' THEN '1900-01-01' ELSE CONVERT(date, GLPostingDate) END AS SalesInvoiceDate
	,'1900-01-01'	AS ActualDelivDate
	,QUANTITY	AS SalesInvoiceQty
	--,'' AS UoM
	,ExtendedPrice/Quantity AS	UnitPrice
	,ExtendedCost/Quantity AS UnitCost
	,'0' AS DiscountPercent
	,Discount	AS DiscountAmount
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	,0	AS TotalMiscChrg
	--,0 AS VATAmount
	,'GBP' AS Currency
	,1 AS ExchangeRate
	--,CreditMemo
	,'0'	 AS  CreditMemo
	,NULL AS SalesChannel
	,'' AS Department
	,'' AS WarehouseCode
	--,NULL AS DeliveryAddress
	--,'' AS CostBearerNum
	--,'' AS CostUnitNum
	--,'' AS ReturnComment
	--,'' AS ReturnNum
	--,'Manual Adjustment' AS ProjectNum
	--,RowNum AS [IndexKey]
	,NULL	AS SIRes1
	,NULL	AS SIRes2
	,NULL	AS SIRes3
FROM CTE
LEFT JOIN (SELECT [PartID], [PartCode], [Company], [PartNum], [PartName], [PartDescription], [PartDescription2], [PartDescription3], [ProductGroup], [ProductGroup2], [ProductGroup3], [ProductGroup4], [Brand], [CommodityCode], [PartReplacementNum], [PartStatus], [CountryOfOrigin], [NetWeight], [UoM], [Material], [Barcode], [ReOrderLevel], [PartResponsible], [StartDate], [EndDate], [CompanyID], [PartitionKey], [MainSupplier], [AlternativeSupplier], [is_deleted], [is_inferred], [PARes1], [PARes2], [PARes3], [IsActiveRecord] FROM dw.Part WHERE Company = 'ACORNUK' AND PartDescription3 IS NULL) P ON TRIM(CTE.ItemNumber) = TRIM(P.PartNum)
GO
PRINT N'Creating [stage].[ARK_CZ_StockTransaction]'
GO
CREATE TABLE [stage].[ARK_CZ_StockTransaction]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[IndexKey] [nvarchar] (50) NOT NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[TransactionCode] [nvarchar] (50) NULL,
[TransactionDescription] [nvarchar] (max) NULL,
[IssuerReceiverNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[BinNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[TransactionDate] [date] NULL,
[TransactionTime] [nvarchar] (50) NULL,
[TransactionQty] [decimal] (18, 4) NULL,
[TransactionValue] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[CostPrice] [decimal] (18, 4) NULL,
[SalesUnitPrice] [decimal] (18, 4) NULL,
[Reference] [nvarchar] (50) NULL,
[AdjustmentDate] [date] NULL,
[STRes1] [nvarchar] (50) NULL,
[STRes2] [nvarchar] (50) NULL,
[STRes3] [nvarchar] (50) NULL,
[IssuerReceiverName] [nvarchar] (max) NULL,
[Outlier] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vARK_CZ_StockTransaction]'
GO





CREATE VIEW [stage].[vARK_CZ_StockTransaction] AS 
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company], '#', TRIM(IndexKey))))) AS StockTransactionID --
	,CONCAT([Company], '#', TRIM(IndexKey)) AS IndexKey --StockTransactionCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Company])))) AS CompanyID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([PartNum]))))) AS PartID
 	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([OrderNum]))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([OrderNum]))))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([InvoiceNum]))))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([InvoiceNum]))))) AS PurchaseInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM(IssuerReceiverNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM(IssuerReceiverNum))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM([Currency])))) AS CurrencyID
	,[PartitionKey]

    ,[Company] -- 
	,UPPER(TRIM([WarehouseCode])) AS WarehouseCode
	,TransactionCode
	,[TransactionDescription]
	,IssuerReceiverNum
    ,OrderNum
	,OrderLine
	,InvoiceNum
	,InvoiceLine
	,TRIM([PartNum]) AS PartNum --UPPER(TRIM([PartNum]))
    ,TRIM(Outlier) AS BinNum --added by request of Jiri /DZ 2022-04-07
    ,TRIM(BatchNum) AS BatchNum
	,CONVERT(date, [TransactionDate]) AS TransactionDate
	,TransactionTime
	,[TransactionQty]
	,TransactionValue
	,[CostPrice]
	,[SalesUnitPrice]
	,UPPER(TRIM([Currency])) AS [Currency]
	,Reference
	,AdjustmentDate
	,IIF(Reference = 'I', 'Internal', 'External') AS InternalExternal
	,IndexKey AS STRes1
	,STRes2
	,LEFT(TRIM(IssuerReceiverName), 100) AS STRes3 --added by request of Jiri /DZ 2022-04-07
	
FROM [stage].[ARK_CZ_StockTransaction]
	--WHERE [TransactionDate] >= DATEADD(year, -1, GETDATE()) --Added this where clause as semi-incremental load functinoality since it doesn't work easily on meta-param table. /SM 2021-10-01	
WHERE
	[TransactionDate] >= '2016-01-01'
GO
PRINT N'Creating [stage].[AXL_HU_SalesLedger]'
GO
CREATE TABLE [stage].[AXL_HU_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceAmount] [decimal] (18, 4) NULL,
[RemainAmount] [decimal] (18, 4) NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vAXL_HU_SalesLedger]'
GO
CREATE VIEW [stage].[vAXL_HU_SalesLedger] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(sl.Company, '#', TRIM(sl.CustNum), '#', TRIM(sl.InvoiceNum))))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(sl.Company))) AS CompanyID
	,UPPER(CONCAT(sl.Company, '#', TRIM(sl.CustNum), '#', TRIM(sl.InvoiceNum))) AS SalesLedgerCode
	,sl.PartitionKey

	,UPPER(sl.Company) AS Company
	,UPPER(TRIM(sl.CustNum)) AS CustomerNum
	,TRIM(sl.InvoiceNum) AS [SalesInvoiceNum]
	,IIF(so.InvoiceDate = '' OR so.InvoiceDate IS NULL, '1900-01-01', so.InvoiceDate) AS [SalesInvoiceDate] --
	,CONVERT(date, DueDate) AS SalesDueDate
	,CONVERT(date, LastPaymentDate) AS LastPaymentDate
	,[InvoiceAmount]
	,[RemainAmount] AS [RemainingInvoiceAmount]
	,NULL AS CashDiscOffered
	,NULL AS CashDiscUsed
	,NULL AS [ExchangeRate]
	,NULL AS [Currency]
	,NULL AS [VATAmount]
	,NULL AS [VATCode]
	,NULL AS [PayToName]
	,NULL AS [PayToCity]
	,NULL AS [PayToContact]
	,NULL AS [PaymentTerms]
	,sl.Res1 AS SLRes1
	,sl.Res2 AS SLRes2
	,sl.Res3 AS SLRes3
FROM stage.AXL_HU_SalesLedger sl
	LEFT JOIN stage.AXL_CZ_SOLine so ON TRIM(sl.InvoiceNum) = TRIM(so.InvoiceNum)
WHERE DueDate > '2015-01-01'
GROUP BY
	sl.PartitionKey, sl.Company, sl.CustNum, sl.InvoiceNum, sl.Res2, sl.Res1, sl.Res3, sl.[InvoiceAmount], sl.[RemainAmount], so.InvoiceDate, DueDate, LastPaymentDate
GO
PRINT N'Creating [dm_TS].[fctPurchaseOrder]'
GO









CREATE VIEW [dm_TS].[fctPurchaseOrder] AS



SELECT 
 po.[PurchaseOrderID]
,po.[PurchaseOrderNumID]
,po.[PurchaseInvoiceID]
,po.[CompanyID]
,po.[SupplierID]
,po.[CustomerID]
,po.[PartID]
,po.[WarehouseID]
,po.[CurrencyID]
,po.[PurchaseOrderDateID]
,po.[PurchaseInvoiceDateID]
,po.[Company]
,po.[PurchaseOrderNum]
,po.[PurchaseOrderLine]
,po.[PurchaseOrderSubLine]
,po.[PurchaseOrderType]
,po.[PurchaseOrderDate]
,po.[PurchaseOrderStatus]
,po.[OrgReqDelivDate]
,po.[CommittedDelivDate]
,po.[CommittedShipDate]
,po.[ActualDelivDate]
,po.[ReqDelivDate]
,po.[PurchaseInvoiceNum]
,po.[PartNum]
,po.[SupplierNum]
,po.[SupplierPartNum]
,po.[SupplierInvoiceNum]
,po.[DelivCustomerNum]
,po.[PartStatus]
,po.[OrderQty]
,po.[ReceiveQty]
,po.[InvoiceQty]
,po.[MinOrderQty]
,po.[UoM]
,po.[UnitPrice]
,po.[DiscountPercent]
,po.[DiscountAmount]
,po.[ExchangeRate]
,po.[Currency]
,po.[PurchaserName]
,po.[WarehouseCode]
,po.[ReceivingNum]
,po.[DelivTime]
,po.[PurchaseChannel]
,po.[Documents]
,po.[Comments]
,po.[PORes1]
,po.[PORes2]
,po.[PORes3]
,po.[InvoiceStatus]
,po.[DaysSinceOrder]
,po.[OrgCommittedDelivDate]
,po.[IsOrderClosed]

FROM dm.FactPurchaseOrder as po

WHERE po.Company  in ('FESFORA', 'FSEFORA', 'FFRFORA', 'FFRGPI', 'FFRLEX', 'IFIWIDN', 'IEEWIDN', 'TMTFI', 'TMTEE', 'FITMT', 'EETMT', 'ABKSE', 'ROROSE','STESE')  -- TS basket by 2021-08-05
GO
PRINT N'Creating [stage].[JEN_NO_CustomerAgreement]'
GO
CREATE TABLE [stage].[JEN_NO_CustomerAgreement]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[AgreementCode] [nvarchar] (50) NULL,
[AgreementDescription] [nvarchar] (max) NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DelivTime] [nvarchar] (10) NULL,
[Currency] [nvarchar] (10) NULL,
[AgreementStart] [date] NULL,
[AgreementEnd] [date] NULL
)
GO
PRINT N'Creating [stage].[vJEN_NO_CustomerAgreement]'
GO
CREATE VIEW [stage].[vJEN_NO_CustomerAgreement] AS 
--COMMENT EMPTY FIELDS 2022-12-23 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM(AgreementCode),'#',TRIM([PartNum]),'#',TRIM(CustomerNum))))) AS CustomerAgreementID --CustomerAgreementID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID  
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM([Currency])))) AS CurrencyID
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM(CustomerNum)) AS CustomerNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,AgreementCode
	,AgreementDescription
	,DiscountPercent
	,MAX([UnitPrice]) AS [UnitPrice]
	--,0 AS AgreementQty
	,UPPER(TRIM([Currency])) AS Currency
	,[DelivTime]
	,AgreementStart
	,AgreementEnd
	--,'' AS CustomerTerms
	--,0	AS FulfilledQty
	--,0  AS RemainingQty
	--,''	AS UoM
	--,'' AS CARes1
	--,'' AS CARes2
	--,'' AS CARes3
FROM 
	[stage].[JEN_NO_CustomerAgreement]
GROUP BY [PartitionKey], [Company], AgreementCode, AgreementDescription, [Currency], [PartNum], CustomerNum, [DiscountPercent], [DelivTime], AgreementStart, AgreementEnd
--WHERE 
--	RecordType = 'D'
GO
PRINT N'Creating [dm_AX].[dimCostBearer]'
GO



CREATE VIEW [dm_AX].[dimCostBearer] AS 

SELECT  [CostBearerID]
,[PartitionKey]
,[CostBearerCode]
,[CompanyID]
,[Company]
,[CostBearerNum]
,[CostBearerName]
,[CostBearerStatus]
,[CostBearerGroup]
,[CostBearerGroup2]
,[CostBearerGroup3]
FROM [dm].[DimCostBearer]
WHERE [Company] in ('AXISE','AXHSE') -- HQ basket
GO
PRINT N'Creating [stage].[FOR_PL_OLine]'
GO
CREATE TABLE [stage].[FOR_PL_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[CustomerNum] [nvarchar] (50) NULL,
[SalesOrderNum] [nvarchar] (50) NOT NULL,
[SalesOrderLine] [nvarchar] (50) NULL,
[SalesOrderStatus] [nvarchar] (50) NULL,
[SalesOrderLineStatus] [nvarchar] (50) NULL,
[SalesOrderDate] [date] NULL,
[NeedbyDate] [date] NULL,
[ExpDelivDate] [date] NULL,
[SalesOrderQty] [decimal] (18, 8) NULL,
[DelivQty] [decimal] (18, 8) NULL,
[RemainingQty] [decimal] (18, 8) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 8) NULL,
[UnitCost] [decimal] (18, 8) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 8) NULL,
[DiscountPercent] [decimal] (18, 8) NULL,
[DiscountAmount] [decimal] (18, 8) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartType] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[ProjectNum] [nvarchar] (50) NULL,
[IsCancelled] [nvarchar] (50) NULL,
[TargetType] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vFOR_PL_OLine]'
GO
CREATE VIEW [stage].[vFOR_PL_OLine] AS
--COMMENT EMPTY FIELDS // ADD UPPER()TRIM() INTO CustomerID,WarehouseID,PartID 23-01-11 VA
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',SalesOrderNum,'#',SalesOrderLine))) AS SalesOrderID
	,CONCAT(Company,'#',SalesOrderNum,'#',SalesOrderLine) as SalesOrderCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) as CustomerID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(CustomerNum)))) as CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',Company)) as CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]) ,'#', TRIM(PartNum))))) as PartID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(PartNum)))) AS PartID 
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([WarehouseCode])))) AS WarehouseID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(SalesOrderNum)))) AS SalesOrderNumID  
	,CONVERT(int, REPLACE(CONVERT(date, SalesOrderDate),'-','')) AS SalesOrderDateID  
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#',TRIM(ProjectNum))))	AS ProjectID

	,PartitionKey 
	,Company 
	,TRIM(CustomerNum) as CustomerNum 
	,SalesOrderNum
	,SalesOrderLine
	--,'' AS SalesOrderSubLine
	,CASE	WHEN IsCancelled = 'Y' THEN 'Cancelled'
			WHEN [SalesOrderLineStatus] = 'C' AND [TargetType] ='-1' THEN 'Error'
			ELSE 'Show'	END		AS SalesOrderType			-- Some order lines are not necessary to show in report and we are using this field to distinguish it and filter in Power BI /SM 2022-07-12
	--,'' AS SalesOrderCategory
	--,'' AS SalesOrderRelNum
	,SalesOrderDate
	,NeedbyDate
	,ExpDelivDate
	,CAST('1900-01-01' AS date) AS ActualDelivDate
	,CAST('1900-01-01' AS date) AS ConfirmedDelivDate
	--,'' AS SalesInvoiceNum
	,SalesOrderQty
	,DelivQty
	,RemainingQty
	,NULL AS SalesInvoiceQty
	,UoM
	,UnitPrice
	,UnitCost
	,Currency 
	,ExchangeRate  
	,CASE WHEN [SalesOrderLineStatus] = 'C' THEN '0'
		  WHEN [SalesOrderLineStatus] = 'O' THEN '1'
		  ELSE [SalesOrderStatus]				END	AS	OpenRelease
	,DiscountAmount
	,DiscountPercent
	,TRIM(PartNum) AS PartNum
	,PartType
	--,''	AS PartStatus
	,SalesPersonName AS SalesPersonName
	,TRIM(WarehouseCode) as WarehouseCode
	--,'' AS SalesChannel
	--,'' AS AxInterSalesChannel
	--,'' AS Department
	,ProjectNum
	--,'' AS IndexKey
	,IsCancelled AS Cancellation
	,[SalesOrderStatus] AS SORes1
	--,'' AS SORes2
	--,'' AS SORes3
--	,ReturnComment
--	,SalesReturnOrderNum
--	,SalesReturnInvoiceNum
	,NULL AS [TotalMiscChrg]
FROM stage.FOR_PL_OLine
--GROUP BY PartitionKey,Company, CustomerNum, SalesOrderNum, SalesOrderLine, OrderSubLine, OrderRelNum, SalesOrderDate, NeedbyDate, ExpDelivDate, SalesInvoiceNum, OrderQty, DelivQty, RemainingQty, UnitPrice, UnitCost, SumUnitCost, SumUnitPrice, CurrExChRate, OpenRelease, OpenRelease, DiscountAmount, DiscountPercent, PartNum, PartStatus, SalesPerson, WarehouseCode, SalesChannel
GO
PRINT N'Creating [stage].[NOM_FI_SupplierAgreement]'
GO
CREATE TABLE [stage].[NOM_FI_SupplierAgreement]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[AgreementCode] [nvarchar] (50) NULL,
[AgreementDescription] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[DiscountPercent] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[AgreementQty] [nvarchar] (50) NULL,
[UoM] [nvarchar] (50) NULL,
[DelivTime] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[SupplierTerms] [nvarchar] (100) NULL,
[AgreementStart] [nvarchar] (50) NULL,
[AgreementEnd] [nvarchar] (50) NULL,
[SARes1] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vNOM_FI_SupplierAgreement]'
GO
CREATE VIEW [stage].[vNOM_FI_SupplierAgreement] AS 
--COMMENT EMPTY FIELDS / ADD TRIL() INTO PartID 2022-12-15 VA
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([PartNum]), '#', TRIM([SupplierNum]), '#', [AgreementStart], '#', [AgreementEnd])))) AS SupplierAgreementID --CustomerAgreementID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM([SupplierNum]))))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([SupplierNum]))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(Currency)))) AS CurrencyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM([PartNum]))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([PartNum]))))) AS PartID
	,[PartitionKey]

	,UPPER([Company]) AS [Company]
	,UPPER(TRIM([SupplierNum])) AS SupplierNum
	,UPPER(TRIM([PartNum])) AS PartNum
	,AgreementCode AS [AgreementCode]
	,AgreementDescription AS [AgreementDescription]
	,[DiscountPercent]
	,[UnitPrice] AS [UnitPrice]
	,AgreementQty AS [AgreementQty]
	,Currency AS [Currency]
	,CONVERT(int, [DelivTime]) AS [DelivTime]
	,IIF([AgreementStart] = 0, '1900-01-01', CONVERT(Date, [AgreementStart])) AS [AgreementStart]
	,IIF([AgreementEnd] = 0, '1900-01-01', CONVERT(Date, [AgreementEnd])) AS [AgreementEnd]
	,[SupplierTerms]
	--,0	AS FulfilledQty
	--,0  AS RemainingQty
	,[SARes1] AS UoM
	,[SARes1]
	--,'' AS [SARes2]
	--,'' AS [SARes3]
FROM 
	[stage].[NOM_FI_SupplierAgreement]
GROUP BY [PartitionKey], [Company], [SupplierNum], [PartNum], AgreementCode, AgreementDescription, [DiscountPercent], AgreementQty, Currency, [DelivTime], [SupplierTerms], [UnitPrice],[AgreementStart],[AgreementEnd], [SARes1]
GO
PRINT N'Creating [stage].[FOR_PL_Supplier]'
GO
CREATE TABLE [stage].[FOR_PL_Supplier]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [varchar] (20) NULL,
[SupplierNum] [nvarchar] (80) NULL,
[SupplierName] [nvarchar] (200) NULL,
[AddressLine1] [nvarchar] (200) NULL,
[TelephoneNum1] [nvarchar] (80) NULL,
[Email] [nvarchar] (80) NULL,
[ZipCode] [nvarchar] (80) NULL,
[City] [nvarchar] (80) NULL,
[State] [nvarchar] (80) NULL,
[CountryCode] [nvarchar] (80) NULL,
[SupplierGroup] [nvarchar] (80) NULL,
[SupplierResponsible] [nvarchar] (80) NULL,
[VATNum] [nvarchar] (80) NULL,
[IsAxInterInternal] [nvarchar] (80) NULL,
[CodeOfConduct] [nvarchar] (80) NULL,
[CreatedTimeStamp] [nvarchar] (80) NULL,
[ModifiedTimeStamp] [nvarchar] (80) NULL,
[IsActiveRecord] [nvarchar] (80) NULL,
[Website] [nvarchar] (80) NULL,
[SRes1] [nvarchar] (80) NULL
)
GO
PRINT N'Creating [stage].[vFOR_PL_Supplier]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vFOR_PL_Supplier]
	AS 
SELECT 
CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID
,CONVERT([binary](32),HASHBYTES('SHA2_256',[Company])) AS CompanyID
,PartitionKey

----------- Mandatory -----------

,UPPER(TRIM([Company])) AS Company
,UPPER(TRIM([SupplierNum])) AS SupplierNum
,[dbo].[ProperCase](TRIM(SupplierName)) AS SupplierName
,TRIM([AddressLine1]) AS AddressLine1
,[ZipCode]            
,[City]  
,[CountryCode] 
,[VATNum]
-- OrgNum
,[IsAxInterInternal] as InternalExternal
-- IsMaterialSupplier

----------- Valuable -----------



,TRIM([AddressLine1]) AS FullAddressLine
,trim([TelephoneNum1]) as [TelephoneNum1]
,trim(Email) as Email
             
,[State]              
       
,[SupplierGroup]      
,[SupplierResponsible]
             
  
,[CodeOfConduct]      
--,[CreatedTimeStamp]   
--,[ModifiedTimeStamp]  
,[IsActiveRecord]     
,[Website]            
,[SRes1]   

----------- Good to have -----------

FROM stage.FOR_PL_Supplier
GO
PRINT N'Creating [stage].[NOM_DK_StockTransaction]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[NOM_DK_StockTransaction]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[IndexKey] [nvarchar] (50) NOT NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[TransactionCode] [nvarchar] (50) NULL,
[TransactionDescription] [varchar] (100) NULL,
[TransactionType] [nvarchar] (50) NULL,
[IssuerReceiverNum] [nvarchar] (50) NULL,
[OrderNum] [nchar] (50) NULL,
[OrderLine] [nchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[BinNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[TransactionDate] [date] NULL,
[TransactionTime] [nvarchar] (10) NULL,
[CreateDate] [date] NULL,
[FIFOBatchID] [nvarchar] (50) NULL,
[SupplierBatchID] [nvarchar] (50) NULL,
[TransactionQty] [decimal] (18, 4) NULL,
[TransactionValue] [decimal] (18, 4) NULL,
[CostPrice] [decimal] (18, 4) NULL,
[SalesUnitPrice] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (10) NULL,
[Reference] [nvarchar] (50) NULL,
[AdjustmentDate] [date] NULL,
[InternalExternal] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vNOM_DK_StockTransaction]'
GO
CREATE VIEW [stage].[vNOM_DK_StockTransaction] AS 
--ADD TRIM()UPPER() INTO PartID,CustomerID 23-01-05 VA
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', TRIM(IndexKey)))) AS StockTransactionID
	,UPPER([Company]) AS [Company]
	,UPPER(TRIM([WarehouseCode])) AS WarehouseCode
	,TransactionCode
	,TransactionType AS TransactionDescription
	,IIF(TRIM(IssuerReceiverNum)='', NULL,TRIM(IssuerReceiverNum)) AS IssuerReceiverNum
	,IIF(TRIM([OrderNum])='', NULL,TRIM(OrderNum)) AS OrderNum
	,OrderLine
	,IIF(TRIM(MAX([InvoiceNum]))='', NULL,TRIM(MAX(InvoiceNum))) AS InvoiceNum
	,MAX(InvoiceLine) AS InvoiceLine
	,UPPER(TRIM([PartNum])) AS [PartNum]
	,IIF(TRIM([BinNum])='', NULL,TRIM(BinNum)) AS BinNum
	,IIF(TRIM([BatchNum])='', NULL,TRIM(BatchNum)) AS BatchNum
	,CONVERT(date, TransactionDate) AS TransactionDate
	,TransactionTime
	,TransactionQty
	,TransactionValue
	,[CostPrice]
	,SalesUnitPrice
	,IIF(TRIM([Currency])='', NULL,TRIM(Currency)) AS Currency
	,[Reference]
	,CONVERT(date, AdjustmentDate) AS AdjustmentDate
	,IIF(InternalExternal = 'I', 'Internal', 'External') AS InternalExternal
	,CreateDate AS STRes1
	,FIFOBatchID AS STRes2
	,TransactionDescription AS STRes3

	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
    --,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT([Company],'#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,IIF(TransactionCode in ('930', '931', '936', '907', '912', '913'), CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM(MAX([InvoiceNum]))))), NULL) AS PurchaseInvoiceID

	,IIF(TransactionCode in ('930', '931', '936', '907', '912', '913'), CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company],'#',TRIM([OrderNum]))))), NULL) AS PurchaseOrderNumID
	,IIF(TransactionCode in ('800', '801', '815'), CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company],'#',TRIM([OrderNum]))))), NULL) AS SalesOrderNumID
	,IIF(TransactionCode in ('800', '801', '815'), CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company],'#',TRIM(MAX([InvoiceNum])))))), NULL) AS SalesInvoiceID
	,IIF(TransactionCode in ('800', '801', '815'), CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company],'#',TRIM(IssuerReceiverNum))))), NULL) AS CustomerID
	--,IIF(TransactionCode in ('800', '801', '815'), CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM(IssuerReceiverNum)))), NULL) AS CustomerID
	,IIF(TransactionCode in ('930', '931', '936', '907', '912', '913'), CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]),'#',TRIM(IssuerReceiverNum))))), NULL) AS SupplierID
	--,IIF(TransactionCode in ('930', '931', '936', '907', '912', '913'), CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company],'#',TRIM(IssuerReceiverNum))))), NULL) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Currency])))) AS CurrencyID
	,PartitionKey
	,IndexKey

FROM [stage].[NOM_DK_StockTransaction]

GROUP BY IndexKey, [Company], [WarehouseCode], TransactionCode, TransactionDescription, IssuerReceiverNum, [OrderNum], OrderLine, [PartNum], [BinNum], [BatchNum], TransactionDate, TransactionTime, TransactionQty, TransactionValue, [CostPrice], SalesUnitPrice, [Currency], [Reference], AdjustmentDate, CreateDate, FIFOBatchID, TransactionType, PartitionKey, InternalExternal --, [InvoiceNum], InvoiceLine
GO
PRINT N'Creating [stage].[CER_FI_SupplierAgreement]'
GO
CREATE TABLE [stage].[CER_FI_SupplierAgreement]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[AgreementCode] [nvarchar] (50) NULL,
[AgreementDescription] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DelivTime] [nvarchar] (10) NULL,
[Currency] [nvarchar] (10) NULL,
[AgreementStart] [date] NULL,
[AgreementEnd] [date] NULL
)
GO
PRINT N'Creating [stage].[vCER_FI_SupplierAgreement]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vCER_FI_SupplierAgreement] AS 

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM(AgreementCode), '#', TRIM([PartNum]), '#', TRIM([SupplierNum]), '#', TRIM([Currency]))))) AS SupplierAgreementID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum))))) AS SupplierID  
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Currency])))) AS CurrencyID
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,UPPER(TRIM(AgreementCode)) AS AgreementCode
	,UPPER(TRIM(AgreementDescription)) AS AgreementDescription
	,[DiscountPercent]
	,MAX([UnitPrice]) AS [UnitPrice]
	,NULL AS AgreementQty
	,UPPER(TRIM([Currency])) AS Currency
	,MAX([DelivTime]) AS [DelivTime]
	,MAX(AgreementStart) AS AgreementStart
	,AgreementEnd
	--,0 AS FulfilledQty
	--,0 AS RemainingQty
	--,'' AS UoM
	--,'' AS SupplierTerms
	--,'' AS SARes1
	--,'' AS SARes2
	--,'' AS SARes3
FROM 
	[stage].[CER_FI_SupplierAgreement]

GROUP BY [PartitionKey], [Company], AgreementCode, AgreementDescription, PartNum, SupplierNum, [DiscountPercent],  [Currency],  AgreementEnd
GO
PRINT N'Creating [dm_TS].[fctSalesOrderLog]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO


CREATE   VIEW [dm_TS].[fctSalesOrderLog] AS

SELECT sol.[SalesOrderLogID]
,sol.[CompanyID]
,sol.[CustomerID]
,sol.[PartID]
,sol.[WarehouseID]
,sol.[SalesPersonNameID]
,sol.[SalesOrderDateID]
,sol.[PartitionKey]
,sol.[Company]
,sol.[CustomerNum]
,sol.[SalesOrderNum]
,sol.[SalesOrderLine]
,sol.[SalesOrderSubLine]
,sol.[SalesOrderType]
,sol.[SalesOrderLogType]
,sol.[SalesOrderDate]
,sol.[SalesOrderLogDate]
,sol.[SalesInvoiceNum]
,sol.[SalesOrderQty]
,sol.[UoM]
,sol.[UnitPrice]
,sol.[UnitCost]
,sol.[Currency]
,sol.[ExchangeRate]
,sol.[OpenRelease]
,sol.[DiscountPercent]
,sol.[DiscountAmount]
,sol.[PartNum]
,sol.[PartType]
,sol.[SalesPersonName]
,sol.[Department]
,sol.[WarehouseCode]
  FROM [dm].[FactSalesOrderLog] as sol
WHERE sol.Company in ('FESFORA', 'FSEFORA', 'FFRFORA', 'FFRGPI', 'FFRLEX', 'IFIWIDN', 'IEEWIDN', 'TMTFI', 'TMTEE', 'FITMT', 'EETMT', 'ABKSE','STESE')
GO
PRINT N'Creating [stage].[ARK_PI_OLine]'
GO
CREATE TABLE [stage].[ARK_PI_OLine]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderRelNum] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[NeedbyDate] [date] NULL,
[DelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[CurrExchRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (50) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[SalesPerson] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (50) NULL,
[SalesReturnOrderNum] [nvarchar] (50) NULL,
[SalesReturnInvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[BusinessChain] [nvarchar] (50) NULL,
[Res1] [nvarchar] (50) NULL,
[Res2] [nvarchar] (50) NULL,
[Res3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vARK_PI_OLine]'
GO

CREATE VIEW [stage].[vARK_PI_OLine] AS
--COMMENT EMPTY FIELDS // ADD TRIM()UPPER()INTO CustomerID 2022-12-16 VA
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',OrderNum,'#',OrderLine,'#',OrderSubLine,'#',InvoiceNum))) AS SalesOrderID
	,CONCAT(Company,'#',OrderNum,'#',OrderLine) AS SalesOrderCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(CustNum)))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',Company)) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(OrderNum)))) AS SalesOrderNumID
	,CONVERT(int, replace(convert(date, OrderDate),'-','')) AS SalesOrderDateID  
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',''))))	AS ProjectID
	,PartitionKey 

	,Company 
	,TRIM(CustNum) AS CustomerNum 
	,OrderNum AS [SalesOrderNum]
	,OrderLine AS [SalesOrderLine]
	,OrderSubLine AS [SalesOrderSubLine]
	,OrderType AS [SalesOrderType]
	--,'' AS [SalesOrderCategory]
	,OrderDate AS [SalesOrderDate]
	,NeedbyDate
	,CASE WHEN CAST(DelivDate AS date) < '1753-01-01' THEN CAST('1900-01-01' AS date) ELSE CAST(DelivDate AS date) END  AS [ExpDelivDate]
	,CAST('1900-01-01' AS date) AS ActualDelivDate
	,CAST('1900-01-01' AS date) AS ConfirmedDelivDate
	,InvoiceNum AS [SalesInvoiceNum]
	,OrderQty AS [SalesOrderQty]
	,DelivQty
	,RemainingQty
	--,NULL AS SalesInvoiceQty
	--,'' AS [UoM]
	,UnitPrice
	,UnitCost
	,Currency
	,CurrExChRate AS [ExchangeRate]
	,OpenRelease
	,DiscountAmount
	,DiscountPercent
	,PartNum
	,Res1 AS [PartType]
	,PartStatus
	,SalesPerson AS [SalesPersonName]
	,ReturnComment
	,SalesReturnOrderNum
	,MAX(SalesReturnInvoiceNum) AS SalesReturnInvoiceNum
	,TRIM(WarehouseCode) AS WarehouseCode
	,CASE WHEN SalesChannel = 'POS' OR SalesChannel = 'WMS' THEN 'Over-the-counter'
		WHEN SalesChannel = 'WEBSHOP' OR SalesChannel = 'www.arkov.cz' THEN 'www.arkov.cz'
		WHEN SalesChannel = 'www.arkov.sk' THEN 'www.arkov.sk'
		WHEN SalesChannel = 'EDI' THEN 'EDI'
		ELSE 'Normal Order Handling' END AS SalesChannel
	,CASE WHEN SalesChannel = 'POS' OR SalesChannel = 'WMS' THEN 'Over-the-counter'
		WHEN SalesChannel = 'WEBSHOP' OR SalesChannel = 'www.arkov.cz' OR SalesChannel = 'www.arkov.sk' THEN 'Webshop'
		WHEN SalesChannel = 'EDI' THEN 'EDI'
		ELSE 'Normal Order Handling' END AS AxInterSalesChannel
	--,'' AS Cancellation
	,BusinessChain AS [Department]
	--,'' AS [ProjectNum]
	--,'' AS [IndexKey]
	--,'' AS SORes1
	--,'' AS SORes2
	--,'' AS SORes3
	--,NULL AS [TotalMiscChrg]
FROM stage.ARK_PI_OLine
--WHERE OrderDate >= DATEADD(year, -1, GETDATE()) --Added this where clause as semi-incremental load functinoality since it doesn't work easily on meta-param table. /SM 2021-10-01
GROUP BY
	PartitionKey, Company, CustNum, OrderNum, OrderLine, OrderSubLine, OrderType, OrderRelNum, OrderDate, NeedbyDate, DelivDate, InvoiceNum, OrderQty, DelivQty, RemainingQty, UnitPrice, UnitCost, Currency, CurrExChRate, BusinessChain, OpenRelease, DiscountAmount, DiscountPercent, PartNum, PartStatus, SalesPerson, ReturnComment, SalesReturnOrderNum, WarehouseCode, SalesChannel, BusinessChain, Res1
GO
PRINT N'Creating [dm_AX].[dimSupplier]'
GO




CREATE VIEW [dm_AX].[dimSupplier] AS

SELECT 
 [SupplierID]
,[CompanyID]
,[Company]
,[SupplierNum]
,[MainSupplierName]
,[SupplierName]
,[Supplier]
,[TelephoneNum]
,[Email]
,[ZipCode]
,[City]
,[District]
,[CountryCode]
,[CountryName]
,[Region]
,[SupplierCategory]
,[SupplierResponsible]
,[AddressLine]
,[FullAddressLine]
,[AccountNum]
,[OrganizationNum]
,[VATNum]
,[InternalExternal]
,[CodeOfConduct]
,[CustomerNum]
,[SupplierScore]
,[MinOrderQty]
,[MinOrderValue]
,[Website]
,[Comments]
,[IsMaterialSupplier]
,[DUNS]
,[DUNS_MatchScore]
,[is_inferred]
,[is_deleted]
,[is_validCountryCode]
,[DUNS_Status]
FROM [dm].[DimSupplier]
WHERE [Company] in ('AXISE','AXHSE') -- HQ basket
GO
PRINT N'Creating [stage].[AXI_HQ_Supplier]'
GO
CREATE TABLE [stage].[AXI_HQ_Supplier]
(
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[MainSupplierName] [nvarchar] (100) NULL,
[SupplierName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[AddressLine3] [nvarchar] (100) NULL,
[TelephoneNum] [nvarchar] (50) NULL,
[Email] [nvarchar] (200) NULL,
[ZipCode] [nvarchar] (50) NULL,
[City] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[Region] [nvarchar] (50) NULL,
[SupplierCategory] [nvarchar] (50) NULL,
[SupplierResponsible] [nvarchar] (100) NULL,
[AccountNum] [nvarchar] (50) NULL,
[VATNum] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[CodeOfConduct] [nvarchar] (20) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[SupplierScore] [nvarchar] (20) NULL,
[MinOrderQty] [decimal] (18, 4) NULL,
[MinOrderValue] [decimal] (18, 4) NULL,
[Website] [nvarchar] (100) NULL,
[Comments] [nvarchar] (500) NULL,
[SRes1] [nvarchar] (100) NULL,
[SRes2] [nvarchar] (100) NULL,
[SRes3] [nvarchar] (100) NULL,
[PartitionKey] [varchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXHSE_HQ_Supplier]'
GO




/****** Script for SelectTopNRows command from SSMS  ******/
CREATE VIEW [stage].[vAXHSE_HQ_Supplier] AS
SELECT 

	  CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', SupplierNum ))) AS SupplierID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',Company)) AS CompanyID
	  ,CONCAT(Company,'#', SupplierNum ) AS SupplierCode
	  ,CONVERT(varchar, GETDATE(), 23) AS PartitionKey

	  ,[Company]
      ,[SupplierNum]
      ,[MainSupplierName]
      ,[SupplierName]
      ,[AddressLine1]
      ,[AddressLine2]
      ,[AddressLine3]
      ,[TelephoneNum]
      ,[Email]
      ,[ZipCode]
      ,[City]
      ,[District]
      ,[CountryName]
      ,[Region]
      ,[SupplierCategory]
      ,[SupplierResponsible]
	  ,CONCAT(NULLIF(TRIM(AddressLine1),'') ,', ' +  NULLIF(TRIM(AddressLine2),'')) AS AddressLine
	  ,CONCAT(NULLIF(TRIM(CountryName),''),  ', ' + NULLIF(TRIM([City]),'') , ', ' + NULLIF(TRIM([ZipCode]),''),', ' +  NULLIF(TRIM(AddressLine1),''),', ' + NULLIF(TRIM(AddressLine2),'')  ) AS FullAddressLine
      ,[AccountNum]
      ,[VATNum]
	  ,'' AS OrganizationNum
      ,CASE WHEN SupplierCategory IN ('D','K') THEN 'I' ELSE 'E' END AS [InternalExternal]
      ,[CodeOfConduct]
      ,[CustomerNum]
      ,[SupplierScore]
      ,[MinOrderQty]
      ,[MinOrderValue]
      ,[Website]
      ,[Comments]
      ,[SRes1]
      ,[SRes2]
      ,[SRes3]
  FROM [stage].[AXI_HQ_Supplier]
  where upper(Company) = 'AXHSE'
GO
PRINT N'Creating [stage].[AXL_ES_Customer]'
GO
CREATE TABLE [stage].[AXL_ES_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[MainCustomerName] [nvarchar] (100) NULL,
[CustomerName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[AddressLine] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (20) NULL,
[TelephoneNumber2] [nvarchar] (20) NULL,
[Email] [nvarchar] (100) NULL,
[City] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[Division] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (50) NULL,
[CustomerIndustry] [nvarchar] (50) NULL,
[CustomerSubIndustry] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNo] [nvarchar] (50) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[CustomerABC] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[SalesPersonResponsible] [nvarchar] (50) NULL,
[CustomerType] [nvarchar] (50) NULL,
[Res1] [nvarchar] (50) NULL,
[Res2] [nvarchar] (50) NULL,
[Res3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXL_ES_Customer]'
GO


CREATE VIEW [stage].[vAXL_ES_Customer] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustomerNum))) )) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,UPPER(CONCAT([Company], '#', TRIM([CustomerNum]))) AS CustomerCode
	,PartitionKey

	,UPPER(Company) AS Company
	,UPPER(TRIM(CustomerNum)) AS [CustomerNum]
	,TRIM(MainCustomerName) AS MainCustomerName
	,TRIM(CustomerName) AS  [CustomerName]
	,TRIM([AddressLine1]) AS [AddressLine1]
	,TRIM([AddressLine2]) AS [AddressLine2]
	,TRIM([AddressLine3]) AS [AddressLine3]
	,TRIM([TelephoneNumber1]) AS [TelephoneNum1]
	,TRIM([TelephoneNumber2]) AS [TelephoneNum2]
	,TRIM([Email]) AS [Email]
	,TRIM([ZipCode]) AS [ZipCode]
	,TRIM([City]) AS [City]
	,TRIM([State]) AS [State]
	,TRIM([District]) AS [SalesDistrict]
	,TRIM(con.CountryName) AS CountryName
	,TRIM([ISOAlpha2Code]) AS [CountryCode]
	,TRIM([Division]) AS [Division]
	,TRIM([CustomerIndustry]) AS [CustomerIndustry]
	,TRIM([CustomerSubIndustry]) AS [CustomerSubIndustry]
	,TRIM([AddressLine3]) AS [AddressLine]
	,CONCAT(TRIM(con.CountryName), + ',  ' + TRIM([City]), + ',  ' + TRIM([ZipCode]), + ',  ' + TRIM(addressline3)) AS [FullAddressLine]
	,TRIM(CustomerGroup) AS [CustomerGroup]
	,TRIM(CustomerGroup) AS [CustomerSubGroup]
	,TRIM([SalesRepCode]) AS [SalesPersonCode]
	,TRIM(SalesPersonName) AS [SalesPersonName]
	,TRIM([SalesPersonResponsible]) AS [SalesPersonResponsible]
	,TRIM([VATRegNo]) AS [VATNum]
	,TRIM([AccountString]) AS [AccountNum]
	,TRIM([InternalExternal]) AS [InternalExternal]
	,TRIM([CustomerABC]) AS [CustomerScore]
	,TRIM([CustomerType]) AS [CustomerType]
FROM [stage].[AXL_ES_Customer] com
	LEFT JOIN dbo.Country con ON com.CountryName = con.[ISOAlpha2Code]

--GROUP BY
--	PartitionKey, Company, CustomerNum, CustomerName, MainCustomerName, [AddressLine1], [AddressLine2], [AddressLine3], [TelephoneNumber1], [TelephoneNumber2], [Email], [ZipCode], [City], [State], [District], [CountryName], [Division], [CustomerIndustry], [CustomerSubIndustry], CustomerGroup, [SalesRepCode], SalesPersonName, [SalesPersonResponsible], [VATRegNo], [AccountString], [InternalExternal], [CustomerABC], [CustomerType]

--	Stagetablename in ('AXL_AU_Customer', 'AXL_DC_Customer', 'AXL_HU_Customer', 'AXL_IE_Customer', 'AXL_PL_Customer', 'AXL_PT_Customer', 'AXL_UK_Customer')
GO
PRINT N'Creating [stage].[MAK_NL_SOLine]'
GO
CREATE TABLE [stage].[MAK_NL_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SalesInvoiceNum] [nvarchar] (50) NULL,
[SalesInvoiceDate] [date] NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[MainItem] [nvarchar] (50) NULL,
[Mainitem2] [nvarchar] (50) NULL,
[SalesOrderNum] [nvarchar] (50) NULL,
[SalesOrderLine] [nvarchar] (50) NULL,
[SalesOrderType] [nvarchar] (50) NULL,
[SalesInvoiceType] [nvarchar] (50) NULL,
[SalesInvoiceQty] [decimal] (18, 4) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[VATAmount] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ProjectNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[ActualDelivDate] [date] NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[IndexKey] [int] NULL,
[testNetLineAmount] [decimal] (18, 4) NULL,
[testCostLineAmount] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vMAK_NL_SOLine]'
GO


CREATE VIEW [stage].[vMAK_NL_SOLine] AS
--COMMENT empty fields / ADD UPPER() TRIM() INTO PartID,CustomerID 13-12-2022 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company, '#', SalesInvoiceNum, '#', SalesOrderNum, '#', SalesOrderLine, '#', PartNum, '#', SalesOrderType, '#',  IndexKey ))) AS SalesInvoiceID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',SalesOrderNum,'#',SalesOrderLine,'#',SalesInvoiceNum))) AS SalesOrderID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company, '#', TRIM(SalesInvoiceNum)))) AS SalesLedgerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(SalesOrderNum)))) AS SalesOrderNumID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(CustomerNum)))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID
    ,CONVERT([binary](32),HASHBYTES('SHA2_256',Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT(Company, '#', TRIM(PartNum)))) AS PartID  
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',WarehouseCode))) AS WareHouseID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',upper(CONCAT(trim(Company),'#',trim(WarehouseCode))))) AS WareHouseID -- TO 2022-12-13
	,CONCAT(TRIM(Company),'#',TRIM(SalesOrderNum),'#',TRIM(SalesOrderLine)) as SalesOrderCode
	,CONVERT(int, replace(convert(date,SalesInvoiceDate),'-','')) AS SalesInvoiceDateID  --Redundant?
	,CONCAT(Company,'#',TRIM(SalesInvoiceNum),'#',TRIM(InvoiceLine)) AS SalesInvoiceCode --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey

	,Company
	,[dbo].[ProperCase](SalesPersonName) AS SalesPersonName
	,TRIM(CustomerNum) AS CustomerNum
	,TRIM(PartNum) AS PartNum
	,MainItem   AS PartType
	,TRIM(SalesOrderNum) AS SalesOrderNum
	,SalesOrderLine		AS SalesOrderLine
	--,''	AS SalesOrderSubLine
	,SalesOrderType AS SalesOrderType
	,COALESCE(SalesInvoiceNum,'0000000')	AS SalesInvoiceNum
	,InvoiceLine	AS SalesInvoiceLine
	,SalesInvoiceType AS SalesInvoiceType
	,SalesInvoiceDate
	,COALESCE(ActualDelivDate, SalesInvoiceDate) 		AS ActualDelivDate
	,UoM
	,SalesInvoiceQty
	,COALESCE(UnitPrice/100.0, 0)	AS UnitPrice
	,COALESCE(UnitCost/100.0, 0)	AS UnitCost
	,COALESCE(DiscountAmount/NULLIF(SalesInvoiceQty*UnitPrice/100.0,0),0) AS DiscountPercent
	,COALESCE(DiscountAmount/100.0, 0) AS DiscountAmount
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	,COALESCE(TotalMiscChrg/100.0, 0) AS TotalMiscChrg
	,VATAmount
	,Currency
	,COALESCE([ExchangeRate], 1) AS ExchangeRate
	,IIF(SalesOrderType = '006', 1, 0)  AS CreditMemo
	,IIF(SalesOrderNum LIKE 'TNT%', 'EDI', 'Normal Order Handling')   AS SalesChannel
	--,'' AS Department
	,WarehouseCode
	--,NULL AS DeliveryAddress
	--,'' AS CostBearerNum
	--,''AS CostUnitNum
	--,'' AS ReturnComment
	--,'' AS ReturnNum
	--,'' AS ProjectNum
	,IndexKey
	--,'' AS SIRes1
	--,'' AS SIRes2
	--,'' AS SIRes3
FROM stage.MAK_NL_SOLine
/*
GROUP BY
	PartitionKey,Company,SalesPersonName, CustomerNum, PartNum, SalesOrderNum, SalesOrderLine, SalesOrderType, SalesInvoiceNum,InvoiceLine, SalesInvoiceDate, SalesInvoiceType, ActualDeliveryDate,UnitPrice, UnitCost, UoM ,DiscountAmount,TotalMiscChrg,WarehouseCode, [Currency], [ExchangeRate],  SalesOrderType, MainItem
 */
GO
PRINT N'Creating [stage].[TRA_SE_PurchaseLedger]'
GO
CREATE TABLE [stage].[TRA_SE_PurchaseLedger]
(
[PartitionKey] [nvarchar] (25) NULL,
[Company] [nvarchar] (8) NULL,
[SupplierNum] [nvarchar] (20) NULL,
[PurchaseInvoiceNum] [nvarchar] (25) NULL,
[PurchaseInvoiceDate] [nvarchar] (60) NULL,
[InvoiceAmount] [nvarchar] (60) NULL,
[Currency] [nvarchar] (3) NULL,
[ExchangeRate] [nvarchar] (60) NULL,
[PurchaseOrderNum] [nvarchar] (60) NULL,
[PurchaseDueDate] [nvarchar] (60) NULL,
[PurchaseLastPaymentDate] [nvarchar] (60) NULL,
[PaidInvoiceAmount] [nvarchar] (60) NULL,
[RemainingInvoiceAmount] [nvarchar] (60) NULL,
[AccountingDate] [nvarchar] (60) NULL,
[VATAmount] [nvarchar] (60) NULL,
[PaymentTerms] [nvarchar] (2) NULL,
[IsInvoiceClosed] [nvarchar] (1) NULL,
[CreatedTimeStamp] [nvarchar] (60) NULL,
[ModifiedTimeStamp] [nvarchar] (60) NULL,
[IsActiveRecord] [nvarchar] (1) NULL,
[journal] [nvarchar] (10) NULL
)
GO
PRINT N'Creating [stage].[vTRA_SE_PurchaseLedger]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vTRA_SE_PurchaseLedger]
	AS select 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum), '#', TRIM(journal))))) AS PurchaseLedgerID,
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Company])))) AS CompanyID,
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([SupplierNum]))))) AS SupplierID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,PartitionKey
	,UPPER(Company)				as Company
	, TRIM(SupplierNum)			as SupplierNum
	, trim(PurchaseInvoiceNum)	as PurchaseInvoiceNum
	, cast(PurchaseInvoiceDate as date) as PurchaseInvoiceDate
	,cast(InvoiceAmount as decimal(18,4)) as InvoiceAmount
	,cast(PaidInvoiceAmount as decimal(18,4)) as PaidInvoiceAmount
	,cast(RemainingInvoiceAmount as decimal(18,4)) as RemainingInvoiceAmount
	,cast(VATAmount as decimal(18,4)) as VATAmount
	, Currency
	, cast(ExchangeRate as decimal (18,4)) as ExchangeRate
	, PurchaseOrderNum
	, cast(PurchaseDueDate as date) as PurchaseDueDate
	, cast(PurchaseLastPaymentDate as date) as PurchaseLastPaymentDate
	, cast(AccountingDate as date) as AccountingDate
	,PaymentTerms
	,cast(IsInvoiceClosed as bit) as IsInvoiceClosed
	,cast(IsActiveRecord as bit) as IsActiveRecord
from stage.TRA_SE_PurchaseLedger
;
GO
PRINT N'Creating [stage].[NOM_NO_SupplierAgreement]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[NOM_NO_SupplierAgreement]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[AgreementCode] [nvarchar] (50) NULL,
[AgreementDescription] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[DiscountPercent] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[AgreementQty] [nvarchar] (50) NULL,
[UoM] [nvarchar] (50) NULL,
[DelivTime] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[SupplierTerms] [nvarchar] (100) NULL,
[AgreementStart] [nvarchar] (50) NULL,
[AgreementEnd] [nvarchar] (50) NULL,
[SARes1] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vNOM_NO_SupplierAgreement]'
GO

CREATE VIEW [stage].[vNOM_NO_SupplierAgreement] AS 
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([PartNum]), '#', TRIM([SupplierNum]), '#', [AgreementStart], '#', [AgreementEnd])))) AS SupplierAgreementID --CustomerAgreementID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM([SupplierNum]))))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([SupplierNum]))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(Currency)))) AS CurrencyID

	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([PartNum]))))) AS PartID
	,[PartitionKey]

	,UPPER([Company]) AS [Company]
	,UPPER(TRIM([SupplierNum])) AS SupplierNum
	,UPPER(TRIM([PartNum])) AS PartNum
	,AgreementCode AS [AgreementCode]
	,AgreementDescription AS [AgreementDescription]
	,[DiscountPercent]
	,[UnitPrice] AS [UnitPrice]
	,AgreementQty AS [AgreementQty]
	,Currency AS [Currency]
	,CONVERT(int, [DelivTime]) AS [DelivTime]
	,IIF([AgreementStart] = 0, '1900-01-01', CONVERT(Date, [AgreementStart])) AS [AgreementStart]
	,IIF([AgreementEnd] = 0, '1900-01-01', CONVERT(Date, [AgreementEnd])) AS [AgreementEnd]
	,[SupplierTerms]
	,0	AS FulfilledQty
	,0  AS RemainingQty
	,[SARes1] AS UoM
	,[SARes1]
	,'' AS [SARes2]
	,'' AS [SARes3]
FROM 
	[stage].[NOM_NO_SupplierAgreement]
GROUP BY [PartitionKey], [Company], [SupplierNum], [PartNum], AgreementCode, AgreementDescription, [DiscountPercent], AgreementQty, Currency, [DelivTime], [SupplierTerms], [UnitPrice],[AgreementStart],[AgreementEnd], [SARes1]
GO
PRINT N'Creating [dm_TS].[fctStockBalance]'
GO








CREATE VIEW [dm_TS].[fctStockBalance] AS


SELECT 
 sb.[StockBalanceID]
,sb.[CompanyID]
,sb.[SupplierID]
,sb.[PartID]
,sb.[WarehouseID]
,sb.[CurrencyMonthKey]
,sb.[Company]
,sb.[Currency]
,sb.[BinNum]
,sb.[BatchNum]
,sb.[SupplierNum]
,sb.[PartNum]
,sb.[DelivTime]
,sb.[LastStockTakeDate]
,sb.[LastStdCostCalDate]
,sb.[SafetyStock]
,sb.[MaxStockQty]
,sb.[StockBalance]
,sb.[StockValue]
,sb.[AvgCost]
,sb.[ReserveQty]
,sb.[BackOrderQty]
,sb.[OrderQty]
,sb.[StockTakeDiff]
,sb.[ReOrderLevel]
,sb.[OptimalOrderQty]
,sb.[WarehouseCode]
,sb.[SBRes1]
,sb.[SBRes2]
,sb.[SBRes3]

FROM dm.FactStockBalance as sb

WHERE sb.Company  in ('FESFORA', 'FSEFORA', 'FFRFORA', 'FFRGPI', 'FFRLEX', 'IFIWIDN', 'IEEWIDN', 'TMTFI', 'TMTEE', 'FITMT', 'EETMT', 'ABKSE', 'ROROSE','STESE')  -- TS basket by 2021-08-05
GO
PRINT N'Creating [stage].[vNOM_NO_StockTransactionOB]'
GO

/****** Object:  View [stage].[vNOM_NO_StockTransactionOB]    Script Date: 2022-04-14 08:39:37 ******/
CREATE VIEW [stage].[vNOM_NO_StockTransactionOB] AS 

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', (IndexKey)))) AS StockTransactionID
	,[Company]
	,TRIM([WarehouseCode]) AS WarehouseCode
	,TransactionCode
	,TransactionDescription
	,IIF(TRIM(IssuerReceiverNum)='', NULL,TRIM(IssuerReceiverNum)) AS IssuerReceiverNum
	,IIF(TRIM([OrderNum])='', NULL,TRIM(OrderNum)) AS OrderNum
	,OrderLine
	,IIF(TRIM([InvoiceNum])='', NULL,TRIM(InvoiceNum)) AS InvoiceNum
	,InvoiceLine
	,UPPER(TRIM([PartNum])) AS [PartNum]
	,IIF(TRIM([BinNum])='', NULL,TRIM(BinNum)) AS BinNum
	,IIF(TRIM([BatchNum])='', NULL,TRIM(BatchNum)) AS BatchNum
	,CONVERT(date, TransactionDate) AS TransactionDate
	,TransactionTime
	,IIF(TransactionQty IS NULL, 0, TRY_CONVERT(decimal(18,2), REPLACE(REPLACE(TransactionQty, ' ', ''), ',', '.'))) AS TransactionQty --TRY_CONVERT(decimal(18,0), REPLACE(TransactionQty, '.', ','))
	,IIF(TransactionValue IS NULL, 0, TRY_CONVERT(decimal(18,2), REPLACE(TransactionValue, ',', '.'))) AS TransactionValue --TRY_CONVERT(decimal(18,2), REPLACE(TransactionValue, '.', ','))
	,IIF(CostPrice IS NULL, 0, TRY_CONVERT(decimal(18,2), REPLACE(REPLACE(CostPrice, ' ', ''), ',', '.'))) AS [CostPrice] --TRY_CONVERT(decimal(18,2),  REPLACE([CostPrice], '.', ','))
	,IIF(SalesUnitPrice IS NULL, 0, TRY_CONVERT(decimal(18,2), REPLACE(REPLACE(SalesUnitPrice, ' ', ''), ',', '.'))) AS SalesUnitPrice --TRY_CONVERT(decimal(18,2),  REPLACE(SalesUnitPrice, '.', ','))
	,IIF(TRIM([Currency])='', NULL, TRIM(Currency)) AS Currency
	,[Reference]
	,CONVERT(date, AdjustmentDate) AS AdjustmentDate
	,'External' AS InternalExternal
	,'' AS STRes1
	,'' AS STRes2
	,'' AS STRes3

	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER([Company]))) AS CompanyID
    ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT([Company],'#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,IIF(TransactionCode in ('930', '931', '936'), CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([InvoiceNum])))), NULL) AS PurchaseInvoiceID
	,IIF(TransactionCode in ('930', '931', '936'), CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([OrderNum])))), NULL) AS PurchaseOrderNumID
	,IIF(TransactionCode in ('800', '801', '815'), CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([OrderNum])))), NULL) AS SalesOrderNumID
	,IIF(TransactionCode in ('800', '801', '815'), CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([InvoiceNum])))), NULL) AS SalesInvoiceID
	,IIF(TransactionCode in ('800', '801', '815'), CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM(IssuerReceiverNum)))), NULL) AS CustomerID
	,IIF(TransactionCode in ('930', '931', '936'), CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM(IssuerReceiverNum)))), NULL) AS SupplierID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',TRIM([Currency]))) AS CurrencyID
	,'2022-04-14 08:30' AS PartitionKey
	,IndexKey

FROM [stage].[NOM_NO_StockTransactionOB]
GO
PRINT N'Creating [dm_CS_PT].[dimProject]'
GO
--CREATE schema [dm_CS_PT]
CREATE VIEW [dm_CS_PT].[dimProject] AS

SELECT 
 proj.[ProjectID]
,proj.[ProjectCode]
,proj.[PartitionKey]
,proj.[Company]
,proj.[MainProjectNum]
,proj.[ProjectNum]
,proj.[ProjectDescription]
,proj.[Project]
,proj.[Organisation]
,proj.[ProjectStatus]
,proj.[ProjectCategory]
,proj.[WBSElement]
,proj.[ObjectNum]
,proj.[Level]
,proj.[Currency]
,proj.[WarehouseCode]
,proj.[ProjectResponsible]
,proj.[Comments]
,proj.[StartDate]
,proj.[EndDate]
,proj.[EstEndDate]
,proj.[ActualCost]
FROM [dm].[DimProject] proj
LEFT JOIN dbo.Company com ON proj.Company = com.Company
WHERE com.BusinessArea = '' AND com.[Status] = 'Active'
GO
PRINT N'Creating [stage].[vAXI_HQ_Supplier]'
GO




/****** Script for SelectTopNRows command from SSMS  ******/
CREATE VIEW [stage].[vAXI_HQ_Supplier] AS
SELECT 

	  CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', SupplierNum ))) AS SupplierID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',Company)) AS CompanyID
	  ,CONCAT(Company,'#', SupplierNum ) AS SupplierCode
	  ,CONVERT(varchar, GETDATE(), 23) AS PartitionKey

	  ,[Company]
      ,[SupplierNum]
      ,[MainSupplierName]
      ,[SupplierName]
      ,[AddressLine1]
      ,[AddressLine2]
      ,[AddressLine3]
      ,[TelephoneNum]
      ,[Email]
      ,[ZipCode]
      ,[City]
      ,[District]
      ,[CountryName]
      ,[Region]
      ,[SupplierCategory]
      ,[SupplierResponsible]
	  ,CONCAT(NULLIF(TRIM(AddressLine1),'') ,', ' +  NULLIF(TRIM(AddressLine2),'')) AS AddressLine
	  ,CONCAT(NULLIF(TRIM(CountryName),''),  ', ' + NULLIF(TRIM([City]),'') , ', ' + NULLIF(TRIM([ZipCode]),''),', ' +  NULLIF(TRIM(AddressLine1),''),', ' + NULLIF(TRIM(AddressLine2),'')  ) AS FullAddressLine
      ,[AccountNum]
      ,[VATNum]
	  ,'' AS OrganizationNum
      ,CASE WHEN SupplierCategory IN ('D','K') THEN 'I' ELSE 'E' END AS [InternalExternal]
      ,[CodeOfConduct]
      ,[CustomerNum]
      ,[SupplierScore]
      ,[MinOrderQty]
      ,[MinOrderValue]
      ,[Website]
      ,[Comments]
      ,[SRes1]
      ,[SRes2]
      ,[SRes3]
  FROM [stage].[AXI_HQ_Supplier]
  where upper(Company) = 'AXISE'
GO
PRINT N'Creating [stage].[CER_LV_SalesOrderLog]'
GO
CREATE TABLE [stage].[CER_LV_SalesOrderLog]
(
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[DelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[CurrExchRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (50) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[NeedbyDate] [date] NULL,
[SalesPerson] [nvarchar] (100) NULL,
[ReturnComment] [nvarchar] (500) NULL,
[SalesReturnInvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[CancellationCode] [nvarchar] (50) NULL,
[IndexKey] [nvarchar] (50) NOT NULL,
[PartitionKey] [varchar] (50) NULL,
[TransactionDate] [date] NULL
)
GO
PRINT N'Creating [stage].[vCER_LV_SalesOrderLog]'
GO
CREATE VIEW [stage].[vCER_LV_SalesOrderLog] As
--COMMENT EMPTY FIELDS // ADD TRIM()UPPER() INTO PartID,WarehouseID 2022-12-21 VA
SELECT 
	  CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', IndexKey)))) AS SalesOrderLogID
	  ,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM(Company))) AS CompanyID
	  ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	  ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	  --,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(UPPER(PartNum))))) AS PartID
	  ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	  --,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(UPPER(PartNum)))) AS SalesOrderCode 
	  ,CONVERT(int, replace(convert(date, OrderDate),'-','')) AS SalesOrderDateID   --redundent
	  ,PartitionKey

	  ,[Company]
      ,[CustNum]	AS CustomerNum
      ,[OrderNum]	AS SalesOrderNum
      ,[OrderLine]	AS SalesOrderLine
      ,[OrderSubLine]	AS SalesOrderSubLine
      ,[OrderType]		AS SalesOrderType
	  --,'' AS SalesOrderLogType
      ,[OrderDate]		AS SalesOrderDate
	  ,[TransactionDate]	AS SalesOrderLogDate
--      ,[DelivDate]		AS ExpDelivDate
      ,[InvoiceNum]		AS SalesInvoiceNum
      ,[OrderQty]		AS SalesOrderQty
	  --,''				AS UoM
      ,[UnitPrice]
      ,[UnitCost]
      ,[Currency]
      ,[CurrExchRate]	AS ExchangeRate
      ,[OpenRelease]
      ,[DiscountPercent]
      ,[DiscountAmount]
      ,[PartNum]
	  ,IIF(OrderSubLine = '000000', 'Main', 'Sub' ) AS PartType
--      ,[NeedbyDate]
      ,[SalesPerson]	AS SalesPersonName
	  --,''				AS Department
      ,[ReturnComment]
      ,[SalesReturnInvoiceNum]
      ,[WarehouseCode]
      ,[CancellationCode]
      ,[IndexKey]
	  --,'' AS SORes1
	  --,'' AS SORes2
	  --,'' AS SORes3
	  
  FROM [stage].[CER_LV_SalesOrderLog]
GO
PRINT N'Creating [stage].[SCM_FI_PurchaseOrder]'
GO
CREATE TABLE [stage].[SCM_FI_PurchaseOrder]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [varchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[LineType] [nvarchar] (50) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[InvoiceSupplierCode] [nvarchar] (50) NULL,
[DelivCustCode] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[OpenLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[ItemType] [int] NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[OrderedQty] [decimal] (18, 4) NULL,
[ReceivedQty] [decimal] (18, 4) NULL,
[InvoicedQty] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[CommitedDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[ReqDelivDate] [date] NULL,
[DueDate] [date] NULL,
[DelivDate] [date] NULL,
[OrgReqDelivDate] [date] NULL,
[PurchaserName] [nvarchar] (50) NULL,
[LeadTime] [nvarchar] (50) NULL,
[Comments] [nvarchar] (max) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[SysRowID] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vSCM_FI_PurchaseOrder]'
GO
CREATE VIEW [stage].[vSCM_FI_PurchaseOrder] AS
--COMMENT EMPTY FIELDS // ADD UPPER() TRIM() INTO PartID,CustomerID,WarehouseID 2022-12-21 VA
--ADD TRIM() UPPER() INTO SupplierID 23-01-24 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(PurchaseOrderSubLine)))) AS PurchaseOrderID -- tag bort , '#', DelivDate, men lägg till ActualDelivDate
	,CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(PurchaseOrderNum), TRIM(PurchaseOrderLine), TRIM(PurchaseOrderSubLine), TRIM(InvoiceNum)) AS PurchaseOrderCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(PurchaseOrderNum)))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(InvoiceNum)))) AS PurchaseInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM([CurrencyCode]))) AS CurrencyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(DelivCustCode))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(DelivCustCode)))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierCode))))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(SupplierCode)))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(PartNum)))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', TRIM([WarehouseCode])))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [Company])) AS CompanyID
	,PartitionKey AS PartitionKey

	,Company
	,TRIM(PurchaseOrderNum) AS PurchaseOrderNum
	,TRIM(PurchaseOrderLine) AS PurchaseOrderLine
	,TRIM(PurchaseOrderSubLine) AS PurchaseOrderSubLine
	,TRIM(OrderType) AS [PurchaseOrderType]
	,CASE WHEN OpenLine = 'True' THEN 'Open' ELSE 'Closed' END AS PurchaseOrderStatus
	,OpenLine
	,OrderDate AS [PurchaseOrderDate]
	,CASE WHEN OrgReqDelivDate <= '1900-01-01' or OrgReqDelivDate = '' or OrgReqDelivDate is null THEN '1900-01-01' 
	      ELSE OrgReqDelivDate END  AS [OrgReqDelivDate] -- This is currently set as DueDate in Epicor server. Used in EDC Stock Report /SM 2021-09-10
	,CASE WHEN CommitedDelivDate <= '1900-01-01' or CommitedDelivDate = '' or CommitedDelivDate is null THEN '1900-01-01' 
	      ELSE CommitedDelivDate END AS [CommittedDelivDate]
	--,DelivDate AS ExpDelivDate
	,CASE WHEN ActualDelivDate <= '1900-01-01' or ActualDelivDate = '' or ActualDelivDate is null THEN '1900-01-01' 
	      ELSE ActualDelivDate END   AS [ActualDelivDate] -- It's either DelivDate or ActualDelivDate from stage table
	,CASE WHEN ReqDelivDate <= '1900-01-01' or ReqDelivDate = '' or ReqDelivDate is null THEN '1900-01-01' 
	      ELSE ReqDelivDate END  AS [ReqDelivDate]
	,TRIM(InvoiceNum) AS [PurchaseInvoiceNum]
	,TRIM(PartNum) AS PartNum
	,TRIM(SupplierCode) AS [SupplierNum]
	--,'' AS SupplierPartNum
	--,'' AS [SupplierInvoiceNum]
	,TRIM(DelivCustCode) AS [DelivCustomerNum]
	--,'' AS [PartStatus]
	,OrderedQty AS PurchaseOrderQty
	,ReceivedQty AS ReceiveQty
	,InvoicedQty AS InvoiceQty
	--,0 AS MinOrderQty
	--,'' AS [UoM]
	,UnitPrice AS UnitPrice
	,DiscountPercent AS DiscountPercent
	,UnitPrice*OrderedQty*DiscountPercent/100 AS [DiscountAmount]
	--,0 AS LandedCost
	,ExchangeRate
	,CurrencyCode AS [Currency]
	,[dbo].[ProperCase](TRIM(PurchaserName)) AS PurchaserName
	,TRIM(WarehouseCode) AS WarehouseCode
	--,'' AS ReceivingNum
	,LeadTime AS [DelivTime]
	--,'' AS [PurchaseChannel]
	--,'' Documents
	,TRIM(Comments) AS Comments
	,CASE WHEN CONVERT(NVARCHAR(50), TRIM([LineType])) like '0' THEN 'Stock Item Line' WHEN CONVERT(NVARCHAR(50), TRIM([LineType])) like '1' THEN 'Non Stock Item Line' ELSE NULL END AS PORes1 --[LineType] SCM requires
	,CONVERT(NVARCHAR(50), ItemType) AS PORes2 --ItemType SCM requires
	,TRIM(SysRowID) AS PORes3
FROM 
	[stage].[SCM_FI_PurchaseOrder]
/*	
GROUP BY
	PartitionKey, Company, PurchaseOrderNum, PurchaseOrderLine, PurchaseOrderSubLine, SupplierCode, DelivCustCode, LineType, InvoiceNum, PartNum, OpenLine, OrderType, UnitPrice, OrderedQty, ReceivedQty, InvoicedQty, TotalMiscChrg, ExchangeRate, CurrencyCode, ItemType, OrderDate, ActualDelivDate, OrgReqDelivDate, CommitedDelivDate, ReqDelivDate, PurchaserName, Comments, WarehouseCode, SysRowID, LeadTime

	*/
GO
PRINT N'Creating [stage].[FOR_SE_PurchaseLedger]'
GO
CREATE TABLE [stage].[FOR_SE_PurchaseLedger]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierCode] [nvarchar] (50) NOT NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[SupplierInvoiceNum] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[FiscalYear] [nvarchar] (50) NULL,
[FiscalPeriod] [nvarchar] (50) NULL,
[InvoiceLCYAmount] [decimal] (18, 4) NOT NULL,
[InvoiceCurrAmount] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (10) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[VATPaid] [decimal] (18, 4) NULL,
[VATcode] [nvarchar] (10) NULL,
[VATCodeDesc] [nvarchar] (50) NULL,
[PayToName] [nvarchar] (50) NULL,
[PayToCity] [nvarchar] (50) NULL,
[PayToContact] [nvarchar] (50) NULL,
[PaymentTermsCode] [nvarchar] (50) NULL,
[PrepaymentNum] [nvarchar] (50) NULL,
[LastPaymentNum] [nvarchar] (50) NULL,
[OriginalAmount] [decimal] (18, 4) NULL,
[RemainingAmount] [decimal] (18, 4) NULL,
[PurchaseInvoiceDesc] [nvarchar] (50) NULL,
[AgingPeriod] [nvarchar] (50) NULL,
[DaysPastDue] [nvarchar] (50) NULL,
[LinktoOriginalInvoice] [nvarchar] (max) NULL,
[ApplyDate] [date] NULL,
[ChangeDate] [date] NULL,
[IsOpenPayable] [bit] NULL
)
GO
PRINT N'Creating [stage].[vFOR_SE_PurchaseLedger]'
GO
CREATE VIEW [stage].[vFOR_SE_PurchaseLedger] AS 

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierCode), '#', TRIM(PurchaseInvoiceNum), '#', TRIM(PurchaseOrderNum), '#', TRIM(LastPaymentNum))))) AS PurchaseLedgerID 
	,UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierCode), '#', TRIM(PurchaseInvoiceNum))) AS PurchaseLedgerCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierCode))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PurchaseInvoiceNum))))) AS PurchaseInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT(int, replace(convert(date,InvoiceDate),'-','')) AS PurchaseInvoiceDateID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(CurrencyCode)))) AS CurrencyID
	,[PartitionKey]

	,UPPER(TRIM(Company)) AS [Company]
	,UPPER(TRIM([SupplierCode])) AS SupplierNum
	,TRIM([PurchaseOrderNum]) AS [PurchaseOrderNum]
	,TRIM([PurchaseInvoiceNum]) AS [PurchaseInvoiceNum]
	,CONVERT(date, [InvoiceDate]) AS PurchaseInvoiceDate
	,CONVERT(date, [DueDate]) AS PurchaseDueDate
	,CONVERT(date, [LastPaymentDate]) AS PurchaseLastPaymentDate
	,[InvoiceLCYAmount]
	,[InvoiceCurrAmount] AS InvoiceAmount
	,[ExchangeRate]
	,[CurrencyCode] AS Currency
	,[VATPaid] AS VATAmount
	,[VATcode] AS VATCode
	,[VATCodeDesc]
	,[PayToName]
	,[PayToCity]
	,([PayToContact]) AS PayToContact --MAX
	,[PaymentTermsCode] AS PaymentTerms
	,[PrePaymentNum]
	,MAX(LastPaymentNum) AS LastPaymentNum
	,PurchaseInvoiceDesc AS PLRES1
	,DaysPastDue AS PLRES2
	,'' AS PLRES3
	,OriginalAmount - RemainingAmount AS PaidInvoiceAmount
	,RemainingAmount AS RemainingInvoiceAmount
	,LinkToOriginalInvoice
	,CONVERT(date, ApplyDate) AS AccountingDate
	,AgingPeriod
	,NULL AS AgingSort

FROM 
	[stage].[FOR_SE_PurchaseLedger]
WHERE [Company] = 'FSEFORA'

GROUP BY
	[Company],[SupplierCode],[PurchaseInvoiceNum],[PurchaseOrderNum],InvoiceDate,DueDate,LastPaymentDate,[InvoiceLCYAmount],[InvoiceCurrAmount],[ExchangeRate],[CurrencyCode],[VATPaid],[VATcode],[PayToName],[PayToCity],[PaymentTermsCode],[PrepaymentNum],LastPaymentNum,[PartitionKey], PayToContact, VATCodeDesc, PurchaseInvoiceDesc, DaysPastDue, OriginalAmount, RemainingAmount, LinktoOriginalInvoice, AgingPeriod, ApplyDate
GO
PRINT N'Creating [stage].[ARK_CZ_Warehouse]'
GO
CREATE TABLE [stage].[ARK_CZ_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseID] [nvarchar] (50) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL,
[WarehouseDistrict] [nvarchar] (50) NULL,
[WarehouseAddress] [nvarchar] (100) NULL,
[WarehouseDescription] [nvarchar] (100) NULL,
[WarehouseType] [nvarchar] (50) NULL,
[WarehouseCountry] [nvarchar] (50) NULL,
[Location] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vARK_CZ_Warehouse]'
GO


CREATE VIEW [stage].[vARK_CZ_Warehouse] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([WarehouseCode])) AS [WarehouseCode]
	,[WarehouseName]
	,[WarehouseDistrict]
	,[WarehouseAddress]
	,[WarehouseDescription]
	,[WarehouseType]
	,[WarehouseCountry]
	,[Location] AS [WarehouseSite]
FROM [stage].[ARK_CZ_Warehouse]

--GROUP BY 
--	PartitionKey,[Company],[WarehouseCode],[WarehouseName],[WarehouseDistrict],[WarehouseAddress],[WarehouseDescription],[WarehouseType],[WarehouseCountry],[Location]
GO
PRINT N'Creating [dm_TS].[DimSalesPersonName]'
GO


CREATE VIEW [dm_TS].[DimSalesPersonName]
AS
SELECT sp.[SalesPersonNameID]
,sp.[Company]
,sp.[SalesPersonName]
FROM dm.DimSalesPersonName as sp
WHERE sp.Company IN ('FESFORA', 'FSEFORA', 'FFRFORA', 'FORPL', 'CERPL', 'FFRGPI', 'FFRLEX', 'IFIWIDN', 'IEEWIDN', 'TMTFI', 'TMTEE', 'FITMT', 'EETMT', 'ABKSE', 'ROROSE','STESE','FORBG','CERBG');
GO
PRINT N'Creating [stage].[AXL_IE_OLine]'
GO
CREATE TABLE [stage].[AXL_IE_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[NeedbyDate] [date] NULL,
[ExpDelivDate] [date] NULL,
[EDCExpDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (10) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[SalesPerson] [nvarchar] (50) NULL,
[WareHouseCode] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[BusinessChain] [nvarchar] (50) NULL,
[SalesOrderCategory] [nvarchar] (100) NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL,
[PartDesc] [nvarchar] (max) NULL,
[APV_Cost_EUR] [nvarchar] (50) NULL,
[APV_Item] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXL_IE_OLine]'
GO
CREATE VIEW [stage].[vAXL_IE_OLine] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(PartDesc))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum), '#', (IIF(TRIM([PartNum]) LIKE 'IACO%' , 'MISC. CHARGES', TRIM(PartDesc) )) )))) AS PartID
	,CONVERT(int, replace(convert(date, OrderDate), '-', '')) AS SalesOrderDateID
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine))) AS SalesOrderCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(CustNum) AS CustomerNum 
	,TRIM(OrderNum) AS [SalesOrderNum]
	,TRIM(OrderLine) AS [SalesOrderLine]
	,TRIM(OrderSubLine) AS [SalesOrderSubLine]
	,CONVERT(nvarchar(50), TRIM(OrderType)) AS [SalesOrderType]
	,TRIM([SalesOrderCategory]) AS [SalesOrderCategory]
	,OrderDate AS [SalesOrderDate]
	,NeedbyDate
	,ExpDelivDate AS [ExpDelivDate]
	,EDCExpDelivDate
	,ActualDelivDate
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,OrderQty AS [SalesOrderQty]
	,DelivQty
	,RemainingQty
	,Unit AS [UoM]
	,UnitPrice
	,UnitCost
	,LEFT(TRIM(Currency), 3) AS Currency
	,ExchangeRate
	,LEFT(TRIM(OpenRelease), 1) AS OpenRelease
	,DiscountAmount
	,DiscountPercent
	,NULL AS CashDiscOffered
	,NULL AS CashDiscUsed
	,TRIM(PartNum) AS PartNum
	,UPPER(PartDesc) AS PartDesc
	,'' AS [PartType]
	,CONVERT(nvarchar(50), PartStatus) AS PartStatus
	,TRIM(SalesPerson) AS [SalesPersonName]
	,TRIM(WareHouseCode) AS WarehouseCode
	,'' AS IndexKey
	,TRIM(SalesChannel) AS SalesChannel
	,TRIM(BusinessChain) AS [Department]
	,Res3 AS [ProjectNum] -- = FreeOfCharge: Y = yes, N = no
	,'' AS Cancellation
	,Res1 AS SORes1
	,Res2 AS SORes2
	,Res3 AS SORes3
FROM stage.AXL_IE_OLine
WHERE OrderDate >= '2015-01-01'
GO
PRINT N'Creating [dm_DEMO].[fctPurchaseOrderDistinct]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [dm_DEMO].[fctPurchaseOrderDistinct] AS

SELECT  [PurchaseOrderNumID]
,[CompanyID]
,[SupplierID]
,[PurchaseOrderNum]
,[Company]
,[Supplier]

FROM dm.FactPurchaseOrderDistinct
WHERE Company  = 'DEMO'
GO
PRINT N'Creating [stage].[NOM_SEIND_SalesLedger]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[NOM_SEIND_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (25) NULL,
[InvoiceDate] [datetime] NULL,
[DueDate] [datetime] NULL,
[LastPaymentDate] [datetime] NULL
)
GO
PRINT N'Creating [stage].[vNOM_SEIND_SalesLedger]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vNOM_SEIND_SalesLedger] AS
--COMMENT EMPTY FIELD 2022-12-19 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum), '#', TRIM(InvoiceNum))))) AS SalesLedgerID,
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(Company)))) AS CompanyID,
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company),'#',TRIM(CustNum))))) AS CustomerID,
	UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum), '#', TRIM(InvoiceNum))) AS SalesLedgerCode,
	PartitionKey,

	UPPER(TRIM(Company)) AS Company,
	UPPER(TRIM(CustNum)) as CustomerNum,
	UPPER(TRIM(InvoiceNum)) as SalesInvoiceNum,
	CONVERT(DATE, InvoiceDate) AS SalesInvoiceDate,
	CONVERT(date, DueDate) AS SalesDueDate,
	CONVERT(date, LastPaymentDate) AS SalesLastPaymentDate,
	'1900-01-01' AS AccountingDate
	--0 AS InvoiceAmount,
	--0 AS RemainingInvoiceAmount,
	--0 AS ExchangeRate,
	--'' AS Currency,
	--0 AS VATAmount,
	--'' AS VATCode,
	--'' AS PayToName,
	--'' AS PayToCity,
	--'' AS PayToContact,
	--'' AS PaymentTerms,
	--'' AS SLRes1,
	--'' AS SLRes2,
	--'' AS SLRes3
	--,NULL	AS PaidInvoiceAmount
	--,NULL AS AgingPeriod
	--,NULL AS AgingSort
	--,NULL AS VATCodeDesc
	--,NULL AS LinkToOriginalInvoice
FROM 
	stage.NOM_SEIND_SalesLedger
GO
PRINT N'Creating [axbus].[IOW_PL_SalesLedger]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [axbus].[IOW_PL_SalesLedger]
(
[PartitionKey] [nvarchar] (50) NULL,
[Company] [nvarchar] (50) NOT NULL,
[CustomerNum] [nvarchar] (max) NULL,
[SalesInvoiceNum] [nvarchar] (max) NULL,
[SalesInvoiceDate] [nvarchar] (max) NULL,
[SalesDueDate] [nvarchar] (max) NULL,
[SalesLastPaymentDate] [nvarchar] (max) NULL,
[InvoiceAmount] [nvarchar] (max) NULL,
[PaidInvoiceAmount] [nvarchar] (max) NULL,
[RemainingInvoiceAmount] [nvarchar] (max) NULL,
[AccountingDate] [nvarchar] (max) NULL,
[Currency] [nvarchar] (max) NULL,
[VATAmount] [nvarchar] (max) NULL,
[VATCode] [nvarchar] (max) NULL,
[PayToName] [nvarchar] (max) NULL,
[PayToCity] [nvarchar] (max) NULL,
[PayToContact] [nvarchar] (max) NULL,
[ExchangeRate] [nvarchar] (max) NULL,
[AgingPeriod] [nvarchar] (max) NULL,
[AgingSort] [nvarchar] (max) NULL,
[VATCodeDesc] [nvarchar] (max) NULL,
[PaymentTerms] [nvarchar] (max) NULL,
[SLRes1] [nvarchar] (max) NULL,
[SLRes2] [nvarchar] (max) NULL,
[SLRes3] [nvarchar] (max) NULL,
[sysCurrency] [nvarchar] (max) NULL,
[CreatedTimeStamp] [nvarchar] (max) NULL,
[ModifiedTimeStamp] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[vIOW_PL_SalesLedger]'
GO
CREATE VIEW [stage].[vIOW_PL_SalesLedger] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT((Company), '#', TRIM(CustomerNum), '#', TRIM(SalesInvoiceNum))))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(([Company]), '#', TRIM(CustomerNum))))) AS CustomerID
	,UPPER( CONCAT(Company, '#', TRIM(CustomerNum), '#', TRIM(SalesInvoiceNum)))  AS SalesLedgerCode
	,(PartitionKey) AS PartitionKey

	,UPPER(Company) AS Company
	,UPPER(TRIM(CustomerNum)) AS CustomerNum
	,TRIM(SalesInvoiceNum) AS SalesInvoiceNum
	,IIF([SalesInvoiceDate] is null, '1900-01-01', [SalesInvoiceDate]) AS [SalesInvoiceDate]
	,IIF(SalesDueDate is null, '1900-01-01', SalesDueDate) AS SalesDueDate
	,(IIF(SalesLastPaymentDate is null, '1900-01-01', SalesLastPaymentDate)) AS SalesLastPaymentDate --MAX
	,IIF(AccountingDate is null, '1900-01-01', AccountingDate) AS AccountingDate
	,CONVERT(decimal(18,4), REPLACE(InvoiceAmount, ',', '.')) AS InvoiceAmount --
	,(CONVERT(decimal(18,4), REPLACE(PaidInvoiceAmount, ',', '.'))) AS PaidInvoiceAmount  --MAX
	,(CONVERT(decimal(18,4), REPLACE(RemainingInvoiceAmount, ',', '.'))) AS RemainingInvoiceAmount --MIN
	,CONVERT(decimal(18,4), REPLACE(ExchangeRate, ',', '.')) AS ExchangeRate 
	,Currency
	,CONVERT(decimal(18,4), REPLACE(VATAmount, ',', '.')) AS VATAmount 
	,VATCode
	,VATCodeDesc
	,PayToName
	,PayToCity
	,PayToContact
	,LEFT(PaymentTerms, 50) AS PaymentTerms
	,'' AS SLRes1
	,'' AS SLRes2
	,'' AS SLRes3
	,[sysCurrency] AS SLRes6
	,AgingPeriod
	,NULL AS AgingSort
	,'' AS LinkToOriginalInvoice
FROM 
	axbus.IOW_PL_SalesLedger
--GROUP BY Company, CustomerNum, SalesInvoiceNum, [SalesInvoiceDate], SalesDueDate, AccountingDate, InvoiceAmount, ExchangeRate, Currency, VATAmount, VATCode, VATCodeDesc, PayToName, PayToCity, PayToContact, PaymentTerms, AgingPeriod, PaidInvoiceAmount, SalesLastPaymentDate, PartitionKey, RemainingInvoiceAmount
GO
PRINT N'Creating [stage].[CER_LV_Customer]'
GO
CREATE TABLE [stage].[CER_LV_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[CustomerName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[AddressLine3] [nvarchar] (100) NULL,
[TelephoneNumber1] [nvarchar] (50) NULL,
[TelephoneNumber2] [nvarchar] (50) NULL,
[Email] [nvarchar] (300) NULL,
[ABCCode] [nchar] (50) NULL,
[City] [nvarchar] (50) NULL,
[ZIP] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNr] [nvarchar] (20) NULL,
[OrganizationNum] [nvarchar] (100) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[CustomerType] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_LV_Customer]'
GO
CREATE VIEW [stage].[vCER_LV_Customer] AS
--COMMENT EMPTY FIELD // ADD UPPER()TRIM() INTO CustomerID 2022-12-21 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#',TRIM(CustomerNum))))) AS CustomerID
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#',TRIM(CustomerNum)))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONCAT(Company,'#', TRIM([CustomerNum])) AS CustomerCode
	,PartitionKey

	,Company
	,TRIM(CustomerNum) AS [CustomerNum]
	--,'' AS MainCustomerName
	,[dbo].[ProperCase](CustomerName) AS [CustomerName]
	,[AddressLine1]
	,[AddressLine2]
	,[AddressLine3]
	,[TelephoneNumber1] AS [TelephoneNum1]
	,[TelephoneNumber2] AS [TelephoneNum2]
	,LEFT([Email],100) AS Email
	,[ZIP] AS [ZipCode]
	,CASE WHEN [City] = ' '	AND LEFT(AddressLine3, 1) IN ('1','2','3','4','5','6','7','8','9') THEN trim(substring(replace([dbo].[ProperCase](AddressLine3),' ',		''), 6, 100)) ELSE [dbo].[ProperCase]([City]) end AS [City]
	,IIF([State]= ' ', null, [State]) AS [State]
	,[District] AS SalesDistrict
	,IIF(CountryName is null, 'LV', CountryCode) AS CountryCode
    ,IIF(CountryName is null, 'Latvia', CountryName) AS CountryName
	--,'' AS Division
	--,'' AS CustomerIndustry
	--,'' AS CustomerSubIndustry
	,[dbo].[ProperCase](TRIM(concat (addressline1 + ' ' + addressline2, null))) AS [AddressLine]
	,CONCAT(TRIM(Countryname), + ', ' + TRIM(AddressLine3), + ', ' + TRIM(AddressLine2)) AS [FullAddressLine]
	,[dbo].[ProperCase](CustomerGroup) AS [CustomerGroup]
	--,'' AS [CustomerSubGroup]
	,[SalesRepCode] AS SalesPersonCode
	,[dbo].[ProperCase](SalesPersonName) AS [SalesPersonName]
	--,'' AS [SalesPersonResponsible]
	,[VATRegNr] AS VATNum
	,OrganizationNum
	,[AccountString] AS AccountNum
	,[InternalExternal]
	,[ABCCode] AS CustomerScore
	,[CustomerType]
FROM [stage].[CER_LV_Customer]
GO
PRINT N'Creating [stage].[AXL_SY_SalesLedger]'
GO
CREATE TABLE [stage].[AXL_SY_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceAmount] [decimal] (18, 4) NULL,
[RemainAmount] [decimal] (18, 4) NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vAXL_SY_SalesLedger]'
GO
CREATE VIEW [stage].[vAXL_SY_SalesLedger] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(sl.Company, '#', TRIM(sl.CustNum), '#', TRIM(sl.InvoiceNum))))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(sl.Company))) AS CompanyID
	,UPPER(CONCAT(sl.Company, '#', TRIM(sl.CustNum), '#', TRIM(sl.InvoiceNum))) AS SalesLedgerCode
	,sl.PartitionKey

	,UPPER(sl.Company) AS Company
	,UPPER(TRIM(sl.CustNum)) AS CustomerNum
	,TRIM(sl.InvoiceNum) AS [SalesInvoiceNum]
	,IIF(so.InvoiceDate = '' OR so.InvoiceDate IS NULL, '1900-01-01', so.InvoiceDate) AS [SalesInvoiceDate] --
	,CONVERT(date, DueDate) AS SalesDueDate
	,CONVERT(date, LastPaymentDate) AS LastPaymentDate
	,[InvoiceAmount]
	,[RemainAmount] AS [RemainingInvoiceAmount]
	,NULL AS CashDiscOffered
	,NULL AS CashDiscUsed
	,NULL AS [ExchangeRate]
	,NULL AS [Currency]
	,NULL AS [VATAmount]
	,NULL AS [VATCode]
	,NULL AS [PayToName]
	,NULL AS [PayToCity]
	,NULL AS [PayToContact]
	,NULL AS [PaymentTerms]
	,sl.Res1 AS SLRes1
	,sl.Res2 AS SLRes2
	,sl.Res3 AS SLRes3
FROM stage.AXL_SY_SalesLedger sl
	LEFT JOIN stage.AXL_CZ_SOLine so ON TRIM(sl.InvoiceNum) = TRIM(so.InvoiceNum)
WHERE DueDate > '2015-01-01'
GROUP BY
	sl.PartitionKey, sl.Company, sl.CustNum, sl.InvoiceNum, sl.Res2, sl.Res1, sl.Res3, sl.[InvoiceAmount], sl.[RemainAmount], so.InvoiceDate, DueDate, LastPaymentDate
GO
PRINT N'Creating [stage].[AXL_FR_SOLine]'
GO
CREATE TABLE [stage].[AXL_FR_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[InvoiceType] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (22, 8) NULL,
[UnitCost] [decimal] (22, 8) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[VAT] [decimal] (18, 4) NULL,
[CashDiscountOffered] [decimal] (18, 4) NULL,
[CashDiscountUsed] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OrderType] [nvarchar] (50) NULL,
[SalesChannel] [varchar] (10) NULL,
[BusinessChain] [varchar] (10) NULL,
[Res1] [varchar] (100) NULL,
[Res2] [varchar] (100) NULL,
[Res3] [varchar] (100) NULL,
[PartDesc] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[vAXL_FR_SOLine]'
GO
CREATE VIEW [stage].[vAXL_FR_SOLine] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine), '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(PartNum), '#', TRIM(PartDesc))))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(PartDesc))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(InvoiceNum))))) AS SalesLedgerID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum), '#', (IIF(TRIM([PartNum]) LIKE 'IACO%' , 'MISC. CHARGES', TRIM([PartDesc]))))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT(int, IIF(InvoiceDate = '', 19900101, replace(convert(date, InvoiceDate), '-', ''))) AS SalesInvoiceDateID
	,UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine))) AS SalesInvoiceCode
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine))) AS SalesOrderCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(SalesPerson) AS SalesPersonName
	,TRIM(CustNum) AS [CustomerNum]
	,TRIM(PartNum) AS PartNum
	,UPPER(PartDesc) AS PartDesc
	,'' AS [PartType]
	,TRIM(OrderNum) AS [SalesOrderNum]
	,CAST(OrderLine AS text) AS [SalesOrderLine]
	,TRIM(OrderSubLine) AS [SalesOrderSubLine]
	,TRIM(OrderType) AS [SalesOrderType]
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,TRIM(InvoiceLine) AS [SalesInvoiceLine]
	,TRIM(InvoiceType) AS [SalesInvoiceType]
	,CASE WHEN InvoiceDate = '' THEN '1900-01-01' ELSE CONVERT(date, InvoiceDate) END AS [SalesInvoiceDate]
	,ActualDeliveryDate AS [ActualDelivDate]
	,SellingShipQty AS [SalesInvoiceQty]
	,TRIM(Unit) AS [UoM]
	,UnitPrice
	,UnitCost
	,DiscountAmount
	,IIF(UnitPrice*SellingShipQty = 0, 0, DiscountAmount/UnitPrice*SellingShipQty) AS DiscountPercent
	,CONVERT(decimal(18,4), CashDiscountOffered) AS [CashDiscOffered] 
	,CONVERT(decimal(18,4), CashDiscountUsed) AS [CashDiscUsed] 
	,TotalMiscChrg
	,VAT AS [VATAmount]
	,Currency
	,ExchangeRate
	,TRIM(CreditMemo) AS CreditMemo
	,TRIM([SalesChannel]) AS [SalesChannel]
	,TRIM([BusinessChain]) AS [Department]
	,TRIM(WarehouseCode) AS WarehouseCode
	,NULL AS [CostBearerNum]
	,NULL AS [CostUnitNum]
	,NULL AS [ReturnComment]
	,NULL AS [ReturnNum]
	,NULL AS [ProjectNum]
	,'' AS [IndexKey]
	,Res1 AS SIRes1
	,Res2 AS SIRes2
	,Res3 AS SIRes3
FROM stage.AXL_FR_SOLine


	--,CASE WHEN OrderType = 'MD' THEN 1 
	--		WHEN OrderType = 'MT' THEN 2
	--		WHEN OrderType = 'MR' THEN 3
	--		WHEN OrderType = 'IV' THEN 4
	--		WHEN OrderType = 'Misc. Charges' THEN 5 --added after Ulf changes in the night /DZ
	--	ELSE OrderType END AS [SalesOrderType]

--GROUP BY
--	PartitionKey, Company, SalesPerson, CustNum, PartNum, PartDesc, OrderNum, OrderLine, OrderSubLine,OrderType, InvoiceNum, InvoiceLine, InvoiceDate, SellingShipQty, UnitPrice, UnitCost, DiscountAmount, TotalMiscChrg, WarehouseCode, CreditMemo, ActualDeliveryDate, Currency, ExchangeRate, InvoiceType, Res1, Res2, Res3, Unit, VAT, SalesChannel, BusinessChain, CashDiscountOffered, CashDiscountUsed
GO
PRINT N'Creating [dm_TS].[dimCostUnit]'
GO


CREATE   VIEW [dm_TS].[dimCostUnit] AS 

SELECT  cu.[CostUnitID]
,cu.[PartitionKey]
,cu.[CostUnitCode]
,cu.[CompanyID]
,cu.[Company]
,cu.[CostUnitNum]
,cu.[CostUnitName]
,cu.[CostUnitStatus]
,cu.[CostUnitGroup]
,cu.[CostUnitGroup2]
,cu.[CostUnitGroup3]
FROM [dm].[DimCostUnit] as cu
WHERE cu.Company  IN ('FESFORA', 'FSEFORA', 'FFRFORA', 'FORPL', 'CERPL', 'FFRGPI', 'FFRLEX', 'IFIWIDN', 'IEEWIDN', 'TMTFI', 'TMTEE', 'FITMT', 'EETMT', 'ABKSE', 'ROROSE','STESE')
GO
PRINT N'Creating [stage].[AXL_PL_OLine]'
GO
CREATE TABLE [stage].[AXL_PL_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[NeedbyDate] [date] NULL,
[ExpDelivDate] [date] NULL,
[EDCExpDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (10) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[SalesPerson] [nvarchar] (50) NULL,
[WareHouseCode] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[BusinessChain] [nvarchar] (50) NULL,
[SalesOrderCategory] [nvarchar] (100) NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL,
[PartDesc] [nvarchar] (max) NULL,
[APV_Cost_EUR] [nvarchar] (50) NULL,
[APV_Item] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXL_PL_OLine]'
GO

CREATE VIEW [stage].[vAXL_PL_OLine] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(PartDesc))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum), '#', (IIF(TRIM([PartNum]) LIKE 'IACO%' , 'MISC. CHARGES', TRIM(PartDesc) )) )))) AS PartID
	,CONVERT(int, replace(convert(date, OrderDate), '-', '')) AS SalesOrderDateID
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine))) AS SalesOrderCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(CustNum) AS CustomerNum 
	,TRIM(OrderNum) AS [SalesOrderNum]
	,TRIM(OrderLine) AS [SalesOrderLine]
	,TRIM(OrderSubLine) AS [SalesOrderSubLine]
	,CONVERT(nvarchar(50), TRIM(OrderType)) AS [SalesOrderType]
	,TRIM([SalesOrderCategory]) AS [SalesOrderCategory]
	,OrderDate AS [SalesOrderDate]
	,NeedbyDate
	,ExpDelivDate AS [ExpDelivDate]
	,EDCExpDelivDate
	,ActualDelivDate
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,OrderQty AS [SalesOrderQty]
	,DelivQty
	,RemainingQty
	,Unit AS [UoM]
	,UnitPrice
	,UnitCost
	,LEFT(TRIM(Currency), 3) AS Currency
	,ExchangeRate
	,LEFT(TRIM(OpenRelease), 1) AS OpenRelease
	,DiscountAmount
	,DiscountPercent
	,NULL AS CashDiscOffered
	,NULL AS CashDiscUsed
	,TRIM(PartNum) AS PartNum
	,UPPER(PartDesc) AS PartDesc
	,'' AS [PartType]
	,CONVERT(nvarchar(50), PartStatus) AS PartStatus
	,TRIM(SalesPerson) AS [SalesPersonName]
	,TRIM(WareHouseCode) AS WarehouseCode
	,'' AS IndexKey
	,TRIM(SalesChannel) AS SalesChannel
	,TRIM(BusinessChain) AS [Department]
	,Res3 AS [ProjectNum] -- = FreeOfCharge: Y = yes, N = no
	,'' AS Cancellation
	,Res1 AS SORes1
	,Res2 AS SORes2
	,Res3 AS SORes3
FROM stage.AXL_PL_OLine
WHERE OrderDate >= '2015-01-01'
GO
PRINT N'Creating [dm_DEMO].[fctSalesInvoice]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [dm_DEMO].[fctSalesInvoice] AS


SELECT 
[SalesInvoiceID]
,[SalesOrderID]
,[SalesOrderNumID]
,[CustomerID]
,[CompanyID]
,[PartID]
,[WarehouseID]
,[SalesPersonNameID]
,[DepartmentID]
,[Company]
,[SalesInvoiceCode]
,[SalesInvoiceDateID]
,[ProjectID]
,[SalesPersonName]
,[CustomerNum]
,[PartNum]
,[PartType]
,[SalesOrderNum]
,[SalesOrderLine]
,[SalesOrderSubLine]
,[SalesOrderType]
,[SalesInvoiceNum]
,[SalesInvoiceLine]
,[SalesInvoiceType]
,[SalesInvoiceDate]
,[ActualDelivDate]
,[SalesInvoiceQty]
,[UoM]
,[UnitPrice]
,[UnitCost]
,[DiscountPercent]
,[DiscountAmount]
,[TotalMiscChrg]
,[Currency]
,[ExchangeRate]
,[VATAmount]
,[CreditMemo]
,[Department]
,[ProjectNum]
,[WarehouseCode]
,[CostBearerNum]
,[CostUnitNum]
,[ReturnComment]
,[ReturnNum]
,[OrderHandler]
,[SalesChannel]
,[NeedbyDate]
,[ExpDelivDate]
,[SalesOrderCode]
,[SalesOrderDateID]
,[SalesOrderDate]
,[ConfirmedDelivDate]
,[PartStatus]
,[AxInterSalesChannel]
,[DueDate]
,[LastPaymentDate]
,[SalesInvoiceStatus]
,[CashDiscountOffered]
,[CashDiscountUsed]
,[IsUpdatingStock]
,[SIRes1]
,[SIRes2]
,[SIRes3]
,[SIRes4]
,[SIRes5]
,[SIRes6]
FROM dm.FactSalesInvoice
WHERE Company  in ('DEMO')
GO
PRINT N'Creating [stage].[TRA_SE_StockBalance]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[TRA_SE_StockBalance]
(
[PartitionKey] [nvarchar] (25) NULL,
[Company] [nvarchar] (8) NULL,
[WarehouseCode] [nvarchar] (8) NULL,
[BinNum] [nvarchar] (20) NULL,
[SupplierNum] [nvarchar] (20) NULL,
[PartNum] [nvarchar] (30) NULL,
[DelivTime] [nvarchar] (60) NULL,
[LastStockTakeDate] [nvarchar] (60) NULL,
[LastStdCostCalDate] [nvarchar] (60) NULL,
[StockBalance] [nvarchar] (60) NULL,
[StockValue] [nvarchar] (60) NULL,
[Currency] [nvarchar] (3) NULL,
[SalesRemainingQty] [nvarchar] (60) NULL,
[PurchaseRemainingqty] [nvarchar] (60) NULL,
[SafetyStock] [nvarchar] (60) NULL,
[OptimalOrderQty] [nvarchar] (60) NULL,
[AvgCost] [nvarchar] (60) NULL,
[CreatedTimeStamp] [nvarchar] (60) NULL,
[ModifiedTimeStamp] [nvarchar] (60) NULL,
[IsActiveRecord] [nvarchar] (1) NULL
)
GO
PRINT N'Creating [stage].[vTRA_SE_StockBalance]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vTRA_SE_StockBalance]
	AS select 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]),'#',TRIM([WarehouseCode]))))) AS ItemWarehouseID,
	UPPER(CONCAT([Company],'#',TRIM([PartNum]),'#',TRIM([WarehouseCode]))) AS ItemWarehouseCode,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	
	,PartitionKey
	,upper(Company) as Company
	,trim(WarehouseCode) as WarehouseCode
	, trim(BinNum) as BinNum
	, trim(PartNum) as PartNum
	, cast(DelivTime as smallint) as DelivTime
	, cast(LastStockTakeDate as date) as LastStockTakeDate
	, cast(LastStdCostCalDate as date) as LastStdCostCalDate
	,cast(StockBalance as decimal (18,4)) as StockBalance 
	,cast(StockValue as decimal (18,4)) as StockValue
	,cast(SalesRemainingQty as decimal (18,4)) as SalesRemainingQty
	,cast(PurchaseRemainingqty as decimal (18,4)) as PurchaseRemainingqty
	,cast(SafetyStock as decimal (18,4)) as SafetyStock
	,cast(OptimalOrderQty as decimal (18,4)) as OptimalOrderQty
	,cast(AvgCost as decimal (18,4)) as AvgCost
	,cast(IsActiveRecord as bit) as IsActiveRecord
	,trim(Currency) as Currency
from stage.TRA_SE_StockBalance
;
GO
PRINT N'Creating [stage].[JEN_NB_SupplierAgreement]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[JEN_NB_SupplierAgreement]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[AgreementCode] [nvarchar] (50) NULL,
[AgreementDescription] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DelivTime] [nvarchar] (10) NULL,
[Currency] [nvarchar] (10) NULL,
[AgreementStart] [date] NULL,
[AgreementEnd] [date] NULL
)
GO
PRINT N'Creating [stage].[vJEN_NB_SupplierAgreement]'
GO
CREATE VIEW [stage].[vJEN_NB_SupplierAgreement] AS 
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]), '#', TRIM(AgreementCode), '#', TRIM([PartNum]), '#', TRIM([SupplierNum]), '#', TRIM([Currency]))))) AS SupplierAgreementID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum))))) AS SupplierID  
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(SupplierNum))))) AS SupplierID  
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Currency])))) AS CurrencyID --Redundant?
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,AgreementCode
	,AgreementDescription
	,[DiscountPercent]
	,MAX([UnitPrice]) AS [UnitPrice]
	--,0 AS AgreementQty
	,UPPER(TRIM([Currency])) AS Currency
	,MAX([DelivTime]) AS [DelivTime]
	,MAX(AgreementStart) AS AgreementStart
	,AgreementEnd
	--,'' AS [SupplierTerms]
	--,0	AS FulfilledQty
	--,0  AS RemainingQty
	--,''	AS UoM
	--,'' AS  SARes1
	--,'' AS  SARes2
	--,'' AS  SARes3
FROM 
	[stage].[JEN_NB_SupplierAgreement]

GROUP BY [PartitionKey], [Company], AgreementCode, AgreementDescription, PartNum, SupplierNum, [DiscountPercent],  [Currency],  AgreementEnd
--WHERE 
--	RecordType = 'D'
GO
PRINT N'Creating [stage].[JEN_NO_Customer]'
GO
CREATE TABLE [stage].[JEN_NO_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[CustomerName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (50) NULL,
[TelephoneNumber2] [nvarchar] (50) NULL,
[Email] [nvarchar] (100) NULL,
[ABCCode] [nchar] (10) NULL,
[City] [nvarchar] (50) NULL,
[ZIP] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNr] [nvarchar] (20) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (30) NULL,
[CustomerType] [nvarchar] (50) NULL,
[InactiveCustomer] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (10) NULL
)
GO
PRINT N'Creating [stage].[vJEN_NO_Customer]'
GO


CREATE VIEW [stage].[vJEN_NO_Customer] AS
--COMMENT EMPTY FIELDS // ADD TRIM() UPPER()INTO CustomerID 2022-12-23 VA
SELECT
	--CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(CustomerNum)))) AS CustomerID
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',[Company])) AS CompanyID
	,CONCAT([Company],'#',TRIM([CustomerNum])) AS CustomerCode
	,PartitionKey

	,Company
	,TRIM(CustomerNum) AS CustomerNum
	,[dbo].[ProperCase](CustomerName) AS MainCustomerName --add according to taskCard
    ,[dbo].[ProperCase](CustomerName) AS CustomerName -- can be replaced by if there is sub- Customer name
	,CASE WHEN [AddressLine1] is null OR [AddressLine1] = '' THEN [AddressLine2]  
		ELSE [AddressLine1] END AS [AddressLine1] -- added 20210204 SM
	,[AddressLine2]
	,[AddressLine3]
	,[TelephoneNumber1]	AS [TelephoneNum1]
	,[TelephoneNumber2]	AS [TelephoneNum2]
	,Email
	-- Previous logic
--	,CASE WHEN countryname like 'Sweden' AND LEFT(AddressLine3, 1) IN ('1','2','3','4','5','6','7','8','9')	THEN substring(replace([dbo].[ProperCase](AddressLine3), ' ', ''), 1,5) ELSE null end AS ZipCode
	,TRIM(SUBSTRING(AddressLine3, 1, PATINDEX('%[ ][A-ZÅÄÖ]%',AddressLine3)))	AS [ZipCode]
	--,CASE WHEN [City] = ' '	AND LEFT(AddressLine3, 1) IN ('1','2','3','4','5','6','7','8','9') THEN trim(substring(replace([dbo].[ProperCase](AddressLine3),' ',		''), 6, 100)) ELSE [dbo].[ProperCase]([City]) end AS [City]
	,[dbo].[ProperCase](TRIM(SUBSTRING(AddressLine3,PATINDEX('%[ ][A-ZÅÄÖ]%',AddressLine3 ) + 1, 100)))		AS [City]
	,IIF([State]= ' ',null,[State]) AS [State]
	,[District]	AS SalesDistrict
	,[dbo].[ProperCase](customer.CountryName) AS CountryName
	--,'' AS Division
	--,'' AS CustomerIndustry
	--,'' AS CustomerSubIndustry
	,[dbo].[ProperCase](TRIM(CONCAT (addressline1+' '+ addressline2, null))) AS AddressLine
	,CONCAT(customer.Countryname, +','+
		--CASE WHEN countryname like 'Sweden'	AND LEFT(AddressLine3, 1) IN ('1','2','3','4','5','6','7','8','9')
		--THEN trim(substring(REPLACE([dbo].[ProperCase](AddressLine3),' ', ''), 6, 100)) ELSE null end	+','+
		[dbo].[ProperCase](TRIM(SUBSTRING(AddressLine3,PATINDEX('%[ ][A-ZÅÄÖ]%',AddressLine3 ) + 1, 100))) +','+
		--CASE WHEN countryname like 'Sweden'	AND LEFT(AddressLine3, 1) IN ('1','2','3','4','5','6','7','8','9')
		--THEN substring(replace([dbo].[ProperCase](AddressLine3), ' ', ''), 1,5) ELSE null end	+','+
		TRIM(SUBSTRING(AddressLine3, 1, PATINDEX('%[ ][A-ZÅÄÖ]%',AddressLine3))) +','+
		[dbo].[ProperCase](TRIM(CONCAT (addressline1+' '+ addressline2, null)))) AS FullAddressLine
	,[dbo].[ProperCase](CustomerGroup) AS CustomerGroup
	,[dbo].[ProperCase](CustomerGroup) AS CustomerSubGroup	
	,[SalesRepCode]		AS SalesPersonCode
	,[dbo].[ProperCase](SalesPersonName) AS SalesPersonName
	--,'' AS [SalesPersonResponsible]
	,[VATRegNr]		AS VATNum
	--,'' AS OrganizationNum
	,[AccountString]	AS AccountNum
	,[InternalExternal]
	,[ABCCode] AS CustomerScore
	,CustomerType
	,GETDATE() AS ValidFrom
	,DATEADD(year,1,GETDATE()) AS ValidTo
	,case when LEN(TRIM(customer.CountryCode)) = 3 then cc.[Alpha-2 code]
	ELSE iif(TRIM(customer.CountryCode) is null or TRIM(customer.CountryCode) = '','NO',TRIM(customer.CountryCode))
	end as CountryCode
FROM [stage].[JEN_NO_Customer] as customer
	LEFT JOIN dbo.CountryCodes as cc
		ON trim(customer.CountryCode) = cc.[Alpha-3 code]
WHERE CustomerNum NOT LIKE 'INTR%' -- SM added according to validtion feedback 2021-02-09
GO
PRINT N'Creating [stage].[ARK_PI_Supplier]'
GO
CREATE TABLE [stage].[ARK_PI_Supplier]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[MainSupplierName] [nvarchar] (100) NULL,
[SupplierName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[AddressLine3] [nvarchar] (100) NULL,
[TelephoneNum] [nvarchar] (20) NULL,
[Email] [nvarchar] (200) NULL,
[City] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[Disctrict] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (100) NULL,
[Region] [nvarchar] (50) NULL,
[SupplierCategory] [nvarchar] (50) NULL,
[SupplierResponsible] [nvarchar] (50) NULL,
[AccountNum] [nvarchar] (50) NULL,
[VATNum] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (100) NULL,
[CodeOfConduct] [nvarchar] (200) NULL,
[SupplierScore] [nvarchar] (50) NULL,
[MinOrderQty] [decimal] (18, 4) NULL,
[MinOrderValue] [decimal] (18, 4) NULL,
[Website] [nvarchar] (100) NULL,
[Comments] [nvarchar] (600) NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vARK_PI_Supplier]'
GO
CREATE view [stage].[vARK_PI_Supplier] AS
--ADD TRIM()UPPER() INTO SupplierID 23-01-23 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([SupplierNum]))))) AS SupplierID
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', TRIM([SupplierNum])))) AS SupplierID
    ,UPPER(CONCAT([Company], '#', TRIM([SupplierNum]))) AS SupplierCode --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM([Company]))) AS CompanyID
	,[PartitionKey]

	,TRIM([Company]) AS Company
	,TRIM([SupplierNum]) AS [SupplierNum]
	,MainSupplierName
	,SupplierName
	,[AddressLine1]
    ,[AddressLine2]
    ,[AddressLine3]
	,[TelephoneNum]
	,[Email]
	,ZipCode
	,[City]
	,Disctrict AS [District]
	,TRIM(CountryCode) AS CountryCode
	,TRIM(CountryName) AS CountryName
	,'' CustomerNum
	,[Region]
	,[SupplierCategory]
	,[SupplierResponsible]
	,TRIM(concat ([AddressLine1]+' '+ addressline2, null)) AS AddressLine
	,TRIM(concat_ws(',', CountryName, City, IIF(ZipCode= ' ', null, ZipCode )
		,coalesce(IIF([AddressLine1]= ' ', null, [AddressLine1]), IIF([AddressLine2]= ' ', null, [AddressLine2]))
		,coalesce(IIF([AddressLine2]= ' ', null, [AddressLine2]), IIF([AddressLine3]= ' ', null, [AddressLine3])))) AS FullAddressLine
	,CONVERT([binary](32), HASHBYTES('SHA2_256', AccountNum)) AS [AccountNum] --approved by Emil T on 20200630. --Should likely be changed to Azure mask 2021-03-15 /SM
	,[VATNum]
	--,'' AS OrganizationNum
	,[InternalExternal]
	,[CodeOfConduct]
	,[SupplierScore]
	,TRY_CONVERT(decimal(18,4), [MinOrderQty]) AS [MinOrderQty]
	,[MinOrderValue]
	,[Website]
	,[Comments]
	,Res1 AS SRes1
	,Res2 AS SRes2
	,Res3 AS SRes3
FROM [stage].[ARK_PI_Supplier]
GO
PRINT N'Creating [stage].[MEN_NL_Part]'
GO
CREATE TABLE [stage].[MEN_NL_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NOT NULL,
[PartDescription] [nvarchar] (300) NULL,
[PartDescription2] [nvarchar] (300) NULL,
[PartDescription3] [nvarchar] (300) NULL,
[ProductGroup] [nvarchar] (100) NULL,
[ProductGroup2] [nvarchar] (100) NULL,
[ProductGroup3] [nvarchar] (100) NULL,
[ProductGroup4] [nvarchar] (100) NULL,
[Brand] [nvarchar] (100) NULL,
[CommodityCode] [nvarchar] (50) NULL,
[PartReplacementNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[CountryOfOrigin] [nvarchar] (100) NULL,
[NetWeight] [decimal] (18, 8) NULL,
[UoM] [nvarchar] (50) NULL,
[Material] [nvarchar] (50) NULL,
[Barcode] [nvarchar] (50) NULL,
[ReorderLevel] [decimal] (18, 8) NULL,
[PartResponsible] [nvarchar] (50) NULL,
[MainSupplier] [nvarchar] (100) NULL,
[AlternativeSupplier] [nvarchar] (50) NULL,
[StartDate] [date] NULL,
[EndDate] [date] NULL,
[PARes1] [nvarchar] (50) NULL,
[PARes2] [nvarchar] (50) NULL,
[PARes3] [nvarchar] (50) NULL,
[ProductKey] [nvarchar] (50) NULL,
[DW_TimeStamp] [date] NULL,
[ProductCOOCode] [nvarchar] (50) NULL,
[ProductIsAssembly] [bit] NULL
)
GO
PRINT N'Creating [stage].[vMEN_NL_Part]'
GO
CREATE VIEW [stage].[vMEN_NL_Part] AS
WITH CTE AS (
SELECT CASE WHEN Company = '14' THEN  CONCAT(N'MENBE',Company)
			ELSE  CONCAT(N'MENNL',Company) END AS CompanyCode		--Doing this to have the company code in nvarchar and don't need to repeat CAST(CONCAT('MEN-',Company) AS nvarchar(50)) everywhere /SM
	  ,[PartitionKey], [Company], [PartNum], [PartDescription], [PartDescription2], [PartDescription3], [ProductGroup], [ProductGroup2], [ProductGroup3], [ProductGroup4], [Brand], [CommodityCode], [PartReplacementNum], [PartStatus], [CountryOfOrigin], [NetWeight], [UoM], [Material], [Barcode], [ReorderLevel], [PartResponsible], [MainSupplier], [AlternativeSupplier], [StartDate], [EndDate], [PARes1], [PARes2], [PARes3], [ProductKey], [DW_TimeStamp], [ProductCOOCode], [ProductIsAssembly]
  FROM [stage].[MEN_NL_Part]
)


SELECT 
--NO NEED TO USED THE UPPER() IN PartID. Data from source could be the same PartNum but diferent product. the ERP is not case sensitive.
	  CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(CompanyCode,'#',PartNum))) AS PartID
	  ,CONVERT([binary](32),HASHBYTES('SHA2_256',CompanyCode)) AS CompanyID
	  ,UPPER(CONCAT(TRIM(CompanyCode),'#',TRIM([PartNum]))) AS PartCode
	  ,[PartitionKey]

      ,[CompanyCode]		AS Company
      ,[PartNum]			
	  ,[PartDescription]	AS PartName
      ,[PartDescription]
      ,[PartDescription2]
	  ,PartDescription3
	  ,MainSupplier
	  ,AlternativeSupplier
      ,[ProductGroup]
	  ,[ProductGroup2]
	  ,[ProductGroup3]
	  ,[ProductGroup4]
	  ,[Brand]
      ,[CommodityCode]
	  ,PartReplacementNum
	  ,PartStatus
      ,[CountryOfOrigin]
      ,[NetWeight]
	  ,UoM
	  ,[Material]
	  ,[Barcode]
	  ,[ReOrderLevel]
	  ,PartResponsible
	  ,[StartDate]
	  ,[EndDate]
  FROM CTE
GO
PRINT N'Creating [dm_TS].[fctFinanceBudget]'
GO



CREATE   VIEW [dm_TS].[fctFinanceBudget]	AS
SELECT fb.[BudgetID]
,fb.[CompanyID]
,fb.[AccountID]
,fb.[CostUnitID]
,fb.[CostBearerID]
,fb.[ProjectID]
,fb.[PartitionKey]
,fb.[BudgetType]
,fb.[BudgetName]
,fb.[BudgetDescription]
,fb.[Company]
,fb.[BudgetPeriod]
,fb.[BudgetPeriodDate]
,fb.[PeriodType]
,fb.[Currency]
,fb.[BudgetFinance]
,fb.[CostBearerNum]
,fb.[CostUnitNum]
,fb.[AccountNum]
,fb.[AccountGroup]
,fb.[ProjectNum]
,fb.[BRes1]
,fb.[BRes2]
,fb.[BRes3]
,fb.[ExchangeRate]
,fb.[IsActiveRecord]
FROM [dm].[FactFinanceBudget] fb
LEFT JOIN dbo.Company com ON fb.Company = com.Company
WHERE (com.BusinessArea = 'Transport Solutions' OR com.Company = 'CERPL') AND com.[Status] = 'Active'

--WHERE Company  IN ('FESFORA', 'FSEFORA', 'FFRFORA', 'FORPL', 'CERPL', 'FFRGPI', 'FFRLEX', 'IFIWIDN', 'IEEWIDN', 'TMTFI', 'TMTEE', 'FITMT', 'EETMT', 'ABKSE', 'ROROSE','STESE')
GO
PRINT N'Creating [stage].[ARK_CZ_RLS]'
GO
CREATE TABLE [stage].[ARK_CZ_RLS]
(
[PartitionKey] [varchar] (50) NOT NULL,
[email] [nvarchar] (100) NULL,
[Branch] [nvarchar] (200) NULL,
[Account] [nvarchar] (50) NULL,
[Manager] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vARK_CZ_RLS]'
GO









CREATE VIEW [stage].[vARK_CZ_RLS] AS

WITH base as (
SELECT UPPER(CONCAT('ACZARKOV', '-', TRIM(email))) AS EmailID
	,PartitionKey
	,'ACZARKOV' AS Company
	,email AS [Email]
	,LEFT(email, CHARINDEX('@', email) - 1) AS [Name]
	,COALESCE(Branch, '') AS Branch
	,COALESCE(Account,'') AS Account
	,COALESCE(Manager,'') AS Manager
FROM [stage].[ARK_CZ_RLS]
  
)

--  Testing out new logic for RLS Arkov to handle multiple RLS conditions for one user

SELECT 
	EmailID
	,PartitionKey
	,Company
	,[Email]
	,value AS [Name]
	,'Branch'	AS RLSType
	FROM base
	CROSS APPLY STRING_SPLIT([Branch], ';') 
	Where [Branch] <> ''

UNION ALL
SELECT 
	EmailID
	,PartitionKey
	,Company
	,[Email]
	,value AS [Name]
	,'Account'	AS RLSType
	FROM base
	CROSS APPLY STRING_SPLIT([Account], ';') 
	Where [Account] <> ''

UNION ALL
SELECT 
	EmailID
	,PartitionKey
	,Company
	,[Email]
	,value AS [Name]
	,'Manager'	AS RLSType
	FROM base
	CROSS APPLY STRING_SPLIT([Manager], ';') 
	Where [Manager] <> ''

UNION ALL
SELECT 
	EmailID
	,PartitionKey
	,Company
	,[Email]
	,'ALL' AS [Name]
	,'All'	AS RLSType
	FROM base
	Where [Branch] = ''  AND [Account] = '' AND [Manager] = ''
GO
PRINT N'Creating [dm_DEMO].[dimSalesOrderDistinct]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [dm_DEMO].[dimSalesOrderDistinct] AS

SELECT  sod.[CompanyID]
,sod.[Company]
,sod.[SalesOrderNumID]
,sod.[SalesOrderNum]
,sod.[CustomerID]
,sod.[Customer]
,sod.[SalesPersonName]
,sod.[SalesChannel]
,sod.[AxInterSalesChannel]
,sod.[Department]
FROM dm.DimSalesOrderDistinct sod
where sod.Company = 'DEMO'
GO
PRINT N'Creating [stage].[CER_UK_PurchaseOrder]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[CER_UK_PurchaseOrder]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [varchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[LineType] [nvarchar] (50) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[InvoiceSupplierCode] [nvarchar] (50) NULL,
[DelivCustCode] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[ItemType] [int] NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[OrderedQty] [decimal] (18, 4) NULL,
[ReceivedQty] [decimal] (18, 4) NULL,
[InvoicedQty] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[CommitedDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[ReqDelivDate] [date] NULL,
[DelivDate] [date] NULL,
[OrgReqDelivDate] [date] NULL,
[PurchaserName] [nvarchar] (50) NULL,
[RecievingNumber] [nvarchar] (50) NULL,
[LeadTime] [nvarchar] (50) NULL,
[Comments] [nvarchar] (max) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[FlagLineConfirmed] [nvarchar] (50) NULL,
[PurchaseOrderStatus] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_UK_PurchaseOrder]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vCER_UK_PurchaseOrder] AS
--change ID creation 2023-08-24 VA
SELECT
	--CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(PurchaseOrderSubLine), '#', TRIM(WarehouseCode), '#', TRIM(PurchaserName))))) AS PurchaseOrderID 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum),'#',TRIM(PurchaseOrderLine),'#',TRIM(InvoiceNum))))) AS PurchaseOrderID
		--,'#',TRIM(UPPER([PartNum])), '#', TRIM(UPPER(SupplierCode)), '#', OrderedQty
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', '')))) AS PurchaseInvoiceID --TRIM(InvoiceNum)
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(DelivCustCode))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierCode))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([CurrencyCode])))) AS CurrencyID
	,UPPER(CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(PurchaseOrderSubLine))) AS PurchaseOrderCode --, '#', TRIM(InvoiceNum)
	,PartitionKey AS PartitionKey

	,UPPER(TRIM(Company)) AS Company
	,TRIM(PurchaseOrderNum) AS PurchaseOrderNum
	,TRIM(PurchaseOrderLine) AS PurchaseOrderLine
	,TRIM(PurchaseOrderSubLine) AS PurchaseOrderSubLine
	,TRIM(OrderType) AS PurchaseOrderType
	,MAX(OrderDate) AS PurchaseOrderDate
	,MAX(PurchaseOrderStatus) AS PurchaseOrderStatus
	,MAX(OrgReqDelivDate) AS OrgReqDelivDate
	,MAX(CommitedDelivDate) AS CommittedDelivDate
	,MAX(ActualDelivDate) AS ActualDelivDate
	,MAX(ReqDelivDate) AS ReqDelivDate
	,MAX(DelivDate) AS DelivDate
	,TRIM(InvoiceNum) AS PurchaseInvoiceNum --TRIM(InvoiceNum)
	,TRIM(UPPER([PartNum])) AS PartNum
	,TRIM(UPPER(SupplierCode)) AS SupplierNum
	--,'' AS SupplierPartNum
	--,'' AS [SupplierInvoiceNum] 
	,TRIM(DelivCustCode) AS DelivCustomerNum
	--,'' AS PartStatus
	,MAX(OrderedQty) AS PurchaseOrderQty
	,SUM(ReceivedQty) AS ReceiveQty
	,SUM(InvoicedQty) AS InvoiceQty
	--,0 AS MinOrderQty
	--,'' AS UoM
	,AVG(UnitPrice) AS UnitPrice
	,AVG(DiscountPercent) AS DiscountPercent
	,SUM(DiscountAmount) AS DiscountAmount
	--,0 AS LandedCost
	,CONVERT(decimal(18,5), IIF(AVG(ExchangeRate) = 0, 0, 1/AVG(ExchangeRate))) AS ExchangeRate --should be from original currency (eg. SEK) to local (=EUR)
	,CASE WHEN CurrencyCode = '15' THEN 'EUR' WHEN CurrencyCode = '2' THEN 'USD' ELSE CurrencyCode END AS Currency
	,TRIM(PurchaserName) AS PurchaserName
	,TRIM(WarehouseCode) AS WarehouseCode
	,TRIM(RecievingNumber) AS ReceivingNum
	,IIF(LeadTime = 'na', NULL, Leadtime) AS DelivTime
	--,'' AS PurchaseChannel
	,FlagLineConfirmed AS Documents-- added afer request of CertexSE Petter Walling ticket #inc-95188 and approved by Emil T /20230207 DZ
	,MAX(TRIM(Comments)) AS Comments
	,CASE WHEN CONVERT(NVARCHAR(50),TRIM([LineType])) like '0' THEN 'Stock Item Line' WHEN CONVERT(NVARCHAR(50),TRIM([LineType])) like '1' THEN 'Non Stock Item Line' ELSE NULL END AS [LineType]
	,SUM(TotalMiscChrg) AS TotalMiscChrg
	,CONVERT(NVARCHAR(50), ItemType) AS ItemType
	,MAX(IIF(InvoiceNum != ' ', 1, 0)) AS IsClosed
	--,'' AS DaysSincePOrder
	--,'' AS PORes1
	--,'' AS PORes2
	--,'' AS PORes3
FROM 
	[stage].[CER_UK_PurchaseOrder]
WHERE 	TRIM(InvoiceNum) != 'DELETED'
GROUP BY
	PartitionKey, Company, PurchaseOrderNum, PurchaseOrderLine, PurchaseOrderSubLine, SupplierCode, DelivCustCode, LineType, PartNum, OrderType, CurrencyCode, ItemType
	,  PurchaserName, RecievingNumber, LeadTime, WarehouseCode, FlagLineConfirmed, InvoiceNum
	--OrderDate, OrgReqDelivDate, CommitedDelivDate, ActualDelivDate, DelivDate, ReqDelivDate, , UnitPrice, DiscountPercent, OrderedQty, ReceivedQty, InvoicedQty, TotalMiscChrg, ExchangeRate, InvoiceNum, Comments, PurchaseOrderStatus
GO
PRINT N'Creating [stage].[CER_FI_CustomerAgreements]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[CER_FI_CustomerAgreements]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[AgreementCode] [nvarchar] (50) NULL,
[AgreementDescription] [nvarchar] (50) NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DelivTime] [nvarchar] (10) NULL,
[Currency] [nvarchar] (10) NULL,
[AgreementStart] [date] NULL,
[AgreementEnd] [date] NULL
)
GO
PRINT N'Creating [stage].[vCER_FI_CustomerAgreement]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vCER_FI_CustomerAgreement] AS 

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM(AgreementCode), '#', TRIM([PartNum]), '#', TRIM(CustomerNum))))) AS CustomerAgreementID --CustomerAgreementID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID  
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Currency])))) AS CurrencyID
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM(CustomerNum)) AS CustomerNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,UPPER(TRIM(AgreementCode)) AS AgreementCode
	,TRIM(AgreementDescription) AS AgreementDescription
	,DiscountPercent
	,MAX([UnitPrice]) AS [UnitPrice]
	,UPPER(TRIM([Currency])) AS Currency
	,[DelivTime]
	,AgreementStart
	,AgreementEnd
	,NULL AS AgreementQty
	,NULL AS FulfilledQty
	,NULL AS RemainingQty
	--,''	AS UoM
	--,'' AS CustomerTerms
	--,'' AS CARes1
	--,'' AS CARes2
	--,'' AS CARes3
FROM 
	[stage].[CER_FI_CustomerAgreements]
GROUP BY [PartitionKey], [Company], AgreementCode, AgreementDescription, [Currency], [PartNum], CustomerNum, [DiscountPercent], [DelivTime], AgreementStart, AgreementEnd
--WHERE 
--	RecordType = 'D'
GO
PRINT N'Creating [stage].[SCM_FI_Customer]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[SCM_FI_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[CustomerName] [nvarchar] (200) NULL,
[AddressLine1] [nvarchar] (200) NULL,
[AddressLine2] [nvarchar] (200) NULL,
[AddressLine3] [nvarchar] (200) NULL,
[TelephoneNumber1] [nvarchar] (200) NULL,
[TelephoneNumber2] [nvarchar] (200) NULL,
[Email] [nvarchar] (200) NULL,
[ABCCode] [nchar] (10) NULL,
[City] [nvarchar] (100) NULL,
[ZIP] [nvarchar] (100) NULL,
[State] [nvarchar] (100) NULL,
[CountryCode] [nvarchar] (100) NULL,
[CountryName] [nvarchar] (100) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNr] [nvarchar] (20) NULL,
[OrganizationNum] [nvarchar] (100) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (200) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (200) NULL,
[CustomerType] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vSCM_FI_Customer]'
GO
CREATE VIEW [stage].[vSCM_FI_Customer] AS
--COMMENT EMPTY FIELDS // ADD UPPER()TRIM() INTO CustomerID 2022-12-21 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID
	--CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(CustomerNum)))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',[Company])) AS CompanyID
	,CONCAT([Company],'#',TRIM([CustomerNum])) AS CustomerCode
	,PartitionKey

	,Company
	,TRIM(CustomerNum) AS [CustomerNum]
	--,'' AS MainCustomerName
    ,[dbo].[ProperCase](CustomerName) AS CustomerName
	,[AddressLine1]
	,[AddressLine2]
	,[AddressLine3]
	,[TelephoneNumber1]	AS [TelephoneNum1]	
	,[TelephoneNumber2]	AS [TelephoneNum2]	
	,[Email]
	,[ZIP] AS [ZipCode]
	,CASE WHEN [City] = ' '	AND LEFT(AddressLine3, 1) IN ('1','2','3','4','5','6','7','8','9') THEN trim(substring(replace([dbo].[ProperCase](AddressLine3),' ',		''), 6, 100)) ELSE [dbo].[ProperCase]([City]) end AS [City]
	,IIF([State]= ' ',null,[State]) AS [State]
	,[District]	AS SalesDistrict
	,IIF(TRIM(CountryName) = '' OR TRIM(CountryName) IS NULL, 'FI', TRIM(CountryCode)) AS CountryCode
	,IIF(TRIM(CountryName) = '' OR TRIM(CountryName) IS NULL, 'Finland', TRIM(CountryName)) AS [CountryName]
	--,'' AS Division
	--,'' AS CustomerIndustry
	--,'' AS CustomerSubIndustry
	,[AddressLine1] AS [AddressLine]
	,CONCAT(Countryname, + ',  ' + trim([City]), + ',  ' + TRIM([Zip]), + ',  ' + trim(addressline1)) AS [FullAddressLine]
	,[dbo].[ProperCase](CustomerGroup) AS [CustomerGroup]
	,[dbo].[ProperCase](CustomerGroup) AS [CustomerSubGroup]
	,[SalesRepCode]	AS SalesPersonCode
	,[dbo].[ProperCase](SalesPersonName) AS [SalesPersonName]
	--,'' AS [SalesPersonResponsible]
	,[VATRegNr]	AS VATNum
	,OrganizationNum
	,[AccountString]	AS AccountNum
	,[InternalExternal]
	,[ABCCode] AS [CustomerScore]
	,[CustomerType]

	,GETDATE() AS [ValidFrom]
	,DATEADD(year,1,GETDATE()) AS [ValidTo]
FROM [stage].[SCM_FI_Customer]
GROUP BY
	PartitionKey, Company, CustomerNum, CustomerName, [AddressLine1], [AddressLine2], [AddressLine3], [TelephoneNumber1], [TelephoneNumber2], [Email], [ZIP], [City], [State], [District], CountryName, CountryCode, CustomerGroup, [SalesRepCode], SalesPersonName, [VATRegNr], OrganizationNum, [AccountString], [InternalExternal], [ABCCode], [CustomerType] --CustomerID, CompanyID, CustomerCode, 
GO
PRINT N'Creating [stage].[AXL_UK_SalesLedger]'
GO
CREATE TABLE [stage].[AXL_UK_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceAmount] [decimal] (18, 4) NULL,
[RemainAmount] [decimal] (18, 4) NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vAXL_UK_SalesLedger]'
GO
CREATE VIEW [stage].[vAXL_UK_SalesLedger] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(sl.Company, '#', TRIM(sl.CustNum), '#', TRIM(sl.InvoiceNum))))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(sl.Company))) AS CompanyID
	,UPPER(CONCAT(sl.Company, '#', TRIM(sl.CustNum), '#', TRIM(sl.InvoiceNum))) AS SalesLedgerCode
	,sl.PartitionKey

	,UPPER(sl.Company) AS Company
	,UPPER(TRIM(sl.CustNum)) AS CustomerNum
	,TRIM(sl.InvoiceNum) AS [SalesInvoiceNum]
	,IIF(so.InvoiceDate = '' OR so.InvoiceDate IS NULL, '1900-01-01', so.InvoiceDate) AS [SalesInvoiceDate] --
	,CONVERT(date, DueDate) AS SalesDueDate
	,CONVERT(date, LastPaymentDate) AS LastPaymentDate
	,[InvoiceAmount]
	,[RemainAmount] AS [RemainingInvoiceAmount]
	,NULL AS CashDiscOffered
	,NULL AS CashDiscUsed
	,NULL AS [ExchangeRate]
	,NULL AS [Currency]
	,NULL AS [VATAmount]
	,NULL AS [VATCode]
	,NULL AS [PayToName]
	,NULL AS [PayToCity]
	,NULL AS [PayToContact]
	,NULL AS [PaymentTerms]
	,sl.Res1 AS SLRes1
	,sl.Res2 AS SLRes2
	,sl.Res3 AS SLRes3
FROM stage.AXL_UK_SalesLedger sl
	LEFT JOIN stage.AXL_CZ_SOLine so ON TRIM(sl.InvoiceNum) = TRIM(so.InvoiceNum)
WHERE DueDate > '2015-01-01'
GROUP BY
	sl.PartitionKey, sl.Company, sl.CustNum, sl.InvoiceNum, sl.Res2, sl.Res1, sl.Res3, sl.[InvoiceAmount], sl.[RemainAmount], so.InvoiceDate, DueDate, LastPaymentDate
GO
PRINT N'Creating [stage].[ABK_SE_Warehouse]'
GO
CREATE TABLE [stage].[ABK_SE_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseID] [nvarchar] (50) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL,
[WarehouseDistrict] [nvarchar] (50) NULL,
[WarehouseAddress] [nvarchar] (100) NULL,
[WarehouseDescription] [nvarchar] (100) NULL,
[WarehouseType] [nvarchar] (50) NULL,
[WarehouseCountry] [nvarchar] (50) NULL,
[Site] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vABK_SE_Warehouse]'
GO

CREATE VIEW [stage].[vABK_SE_Warehouse] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([WarehouseCode])) AS [WarehouseCode]
	,[WarehouseName]
	,[WarehouseDistrict]
	,[WarehouseAddress]
	,[WarehouseDescription]
	,[WarehouseType]
	,[WarehouseCountry]
	,[Site] AS [WarehouseSite]
FROM [stage].[ABK_SE_Warehouse]
GO
PRINT N'Creating [dm_TS].[dimFinanceAccount]'
GO



CREATE   VIEW [dm_TS].[dimFinanceAccount] AS 
SELECT fa.[AccountID]
,fa.[AccountCode]
,fa.[CompanyID]
,fa.[PartitionKey]
,fa.[Company]
,fa.[AccountNum]
,fa.[AccountName]
,fa.[AccountName2]
,fa.[Account]
,fa.[AccountStatus]
,fa.[BalanceAccount]
,fa.[TransactionAccount]
,fa.[Assets]
,fa.[Amortization]
,fa.[Costs]
,fa.[LiabilitiesAndEquity]
,fa.[Revenue]
,fa.[CurrentAssets]
,fa.[CurrentLiabilities]
,fa.[Deprecation]
,fa.[Equity]
,fa.[Liability]
,fa.[Interest]
,fa.[Tax]
,fa.[Materials]
,fa.[Expenses]
,fa.[AccountReceivables]
,fa.[CashAndEquivalents]
,fa.[AccountType]
,fa.[AccountType2]
,fa.[AccountType3]
,fa.[AccountType4]
,fa.[AccountType5]
,fa.[AccountType6]
,fa.[AccountType7]
,fa.[AccountType8]
,fa.[AccountType9]
,fa.[AccountType10]
,fa.[AccountGroupNum]
,fa.[AccountGroupName]
,fa.[AccountGroupOrder]
,fa.[AccountGroup]
,fa.[AccountGroup2]
,fa.[AccountGroup3]
,fa.[Statement]
,fa.[StatementNum]
FROM [dm].[DimFinanceAccount] as fa
WHERE fa.Company  IN ('FESFORA', 'FSEFORA', 'FFRFORA', 'FORPL', 'CERPL', 'FFRGPI', 'FFRLEX', 'IFIWIDN', 'IEEWIDN', 'TMTFI', 'TMTEE', 'FITMT', 'EETMT', 'ABKSE', 'ROROSE','STESE')
GO
PRINT N'Creating [stage].[FOR_SE_Warehouse]'
GO
CREATE TABLE [stage].[FOR_SE_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseID] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL,
[WarehouseDistrict] [nvarchar] (50) NULL,
[WarehouseAddress] [nvarchar] (100) NULL,
[WarehouseDescription] [nvarchar] (max) NULL,
[WarehouseType] [nvarchar] (50) NULL,
[WarehouseCountry] [nvarchar] (50) NULL,
[Site] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vFOR_SE_Warehouse]'
GO
CREATE VIEW [stage].[vFOR_SE_Warehouse] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey
	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([WarehouseCode])) AS [WarehouseCode]
	,[WarehouseName]
	,[WarehouseDistrict]
	,[WarehouseAddress]
	,[WarehouseDescription]
	,[WarehouseType]
	,[WarehouseCountry]
	--,'' AS [WarehouseSite]

FROM [stage].[FOR_SE_Warehouse]
GROUP BY 
	PartitionKey,[Company],[WarehouseCode],[WarehouseName],[WarehouseDistrict],[WarehouseAddress],[WarehouseDescription],[WarehouseType],[WarehouseCountry]
GO
PRINT N'Creating [dm_DEMO].[dimSupplier]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [dm_DEMO].[dimSupplier] AS

SELECT 
 [SupplierID]
,[CompanyID]
,[Company]
,[SupplierNum]
,[MainSupplierName]
,[SupplierName]
,[Supplier]
,[TelephoneNum]
,[Email]
,[ZipCode]
,[City]
,[District]
,[CountryCode]
,[CountryName]
,[Region]
,[SupplierCategory]
,[SupplierResponsible]
,[AddressLine]
,[FullAddressLine]
,[AccountNum]
,[OrganizationNum]
,[VATNum]
,[InternalExternal]
,[CodeOfConduct]
,[CustomerNum]
,[SupplierScore]
,[MinOrderQty]
,[MinOrderValue]
,[Website]
,[Comments]
,[IsMaterialSupplier]
,[DUNS]
,[DUNS_MatchScore]
,[is_inferred]
,[is_deleted]
,[is_validCountryCode]
,[DUNS_Status]
FROM [dm].[DimSupplier]
WHERE [Company] = 'DEMO'
GO
PRINT N'Creating [stage].[TRA_SE_Warehouse]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[TRA_SE_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (10) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL,
[WarehouseAddress] [nvarchar] (100) NULL,
[WarehouseCountry] [nvarchar] (50) NULL,
[Site] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vTRA_SE_Warehouse]'
GO
CREATE VIEW [stage].[vTRA_SE_Warehouse] AS
--COMMENT EMPY FIELDS // ADD TRIM() INTO WarehouseID 2022-12-27 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	--CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(UPPER(Company), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey

	,UPPER(Company) AS Company
	,UPPER(TRIM([WarehouseCode])) AS [WarehouseCode]
	,[WarehouseName]
	--,'' AS [WarehouseDistrict]
	,[WarehouseAddress]
	--,'' AS [WarehouseDescription]
	--,'' AS [WarehouseType]
	,[WarehouseCountry]
	,[Site] AS [WarehouseSite]
FROM [stage].[TRA_SE_Warehouse]

GROUP BY 
	PartitionKey,[Company],[WarehouseCode],[WarehouseName],[WarehouseAddress],[WarehouseCountry],[Site] --,[WarehouseDistrict],[WarehouseType]
GO
PRINT N'Creating [stage].[CER_LV_SOLine]'
GO
CREATE TABLE [stage].[CER_LV_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (100) NULL,
[PartNum] [nvarchar] (50) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Site] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[Indexkey] [nvarchar] (50) NULL,
[BatchIDDel] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (max) NULL,
[ReturnNum] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[VATRate] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vCER_LV_SOLine]'
GO

CREATE VIEW [stage].[vCER_LV_SOLine] AS
--COMMENT EMPTY FIELDS // ADD TRIM()UPPER() INTO PartID,CustomerID 2022-12-21 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(Indexkey)))) AS SalesInvoiceID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', OrderNum, '#', OrderLine, '#', OrderSubLine, '#', InvoiceNum))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ), '#', InvoiceNum))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum)))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ) ))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) ) ))) AS PartID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', WarehouseCode))) AS WarehouseID
	,CONCAT(Company, '#', OrderNum, '#', OrderLine, '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) )) AS SalesOrderCode
	,CONVERT(int, replace(convert(date,InvoiceDate),'-','')) AS SalesInvoiceDateID  --Redundant?
	,CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine)) AS SalesInvoiceCode --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey

	,TRIM(Company) AS Company
	,TRIM(SalesPerson) AS SalesPersonName
	,TRIM(CustNum) AS CustomerNum
	,TRIM(PartNum) AS PartNum
	--,TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ) AS CustomerNum
	--,TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) ) AS PartNum
	,IIF(OrderSubLine = '000000', 'Main', 'Sub' ) AS PartType -- added 20210422 /DZ
	,TRIM(OrderNum) AS SalesOrderNum
	,TRIM(OrderLine) AS SalesOrderLine
	,TRIM(OrderSubLine) AS SalesOrderSubLine
	,CONVERT(nvarchar(50), OrderType) AS SalesOrderType
	,TRIM(InvoiceNum) AS SalesInvoiceNum
	,TRIM(InvoiceLine) AS SalesInvoiceLine
	--,'' AS SalesInvoiceType
	,CASE WHEN InvoiceDate = '' THEN '1901-01-01' ELSE CONVERT(date, InvoiceDate) END AS SalesInvoiceDate
	,ActualDeliveryDate AS ActualDelivDate
	,SellingShipQty AS SalesInvoiceQty
	--,'' AS UoM
	,UnitPrice
	,UnitCost
	,IIF(UnitPrice*SellingShipQty = 0, 0, DiscountAmount/UnitPrice*SellingShipQty) AS DiscountPercent --DZ added
	,DiscountAmount
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	,TotalMiscChrg
	,COALESCE(VATRate,0)/100 * (UnitPrice * SellingShipQty - DiscountAmount)  AS VATAmount
	,'EUR' AS Currency
	,1 AS ExchangeRate
	,CreditMemo
	,CASE WHEN left(OrderNum, 4) = '0004' THEN 'RFQ'
		WHEN left(OrderNum, 4) = '0005' THEN 'Webshop'
		ELSE 'Normal Order Handling' END AS SalesChannel
	--,'' AS [Department]
	,CASE WHEN WarehouseCode = '' OR WarehouseCode is NULL THEN 'Other' ELSE WarehouseCode END AS WarehouseCode
	--,NULL AS DeliveryAddress
	--,'' AS CostBearerNum
	--,'' AS CostUnitNum
	,ReturnComment
	,TRIM(ReturnNum) AS ReturnNum
	--,'' AS ProjectNum
	,Indexkey AS IndexKey
	,BatchIDDel AS SIRes1
	--,'' AS SIRes2
	--,'' AS SIRes3
FROM stage.CER_LV_SOLine
--GROUP BY
--	PartitionKey, Company, CustNum, OrderNum, OrderLine, OrderSubLine, UnitPrice, UnitCost, DiscountAmount, PartNum, SalesPerson, WarehouseCode, OrderType, InvoiceNum, InvoiceLine, InvoiceDate, ActualDeliveryDate, SellingShipQty, TotalMiscChrg, CreditMemo, IndexKey, BatchIDDel, ReturnComment, ReturnNum, VATRate
GO
PRINT N'Creating [stage].[CER_EE_Customer]'
GO
CREATE TABLE [stage].[CER_EE_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[CustomerName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (50) NULL,
[TelephoneNumber2] [nvarchar] (50) NULL,
[Email] [nvarchar] (200) NULL,
[ABCCode] [nchar] (10) NULL,
[City] [nvarchar] (50) NULL,
[ZIP] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNr] [nvarchar] (20) NULL,
[OrganizationNum] [nvarchar] (100) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (2) NULL,
[SalesPersonName] [nvarchar] (30) NULL,
[CustomerType] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_EE_Customer]'
GO


CREATE VIEW [stage].[vCER_EE_Customer] AS
--COMMENT EMPTY FIELDS // ADD UPPER()TRIM() INTO CustomerID 2022-12-15 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID
--	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(CustomerNum)))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',[Company])) AS CompanyID
	,CONCAT([Company],'#',TRIM([CustomerNum])) AS CustomerCode
	,PartitionKey

	,Company
    ,TRIM(CustomerNum) AS CustomerNum
	--,'' AS MainCustomerName
    ,[dbo].[ProperCase](CustomerName) AS CustomerName
    ,[AddressLine1]
    ,[AddressLine2]
    ,[AddressLine3]
	,[TelephoneNumber1] AS [TelephoneNum1]
	,[TelephoneNumber2] AS [TelephoneNum2]
	,left([Email],99) as [Email]
	,IIF([AddressLine3]=' ',null, SUBSTRING(AddressLine3,1,5))  AS ZipCode
	,IIF(LEN(AddressLine3) - LEN(REPLACE(AddressLine3, ' ', '')) >= 1,RIGHT(AddressLine3, CHARINDEX(' ', REVERSE(AddressLine3)) - 1),AddressLine3)  AS [City]
    ,IIF([State]= ' ',null,[State]) AS [State]
	,[District] AS SalesDistrict
	,case when LEN(trim(customer.CountryCode)) = 3 then cc.[Alpha-2 code]
		else IIF(customer.CountryName is null, 'EE', customer.CountryCode) 
	 end AS CountryCode
    ,IIF(customer.CountryName is null, 'Estonia', customer.CountryName) AS CountryName
	--,'' AS Division
	--,'' AS CustomerIndustry
	--,'' AS CustomerSubIndustry
	,TRIM(CONCAT([dbo].[ProperCase](AddressLine1),' ',[dbo].[ProperCase](AddressLine2))) AS AddressLine
	,CONCAT(CASE WHEN customer.CountryName is null THEN 'Estonia' ELSE customer.CountryName END, + ','
		+ IIF(LEN(AddressLine3) - LEN(REPLACE(AddressLine3, ' ', '')) >= 1,RIGHT(AddressLine3, CHARINDEX(' ', REVERSE(AddressLine3)) - 1),AddressLine3), + ','
		+ IIF([AddressLine3]=' ', null, SUBSTRING(AddressLine3,1,5)),  + ','
		+ [AddressLine3]
		) AS FullAddressLine
    ,[dbo].[ProperCase](CustomerGroup) AS CustomerGroup
	,[dbo].[ProperCase](CustomerGroup) AS CustomerSubGroup
    ,[SalesRepCode]		AS SalesPersonCode
	,[dbo].[ProperCase](SalesPersonName) AS SalesPersonName
	--,'' AS [SalesPersonResponsible]
    ,TRIM([VATRegNr]) AS [VATNum]
	,OrganizationNum
	,[AccountString]	AS AccountNum
	,[InternalExternal]
	,[ABCCode] AS CustomerScore
	,CustomerType
	,GETDATE() AS ValidFrom
	,DATEADD(year,1,GETDATE()) AS ValidTo

FROM [stage].[CER_EE_Customer] as customer
	LEFT JOIN dbo.CountryCodes as cc
		on cc.[Alpha-3 code] = CountryCode
GO
PRINT N'Creating [stage].[vMEN_NL_SOLine_old]'
GO




CREATE VIEW [stage].[vMEN_NL_SOLine_old] AS
/*
This query is likely overengineered. Could likely be simplified a lot by sacrificing correct UnitPrice and base things on SalesAmount.
What we try to accomplish here is to handle logic related to assembled products. The assembled products should have their SalesAmount 
*/

WITH 
--SOLine but with Company Code and ProductIsAssembly from dim part
SOLine AS ( 
	SELECT [so].[PartitionKey], [so].[Company], [so].[InvoiceHandler], [so].[CustomerNum], [so].[PartNum], [so].[PartType], [so].[SalesOrderNum], [so].[SalesOrderLine], [so].[SalesOrderSubLine], [so].[SalesOrderType], [so].[SalesInvoiceNum], [so].[SalesInvoiceLine], [so].[SalesInvoiceType], [so].[SalesInvoiceDate], [so].[ActualDelivDate], [so].[SalesInvoiceQty], [so].[UoM], [so].[UnitPrice], [so].[UnitCost], [so].[DiscountPercent], [so].[DiscountAmount], [so].[CashDiscountOffered], [so].[CashDiscountUsed], [so].[TotalMiscChrg], [so].[VATAmount], [so].[Currency], [so].[ExchangeRate], [so].[CreditMemo], [so].[SalesChanel], [so].[Department], [so].[WarehouseCode], [so].[CostBearerNum], [so].[CostUnitNum], [so].[ReturnComment], [so].[ReturnNum], [so].[ProjectNum], [so].[Indexkey], [so].[SIRes1], [so].[SIRes2], [so].[SIRes3], [so].[DebiteurKey], [so].[ProductKey], [so].[DW_TimeStamp], [so].[SalesAmount], [so].[SalesInvoiceQty_2], [so].[CustomerNumPayer], [so].[InternalSalesIdentifier], p.ProductIsAssembly, CASE WHEN so.Company = '14' THEN  CONCAT(N'MENBE',so.Company) 
			ELSE  CONCAT(N'MENNL',so.Company) END AS CompanyCode
			,MAX(CAST(p.ProductIsAssembly as int)) OVER (Partition BY so.Company,SalesInvoiceNum, SalesInvoiceLine) AS HasAssembly
			,ROW_NUMBER() OVER (Partition BY so.Company, SalesInvoiceNum, SalesInvoiceLine, so.PartNum ORDER BY SalesAmount DESC, Indexkey) AS Rownum
	FROM [stage].[MEN_NL_SOLine] so
  LEFT JOIN [stage].[MEN_NL_Part] p ON p.ProductKey = so.ProductKey
),
-- All "distinct" InvoiceLines with assembly. Used in WHERE (NOT) Exists later
ProdIsAssem AS ( 
	SELECT SalesInvoiceNum, SalesInvoiceLine, Company, MAX(ProductKey) AS ProductKey
	FROM SOLine
	WHERE ProductIsAssembly = 1
	GROUP BY SalesInvoiceNum, SalesInvoiceLine, Company
),
-- All SOLines with assemlby product
SOLineIsAssemLine AS ( 
	SELECT [PartitionKey], [Company], [InvoiceHandler], [CustomerNum], [PartNum], [PartType], [SalesOrderNum], [SalesOrderLine], [SalesOrderSubLine], [SalesOrderType], [SalesInvoiceNum], [SalesInvoiceLine], [SalesInvoiceType], [SalesInvoiceDate], [ActualDelivDate], [SalesInvoiceQty], [UoM], [UnitPrice], [UnitCost], [DiscountPercent], [DiscountAmount], [CashDiscountOffered], [CashDiscountUsed], [TotalMiscChrg], [VATAmount], [Currency], [ExchangeRate], [CreditMemo], [SalesChanel], [Department], [WarehouseCode], [CostBearerNum], [CostUnitNum], [ReturnComment], [ReturnNum], [ProjectNum], [Indexkey], [SIRes1], [SIRes2], [SIRes3], [DebiteurKey], [ProductKey], [DW_TimeStamp], [SalesAmount], [SalesInvoiceQty_2], [CustomerNumPayer], [InternalSalesIdentifier], [ProductIsAssembly], [CompanyCode], [HasAssembly], [Rownum]
	FROM SOLine
	WHERE EXISTS (SELECT 1 FROM ProdIsAssem 
				WHERE SOLine.SalesInvoiceNum =  ProdIsAssem.SalesInvoiceNum
					AND SOLine.SalesInvoiceLine = ProdIsAssem.SalesInvoiceLine
					AND SOLine.Company = ProdIsAssem.Company
					AND SOLine.ProductKey = ProdIsAssem.ProductKey
				)
),
-- All SOLines with no assembly product
SOLineWithout AS (
	SELECT [PartitionKey], [Company], [InvoiceHandler], [CustomerNum], [PartNum], [PartType], [SalesOrderNum], [SalesOrderLine], [SalesOrderSubLine], [SalesOrderType], [SalesInvoiceNum], [SalesInvoiceLine], [SalesInvoiceType], [SalesInvoiceDate], [ActualDelivDate], [SalesInvoiceQty], [UoM], [UnitPrice], [UnitCost], [DiscountPercent], [DiscountAmount], [CashDiscountOffered], [CashDiscountUsed], [TotalMiscChrg], [VATAmount], [Currency], [ExchangeRate], [CreditMemo], [SalesChanel], [Department], [WarehouseCode], [CostBearerNum], [CostUnitNum], [ReturnComment], [ReturnNum], [ProjectNum], [Indexkey], [SIRes1], [SIRes2], [SIRes3], [DebiteurKey], [ProductKey], [DW_TimeStamp], [SalesAmount], [SalesInvoiceQty_2], [CustomerNumPayer], [InternalSalesIdentifier], [ProductIsAssembly], [CompanyCode], [HasAssembly], [Rownum]
	FROM SOLine
	WHERE NOT EXISTS (SELECT 1 FROM ProdIsAssem 
				WHERE SOLine.SalesInvoiceNum =  ProdIsAssem.SalesInvoiceNum
					AND SOLine.SalesInvoiceLine = ProdIsAssem.SalesInvoiceLine
					AND SOLine.Company = ProdIsAssem.Company
				)
)

--Invoice lines with no assembly products
SELECT  
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(CompanyCode, '#', SalesInvoiceNum, '#', SalesInvoiceLine, '#', PartNum, '#', Rownum ))) AS SalesInvoiceID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(CompanyCode,'#',SalesOrderNum,'#',SalesOrderLine,'#',SalesInvoiceNum))) AS SalesOrderID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(CompanyCode, '#', TRIM(SalesInvoiceNum)))) AS SalesLedgerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(CompanyCode,'#',SalesOrderNum))) AS SalesOrderNumID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(CompanyCode,'#',CustomerNum))) AS CustomerID
    ,CONVERT([binary](32),HASHBYTES('SHA2_256',CompanyCode)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(CompanyCode, '#', PartNum))) AS PartID  
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([CompanyCode],'#',UPPER([WarehouseCode])))) AS WarehouseID
	,CONCAT(CompanyCode,'#',SalesOrderNum,'#',SalesOrderLine, '#',SalesInvoiceNum, '#' , PartNum) as SalesOrderCode 
	,CONVERT(int, replace(convert(date,SalesInvoiceDate),'-','')) AS SalesInvoiceDateID  --Redundant?
	,CONCAT(CompanyCode,'#',TRIM(SalesInvoiceNum),'#',TRIM(SalesInvoiceLine)) AS SalesInvoiceCode --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( CompanyCode,'#','') ))	AS ProjectID
	,PartitionKey

	,CompanyCode AS Company
	,InvoiceHandler AS SalesPersonName
	,TRIM(CustomerNum)	AS CustomerNum
	,TRIM(PartNum)		AS PartNum
	,PartType
	,SalesOrderNum
	,SalesOrderLine
	,SalesOrderSubLine
	,SalesOrderType
	,SalesInvoiceNum
	,SalesInvoiceLine
	,InternalSalesIdentifier AS SalesInvoiceType --Temporarily using SalesInvoiceType for this Internal flag
	,SalesInvoiceDate
	,ActualDelivDate
	,UoM
	,COALESCE(NULLIF(SalesInvoiceQty_2,0),1) AS SalesInvoiceQty
	,(SalesAmount+DiscountAmount)/COALESCE(NULLIF(SalesInvoiceQty_2,0),1) UnitPrice
	,UnitCost
	,DiscountPercent
	,DiscountAmount
	,CashDiscountOffered
	,CashDiscountUsed
	,TotalMiscChrg
	,VATAmount
	,COALESCE(UPPER(Currency),'EUR') AS Currency
	,COALESCE([ExchangeRate], 1) AS ExchangeRate
	,CreditMemo
	,SalesChanel	AS SalesChannel
	,Department
	,WarehouseCode
	,NULL AS DeliveryAddress
	,CostBearerNum
	,CostUnitNum
	,ReturnComment
	,ReturnNum
	,ProjectNum
	,IndexKey
	,ProductIsAssembly SIRes1
	,HasAssembly SIRes2
	,InternalSalesIdentifier AS SIRes3
FROM SOLineWithout
WHERE RowNum = 1

UNION ALL

SELECT CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(CompanyCode, '#', SalesInvoiceNum, '#', SalesInvoiceLine, '#', PartNum, '#', Rownum ))) AS SalesInvoiceID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(CompanyCode,'#',SalesOrderNum,'#',SalesOrderLine,'#',SalesInvoiceNum))) AS SalesOrderID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(CompanyCode, '#', TRIM(SalesInvoiceNum)))) AS SalesLedgerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(CompanyCode,'#',SalesOrderNum))) AS SalesOrderNumID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(CompanyCode,'#',CustomerNum))) AS CustomerID
    ,CONVERT([binary](32),HASHBYTES('SHA2_256',CompanyCode)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(CompanyCode, '#', PartNum))) AS PartID  
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([CompanyCode],'#',UPPER([WarehouseCode])))) AS WarehouseID
	,CONCAT(CompanyCode,'#',SalesOrderNum,'#',SalesOrderLine, '#',SalesInvoiceNum, '#' , PartNum) as SalesOrderCode 
	,CONVERT(int, replace(convert(date,SalesInvoiceDate),'-','')) AS SalesInvoiceDateID  --Redundant?
	,CONCAT(CompanyCode,'#',TRIM(SalesInvoiceNum),'#',TRIM(SalesInvoiceLine)) AS SalesInvoiceCode --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( CompanyCode,'#','') ))	AS ProjectID
	,PartitionKey

	,CompanyCode AS Company
	,InvoiceHandler AS SalesPersonName
	,TRIM(CustomerNum) AS CustomerNum
	,TRIM(PartNum) AS PartNum
	,PartType
	,SalesOrderNum
	,SalesOrderLine
	,SalesOrderSubLine
	,SalesOrderType
	,SalesInvoiceNum
	,SalesInvoiceLine
	,InternalSalesIdentifier AS SalesInvoiceType --Temporarily using SalesInvoiceType for this Internal flag
	,SalesInvoiceDate
	,ActualDelivDate
	,UoM
	,SalesInvoiceQty_2 AS SalesInvoiceQty
	,(S_Amount + D_Amount)/NULLIF(SalesInvoiceQty_2,0) AS UnitPrice
	,(C_Amount)/NULLIF(SalesInvoiceQty_2,0) AS UnitCost
	,DiscountPercent
	,DiscountAmount
	,CashDiscountOffered
	,CashDiscountUsed
	,TotalMiscChrg
	,VATAmount
	,COALESCE(UPPER(Currency),'EUR') AS Currency
	,COALESCE([ExchangeRate], 1) AS ExchangeRate
	,CreditMemo
	,SalesChanel	AS SalesChannel
	,Department
	,WarehouseCode
	,NULL AS DeliveryAddress
	,CostBearerNum
	,CostUnitNum
	,ReturnComment
	,ReturnNum
	,ProjectNum
	,IndexKey
	,ProductIsAssembly SIRes1
	,HasAssembly SIRes2
	,InternalSalesIdentifier AS  SIRes3
FROM SOLineIsAssemLine
LEFT JOIN (
	SELECT Company as c
		, SalesInvoiceNum as [sin]
		, SalesInvoiceLine as sil
		, SUM(SalesAmount) AS S_Amount
		, SUM(DiscountAmount) AS D_Amount
		, SUM(SalesInvoiceQty*UnitCost) AS C_Amount
	FROM SOLine
	GROUP BY Company, SalesInvoiceNum, SalesInvoiceLine
) SOLineAggr ON SOLineIsAssemLine.Company = SOLineAggr.c
			AND SOLineIsAssemLine.SalesInvoiceNum = SOLineAggr.[sin]
			AND SOLineIsAssemLine.SalesInvoiceLine = SOLineAggr.sil
WHERE SOLineIsAssemLine.Rownum = 1
GO
PRINT N'Creating [stage].[GPI_FR_SalesLedger]'
GO
CREATE TABLE [stage].[GPI_FR_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustomerNum] [nvarchar] (10) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL
)
GO
PRINT N'Creating [stage].[vGPI_FR_SalesLedger]'
GO
CREATE VIEW [stage].[vGPI_FR_SalesLedger] AS 
--COMMENT EMPTY FIELDS // ADD UPPER() TRIM() CustomerID 22-12-28 VA
SELECt
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustomerNum), '#', TRIM(InvoiceNum)))) AS SalesLedgerID
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustomerNum), '#', TRIM(InvoiceNum)))) AS SalesLedgerID --SOLine
	,CONCAT(Company, '#', TRIM(CustomerNum), '#', TRIM(InvoiceNum)) AS SalesLedgerCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustomerNum)))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,PartitionKey

	,Company
	,TRIM(CustomerNum) AS CustomerNum
	,TRIM(InvoiceNum) AS SalesInvoiceNum
	,CONVERT(date, InvoiceDate) AS [SalesInvoiceDate]
	,CONVERT(date, DueDate) AS SalesDueDate
	,CONVERT(date, DueDate) AS SalesLastPaymentDate -- 20210906 /DZ. before CONVERT(date, LastPaymentDate) AS LastPaymentDate, if it is NULL, the in DM stage it gives bias results -- no LatPaymentdate, work around
	--,NULL AS [InvoiceAmount]
	--,NULL AS [RemainingInvoiceAmount]
	,1 AS [ExchangeRate]
	,'EUR' AS [Currency]
	--,NULL AS [VATAmount]
	--,'' AS [VATCode]
	--,'' AS [PayToName]
	--,'' AS [PayToCity]
	--,'' AS [PayToContact]
	--,'' AS [PaymentTerms]
	--,'' AS SLRes1
	--,'' AS SLRes2
	--,'' AS SLRes3
	--,NULL			AS PaidInvoiceAmount
	,'1900-01-01' AS AccountingDate
	--,'' AS AgingPeriod
	--,'' AS AgingSort
	--,'' AS VATCodeDesc
	--,'' AS LinkToOriginalInvoice
FROM 
	stage.GPI_FR_SalesLedger
GO
PRINT N'Creating [dm_TS].[dimCustomerAgreement]'
GO






CREATE VIEW [dm_TS].[dimCustomerAgreement] AS

SELECT ca.[CompanyID]
,ca.[CustomerID]
,ca.[PartID]
,ca.[CurrencyID]
,ca.[Company]
,ca.[CustomerNum]
,ca.[PartNum]
,ca.[AgreementCode]
,ca.[AgreementDescription]
,ca.[DiscountPercent]
,ca.[UnitPrice]
,ca.[AgreementQty]
,ca.[Currency]
,ca.[DelivTime]
,ca.[AgreementStart]
,ca.[AgreementEnd]
,ca.[CustomerTerms]
,ca.[FulfilledQty]
,ca.[RemainingQty]
,ca.[UoM]
,ca.[PartitionKey]
,ca.[ExchangeRate]
FROM [dm].[DimCustomerAgreement] as ca
WHERE ca.[Company] in ('FESFORA','FSEFORA', 'FFRFORA', 'FFRGPI', 'FFRLEX', 'IFIWIDN', 'IEEWIDN', 'TMTFI', 'TMTEE', 'FITMT', 'EETMT', 'ABKSE', 'ROROSE','STESE')
GO
PRINT N'Creating [stage].[AXL_PL_SalesLedger]'
GO
CREATE TABLE [stage].[AXL_PL_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceAmount] [decimal] (18, 4) NULL,
[RemainAmount] [decimal] (18, 4) NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vAXL_PL_SalesLedger]'
GO
CREATE VIEW [stage].[vAXL_PL_SalesLedger] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(sl.Company, '#', TRIM(sl.CustNum), '#', TRIM(sl.InvoiceNum))))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(sl.Company))) AS CompanyID
	,UPPER(CONCAT(sl.Company, '#', TRIM(sl.CustNum), '#', TRIM(sl.InvoiceNum))) AS SalesLedgerCode
	,sl.PartitionKey

	,UPPER(sl.Company) AS Company
	,UPPER(TRIM(sl.CustNum)) AS CustomerNum
	,TRIM(sl.InvoiceNum) AS [SalesInvoiceNum]
	,IIF(so.InvoiceDate = '' OR so.InvoiceDate IS NULL, '1900-01-01', so.InvoiceDate) AS [SalesInvoiceDate] --
	,CONVERT(date, DueDate) AS SalesDueDate
	,CONVERT(date, LastPaymentDate) AS LastPaymentDate
	,[InvoiceAmount]
	,[RemainAmount] AS [RemainingInvoiceAmount]
	,NULL AS CashDiscOffered
	,NULL AS CashDiscUsed
	,NULL AS [ExchangeRate]
	,NULL AS [Currency]
	,NULL AS [VATAmount]
	,NULL AS [VATCode]
	,NULL AS [PayToName]
	,NULL AS [PayToCity]
	,NULL AS [PayToContact]
	,NULL AS [PaymentTerms]
	,sl.Res1 AS SLRes1
	,sl.Res2 AS SLRes2
	,sl.Res3 AS SLRes3
FROM stage.AXL_PL_SalesLedger sl
	LEFT JOIN stage.AXL_CZ_SOLine so ON TRIM(sl.InvoiceNum) = TRIM(so.InvoiceNum)
WHERE DueDate > '2015-01-01'
GROUP BY
	sl.PartitionKey, sl.Company, sl.CustNum, sl.InvoiceNum, sl.Res2, sl.Res1, sl.Res3, sl.[InvoiceAmount], sl.[RemainAmount], so.InvoiceDate, DueDate, LastPaymentDate
GO
PRINT N'Creating [dm_DEMO].[fctPurchaseInvoice]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [dm_DEMO].[fctPurchaseInvoice] AS


SELECT 

 pinv.[PurchaseInvoiceID]
,pinv.[CompanyID]
,pinv.[SupplierID]
,pinv.[PartID]
,pinv.[WarehouseID]
,pinv.[PurchaseOrderNumID]
,pinv.[CurrencyID]
,pinv.[PurchaseInvoiceDateID]
,pinv.[Company]
,pinv.[PurchaseOrderNum]
,pinv.[PurchaseOrderLine]
,pinv.[PurchaseOrderType]
,pinv.[PurchaseInvoiceNum]
,pinv.[PurchaseInvoiceLine]
,pinv.[PurchaseInvoiceType]
,pinv.[PurchaseInvoiceDate]
,pinv.[ActualDelivDate]
,pinv.[SupplierNum]
,pinv.[PartNum]
,pinv.[PurchaseInvoiceQty]
,pinv.[UoM]
,pinv.[UnitPrice]
,pinv.[DiscountPercent]
,pinv.[DiscountAmount]
,pinv.[TotalMiscChrg]
,pinv.[VATAmount]
,pinv.[Currency]
,pinv.[ExchangeRate]
,pinv.[CreditMemo]
,pinv.[PurchaserName]
,pinv.[WarehouseCode]
,pinv.[PurchaseChannel]
,pinv.[Comment]
,pinv.[PIRes1]
,pinv.[PIRes2]
,pinv.[PIRes3]
,pinv.[PIRes4]
,pinv.[PurchaseInvoiceAmountOC]
,pinv.[PurchaseOrderDate]
,pinv.[ReqDelivDate]
,pinv.[OrgReqDelivDate]
,pinv.[CommittedDelivDate]
,pinv.[OrgCommittedDelivDate]
,pinv.[DueDate]
,pinv.[PaymentDate]
,pinv.[InvoiceStatus]

FROM dm.FactPurchaseInvoice pinv

WHERE Company  in ('DEMO')
GO
PRINT N'Creating [stage].[AXL_DK_SOLine]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[AXL_DK_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[InvoiceType] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (22, 8) NULL,
[UnitCost] [decimal] (22, 8) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[VAT] [decimal] (18, 4) NULL,
[CashDiscountOffered] [decimal] (18, 4) NULL,
[CashDiscountUsed] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OrderType] [nvarchar] (50) NULL,
[SalesChannel] [varchar] (10) NULL,
[BusinessChain] [varchar] (10) NULL,
[Res1] [varchar] (100) NULL,
[Res2] [varchar] (100) NULL,
[Res3] [varchar] (100) NULL,
[PartDesc] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[vAXL_DK_SOLine]'
GO
CREATE VIEW [stage].[vAXL_DK_SOLine] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine), '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(PartNum), '#', TRIM(PartDesc))))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(PartDesc))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(InvoiceNum))))) AS SalesLedgerID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum), '#', (IIF(TRIM([PartNum]) LIKE 'IACO%' , 'MISC. CHARGES', TRIM([PartDesc]))))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT(int, IIF(InvoiceDate = '', 19900101, replace(convert(date, InvoiceDate), '-', ''))) AS SalesInvoiceDateID
	,UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine))) AS SalesInvoiceCode
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine))) AS SalesOrderCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(SalesPerson) AS SalesPersonName
	,TRIM(CustNum) AS [CustomerNum]
	,TRIM(PartNum) AS PartNum
	,UPPER(PartDesc) AS PartDesc
	,'' AS [PartType]
	,TRIM(OrderNum) AS [SalesOrderNum]
	,CAST(OrderLine AS text) AS [SalesOrderLine]
	,TRIM(OrderSubLine) AS [SalesOrderSubLine]
	,TRIM(OrderType) AS [SalesOrderType]
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,TRIM(InvoiceLine) AS [SalesInvoiceLine]
	,TRIM(InvoiceType) AS [SalesInvoiceType]
	,CASE WHEN InvoiceDate = '' THEN '1900-01-01' ELSE CONVERT(date, InvoiceDate) END AS [SalesInvoiceDate]
	,ActualDeliveryDate AS [ActualDelivDate]
	,SellingShipQty AS [SalesInvoiceQty]
	,TRIM(Unit) AS [UoM]
	,UnitPrice
	,UnitCost
	,DiscountAmount
	,IIF(UnitPrice*SellingShipQty = 0, 0, DiscountAmount/UnitPrice*SellingShipQty) AS DiscountPercent
	,CONVERT(decimal(18,4), CashDiscountOffered) AS [CashDiscOffered] 
	,CONVERT(decimal(18,4), CashDiscountUsed) AS [CashDiscUsed] 
	,TotalMiscChrg
	,VAT AS [VATAmount]
	,Currency
	,ExchangeRate
	,TRIM(CreditMemo) AS CreditMemo
	,TRIM([SalesChannel]) AS [SalesChannel]
	,TRIM([BusinessChain]) AS [Department]
	,TRIM(WarehouseCode) AS WarehouseCode
	,NULL AS [CostBearerNum]
	,NULL AS [CostUnitNum]
	,NULL AS [ReturnComment]
	,NULL AS [ReturnNum]
	,NULL AS [ProjectNum]
	,'' AS [IndexKey]
	,Res1 AS SIRes1
	,Res2 AS SIRes2
	,Res3 AS SIRes3
FROM stage.AXL_DK_SOLine


	--,CASE WHEN OrderType = 'MD' THEN 1 
	--		WHEN OrderType = 'MT' THEN 2
	--		WHEN OrderType = 'MR' THEN 3
	--		WHEN OrderType = 'IV' THEN 4
	--		WHEN OrderType = 'Misc. Charges' THEN 5 --added after Ulf changes in the night /DZ
	--	ELSE OrderType END AS [SalesOrderType]

--GROUP BY
--	PartitionKey, Company, SalesPerson, CustNum, PartNum, PartDesc, OrderNum, OrderLine, OrderSubLine,OrderType, InvoiceNum, InvoiceLine, InvoiceDate, SellingShipQty, UnitPrice, UnitCost, DiscountAmount, TotalMiscChrg, WarehouseCode, CreditMemo, ActualDeliveryDate, Currency, ExchangeRate, InvoiceType, Res1, Res2, Res3, Unit, VAT, SalesChannel, BusinessChain, CashDiscountOffered, CashDiscountUsed
GO
PRINT N'Creating [stage].[FOR_PL_PurchaseLedger]'
GO
CREATE TABLE [stage].[FOR_PL_PurchaseLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (5) NULL,
[SupplierNum] [nvarchar] (15) NULL,
[PurchaseInvoiceNum] [nvarchar] (60) NULL,
[PurchaseInvoiceDate] [nvarchar] (50) NULL,
[InvoiceAmount] [nvarchar] (60) NULL,
[Currency] [nvarchar] (3) NULL,
[ExchangeRate] [nvarchar] (60) NULL,
[SupplierInvoiceNum] [nvarchar] (100) NULL,
[PurchaseDueDate] [nvarchar] (50) NULL,
[PurchaseLastPaymentDate] [nvarchar] (60) NULL,
[PaidInvoiceAmount] [nvarchar] (60) NULL,
[RemainingInvoiceAmount] [nvarchar] (60) NULL,
[VATAmount] [nvarchar] (15) NULL,
[PaymentTerms] [nvarchar] (60) NULL,
[IsInvoiceCLosed] [nvarchar] (2) NULL,
[CreatedTimeStamp] [nvarchar] (60) NULL,
[ModifiedTimeStamp] [nvarchar] (60) NULL
)
GO
PRINT N'Creating [stage].[vFOR_PL_PurchaseLedger]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vFOR_PL_PurchaseLedger]
	AS select 
 CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum))))) AS PurchaseLedgerID
 ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Company])))) AS CompanyID
 ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([SupplierNum]))))) AS SupplierID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(PurchaseOrderNum)))) AS PurchaseOrderNumID
, PartitionKey
, Company
, SupplierNum
, PurchaseInvoiceNum
, cast( PurchaseInvoiceDate	    as date) as PurchaseInvoiceDate
, cast( PurchaseLastPaymentDate as date) as PurchaseLastPaymentDate
, cast( PurchaseDueDate		    as date) as PurchaseDueDate
, cast(InvoiceAmount			 as decimal(18,4)) as InvoiceAmount
, cast(ExchangeRate				 as decimal(18,4)) as ExchangeRate
, cast(PaidInvoiceAmount		 as decimal(18,4)) as PaidInvoiceAmount
, cast(RemainingInvoiceAmount	 as decimal(18,4)) as RemainingInvoiceAmount
, cast(VATAmount				 as decimal(18,4)) as VATAmount

, Currency

, SupplierInvoiceNum
, cast(PaymentTerms as smallint) as PaymentTerms
, iif(trim(IsInvoiceCLosed) = 'C',1,0) as IsInvoiceClosed
-- , CreatedTimeStamp
-- , ModifiedTimeStamp
from stage.FOR_PL_PurchaseLedger
GO
PRINT N'Creating [stage].[SCM_FI_Supplier]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[SCM_FI_Supplier]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[SupplierName] [nvarchar] (100) NULL,
[Addressline1] [nvarchar] (100) NULL,
[Addressline2] [nvarchar] (100) NULL,
[Addressline3] [nvarchar] (100) NULL,
[City] [nvarchar] (50) NULL,
[ZIP] [nvarchar] (50) NULL,
[Region] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (100) NULL,
[SupplierCategory] [nvarchar] (50) NULL,
[Reference] [nvarchar] (100) NULL,
[BankAccountNum] [nvarchar] (50) NULL,
[VATNum] [nvarchar] (50) NULL,
[TelephoneNum] [nvarchar] (20) NULL,
[Email] [nvarchar] (100) NULL,
[Website] [nvarchar] (100) NULL,
[CodeOfConduct] [nvarchar] (2) NULL,
[MinOrderQty] [decimal] (18, 4) NULL,
[Comment] [nvarchar] (max) NULL,
[InternalName] [nvarchar] (100) NULL,
[SupplierABC] [nvarchar] (10) NULL,
[CustomerCode] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vSCM_FI_Supplier]'
GO
CREATE VIEW [stage].[vSCM_FI_Supplier] AS
--ADD UPPER() TRIM() INTO SupplierID 23-01-24 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([SupplierNum]))))) AS SupplierID
--	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', TRIM([SupplierNum])))) AS SupplierID
    ,CONCAT([Company], '#', TRIM([SupplierNum])) AS SupplierCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [Company])) AS CompanyID
	,[PartitionKey]

	,[Company]
	,TRIM([SupplierNum]) AS SupplierNum
	,[dbo].[ProperCase](TRIM(SupplierName)) AS SupplierName
	,'' AS [MainSupplierName]
	,TRIM([AddressLine1]) AS AddressLine1
    ,TRIM([AddressLine2]) AS AddressLine2
    ,TRIM([AddressLine3]) AS AddressLine3
	,[TelephoneNum]
	,[Email]
	,TRIM([ZIP]) AS [ZipCode]
	,TRIM([City]) AS City
	,'' AS District
	,IIF(TRIM(CountryName) = '' OR TRIM(CountryName) IS NULL, 'FI', TRIM(CountryCode)) AS CountryCode
	,IIF(TRIM(CountryName) = '' OR TRIM(CountryName) IS NULL, 'Finland', TRIM(CountryName)) AS [CountryName]
	,[Region] 
	,TRIM([SupplierCategory]) AS SupplierCategory
 	,TRIM([Reference]) AS SupplierResponsible

	,[dbo].[ProperCase](TRIM(concat (addressline1+' '+ addressline2, null))) AS AddressLine
	,[dbo].[ProperCase](TRIM(concat_ws(',',coalesce([dbo].[ProperCase](CountryName),null),IIF(City= ' ',null,trim(substring(replace([dbo].[ProperCase](AddressLine3),' ', ''), 6, 100))),IIF(ZIP= ' ',null,[dbo].[udf_GetNumeric]([Addressline3]))
		,coalesce(IIF([addressline1]= ' ',null,[addressline1]),IIF([addressline2]= ' ',null,[addressline2]))
		,coalesce(IIF([addressline2]= ' ',null,[addressline2]),IIF([addressline3]= ' ',null,[addressline3]))))) AS FullAddressLine
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [BankAccountNum])) AS [AccountNum] --required by Ian Morgan & approved by Emil T on 20200630
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [VATNum])) AS [VATNum]
	,'' AS OrganizationNum
	,[InternalName] AS InternalExternal
	,[CodeOfConduct]
	,[CustomerCode] AS CustomerNum
	,TRIM([SupplierABC]) AS [SupplierScore]
	,[MinOrderQty]
	,NULL AS [MinOrderValue] 
	,[Website]
	,TRIM([Comment]) AS Comments
	--,'' AS [SRes1]
	--,'' AS [SRes2]
	--,'' AS [SRes3]
	,1 as IsMaterialSupplier -- all invoicing is from material supplier according to Philip Eliasson 2023-05-09 SB
FROM [stage].[SCM_FI_Supplier]
GO
PRINT N'Creating [stage].[SKS_FI_SalesLedger]'
GO
CREATE TABLE [stage].[SKS_FI_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[MANDT] [nvarchar] (3) NOT NULL,
[VKORG] [nvarchar] (4) NULL,
[INVOICENUM] [nvarchar] (50) NULL,
[COMPANY] [nvarchar] (8) NOT NULL,
[CUSTOMERNUM] [nvarchar] (50) NULL,
[DUEDATE] [nvarchar] (8) NULL,
[LASTPAYMENTDATE] [nvarchar] (8) NULL,
[INVOICEDATE] [nvarchar] (8) NULL
)
GO
PRINT N'Creating [stage].[vSKS_FI_SalesLedger]'
GO

CREATE VIEW [stage].[vSKS_FI_SalesLedger] AS
--COMMENT EMPTY FIELDS /ADD UPPER()TRIM()INTO CustomerID 2022-12-16 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([COMPANY]), '#', TRIM(CUSTOMERNUM), '#',TRIM([INVOICENUM]), '#', TRIM(MANDT), '#', TRIM([VKORG]))))) AS SalesLedgerID
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([COMPANY], '#', TRIM(IIF(CUSTOMERNUM IS NULL OR CUSTOMERNUM = '', 'MISSINGCUSTOMER', CUSTOMERNUM)), '#', [INVOICENUM], '#', TRIM(MANDT), '#', TRIM([VKORG])))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [Company])) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([COMPANY]), '#', TRIM(CUSTOMERNUM), '#', TRIM([VKORG]))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([COMPANY], '#', TRIM(IIF(CUSTOMERNUM IS NULL OR CUSTOMERNUM = '', 'MISSINGCUSTOMER', CUSTOMERNUM)), '#', TRIM([VKORG])))) AS CustomerID
	,CONCAT(Company, '#', TRIM(CUSTOMERNUM), '#', InvoiceNum) AS SalesLedgerCode
	,PartitionKey

	--,CASE WHEN COMPANY = 'SKSSWE' THEN 'JSESKSSW' ELSE COMPANY END AS Company
	,Company
	,TRIM(CUSTOMERNUM) AS CustomerNum
	,[INVOICENUM] AS SalesInvoiceNum
	,INVOICEDATE AS SalesInvoiceDate
	,CASE WHEN [DUEDATE] = '00000000' THEN '19000101' ELSE CAST([DUEDATE] AS Date) END AS SalesDueDate
	,CASE WHEN [LASTPAYMENTDATE] = '00000000' THEN '19000101' ELSE CAST([LASTPAYMENTDATE] AS Date) END AS SalesLastPaymentDate
	--,NULL AS InvoiceAmount
	--,NULL AS PaidInvoiceAmount
	--,NULL AS RemainingInvoiceAmount
	,1 AS ExchangeRate
	,'EUR' AS Currency
	--,NULL AS VATAmount
	--,'' AS VATCode
	--,'' AS PayToName
	--,'' AS PayToCity
	--,'' AS PayToContact
	--,'' AS PaymentTerms
	,TRIM(MANDT) AS SLRes1
	,TRIM([VKORG]) AS SLRes2
	--,'' AS SLRes3
	,'1900-01-01' AS AccountingDate
	--,'' AS AgingPeriod
	--,'' AS AgingSort
	--,'' AS VATCodeDesc
	--,'' AS LinkToOriginalInvoice
FROM 
	stage.SKS_FI_SalesLedger AS SL
WHERE VKORG NOT IN ('FI00','SE10')
GO
PRINT N'Creating [stage].[AXL_ES_SOLine]'
GO
CREATE TABLE [stage].[AXL_ES_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[InvoiceType] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (22, 8) NULL,
[UnitCost] [decimal] (22, 8) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[VAT] [decimal] (18, 4) NULL,
[CashDiscountOffered] [decimal] (18, 4) NULL,
[CashDiscountUsed] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OrderType] [nvarchar] (50) NULL,
[SalesChannel] [varchar] (10) NULL,
[BusinessChain] [varchar] (10) NULL,
[Res1] [varchar] (100) NULL,
[Res2] [varchar] (100) NULL,
[Res3] [varchar] (100) NULL,
[PartDesc] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[vAXL_ES_SOLine]'
GO
CREATE VIEW [stage].[vAXL_ES_SOLine] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine), '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(PartNum), '#', TRIM(PartDesc))))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(PartDesc))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(InvoiceNum))))) AS SalesLedgerID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum), '#', (IIF(TRIM([PartNum]) LIKE 'IACO%' , 'MISC. CHARGES', TRIM([PartDesc]))))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT(int, IIF(InvoiceDate = '', 19900101, replace(convert(date, InvoiceDate), '-', ''))) AS SalesInvoiceDateID
	,UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine))) AS SalesInvoiceCode
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine))) AS SalesOrderCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(SalesPerson) AS SalesPersonName
	,TRIM(CustNum) AS [CustomerNum]
	,TRIM(PartNum) AS PartNum
	,UPPER(PartDesc) AS PartDesc
	,'' AS [PartType]
	,TRIM(OrderNum) AS [SalesOrderNum]
	,CAST(OrderLine AS text) AS [SalesOrderLine]
	,TRIM(OrderSubLine) AS [SalesOrderSubLine]
	,TRIM(OrderType) AS [SalesOrderType]
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,TRIM(InvoiceLine) AS [SalesInvoiceLine]
	,TRIM(InvoiceType) AS [SalesInvoiceType]
	,CASE WHEN InvoiceDate = '' THEN '1900-01-01' ELSE CONVERT(date, InvoiceDate) END AS [SalesInvoiceDate]
	,ActualDeliveryDate AS [ActualDelivDate]
	,SellingShipQty AS [SalesInvoiceQty]
	,TRIM(Unit) AS [UoM]
	,UnitPrice
	,UnitCost
	,DiscountAmount
	,IIF(UnitPrice*SellingShipQty = 0, 0, DiscountAmount/UnitPrice*SellingShipQty) AS DiscountPercent
	,CONVERT(decimal(18,4), CashDiscountOffered) AS [CashDiscOffered] 
	,CONVERT(decimal(18,4), CashDiscountUsed) AS [CashDiscUsed] 
	,TotalMiscChrg
	,VAT AS [VATAmount]
	,Currency
	,ExchangeRate
	,TRIM(CreditMemo) AS CreditMemo
	,TRIM([SalesChannel]) AS [SalesChannel]
	,TRIM([BusinessChain]) AS [Department]
	,TRIM(WarehouseCode) AS WarehouseCode
	,NULL AS [CostBearerNum]
	,NULL AS [CostUnitNum]
	,NULL AS [ReturnComment]
	,NULL AS [ReturnNum]
	,NULL AS [ProjectNum]
	,'' AS [IndexKey]
	,Res1 AS SIRes1
	,Res2 AS SIRes2
	,Res3 AS SIRes3
FROM stage.AXL_ES_SOLine


	--,CASE WHEN OrderType = 'MD' THEN 1 
	--		WHEN OrderType = 'MT' THEN 2
	--		WHEN OrderType = 'MR' THEN 3
	--		WHEN OrderType = 'IV' THEN 4
	--		WHEN OrderType = 'Misc. Charges' THEN 5 --added after Ulf changes in the night /DZ
	--	ELSE OrderType END AS [SalesOrderType]

--GROUP BY
--	PartitionKey, Company, SalesPerson, CustNum, PartNum, PartDesc, OrderNum, OrderLine, OrderSubLine,OrderType, InvoiceNum, InvoiceLine, InvoiceDate, SellingShipQty, UnitPrice, UnitCost, DiscountAmount, TotalMiscChrg, WarehouseCode, CreditMemo, ActualDeliveryDate, Currency, ExchangeRate, InvoiceType, Res1, Res2, Res3, Unit, VAT, SalesChannel, BusinessChain, CashDiscountOffered, CashDiscountUsed
GO
PRINT N'Creating [dm_TS].[dimCostBearer]'
GO

CREATE   VIEW [dm_TS].[dimCostBearer] AS 
SELECT cb.[CostBearerID]
,cb.[PartitionKey]
,cb.[CostBearerCode]
,cb.[CompanyID]
,cb.[Company]
,cb.[CostBearerNum]
,cb.[CostBearerName]
,cb.[CostBearerStatus]
,cb.[CostBearerGroup]
,cb.[CostBearerGroup2]
,cb.[CostBearerGroup3]
FROM [dm].[DimCostBearer] as cb
WHERE cb.Company  IN ('FESFORA', 'FSEFORA', 'FFRFORA', 'FORPL', 'CERPL', 'FFRGPI', 'FFRLEX', 'IFIWIDN', 'IEEWIDN', 'TMTFI', 'TMTEE', 'FITMT', 'EETMT', 'ABKSE', 'ROROSE','STESE')
GO
PRINT N'Creating [stage].[WID_FI_PurchaseOrder]'
GO
CREATE TABLE [stage].[WID_FI_PurchaseOrder]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [varchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[LineType] [nvarchar] (50) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[InvoiceSupplierCode] [nvarchar] (50) NULL,
[DelivCustCode] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[ItemType] [nvarchar] (50) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[OrderedQty] [decimal] (18, 4) NULL,
[ReceivedQty] [decimal] (18, 4) NULL,
[InvoicedQty] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[CommittedDelivDate] [date] NULL,
[OriginalCommittedDD] [date] NULL,
[ActualDelivDate] [date] NULL,
[ReqDelivDate] [date] NULL,
[DelivDate] [date] NULL,
[OrgReqDelivDate] [date] NULL,
[PurchaserName] [nvarchar] (50) NULL,
[RecievingNumber] [nvarchar] (50) NULL,
[LeadTime] [nvarchar] (50) NULL,
[Comments] [nvarchar] (max) NULL,
[WarehouseCode] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vWID_FI_PurchaseOrder]'
GO


CREATE VIEW [stage].[vWID_FI_PurchaseOrder] AS
--COMMENT EMPTY FIELDS/ ADD UPPER()TRIM() INTO PartID 2022-12-15 VA
--ADD TRIM() UPPER() INTO SupplierID 23-01-24 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(PartNum), '#', TRIM(InvoiceNum)))) AS PurchaseOrderID 

	,CONCAT(Company,'#',TRIM(SupplierCode),'#',TRIM(PurchaseOrderNum), '#', TRIM(PartNum), '#', TRIM(InvoiceNum)) AS PurchaseOrderCode

	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(PurchaseOrderNum)))) AS PurchaseOrderNumID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(InvoiceNum)))) AS PurchaseInvoiceID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',TRIM([Currency]))) AS CurrencyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(DelivCustCode))))) AS CustomerID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(DelivCustCode)))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierCode))))) AS SupplierID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(SupplierCode)))) AS SupplierID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(PartNum)))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',TRIM([Company]))) AS CompanyID
	,PartitionKey

	,Company
	,TRIM(PurchaseOrderNum) AS PurchaseOrderNum
	,TRIM(PurchaseOrderLine) AS PurchaseOrderLine
	,TRIM(PurchaseOrderSubLine) AS PurchaseOrderSubLine
	,TRIM(OrderType) AS PurchaseOrderType
	,OrderDate AS PurchaseOrderDate
	,CASE WHEN InvoiceNum IS NULL or InvoiceNum = '' THEN 'Open' ELSE 'Closed' END AS PurchaseOrderStatus --DZ 20210806
	,OriginalCommittedDD AS OrgReqDelivDate
	,CommittedDelivDate
	,ActualDelivDate
	,ReqDelivDate
	,TRIM(InvoiceNum) AS PurchaseInvoiceNum
	,TRIM(PartNum) AS PartNum
	,TRIM(SupplierCode) AS SupplierNum
	,TRIM(PartNum) AS SupplierPartNum
	,TRIM(InvoiceNum) AS SupplierInvoiceNum
	,TRIM(DelivCustCode) AS DelivCustomerNum
	--,NULL AS PartStatus
	,OrderedQty AS PurchaseOrderQty
	,ReceivedQty AS ReceiveQty
	,InvoicedQty AS InvoiceQty
	--,NULL AS MinOrderQty
	--,'' AS UoM
	,UnitPrice
	,DiscountPercent
	,InvoicedQty*UnitPrice*DiscountPercent/100 AS DiscountAmount
	--,NULL AS LandedCost
	,ExchangeRate
	,CASE WHEN Currency = '15' THEN 'EUR' WHEN Currency = '2' THEN 'USD' ELSE Currency END AS Currency
	,TRIM(PurchaserName) AS PurchaserName
	,TRIM(WarehouseCode) AS WarehouseCode
	,RecievingNumber AS ReceivingNum
	,LeadTime AS DelivTime
	--,NULL AS PurchaseChannel
	,CONVERT(NVARCHAR(50),ItemType) AS Documents
	,TRIM(Comments) AS Comments
--	,DelivDate
--	,CASE WHEN CONVERT(NVARCHAR(50),TRIM([LineType])) like '0' THEN 'Stock Item Line' WHEN CONVERT(NVARCHAR(50),TRIM([LineType])) like '1' THEN 'Non Stock Item Line' ELSE NULL END AS [LineType]
	--,'' AS PORes1
	--,'' AS PORes2
	--,'' AS PORes3
FROM 
	[stage].[WID_FI_PurchaseOrder]
	
--GROUP BY
--	PartitionKey, Company, PurchaseOrderNum, PurchaseOrderLine, PurchaseOrderSubLine, SupplierCode, DelivCustCode, LineType, InvoiceNum, PartNum, OrderType, UnitPrice, DiscountPercent, OrderedQty, ReceivedQty, InvoicedQty, TotalMiscChrg, ExchangeRate, Currency, ItemType, OrderDate, OrgReqDelivDate, CommittedDelivDate, ActualDelivDate, DelivDate, ReqDelivDate, PurchaserName, RecievingNumber, LeadTime, Comments, WarehouseCode, InvoiceSupplierCode
GO
PRINT N'Creating [dm_DEMO].[dimCustomer]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [dm_DEMO].[dimCustomer] AS

SELECT 
	   [CustomerID]
      ,[CompanyID]
      ,[Company]
      ,[CustomerNum]
      ,[MainCustomerName]
      ,[CustomerName]
      ,[Customer]
      ,[AddressLine1]
      ,[AddressLine2]
      ,[AddressLine3]
      ,[TelephoneNum1]
      ,[TelephoneNum2]
      ,[Email]
      ,[ZipCode]
      ,[City]
      ,[State]
      ,[SalesDistrict]
      ,[CountryCode]
      ,[CountryName]
      ,[Division]
      ,[CustomerIndustry]
      ,[CustomerSubIndustry]
      ,[AddressLine]
      ,[FullAddressLine]
      ,[CustomerGroup]
      ,[CustomerSubGroup]
      ,[SalesPersonCode]
      ,[SalesPersonName]
      ,[SalesPersonResponsible]
      ,[VATNum]
      ,[OrganizationNum]
      ,[AccountNum]
      ,[InternalExternal]
      ,[CustomerScore]
      ,[CustomerType]
      ,[CustomerCode]
      ,[CustomerStatus]
      ,[DUNS]
      ,[DUNS_MatchScore]
      ,[CRes1]
      ,[CRes2]
      ,[CRes3]
      ,[is_inferred]
      ,[is_deleted]
      ,[is_validCountryCode]
      ,[DUNS_Status]

FROM [dm].[DimCustomer] /*temp putting (CERPL) Certex PL here such that they see the data in same company*/
WHERE [Company] in ('DEMO')
GO
PRINT N'Creating [stage].[CER_DK_SalesLedger]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[CER_DK_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL
)
GO
PRINT N'Creating [stage].[vCER_DK_SalesLedger]'
GO

CREATE VIEW [stage].[vCER_DK_SalesLedger] AS
--COMMENT EMPTY FIELDS / ADJUST CustomerID and Groupby 2022-12-14
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ), '#', TRIM(InvoiceNum))))) AS SalesLedgerID 
	,UPPER(CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ), '#', TRIM(InvoiceNum))) AS SalesLedgerCode    
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	,PartitionKey

	,UPPER(Company) AS Company
	,UPPER(TRIM(CustNum)) AS CustomerNum
	--,UPPER(TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) )) AS CustomerNum
	,UPPER(TRIM(InvoiceNum)) AS SalesInvoiceNum
	,MAX(CONVERT(date, InvoiceDate)) AS SalesInvoiceDate
	,MAX(CONVERT(date, DueDate)) AS SalesDueDate
	,MAX(CONVERT(date, LastPaymentDate)) AS SalesLastPaymentDate --IIF(MAX(CONVERT(date, LastPaymentDate)) = '1753-01-01', '1900-01-01', 
	--,NULL AS [InvoiceAmount]
	--,NULL AS PaidInvoiceAmount
	--,NULL AS [RemainingInvoiceAmount]
	,1 AS [ExchangeRate]
	,'DKK' AS [Currency]
	--,NULL AS [VATAmount]
	--,'' AS [VATCode]
	--,'' AS [PayToName]
	--,'' AS [PayToCity]
	--,'' AS [PayToContact]
	--,'' AS [PaymentTerms]
	--,'' AS SLRes1
	--,'' AS SLRes2
	--,'' AS SLRes3
	,'1900-01-01' AS AccountingDate
	--,'' AS AgingPeriod
	--,'' AS AgingSort
	--,'' AS VATCodeDesc
	--,'' AS LinkToOriginalInvoice
FROM
	stage.CER_DK_SalesLedger
GROUP BY
	PartitionKey, Company, CustNum, InvoiceNum--, InvoiceDate, LastPaymentDate --, DueDate
GO
PRINT N'Creating [stage].[ABK_SE_Part]'
GO
CREATE TABLE [stage].[ABK_SE_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartDescription] [nvarchar] (500) NULL,
[PartDescription2] [nvarchar] (100) NULL,
[PartDescription3] [nvarchar] (100) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[ProductGroup2] [nvarchar] (50) NULL,
[ProductStatus] [nvarchar] (50) NULL,
[Brand] [nvarchar] (50) NULL,
[CommodityCode] [nvarchar] (14) NULL,
[PartNumReplacement] [nvarchar] (50) NULL,
[CountryOfOrigin] [nvarchar] (50) NULL,
[NetWeight] [decimal] (18, 8) NULL,
[Volume] [decimal] (18, 8) NULL,
[Material] [nvarchar] (50) NULL,
[Barcode] [nvarchar] (50) NULL,
[ReorderLevel] [decimal] (18, 8) NULL,
[PrimarySupplier] [nvarchar] (500) NULL,
[StartDate] [date] NULL,
[EndDate] [date] NULL,
[Res1_ProdCatNo] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vABK_SE_Part]'
GO

CREATE VIEW [stage].[vABK_SE_Part] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]),'#', TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [Company])) AS CompanyID
	,CONCAT([Company], '#', TRIM(UPPER([PartNum]))) AS PartCode
	,PartitionKey

	,[Company]
	,TRIM(UPPER(PartNum)) AS PartNum
	--,'' AS [PartName]
	,[PartDescription]
	,[PartDescription2]
	,[PartDescription3]
	,[ProductGroup] 
	,[ProductGroup2]
	,Res1_ProdCatNo AS [ProductGroup3]
	--,'' AS [ProductGroup4]
	,LEFT(PrimarySupplier, 50) AS MainSupplier -- at least 40 rows have length more than 50
	--,NULL AS AlternativeSupplier TO commented since there is no need 02/12/2022
	,[Brand]
	,[CommodityCode]
	,PartNumReplacement AS PartReplacementNum
	,ProductStatus AS PartStatus
	,[CountryOfOrigin]
	,[NetWeight]
	--,'' AS [UoM]
	,[Material]
	,[Barcode]
	,[ReorderLevel] AS [ReOrderLevel]
	--,'' AS PartResponsible
	,[StartDate]
	,[EndDate]
FROM [stage].[ABK_SE_Part]
GO
PRINT N'Creating [stage].[CER_LV_Supplier]'
GO
CREATE TABLE [stage].[CER_LV_Supplier]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[MainSupplierName] [nvarchar] (100) NULL,
[SupplierName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[AddressLine3] [nvarchar] (100) NULL,
[TelephoneNum] [nvarchar] (20) NULL,
[Email] [nvarchar] (200) NULL,
[City] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (100) NULL,
[Region] [nvarchar] (50) NULL,
[SupplierCategory] [nvarchar] (50) NULL,
[SupplierResponsible] [nvarchar] (50) NULL,
[AccountNum] [nvarchar] (50) NULL,
[VATNum] [nvarchar] (50) NULL,
[OrganizationNum] [nvarchar] (100) NULL,
[InternalExternal] [nvarchar] (100) NULL,
[CodeOfConduct] [nvarchar] (2) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[Reference] [nvarchar] (100) NULL,
[SupplierScore] [nvarchar] (50) NULL,
[MinOrderQty] [nvarchar] (50) NULL,
[Website] [nvarchar] (100) NULL,
[Comments] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[vCER_LV_Supplier]'
GO

CREATE   VIEW [stage].[vCER_LV_Supplier] AS

SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID
    ,UPPER(CONCAT([Company],'#',TRIM([SupplierNum]))) AS SupplierCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([SupplierNum])) AS SupplierNum
	,[dbo].[ProperCase](TRIM(MainSupplierName)) AS MainSupplierName
	,[dbo].[ProperCase](TRIM(SupplierName)) AS SupplierName
    ,TRIM([AddressLine2]) AS AddressLine2
    ,TRIM([AddressLine3]) AS AddressLine3
	,[TelephoneNum]
	,[Email]
	,PARSENAME(REPLACE(dbo.SplitAddress(CONCAT(AddressLine1,' ',AddressLine2,' ',AddressLine3)), '^', '.'), 3) AS AddressLine1 -- TRIM([AddressLine1]) AS AddressLine1 2023-04-04 SB & TO 
    ,IIF(TRIM(ZipCode) = '',PARSENAME(REPLACE(dbo.SplitAddress(CONCAT(AddressLine1,' ',AddressLine2,' ',AddressLine3)), '^', '.'), 2), trim(ZipCode)) AS ZipCode -- ,TRIM([ZipCode]) AS ZipCode 2023-04-04 SB & TO 
    ,IIF(TRIM(City)    IN (Null,''),PARSENAME(REPLACE(dbo.SplitAddress(CONCAT(AddressLine1,' ',AddressLine2,' ',AddressLine3)), '^', '.'), 1), trim(City)) AS City -- ,TRIM([ZipCode]) AS ZipCode 2023-04-04 SB & TO 
	,District
	,IIF(CountryName is null, 'LV', CountryCode) AS CountryCode
    ,IIF(CountryName is null, 'Latvia', CountryName) AS CountryName
	,[Region] 
	,TRIM([SupplierCategory]) AS SupplierCategory 
	,TRIM([SupplierResponsible]) AS SupplierResponsible
	,[dbo].[ProperCase](TRIM(concat (addressline1+' '+ addressline2, null))) AS AddressLine
	,[dbo].[ProperCase](TRIM(concat_ws(',',coalesce([dbo].[ProperCase](CountryName),null),IIF(City= ' ',null,trim(substring(replace([dbo].[ProperCase](AddressLine3),' ', ''), 6, 100))),IIF(ZipCode= ' ',null,[dbo].[udf_GetNumeric]([Addressline3]))
		,coalesce(IIF([addressline1]= ' ',null,[addressline1]),IIF([addressline2]= ' ',null,[addressline2]))
		,coalesce(IIF([addressline2]= ' ',null,[addressline2]),IIF([addressline3]= ' ',null,[addressline3]))))) AS FullAddressLine
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [AccountNum])) AS [AccountNum] --required by Ian Morgan & approved by Emil T on 20200630
	,[VATNum]
	,OrganizationNum
	,[InternalExternal]
	,[CodeOfConduct]
	,CustomerNum
	,TRIM([SupplierScore]) AS SupplierScore
	,COALESCE(TRY_CONVERT(decimal(18,4), [MinOrderQty]),0) AS [MinOrderQty]
	,0 AS MinOrderValue	
	,[Website]
	,TRIM([Comments]) AS Comments
	,1 as IsMaterialSupplier -- all suppliers are material supplier according to Jevenija M.  We may be missing all services though.
	--,'' AS SRes1
	--,'' AS SRes2
	--,'' AS SRes3
FROM [stage].[CER_LV_Supplier]
--GROUP BY 
--      [PartitionKey],[Company],[SupplierNum],MainSupplierName,[SupplierName],[AddressLine1],[AddressLine2],[AddressLine3],[City],[ZipCode],[Region],District, [CountryName]
--	  ,[SupplierCategory],[SupplierResponsible],[Reference],[AccountNum],[VATNum],[SupplierScore],[CustomerNum],[TelephoneNum],[Email],[Website],[CodeOfConduct]
--	  ,[MinOrderQty],[InternalExternal],[Comments], OrganizationNum
GO
PRINT N'Creating [stage].[NOM_DK_Part]'
GO
CREATE TABLE [stage].[NOM_DK_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PartNum] [nvarchar] (50) NOT NULL,
[PartDescription] [nvarchar] (max) NULL,
[PartDescription2] [nvarchar] (max) NULL,
[ProductGroup] [nvarchar] (100) NULL,
[ProductGroup2] [nvarchar] (100) NULL,
[ProductGroup3] [nvarchar] (100) NULL,
[ProductGroup4] [nvarchar] (100) NULL,
[CommodityCode] [nvarchar] (50) NULL,
[CountryOfOrigin] [nvarchar] (50) NULL,
[PartResponsible] [nvarchar] (50) NULL,
[NetWeight] [decimal] (18, 8) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[ParentSupplier] [nvarchar] (50) NULL,
[ReorderLevel] [decimal] (18, 8) NULL,
[DiscountGroup] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vNOM_DK_Part]'
GO
CREATE VIEW [stage].[vNOM_DK_Part] AS
--COMMENT EMPTY FIELDS 23-01-05 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(vp.[Company]),'#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(vp.[Company])))) AS CompanyID
	,UPPER(CONCAT(TRIM(vp.[Company]),'#',TRIM([PartNum]))) AS PartCode
	,PartitionKey

	,UPPER(TRIM(vp.[Company])) AS Company
	,UPPER(TRIM([PartNum])) AS PartNum
	--,'' AS [PartName]
	,[PartDescription]
	,[PartDescription2]
	,DiscountGroup AS [PartDescription3]
	,CONCAT(TRIM(vp.SupplierCode), '-', TRIM(vs.SupplierName)) AS MainSupplier
	,ParentSupplier AS AlternativeSupplier
	,[ProductGroup]
	,[ProductGroup2]
	,[ProductGroup3]
	,[ProductGroup4]
	--,'' AS [Brand]
	,[CommodityCode]
	--,'' AS PartReplacementNum
	--,'' AS PartStatus
	,[CountryOfOrigin]
	,[NetWeight]
	--,'' AS [UoM]
	--,'' AS [Material]
	--,'' AS [Barcode]
	,[ReOrderLevel]
	,PartResponsible
	--,'' AS [StartDate]
	--,'' AS [EndDate]
FROM [stage].[NOM_DK_Part] vp
LEFT JOIN  [dw].[vAll_Supplier] vs ON vp.Company = vs.Company AND vp.SupplierCode = vs.SupplierNum

--GROUP BY
--	PartitionKey, vp.Company, PartNum, PartDescription, PartDescription2, ProductGroup, ProductGroup2, ProductGroup3, ProductGroup4, CommodityCode, CountryOfOrigin, NetWeight, ReorderLevel, PartResponsible, DiscountGroup, SupplierCode
GO
PRINT N'Creating [stage].[COC_ALL_SupplierTest]'
GO
CREATE TABLE [stage].[COC_ALL_SupplierTest]
(
[SupplierID] [bigint] NULL,
[Company] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[SupplierName] [nvarchar] (50) NULL,
[CodeOfConductIsSigned] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCOC_ALL_Supplier]'
GO


  CREATE VIEW [stage].[vCOC_ALL_Supplier] AS
  SELECT
	CONCAT(getdate(),' 00:00:00') AS PartitionKey
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Company])))) AS CompanyID
	,Company
	,SupplierNum
	,CONCAT([Company],'#',TRIM([SupplierNum])) AS SupplierCode
	,CASE WHEN COMPANY in ('CYESA', 'MENNL03')
		THEN CONVERT([binary](32), HASHBYTES('SHA2_256',(CONCAT(TRIM([Company]), '#', TRIM([SupplierNum]))))) 
		ELSE CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company], '#', TRIM([SupplierNum]))))) END AS SupplierID
	,CodeOfConductIsSigned AS CoCfeedback
  FROM [stage].[COC_ALL_SupplierTest]
  WHERE [Company] IS NOT NULL
GO
PRINT N'Creating [dm_TS].[dimSalesOrderDistinct]'
GO





CREATE VIEW [dm_TS].[dimSalesOrderDistinct] AS


SELECT sod.[CompanyID]
,sod.[Company]
,sod.[SalesOrderNumID]
,sod.[SalesOrderNum]
,sod.[CustomerID]
,sod.[Customer]
,sod.[SalesPersonName]
,sod.[SalesChannel]
,sod.[AxInterSalesChannel]
,sod.[Department]

FROM dm.DimSalesOrderDistinct sod
LEFT JOIN dbo.Company com ON sod.Company = com.Company
WHERE (com.BusinessArea = 'Transport Solutions' OR com.Company = 'CERPL') AND com.[Status] = 'Active'


--WHERE Company  in ('FESFORA', 'FSEFORA', 'FFRFORA', 'FFRGPI', 'FFRLEX', 'IFIWIDN', 'IEEWIDN', 'TMTFI', 'TMTEE', 'FITMT', 'EETMT', 'ABKSE', 'ROROSE')  -- TS basket by 2021-03-04
GO
PRINT N'Creating [stage].[ATZ_UK_SalesLedger]'
GO
CREATE TABLE [stage].[ATZ_UK_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPayDate] [date] NULL
)
GO
PRINT N'Creating [stage].[vATZ_UK_SalesLedger]'
GO
CREATE VIEW [stage].[vATZ_UK_SalesLedger] AS
--COMMENT EMPTY FIELDS // ADD UPPER() TRIM() INTO CustomerID 2022-12-27
--Problem with the group by clause,need to resolve. 2022-12-27 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ), '#', TRIM(InvoiceNum)))) AS SalesLedgerID,  --, '#', DueDate, '#', LastPayDate
	CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID,
	CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum)))))) AS CustomerID,
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ) ))) AS CustomerID,
	CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ), '#', TRIM(InvoiceNum)) AS SalesLedgerCode,
	PartitionKey,

	TRIM(Company) AS Company,
	TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ) AS CustomerNum,
	TRIM(InvoiceNum) AS SalesInvoiceNum,  -- various blank spaces after InvoiceNum, it affects query results! data-Input quality should be improved!
	MIN(InvoiceDate) AS SalesInvoiceDate,
	CONVERT(date, MIN(DueDate)) AS SalesDueDate,
	CONVERT(date, MAX(LastPayDate)) AS SalesLastPaymentDate,
	NULL AS InvoiceAmount,
	NULL AS PaidInvoiceAmount,
	NULL AS RemainingInvoiceAmount,
	1 AS ExchangeRate,
	'EUR' AS Currency,
	NULL AS VATAmount,
	--'' AS VATCode,
	--'' AS PayToName,
	--'' AS PayToCity,
	--'' AS PayToContact,
	--'' AS PaymentTerms,
	--'' AS SLRes1,
	--'' AS SLRes2,
	--'' AS SLRes3
	'1900-01-01' AS AccountingDate
	--,'' AS AgingPeriod
	--,'' AS AgingSort
	--,'' AS VATCodeDesc
	--,'' AS LinkToOriginalInvoice
FROM 
	stage.ATZ_UK_SalesLedger
GROUP BY
	PartitionKey, Company, TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ), TRIM(InvoiceNum)--, DueDate, LastPayDate
GO
PRINT N'Creating [dm_DEMO].[dimWarehouse]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [dm_DEMO].[dimWarehouse] AS

SELECT 
 whs.[WareHouseID]
,whs.[CompanyID]
,whs.[Company]
,whs.[WarehouseCode]
,whs.[WarehouseName]
,whs.[WarehouseDistrict]
,whs.[WarehouseAddress]
,whs.[WarehouseDescription]
,whs.[WarehouseType]
,whs.[WarehouseCountry]
,whs.[WarehouseSite]
FROM [dm].[DimWareHouse] as whs /*temp putting (CERPL) Certex PL here such that they see the data in same company*/
WHERE [Company] in ('DEMO')
GO
PRINT N'Creating [stage].[JEN_NO_PurchaseOrder]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[JEN_NO_PurchaseOrder]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [varchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[LineType] [nvarchar] (50) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[InvoiceSupplierCode] [nvarchar] (50) NULL,
[DelivCustCode] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[ItemType] [int] NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[OrderedQty] [decimal] (18, 4) NULL,
[ReceivedQty] [decimal] (18, 4) NULL,
[InvoicedQty] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[CommitedDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[ReqDelivDate] [date] NULL,
[DelivDate] [date] NULL,
[OrgReqDelivDate] [date] NULL,
[IsOrderClosed] [bit] NULL,
[PurchaserName] [nvarchar] (50) NULL,
[RecievingNumber] [nvarchar] (50) NULL,
[LeadTime] [nvarchar] (50) NULL,
[Comments] [nvarchar] (max) NULL,
[WarehouseCode] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vJEN_NO_PurchaseOrder]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vJEN_NO_PurchaseOrder] AS
--COMMENT EMPTY FIELDS // ADD TRIM() INTO WarehouseID,CustomerID,PartID 2022-12-22 VA
--ADD TRIM() INTO Supplier 23-01-23 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderType), '#', TRIM(PartNum), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(PurchaserName), '#', IsOrderClosed)))) AS PurchaseOrderID -- was included in ID: ", '#', TRIM(PurchaseOrderSubLine), '#', TRIM(InvoiceNum),'#',TRIM(UPPER([PartNum])), '#', TRIM(UPPER(SupplierCode)), '#', OrderedQty", '#', TRIM(InvoiceNum)
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', '')))) AS PurchaseInvoiceID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(DelivCustCode))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(DelivCustCode))))) AS CustomerID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(UPPER(SupplierCode)))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierCode))))) AS SupplierID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(UPPER([PartNum])))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Trim(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([CurrencyCode])))) AS CurrencyID
	,UPPER(CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(PurchaseOrderNum))) AS PurchaseOrderCode
	,PartitionKey

	,TRIM(UPPER(Company)) AS Company
	,TRIM(PurchaseOrderNum) AS PurchaseOrderNum
	,TRIM(PurchaseOrderLine) AS PurchaseOrderLine
	,TRIM(PurchaseOrderSubLine) AS PurchaseOrderSubLine
	,TRIM(OrderType) AS PurchaseOrderType
	,TRIM(UPPER([PartNum])) AS PartNum
	,TRIM(UPPER(SupplierCode)) AS SupplierNum
	,TRIM(DelivCustCode) AS DelivCustomerNum
	,'' AS PurchaseInvoiceNum 
	,OrderDate AS PurchaseOrderDate
	,MAX(OrgReqDelivDate) AS OrgReqDelivDate
	,MAX(DelivDate) AS DelivDate
	,MAX(ReqDelivDate) AS ReqDelivDate
	,MAX(CommitedDelivDate) AS CommittedDelivDate
	,MAX(ActualDelivDate) AS ActualDelivDate
	,SUM(OrderedQty) AS PurchaseOrderQty
	,SUM(ReceivedQty) AS ReceiveQty
	,SUM(InvoicedQty) AS InvoiceQty
--	,IIF(AVG(ReceivedQty) < AVG(OrderedQty), 'Open', 'Closed') AS PurchaseOrderStatus
	,IIF(IsOrderClosed = '1', 'Closed', 'Open') AS PurchaseOrderStatus
	,IsOrderClosed AS IsClosed
	--,'' AS SupplierPartNum
	--,'' AS [SupplierInvoiceNum] 
	--,'' AS PartStatus
	--,0 AS MinOrderQty
	--,'' AS UoM
	--,0 AS LandedCost
	,AVG(UnitPrice) AS UnitPrice
	,AVG(IIF(UnitPrice*OrderedQty*ExchangeRate = 0, 0, 100*DiscountAmount/(UnitPrice*OrderedQty*ExchangeRate))) AS DiscountPercent --was DiscountPercent -- changed 20230227 /DZ
	,SUM(DiscountAmount) AS DiscountAmount --was UnitPrice*OrderedQty*DiscountPercent/100  -- changed 20230227 /DZ
	,SUM(TotalMiscChrg) AS TotalMiscChrg
	,AVG(ExchangeRate) AS ExchangeRate
	,CASE WHEN CurrencyCode = '15' THEN 'EUR' WHEN CurrencyCode = '2' THEN 'USD' ELSE CurrencyCode END AS Currency
	,TRIM(PurchaserName) AS PurchaserName
	,TRIM(WarehouseCode) AS WarehouseCode
	,TRIM(RecievingNumber) AS ReceivingNum
	,IIF(LeadTime = 'na', NULL, Leadtime) AS DelivTime
	,CASE WHEN CONVERT(NVARCHAR(50),TRIM([LineType])) like '0' THEN 'Stock Item Line' WHEN CONVERT(NVARCHAR(50),TRIM([LineType])) like '1' THEN 'Non Stock Item Line' ELSE NULL END AS [LineType]
	,CONVERT(NVARCHAR(50),ItemType) AS ItemType
	,TRIM(Comments) AS Comments
	--,'' AS PurchaseChannel
	--,'' AS Documents
	--,'' AS PORes1
	--,'' AS PORes2
	--,'' AS PORes3
	--,'' AS DaysSincePOrder
FROM 
	[stage].[JEN_NO_PurchaseOrder]
	
GROUP BY PartitionKey, Company, PurchaseOrderNum, PurchaseOrderLine, PurchaseOrderSubLine, SupplierCode, DelivCustCode, LineType, PartNum, OrderType, CurrencyCode, ItemType, OrderDate, PurchaserName, RecievingNumber, LeadTime, Comments, WarehouseCode, IsOrderClosed
	--PartitionKey, Company, PurchaseOrderNum, PurchaseOrderLine, PurchaseOrderSubLine, SupplierCode, DelivCustCode, LineType, InvoiceNum, PartNum, OrderType, UnitPrice, DiscountPercent, OrderedQty, ReceivedQty, InvoicedQty, TotalMiscChrg, ExchangeRate, CurrencyCode, ItemType, OrderDate, OrgReqDelivDate, CommitedDelivDate, ActualDelivDate, DelivDate, ReqDelivDate, PurchaserName, RecievingNumber, LeadTime, Comments, WarehouseCode
GO
PRINT N'Creating [stage].[SKS_FI_PurchaseLedger]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[SKS_FI_PurchaseLedger]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[BUKRS] [nvarchar] (8) NOT NULL,
[EKORG] [nvarchar] (50) NULL,
[SUPPLIERNUM] [nvarchar] (50) NULL,
[PURCHASEORDERNUM] [nvarchar] (50) NULL,
[PURCHASEINVOICENUM] [nvarchar] (50) NULL,
[INVOICEDATE] [nvarchar] (50) NULL,
[DUEDATE] [nvarchar] (50) NULL,
[LASTPAYMENTDATE] [nvarchar] (50) NULL,
[INVOICELCYAMOUNT] [decimal] (18, 4) NULL,
[INVOICECURRAMOUNT] [decimal] (18, 4) NULL,
[EXCHANGERATE] [decimal] (18, 4) NULL,
[CURRENCY] [nvarchar] (50) NULL,
[VATPAID] [decimal] (18, 4) NULL,
[VATCODE] [nvarchar] (50) NULL,
[PAYTONAME] [nvarchar] (50) NULL,
[PAYTOCITY] [nvarchar] (50) NULL,
[PAYTOCONTACT] [nvarchar] (50) NULL,
[PAYMENTTERMSCODE] [nvarchar] (50) NULL,
[PREPAYMENTNUM] [nvarchar] (50) NULL,
[LASTPAYMENTNUM] [nvarchar] (50) NULL,
[GJAHR] [nvarchar] (50) NULL,
[MANDT] [nvarchar] (50) NULL,
[PLRES1] [nvarchar] (50) NULL,
[PLRES2] [nvarchar] (50) NULL,
[PLRES3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vSKS_FI_PurchaseLedger]'
GO


CREATE VIEW [stage].[vSKS_FI_PurchaseLedger] AS 
--ADD UPPER() INTO SupplierID 23-01-24 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(CAST(IIF(TRIM(BUKRS) = 'FI20', 'SMKFI', (IIF(TRIM(BUKRS) in ('FI25', 'FI26'), 'SCOFI', IIF(TRIM(BUKRS) = 'SE10', 'SSWSE', TRIM(BUKRS))))) AS NVARCHAR(10)), '#', TRIM(SUPPLIERNUM), '#', TRIM(PURCHASEINVOICENUM),'#',TRIM(PURCHASEORDERNUM)))) AS PurchaseLedgerID
	,CONCAT(CAST(IIF(TRIM(BUKRS) = 'FI20', 'SMKFI', (IIF(TRIM(BUKRS) in ('FI25', 'FI26'), 'SCOFI', IIF(TRIM(BUKRS) = 'SE10', 'SSWSE', TRIM(BUKRS))))) AS NVARCHAR(10)), '#', TRIM(SUPPLIERNUM), '#', TRIM(PURCHASEINVOICENUM)) AS PurchaseLedgerCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM(CAST(IIF(TRIM(BUKRS) = 'FI20', 'SMKFI', (IIF(TRIM(BUKRS) in ('FI25', 'FI26'), 'SCOFI', IIF(TRIM(BUKRS) = 'SE10', 'SSWSE', TRIM(BUKRS))))) AS NVARCHAR(10))))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(CAST(IIF(TRIM(BUKRS) = 'FI20', 'SMKFI', (IIF(TRIM(BUKRS) in ('FI25', 'FI26'), 'SCOFI', IIF(TRIM(BUKRS) = 'SE10', 'SSWSE', TRIM(BUKRS))))) AS NVARCHAR(10)), '#', TRIM(SUPPLIERNUM))))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(CAST(IIF(TRIM(BUKRS) = 'FI20', 'SMKFI', (IIF(TRIM(BUKRS) in ('FI25', 'FI26'), 'SCOFI', IIF(TRIM(BUKRS) = 'SE10', 'SSWSE', TRIM(BUKRS))))) AS NVARCHAR(10)), '#', TRIM(SUPPLIERNUM)))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(CAST(IIF(TRIM(BUKRS) = 'FI20', 'SMKFI', (IIF(TRIM(BUKRS) in ('FI25', 'FI26'), 'SCOFI', IIF(TRIM(BUKRS) = 'SE10', 'SSWSE', TRIM(BUKRS))))) AS NVARCHAR(10)), '#', TRIM(PURCHASEINVOICENUM)))) AS PurchaseInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(CAST(IIF(TRIM(BUKRS) = 'FI20', 'SMKFI', (IIF(TRIM(BUKRS) in ('FI25', 'FI26'), 'SCOFI', IIF(TRIM(BUKRS) = 'SE10', 'SSWSE', TRIM(BUKRS))))) AS NVARCHAR(10)), '#', PURCHASEORDERNUM))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM(CURRENCY))) AS CurrencyID
	,CONVERT(int, replace(convert(date, INVOICEDATE), '-', '')) AS PurchaseInvoiceDateID
	,[PartitionKey]

	,CAST(IIF(TRIM(BUKRS) = 'FI20', 'SMKFI', (IIF(TRIM(BUKRS) in ('FI25', 'FI26'), 'SCOFI', IIF(TRIM(BUKRS) = 'SE10', 'SSWSE', TRIM(BUKRS))))) AS NVARCHAR(10)) AS [Company]
	,TRIM(SUPPLIERNUM) AS SupplierNum
	,TRIM(PURCHASEORDERNUM) AS [PurchaseOrderNum]
	,TRIM(PURCHASEINVOICENUM) AS [PurchaseInvoiceNum]
	,CONVERT(date, IIF(INVOICEDATE = '00000000', '1900-01-01', INVOICEDATE)) AS [PurchaseInvoiceDate]
	,CONVERT(date, IIF(DUEDATE = '00000000', '1900-01-01', DUEDATE)) AS PurchaseDueDate
	,IIF(LASTPAYMENTDATE = '00000000', '1900-01-01', CONVERT(date, LASTPAYMENTDATE)) AS PurchaseLastPaymentDate
	,INVOICELCYAMOUNT AS [InvoiceAmount]
	,EXCHANGERATE AS [ExchangeRate]
	,TRIM(CURRENCY) AS [Currency]
	,VATPAID AS [VATAmount]
	,VATCODE AS [VATcode]
	,PAYTONAME AS [PayToName]
	,PAYTOCITY AS [PayToCity]
	,PAYTOCONTACT AS PayToContact
	,PAYMENTTERMSCODE AS [PaymentTerms]
	,PREPAYMENTNUM AS [PrepaymentNum]
	,LASTPAYMENTNUM AS LastPaymentNum
	,INVOICECURRAMOUNT AS PLRES1
	,GJAHR AS PLRES2
	,MANDT AS PLRES3
	--,NULL AS PaidInvoiceAmount
	--,NULL AS RemainingInvoiceAmount
	--,NULL AS LinkToOriginalInvoice
	,'1900-01-01' AS AccountingDate
	--,NULL AS AgingPeriod
	--,NULL AS AgingSort
	--,NULL AS VATCodeDesc
FROM 
	[stage].[SKS_FI_PurchaseLedger]
	WHERE BUKRS NOT IN ('FI00','FI10','SE10', 'SKSSWE')
GO
PRINT N'Creating [stage].[JEN_DK_Supplier]'
GO
CREATE TABLE [stage].[JEN_DK_Supplier]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[Name] [nvarchar] (100) NULL,
[CustomerCode] [nvarchar] (50) NULL,
[Addressline1] [nvarchar] (50) NULL,
[Addressline2] [nvarchar] (50) NULL,
[Addressline3] [nvarchar] (50) NULL,
[City] [nvarchar] (50) NULL,
[ZIP] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[Region] [nvarchar] (50) NULL,
[SupplierCategory] [nvarchar] (50) NULL,
[Reference] [nvarchar] (50) NULL,
[BankAccountNum] [nvarchar] (50) NULL,
[VATNum] [nvarchar] (50) NULL,
[ABCCode] [nvarchar] (50) NULL,
[TelephoneNum] [nvarchar] (50) NULL,
[Email] [nvarchar] (100) NULL,
[CodeOfConduct] [nvarchar] (500) NULL,
[MinOrderQty] [nvarchar] (50) NULL,
[InternalName] [nvarchar] (100) NULL,
[CountryCode] [nvarchar] (10) NULL
)
GO
PRINT N'Creating [stage].[vJEN_DK_Supplier]'
GO
CREATE view [stage].[vJEN_DK_Supplier] AS
--ADD TRIM() INTO SupplierID 23-01-23 VA
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID
	--CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT([Company],'#',TRIM([SupplierNum]))))) AS SupplierID
    ,UPPER(CONCAT([Company],'#',TRIM([SupplierNum]))) AS SupplierCode --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Company])))) AS CompanyID
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,TRIM(UPPER([SupplierNum])) AS [SupplierNum]
	,[Name] AS MainSupplierName
	,[dbo].[ProperCase]([Name]) AS SupplierName
	,[AddressLine1]
    ,[AddressLine2]
    ,[AddressLine3]
	,[TelephoneNum]
	,[Email]
	,[dbo].[udf_GetNumeric]([Addressline3]) AS ZipCode
	,trim(substring(replace([dbo].[ProperCase](AddressLine3),' ', ''), 6, 100))  AS [City]
	--,'' AS [District]
	,[dbo].[ProperCase]([CountryName]) AS CountryName
	,[Region]
	,[SupplierCategory]
	,[Reference] AS [SupplierResponsible]
	,[dbo].[ProperCase](TRIM(concat (addressline1+' '+ addressline2, null))) AS AddressLine
	,[dbo].[ProperCase](TRIM(concat_ws(',',coalesce([dbo].[ProperCase](CountryName),null),IIF(City= ' ',null,trim(substring(replace([dbo].[ProperCase](AddressLine3),' ', ''), 6, 100))),IIF(ZIP= ' ',null,[dbo].[udf_GetNumeric]([Addressline3]))
	,coalesce(IIF([addressline1]= ' ',null,[addressline1]),IIF([addressline2]= ' ',null,[addressline2]))
	,coalesce(IIF([addressline2]= ' ',null,[addressline2]),IIF([addressline3]= ' ',null,[addressline3]))))) AS FullAddressLine
	--,'' AS [AccountNum] 
	,[VATNum]
	--,'' AS OrganizationNum
	,[InternalName] AS [InternalExternal]
	,[CodeOfConduct]
	,[CustomerCode] AS CustomerNum
	,[ABCCode] AS [SupplierScore]
	,TRY_CONVERT(decimal(18,4),[MinOrderQty]) AS [MinOrderQty]
	--,0 AS [MinOrderValue]
	--,'' AS [Website]
	--,'' AS [Comments]
	--,'' AS SRes1
	--,'' AS SRes2
	--,'' AS SRes3
	, CountryCode
FROM [stage].[JEN_DK_Supplier]
GO
PRINT N'Creating [stage].[NOM_FI_PurchaseLedger]'
GO
CREATE TABLE [stage].[NOM_FI_PurchaseLedger]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NOT NULL,
[PurchaseInvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[InvoiceAmount] [decimal] (18, 4) NOT NULL,
[RemainingInvoiceAmount] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (10) NULL,
[VATAmount] [decimal] (18, 4) NULL,
[VATCode] [nvarchar] (10) NULL,
[PayToName] [nvarchar] (50) NULL,
[PayToCity] [nvarchar] (50) NULL,
[PayToContact] [nvarchar] (50) NULL,
[PaymentTerms] [nvarchar] (50) NULL,
[PrePaymentNum] [nvarchar] (50) NULL,
[LastPaymentNum] [nvarchar] (50) NULL,
[PLRes1] [nchar] (10) NULL,
[PLRes2] [nchar] (10) NULL,
[PLRes3] [nchar] (10) NULL
)
GO
PRINT N'Creating [stage].[vNOM_FI_PurchaseLedger]'
GO
CREATE VIEW [stage].[vNOM_FI_PurchaseLedger] AS 
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum))))) AS PurchaseLedgerID -- shall = in Invoice
	,UPPER(CONCAT(Company, '#', TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum))) AS PurchaseLedgerCode --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum))))) AS SupplierID 
	--,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(Company, '#', TRIM(SupplierNum))))) AS SupplierID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(PurchaseInvoiceNum))))) AS PurchaseInvoiceID --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM(Currency)))) AS CurrencyID --Redundant?
	,CONVERT(int, replace(convert(date,PurchaseInvoiceDate),'-','')) AS PurchaseInvoiceDateID  --Redundant?
	,[PartitionKey]

	,TRIM(UPPER([Company])) AS [Company]
	,TRIM(UPPER(SupplierNum)) AS SupplierNum
	,UPPER(TRIM([PurchaseOrderNum])) AS [PurchaseOrderNum]
	,UPPER(TRIM([PurchaseInvoiceNum])) AS  [PurchaseInvoiceNum]
	,CONVERT(date, PurchaseInvoiceDate) AS PurchaseInvoiceDate
	,CONVERT(date, [DueDate]) AS PurchaseDueDate
	,CONVERT(date, [LastPaymentDate]) AS PurchaseLastPaymentDate
	,RemainingInvoiceAmount 
	,InvoiceAmount
	,[ExchangeRate]
	,Currency
	,VATAmount
	,VATCode
	,[PayToName]
	,[PayToCity]
	,[PayToContact]
	,PaymentTerms
	,UPPER(TRIM([PrepaymentNum])) AS [PrepaymentNum]
	,UPPER(TRIM(LastPaymentNum)) AS LastPaymentNum
	,'' AS PLRES1
	,'' AS PLRES2
	,'' AS PLRES3
	,NULL AS PaidInvoiceAmount
	,NULL AS LinkToOriginalInvoice
	,CAST ('1900-01-01'AS date) AS AccountingDate
	,NULL AS AgingPeriod
	,NULL AS AgingSort
	,NULL AS VATCodeDesc
FROM 
	[stage].[NOM_FI_PurchaseLedger]
GO
PRINT N'Creating [stage].[SCM_FI_SalesLedger]'
GO
CREATE TABLE [stage].[SCM_FI_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (10) NULL,
[InvoiceNum] [nvarchar] (25) NULL,
[InvoiceDate] [datetime] NULL,
[DueDate] [datetime] NULL,
[LastPaymentDate] [datetime] NULL
)
GO
PRINT N'Creating [stage].[vSCM_FI_SalesLedger]'
GO

CREATE VIEW [stage].[vSCM_FI_SalesLedger] AS
--COMMENT EMPTY FIELD // ADD UPPER() TRIM() 20221-12-21 VA
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company, '#', TRIM(IIF(CustNum = '' OR CustNum IS NULL, 'MISSINGCUSTOMER', CustNum)), '#', InvoiceNum))) AS SalesLedgerID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',Company)) AS CompanyID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustNum))))) AS CustomerID,
	--CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(IIF(CustNum = '' OR CustNum IS NULL, 'MISSINGCUSTOMER', CustNum))))) AS CustomerID,
	CONCAT(Company,'#',TRIM(IIF(CustNum = '' OR CustNum IS NULL, 'MISSINGCUSTOMER', CustNum)), '#', InvoiceNum) AS SalesLedgerCode,
	PartitionKey,

	TRIM(Company) AS Company,
	TRIM(CustNum) AS CustomerNum,
	TRIM(InvoiceNum) AS SalesInvoiceNum,
	InvoiceDate AS SalesInvoiceDate,
	CONVERT(date, DueDate) AS SalesDueDate,
	CONVERT(date, LastPaymentDate) AS SalesLastPaymentDate,
	--NULL AS InvoiceAmount,
	--NULL AS PaidInvoiceAmount,
	--NULL AS RemainingInvoiceAmount,
	1 AS ExchangeRate,
	'EUR' AS Currency,
	--NULL AS VATAmount,
	--'' AS VATCode,
	--'' AS PayToName,
	--'' AS PayToCity,
	--'' AS PayToContact,
	--'' AS PaymentTerms,
	--'' AS SLRes1,
	--'' AS SLRes2,
	--'' AS SLRes3
	'1900-01-01' AS AccountingDate
	--,'' AS AgingPeriod
	--,'' AS AgingSort
	--,'' AS VATCodeDesc
	--,'' AS LinkToOriginalInvoice
FROM 
	stage.SCM_FI_SalesLedger
GO
PRINT N'Creating [dm_TS].[fctPurchaseInvoice]'
GO




CREATE VIEW [dm_TS].[fctPurchaseInvoice] AS


SELECT 

 pinv.[PurchaseInvoiceID]
,pinv.[CompanyID]
,pinv.[SupplierID]
,pinv.[PartID]
,pinv.[WarehouseID]
,pinv.[PurchaseOrderNumID]
,pinv.[CurrencyID]
,pinv.[PurchaseInvoiceDateID]
,pinv.[Company]
,pinv.[PurchaseOrderNum]
,pinv.[PurchaseOrderLine]
,pinv.[PurchaseOrderType]
,pinv.[PurchaseInvoiceNum]
,pinv.[PurchaseInvoiceLine]
,pinv.[PurchaseInvoiceType]
,pinv.[PurchaseInvoiceDate]
,pinv.[ActualDelivDate]
,pinv.[SupplierNum]
,pinv.[PartNum]
,pinv.[PurchaseInvoiceQty]
,pinv.[UoM]
,pinv.[UnitPrice]
,pinv.[DiscountPercent]
,pinv.[DiscountAmount]
,pinv.[TotalMiscChrg]
,pinv.[VATAmount]
,pinv.[Currency]
,pinv.[ExchangeRate]
,pinv.[CreditMemo]
,pinv.[PurchaserName]
,pinv.[WarehouseCode]
,pinv.[PurchaseChannel]
,pinv.[Comment]
,pinv.[PIRes1]
,pinv.[PIRes2]
,pinv.[PIRes3]
,pinv.[PIRes4]
,pinv.[PurchaseInvoiceAmountOC]
,pinv.[PurchaseOrderDate]
,pinv.[ReqDelivDate]
,pinv.[OrgReqDelivDate]
,pinv.[CommittedDelivDate]
,pinv.[OrgCommittedDelivDate]
,pinv.[DueDate]
,pinv.[PaymentDate]
,pinv.[InvoiceStatus]

FROM dm.FactPurchaseInvoice pinv
LEFT JOIN dbo.Company com ON pinv.Company = com.Company
WHERE com.BusinessArea = 'Transport Solutions' AND com.[Status] = 'Active'


--WHERE Company  in ('FESFORA', 'FSEFORA', 'FFRFORA', 'FFRGPI', 'FFRLEX', 'IFIWIDN', 'IEEWIDN', 'TMTFI', 'TMTEE', 'FITMT', 'EETMT', 'ABKSE', 'ROROSE')  -- TS basket by 2021-08-05
GO
PRINT N'Creating [stage].[AXI_HQ_SalesLedger]'
GO
CREATE TABLE [stage].[AXI_HQ_SalesLedger]
(
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NULL,
[SalesInvoiceNum] [nvarchar] (50) NOT NULL,
[SalesInvoiceDate] [date] NULL,
[SalesDueDate] [date] NULL,
[SalesLastPaymentDate] [date] NULL,
[InvoiceAmount] [decimal] (18, 4) NULL,
[PaidInvoiceAmount] [decimal] (18, 4) NULL,
[RemainingInvoiceAmount] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (10) NULL,
[VATAmount] [decimal] (18, 4) NULL,
[VATCode] [nvarchar] (50) NULL,
[VATCodeDesc] [nvarchar] (300) NULL,
[PayToName] [nvarchar] (100) NULL,
[PayToCity] [nvarchar] (50) NULL,
[PayToContact] [nvarchar] (50) NULL,
[PaymentTerms] [nvarchar] (50) NULL,
[SLRes1] [nvarchar] (100) NULL,
[SLRes2] [nvarchar] (100) NULL,
[SLRes3] [nvarchar] (100) NULL,
[SalesLedgerCode] [nvarchar] (500) NULL,
[PartitionKey] [varchar] (50) NOT NULL,
[AccountingDate] [date] NULL,
[AgingPeriod] [nvarchar] (100) NULL,
[InvoiceAmountLC] [decimal] (18, 4) NULL,
[PaidInvoiceAmountLC] [decimal] (18, 4) NULL,
[RemainingInvoiceAmountLC] [decimal] (18, 4) NULL,
[VATAmountLC] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vAXHSE_HQ_SalesLedger]'
GO


/****** Script for SelectTopNRows command from SSMS  ******/
CREATE VIEW [stage].[vAXHSE_HQ_SalesLedger] AS 
SELECT 
	  CONVERT(binary(32), HASHBYTES('SHA2_256', CONCAT(Company, '#', SalesInvoiceNum, '#', CustomerNum ))) AS SalesLedgerID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', CustomerNum ))) AS CustomerID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', '' ))) AS ProjectID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256', CONCAT(Company, '#', SalesInvoiceNum ))) AS SalesInvoiceID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256', CONCAT(Company, '#', '' ))) AS SalesOrderNumID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',Company)) AS CompanyID
	  ,CONVERT([binary](32), HASHBYTES('SHA2_256', Currency)) AS CurrencyID
	  ,CONVERT(int, replace(convert(date, SalesInvoiceDate), '-', '')) AS SalesInvoiceDateID
	  ,CONCAT(Company, '#', SalesInvoiceNum, '#', CustomerNum ) AS SalesLedgerCode
	  ,CONVERT(varchar, GETDATE(), 23) AS PartitionKey

	  ,[Company]
      ,[CustomerNum]
      ,[SalesInvoiceNum]
      ,[SalesInvoiceDate]
      ,[SalesDueDate]
      ,[SalesLastPaymentDate]
      ,[InvoiceAmount]
      ,[PaidInvoiceAmount]
      ,[RemainingInvoiceAmount]
      ,CAST(COALESCE(InvoiceAmountLC/NULLIF([InvoiceAmount],0),[ExchangeRate]) AS decimal(18,8)) AS  [ExchangeRate]
      ,[Currency]
      ,[VATAmount]
      ,[VATCode]
      ,[VATCodeDesc]
      ,[PayToName]
      ,[PayToCity]
      ,[PayToContact]
      ,[PaymentTerms]
      ,[SLRes1]
      ,[SLRes2]
      ,[SLRes3]
      ,[AccountingDate]
--      ,[AgingPeriod]
--	  ,NULL AS AgingSort
	  	,CASE WHEN [RemainingInvoiceAmount] <>0 AND DATEDIFF(DAY, [SalesDueDate], GETDATE())<-7 THEN 'Not Due Yet'
		WHEN [RemainingInvoiceAmount] <>0 AND DATEDIFF(DAY, [SalesDueDate], GETDATE()) BETWEEN -7 AND 0 THEN 'Due in (0-7)'
		WHEN [RemainingInvoiceAmount] <>0 AND DATEDIFF(DAY, [SalesDueDate], GETDATE())BETWEEN 1 AND 14 THEN 'Overdue (1-14)'
		WHEN [RemainingInvoiceAmount] <>0 AND DATEDIFF(DAY, [SalesDueDate], GETDATE())BETWEEN 15 AND 30 THEN 'Overdue (15-30)'
		WHEN [RemainingInvoiceAmount] <>0 AND DATEDIFF(DAY, [SalesDueDate], GETDATE())BETWEEN 31 AND 60 THEN 'Overdue (31-60)'
		WHEN [RemainingInvoiceAmount] <>0 AND DATEDIFF(DAY, [SalesDueDate], GETDATE())> 60 THEN 'Overdue (60>)'
		WHEN [RemainingInvoiceAmount] =0 THEN 'Settled'
		ELSE '' END AS [AgingPeriod]
	,CASE WHEN [RemainingInvoiceAmount] <>0 AND DATEDIFF(DAY, [SalesDueDate], GETDATE())<-7 THEN 0
		WHEN [RemainingInvoiceAmount] <>0 AND DATEDIFF(DAY, [SalesDueDate], GETDATE()) BETWEEN -7 AND 0 THEN 1
		WHEN [RemainingInvoiceAmount] <>0 AND DATEDIFF(DAY, [SalesDueDate], GETDATE()) BETWEEN 1 AND 14 THEN 2
		WHEN [RemainingInvoiceAmount] <>0 AND DATEDIFF(DAY, [SalesDueDate], GETDATE()) BETWEEN 15 AND 30 THEN 3
		WHEN [RemainingInvoiceAmount] <>0 AND DATEDIFF(DAY, [SalesDueDate], GETDATE()) BETWEEN 31 AND 60 THEN 4
		WHEN [RemainingInvoiceAmount] <>0 AND DATEDIFF(DAY, [SalesDueDate], GETDATE())>60 THEN 5
		WHEN [RemainingInvoiceAmount] =0 THEN 6
		ELSE '' END AS [AgingSort]
--	  ,SLLink.LinkToOriginalInvoice
  FROM [stage].[AXI_HQ_SalesLedger] AS SL
  where upper(SL.Company) = 'AXHSE'
   -- LEFT JOIN ( SELECT DISTINCT 
			--SalesInvoiceNum AS SIM
			--,LinkToOriginalInvoice 
			--FROM [stage].[AXI_HQ_GeneralLedger]
			--where SalesInvoiceNum IS NOT NULL ) AS SLLink	ON SLLink.SIM = SL.SalesInvoiceNum
GO
PRINT N'Creating [dm_DEMO].[fctPurchaseOrder]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW  [dm_DEMO].[fctPurchaseOrder] as 
SELECT 

[PurchaseOrderID]
,[PurchaseOrderNumID]
,[PurchaseInvoiceID]
,[CompanyID]
,[SupplierID]
,[CustomerID]
,[PartID]
,[WarehouseID]
,[CurrencyID]
,[PurchaseOrderDateID]
,[PurchaseInvoiceDateID]
,[Company]
,[PurchaseOrderNum]
,[PurchaseOrderLine]
,[PurchaseOrderSubLine]
,[PurchaseOrderType]
,[PurchaseOrderDate]
,[PurchaseOrderStatus]
,[OrgReqDelivDate]
,[CommittedDelivDate]
,[CommittedShipDate]
,[ActualDelivDate]
,[ReqDelivDate]
,[PurchaseInvoiceNum]
,[PartNum]
,[SupplierNum]
,[SupplierPartNum]
,[SupplierInvoiceNum]
,[DelivCustomerNum]
,[PartStatus]
,[OrderQty]
,[ReceiveQty]
,[InvoiceQty]
,[MinOrderQty]
,[UoM]
,[UnitPrice]
,[DiscountPercent]
,[DiscountAmount]
,[ExchangeRate]
,[Currency]
,[PurchaserName]
,[WarehouseCode]
,[ReceivingNum]
,[DelivTime]
,[PurchaseChannel]
,[Documents]
,[Comments]
,[PORes1]
,[PORes2]
,[PORes3]
,[InvoiceStatus]
,[DaysSinceOrder]
,[OrgCommittedDelivDate]
,[IsOrderClosed]

FROM dm.FactPurchaseOrder

WHERE Company  in ('DEMO')
GO
PRINT N'Creating [stage].[WID_EE_PurchaseOrder]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[WID_EE_PurchaseOrder]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [varchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[LineType] [nvarchar] (50) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[InvoiceSupplierCode] [nvarchar] (50) NULL,
[DelivCustCode] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[ItemType] [int] NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[OrderedQty] [decimal] (18, 4) NULL,
[ReceivedQty] [decimal] (18, 4) NULL,
[InvoicedQty] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[CommittedDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[ReqDelivDate] [date] NULL,
[DelivDate] [date] NULL,
[OrgReqDelivDate] [date] NULL,
[PurchaserName] [nvarchar] (50) NULL,
[RecievingNumber] [nvarchar] (50) NULL,
[LeadTime] [nvarchar] (50) NULL,
[Comments] [nvarchar] (max) NULL,
[WarehouseCode] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vWID_EE_PurchaseOrder]'
GO
CREATE VIEW [stage].[vWID_EE_PurchaseOrder] AS
--COMMENT EMPTY FIELDS  // ADD TRIM() UPPER() INTO CustomerID 22-12-27  VA
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(PartNum), '#', TRIM(InvoiceNum)))) AS PurchaseOrderID 
	,CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(PurchaseOrderNum), '#', TRIM(PartNum), '#', TRIM(InvoiceNum)) AS PurchaseOrderCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(PurchaseOrderNum)))) AS PurchaseOrderNumID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(InvoiceNum)))) AS PurchaseInvoiceID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',TRIM([Currency]))) AS CurrencyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(DelivCustCode))))) AS CustomerID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(DelivCustCode)))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierCode))))) AS SupplierID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(SupplierCode)))) AS SupplierID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(PartNum)))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',TRIM([Company]))) AS CompanyID
	,PartitionKey

	,Company
	,TRIM(PurchaseOrderNum) AS PurchaseOrderNum
	,TRIM(PurchaseOrderLine) AS PurchaseOrderLine
	,TRIM(PurchaseOrderSubLine) AS PurchaseOrderSubLine
	,TRIM(OrderType) AS PurchaseOrderType
	,OrderDate AS PurchaseOrderDate
	,CASE WHEN InvoiceNum IS NULL or InvoiceNum = '' THEN 'Open' ELSE 'Closed' END AS PurchaseOrderStatus --DZ 20210806
	,OrgReqDelivDate
	,CommittedDelivDate
	,ActualDelivDate
	,ReqDelivDate
	,TRIM(InvoiceNum) AS PurchaseInvoiceNum
	,TRIM(PartNum) AS PartNum
	,TRIM(SupplierCode) AS SupplierNum
	,TRIM(PartNum) AS SupplierPartNum
	,TRIM(InvoiceNum) AS SupplierInvoiceNum
	,TRIM(DelivCustCode) AS DelivCustomerNum
	--,NULL AS PartStatus
	,OrderedQty AS PurchaseOrderQty
	,ReceivedQty AS ReceiveQty
	,InvoicedQty AS InvoiceQty
	--,NULL AS MinOrderQty
	--,'' AS UoM
	,UnitPrice
	,DiscountPercent
	,InvoicedQty*UnitPrice*DiscountPercent/100 AS DiscountAmount
	--,NULL AS LandedCost
	,ExchangeRate
	,CASE WHEN Currency = '15' THEN 'EUR' WHEN Currency = '2' THEN 'USD' ELSE Currency END AS Currency
	,TRIM(PurchaserName) AS PurchaserName
	,TRIM(WarehouseCode) AS WarehouseCode
	,RecievingNumber AS ReceivingNum
	,LeadTime AS DelivTime
	--,NULL AS PurchaseChannel
	,CONVERT(NVARCHAR(50),ItemType) AS Documents
	,TRIM(Comments) AS Comments
	--,'' AS PORes1
	--,'' AS PORes2
	--,'' AS PORes3
FROM 
	[stage].[WID_EE_PurchaseOrder]

--GROUP BY
--	PartitionKey, Company, PurchaseOrderNum, PurchaseOrderLine, PurchaseOrderSubLine, SupplierCode, DelivCustCode, LineType, InvoiceNum, PartNum, OrderType, UnitPrice, DiscountPercent, OrderedQty, ReceivedQty, InvoicedQty, TotalMiscChrg, ExchangeRate, Currency, ItemType, OrderDate, OrgReqDelivDate, CommittedDelivDate, ActualDelivDate, DelivDate, ReqDelivDate, PurchaserName, RecievingNumber, LeadTime, Comments, WarehouseCode, InvoiceSupplierCode
GO
PRINT N'Creating [stage].[CER_SE_CustomerAgreement]'
GO
CREATE TABLE [stage].[CER_SE_CustomerAgreement]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[AgreementCode] [nvarchar] (50) NULL,
[AgreementDescription] [nvarchar] (50) NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DelivTime] [nvarchar] (10) NULL,
[Currency] [nvarchar] (10) NULL,
[AgreementStart] [date] NULL,
[AgreementEnd] [date] NULL
)
GO
PRINT N'Creating [stage].[vCER_SE_CustomerAgreement]'
GO





CREATE VIEW [stage].[vCER_SE_CustomerAgreement] AS 
-- Checked TO 2023-02-16
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM(AgreementCode),'#',TRIM([PartNum]),'#',TRIM(CustomerNum))))) AS CustomerAgreementID --CustomerAgreementID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID  
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM([Currency])))) AS CurrencyID
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM(CustomerNum)) AS CustomerNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,AgreementCode
	,AgreementDescription
	,DiscountPercent
	,MAX([UnitPrice]) AS [UnitPrice]
	,0 AS AgreementQty
	,UPPER(TRIM([Currency])) AS Currency
	,[DelivTime]
	,AgreementStart
	,AgreementEnd
	,0	AS FulfilledQty
	,0  AS RemainingQty
	--,''	AS UoM
	--,'' AS CustomerTerms
	--,'' AS CARes1
	--,'' AS CARes2
	--,'' AS CARes3

	
FROM 
	[stage].[CER_SE_CustomerAgreement]
GROUP BY [PartitionKey], [Company], AgreementCode, AgreementDescription, [Currency], [PartNum], CustomerNum, [DiscountPercent], [DelivTime], AgreementStart, AgreementEnd
--WHERE 
--	RecordType = 'D'
GO
PRINT N'Creating [stage].[OCS_SE_Customer]'
GO
CREATE TABLE [stage].[OCS_SE_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[MainCustomerName] [nvarchar] (100) NULL,
[CustomerName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[City] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[Email] [nvarchar] (100) NULL,
[District] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[Division] [nvarchar] (50) NULL,
[CustomerIndustry] [nvarchar] (50) NULL,
[CustomerSubIndustry] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[SalesPersonResponsible] [nvarchar] (100) NULL,
[VATRegNo] [nvarchar] (50) NULL,
[Res1_SellerCode] [nvarchar] (100) NULL,
[Res2_SalesChannel] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vOCS_SE_Customer]'
GO

CREATE VIEW [stage].[vOCS_SE_Customer] AS
--COMMENT EMPTY FIELDS // ADD UPPER()TRIM() INTO CustomerID 2022-12-21 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
--	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustomerNum)))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONCAT(Company, '#', TRIM([CustomerNum])) AS CustomerCode
	,PartitionKey

	,Company
	,TRIM(CustomerNum) AS [CustomerNum]
	,MainCustomerName
    ,[dbo].[ProperCase](CustomerName) AS CustomerName
	,LEFT([AddressLine1], 100) AS [AddressLine1]
	,LEFT([AddressLine2], 100) AS [AddressLine2]
	,LEFT([AddressLine3], 100) AS [AddressLine3]
	,[TelephoneNumber1] AS [TelephoneNum1]
	--,'' AS [TelephoneNum2]
	,[Email]
	,[ZipCode]
	,CASE WHEN [City] = ' '	AND LEFT(AddressLine3, 1) IN ('1','2','3','4','5','6','7','8','9') THEN trim(substring(replace([dbo].[ProperCase](AddressLine3),' ', ''), 6, 100)) ELSE [dbo].[ProperCase]([City]) end AS [City]
	,[State]
	,[District] AS SalesDistrict
	,case when len(TRIM(customer.[CountryCode])) = 3 then cc.[Alpha-2 code]
	 else isnull(nullif(TRIM(customer.CountryCode),''),'SE')
	 end as CountryCode
	,[dbo].[ProperCase](customer.[CountryName]) AS [CountryName]
	,Division
	,CustomerIndustry
	,CustomerSubIndustry
	,[AddressLine3] AS [AddressLine]
	,CONCAT([dbo].[ProperCase](TRIM(customer.[CountryName])), + ',  ' + [dbo].[ProperCase](TRIM([City])), + ',  ' + TRIM([ZipCode]), + ',  ' + trim(addressline3)) AS [FullAddressLine]
	,[CustomerGroup] -- Belongs to Gr3
	,[CustomerSubGroup] -- SellerID
	,[SalesRepCode] AS SalesPersonCode
	,[dbo].[ProperCase](SalesPersonName) AS [SalesPersonName]
	,[SalesPersonResponsible]
	,NULLIF(TRIM([VATRegNo]),'') AS [VATNum]
	--,'' AS OrganizationNum
	--,'' [AccountNum] 
	--,'' [InternalExternal]
	,Res1_SellerCode AS [CustomerScore]
	,Res2_SalesChannel AS [CustomerType]
FROM [stage].[OCS_SE_Customer] as customer
	LEFT JOIN dbo.CountryCodes as cc
		on customer.CountryCode = cc.[Alpha-2 code]
GO
PRINT N'Creating [stage].[AXL_DK_Customer]'
GO
CREATE TABLE [stage].[AXL_DK_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[MainCustomerName] [nvarchar] (100) NULL,
[CustomerName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[AddressLine] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (20) NULL,
[TelephoneNumber2] [nvarchar] (20) NULL,
[Email] [nvarchar] (100) NULL,
[City] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[Division] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (50) NULL,
[CustomerIndustry] [nvarchar] (50) NULL,
[CustomerSubIndustry] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNo] [nvarchar] (50) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[CustomerABC] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[SalesPersonResponsible] [nvarchar] (50) NULL,
[CustomerType] [nvarchar] (50) NULL,
[Res1] [nvarchar] (50) NULL,
[Res2] [nvarchar] (50) NULL,
[Res3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXL_DK_Customer]'
GO


CREATE VIEW [stage].[vAXL_DK_Customer] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustomerNum))) )) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,UPPER(CONCAT([Company], '#', TRIM([CustomerNum]))) AS CustomerCode
	,PartitionKey

	,UPPER(Company) AS Company
	,UPPER(TRIM(CustomerNum)) AS [CustomerNum]
	,TRIM(MainCustomerName) AS MainCustomerName
	,TRIM(CustomerName) AS  [CustomerName]
	,TRIM([AddressLine1]) AS [AddressLine1]
	,TRIM([AddressLine2]) AS [AddressLine2]
	,TRIM([AddressLine3]) AS [AddressLine3]
	,TRIM([TelephoneNumber1]) AS [TelephoneNum1]
	,TRIM([TelephoneNumber2]) AS [TelephoneNum2]
	,TRIM([Email]) AS [Email]
	,TRIM([ZipCode]) AS [ZipCode]
	,TRIM([City]) AS [City]
	,TRIM([State]) AS [State]
	,TRIM([District]) AS [SalesDistrict]
	,TRIM(con.CountryName) AS CountryName
	,TRIM([ISOAlpha2Code]) AS [CountryCode]
	,TRIM([Division]) AS [Division]
	,TRIM([CustomerIndustry]) AS [CustomerIndustry]
	,TRIM([CustomerSubIndustry]) AS [CustomerSubIndustry]
	,TRIM([AddressLine3]) AS [AddressLine]
	,CONCAT(TRIM(con.CountryName), + ',  ' + TRIM([City]), + ',  ' + TRIM([ZipCode]), + ',  ' + TRIM(addressline3)) AS [FullAddressLine]
	,TRIM(CustomerGroup) AS [CustomerGroup]
	,TRIM(CustomerGroup) AS [CustomerSubGroup]
	,TRIM([SalesRepCode]) AS [SalesPersonCode]
	,TRIM(SalesPersonName) AS [SalesPersonName]
	,TRIM([SalesPersonResponsible]) AS [SalesPersonResponsible]
	,TRIM([VATRegNo]) AS [VATNum]
	,TRIM([AccountString]) AS [AccountNum]
	,TRIM([InternalExternal]) AS [InternalExternal]
	,TRIM([CustomerABC]) AS [CustomerScore]
	,TRIM([CustomerType]) AS [CustomerType]
FROM [stage].[AXL_DK_Customer] com
	LEFT JOIN dbo.Country con ON com.CountryName = con.[ISOAlpha2Code]

--GROUP BY
--	PartitionKey, Company, CustomerNum, CustomerName, MainCustomerName, [AddressLine1], [AddressLine2], [AddressLine3], [TelephoneNumber1], [TelephoneNumber2], [Email], [ZipCode], [City], [State], [District], [CountryName], [Division], [CustomerIndustry], [CustomerSubIndustry], CustomerGroup, [SalesRepCode], SalesPersonName, [SalesPersonResponsible], [VATRegNo], [AccountString], [InternalExternal], [CustomerABC], [CustomerType]

--	Stagetablename in ('AXL_AU_Customer', 'AXL_DC_Customer', 'AXL_HU_Customer', 'AXL_IE_Customer', 'AXL_PL_Customer', 'AXL_PT_Customer', 'AXL_UK_Customer')
GO
PRINT N'Creating [stage].[CER_LT_StockBalance]'
GO
CREATE TABLE [stage].[CER_LT_StockBalance]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[Currency] [nvarchar] (50) NULL,
[BinNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (70) NOT NULL,
[DelivTime] [int] NULL,
[LastStockTakeDate] [date] NULL,
[LastStdCostCalDate] [date] NULL,
[MaxStockQty] [decimal] (18, 4) NULL,
[StockBalance] [decimal] (18, 4) NULL,
[StockValue] [decimal] (18, 4) NULL,
[ReserveQty] [decimal] (18, 4) NULL,
[BackOrderQty] [decimal] (18, 4) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[StockTakeDiff] [decimal] (18, 4) NULL,
[ReOrderLevel] [decimal] (18, 4) NULL,
[OptimalOrderQty] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vCER_LT_StockBalance]'
GO
CREATE VIEW [stage].[vCER_LT_StockBalance] AS

SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]),'#',TRIM([WarehouseCode])  /*,'#',TRIM(BatchNum),'#', BinNum, '#', [LastStockTakeDate]   Comented due to history/duplicate rows /SM 2021-04-16*/)))) AS ItemWarehouseID
	,UPPER(CONCAT([Company],'#',TRIM([PartNum]),'#',TRIM([WarehouseCode]))) AS ItemWarehouseCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID -- var '0000000'
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([WarehouseCode])) AS WarehouseCode
	,Currency
	,BinNum
	,BatchNum
	,UPPER(TRIM([SupplierNum])) AS SupplierNum
	,UPPER(TRIM([PartNum])) AS PartNum
	,[DelivTime]
	,convert(date, [LastStockTakeDate]) AS LastStockTakeDate
	,convert(date, LastStdCostCalDate) AS LastStdCostCalDate
	--,0 AS SafetyStock
	,MaxStockQty
	,[StockBalance]
	,StockValue
	--,0 AS AvgCost
	,[ReserveQty]
	,[BackOrderQty]
	,[OrderQty]
	,[StockTakeDiff]
	,[ReOrderLevel]
	,[OptimalOrderQty]
	--,'' AS SBRes1
	--,'' AS SBRes2
	--,'' AS SBRes3
FROM 
	[stage].[CER_LT_StockBalance]
GROUP BY
	[PartitionKey], [Company], [PartNum], [WarehouseCode], [StockBalance], [ReserveQty], [BackOrderQty], [OrderQty], [StockTakeDiff], [ReOrderLevel], BinNum, [SupplierNum], [DelivTime], [LastStockTakeDate], LastStdCostCalDate,
	BatchNum, StockValue, [OptimalOrderQty], MaxStockQty,Currency
GO
PRINT N'Creating [dm_TS].[dimWarehouse]'
GO









CREATE VIEW [dm_TS].[dimWarehouse] AS

SELECT 
[WareHouseID]
,[CompanyID]
,[Company]
,[WarehouseCode]
,[WarehouseName]
,[WarehouseDistrict]
,[WarehouseAddress]
,[WarehouseDescription]
,[WarehouseType]
,[WarehouseCountry]
,[WarehouseSite]
FROM [dm].[DimWareHouse] /*temp putting (CERPL) Certex PL here such that they see the data in same company*/
WHERE [Company] in (
'FESFORA'
, 'FSEFORA'
, 'FFRFORA'
, 'FORPL'
, 'CERPL'
, 'FFRGPI'
, 'FFRLEX'
, 'IFIWIDN'
, 'IEEWIDN'
, 'TMTFI'
, 'TMTEE'
, 'FITMT'
, 'EETMT'
, 'ABKSE'
, 'ROROSE'
,'STESE'
,'CERBG'
,'FORBG'
)
GO
PRINT N'Creating [stage].[BELL_SI_Part]'
GO
CREATE TABLE [stage].[BELL_SI_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartDescription] [nvarchar] (max) NULL,
[PartDescription2] [nvarchar] (max) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[ProductGroup2] [nvarchar] (50) NULL,
[CommodityCode] [nvarchar] (50) NULL,
[CountryOfOrigin] [nvarchar] (50) NULL,
[NetWeight] [decimal] (18, 4) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[Barcode] [nvarchar] (50) NULL,
[ReorderLevel] [decimal] (18, 4) NULL,
[Vendor] [nvarchar] (50) NULL,
[InventoryPostingGroup] [nvarchar] (50) NULL,
[ShelfNo] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vBELL_SI_Part]'
GO
CREATE VIEW [stage].[vBELL_SI_Part] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT([Company],'#',IIF(LEFT(TRIM([PartNum]), 1) = 'I', SUBSTRING(TRIM([PartNum]), 2, 50), TRIM([PartNum])))))) AS PartID
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company],'#',IIF(LEFT(TRIM([PartNum]), 1) = 'I', SUBSTRING(TRIM([PartNum]), 2, 50), TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [Company])) AS CompanyID
	,CONCAT([Company], '#', IIF(LEFT(TRIM([PartNum]), 1) = 'I', SUBSTRING(TRIM([PartNum]), 2, 50), TRIM([PartNum]))) AS PartCode
	,PartitionKey

	,[Company]
	,IIF(LEFT(TRIM([PartNum]), 1) = 'I', SUBSTRING(TRIM([PartNum]), 2, 50), TRIM([PartNum])) AS [PartNum]
	--,'' AS [PartName]

	,[PartDescription]
	,[PartDescription2]
	--,'' AS [PartDescription3]
	,Vendor AS MainSupplier -- Bell added on 2022-12-07
	--,NULL AS AlternativeSupplier
	,LEFT([ProductGroup], 45) AS [ProductGroup]
	,LEFT([ProductGroup2], 45) AS [ProductGroup2]
	,InventoryPostingGroup AS [ProductGroup3] -- Bell added on 2022-12-07
	--,'' AS [ProductGroup4]
	--,'' AS [Brand]
	,[CommodityCode]
	,ShelfNo AS PartReplacementNum-- Bell added on 2022-12-07
	--,'' AS PartStatus
	,[CountryOfOrigin]
	,[NetWeight]
	--,'' AS UoM
	--,'' AS [Material]
	,[Barcode]
	,[ReorderLevel]
	--,'' AS PartResponsible
	--,'' AS [StartDate]
	--,'' AS [EndDate]
FROM [stage].[BELL_SI_Part]
GO
PRINT N'Creating [dm_DEMO].[fctSalesOrder]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO

CREATE VIEW [dm_DEMO].[fctSalesOrder] AS


SELECT 
[SalesOrderID]
,[SalesOrderNumID]
,[CustomerID]
,[CompanyID]
,[PartID]
,[WarehouseID]
,[ProjectID]
,[SalesPersonNameID]
,[DepartmentID]
,[SalesOrderDateID]
,[Company]
,[CustomerNum]
,[SalesOrderNum]
,[SalesOrderLine]
,[SalesOrderSubLine]
,[SalesOrderType]
,[SalesOrderCategory]
,[SalesOrderDate]
,[NeedbyDate]
,[ExpDelivDate]
,[ConfirmedDelivDate]
,[SalesInvoiceNum]
,[SalesOrderQty]
,[DelivQty]
,[RemainingQty]
,[UoM]
,[UnitPrice]
,[UnitCost]
,[Currency]
,[ExchangeRate]
,[OpenRelease]
,[OrderStatus]
,[DiscountAmount]
,[DiscountPercent]
,[PartNum]
,[PartType]
,[PartStatus]
,[SalesPersonName]
,[WarehouseCode]
,[SalesChannel]
,[AxInterSalesChannel]
,[Department]
,[ProjectNum]
,[ActualDelivDate]
,[SalesInvoiceQty]
,[TotalMiscChrg]
,[IsUpdatingStock]
,[SORes1]
,[SORes2]
,[SORes3]
,[SORes4]
,[SORes5]
,[SORes6]
FROM dm.FactSalesOrder
WHERE Company  in ('DEMO')
GO
PRINT N'Creating [stage].[FOR_SE_PurchaseOrder]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[FOR_SE_PurchaseOrder]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [varchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[LineType] [nvarchar] (50) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[InvoiceSupplierCode] [nvarchar] (50) NULL,
[DelivCustCode] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[ItemType] [int] NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[OrderedQty] [decimal] (18, 4) NULL,
[ReceivedQty] [decimal] (18, 4) NULL,
[InvoicedQty] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[CommitedDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[ReqDelivDate] [date] NULL,
[DelivDate] [date] NULL,
[OrgReqDelivDate] [date] NULL,
[PurchaserName] [nvarchar] (50) NULL,
[LeadTime] [nvarchar] (50) NULL,
[Comments] [nvarchar] (max) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[PurchaseOrderStatus] [nvarchar] (50) NULL,
[Documents] [nvarchar] (50) NULL,
[SupplierPartNum] [nvarchar] (50) NULL,
[MinOrderQty] [decimal] (18, 4) NULL,
[LandedCostPercent] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vFOR_SE_PurchaseOrder]'
GO
CREATE VIEW [stage].[vFOR_SE_PurchaseOrder] AS
--COMMENT EMPTY FIELDS 2022-12-20 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(PurchaseOrderSubLine))))) AS PurchaseOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(InvoiceNum))))) AS PurchaseInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(DelivCustCode))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierCode))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([CurrencyCode])))) AS CurrencyID
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierCode),'#',TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#',TRIM(PurchaseOrderSubLine) )) AS PurchaseOrderCode
	,PartitionKey

	,UPPER(TRIM(Company)) AS Company
	,UPPER(TRIM(PurchaseOrderNum)) AS PurchaseOrderNum
	,UPPER(TRIM(PurchaseOrderLine)) AS PurchaseOrderLine
	,UPPER(TRIM(PurchaseOrderSubLine)) AS PurchaseOrderSubLine
	,TRIM(OrderType) AS PurchaseOrderType
	,CASE WHEN InvoiceNum IS NULL or InvoiceNum = '' THEN 'Open' ELSE 'Closed' END AS PurchaseOrderStatus --DZ 20210806
--	,PurchaseOrderStatus
	,OrderDate AS PurchaseOrderDate
	,OrgReqDelivDate AS OrgReqDelivDate
	,CommitedDelivDate AS CommittedDelivDate
	,ActualDelivDate AS ActualDelivDate
	,DelivDate AS DelivDate
	,ReqDelivDate AS ReqDelivDate
	,UPPER(TRIM(InvoiceNum)) AS PurchaseInvoiceNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,UPPER(TRIM(SupplierCode)) AS SupplierNum
	,SupplierPartNum
	--,'' AS [SupplierInvoiceNum]
	,UPPER(TRIM(DelivCustCode)) AS DelivCustomerNum
	--,'' AS PartStatus
	,OrderedQty AS PurchaseOrderQty
	,ReceivedQty AS ReceiveQty
	,InvoicedQty AS InvoiceQty
	,MinOrderQty
	--,'' AS UoM
	,UnitPrice AS UnitPrice
	,DiscountPercent AS DiscountPercent
	,0 AS DiscountAmount
	,LandedCostPercent/100.0 * InvoicedQty * UnitPrice AS LandedCost 
	,ExchangeRate
	,CurrencyCode AS Currency
	,TRIM(PurchaserName) AS PurchaserName
	,TRIM(WarehouseCode) AS WarehouseCode
	--,'' AS ReceivingNum
	,LeadTime AS DelivTime
	--,'' AS PurchaseChannel
	,Documents
	,TRIM(Comments) AS Comments
	--,'' AS PORes1
	--,'' AS PORes2
	--,'' AS PORes3
	,CASE WHEN CONVERT(NVARCHAR(50),TRIM([LineType])) like '0' THEN 'Stock Item Line' WHEN CONVERT(NVARCHAR(50),TRIM([LineType])) like '1' THEN 'Non Stock Item Line' ELSE NULL END AS [LineType]
	,TotalMiscChrg AS TotalMiscChrg
	,CONVERT(NVARCHAR(50),ItemType) AS ItemType
	--,'' AS DaysSincePOrder
	--,POLine.PORes1 AS PORes1
	--,POLine.PORes2 AS PORes2
	--,POLine.PORes3 AS PORes3
	--,POHead.PHRes1 AS PHRes1
	--,POHead.PHRes2 AS PHRes2
	--,POHead.PHRes3 AS PHRes3
FROM 
	[stage].[FOR_SE_PurchaseOrder]
	/*
GROUP BY
	PartitionKey, Company, PurchaseOrderNum, PurchaseOrderLine, PurchaseOrderSubLine,PurchaseOrderStatus,  SupplierCode, DelivCustCode, LineType, InvoiceNum, PartNum, SupplierPartNum, OrderType, UnitPrice, OrderedQty, ReceivedQty, InvoicedQty, MinOrderQty, TotalMiscChrg, LandedCostPercent, ExchangeRate, CurrencyCode, ItemType, OrderDate, OrgReqDelivDate, CommitedDelivDate, ReqDelivDate, PurchaserName, Documents, Comments, WarehouseCode --, DelivDate,  LeadTime, ActualDelivDate, DiscountPercent
	*/
GO
PRINT N'Creating [stage].[TRA_SE_PurchaseInvoice]'
GO
CREATE TABLE [stage].[TRA_SE_PurchaseInvoice]
(
[PartitionKey] [nvarchar] (25) NULL,
[Company] [nvarchar] (8) NULL,
[PurchaseInvoiceNum] [nvarchar] (25) NULL,
[PurchaseOrderNum] [nvarchar] (60) NULL,
[PurchaseOrderLine] [nvarchar] (60) NULL,
[PurchaseOrderType] [nvarchar] (50) NULL,
[PurchaseInvoiceType] [nvarchar] (50) NULL,
[PurchaseInvoiceDate] [nvarchar] (60) NULL,
[ActualRecieveDate] [nvarchar] (60) NULL,
[IsInvoiceClosed] [nvarchar] (6) NULL,
[SupplierNum] [nvarchar] (20) NULL,
[PartNum] [nvarchar] (30) NULL,
[PurchaseInvoiceQty] [nvarchar] (60) NULL,
[UnitPrice] [nvarchar] (60) NULL,
[DiscountPercent] [nvarchar] (60) NULL,
[DiscountAmount] [nvarchar] (60) NULL,
[VATAmount] [nvarchar] (60) NULL,
[ExchangeRate] [nvarchar] (60) NULL,
[Currency] [nvarchar] (3) NULL,
[IsCreditMemo] [nvarchar] (1) NULL,
[PurchaserName] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (8) NULL,
[CreatedTimeStamp] [nvarchar] (60) NULL,
[ModifiedTimeStamp] [nvarchar] (60) NULL,
[IsActiveRecord] [nvarchar] (1) NULL
)
GO
PRINT N'Creating [stage].[vTRA_SE_PurchaseInvoice]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vTRA_SE_PurchaseInvoice]
	AS select 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseInvoiceNum), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(SupplierNum))))) AS PurchaseInvoiceID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',upper(CONCAT(Company,'#',TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM(PurchaseOrderNum),'#',TRIM(PurchaseOrderLine),'#')))) AS PurchaseOrderID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',upper(TRIM([Company])))) AS CompanyID,
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([SupplierNum]))))) AS SupplierID,
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM([PartNum]))))) AS PartID,
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM([WarehouseCode]))))) AS WarehouseID,
	--CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum), '#', TRIM(journal))))) AS PurchaseLedgerID,
	CONVERT(int, replace(CONVERT(date, left(PurchaseInvoiceDate,10)),'-','')) AS PurchaseInvoiceDateID

	,PartitionKey
	,UPPER(Company) as Company
	,trim(PurchaseInvoiceNum) as PurchaseInvoiceNum
	,trim(PurchaseOrderNum) as PurchaseOrderNum
	,trim(PurchaseOrderLine) as PurchaseOrderLine
	,trim(PurchaseOrderType) as PurchaseOrderType
	,cast(PurchaseInvoiceDate as date) as PurchaseInvoiceDate
	,cast(ActualRecieveDate as date) as ActualRecieveDate
	,cast(IsInvoiceClosed as bit)  as IsInvoiceClosed
	,trim(SupplierNum) as SupplierNum
	,trim(PartNum) as PartNum
	,cast(PurchaseInvoiceQty as decimal(18,4)) as PurchaseInvoiceQty
	,cast(UnitPrice as decimal(18,4)) as UnitPrice
	,cast(DiscountPercent as decimal(18,4)) as DiscountPercent
	,cast(DiscountAmount as decimal(18,4)) as DiscountAmount
	,cast(VATAmount as decimal(18,4)) as VATAmount
	,cast(ExchangeRate as decimal(18,4)) as ExchangeRate
	,trim(upper(Currency)) as Currency
	,cast(IsCreditMemo as bit) as CreditMemo
	,trim(PurchaserName) as PurchaserName
	,trim(WarehouseCode) as WarehouseCode
	,cast(IsActiveRecord as bit) as IsActiveRecord
from stage.TRA_SE_PurchaseInvoice
;
GO
PRINT N'Creating [axbus].[IOW_PL_Suppliers]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [axbus].[IOW_PL_Suppliers]
(
[Company] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[SupplierName] [nvarchar] (max) NULL,
[AddressLine1] [nvarchar] (max) NULL,
[AddressLine2] [nvarchar] (max) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (50) NULL,
[TelephoneNumber2] [nvarchar] (50) NULL,
[Email] [nvarchar] (max) NULL,
[ZipCode] [nvarchar] (50) NULL,
[City] [nvarchar] (max) NULL,
[State] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[SupplierGroup] [nvarchar] (100) NULL,
[SupplierIndustry] [nvarchar] (100) NULL,
[PrimaryPurchaser] [nvarchar] (100) NULL,
[SupplierResponsible] [nvarchar] (100) NULL,
[VATNum] [nvarchar] (50) NULL,
[OrgNum] [nvarchar] (50) NULL,
[AccountNum] [nvarchar] (50) NULL,
[IsAxInterInternal] [tinyint] NULL,
[CodeOfConduct] [bit] NULL,
[SupplierScore] [nvarchar] (50) NULL,
[IsMaterialSupplier] [bit] NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [datetime2] NULL,
[RecordIsActive] [nvarchar] (50) NULL,
[Website] [nvarchar] (max) NULL,
[Comments] [nvarchar] (max) NULL,
[SRes1] [nvarchar] (50) NULL,
[SRes2] [nvarchar] (50) NULL,
[SRes3] [nvarchar] (50) NULL,
[SRes4] [tinyint] NULL,
[SRes5] [tinyint] NULL
)
GO
PRINT N'Creating [stage].[vIOW_PL_Supplier]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vIOW_PL_Supplier] AS

SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID
    ,UPPER(CONCAT([Company],'#',TRIM([SupplierNum]))) AS SupplierCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,getdate() AS [PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([SupplierNum])) AS SupplierNum
	,'' AS MainSupplierName
	,TRIM(SupplierName) AS SupplierName
	,TRIM([AddressLine1]) AS AddressLine1
    ,TRIM([AddressLine2]) AS AddressLine2
    ,TRIM([AddressLine3]) AS AddressLine3
	,[TelephoneNumber1]
	,[TelephoneNumber2]
	,[Email]
	--,PARSENAME(REPLACE(dbo.SplitAddress(CONCAT(AddressLine1,' ',AddressLine2,' ',AddressLine3)), '^', '.'), 3) AS AddressLine1 -- TRIM([AddressLine1]) AS AddressLine1 2023-04-04 SB & TO 
    ,IIF(TRIM(ZipCode) is Null,PARSENAME(REPLACE(dbo.SplitAddress(CONCAT(AddressLine1,' ',AddressLine2,' ',AddressLine3)), '^', '.'), 2), trim(ZipCode)) AS ZipCode -- ,TRIM([ZipCode]) AS ZipCode 2023-04-04 SB & TO 
    ,IIF(TRIM(City) IN (Null,''),PARSENAME(REPLACE(dbo.SplitAddress(CONCAT(AddressLine1,' ',AddressLine2,' ',AddressLine3)), '^', '.'), 1), trim(City)) AS City -- ,TRIM([ZipCode]) AS ZipCode 2023-04-04 SB & TO 
	,'' AS District
	,IIF(CountryName is null, 'PL', CountryCode) AS CountryCode
    ,IIF(CountryName is null, 'Poland', CountryName) AS CountryName
	,'' AS [Region] 
	,'' AS SupplierCategory 
	,TRIM([SupplierResponsible]) AS SupplierResponsible
	,TRIM(concat (addressline1+' '+ addressline2, null)) AS AddressLine
	,TRIM(concat_ws(',',coalesce([dbo].[ProperCase](CountryName),null),IIF(City= ' ',null,trim(substring(replace([dbo].[ProperCase](AddressLine3),' ', ''), 6, 100))),IIF(ZipCode= ' ',null,[dbo].[udf_GetNumeric]([Addressline3]))
		,coalesce(IIF([addressline1]= ' ',null,[addressline1]),IIF([addressline2]= ' ',null,[addressline2]))
		,coalesce(IIF([addressline2]= ' ',null,[addressline2]),IIF([addressline3]= ' ',null,[addressline3])))) AS FullAddressLine
	,TRIM([AccountNum]) AS [AccountNum]
	,TRIM([VATNum]) AS [VATNum]
	,TRIM(OrgNum) AS OrganizationNum
	,IsAxInterInternal AS [InternalExternal]
	,IsAxInterInternal
	,[CodeOfConduct]
	,'' AS CustomerNum
	,TRIM([SupplierScore]) AS SupplierScore
	,NULL AS [MinOrderQty]
	,NULL AS MinOrderValue	
	,[Website]
	,TRIM([Comments]) AS Comments
	,SRes1
	,SRes2
	,SRes3
	,SRes4
	,SRes5
	,IsMaterialSupplier
FROM [axbus].[IOW_PL_Suppliers]
GROUP BY 
      [Company], [SupplierNum], [SupplierName], [AddressLine1], [AddressLine2], [AddressLine3], [City], [ZipCode], [CountryName], CountryCode
	  , [SupplierResponsible], [Comments], [AccountNum], [VATNum], [SupplierScore], [TelephoneNumber1], [TelephoneNumber2], [Email], [Website], [CodeOfConduct]
	  , IsAxInterInternal, OrgNum, SRes1, SRes2, SRes3, SRes4, SRes5, IsMaterialSupplier
GO
PRINT N'Creating [stage].[TMT_FI_ProductionOrder]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[TMT_FI_ProductionOrder]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (50) NULL,
[ProductionOrderNum] [nvarchar] (50) NULL,
[ProductionOrderLineNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[Version] [nvarchar] (50) NULL,
[UoM] [nvarchar] (50) NULL,
[PartType] [nvarchar] (50) NULL,
[ProductionOrderQty] [nvarchar] (50) NULL,
[CompletedQuantity] [nvarchar] (50) NULL,
[RemainingQty] [nvarchar] (50) NULL,
[Status] [nvarchar] (50) NULL,
[ProductionOrderCreateDate] [nvarchar] (50) NULL,
[ProductionStartDate] [nvarchar] (50) NULL,
[ProductionEndDate] [nvarchar] (50) NULL,
[ProductionOrderType] [nvarchar] (50) NULL,
[CostUnitNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[BinNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[SalesOrderNum] [nvarchar] (50) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[ProductionOrderCreaterName] [nvarchar] (50) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vTMT_FI_ProductionOrder]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vTMT_FI_ProductionOrder] AS
	 
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(ProductionOrderNum), '#', TRIM(ProductionOrderLineNum), '#',TRIM(PartNum))))) AS [ProductionOrderID]
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SalesOrderNum))))) AS SalesOrderNumID 
	,getdate() AS [PartitionKey]   
	
	,UPPER(TRIM([Company])) AS Company                                  
	,UPPER(TRIM([ProductionOrderNum])) AS ProductionOrderNum                    
	,UPPER(TRIM([ProductionOrderLineNum])) AS ProductionOrderLineNum                 
	,UPPER(TRIM([PartNum])) AS PartNum                                 
	,[UOM]                                        
	,[PartType]
	,IIF([PartType] = 'Component', -1*ABS(CONVERT(decimal(18,4), Replace(ProductionOrderQty, ',', '.'))), ABS(CONVERT(decimal(18,4), Replace(ProductionOrderQty, ',', '.')))) AS OrderQuantity
	,NULL AS ScrappedQty
	,CONVERT(decimal(18,4), Replace(CompletedQuantity, ',', '.')) AS CompletedQuantity
	,IIF([Status] = 'Completed', 0, CONVERT(decimal(18,4), Replace([RemainingQty], ',', '.'))) AS RemainingQty 
	,CASE WHEN [Status] = 'Completed' THEN 'Completed'
		WHEN [Status] = 'Accepted' THEN 'Approved'
		WHEN [Status] = 'Started' THEN 'Processing'
		ELSE 'Missing Cateogory'
		 END AS [Status]
	,'' AS CurrentOperationStage
	,'' AS CurrentResourceGroup
	,CASE WHEN ProductionOrderCreateDate = '' OR ProductionOrderCreateDate is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, ProductionOrderCreateDate) END AS OrderCreateDate
	,'1900-01-01' AS RequestDate
	,'1900-01-01' AS PlannedStartDate
	,CONVERT(date, ProductionEndDate) AS PlannedEndDate
	,CASE WHEN ProductionStartDate = '' OR ProductionStartDate is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, ProductionStartDate) END AS StartDate
	,CASE WHEN [Status] = 'Completed' THEN ModifiedTimeStamp	ELSE '1900-01-01' END AS EndDate  
	,IIF(ProductionOrderType = 'Stock Filling', 'Made-to-stock', 'Made-to-order') AS [OrderType]  
	,NULL AS TotalHoursSpent 
	,NULL AS TotalHoursPlanned 
	,NULL AS SetupHoursSpent 
	,NULL AS MaterialCost 
	,NULL AS LabourCost 
	,NULL AS OtherCost 
	,'EUR' AS [Currency]
	,1 AS [ExchangeRate]
	,UPPER(TRIM([WarehouseCode])) AS WarehouseCode
	,UPPER(TRIM(BinNum)) AS BinNum
	,UPPER(TRIM(BatchNum)) AS BatchNum
	,UPPER(TRIM(CostUnitNum)) AS CostUnitNum
	,UPPER(TRIM([SalesOrderNum])) AS SalesOrderNum                              
	,UPPER(TRIM([CustomerNum])) AS CustomerNum                          
	,ProductionOrderCreaterName AS ProductionOrderCreaterName
FROM [stage].[TMT_FI_ProductionOrder]
GO
PRINT N'Creating [stage].[SPR_NL_SOLine]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[SPR_NL_SOLine]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (50) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[SalesOrderNum] [nvarchar] (50) NULL,
[SalesOrderSubLine] [nvarchar] (50) NULL,
[SalesOrderType] [varchar] (50) NULL,
[ActualDelivDate] [varchar] (50) NULL,
[SalesInvoiceNum] [nvarchar] (50) NULL,
[SalesInvoiceLine] [nvarchar] (50) NULL,
[UoM] [varchar] (50) NULL,
[UnitPrice] [varchar] (50) NULL,
[UnitCost] [varchar] (50) NULL,
[Currency] [varchar] (50) NULL,
[ExchangeRate] [varchar] (50) NULL,
[DiscountPercent] [varchar] (50) NULL,
[DiscountAmount] [varchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartType] [varchar] (50) NULL,
[WarehouseCode] [varchar] (50) NULL,
[SalesChannel] [varchar] (50) NULL,
[Department] [varchar] (50) NULL,
[ProjectNum] [varchar] (50) NULL,
[IndexKey] [varchar] (50) NULL,
[ctSalesO] [varchar] (50) NULL,
[SalesOrderLine] [varchar] (50) NULL,
[SalesInvoiceType] [varchar] (50) NULL,
[SalesInvoiceDate] [varchar] (50) NULL,
[SalesInvoiceQty] [varchar] (50) NULL,
[CashDiscountOffered] [varchar] (50) NULL,
[CashDiscountUsed] [varchar] (50) NULL,
[TotalMiscChrg] [varchar] (50) NULL,
[VATAmount] [varchar] (50) NULL,
[CreditMemo] [varchar] (50) NULL,
[CostBearerNum] [varchar] (50) NULL,
[CostUnitNum] [varchar] (50) NULL,
[ReturnComment] [varchar] (50) NULL,
[ReturnNum] [varchar] (50) NULL,
[ZipCode] [varchar] (50) NULL,
[City] [varchar] (50) NULL,
[Country] [varchar] (50) NULL,
[SIRes1] [varchar] (50) NULL,
[SIRes2] [varchar] (50) NULL,
[SIRes3] [varchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vSPR_NL_SOLine]'
GO

CREATE VIEW [stage].[vSPR_NL_SOLine] AS
--COMMENT EMPTY FIELDS // ADD TRIM() UPPER() INTO PartID,WarehouseID,CustomerID 23-01-09 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustomerNum), '#', TRIM(SalesOrderNum), '#', TRIM(SalesOrderLine), '#', TRIM(PartNum), '#', TRIM(SalesInvoiceNum), '#', TRIM(SalesInvoiceLine)))) AS SalesInvoiceID --ActualDelivDate is temp fix for duplication --, '#', ActualDelivDate
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(SalesOrderNum), '#', TRIM(SalesOrderLine)))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustomerNum), '#', TRIM(SalesInvoiceNum)))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(SalesOrderNum)))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustomerNum)))) AS CustomerID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(PartNum)))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', '01')))) AS WareHouseID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', '01'))) AS WareHouseID
	,CONCAT(Company, '#', TRIM(CustomerNum), '#', TRIM(SalesOrderNum), '#', TRIM(SalesOrderLine), '#', TRIM(PartNum)) AS SalesOrderCode
	--,CONCAT(Company, '#', TRIM(SalesOrderNum), '#', TRIM(SalesOrderLine), '#', SUBSTRING(TRIM(SalesInvoiceNum), PATINDEX('%[0-9]%', SalesInvoiceNum ), 50)) AS SalesOrderCode -- Added substring + patindex to fix the needbydate etc. in dm salesInvoice /SM 2021-05-31
	,CONVERT(int, CONCAT('20', SUBSTRING([SalesInvoiceDate], 7,2), SUBSTRING([SalesInvoiceDate], 4,2), SUBSTRING([SalesInvoiceDate], 1,2))) AS SalesInvoiceDateID  --Redundant?
	,CONCAT(Company, '#', TRIM(SalesInvoiceNum)) AS SalesInvoiceCode --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey

	,Company
	--,'' AS SalesPersonName
	,TRIM(CustomerNum) AS CustomerNum
	,TRIM(PartNum) AS PartNum
	,PartType
	,TRIM(SalesOrderNum) AS SalesOrderNum
	,TRIM(SalesOrderLine) AS SalesOrderLine
	,SalesOrderSubLine
	,SALESORDERTYPE AS SalesOrderType
	,TRIM(SalesInvoiceNum) AS SalesInvoiceNum -- Added substring + patindex to fix the needbydate etc. in dm salesInvoice /SM 2021-05-31
	,TRIM(SalesInvoiceLine) AS SalesInvoiceLine
	,SALESINVOICETYPE AS SalesInvoiceType
	,CAST(CONCAT('20', SUBSTRING([SalesInvoiceDate], 7,2), '-', SUBSTRING([SalesInvoiceDate], 4,2), '-', SUBSTRING([SalesInvoiceDate], 1,2)) AS Date) AS [SalesInvoiceDate]
	,IIF(MAX([ActualDelivDate]) = '?', '1900-01-01', CAST(CONCAT('20', SUBSTRING(MAX([ActualDelivDate]), 7,2), '-', SUBSTRING(MAX([ActualDelivDate]), 4,2), '-', SUBSTRING(MAX([ActualDelivDate]), 1,2)) AS Date)) AS [ActualDelivDate]
	,UoM
	,CONVERT(decimal(18,4), Replace(SalesInvoiceQty, ',', '.')) AS SalesInvoiceQty
	,IIF(UnitPrice = '?', NULL, CONVERT(decimal(18,4), Replace(UNITPRICE, ',', '.'))) AS UnitPrice --MIN
	,CONVERT(decimal(18,4), Replace(UnitCost, ',', '.')) AS UnitCost
	,CONVERT(decimal(18,4), Replace(DiscountPercent, ',', '.')) AS DiscountPercent
	,CONVERT(decimal(18,4), Replace(SalesInvoiceQty, ',', '.'))*CONVERT(decimal(18,4), Replace(UnitPrice, ',', '.'))*CONVERT(decimal(18,4), Replace(DiscountPercent, ',', '.'))/100 AS DiscountAmount --ABS
	,CONVERT(decimal(18,4), Replace(TotalMiscChrg, ',', '.')) AS TotalMiscChrg
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	,CONVERT(decimal(18,4), Replace(VATAmount, ',', '.')) AS VATAmount
	,CONVERT(decimal(18,4), Replace(ExchangeRate, ',', '.')) AS ExchangeRate
	,Currency
	,CreditMemo
	,SalesChannel
	,Department
	,WarehouseCode
	--,NULL AS DeliveryAddress
	--,'' AS CostBearerNum
	--,'' AS CostUnitNum
	--,'' AS ReturnComment
	,LEFT(ReturnNum, 50) AS ReturnNum
	--,'' AS ProjectNum
	--,'' AS IndexKey
	--,'' AS SIRes1
	--,'' AS SIRes2
	--,'' AS SIRes3

FROM stage.SPR_NL_SOLine
GROUP BY
	PartitionKey, Company,  CustomerNum, PartNum, PartType, SalesOrderNum, SalesOrderLine, SalesOrderType, SalesInvoiceNum, SALESINVOICETYPE, SALESORDERTYPE, SalesInvoiceDate, UoM, SalesInvoiceQty, DiscountPercent, Currency, ExchangeRate, CreditMemo, VATAmount, ReturnNum, UnitPrice, UnitCost, SalesChannel, Department, WarehouseCode, TotalMiscChrg, SalesOrderSubLine, SalesInvoiceLine --, (ActualDelivDate)

--raw data has many issues, the above etl is for that the data can pull into dw for further improvement
GO
PRINT N'Creating [dm_TS].[fctPurchaseLedger]'
GO


CREATE   VIEW [dm_TS].[fctPurchaseLedger] AS
SELECT 
 pl.[PurchaseLedgerID]
,pl.[Company]
,pl.[SupplierNum]
,pl.[PurchaseOrderNum]
,pl.[PurchaseInvoiceNum]
,pl.[PurchaseInvoiceDate]
,pl.[PurchaseDueDate]
,pl.[PurchaseLastPaymentDate]
,pl.[InvoiceAmount]
,pl.[ExchangeRate]
,pl.[Currency]
,pl.[VATAmount]
,pl.[VATCode]
,pl.[PayToName]
,pl.[PayToCity]
,pl.[PayToContact]
,pl.[PaymentTerms]
,pl.[PrePaymentNum]
,pl.[LastPaymentNum]
,pl.[PLRes1]
,pl.[PLRes2]
,pl.[PLRes3]
,pl.[PurchaseLedgerCode]
,pl.[CompanyID]
,pl.[SupplierID]
,pl.[PurchaseInvoiceID]
,pl.[PurchaseOrderNumID]
,pl.[CurrencyID]
,pl.[PurchaseInvoiceDateID]
,pl.[PartitionKey]
,pl.[PaidInvoiceAmount]
,pl.[RemainingInvoiceAmount]
,pl.[AccountingDate]
,pl.[AgingPeriod]
,pl.[AgingSort]
,pl.[VATCodeDesc]
,pl.[LinkToOriginalInvoice]
FROM [dm].[FactPurchaseLedger]  as pl
WHERE pl.Company  IN ('FESFORA', 'FSEFORA', 'FFRFORA', 'FORPL', 'CERPL', 'FFRGPI', 'FFRLEX', 'IFIWIDN', 'IEEWIDN', 'TMTFI', 'TMTEE', 'FITMT', 'EETMT', 'ABKSE', 'ROROSE','STESE')
GO
PRINT N'Creating [stage].[vAXHSE_HQ_CostUnit]'
GO



/****** Script for SelectTopNRows command from SSMS  ******/
CREATE VIEW [stage].[vAXHSE_HQ_CostUnit] AS
SELECT
	   CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', IIF(CostUnitNum='000---',N'000000',CostUnitNum))) )AS CostUnitID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',Company)) AS CompanyID
	  ,CONCAT(Company,'#',IIF(CostUnitNum='000---',N'000000',CostUnitNum)) AS CostUnitCode
	  ,CONVERT(varchar, GETDATE(), 23) AS PartitionKey

      ,[Company]
      ,IIF(CostUnitNum='000---',N'000000',CostUnitNum)	AS [CostUnitNum]
      ,[CostUnitName]
      ,[CostUnitStatus]
      ,[CostUnitGroup]
      ,[CostUnitGroup2]
      ,[CostUnitGroup3]
      ,[CURes1]
      ,[CURes2]
      ,[CURes3]
  FROM [stage].[AXI_HQ_CostUnit]
  where upper(Company) = 'AXHSE'
GO
PRINT N'Creating [dm_DS].[fctStockBalance]'
GO
CREATE VIEW [dm_DS].[fctStockBalance] AS

SELECT 
 sb.[StockBalanceID]
,sb.[CompanyID]
,sb.[SupplierID]
,sb.[PartID]
,sb.[WarehouseID]
,sb.[CurrencyMonthKey]
,sb.[Company]
,sb.[Currency]
,sb.[BinNum]
,sb.[BatchNum]
,sb.[SupplierNum]
,sb.[PartNum]
,sb.[DelivTime]
,sb.[LastStockTakeDate]
,sb.[LastStdCostCalDate]
,sb.[SafetyStock]
,sb.[MaxStockQty]
,sb.[StockBalance]
,sb.[StockValue]
,sb.[AvgCost]
,sb.[ReserveQty]
,sb.[BackOrderQty]
,sb.[OrderQty]
,sb.[StockTakeDiff]
,sb.[ReOrderLevel]
,sb.[OptimalOrderQty]
,sb.[WarehouseCode]
,sb.[SBRes1]
,sb.[SBRes2]
,sb.[SBRes3]
FROM dm.FactStockBalance sb
LEFT JOIN dbo.Company com ON sb.Company = com.Company
WHERE com.BusinessArea = 'Driveline Solutions' AND com.[Status] = 'Active'

--WHERE Company  in ('AFISCM', 'CDKCERT', 'CEECERT','CERDE', 'CFICERT', 'CLTCERT', 'CLVCERT', 'CSECERT', 'CUKCERT', 'CNOEHAU', 'CNOCERT', 'CERPL', 'CyESA', 'HFIHAKL', 'TRACLEV','MENBE14','MENNL01','MENNL02','MENNL03','MENNL04','MENNL07','MENNL11')  -- LS basket
GO
PRINT N'Creating [stage].[HAK_FI_StockBalance]'
GO
CREATE TABLE [stage].[HAK_FI_StockBalance]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[Currency] [nvarchar] (50) NULL,
[BinNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (70) NOT NULL,
[DelivTime] [int] NULL,
[LastStockTakeDate] [date] NULL,
[LastStdCostCalDate] [date] NULL,
[MaxStockQty] [decimal] (18, 4) NULL,
[StockBalance] [decimal] (18, 4) NULL,
[StockValue] [decimal] (18, 4) NULL,
[ReserveQty] [decimal] (18, 4) NULL,
[BackOrderQty] [decimal] (18, 4) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[StockTakeDiff] [decimal] (18, 4) NULL,
[ReOrderLevel] [decimal] (18, 4) NULL,
[OptimalOrderQty] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vHAK_FI_StockBalance]'
GO
CREATE     VIEW [stage].[vHAK_FI_StockBalance] AS

SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]),'#',TRIM([WarehouseCode])/*,'#',TRIM(BatchNum),'#', BinNum, '#', [LastStockTakeDate]*/)))) AS ItemWarehouseID
	,UPPER(CONCAT([Company],'#',TRIM([PartNum]),'#',TRIM([WarehouseCode]))) AS ItemWarehouseCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID -- var '0000000'
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([WarehouseCode])) AS WarehouseCode
	,Currency
	,BinNum
	,BatchNum
	,UPPER(TRIM([SupplierNum])) AS SupplierNum
	,UPPER(TRIM([PartNum])) AS PartNum
	,[DelivTime]
	,convert(date, [LastStockTakeDate]) AS LastStockTakeDate
	,LastStdCostCalDate
	--,0 AS SafetyStock
	,MaxStockQty
	,[StockBalance]
	,StockValue
	--,0 AS AvgCost
	,[ReserveQty]
	,[BackOrderQty]
	,[OrderQty]
	,[StockTakeDiff]
	,[ReOrderLevel]
	,[OptimalOrderQty]
	--,'' AS SBRes1
	--,'' AS SBRes2
	--,'' AS SBRes3
	--,0 AS [FIFOValue]
	,'' AS [DelivTimeToWHS]-- will not be sent out to new companies, not delete in DW for that use as reservation
	,'' AS [DelivTimeDesc]-- will not be sent out to new companies, not delete in DW for that use as reservation
	,'' AS [DaysOnStock]
	,convert(date, '') AS OrderDateSupplier
	,convert(date, '') AS OrderDateCust
	,'' AS BatchNoPrefix-- will not be sent out to new companies, not delete in DW for that use as reservation
	,'' AS BatchNoSuffix-- will not be sent out to new companies, not delete in DW for that use as reservation
	
FROM 
	[stage].[HAK_FI_StockBalance]
GROUP BY
	[PartitionKey],[Company],[PartNum],[WarehouseCode],[StockBalance],[ReserveQty],[BackOrderQty],[OrderQty],[StockTakeDiff],[ReOrderLevel],BinNum,[SupplierNum],[DelivTime], [LastStockTakeDate],LastStdCostCalDate,
	BatchNum, StockValue,[OptimalOrderQty], MaxStockQty,Currency --BatchNoPrefix,BatchNoSuffix,,[DelivTimeToWHS]
GO
PRINT N'Creating [stage].[AXL_DC_Customer]'
GO
CREATE TABLE [stage].[AXL_DC_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[MainCustomerName] [nvarchar] (100) NULL,
[CustomerName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[AddressLine] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (20) NULL,
[TelephoneNumber2] [nvarchar] (20) NULL,
[Email] [nvarchar] (100) NULL,
[City] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[Division] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (50) NULL,
[CustomerIndustry] [nvarchar] (50) NULL,
[CustomerSubIndustry] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNo] [nvarchar] (50) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[CustomerABC] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[SalesPersonResponsible] [nvarchar] (50) NULL,
[CustomerType] [nvarchar] (50) NULL,
[Res1] [nvarchar] (50) NULL,
[Res2] [nvarchar] (50) NULL,
[Res3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXL_DC_Customer]'
GO


CREATE VIEW [stage].[vAXL_DC_Customer] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustomerNum))) )) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,UPPER(CONCAT([Company], '#', TRIM([CustomerNum]))) AS CustomerCode
	,PartitionKey

	,UPPER(Company) AS Company
	,UPPER(TRIM(CustomerNum)) AS [CustomerNum]
	,TRIM(MainCustomerName) AS MainCustomerName
	,TRIM(CustomerName) AS  [CustomerName]
	,TRIM([AddressLine1]) AS [AddressLine1]
	,TRIM([AddressLine2]) AS [AddressLine2]
	,TRIM([AddressLine3]) AS [AddressLine3]
	,TRIM([TelephoneNumber1]) AS [TelephoneNum1]
	,TRIM([TelephoneNumber2]) AS [TelephoneNum2]
	,TRIM([Email]) AS [Email]
	,TRIM([ZipCode]) AS [ZipCode]
	,TRIM([City]) AS [City]
	,TRIM([State]) AS [State]
	,TRIM([District]) AS [SalesDistrict]
	,TRIM(con.CountryName) AS CountryName
	,TRIM([ISOAlpha2Code]) AS [CountryCode]
	,TRIM([Division]) AS [Division]
	,TRIM([CustomerIndustry]) AS [CustomerIndustry]
	,TRIM([CustomerSubIndustry]) AS [CustomerSubIndustry]
	,TRIM([AddressLine3]) AS [AddressLine]
	,CONCAT(TRIM(con.CountryName), + ',  ' + TRIM([City]), + ',  ' + TRIM([ZipCode]), + ',  ' + TRIM(addressline3)) AS [FullAddressLine]
	,TRIM(CustomerGroup) AS [CustomerGroup]
	,TRIM(CustomerGroup) AS [CustomerSubGroup]
	,TRIM([SalesRepCode]) AS [SalesPersonCode]
	,TRIM(SalesPersonName) AS [SalesPersonName]
	,TRIM([SalesPersonResponsible]) AS [SalesPersonResponsible]
	,TRIM([VATRegNo]) AS [VATNum]
	,TRIM([AccountString]) AS [AccountNum]
	,TRIM([InternalExternal]) AS [InternalExternal]
	,TRIM([CustomerABC]) AS [CustomerScore]
	,TRIM([CustomerType]) AS [CustomerType]
FROM [stage].[AXL_DC_Customer] com
	LEFT JOIN dbo.Country con ON com.CountryName = con.[ISOAlpha2Code]

--GROUP BY
--	PartitionKey, Company, CustomerNum, CustomerName, MainCustomerName, [AddressLine1], [AddressLine2], [AddressLine3], [TelephoneNumber1], [TelephoneNumber2], [Email], [ZipCode], [City], [State], [District], [CountryName], [Division], [CustomerIndustry], [CustomerSubIndustry], CustomerGroup, [SalesRepCode], SalesPersonName, [SalesPersonResponsible], [VATRegNo], [AccountString], [InternalExternal], [CustomerABC], [CustomerType]

--	Stagetablename in ('AXL_AU_Customer', 'AXL_DC_Customer', 'AXL_HU_Customer', 'AXL_IE_Customer', 'AXL_PL_Customer', 'AXL_PT_Customer', 'AXL_UK_Customer')
GO
PRINT N'Creating [stage].[vROR_SE_Supplier]'
GO
CREATE VIEW [stage].[vROR_SE_Supplier] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([SupplierNum]))))) AS SupplierID
    ,UPPER(CONCAT([Company], '#', TRIM([SupplierNum]))) AS SupplierCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Company])))) AS CompanyID
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([SupplierNum])) AS SupplierNum
	,ParentSupplierName AS MainSupplierName
	,[dbo].[ProperCase](TRIM(SupplierName)) AS SupplierName
	,TRIM([AddressLine1]) AS AddressLine1
    ,TRIM([AddressLine2]) AS AddressLine2
    ,TRIM([AddressLine3]) AS AddressLine3
	,TelephoneNum1 AS [TelephoneNum]
	,TelephoneNum2
	,[Email]
	,TRIM([ZipCode]) AS ZipCode
	,TRIM([City]) AS City
	,'' AS District
	,CountryName
	,CountryCode
	,'' AS [Region] 
	,[State]
	,SupplierGroup
	,SupplierSubGroup
	,SupplierIndustry
	,SupplierSubIndustry
	,TRIM(SupplierType) AS SupplierCategory 
	,TRIM(SupplierResponsible) AS SupplierResponsible
	,[dbo].[ProperCase](TRIM(concat (addressline1 + ' ' + addressline2, null))) AS AddressLine
	,[dbo].[ProperCase](TRIM(concat_ws(',', coalesce([dbo].[ProperCase](CountryName), null)
		, IIF(City= ' ', null, trim(substring(replace([dbo].[ProperCase](AddressLine3),' ', ''), 6, 100) ) )
		, IIF(ZipCode= ' ', null, [dbo].[udf_GetNumeric]([Addressline3]) )
		, coalesce(IIF([addressline1]= ' ', null, [addressline1]), IIF([addressline2]= ' ', null, [addressline2]) )
		, coalesce(IIF([addressline3]= ' ', null, [addressline3]), IIF([addressline3]= ' ', null, [addressline3]) ) ))) AS FullAddressLine
	,[AccountNum] 
	,[VATNum]
	,OrgNum AS OrganizationNum
	,CodeOfConduct
	,PurchaserPers
	,PurchaserPersonName
	,TRIM([SupplierScore]) AS SupplierScore
	,[MinOrderQty]
	,MinOrderValue	
	,MinOrderValueCurrency
	,[Website]
	,TRIM([Comments]) AS Comments
	--,'' AS SRes1
	--,'' AS SRes2
	--,'' AS SRes3
	,IsAxInterInternal AS [InternalExternal]
	,IsBusinessAreaInternal
	,IsCompanyGroupInternal
	,IsActiveRecord
	,CreatedTimeStamp
	,ModifiedTimeStamp
FROM [stage].[ROR_SE_Supplier]
--GROUP BY 
--      [PartitionKey],[Company],[SupplierNum],MainSupplierName,[SupplierName],[AddressLine1],[AddressLine2],[AddressLine3],[City],[ZipCode],[Region],District, [CountryName]
--	  ,[SupplierCategory],[SupplierResponsible],[Reference],[AccountNum],[VATNum],[SupplierScore],[CustomerNum],[TelephoneNum],[Email],[Website],[CodeOfConduct]
--	  ,[MinOrderQty],[InternalExternal],[Comments],CountryCode
GO
PRINT N'Creating [stage].[AXL_FR_SalesLedger]'
GO
CREATE TABLE [stage].[AXL_FR_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceAmount] [decimal] (18, 4) NULL,
[RemainAmount] [decimal] (18, 4) NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vAXL_FR_SalesLedger]'
GO
CREATE VIEW [stage].[vAXL_FR_SalesLedger] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(sl.Company, '#', TRIM(sl.CustNum), '#', TRIM(sl.InvoiceNum))))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(sl.Company))) AS CompanyID
	,UPPER(CONCAT(sl.Company, '#', TRIM(sl.CustNum), '#', TRIM(sl.InvoiceNum))) AS SalesLedgerCode
	,sl.PartitionKey

	,UPPER(sl.Company) AS Company
	,UPPER(TRIM(sl.CustNum)) AS CustomerNum
	,TRIM(sl.InvoiceNum) AS [SalesInvoiceNum]
	,IIF(so.InvoiceDate = '' OR so.InvoiceDate IS NULL, '1900-01-01', so.InvoiceDate) AS [SalesInvoiceDate] --
	,CONVERT(date, DueDate) AS SalesDueDate
	,CONVERT(date, LastPaymentDate) AS LastPaymentDate
	,[InvoiceAmount]
	,[RemainAmount] AS [RemainingInvoiceAmount]
	,NULL AS CashDiscOffered
	,NULL AS CashDiscUsed
	,NULL AS [ExchangeRate]
	,NULL AS [Currency]
	,NULL AS [VATAmount]
	,NULL AS [VATCode]
	,NULL AS [PayToName]
	,NULL AS [PayToCity]
	,NULL AS [PayToContact]
	,NULL AS [PaymentTerms]
	,sl.Res1 AS SLRes1
	,sl.Res2 AS SLRes2
	,sl.Res3 AS SLRes3
FROM stage.AXL_FR_SalesLedger sl
	LEFT JOIN stage.AXL_CZ_SOLine so ON TRIM(sl.InvoiceNum) = TRIM(so.InvoiceNum)
WHERE DueDate > '2015-01-01'
GROUP BY
	sl.PartitionKey, sl.Company, sl.CustNum, sl.InvoiceNum, sl.Res2, sl.Res1, sl.Res3, sl.[InvoiceAmount], sl.[RemainAmount], so.InvoiceDate, DueDate, LastPaymentDate
GO
PRINT N'Creating [stage].[ABK_SE_StockTransaction]'
GO
CREATE TABLE [stage].[ABK_SE_StockTransaction]
(
[PartitionKey] [nvarchar] (50) NULL,
[Company] [nvarchar] (50) NULL,
[IndexKey] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[TransactionCode] [nvarchar] (50) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[SalesOrderNum] [nvarchar] (50) NULL,
[SalesOrderLine] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[PurchaseInvoiceLine] [nvarchar] (50) NULL,
[SalesInvoiceNum] [nvarchar] (50) NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[TransactionDate] [nvarchar] (50) NULL,
[TransactionQty] [decimal] (18, 4) NULL,
[TransactionValue] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[TransactionCodeDescription] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vABK_SE_StockTransaction]'
GO
CREATE VIEW [stage].[vABK_SE_StockTransaction] AS 
--COMMENT EMPTY FIELD 2022-12-21 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM(IndexKey))))) AS StockTransactionID --, '#', TRIM(SalesInvoiceNum) --, '#', TRIM(TransactionCode), '#', TRIM([CreatedTimeStamp]), '#', TRIM(ModifiedTimeStamp), '#', TRIM(BatchNum), '#', TRIM(CustomerNum), '#', TRIM(SupplierNum), '#', TRIM(PurchaseOrderNum), '#', TRIM([PartNum])
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
    ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
 	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	,IIF(TransactionCode = '1', CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM(SalesOrderNum))))), NULL) AS SalesOrderNumID
	,IIF(TransactionCode = '6', CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM(PurchaseOrderNum))))), NULL) AS PurchaseOrderNumID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM(SalesInvoiceNum))))) AS SalesInvoiceID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM(PurchaseInvoiceNum))))) AS PurchaseInvoiceID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM(CustomerNum))))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM(SupplierNum))))) AS SupplierID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Currency])))) AS CurrencyID
	,[PartitionKey]
    ,IndexKey

    ,UPPER(TRIM([Company])) AS Company -- 
	,UPPER(TRIM([WarehouseCode])) AS WarehouseCode
    ,UPPER(TRIM([PartNum])) AS PartNum
	,TransactionCode
	,CASE WHEN TransactionCode = '1' THEN 'Outgoing goods'
		WHEN TransactionCode = '6' THEN 'Incoming goods'
		ELSE 'Internal' END AS TransactionDescription
	,CASE WHEN TransactionCode = '1' THEN CustomerNum
		WHEN TransactionCode = '6' THEN SupplierNum
		END AS IssuerReceiverNum
	,CASE WHEN TransactionCode = '1' THEN SalesOrderNum
		WHEN TransactionCode = '6' THEN PurchaseOrderNum
		END AS OrderNum 
	,CASE WHEN TransactionCode = '1' THEN SalesOrderLine
		WHEN TransactionCode = '6' THEN PurchaseOrderLine
		END AS OrderLine
    ,CASE WHEN TransactionCode = '1' THEN SalesInvoiceNum
		WHEN TransactionCode = '6' THEN PurchaseInvoiceNum
		END AS InvoiceNum
	--,'' AS InvoiceLine
    --,'' AS BinNum
    ,IIF(TRIM(BatchNum)='', NULL,TRIM(BatchNum)) AS BatchNum
	,CONVERT(date, CAST(TransactionDate AS DATE), 23) AS TransactionDate 
	,LEFT([CreatedTimeStamp], 8) AS TransactionTime
	,convert(date, LEFT(ModifiedTimeStamp,8)) AS AdjustmentDate
	,IIF(TransactionCode = '1' AND SalesInvoiceNum = '', 0, TransactionQty) AS TransactionQty -- added 20221207 after meeting with Krister, Mattias & Tobias Ö /DZ
	,IIF(TransactionCode = '1' AND SalesInvoiceNum = '', 0, TransactionValue) AS TransactionValue -- added 20221207 after meeting with Krister, Mattias & Tobias Ö /DZ
	,IIF(TransactionQty = 0 OR TransactionQty IS NULL, 0, TransactionValue/TransactionQty) AS [CostPrice] 
	--,NULL AS SalesUnitPrice 
	,TRIM(Currency) AS Currency
	,IIF(InternalExternal = 1, 'Internal', 'External') AS InternalExternal
	--,'' AS [Reference]
	--,'' AS STRes1
	--,'' AS STRes2
	--,'' AS STRes3
FROM 
	[stage].[ABK_SE_StockTransaction]
GO
PRINT N'Creating [dm_TS].[dimCustomer]'
GO
















CREATE VIEW [dm_TS].[dimCustomer] AS

SELECT 
	   [CustomerID]
      ,[CompanyID]
      ,[Company]
      ,[CustomerNum]
      ,[MainCustomerName]
      ,[CustomerName]
      ,[Customer]
      ,[AddressLine1]
      ,[AddressLine2]
      ,[AddressLine3]
      ,[TelephoneNum1]
      ,[TelephoneNum2]
      ,[Email]
      ,[ZipCode]
      ,[City]
      ,[State]
      ,[SalesDistrict]
      ,[CountryCode]
      ,[CountryName]
      ,[Division]
      ,[CustomerIndustry]
      ,[CustomerSubIndustry]
      ,[AddressLine]
      ,[FullAddressLine]
      ,[CustomerGroup]
      ,[CustomerSubGroup]
      ,[SalesPersonCode]
      ,[SalesPersonName]
      ,[SalesPersonResponsible]
      ,[VATNum]
      ,[OrganizationNum]
      ,[AccountNum]
      ,[InternalExternal]
      ,[CustomerScore]
      ,[CustomerType]
      ,[CustomerCode]
      ,[CustomerStatus]
      ,[DUNS]
      ,[DUNS_MatchScore]
      ,[CRes1]
      ,[CRes2]
      ,[CRes3]
      ,[is_inferred]
      ,[is_deleted]
      ,[is_validCountryCode]
      ,[DUNS_Status]
FROM [dm].[DimCustomer] /*temp putting (CERPL) Certex PL here such that they see the data in same company*/
WHERE [Company] in (
'FESFORA'
, 'FSEFORA'
, 'FFRFORA'
, 'FORPL'
, 'CERPL'
, 'FFRGPI'
, 'FFRLEX'
, 'IFIWIDN'
, 'IEEWIDN'
, 'TMTFI'
, 'TMTEE'
, 'FITMT'
, 'EETMT'
, 'ABKSE'
, 'ROROSE'
,'STESE'
,'CERBG'
,'FORBG'
)
GO
PRINT N'Creating [stage].[CER_UK_PurchaseInvoice]'
GO
CREATE TABLE [stage].[CER_UK_PurchaseInvoice]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaseOrderType] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[PurchaseInvoiceLine] [nvarchar] (50) NULL,
[PurchaseInvoiceType] [nvarchar] (50) NULL,
[PurchaseInvoiceDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PurchaseInvoiceQty] [decimal] (18, 4) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[VATAmount] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PurchaserName] [nvarchar] (100) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[PurchaseChannel] [nvarchar] (50) NULL,
[LastPaymentNum] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_UK_PurchaseInvoice]'
GO
CREATE   VIEW [stage].[vCER_UK_PurchaseInvoice] AS
--COMMENT EMPTY FIELD
SELECT 
	--CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(PurchaseOrderSubLine), '#', TRIM(PurchaseInvoiceNum), '#', TRIM(PurchaseInvoiceLine), '#', ActualDelivDate, '#', PartNum, '#', UnitPrice, '#', ExchangeRate, '#', DiscountAmount, '#', PurchaseInvoiceQty, '#', TRIM(WarehouseCode),'#', TRIM(LastPaymentNum))))) AS PurchaseInvoiceID --'#', PurchaseOrderType -- Added ActualDelivDate to fix PK dupes for data validation purpose 2021-03-10 /SM
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(PurchaseOrderSubLine), '#', TRIM(PurchaseInvoiceNum), '#', TRIM(PurchaseInvoiceLine), '#', PartNum, '#', TRIM(WarehouseCode))))) AS PurchaseInvoiceID -- new ID by DZ 20230221
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseInvoiceNum), '#', TRIM(PurchaseInvoiceLine), '#', PartNum)) AS PurchaseInvoiceCode
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum))) AS PurchaseOrderNumCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum),'#',TRIM(PurchaseOrderLine),'#',TRIM(PurchaseInvoiceNum))))) AS PurchaseOrderID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum))))) AS SupplierID
    ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT(int, replace(PurchaseInvoiceDate,'-','')) AS PurchaseInvoiceDateID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#', TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum),'#',TRIM(PurchaseOrderNum),'#',TRIM(LastPaymentNum))))) AS PurchaseLedgerID --match PurchaseLedgerID in [vSCM_FI_PurchaseLedger]
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum),'#',TRIM(PurchaseOrderNum))) AS PurchaseOrderCode
	,PartitionKey

	,UPPER(TRIM(Company)) AS Company
	,UPPER(TRIM(PurchaseOrderNum)) AS PurchaseOrderNum
	,UPPER(TRIM(PurchaseOrderLine)) AS PurchaseOrderLine
	,UPPER(TRIM(PurchaseOrderSubLine)) AS PurchaseOrderSubLine
	,PurchaseOrderType
	,UPPER(TRIM(PurchaseInvoiceNum)) AS PurchaseInvoiceNum
	,UPPER(TRIM(PurchaseInvoiceLine)) AS PurchaseInvoiceLine
	,PurchaseInvoiceType
	,PurchaseInvoiceDate
	,ActualDelivDate
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,PurchaseInvoiceQty
	,UoM
	,UnitPrice
	--,0 AS DiscountPercent
	,DiscountAmount
	,TotalMiscChrg
	,VATAmount
	,Currency
	,ExchangeRate
	,CreditMemo
	,PurchaserName
	,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
	,PurchaseChannel
	--,'' AS Comment
	--,'' AS PIRes1
	--,'' AS PIRes2
	--,'' AS PIRes3
	--,'' AS OrderDelivLineNum
FROM stage.CER_UK_PurchaseInvoice

--GROUP BY
--	PartitionKey, Company, PurchaseOrderNum, PurchaseInvoiceNum, SupplierNum, PartNum, PurchaseOrderLine, PurchaseOrderSubLine, PurchaseInvoiceQty,UoM, UnitPrice, WarehouseCode,PurchaserName, 
--	PurchaseInvoiceLine, PurchaseInvoiceType, PurchaseInvoiceDate, ActualDelivDate, TotalMiscChrg, VATAmount, CreditMemo, PurchaseOrderType,DiscountAmount,Currency,ExchangeRate,PurchaseChannel, LastPaymentNum 
	
	--, PurchaseOrderType, [Site], OrderDelivLineNum, , DiscountPercent, PurchaserName, PurchaseInvoiceLine, PurchaseInvoiceType, PurchaseInvoiceDate, ActualDelivDate, TotalMiscChrg, CreditMemo
GO
PRINT N'Creating [dm_DS].[fctPurchaseOrder]'
GO
CREATE VIEW [dm_DS].[fctPurchaseOrder] AS

SELECT 
 po.[PurchaseOrderID]
,po.[PurchaseOrderNumID]
,po.[PurchaseInvoiceID]
,po.[CompanyID]
,po.[SupplierID]
,po.[CustomerID]
,po.[PartID]
,po.[WarehouseID]
,po.[CurrencyID]
,po.[PurchaseOrderDateID]
,po.[PurchaseInvoiceDateID]
,po.[Company]
,po.[PurchaseOrderNum]
,po.[PurchaseOrderLine]
,po.[PurchaseOrderSubLine]
,po.[PurchaseOrderType]
,po.[PurchaseOrderDate]
,po.[PurchaseOrderStatus]
,po.[OrgReqDelivDate]
,po.[CommittedDelivDate]
,po.[CommittedShipDate]
,po.[ActualDelivDate]
,po.[ReqDelivDate]
,po.[PurchaseInvoiceNum]
,po.[PartNum]
,po.[SupplierNum]
,po.[SupplierPartNum]
,po.[SupplierInvoiceNum]
,po.[DelivCustomerNum]
,po.[PartStatus]
,po.[OrderQty]
,po.[ReceiveQty]
,po.[InvoiceQty]
,po.[MinOrderQty]
,po.[UoM]
,po.[UnitPrice]
,po.[DiscountPercent]
,po.[DiscountAmount]
,po.[ExchangeRate]
,po.[Currency]
,po.[PurchaserName]
,po.[WarehouseCode]
,po.[ReceivingNum]
,po.[DelivTime]
,po.[PurchaseChannel]
,po.[Documents]
,po.[Comments]
,po.[PORes1]
,po.[PORes2]
,po.[PORes3]
,po.[InvoiceStatus]
,po.[DaysSinceOrder]
,po.[OrgCommittedDelivDate]
,po.[IsOrderClosed]

FROM [dm].[FactPurchaseOrder] po
LEFT JOIN dbo.Company com ON po.Company = com.Company
WHERE com.BusinessArea = 'Driveline Solutions' AND com.[Status] = 'Active'
--WHERE Company  in ('AFISCM', 'CDKCERT', 'CEECERT', 'CFICERT', 'CLTCERT', 'CLVCERT', 'CSECERT', 'CUKCERT', 'CNOEHAU', 'CNOCERT', 'CERPL', 'CyESA', 'HFIHAKL', 'TRACLEV')  -- LS basket
GO
PRINT N'Creating [stage].[vAXHSE_HQ_Customer]'
GO






CREATE VIEW [stage].[vAXHSE_HQ_Customer] AS
SELECT 
	  CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', CustomerNum ))) AS CustomerID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',Company)) AS CompanyID
	  ,CONCAT(Company,'#', CustomerNum ) AS CustomerCode
	  ,CONVERT(varchar, GETDATE(), 23) AS PartitionKey

	  ,[Company]
      ,[CustomerNum]
      ,[MainCustomerName]
      ,[CustomerName]
      ,[AddressLine1]
      ,[AddressLine2]
      ,[AddressLine3]
      ,[TelephoneNum1]
      ,[TelephoneNum2]
      ,[Email]
      ,[ZipCode]
      ,[City]
      ,[State]
      ,[SalesDistrict]
      ,[CountryName]
      ,[Division]
      ,[CustomerIndustry]
      ,[CustomerSubIndustry]
	  ,CONCAT(NULLIF(TRIM(AddressLine1),'') ,', ' +  NULLIF(TRIM(AddressLine2),'')) AS AddressLine
	  ,CONCAT(NULLIF(TRIM(CountryName),'') ,', ' + NULLIF(TRIM([City]),''),', ' + NULLIF(TRIM([ZipCode]),''),', ' + NULLIF(TRIM(AddressLine1),''),', ' + NULLIF(TRIM(AddressLine2),'')  ) AS FullAddressLine
      ,[CustomerGroup]
      ,[CustomerSubGroup]
      ,[SalesPersonCode]
      ,[SalesPersonName]
      ,[SalesPersonResponsible]
      ,[VATNum]
	  --,'' AS OrganizationNum
      ,[AccountNum]
      ,'AxInter'	AS [InternalExternal]
      ,[CustomerScore]
      ,[CustomerType]
      ,CognosCompany as CRes1
  FROM [stage].[AXI_HQ_Customer]
	where UPPER(Company) = 'AXHSE'
GO
PRINT N'Creating [stage].[vMEN_NL_Part_test]'
GO















/****** Script for SelectTopNRows command from SSMS  ******/

CREATE VIEW [stage].[vMEN_NL_Part_test] AS
WITH CTE AS (
SELECT CASE WHEN Company = '14' THEN  CONCAT(N'MENBE',Company)
			ELSE  CONCAT(N'MENNL',Company) END AS CompanyCode		--Doing this to have the company code in nvarchar and don't need to repeat CAST(CONCAT('MEN-',Company) AS nvarchar(50)) everywhere /SM
	  ,[PartitionKey], [Company], [PartNum], [PartDescription], [PartDescription2], [PartDescription3], [ProductGroup], [ProductGroup2], [ProductGroup3], [ProductGroup4], [Brand], [CommodityCode], [PartReplacementNum], [PartStatus], [CountryOfOrigin], [NetWeight], [UoM], [Material], [Barcode], [ReorderLevel], [PartResponsible], [MainSupplier], [AlternativeSupplier], [StartDate], [EndDate], [PARes1], [PARes2], [PARes3], [ProductKey], [DW_TimeStamp], [ProductCOOCode], [ProductIsAssembly]
  FROM [stage].[MEN_NL_Part]
)


SELECT 
	  CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(CompanyCode,'#',PartNum))) AS PartID
	  ,CONVERT([binary](32),HASHBYTES('SHA2_256',CompanyCode)) AS CompanyID
	  ,UPPER(CONCAT(TRIM(CompanyCode),'#',TRIM([PartNum]))) AS PartCode
	  ,[PartitionKey]

      ,[CompanyCode]		AS Company
      ,[PartNum]			
	  ,[PartDescription]	AS PartName
      ,[PartDescription]
      ,[PartDescription2]
	  ,PartDescription3
	  ,MainSupplier
	  ,AlternativeSupplier
      ,[ProductGroup]
	  ,[ProductGroup2]
	  ,[ProductGroup3]
	  ,[ProductGroup4]
	  ,[Brand]
      ,[CommodityCode]
	  --,PartReplacementNum
	  --,PartStatus
      --,[CountryOfOrigin]
      --,[NetWeight]
	  --,UoM
	  --,[Material]
	  --,[Barcode]
	  --,[ReOrderLevel]
	  --,PartResponsible
	  --,[StartDate]
	  --,[EndDate]
  FROM CTE
GO
PRINT N'Creating [stage].[JEN_DK_Customer]'
GO
CREATE TABLE [stage].[JEN_DK_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[CustomerName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (50) NULL,
[TelephoneNumber2] [nvarchar] (50) NULL,
[Email] [nvarchar] (100) NULL,
[ABCCode] [nchar] (10) NULL,
[City] [nvarchar] (50) NULL,
[ZIP] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNr] [nvarchar] (20) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (30) NULL,
[CustomerType] [nvarchar] (50) NULL,
[InactiveCustomer] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (10) NULL
)
GO
PRINT N'Creating [stage].[vJEN_DK_Customer]'
GO
CREATE VIEW [stage].[vJEN_DK_Customer] AS
--COMMENT EMPTY FIELDS // ADD TRIM() INTO CustomerID 22-12-29 VA 
SELECT 
	--CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustomerNum))))) AS CustomerID
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,UPPER(CONCAT([Company], '#', TRIM([CustomerNum]))) AS CustomerCode
	,PartitionKey

	,UPPER([Company]) AS Company
	,TRIM(CustomerNum) AS CustomerNum
	,[dbo].[ProperCase](CustomerName) AS MainCustomerName --add according to taskCard
    ,[dbo].[ProperCase](CustomerName) AS CustomerName -- can be replaced by if there is sub- Customer name
	,CASE WHEN [AddressLine1] is null OR [AddressLine1] = '' THEN [AddressLine2]  
		ELSE [AddressLine1] END AS [AddressLine1] -- added 20210204 SM
	,[AddressLine2]
	,[AddressLine3]
	,[TelephoneNumber1]	AS [TelephoneNum1]
	,[TelephoneNumber2]	AS [TelephoneNum2]
	,Email
	-- Previous logic
--	,CASE WHEN countryname like 'Sweden' AND LEFT(AddressLine3, 1) IN ('1','2','3','4','5','6','7','8','9')	THEN substring(replace([dbo].[ProperCase](AddressLine3), ' ', ''), 1,5) ELSE null end AS ZipCode
	,TRIM(SUBSTRING(AddressLine3, 1, PATINDEX('%[ ][A-ZÅÄÖ]%',AddressLine3)))	AS [ZipCode]
	--,CASE WHEN [City] = ' '	AND LEFT(AddressLine3, 1) IN ('1','2','3','4','5','6','7','8','9') THEN trim(substring(replace([dbo].[ProperCase](AddressLine3),' ',		''), 6, 100)) ELSE [dbo].[ProperCase]([City]) end AS [City]
	,[dbo].[ProperCase](TRIM(SUBSTRING(AddressLine3,PATINDEX('%[ ][A-ZÅÄÖ]%',AddressLine3 ) + 1, 100)))		AS [City]
	,IIF([State]= ' ',null,[State]) AS [State]
	,[District]	AS SalesDistrict
	,[dbo].[ProperCase](CountryName) AS CountryName
	--,'' AS Division
	--,'' AS CustomerIndustry
	--,'' AS CustomerSubIndustry
	,[dbo].[ProperCase](TRIM(CONCAT (addressline1+' '+ addressline2, null))) AS AddressLine
	,CONCAT(Countryname, +','+
		--CASE WHEN countryname like 'Sweden'	AND LEFT(AddressLine3, 1) IN ('1','2','3','4','5','6','7','8','9')
		--THEN trim(substring(REPLACE([dbo].[ProperCase](AddressLine3),' ', ''), 6, 100)) ELSE null end	+','+
		[dbo].[ProperCase](TRIM(SUBSTRING(AddressLine3,PATINDEX('%[ ][A-ZÅÄÖ]%',AddressLine3 ) + 1, 100))) +','+
		--CASE WHEN countryname like 'Sweden'	AND LEFT(AddressLine3, 1) IN ('1','2','3','4','5','6','7','8','9')
		--THEN substring(replace([dbo].[ProperCase](AddressLine3), ' ', ''), 1,5) ELSE null end	+','+
		TRIM(SUBSTRING(AddressLine3, 1, PATINDEX('%[ ][A-ZÅÄÖ]%',AddressLine3))) +','+
		[dbo].[ProperCase](TRIM(CONCAT (addressline1+' '+ addressline2, null)))) AS FullAddressLine
	,[dbo].[ProperCase](CustomerGroup) AS CustomerGroup
	,[dbo].[ProperCase](CustomerGroup) AS CustomerSubGroup	
	,[SalesRepCode]		AS SalesPersonCode
	,[dbo].[ProperCase](SalesPersonName) AS SalesPersonName
	--,'' AS [SalesPersonResponsible]
	,[VATRegNr]		AS VATNum
	--,'' AS OrganizationNum
	,[AccountString]	AS AccountNum
	,[InternalExternal]
	,[ABCCode] AS CustomerScore
	,CustomerType
	,GETDATE() AS ValidFrom
	,DATEADD(year,1,GETDATE()) AS ValidTo
	,CountryCode
FROM [stage].[JEN_DK_Customer]
WHERE CustomerNum NOT LIKE 'INTR%' -- SM added according to validtion feedback 2021-02-09
GO
PRINT N'Creating [stage].[SKS_FI_PurchaseOrder]'
GO
CREATE TABLE [stage].[SKS_FI_PurchaseOrder]
(
[PartitionKey] [varchar] (50) NOT NULL,
[EKORG] [nvarchar] (8) NOT NULL,
[PURCHASEORDERNUM] [varchar] (50) NULL,
[PURCHASEORDERLINE] [nvarchar] (50) NULL,
[PURCHASEORDERSUBLINE] [nvarchar] (50) NULL,
[ORDERTYPE] [nvarchar] (50) NULL,
[PURCHASEORDERDATE] [nvarchar] (50) NULL,
[ORGREQDELIVDATE] [nvarchar] (50) NULL,
[COMMITEDDELIVDATE] [nvarchar] (50) NULL,
[DELIVDATE] [nvarchar] (50) NULL,
[REQDELIVDATE] [nvarchar] (50) NULL,
[INVOICENUM] [nvarchar] (50) NULL,
[PARTNUM] [nvarchar] (50) NULL,
[SUPPLIERNUM] [nvarchar] (50) NULL,
[DELIVCUSTNUM] [nvarchar] (50) NULL,
[ITEMSTATUS] [nvarchar] (50) NULL,
[ORDEREDQTY] [decimal] (18, 4) NULL,
[RECEIVEDQTY] [decimal] (18, 4) NULL,
[INVOICEDQTY] [decimal] (18, 4) NULL,
[UNIT] [nvarchar] (50) NULL,
[UNITPRICE] [decimal] (18, 4) NULL,
[DISCOUNTPERCENT] [decimal] (18, 4) NULL,
[DISCOUNTAMOUNT] [decimal] (18, 4) NULL,
[EXCHANGERATE] [decimal] (18, 4) NULL,
[CURRENCY] [nvarchar] (50) NULL,
[PURCHASERNAME] [nvarchar] (50) NULL,
[WAREHOUSECODE] [nvarchar] (50) NULL,
[RECIEVINGNUM] [nvarchar] (50) NULL,
[LEADTIME] [nvarchar] (50) NULL,
[PURCHASECHANNEL] [nvarchar] (50) NULL,
[COMMENTS] [nvarchar] (50) NULL,
[PORES1] [nvarchar] (50) NULL,
[PORES2] [nvarchar] (50) NULL,
[PORES3] [nvarchar] (50) NULL,
[MANDT] [nvarchar] (50) NULL,
[BUKRS] [nvarchar] (50) NULL,
[SURCHARGEAMOUNT] [decimal] (18, 4) NULL,
[ETENR] [nvarchar] (50) NULL,
[ZZSHIPDT] [nvarchar] (50) NULL,
[EINDT] [nvarchar] (50) NULL,
[COMMITEDDATESKS] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vSKS_FI_PurchaseOrder]'
GO


CREATE VIEW [stage].[vSKS_FI_PurchaseOrder] AS
WITH CTE AS (
SELECT
	  CAST( CASE WHEN EKORG IN ('FI25', 'FI26') THEN 'SCOFI'
			WHEN EKORG = 'FI20' THEN 'SMKFI'
			WHEN EKORG = 'SE10' THEN 'SKSSWE'
			END AS nvarchar(10)) AS Company
			,[PartitionKey], [EKORG], [PURCHASEORDERNUM], [PURCHASEORDERLINE], [PURCHASEORDERSUBLINE], [ORDERTYPE], [PURCHASEORDERDATE], [ORGREQDELIVDATE], [COMMITEDDELIVDATE], [DELIVDATE], [REQDELIVDATE], [INVOICENUM], [PARTNUM], [SUPPLIERNUM], [DELIVCUSTNUM], [ITEMSTATUS], [ORDEREDQTY], [RECEIVEDQTY], [INVOICEDQTY], [UNIT], [UNITPRICE], [DISCOUNTPERCENT], [DISCOUNTAMOUNT], [EXCHANGERATE], [CURRENCY], [PURCHASERNAME], [WAREHOUSECODE], [RECIEVINGNUM], [LEADTIME], [PURCHASECHANNEL], [COMMENTS], [PORES1], [PORES2], [PORES3], [MANDT], [BUKRS], [SURCHARGEAMOUNT], [ETENR], [ZZSHIPDT], [EINDT], [COMMITEDDATESKS]
FROM 
	[stage].[SKS_FI_PurchaseOrder]
	WHERE EKORG NOT IN ('FI00','SE10')
)
--ADD UPPER()TRIM()INTO PartID,CustomerID,WarehouseID 2022-12-16 VA
--ADD TRIM() UPPER() INTO SupplierID 23-01-24 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(PURCHASEORDERNUM), '#', TRIM(PURCHASEORDERLINE), '#', TRIM(ETENR)))) AS PurchaseOrderID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(PURCHASEORDERNUM)))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(INVOICENUM)))) AS PurchaseInvoiceID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(DELIVCUSTNUM), '#', EKORG ))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(DELIVCUSTNUM), '#', TRIM(EKORG))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(SUPPLIERNUM), '#', TRIM(EKORG))))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(SUPPLIERNUM), '#', EKORG ))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(PARTNUM), '#', TRIM(EKORG))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(PARTNUM), '#', EKORG ))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(WAREHOUSECODE))))) AS WarehouseID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(WAREHOUSECODE)))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company )) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM(Currency))) AS CurrencyID
	,CONCAT(EKORG, '#', TRIM(SUPPLIERNUM) ,'#', PURCHASEORDERNUM, '#', PURCHASEORDERLINE, '#', TRIM(INVOICENUM)) AS PurchaseOrderCode
	,PartitionKey AS PartitionKey

	,Company AS Company
	,TRIM(PURCHASEORDERNUM) AS PurchaseOrderNum
	,TRIM(PURCHASEORDERLINE) AS PurchaseOrderLine
	,CASE WHEN  PORES3 IN ('0') THEN 'Standard'
		WHEN  PORES3 IN ('1') THEN 'Limit'
		WHEN  PORES3 IN ('2') THEN 'Consignment'
		WHEN  PORES3 IN ('3') THEN 'Subcontracting'
		WHEN  PORES3 IN ('4') THEN 'Material unknown'
		WHEN  PORES3 IN ('5') THEN 'Third-party (S)'
		WHEN  PORES3 IN ('6') THEN 'Text'
		WHEN  PORES3 IN ('7') THEN 'Stock transfer'
		WHEN  PORES3 IN ('8') THEN 'Material group'
		WHEN  PORES3 IN ('9') THEN 'Service'
		END AS PurchaseOrderSubLine
	,TRIM(ORDERTYPE) AS PurchaseOrderType
	,CASE WHEN (TRIM(ORDERTYPE) = 'ZEXP' or PORES3=5) and INVOICEDQTY >= ORDEREDQTY THEN 'Closed'
	      WHEN ORDEREDQTY - RECEIVEDQTY > 0 THEN 'Open'
		  ELSE 'Closed'
	  END AS PurchaseOrderStatus --  changed 2023-03-21 SB (requested by Katri)  IIF(ORDEREDQTY - RECEIVEDQTY > 0, 'Open','Closed')  AS PurchaseOrderStatus
	,CONVERT(date, IIF(PURCHASEORDERDATE = '00000000', '1900-01-01', PURCHASEORDERDATE)) AS PurchaseOrderDate
	,CONVERT(date, IIF(ZZSHIPDT = '00000000', '1900-01-01', ZZSHIPDT)) AS OrgReqDelivDate -- Is the requested delivery date when it should be shipped from supplier
	,CONVERT(date, IIF(COMMITEDDATESKS = '00000000', '1900-01-01', COMMITEDDATESKS)) AS CommittedDelivDate -- Is with travel
	,CONVERT(date, IIF(REQDELIVDATE = '00000000', '1900-01-01', REQDELIVDATE)) AS ActualDelivDate
	,CONVERT(date, IIF(DELIVDATE = '00000000', '1900-01-01', DELIVDATE)) AS ExpDelivDate 
	,CONVERT(date, IIF(EINDT = '00000000', '1900-01-01', EINDT)) AS ReqDelivDate -- Is the requested delivery date when it sould be delivered at sks
	,TRIM(INVOICENUM) AS PurchaseInvoiceNum
	,IIF(ISNUMERIC([PARTNUM]) = 1,CAST(CAST(trim([PARTNUM]) AS int)as nvarchar(50)),(trim([PARTNUM])))AS PartNum
	,TRIM(SUPPLIERNUM) AS SupplierNum
	,TRIM(ETENR) AS SupplierPartNum  --partial delivery number
	--,'' AS [SupplierInvoiceNum] 
	,TRIM(DELIVCUSTNUM) AS DelivCustomerNum
	,ITEMSTATUS AS PartStatus
	,ORDEREDQTY AS PurchaseOrderQty
	,IIF(PORES3 IN('5'),INVOICEDQTY,RECEIVEDQTY) AS ReceiveQty
	,INVOICEDQTY AS InvoiceQty
	--,NULL AS MinOrderQty
	,UNIT AS UoM
	,UNITPRICE AS UnitPrice
	,DISCOUNTPERCENT AS DiscountPercent
	,DISCOUNTAMOUNT AS DiscountAmount
	--,NULL AS LandedCost
	,COALESCE(1/NULLIF(EXCHANGERATE,0),1) AS ExchangeRate
	,CASE WHEN CURRENCY = '15' THEN 'EUR' WHEN CURRENCY = '2' THEN 'USD' ELSE CURRENCY END AS Currency
	,TRIM(PURCHASERNAME) AS PurchaserName
	,TRIM(WAREHOUSECODE) AS WarehouseCode
	,RECIEVINGNUM AS ReceivingNum
	,LEADTIME AS DelivTime
	,PURCHASECHANNEL AS PurchaseChannel
	,CASE WHEN PORES2 = 'R' THEN 'Return' END AS Documents
	,CASE WHEN PORES1 = 'F' THEN 'Free of charge' END AS Comments
	,PORES1 AS PORes1
	,PORES2 AS PORes2
	,PORES3 AS PORes3
	,CONVERT(date, IIF(COMMITEDDELIVDATE = '00000000', '1900-01-01', COMMITEDDELIVDATE)) AS OrgCommittedDelivDate
FROM CTE
GROUP BY
	PartitionKey, EKORG, Company, PURCHASEORDERNUM, PURCHASEORDERLINE, PURCHASEORDERSUBLINE, SUPPLIERNUM, DELIVCUSTNUM, INVOICENUM, PARTNUM, ORDERTYPE, DISCOUNTPERCENT, DISCOUNTAMOUNT, ORDEREDQTY, RECEIVEDQTY, INVOICEDQTY, EXCHANGERATE, CURRENCY, PURCHASERNAME, RECIEVINGNUM, LEADTIME, WAREHOUSECODE, PURCHASECHANNEL, PORES1, PORES2, PORES3, UNIT, UNITPRICE, ITEMSTATUS, COMMENTS, PURCHASEORDERDATE, ORGREQDELIVDATE, COMMITEDDELIVDATE, DELIVDATE, REQDELIVDATE,CTE.ZZSHIPDT, cte.COMMITEDDATESKS, cte.EINDT, cte.ETENR
  --cte.Company
	 -- ,cte.[PartitionKey]
	 -- ,cte.[EKORG]
  --    ,cte.[PURCHASEORDERNUM]
  --    ,cte.[PURCHASEORDERLINE]
  --    ,cte.[PURCHASEORDERSUBLINE]
  --    ,cte.[ORDERTYPE]
  --    ,cte.[PURCHASEORDERDATE]
  --    ,cte.[ORGREQDELIVDATE]
  --    ,cte.[COMMITEDDELIVDATE]
  --    ,cte.[DELIVDATE]
  --    ,cte.[REQDELIVDATE]
  --    ,cte.[INVOICENUM]
  --    ,cte.[PARTNUM]
  --    ,cte.[SUPPLIERNUM]
  --    ,cte.[DELIVCUSTNUM]
  --    ,cte.[ITEMSTATUS]
  --    ,cte.[ORDEREDQTY]
  --    ,cte.[RECEIVEDQTY]
  --    ,cte.[INVOICEDQTY]
  --    ,cte.[UNIT]
  --    ,cte.[UNITPRICE]
  --    ,cte.[DISCOUNTPERCENT]
  --    ,cte.[DISCOUNTAMOUNT]
  --    ,cte.[EXCHANGERATE]
  --    ,cte.[CURRENCY]
  --    ,cte.[PURCHASERNAME]
  --    ,cte.[WAREHOUSECODE]
  --    ,cte.[RECIEVINGNUM]
  --    ,cte.[LEADTIME]
  --    ,cte.[PURCHASECHANNEL]
  --    ,cte.[COMMENTS]
  --    ,cte.[PORES1]
  --    ,cte.[PORES2]
  --    ,cte.[PORES3]
  --    ,cte.[MANDT]
	 -- ,CTE.ZZSHIPDT
	 -- ,CTE.COMMITEDDATESKS
	 -- ,CTE.EINDT
GO
PRINT N'Creating [stage].[NOM_NO_OLine]'
GO
CREATE TABLE [stage].[NOM_NO_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[SalesOrderType] [nvarchar] (50) NULL,
[OrderRelNum] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[ExpDelivDate] [date] NULL,
[DelivDate] [date] NULL,
[NeedByDate] [date] NULL,
[FirstConfirnedDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (38, 8) NULL,
[DelivQty] [decimal] (38, 8) NULL,
[RemainingQty] [decimal] (38, 8) NULL,
[UnitPrice] [numeric] (28, 8) NULL,
[UnitCost] [numeric] (28, 8) NULL,
[SumUnitCost] [numeric] (38, 6) NULL,
[SumUnitPrice] [numeric] (38, 6) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (28, 8) NULL,
[OpenRelease] [nvarchar] (1) NULL,
[DiscountPercent] [decimal] (38, 6) NULL,
[DiscountAmount] [decimal] (38, 6) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [int] NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[SalesOrderChannel] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (100) NULL,
[SalesReturnOrderNum] [nvarchar] (50) NULL,
[SalesReturnInvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[ItemClass] [nvarchar] (50) NULL,
[UpdateStock] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vNOM_NO_OLine]'
GO
CREATE VIEW [stage].[vNOM_NO_OLine] AS
--COMMENT EMPTY FIELDS 23-01-09 VA
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company),'#', TRIM(OrderNum),'#', TRIM(OrderLine),'#', TRIM(OrderRelNum))))) AS SalesOrderID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID 
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(OrderNum))))) AS SalesOrderNumID
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(OrderNum),'#',TRIM(OrderLine))) AS SalesOrderCode 
	,CONVERT(int, replace(convert(date, OrderDate),'-','')) AS SalesOrderDateID --Redundant?  
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey 

	,UPPER(TRIM(Company)) AS Company
	,UPPER(TRIM(CustNum)) AS CustomerNum 
	,UPPER(TRIM(OrderNum)) AS SalesOrderNum
	,UPPER(TRIM(OrderLine)) AS SalesOrderLine
	,OrderSubLine AS SalesOrderSubLine
	,IIF(SalesOrderType = '10 - Internal Order', 'Internal Order', SalesOrderType) AS SalesOrderType -- added 2022-08-26 LL/DZ
	--,'' AS SalesOrderCategory
	,OrderDate AS SalesOrderDate
	,NeedbyDate
	,ExpDelivDate
	,ActualDelivDate
	,FirstConfirnedDate AS ConfirmedDelivDate
	,UPPER(TRIM(InvoiceNum)) AS SalesInvoiceNum
	,IIF(SalesOrderType = '8 - Credit Order', -1*OrderQty, OrderQty) AS SalesOrderQty
	,IIF(SalesOrderType = '8 - Credit Order', -1*DelivQty, DelivQty) AS DelivQty
	,RemainingQty
	--,NULL AS SalesInvoiceQty
	--,'' AS UoM
	,UnitPrice
	,UnitCost
	,Currency  --CASE WHEN (Company = 'NomoSE' and CurrExChRate = 1) THEN 'SEK'  WHEN (Company = 'NomoDK' and CurrExChRate = 1) THEN 'DKK'  WHEN (Company = 'NomoFI' and CurrExChRate = 1) THEN 'EUR' ELSE CURRENCY END AS 
	,ExchangeRate
	,CASE WHEN OpenRelease = 'I' THEN '0' ELSE '1' END AS OpenRelease
	,IIF(SalesOrderType = '8 - Credit Order', -1*DiscountAmount, DiscountAmount) AS DiscountAmount
	,DiscountPercent
	,PartNum
	,ItemClass AS PartType
	,PartStatus
	,SalesPersonName
	,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
	,SalesOrderChannel AS SalesChannel
	,SalesOrderChannel As AxInterSalesChannel
	,UpdateStock AS IsUpdatingStock
	--,'' AS Department
	--,'' AS ProjectNum
	--,'' AS IndexKey
	,ReturnComment
	,UPPER(TRIM(SalesReturnOrderNum)) AS SalesReturnOrderNum
	,UPPER(TRIM(SalesReturnInvoiceNum)) AS SalesReturnInvoiceNum
	--,'0' AS Cancellation
	--,'' AS SORes1
	--,'' AS SORes2
	--,'' AS SORes3
	--,NULL AS [TotalMiscChrg]
FROM stage.NOM_NO_OLine
GROUP BY
	PartitionKey, Company, CustNum, OrderNum, OrderLine, OrderSubLine, SalesOrderType, OrderRelNum, InvoiceNum, OrderQty, DelivQty, RemainingQty, UnitPrice, UnitCost, Currency, ExchangeRate, OpenRelease, DiscountAmount, DiscountPercent, PartNum, PartStatus, SalesPersonName, ReturnComment, SalesReturnOrderNum, SalesReturnInvoiceNum, WarehouseCode, OrderDate, NeedbyDate, DelivDate, SalesOrderChannel, ItemClass,ExpDelivDate,ActualDelivDate,FirstConfirnedDate, UpdateStock
GO
PRINT N'Creating [dm_TS].[fctSalesOrder]'
GO



CREATE VIEW [dm_TS].[fctSalesOrder] AS


SELECT 
 so.[SalesOrderID]
,so.[SalesOrderNumID]
,so.[CustomerID]
,so.[CompanyID]
,so.[PartID]
,so.[WarehouseID]
,so.[ProjectID]
,so.[SalesPersonNameID]
,so.[DepartmentID]
,so.[SalesOrderDateID]
,so.[Company]
,so.[CustomerNum]
,so.[SalesOrderNum]
,so.[SalesOrderLine]
,so.[SalesOrderSubLine]
,so.[SalesOrderType]
,so.[SalesOrderCategory]
,so.[SalesOrderDate]
,so.[NeedbyDate]
,so.[ExpDelivDate]
,so.[ConfirmedDelivDate]
,so.[SalesInvoiceNum]
,so.[SalesOrderQty]
,so.[DelivQty]
,so.[RemainingQty]
,so.[UoM]
,so.[UnitPrice]
,so.[UnitCost]
,so.[Currency]
,so.[ExchangeRate]
,so.[OpenRelease]
,so.[OrderStatus]
,so.[DiscountAmount]
,so.[DiscountPercent]
,so.[PartNum]
,so.[PartType]
,so.[PartStatus]
,so.[SalesPersonName]
,so.[WarehouseCode]
,so.[SalesChannel]
,so.[AxInterSalesChannel]
,so.[Department]
,so.[ProjectNum]
,so.[ActualDelivDate]
,so.[SalesInvoiceQty]
,so.[TotalMiscChrg]
,so.[IsUpdatingStock]
,so.[SORes1]
,so.[SORes2]
,so.[SORes3]
,so.[SORes4]
,so.[SORes5]
,so.[SORes6]

FROM dm.FactSalesOrder as so
/*temp putting (CERPL) Certex PL here such that they see the data in same company*/
WHERE Company  in ('FESFORA', 'FSEFORA', 'FFRFORA', 'FORPL', 'CERPL', 'FFRGPI', 'FFRLEX','IFIWIDN', 'IEEWIDN', 'TMTFI', 'TMTEE', 'FITMT', 'ABKSE', 'ROROSE','STESE','CERBG'
,'FORBG')  -- TS basket by 2020-08-31 -- , 'EIGSE'
GO
PRINT N'Creating [stage].[AXL_PT_Customer]'
GO
CREATE TABLE [stage].[AXL_PT_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[MainCustomerName] [nvarchar] (100) NULL,
[CustomerName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[AddressLine] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (20) NULL,
[TelephoneNumber2] [nvarchar] (20) NULL,
[Email] [nvarchar] (100) NULL,
[City] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[Division] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (50) NULL,
[CustomerIndustry] [nvarchar] (50) NULL,
[CustomerSubIndustry] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNo] [nvarchar] (50) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[CustomerABC] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[SalesPersonResponsible] [nvarchar] (50) NULL,
[CustomerType] [nvarchar] (50) NULL,
[Res1] [nvarchar] (50) NULL,
[Res2] [nvarchar] (50) NULL,
[Res3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXL_PT_Customer]'
GO


CREATE VIEW [stage].[vAXL_PT_Customer] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustomerNum))) )) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,UPPER(CONCAT([Company], '#', TRIM([CustomerNum]))) AS CustomerCode
	,PartitionKey

	,UPPER(Company) AS Company
	,UPPER(TRIM(CustomerNum)) AS [CustomerNum]
	,TRIM(MainCustomerName) AS MainCustomerName
	,TRIM(CustomerName) AS  [CustomerName]
	,TRIM([AddressLine1]) AS [AddressLine1]
	,TRIM([AddressLine2]) AS [AddressLine2]
	,TRIM([AddressLine3]) AS [AddressLine3]
	,TRIM([TelephoneNumber1]) AS [TelephoneNum1]
	,TRIM([TelephoneNumber2]) AS [TelephoneNum2]
	,TRIM([Email]) AS [Email]
	,TRIM([ZipCode]) AS [ZipCode]
	,TRIM([City]) AS [City]
	,TRIM([State]) AS [State]
	,TRIM([District]) AS [SalesDistrict]
	,TRIM(con.CountryName) AS CountryName
	,TRIM([ISOAlpha2Code]) AS [CountryCode]
	,TRIM([Division]) AS [Division]
	,TRIM([CustomerIndustry]) AS [CustomerIndustry]
	,TRIM([CustomerSubIndustry]) AS [CustomerSubIndustry]
	,TRIM([AddressLine3]) AS [AddressLine]
	,CONCAT(TRIM(con.CountryName), + ',  ' + TRIM([City]), + ',  ' + TRIM([ZipCode]), + ',  ' + TRIM(addressline3)) AS [FullAddressLine]
	,TRIM(CustomerGroup) AS [CustomerGroup]
	,TRIM(CustomerGroup) AS [CustomerSubGroup]
	,TRIM([SalesRepCode]) AS [SalesPersonCode]
	,TRIM(SalesPersonName) AS [SalesPersonName]
	,TRIM([SalesPersonResponsible]) AS [SalesPersonResponsible]
	,TRIM([VATRegNo]) AS [VATNum]
	,TRIM([AccountString]) AS [AccountNum]
	,TRIM([InternalExternal]) AS [InternalExternal]
	,TRIM([CustomerABC]) AS [CustomerScore]
	,TRIM([CustomerType]) AS [CustomerType]
FROM [stage].[AXL_PT_Customer] com
	LEFT JOIN dbo.Country con ON com.CountryName = con.[ISOAlpha2Code]

--GROUP BY
--	PartitionKey, Company, CustomerNum, CustomerName, MainCustomerName, [AddressLine1], [AddressLine2], [AddressLine3], [TelephoneNumber1], [TelephoneNumber2], [Email], [ZipCode], [City], [State], [District], [CountryName], [Division], [CustomerIndustry], [CustomerSubIndustry], CustomerGroup, [SalesRepCode], SalesPersonName, [SalesPersonResponsible], [VATRegNo], [AccountString], [InternalExternal], [CustomerABC], [CustomerType]

--	Stagetablename in ('AXL_AU_Customer', 'AXL_DC_Customer', 'AXL_HU_Customer', 'AXL_IE_Customer', 'AXL_PL_Customer', 'AXL_PT_Customer', 'AXL_UK_Customer')
GO
PRINT N'Creating [dm_DS].[fctBudget]'
GO
CREATE VIEW [dm_DS].[fctBudget] AS

SELECT  bdg.[BudgetID]
,bdg.[CustomerID]
,bdg.[CompanyID]
,bdg.[PartID]
,bdg.[WarehouseID]
,bdg.[ProjectID]
,bdg.[DepartmentID]
,bdg.[BudgetPeriodDateID]
,bdg.[PartitionKey]
,bdg.[BudgetType]
,bdg.[BudgetName]
,bdg.[BudgetDescription]
,bdg.[Company]
,bdg.[BudgetPeriod]
,bdg.[BudgetPeriodDate]
,bdg.[PeriodType]
,bdg.[CustomerNum]
,bdg.[PartNum]
,bdg.[SalesPersonCode]
,bdg.[SalesPersonName]
,bdg.[BudgetSales]
,bdg.[BudgetCost]
,bdg.[GrossProfitInvoiced]
,bdg.[GrossMarginInvoicedPercent]
,bdg.[BudgetFinance]
,bdg.[WarehouseCode]
,bdg.[CostBearerNum]
,bdg.[CostUnitNum]
,bdg.[ProjectNum]
,bdg.[AccountNum]
,bdg.[AccountGroupNum]
FROM dm.FactBudget bdg
LEFT JOIN dbo.Company com ON bdg.Company = com.Company
WHERE com.BusinessArea = 'Driveline Solutions' AND com.[Status] = 'Active' 

--WHERE Company in ('MIT', 'ATZ', 'Transaut')
GO
PRINT N'Creating [stage].[FOR_PL_SOLine]'
GO
CREATE TABLE [stage].[FOR_PL_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[InvoiceHandler] [nvarchar] (200) NULL,
[Seller] [nvarchar] (200) NULL,
[CustomerCode] [nvarchar] (50) NULL,
[CustomerName] [nvarchar] (100) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartType] [nvarchar] (50) NULL,
[SalesOrderNumber] [nvarchar] (50) NULL,
[SalesOrderEntry] [nvarchar] (50) NULL,
[SalesOrderLine] [nvarchar] (50) NULL,
[SalesOrderObjectType] [nvarchar] (50) NULL,
[DeliveryNoteType] [nvarchar] (50) NULL,
[DeliveryNoteEntry] [nvarchar] (50) NULL,
[DeliveryNoteLine] [nvarchar] (50) NULL,
[DeliveryNoteDate] [date] NULL,
[SalesInvoiceBase] [nvarchar] (50) NULL,
[SalesInvoiceBaseTYPE] [nvarchar] (50) NULL,
[SalesInvoiceNum] [nvarchar] (50) NOT NULL,
[SalesInvoiceLine] [nvarchar] (50) NULL,
[SalesInvoiceType] [nvarchar] (50) NULL,
[SalesInvoiceDate] [date] NOT NULL,
[SalesInvoiceLineDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[SalesInvoiceQty] [nvarchar] (50) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitDiscount] [decimal] (18, 4) NULL,
[UnitPriceFinal] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[VATAmount] [decimal] (18, 4) NULL,
[DocumentCurrency] [nvarchar] (50) NULL,
[DocumentExchangeRate] [decimal] (18, 4) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[Warehouse] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (50) NULL,
[SalesInvoiceStatus] [nvarchar] (50) NULL,
[IsCreditInvoice] [nvarchar] (50) NULL,
[Is/ToVerify] [nvarchar] (50) NULL,
[ObjType] [int] NULL,
[AccountCode] [nvarchar] (50) NULL,
[VATCode] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vFOR_PL_SOLine]'
GO
CREATE VIEW [stage].[vFOR_PL_SOLine] AS
--COMMENT EMPTY FIELDS // ADD TRIM() UPPER() INTO CustomerID,WarehouseID 23-01-11 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',SalesInvoiceNum,'#',SalesInvoiceLine,'#',[SalesInvoiceType]))) AS SalesInvoiceID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',SalesOrderNumber,'#',[SalesOrderLine]))) AS SalesOrderID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#', TRIM(SalesInvoiceNum),'#', TRIM(CAST(ObjType AS VARCHAR(10)))))) AS SalesLedgerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',SalesOrderNumber))) AS SalesOrderNumID  
	,CONVERT([binary](32),HASHBYTES('SHA2_256',Company)) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM([CustomerCode]))))) AS CustomerID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM([CustomerCode])))) AS CustomerID  
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]) ,'#', TRIM(PartNum))))) AS PartID 
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(PartNum)))) AS PartID 
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM(Warehouse))))) AS WarehouseID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([Warehouse])))) AS WarehouseID
	,CONCAT(Company,'#',SalesOrderNumber,'#',[SalesOrderLine]) as SalesOrderCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(SalesInvoiceNum)))) AS SalesInvoiceNumID -- Redundant
	,CONVERT(int, REPLACE(CONVERT(date,SalesInvoiceDate),'-','')) AS SalesInvoiceDateID  --Redundant?
	,CONCAT(Company,'#',TRIM(SalesInvoiceNum),'#',TRIM(SalesInvoiceLine)) AS SalesInvoiceCode --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID

	,PartitionKey
	,UPPER(TRIM(Company)) AS Company
	,Seller AS SalesPersonName
	,TRIM([CustomerCode]) AS CustomerNum
	,TRIM(PartNum) AS PartNum 
	,PartType
	,SalesOrderNumber AS SalesOrderNum
	,[SalesOrderLine] AS SalesOrderLine
	--,NULL AS SalesOrderSubLine
	,[SalesOrderObjectType] AS SalesOrderType
	,SalesInvoiceNum
	,SalesInvoiceLine
	,SalesInvoiceType
	,SalesInvoiceDate
	,COALESCE(ActualDelivDate, '1900-01-01') AS ActualDelivDate
	,CASE	WHEN SalesInvoiceType IN ('14') THEN -1 * ABS(SalesInvoiceQty)
			ELSE SalesInvoiceQty END AS SalesInvoiceQty
	,UoM
	,UnitPrice
	,UnitCost/COALESCE(NULLIF(DocumentExchangeRate,0),1) AS UnitCost
	,DiscountPercent
	,CASE	WHEN SalesInvoiceType IN ('14') THEN -1 * ABS(DiscountAmount) -- Number 14 means a cancellation thats why is the negative
			ELSE DiscountAmount END AS DiscountAmount
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	--,0 AS TotalMiscChrg 
	,VATAmount
	,[DocumentCurrency] AS Currency
	,[DocumentExchangeRate] AS ExchangeRate
	,IIF(SalesInvoiceType IN ('14','166'),'1','0')	AS CreditMemo
	--,NULL AS SalesChannel
	--,NULL Department
	,Warehouse AS WarehouseCode
	--,NULL AS DeliveryAddress
	--,NULL AS CostBearerNum
	--,NULL AS CostUnitNum
	--,NULL	AS ReturnComment
	--,NULL AS ReturnNum
	,[AccountCode] AS ProjectNum
	--,[AccountCode] AS IndexKey
	,[Is/ToVerify] AS SIRes1
	,[SalesInvoiceStatus] AS SIRes2
	,[VATCode] AS SIRes3
FROM stage.FOR_PL_SOLine
--GROUP BY PartitionKey, Company, SalesPerson, CustomerNum, SalesOrderNum, SalesOrderLine, OrderSubLine, OrderRel, OrderType, SalesInvoiceNum, SalesInvoiceLine, SalesInvoiceDate, SellingShipQty, UnitPrice, UnitCost, DiscountAmount, TotalMiscChrg, PartNum, WarehouseCode, CreditMemo, Indexkey, ActualDeliveryDate --, [Site]
GO
PRINT N'Creating [stage].[WID_FI_StockBalance]'
GO
CREATE TABLE [stage].[WID_FI_StockBalance]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (70) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[StockBalance] [decimal] (18, 4) NULL,
[ReservedQty] [decimal] (18, 4) NULL,
[BackOrderQty] [decimal] (18, 4) NULL,
[QtyOrdered] [decimal] (18, 4) NULL,
[FIFOValue] [decimal] (18, 4) NULL,
[StockTakDiff] [decimal] (18, 4) NULL,
[DelivTime] [int] NULL,
[DelivTimeUnit] [int] NULL,
[DelivTimeDesc] [nvarchar] (50) NULL,
[ReOrderLevel] [decimal] (18, 4) NULL,
[OptimalOrderQty] [decimal] (18, 4) NULL,
[BinNum] [nvarchar] (12) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[LastStockTakeDate] [date] NULL,
[LastStdCostCalDate] [date] NULL,
[DelivDateSupplier] [date] NULL,
[DelivDateCust] [date] NULL,
[OrderDateSupplier] [date] NULL,
[BatchNum] [nvarchar] (50) NULL,
[AvgCost] [decimal] (18, 4) NULL,
[MaxStockQty] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (10) NULL
)
GO
PRINT N'Creating [stage].[vWID_FI_StockBalance]'
GO
CREATE VIEW [stage].[vWID_FI_StockBalance] AS
--COMMENT EMPTY FIELDS // ADD TRIM()UPPER() INTO PartID 2022-12-15 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', TRIM([PartNum]), '#', TRIM([WarehouseCode]), '#', TRIM(BinNum)))) AS ItemWarehouseID
	,TRIM(WarehouseCode) AS WarehouseCode
	,CONCAT([Company], '#', TRIM([PartNum]), '#', TRIM([WarehouseCode])) AS ItemWarehouseCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [Company])) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', TRIM([SupplierNum])))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', TRIM([PartNum])))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]), '#', TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey

	,Company
	,CASE WHEN TRIM(BinNum) like '' OR BinNum like ' ' THEN NULL ELSE TRIM(BinNum) END AS BinNum
	,BatchNum
	,TRIM(SupplierNum) AS SupplierNum
	,TRIM(PartNum) AS PartNum
	,CASE WHEN [DelivTimeDesc] = 'Weeks' THEN [DelivTime]*7
		WHEN [DelivTimeDesc] = 'Months' THEN [DelivTime]*30
		ELSE [DelivTime]
		END AS [DelivTime]-- convert to days
--	,[DelivTimeUnit] AS [DeliveryTime]
--	,[DelivTimeDesc] 
--	,'' AS DaysOnStock
	,CONVERT(date, LastStockTakeDate) AS LastStockTakeDate
	,CONVERT(date, LastStdCostCalDate) AS LastStdCostCalDate
	,CONVERT(date, [DelivDateSupplier]) AS DelivDateSupplier
	,CONVERT(date, [DelivDateCust]) AS DelivDateCust
	,CONVERT(date, [OrderDateSupplier]) AS OrderDateSupplier
	,CONVERT(date, '') AS OrderDateCust
	,TRIM(Currency) AS Currency
	--,NULL AS SafetyStock
	,MaxStockQty
	,StockBalance
	,FIFOValue AS StockValue
	,AvgCost
	,ReservedQty AS ReserveQty
	,BackOrderQty
	,QtyOrdered AS OrderQty
	,StockTakDiff AS StockTakeDiff
	,ReOrderLevel
	,OptimalOrderQty
	--,'' AS SBRes1
	--,'' AS SBRes2
	--,'' AS SBRes3
FROM 
	[stage].[WID_FI_StockBalance]
GO
PRINT N'Creating [stage].[CER_LT_Supplier]'
GO
CREATE TABLE [stage].[CER_LT_Supplier]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[MainSupplierName] [nvarchar] (100) NULL,
[SupplierName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[AddressLine3] [nvarchar] (100) NULL,
[TelephoneNum] [nvarchar] (20) NULL,
[Email] [nvarchar] (200) NULL,
[City] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (100) NULL,
[Region] [nvarchar] (50) NULL,
[SupplierCategory] [nvarchar] (50) NULL,
[SupplierResponsible] [nvarchar] (50) NULL,
[AccountNum] [nvarchar] (50) NULL,
[VATNum] [nvarchar] (50) NULL,
[OrganizationNum] [nvarchar] (100) NULL,
[InternalExternal] [nvarchar] (100) NULL,
[CodeOfConduct] [nvarchar] (2) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[Reference] [nvarchar] (100) NULL,
[SupplierScore] [nvarchar] (50) NULL,
[MinOrderQty] [nvarchar] (50) NULL,
[Website] [nvarchar] (100) NULL,
[Comments] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[vCER_LT_Supplier]'
GO







CREATE VIEW [stage].[vCER_LT_Supplier] AS

SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID
    ,UPPER(CONCAT([Company],'#',TRIM([SupplierNum]))) AS SupplierCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([SupplierNum])) AS SupplierNum
	,[dbo].[ProperCase](TRIM(MainSupplierName)) AS MainSupplierName
	,[dbo].[ProperCase](TRIM(SupplierName)) AS SupplierName
    ,TRIM([AddressLine2]) AS AddressLine2
    ,TRIM([AddressLine3]) AS AddressLine3
	,[TelephoneNum]
	,[Email]
	,PARSENAME(REPLACE(dbo.SplitAddress(CONCAT(AddressLine1,' ',AddressLine2,' ',AddressLine3)), '^', '.'), 3) AS AddressLine1 -- TRIM([AddressLine1]) AS AddressLine1 2023-04-04 SB & TO 
    ,IIF(TRIM(ZipCode) is Null,PARSENAME(REPLACE(dbo.SplitAddress(CONCAT(AddressLine1,' ',AddressLine2,' ',AddressLine3)), '^', '.'), 2), trim(ZipCode)) AS ZipCode -- ,TRIM([ZipCode]) AS ZipCode 2023-04-04 SB & TO 
    ,IIF(TRIM(City)    IN (Null,''),PARSENAME(REPLACE(dbo.SplitAddress(CONCAT(AddressLine1,' ',AddressLine2,' ',AddressLine3)), '^', '.'), 1), trim(City)) AS City -- ,TRIM([ZipCode]) AS ZipCode 2023-04-04 SB & TO 

	,District
	,IIF(CountryName is null, 'LT', CountryCode) AS CountryCode
    ,IIF(CountryName is null, 'Lithuania', CountryName) AS CountryName
	,[Region] 
	,TRIM([SupplierCategory]) AS SupplierCategory 
	,TRIM([SupplierResponsible]) AS SupplierResponsible
	,[dbo].[ProperCase](TRIM(concat (addressline1+' '+ addressline2, null))) AS AddressLine
	,[dbo].[ProperCase](TRIM(concat_ws(',',coalesce([dbo].[ProperCase](CountryName),null),IIF(City= ' ',null,trim(substring(replace([dbo].[ProperCase](AddressLine3),' ', ''), 6, 100))),IIF(ZipCode= ' ',null,[dbo].[udf_GetNumeric]([Addressline3]))
		,coalesce(IIF([addressline1]= ' ',null,[addressline1]),IIF([addressline2]= ' ',null,[addressline2]))
		,coalesce(IIF([addressline2]= ' ',null,[addressline2]),IIF([addressline3]= ' ',null,[addressline3]))))) AS FullAddressLine
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [AccountNum])) AS [AccountNum] --required by Ian Morgan & approved by Emil T on 20200630
	,[VATNum]
	,OrganizationNum
	,[InternalExternal]
	,[CodeOfConduct]
	,CustomerNum
	,TRIM([SupplierScore]) AS SupplierScore
	,COALESCE(TRY_CONVERT(decimal(18,4), [MinOrderQty]),0) AS [MinOrderQty]
	,0 AS MinOrderValue	
	,[Website]
	,TRIM([Comments]) AS Comments
	,'' AS SRes1
	,'' AS SRes2
	,'' AS SRes3
	,iif(trim([SupplierCategory]) IN ('PRODUCT SUPPLIER','Axel Johnson International Group'),1,0) AS IsMaterialSupplier
FROM [stage].[CER_LT_Supplier]
--GROUP BY 
--      [PartitionKey],[Company],[SupplierNum],MainSupplierName,[SupplierName],[AddressLine1],[AddressLine2],[AddressLine3],[City],[ZipCode],[Region],District, [CountryName]
--	  ,[SupplierCategory],[SupplierResponsible],[Reference],[AccountNum],[VATNum],[SupplierScore],[CustomerNum],[TelephoneNum],[Email],[Website],[CodeOfConduct]
--	  ,[MinOrderQty],[InternalExternal],[Comments], OrganizationNum
GO
PRINT N'Creating [prestage].[CYE_ES_Warehouse]'
GO
CREATE TABLE [prestage].[CYE_ES_Warehouse]
(
[Company] [nvarchar] (8) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[WarehouseName] [nvarchar] (200) NULL,
[WarehouseDistrict] [nvarchar] (200) NULL,
[WarehouseAddress] [nvarchar] (200) NULL,
[WarehouseDescription] [nvarchar] (200) NULL,
[WarehouseType] [nvarchar] (100) NULL,
[WarehouseCountry] [nvarchar] (100) NULL,
[Site] [nvarchar] (200) NULL
)
GO
PRINT N'Creating [prestage].[CYE_ES_SalesOffice]'
GO
CREATE TABLE [prestage].[CYE_ES_SalesOffice]
(
[SalesOfficeCode] [nvarchar] (50) NULL,
[SalesOfficeDescrip] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCYE_ES_Warehouse]'
GO
CREATE VIEW [stage].[vCYE_ES_Warehouse] AS
--ADD TRIM() INTO WarehouseID 23-01-03 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM('CYESA'), '#', TRIM([WarehouseCode]))))) AS WarehouseID
--	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT('CYESA', '#', [WarehouseCode])))) AS WarehouseID
	,'2022-12-16 00:00:00' AS PartitionKey

	,'CYESA' AS Company
	,UPPER(TRIM([WarehouseCode])) AS [WarehouseCode]
	,[WarehouseName]
	,[WarehouseDistrict]
	,[WarehouseAddress]
	,[WarehouseName] AS [WarehouseDescription]
	,'Plant(Location)' AS [WarehouseType]
	,[WarehouseCountry]
	,[Site] AS [WarehouseSite]
FROM [prestage].[CYE_ES_Warehouse]

UNION ALL

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM('CYESA'), '#', TRIM([SalesOfficeDescrip]))))) AS WarehouseID
--	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT('CYESA', '#', TRIM([SalesOfficeDescrip]))))) AS WarehouseID
	,'2022-12-16 00:00:00' AS PartitionKey

	,'CYESA' AS Company
	,UPPER(TRIM(SalesOfficeDescrip)) AS [WarehouseCode]
	,SalesOfficeDescrip AS [WarehouseName]
	,'' AS [WarehouseDistrict]
	,'' AS [WarehouseAddress]
	,SalesOfficeDescrip AS [WarehouseDescription]
	,'SalesOffice' AS [WarehouseType]
	,IIF(SalesOfficeCode = 'OF86', 'Islas Canarias', 'España') AS [WarehouseCountry]
	,'' AS [WarehouseSite]
FROM [prestage].[CYE_ES_SalesOffice]

--GROUP BY 
--	PartitionKey,[Company],[WarehouseCode],[WarehouseName],[WarehouseDistrict], [WarehouseDescription], [WarehouseAddress],[WarehouseType],[WarehouseCountry], [Site]
GO
PRINT N'Creating [stage].[NOM_DK_OLine]'
GO
CREATE TABLE [stage].[NOM_DK_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[SalesOrderType] [nvarchar] (50) NULL,
[OrderRelNum] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[ExpDelivDate] [date] NULL,
[DelivDate] [date] NULL,
[NeedByDate] [date] NULL,
[FirstConfirnedDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (38, 8) NULL,
[DelivQty] [decimal] (38, 8) NULL,
[RemainingQty] [decimal] (38, 8) NULL,
[UnitPrice] [numeric] (28, 8) NULL,
[UnitCost] [numeric] (28, 8) NULL,
[SumUnitCost] [numeric] (38, 6) NULL,
[SumUnitPrice] [numeric] (38, 6) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (28, 8) NULL,
[OpenRelease] [nvarchar] (1) NULL,
[DiscountPercent] [decimal] (38, 6) NULL,
[DiscountAmount] [decimal] (38, 6) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [int] NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[SalesOrderChannel] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (100) NULL,
[SalesReturnOrderNum] [nvarchar] (50) NULL,
[SalesReturnInvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[ItemClass] [nvarchar] (50) NULL,
[UpdateStock] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vNOM_DK_OLine]'
GO
CREATE VIEW [stage].[vNOM_DK_OLine] AS
--COMMENT EMPTY FIELDS 23-01-03 VA
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company),'#', TRIM(OrderNum),'#', TRIM(OrderLine),'#', TRIM(OrderRelNum),'#')))) AS SalesOrderID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID 
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(OrderNum))))) AS SalesOrderNumID 
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(OrderNum),'#',TRIM(OrderLine))) AS SalesOrderCode 
	,CONVERT(int, replace(convert(date, OrderDate),'-','')) AS SalesOrderDateID --Redundant?  
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey 

	,UPPER(TRIM(Company)) AS Company
	,UPPER(TRIM(CustNum)) AS CustomerNum 
	,UPPER(TRIM(OrderNum)) AS SalesOrderNum
	,UPPER(TRIM(OrderLine)) AS SalesOrderLine
	,OrderSubLine AS SalesOrderSubLine
	,IIF(SalesOrderType = '10 - Internal Order', 'Internal Order', SalesOrderType) AS SalesOrderType -- added 2022-08-26 LL/DZ
	--,'' AS SalesOrderCategory
--	,UPPER(TRIM(OrderRelNum)) AS SalesOrderRelNum
	,OrderDate AS SalesOrderDate
	,NeedbyDate
	,ExpDelivDate
	,ActualDelivDate
	,FirstConfirnedDate AS ConfirmedDelivDate
	,UPPER(TRIM(InvoiceNum)) AS SalesInvoiceNum
	,IIF(SalesOrderType = '8 - Credit Order', -1*OrderQty, OrderQty) AS SalesOrderQty
	,IIF(SalesOrderType = '8 - Credit Order', -1*DelivQty, DelivQty) AS DelivQty
	,RemainingQty
	--,NULL AS SalesInvoiceQty
	--,'' AS UoM
	,UnitPrice
	,UnitCost
	--,SumUnitPrice
	--,SumUnitCost
	,Currency  --CASE WHEN (Company = 'NomoSE' and CurrExChRate = 1) THEN 'SEK'  WHEN (Company = 'NomoDK' and CurrExChRate = 1) THEN 'DKK'  WHEN (Company = 'NomoFI' and CurrExChRate = 1) THEN 'EUR' ELSE CURRENCY END AS 
	,ExchangeRate
	,CASE WHEN OpenRelease = 'I' THEN '0' ELSE '1' END AS OpenRelease
	,IIF(SalesOrderType = '8 - Credit Order', -1*DiscountAmount, DiscountAmount) AS DiscountAmount
	,DiscountPercent
	,PartNum
	,ItemClass AS PartType
	,PartStatus
	,SalesPersonName
	,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
	,SalesOrderChannel AS SalesChannel
	,SalesOrderChannel AS AxInterSalesChannel
	,UpdateStock AS IsUpdatingStock
	--,'' AS Department
	--,'' AS ProjectNum
	--,'' AS IndexKey
	,ReturnComment
	,UPPER(TRIM(SalesReturnOrderNum)) AS SalesReturnOrderNum
	,UPPER(TRIM(SalesReturnInvoiceNum)) AS SalesReturnInvoiceNum
	--,'0' AS Cancellation
	--,'' AS SORes1
	--,'' AS SORes2
	--,'' AS SORes3
	--,NULL AS [TotalMiscChrg]
FROM stage.NOM_DK_OLine
GROUP BY
	PartitionKey, Company, CustNum, OrderNum, OrderLine, OrderSubLine, SalesOrderType, OrderRelNum, InvoiceNum, OrderQty, DelivQty, RemainingQty, UnitPrice, UnitCost, Currency, ExchangeRate, OpenRelease, DiscountAmount, DiscountPercent, PartNum, PartStatus, SalesPersonName, ReturnComment, SalesReturnOrderNum, SalesReturnInvoiceNum, WarehouseCode, OrderDate, NeedbyDate, DelivDate, SalesOrderChannel, ItemClass, ExpDelivDate, ActualDelivDate, FirstConfirnedDate, UpdateStock
GO
PRINT N'Creating [dm_TS].[fctFinanceOpeningBalance]'
GO



CREATE   VIEW [dm_TS].[fctFinanceOpeningBalance] AS
SELECT  [OpenBalanceID]
,[AccountID]
,[CostUnitID]
,[CostBearerID]
,[ProjectID]
,[CompanyID]
,[PartitionKey]
,[Company]
,[AccountNum]
,[CostUnitNum]
,[CostBearerNum]
,[ProjectNum]
,[JournalType]
,[JournalDate]
,[Description]
,[OpeningBalance]
,[AccountingDate]
  FROM [dm].[FactFinanceOpeningBalance]
WHERE Company  IN ('FESFORA', 'FSEFORA', 'FFRFORA', 'FORPL', 'CERPL', 'FFRGPI', 'FFRLEX', 'IFIWIDN', 'IEEWIDN', 'TMTFI', 'TMTEE', 'FITMT', 'EETMT', 'ABKSE', 'ROROSE','STESE')
GO
PRINT N'Creating [stage].[AXI_HQ_GeneralLedger]'
GO
CREATE TABLE [stage].[AXI_HQ_GeneralLedger]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (8) NOT NULL,
[AccountNum] [nvarchar] (50) NULL,
[CostUnitNum] [nvarchar] (50) NULL,
[CostBearerNum] [nvarchar] (50) NULL,
[JournalType] [nvarchar] (50) NULL,
[JournalDate] [date] NULL,
[JournalNum] [nvarchar] (50) NOT NULL,
[JournalLine] [nvarchar] (50) NULL,
[AccountingDate] [date] NULL,
[Description] [nvarchar] (500) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[InvoiceAmount] [decimal] (18, 4) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[SalesInvoiceNum] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[SupplierInvoiceNum] [nvarchar] (50) NULL,
[LinkToOriginalInvoice] [nvarchar] (500) NULL,
[DeliveryCountry] [nvarchar] (100) NULL,
[TransactionNum] [nvarchar] (50) NULL,
[VATCode] [nvarchar] (50) NULL,
[VATCodeDesc] [nvarchar] (500) NULL,
[GLRes1] [nvarchar] (100) NULL,
[GLRes2] [nvarchar] (100) NULL,
[GLRes3] [nvarchar] (100) NULL,
[InvoiceAmountLC] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vAXHSE_HQ_GeneralLedger]'
GO








CREATE VIEW [stage].[vAXHSE_HQ_GeneralLedger] AS
--THE IS HARCODED IN THE WHERE CLAUSE BECAUSE WE ONLY HAVE A OPEN BALANCE SINCE 2020. 23-03-02 VA - SB
SELECT 
		CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', [TransactionNum], '#', JournalNum,'#', JournalLine,'#', JournalType ))) AS GeneralLedgerID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', AccountNum ))) AS AccountID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', RIGHT('000000' + CostUnitNum,6) ))) AS CostUnitID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', CostBearerNum ))) AS CostBearerID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', [SupplierNum] ))) AS SupplierID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', [CustomerNum] ))) AS CustomerID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', '' ))) AS ProjectID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',Company)) AS CompanyID
	  ,CONVERT(varchar, GETDATE(), 23) AS PartitionKey

      ,[Company]
      ,[AccountNum]
      ,RIGHT('000000' + CostUnitNum,6)	AS [CostUnitNum]
      ,[CostBearerNum]
      ,[JournalType]
      ,[JournalDate]
      ,[JournalNum]
      ,[JournalLine]
      ,[AccountingDate]
      ,[Description]
      ,IIF([ExchangeRate] = 1, 'SEK', [Currency]) AS [Currency]
      ,[ExchangeRate]
      ,[InvoiceAmount]
	  ,[InvoiceAmountLC]
      ,[CustomerNum]
      ,[SupplierNum]
      ,[SalesInvoiceNum]
      ,[PurchaseInvoiceNum]
      ,[SupplierInvoiceNum]
      ,[LinkToOriginalInvoice]
      ,[DeliveryCountry]
      ,[TransactionNum]
      ,[VATCode]
      ,[VATCodeDesc]
      ,[GLRes1]
      ,[GLRes2]
      ,[GLRes3]
  FROM [stage].[AXI_HQ_GeneralLedger]
  where UPPER(Company) = 'AXHSE' AND AccountingDate >= '2020-01-01'
GO
PRINT N'Creating [dm_DS].[dimSalesOrderDistinct]'
GO






CREATE VIEW [dm_DS].[dimSalesOrderDistinct] AS

SELECT  sod.[CompanyID]
,sod.[Company]
,sod.[SalesOrderNumID]
,sod.[SalesOrderNum]
,sod.[CustomerID]
,sod.[Customer]
,sod.[SalesPersonName]
,sod.[SalesChannel]
,sod.[AxInterSalesChannel]
,sod.[Department]
FROM dm.DimSalesOrderDistinct sod
LEFT JOIN dbo.Company com ON sod.Company = com.Company
WHERE com.BusinessArea = 'Driveline Solutions' AND com.[Status] = 'Active'
--WHERE Company  in ('MIT', 'ATZ', 'Transaut', 'IPLIOWTR')  -- DS basket
GO
PRINT N'Creating [stage].[SCM_FI_SupplierAgreement]'
GO
CREATE TABLE [stage].[SCM_FI_SupplierAgreement]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[RecordType] [nvarchar] (50) NULL,
[RecordTypeDesc] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[DiscountPercent] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivTime] [nvarchar] (10) NULL,
[CurrencyCode] [nvarchar] (10) NULL,
[SupplierTerms] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vSCM_FI_SupplierAgreement]'
GO
CREATE VIEW [stage].[vSCM_FI_SupplierAgreement] AS 
--COMMENT EMPTY FIELDS // ADD UPPER() TRIM() INTO PartID 2022-12-21 VA
--ADD TRIM()UPPER() INTO SupplierID 23-01-24 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(TRIM([Company]), '#', TRIM([RecordType]), '#', TRIM([PartNum]), '#', TRIM([SupplierNum])))) AS SupplierAgreementID --CustomerAgreementID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM([Company]))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM([SupplierNum]))))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM([SupplierNum])))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM([CurrencyCode]))) AS CurrencyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM([PartNum]))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM([PartNum])))) AS PartID
	,[PartitionKey]

	,[Company]
	,TRIM([SupplierNum]) AS SupplierNum
	,TRIM([PartNum]) AS PartNum
	,[RecordType] AS [AgreementCode]
	,[RecordTypeDesc] AS [AgreementDescription]
	,[DiscountPercent]
	,MAX([UnitPrice]) AS [UnitPrice]
	,[OrderQty] AS [AgreementQty]
	,[CurrencyCode] AS [Currency]
	,[DelivTime]
	,cast ('1900-01-01' as date) AS [AgreementStart]
	,cast ('1900-01-01'as date) AS [AgreementEnd]
	,[SupplierTerms]
	--,0	AS FulfilledQty
	--,0  AS RemainingQty
	--,''	AS UoM
	--,'' AS [SARes1]
	--,'' AS [SARes2]
	--,'' AS [SARes3]
FROM 
	[stage].[SCM_FI_SupplierAgreement]
GROUP BY [PartitionKey], [Company], [SupplierNum], [PartNum], [RecordType], [RecordTypeDesc], [DiscountPercent], [OrderQty], [CurrencyCode], [DelivTime], [SupplierTerms]
GO
PRINT N'Creating [stage].[AXL_DE_SalesLedger]'
GO
CREATE TABLE [stage].[AXL_DE_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceAmount] [decimal] (18, 4) NULL,
[RemainAmount] [decimal] (18, 4) NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vAXL_DE_SalesLedger]'
GO
CREATE VIEW [stage].[vAXL_DE_SalesLedger] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(sl.Company, '#', TRIM(sl.CustNum), '#', TRIM(sl.InvoiceNum))))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(sl.Company))) AS CompanyID
	,UPPER(CONCAT(sl.Company, '#', TRIM(sl.CustNum), '#', TRIM(sl.InvoiceNum))) AS SalesLedgerCode
	,sl.PartitionKey

	,UPPER(sl.Company) AS Company
	,UPPER(TRIM(sl.CustNum)) AS CustomerNum
	,TRIM(sl.InvoiceNum) AS [SalesInvoiceNum]
	,IIF(so.InvoiceDate = '' OR so.InvoiceDate IS NULL, '1900-01-01', so.InvoiceDate) AS [SalesInvoiceDate] --
	,CONVERT(date, DueDate) AS SalesDueDate
	,CONVERT(date, LastPaymentDate) AS LastPaymentDate
	,[InvoiceAmount]
	,[RemainAmount] AS [RemainingInvoiceAmount]
	,NULL AS CashDiscOffered
	,NULL AS CashDiscUsed
	,NULL AS [ExchangeRate]
	,NULL AS [Currency]
	,NULL AS [VATAmount]
	,NULL AS [VATCode]
	,NULL AS [PayToName]
	,NULL AS [PayToCity]
	,NULL AS [PayToContact]
	,NULL AS [PaymentTerms]
	,sl.Res1 AS SLRes1
	,sl.Res2 AS SLRes2
	,sl.Res3 AS SLRes3
FROM stage.AXL_de_SalesLedger sl
	LEFT JOIN stage.AXL_de_SOLine so ON TRIM(sl.InvoiceNum) = TRIM(so.InvoiceNum)
WHERE DueDate > '2015-01-01'
GROUP BY
	sl.PartitionKey, sl.Company, sl.CustNum, sl.InvoiceNum, sl.Res2, sl.Res1, sl.Res3, sl.[InvoiceAmount], sl.[RemainAmount], so.InvoiceDate, DueDate, LastPaymentDate
GO
PRINT N'Creating [stage].[vACO_UK_SOLine_Manual_Adjustment]'
GO
CREATE VIEW [stage].[vACO_UK_SOLine_Manual_Adjustment]	AS
--ADD TRIM()UPPER()INTO PartID/CustomerID VA
WITH CTE AS (
SELECT  
		[SopNumber]
      ,[SOPTYPE]
      ,COALESCE(TRY_CONVERT(date, [GLPostingdate]), TRY_CONVERT(date, [GLPostingDate], 103)) AS GLPostingDate
      ,[ItemNumber]
      ,[Brand]
      ,COALESCE(TRY_CONVERT(decimal(18,4), REPLACE(REPLACE([ExtendedPrice],',','.'),' ','')),0) AS [ExtendedPrice]
      ,COALESCE(TRY_CONVERT(decimal(18,4), REPLACE(REPLACE([ExtendedCost],',','.'),' ','')),0) AS [ExtendedCost]
      ,COALESCE(NULLIF(TRY_CONVERT(Decimal(18,4),[QUANTITY]),0)	,1) AS Quantity
      ,[CUSTNMBR]
      ,[Item_Class]
      ,[UserToEnter]
      ,COALESCE(TRY_CONVERT(Decimal(18,4),[Discount])	,0) AS Discount
	,ROW_NUMBER() OVER (Partition BY SOPNumber ORDER BY CUSTNMBR, ItemNumber, ExtendedPrice, ExtendedCost)	AS RowNum
	,N'ACORNUK' AS Company
  FROM [stage].[ACO_UK_SOLine_Manual_Adjustment]
  WHERE SOPNumber IS NOT NULL
)
SELECT 
CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(CTE.Company,  '#', SOPNumber, '#', RowNum))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(CTE.Company, '#', SOPNumber, '#', CUSTNMBR, '#', ItemNumber  ))) AS SalesOrderID --Not really relevant
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(CTE.Company, '#', CUSTNMBR, '#', SOPNumber))) AS SalesLedgerID --Not really relevant
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(CTE.Company, '#', SOPNumber))) AS SalesOrderNumID --Not really relevant
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CTE.Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(CTE.Company), '#', TRIM(CUSTNMBR))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(CTE.Company, '#', CUSTNMBR))) AS CustomerID
	,COALESCE(P.PartID, CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(CTE.Company), '#',TRIM(ItemNumber)))))) AS PartID 
	--,COALESCE(P.PartID, CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT(CTE.Company, '#',ItemNumber)))) AS PartID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(CTE.Company, '#', ''))) AS WareHouseID --Not really relevant
	,CONCAT(CTE.Company, '#', SOPNumber,'' ) AS SalesOrderCode --Not really relevant
	,CONVERT(int, replace(convert(date,GLPostingDate), '-', '')) AS SalesInvoiceDateID  --Redundant?
	,CONCAT(CTE.Company, '#', SOPNumber) AS SalesInvoiceCode --Redundant??
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( CTE.Company,'#','') ))	AS ProjectID
	,FORMAT(GETDATE(), 'yyyy-MM-dd hh:mm:ss') PartitionKey

	,CTE.Company
	,[dbo].[ProperCase](UserToEnter) AS SalesPersonName
	,TRIM(CUSTNMBR) AS CustomerNum
	,TRIM(ItemNumber) AS PartNum
	,NULL  AS PartType
	,NULL AS SalesOrderNum
	,NULL AS SalesOrderLine
	,NULL AS SalesOrderSubLine
	,SOPTYPE AS SalesOrderType
	,SopNumber AS SalesInvoiceNum
	,'' AS SalesInvoiceLine
	,SOPTYPE AS SalesInvoiceType
	,CASE WHEN GLPostingDate = '' THEN '1900-01-01' ELSE CONVERT(date, GLPostingDate) END AS SalesInvoiceDate
	,'1900-01-01'	AS ActualDelivDate
	,QUANTITY	AS SalesInvoiceQty
	,'' AS UoM
	,ExtendedPrice/Quantity AS	UnitPrice
	,ExtendedCost/Quantity AS UnitCost
	,'0' AS DiscountPercent
	,Discount	AS DiscountAmount
	,0 AS CashDiscountOffered
	,0 AS CashDiscountUsed
	,0	AS TotalMiscChrg
	,0 AS VATAmount
	,'GBP' AS Currency
	,1 AS ExchangeRate
	--,CreditMemo
	,'0'	 AS  CreditMemo
	,NULL AS SalesChannel
	,'' AS Department
	,'' AS WarehouseCode
	,NULL AS DeliveryAddress
	,'' AS CostBearerNum
	,'' AS CostUnitNum
	,'' AS ReturnComment
	,'' AS ReturnNum
	,'Manual Adjustment' AS ProjectNum
	,RowNum AS [IndexKey]
	,NULL	AS SIRes1
	,NULL	AS SIRes2
	,NULL	AS SIRes3
FROM CTE
LEFT JOIN (SELECT [PartID], [PartCode], [Company], [PartNum], [PartName], [PartDescription], [PartDescription2], [PartDescription3], [ProductGroup], [ProductGroup2], [ProductGroup3], [ProductGroup4], [Brand], [CommodityCode], [PartReplacementNum], [PartStatus], [CountryOfOrigin], [NetWeight], [UoM], [Material], [Barcode], [ReOrderLevel], [PartResponsible], [StartDate], [EndDate], [CompanyID], [PartitionKey], [MainSupplier], [AlternativeSupplier], [is_deleted], [is_inferred], [PARes1], [PARes2], [PARes3], [IsActiveRecord] FROM dw.Part WHERE Company = 'ACORNUK' AND PartDescription3 IS NULL) P ON TRIM(CTE.ItemNumber) = TRIM(P.PartNum)
GO
PRINT N'Creating [stage].[CER_NO_BC_Supplier]'
GO
CREATE TABLE [stage].[CER_NO_BC_Supplier]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (100) NOT NULL,
[SupplierName] [nvarchar] (100) NULL,
[SupplierNum] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[TelephoneNum1] [nvarchar] (100) NULL,
[TelephoneNum2] [nvarchar] (100) NULL,
[Email] [nvarchar] (100) NULL,
[ZipCode] [nvarchar] (100) NULL,
[City] [nvarchar] (100) NULL,
[CountryCode] [nvarchar] (100) NULL,
[PrimaryPurchaser] [nvarchar] (100) NULL,
[VATNum] [nvarchar] (100) NULL,
[MinOrderValueCurrency] [nvarchar] (100) NULL,
[IsActiveRecord] [nvarchar] (100) NULL,
[Website] [nvarchar] (100) NULL,
[CreatedTimeStamp] [nvarchar] (100) NULL,
[ModifiedTimeStamp] [nvarchar] (100) NULL,
[IsMaterialSupplier] [nvarchar] (100) NULL,
[CodeOfConduct] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vCER_NO_BC_Supplier]'
GO

--select * from dw.Supplier where Company = 'CERNO'
--select SupplierID,count(*) from [stage].[vCER_NO_BC_Supplier] group by SupplierID order by 2;

CREATE VIEW [stage].[vCER_NO_BC_Supplier]
AS
SELECT

--------------------------------------------- Keys/ IDs ---------------------------------------------
		CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum))))) AS SupplierID
		,UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum))) AS SupplierCode
		,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID
		,PartitionKey
--------------------------------------------- Regular Fields ---------------------------------------------
---Mandatory Fields ---
		,UPPER(TRIM(Company)) AS Company
		,UPPER(TRIM(SupplierNum)) AS SupplierNum
		,UPPER(TRIM(SupplierName)) AS SupplierName
		--,UPPER(TRIM(OrgNum)) AS OrgNum
		,UPPER(TRIM(VATNum)) AS VATNum

---Valuable Fields ---
		--,UPPER(TRIM(ParentSupplierName)) AS ParentSupplierName
		,UPPER(TRIM(AddressLine1)) AS AddressLine1
		,UPPER(TRIM(AddressLine2)) AS AddressLine2
		,UPPER(TRIM(IIF([TelephoneNum1] is null, [TelephoneNum2],[TelephoneNum1]))) AS TelephoneNum1
		,UPPER(TRIM(Email)) AS Email
		,UPPER(TRIM(ZipCode)) AS ZipCode
		,UPPER(TRIM(City)) AS City
		,UPPER(TRIM(CountryCode)) AS CountryCode
        ,[PrimaryPurchaser] AS [MainSupplierName]--PREGUNTAR
        ,UPPER(TRIM(MinOrderValueCurrency)) AS MinOrderValueCurrency--REVISAR
        --,TRIM(IsActiveRecord) AS IsActiveRecord -- preguntar
        ,UPPER(TRIM(Website)) AS Website
		,CAST(left([CreatedTimeStamp],19)    AS DATETIME)    AS [CreatedTimeStamp] 
		,CAST(left([ModifiedTimeStamp],19)   AS DATETIME)    AS [ModifiedTimeStamp]
		,CAST([IsMaterialSupplier]   AS BIT) AS    [IsMaterialSupplier]
		,CAST([CodeOfConduct] AS BIT) AS       [CodeOfConduct] 
FROM [stage].[CER_NO_BC_Supplier];
GO
PRINT N'Creating [stage].[NOM_SEIND_Part]'
GO
CREATE TABLE [stage].[NOM_SEIND_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PartNum] [nvarchar] (50) NOT NULL,
[PartDescription] [nvarchar] (max) NULL,
[PartDescription2] [nvarchar] (max) NULL,
[ProductGroup] [nvarchar] (100) NULL,
[ProductGroup2] [nvarchar] (100) NULL,
[ProductGroup3] [nvarchar] (100) NULL,
[ProductGroup4] [nvarchar] (100) NULL,
[CommodityCode] [nvarchar] (50) NULL,
[CountryOfOrigin] [nvarchar] (50) NULL,
[PartResponsible] [nvarchar] (50) NULL,
[NetWeight] [decimal] (18, 8) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[ParentSupplier] [nvarchar] (50) NULL,
[ReorderLevel] [decimal] (18, 8) NULL,
[DiscountGroup] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vNOM_SEIND_Part]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vNOM_SEIND_Part] AS
--COMMENT EMPTY FIELD 2022-12-20 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(vp.[Company]), '#', TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(vp.[Company])))) AS CompanyID
	,UPPER(CONCAT(TRIM(vp.[Company]), '#', TRIM([PartNum]))) AS PartCode
	,PartitionKey

	,UPPER(TRIM(vp.[Company])) AS Company
	,UPPER(TRIM([PartNum])) AS PartNum
	--,'' AS [PartName]
	,[PartDescription]
	,[PartDescription2]
	,DiscountGroup AS [PartDescription3]
	,CONCAT(TRIM(vp.SupplierCode), '-', TRIM(vs.SupplierName)) AS MainSupplier
	,ParentSupplier AS AlternativeSupplier
	,[ProductGroup]
	,[ProductGroup2]
	,[ProductGroup3]
	,[ProductGroup4]
	--,'' AS [Brand]
	,[CommodityCode]
	--,'' AS PartReplacementNum
	--,'' AS PartStatus
	,[CountryOfOrigin]
	,[NetWeight]
	--,'' AS [UoM]
	--,'' AS [Material]
	--,'' AS [Barcode]
	,[ReOrderLevel]
	,PartResponsible
	--,'' AS [StartDate]
	--,'' AS [EndDate]
FROM [stage].[NOM_SEIND_Part] vp
LEFT JOIN  [dw].[vAll_Supplier] vs ON vp.Company = vs.Company AND vp.SupplierCode = vs.SupplierNum
--GROUP BY
--	PartitionKey, vp.Company, PartNum, PartDescription, PartDescription2, ProductGroup, ProductGroup2, ProductGroup3, ProductGroup4, CommodityCode, CountryOfOrigin, NetWeight, ReorderLevel, PartResponsible, DiscountGroup, SupplierCode
GO
PRINT N'Creating [dm_TS].[fctPurchaseOrderDistinct]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO







CREATE VIEW [dm_TS].[fctPurchaseOrderDistinct] AS


SELECT pod.[PurchaseOrderNumID]
,pod.[CompanyID]
,pod.[SupplierID]
,pod.[PurchaseOrderNum]
,pod.[Company]
,pod.[Supplier]

FROM dm.FactPurchaseOrderDistinct as pod

WHERE pod.Company  in ('FESFORA', 'FSEFORA', 'FFRFORA', 'FFRGPI', 'FFRLEX', 'IFIWIDN', 'IEEWIDN', 'TMTFI', 'TMTEE', 'FITMT', 'EETMT', 'ABKSE', 'ROROSE','STESE')  -- TS basket by 2021-08-05
GO
PRINT N'Creating [stage].[NOM_NO_CustomerAgreement]'
GO
CREATE TABLE [stage].[NOM_NO_CustomerAgreement]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[AgreementCode] [nvarchar] (50) NULL,
[AgreementDescription] [nvarchar] (50) NULL,
[DiscountPercent] [nvarchar] (50) NULL,
[UnitPrice] [nvarchar] (50) NULL,
[UoM] [nvarchar] (50) NULL,
[AgreementQty] [nvarchar] (50) NULL,
[DelivTime] [nvarchar] (50) NULL,
[Currency] [nvarchar] (10) NULL,
[CustomerTerms] [nvarchar] (100) NULL,
[AgreementStart] [date] NULL,
[AgreementEnd] [date] NULL,
[CARes1] [nvarchar] (100) NULL,
[CARes2] [nvarchar] (100) NULL,
[CARes3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vNOM_NO_CustomerAgreement]'
GO
CREATE VIEW [stage].[vNOM_NO_CustomerAgreement] AS 
--COMMENT EMPTY FIELDS 23-01-09 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM(AgreementCode),'#',TRIM([PartNum]),'#',TRIM(CustomerNum),'#',AgreementStart)))) AS CustomerAgreementID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID  
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM([Currency])))) AS CurrencyID
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM(CustomerNum)) AS CustomerNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,AgreementCode
	,AgreementDescription
	--,NULL AS DiscountPercent
	,CONVERT(decimal(18,4), [UnitPrice]) AS [UnitPrice]
	,AgreementQty
	,UPPER(TRIM([Currency])) AS Currency
	,[DelivTime]
	,AgreementStart
	,AgreementEnd
	,CustomerTerms
	--,0	AS FulfilledQty
	--,0  AS RemainingQty
	--,''	AS UoM
	--,'' AS CARes1
	--,'' AS CARes2
	--,'' AS CARes3
FROM 
	[stage].[NOM_NO_CustomerAgreement]
GROUP BY [PartitionKey], [Company], AgreementCode, AgreementDescription, [Currency], [PartNum], [DelivTime], AgreementStart, AgreementEnd, CustomerTerms, [UnitPrice], CustomerNum, AgreementQty
GO
PRINT N'Creating [dm_DS].[fctSalesLedger]'
GO

CREATE VIEW [dm_DS].[fctSalesLedger] AS 
SELECT 
 sl.[SalesLedgerID]
,sl.[SalesPersonNameID]
,sl.[Company]
,sl.[CustomerNum]
,sl.[SalesInvoiceNum]
,sl.[SalesInvoiceDate]
,sl.[SalesDueDate]
,sl.[SalesLastPaymentDate]
,sl.[InvoiceAmount]
,sl.[RemainingInvoiceAmount]
,sl.[ExchangeRate]
,sl.[Currency]
,sl.[VATAmount]
,sl.[VATCode]
,sl.[PayToName]
,sl.[PayToCity]
,sl.[PayToContact]
,sl.[PaymentTerms]
,sl.[SLRes1]
,sl.[SLRes2]
,sl.[SLRes3]
,sl.[SalesLedgerCode]
,sl.[CompanyID]
,sl.[PartitionKey]
,sl.[PaidInvoiceAmount]
,sl.[AccountingDate]
,sl.[AgingPeriod]
,sl.[AgingSort]
,sl.[VATCodeDesc]
,sl.[CustomerID]
,sl.[LinkToOriginalInvoice]
,sl.[SalesInvoiceDateID]
,sl.[PaymentStatus]
,sl.[WarehouseID]
FROM [dm].[FactSalesLedger] sl
LEFT JOIN dbo.Company com ON sl.Company = com.Company
WHERE com.BusinessArea = 'Driveline Solutions' AND com.[Status] = 'Active'

  --WHERE Company  IN ('MIT', 'ATZ', 'TRANSAUT', 'IPLIOWTR')
GO
PRINT N'Creating [stage].[SVE_SE_Supplier]'
GO
CREATE TABLE [stage].[SVE_SE_Supplier]
(
[Company] [nvarchar] (8) NULL,
[PartitionKey] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (500) NULL,
[SuplierName] [nvarchar] (500) NULL,
[AddressLine1] [nvarchar] (500) NULL,
[AddresLine2] [nvarchar] (500) NULL,
[TelephoneNum1] [nvarchar] (50) NULL,
[TelephoneNum2] [nvarchar] (50) NULL,
[Email] [nvarchar] (100) NULL,
[ZipCode] [nvarchar] (50) NULL,
[City] [nvarchar] (200) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[SupplierIndustry] [nvarchar] (50) NULL,
[VATNum] [nvarchar] (50) NULL,
[OrgNum] [nvarchar] (50) NULL,
[AcountNum] [nvarchar] (50) NULL,
[IsAxInterInternal] [nvarchar] (50) NULL,
[CodeOfConduct] [nvarchar] (50) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeSTamp] [nvarchar] (50) NULL,
[IsActiveRecord] [nvarchar] (50) NULL,
[Website] [nvarchar] (100) NULL,
[SRes1] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vSVE_SE_Supplier]'
GO

CREATE VIEW [stage].[vSVE_SE_Supplier] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(trim(Company), '#', TRIM([SupplierNum]))))) AS SupplierID
--	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([SupplierNum]))))) AS SupplierID
    ,UPPER(CONCAT('FITMT', '#', TRIM([SupplierNum]))) AS SupplierCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,[PartitionKey] --

	,UPPER(Company) AS Company
	,UPPER(TRIM([SupplierNum])) AS SupplierNum
	,'' AS MainSupplierName
	,TRIM(SuplierName) AS SupplierName
	,TRIM(AddressLine1) AS AddressLine1
    ,TRIM(AddresLine2) AS AddressLine2
    ,TRIM([TelephoneNum2]) AS AddressLine3
	,TRIM([TelephoneNum1]) AS [TelephoneNum]
	,TRIM(Email) AS [Email]
	,TRIM(ZipCode) AS ZipCode
	,TRIM([City]) AS City
	,IIF(CountryName IS NULL, 'SE', CountryCode) AS CountryCode
	,TRIM(CountryName) AS CountryName
	--,'' AS [Region] 
	--,'' AS SupplierCategory 
	,'' AS SupplierResponsible
	,IIF(AddressLine1 = '', TRIM([AddresLine2]), TRIM([AddressLine1])) AS AddressLine
	,Concat(TRIM(CountryName), ', ', TRIM([City]), ', ', TRIM(ZipCode), ', ', IIF(AddressLine1 = '', TRIM([AddresLine2]), TRIM([AddressLine1]))) AS FullAddressLine
	,TRIM([AcountNum]) AS [AccountNum]
	,TRIM([VATNum]) AS [VATNum]
	,TRIM([OrgNum]) AS OrganizationNum
	,IsAxInterInternal AS InternalExternal
	,TRIM([CodeOfConduct]) AS [CodeOfConduct]
	--,'' AS CustomerNum
	,'' AS SupplierScore
	--,NULL AS [MinOrderQty]
	--,NULL AS MinOrderValue	
	,[Website]
	,CreatedTimeStamp AS Comments
	,SRes1
	,ModifiedTimeSTamp AS SRes2
	,IsActiveRecord AS SRes3
FROM [stage].[SVE_SE_Supplier]
/*GROUP BY 
      [PartitionKey],[Company],[SupplierNum],[SupplierName],[AddressLine1],[AddressLine2],[AddressLine3],[City],[ZIP],[Region],[CountryName]
	  ,[SupplierCategory],[Reference],[BankAccountNum],[VATNum],[SupplierABC],[CustomerCode],[TelephoneNum],[Email],[Website],[CodeOfConduct]
	  ,[MinOrderQty],[InternalName],[Comment] */
GO
PRINT N'Creating [stage].[JEN_NO_Warehouse]'
GO
CREATE TABLE [stage].[JEN_NO_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseNum] [nvarchar] (50) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL,
[Addressline1] [nvarchar] (200) NULL,
[Addressline2] [nvarchar] (200) NULL,
[Addressline3] [nvarchar] (200) NULL,
[City] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vJEN_NO_Warehouse]'
GO
CREATE VIEW [stage].[vJEN_NO_Warehouse] AS
--COMMENT EMPTY FIELDS 2022-12-22 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseNum]))))) AS WarehouseID
	,PartitionKey

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([WarehouseNum])) AS [WarehouseCode]
	,[WarehouseName]
	,Addressline3 AS [WarehouseDistrict]
	,LEFT(CONCAT(Addressline1, ', ', Addressline2, ', ', Addressline3)  , 200) AS [WarehouseAddress]
	--,'' AS [WarehouseDescription]
	--,'' AS [WarehouseType]
	--,'' AS [WarehouseCountry]
	--,'' AS [WarehouseSite]
FROM [stage].[JEN_NO_Warehouse]
GO
PRINT N'Creating [stage].[MEN_NL_Supplier]'
GO
CREATE TABLE [stage].[MEN_NL_Supplier]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[SupplierCode] [nvarchar] (50) NOT NULL,
[Name] [nvarchar] (50) NULL,
[Adress] [nvarchar] (200) NULL,
[PostalCode] [nvarchar] (50) NULL,
[City] [nvarchar] (200) NULL,
[Country] [nvarchar] (100) NULL,
[Telephone] [nvarchar] (50) NULL,
[VatNumber] [nvarchar] (50) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[Created] [date] NULL,
[Changed] [date] NULL,
[CrediteurKey] [nvarchar] (50) NULL,
[DW_TimeStamp] [date] NULL,
[IsAxInterInternal] [nvarchar] (50) NULL,
[OrganizationNum] [nvarchar] (80) NULL,
[IsMaterialSupplier] [nvarchar] (10) NULL
)
GO
PRINT N'Creating [stage].[vMEN_NL_Supplier]'
GO
CREATE VIEW [stage].[vMEN_NL_Supplier] AS
WITH CTE AS (
SELECT CASE WHEN Company = '14' THEN  CONCAT(N'MENBE',Company) 
			ELSE  CONCAT(N'MENNL',Company)  END AS CompanyCode			--Doing this to have the company code in nvarchar and don't need to repeat CAST(CONCAT('MEN-',Company) AS nvarchar(50)) everywhere /SM
		, [PartitionKey], [Company], [SupplierCode], [Name], [Adress], [PostalCode], [City], [Country], [Telephone], [VatNumber], [CurrencyCode], [Created], [Changed], [CrediteurKey], [DW_TimeStamp], [IsAxInterInternal], [OrganizationNum], [IsMaterialSupplier]
  FROM [stage].[MEN_NL_Supplier]
    
)
SELECT
	--CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([CompanyCode],'#',UPPER(TRIM([SupplierCode]))))) AS SupplierID --- previously CONCAT([CompanyCode],'#',CrediteurKey)))
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([CompanyCode]),'#',TRIM([SupplierCode]))))) AS SupplierID --- previously CONCAT([CompanyCode],'#',CrediteurKey)))
    ,CONCAT([CompanyCode],'#',UPPER(TRIM([SupplierCode]))) AS SupplierCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256',[CompanyCode])) AS CompanyID 
	,[PartitionKey]

      ,[CompanyCode]			AS Company
      ,UPPER([SupplierCode])	AS SupplierNum
      ,[Name]					AS MainSupplierName
	  ,[Name]					AS SupplierName
      ,[Adress]					AS AddressLine1
	  --,NULL						AS AddressLine2
	  --,NULL						AS AddressLine3
	  ,[Telephone]				AS [TelephoneNum]
	  --,NULL						AS Email
      ,[PostalCode]				AS ZipCode
      ,[City]
	  --,NULL						AS District
      ,COALESCE(c.CountryName, Country)		AS CountryName
      --,NULL						AS Region
	  --,NULL						AS SupplierCategory 
	  --,NULL						AS SupplierResponsible
	  ,[dbo].[ProperCase](TRIM([Adress])) AS AddressLine
	  ,CONCAT(c.CountryName,', ' + City, ', ' + PostalCode, ', ' + [Adress]) AS FullAddressLine
	  --,NULL						AS AccountNum
      ,[VatNumber]				AS VATNum
	 --,'' AS OrganizationNum
	  ,cast(IsAxInterInternal as nvarchar(50))	AS InternalExternal
	  --,NULL						AS [CodeOfConduct]
	  --,NULL						AS CustomerNum
	  --,NULL						AS SupplierScore
	  --,NULL						AS [MinOrderQty]
	  --,NULL						AS [MinOrderValue]
	  --,NULL						AS Website
	  --,NULL						AS Comments
	  --,'' AS SRes1
	  --,'' AS SRes2
	  --,'' AS SRes3
	  ,upper(CTE.Country) as CountryCode
	  ,CAST(IsMaterialSupplier as bit) as IsMaterialSupplier
  FROM CTE
  LEFT JOIN dbo.CountryCodes c ON CTE.Country = c.[Alpha-2 code]
GO
PRINT N'Creating [stage].[WID_FI_PricePurchase]'
GO
CREATE TABLE [stage].[WID_FI_PricePurchase]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[TargetMargin] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[Price] [decimal] (18, 4) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[ValidFrom] [date] NULL,
[ValidTo] [date] NULL,
[DelivTime] [nvarchar] (50) NULL,
[DelivTimeUnit] [nvarchar] (50) NULL,
[Qty1] [decimal] (18, 4) NULL,
[Discount1] [decimal] (18, 4) NULL,
[Price1] [decimal] (18, 4) NULL,
[Qty2] [decimal] (18, 4) NULL,
[Discount2] [decimal] (18, 4) NULL,
[Price2] [decimal] (18, 4) NULL,
[Qty3] [decimal] (18, 4) NULL,
[Discount3] [decimal] (18, 4) NULL,
[Price3] [decimal] (18, 4) NULL,
[Qty4] [decimal] (18, 4) NULL,
[Discount4] [decimal] (18, 4) NULL,
[Price4] [decimal] (18, 4) NULL,
[Qty5] [decimal] (18, 4) NULL,
[Discount5] [decimal] (18, 4) NULL,
[Price5] [decimal] (18, 4) NULL,
[Type] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vWID_FI_PricePurchase]'
GO
CREATE VIEW [stage].[vWID_FI_PricePurchase] AS
--COMMENT EMPTY FIELDS / ADD UPPER()TRIM() INTO PartID 2022-12-15 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', TRIM(SupplierNum), '#', TRIM([PartNum]), '#', 'Purchase'))) AS PriceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [Company])) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', ''))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', TRIM(SupplierNum)))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]), '#', TRIM([PartNum]))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', TRIM([PartNum])))) AS PartID
	,CONCAT([Company], '#', '') AS CustomerCode
	,CONCAT([Company], '#', TRIM(SupplierNum)) AS SupplierCode
	,CONCAT([Company], '#', TRIM([PartNum])) AS PartCode
	,PartitionKey

	,[Company]
	--,'' AS [CustomerNum]
	,TRIM(SupplierNum) AS SupplierNum
	,TRIM([PartNum]) AS [PartNum]
	,[TargetMargin]
	,Currency
	,FORMAT(TRY_CONVERT(decimal(18,2), [Price]), '### ### ###.##') AS [Price]
	,FORMAT(TRY_CONVERT(decimal(18,2), [DiscountPercent]), '### ### ###.##') AS [DiscountPercent]
	,ValidFrom AS [ValidFrom]
	,ValidTo AS [ValidTo]
	,DelivTime
	,DelivTimeUnit
	,FORMAT(TRY_CONVERT(decimal(18,2), [Qty1]), '### ### ###.##') AS [Qty1]
	,FORMAT(TRY_CONVERT(decimal(18,2), [Discount1]), '### ### ###.##') AS [Discount1]
	,FORMAT(TRY_CONVERT(decimal(18,2), [Price1]), '### ### ###.##') AS [Price1]

	,FORMAT(TRY_CONVERT(decimal(18,2), [Qty2]), '### ### ###.##') AS [Qty2]
	,FORMAT(TRY_CONVERT(decimal(18,2), [Discount2]), '### ### ###.##') AS [Discount2]
	,FORMAT(TRY_CONVERT(decimal(18,2), [Price2]), '### ### ###.##') AS [Price2]

	,FORMAT(TRY_CONVERT(decimal(18,2), [Qty3]), '### ### ###.##') AS [Qty3]
	,FORMAT(TRY_CONVERT(decimal(18,2), [Discount3]), '### ### ###.##') AS [Discount3]
	,FORMAT(TRY_CONVERT(decimal(18,2), [Price3]), '### ### ###.##') AS [Price3]

	,FORMAT(TRY_CONVERT(decimal(18,2), [Qty4]), '### ### ###.##') AS [Qty4]
	,FORMAT(TRY_CONVERT(decimal(18,2), [Discount4]), '### ### ###.##') AS [Discount4]
	,FORMAT(TRY_CONVERT(decimal(18,2), [Price4]), '### ### ###.##') AS [Price4]

	,FORMAT(TRY_CONVERT(decimal(18,2), [Qty5]), '### ### ###.##') AS [Qty5]
	,FORMAT(TRY_CONVERT(decimal(18,2), [Discount5]), '### ### ###.##') AS [Discount5]
	,FORMAT(TRY_CONVERT(decimal(18,2), [Price5]), '### ### ###.##') AS [Price5]
	,[Type] AS PriceType
	,GETDATE() AS CreatedDate
FROM [stage].[WID_FI_PricePurchase]
GO
PRINT N'Creating [stage].[PAS_PL_OLine]'
GO
CREATE TABLE [stage].[PAS_PL_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[company] [nvarchar] (8) NOT NULL,
[custnum] [nvarchar] (50) NULL,
[ordernum] [nvarchar] (50) NULL,
[orderline] [nvarchar] (50) NULL,
[ordersubline] [nvarchar] (50) NULL,
[ordertype] [nvarchar] (50) NULL,
[orderrelnum] [nvarchar] (50) NULL,
[orderdate] [nvarchar] (50) NULL,
[needbydate] [nvarchar] (50) NULL,
[delivdate] [nvarchar] (50) NULL,
[invoicenum] [nvarchar] (50) NULL,
[orderqty] [nvarchar] (50) NULL,
[delivqty] [nvarchar] (50) NULL,
[remainingqty] [nvarchar] (50) NULL,
[unitprice] [nvarchar] (50) NULL,
[unitcost] [nvarchar] (50) NULL,
[currency] [nvarchar] (50) NULL,
[currexchrate] [nvarchar] (50) NULL,
[openrelease] [nvarchar] (1) NULL,
[discountpercent] [nvarchar] (50) NULL,
[discountamount] [nvarchar] (50) NULL,
[partnum] [nvarchar] (50) NULL,
[partstatus] [nvarchar] (50) NULL,
[salesperson] [nvarchar] (150) NULL,
[returncomment] [nvarchar] (50) NULL,
[salesreturnordernum] [nvarchar] (50) NULL,
[salesreturninvoicenum] [nvarchar] (50) NULL,
[warehousecode] [nvarchar] (50) NULL,
[saleschannel] [nvarchar] (50) NULL,
[businesschain] [nvarchar] (50) NULL,
[res1] [nvarchar] (200) NULL,
[res2] [nvarchar] (100) NULL,
[res3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vPAS_PL_OLine]'
GO
CREATE VIEW [stage].[vPAS_PL_OLine] AS
--COMMENT EMPTY FIELDS // ADD TRIM() INTO CustomerID,PartID 23-01-05 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(company, '#', ordernum, '#', orderline, '#', ordersubline, '#', invoicenum, '#', warehousecode ))) AS SalesOrderID  --, '#', [saleschannel] --, '#', discountamount --, '#', openrelease
	,CONVERT([binary](32), HASHBYTES('SHA2_256', company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(company), '#', TRIM(custnum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(company, '#', TRIM(custnum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(company), '#', TRIM((partnum)))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(company, '#', TRIM((partnum)))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(company), '#', TRIM(warehousecode))))) AS WarehouseID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(company, '#', TRIM(warehousecode))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(company,'#',TRIM(ordernum)) ))) AS SalesOrderNumID
	,CONVERT(int, replace(convert(date, orderdate),'-','')) AS SalesOrderDateID 
	,CONCAT(company, '#', TRIM(UPPER(ordernum)), '#', TRIM(UPPER(orderline)), '#', TRIM(UPPER(invoicenum))) AS SalesOrderCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey 

	,company AS Company
	,TRIM(UPPER(custnum)) AS CustomerNum
	,TRIM(UPPER(ordernum)) AS SalesOrderNum
	,TRIM(UPPER(orderline)) AS SalesOrderLine
	,ordersubline AS SalesOrderSubLine
	,CONVERT(nvarchar(50), ordertype) AS SalesOrderType
	--,'' AS [SalesOrderCategory]
	,try_convert(date,orderdate) AS SalesOrderDate
	,try_convert(date,needbydate) AS NeedbyDate
	,try_convert(date,delivdate) AS ExpDelivDate
	,CAST('1900-01-01' AS date) AS ActualDelivDate
	,CAST('1900-01-01' AS date) AS ConfirmedDelivDate
	,TRIM(UPPER(invoicenum)) AS SalesInvoiceNum
	,Convert(decimal(18,4), orderqty) AS SalesOrderQty
	,Convert(decimal(18,4), delivqty) AS DelivQty
	,Convert(decimal(18,4), remainingqty) AS RemainingQty
	--,NULL AS SalesInvoiceQty
	--,'' AS UoM
	,Convert(decimal(18,4), UnitPrice)/Convert(decimal(18,4), currexchrate) AS UnitPrice -- netprice for Passerotti, i.e. price is after the discount (this is in original currency)
	,Convert(decimal(18,4), UnitCost)/Convert(decimal(18,4), currexchrate) AS UnitCost --
	,currency AS Currency
	,Convert(decimal(18,4), currexchrate)/1 AS ExchangeRate --cIIF(Convert(decimal(18,4), currexchrate) = 0, 0, Convert(decimal(18,4), currexchrate)/Convert(decimal(18,4), currexchrate)) AS 
	,IIF(openrelease = 1, 0, 1) AS OpenRelease
	--,0 AS DiscountAmount
	--,0 AS DiscountPercent
	,TRIM(UPPER(partnum)) AS PartNum
	--,'' AS PartType
	,partstatus AS PartStatus
	,trim([salesperson]) AS SalesPersonName
	,IIF(PartNum like 'U%', 'Service', TRIM(UPPER(warehousecode))) AS WarehouseCode
	,SalesChannel
	,CASE WHEN invoicenum like '%PP%' THEN 'Over-the-Counter'
		WHEN SalesChannel = 'B2B' THEN 'Webshop'
		ELSE 'Normal Order Handling' END AS AxInterSalesChannel
	,[businesschain] AS Department
	--,'' AS [ProjectNum]
	--,'' AS [IndexKey]
	,[res2] AS Cancellation
	,left([res1],100) AS SORes1
	--,'' AS SORes2
	,[res3] AS SORes3
	--,NULL AS [TotalMiscChrg]
FROM stage.PAS_PL_OLine
WHERE [res2] IS NULL
--GROUP BY
--	PartitionKey, company, custnum, ordernum, orderline, ordersubline, ordertype, orderdate, needbydate, delivdate, invoicenum, unitprice, unitcost, currency, currexchrate, openrelease, partnum, partstatus, [salesperson], warehousecode, [businesschain], [res1], [res2], [res3], DiscountAmount, DiscountPercent, SalesChannel
GO
PRINT N'Creating [dm_TS].[fctStockTransaction]'
GO







CREATE VIEW [dm_TS].[fctStockTransaction] AS


SELECT 
 st.[StockTransactionID]
,st.[CompanyID]
,st.[PartID]
,st.[WarehouseID]
,st.[CurrencyID]
,st.[TransactionDateID]
,st.[SupplierID]
,st.[PurchaseOrderNumID]
,st.[PurchaseInvoiceID]
,st.[CustomerID]
,st.[SalesOrderNumID]
,st.[SalesInvoiceID]
,st.[CurrencyMonthKey]
,st.[Company]
,st.[WarehouseCode]
,st.[TransactionCode]
,st.[TransactionDescription]
,st.[IssuerReceiverNum]
,st.[IssuerReceiverName]
,st.[OrderNum]
,st.[OrderLine]
,st.[InvoiceNum]
,st.[InvoiceLine]
,st.[PartNum]
,st.[BinNum]
,st.[BatchNum]
,st.[TransactionDate]
,st.[TransactionTime]
,st.[TransactionQty]
,st.[TransactionValue]
,st.[CostPrice]
,st.[SalesUnitPrice]
,st.[Currency]
,st.[Reference]
,st.[AdjustmentDate]
,st.[IndexKey]
,st.[InternalExternal]

FROM dm.FactStockTransaction as st

WHERE st.Company  in ('FESFORA', 'FSEFORA', 'FFRFORA', 'FFRGPI', 'FFRLEX', 'IFIWIDN', 'IEEWIDN', 'TMTFI', 'TMTEE', 'FITMT', 'EETMT', 'ABKSE', 'ROROSE','STESE')  -- TS basket by 2021-08-05
GO
PRINT N'Creating [stage].[CYE_ES_OLine]'
GO
CREATE TABLE [stage].[CYE_ES_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderRelNum] [nvarchar] (200) NULL,
[OrderDate] [date] NULL,
[DelivDate] [date] NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[InvoiceQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (50) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[NeedbyDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[SalesOfficeDescrip] [nvarchar] (50) NULL,
[SalesGroupCode] [nvarchar] (50) NULL,
[SalesGroupDescrip] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCYE_ES_OLine]'
GO


CREATE VIEW [stage].[vCYE_ES_OLine] AS
--COMMENT EMPTY FIELDS // ADD TRIM() INTO CustomerID,WarehouseID,PartID 23-01-03 VA 
SELECT
    CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(InvoiceNum))))) AS SalesOrderID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', TRIM(CustNum)) ) )))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID 
    --,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  TRIM(PartNum)) ))))) AS PartID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SalesOfficeDescrip))))) AS WarehouseID 
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SalesOfficeDescrip))))) AS WarehouseID -- real one is WarehouseCode, use officedescrip for temp solution --/DZ + ET 2022-03-18
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine))) AS SalesOrderCode
    ,CONVERT(int, replace(convert(date, OrderDate),'-','')) AS SalesOrderDateID  
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT( Company, '#', '') ))) AS ProjectID
    ,PartitionKey 

    ,UPPER(Company) AS Company
    ,UPPER(TRIM(CustNum)) AS CustomerNum 
    ,UPPER(TRIM(PartNum)) AS PartNum
    ,TRIM(OrderNum) AS SalesOrderNum
    ,TRIM(OrderLine) AS SalesOrderLine
    ,LEFT(TRIM(OrderRelNum), 50) AS SalesOrderSubLine
	,TRIM(OrderType) AS SalesOrderType
	--,'' AS SalesOrderCategory
	,TRIM(OrderRelNum) AS SalesOrderRelNum
    ,OrderDate AS SalesOrderDate
    ,NeedbyDate
    ,IIF(NeedbyDate is null, '1900-01-01', NeedbyDate) AS ExpDelivDate	-- SAP field is ????? Eva will check;   NeedbyDate temporary solution, since it is this date connected to the 2nd.date dimention
	,IIF(DelivDate is null, '1900-01-01', DelivDate) AS ConfirmedDelivDate -- Jamue: 
	,DelivDate AS ActualDelivDate
    ,TRIM(InvoiceNum) AS SalesInvoiceNum
    ,OrderQty/1000 AS SalesOrderQty
    ,DelivQty/1000 AS DelivQty --(OrderQty-RemainingQty)/1000 --DelivQty/1000
    ,OrderQty/1000 - DelivQty/1000 AS RemainingQty -- real remaining qty --RemainingQty from erp is actually InvoiceQty
	--,NULL AS SalesInvoiceQty
    --,'' AS UoM
	,UnitPrice/10000 AS UnitPrice
    ,UnitCost/10000 AS UnitCost ---were /1000 --20210525 /DZ+ET
    ,1 AS ExchangeRate--20210525 /DZ+ET
	,'EUR' AS Currency
	,IIF(RemainingQty = 0, 0, 1) AS OpenRelease -- av Emil i möte med M Carmen osv 2021-11-18
    ,DiscountAmount AS DiscountAmount -- no Discountamount in CyESA, they need an extra numerical field called InvoiceQty /20220427 DZ
    ,DiscountPercent/100 AS DiscountPercent
	--,'' AS PartType
    --,'' AS PartStatus
    ,TRIM(SalesGroupDescrip) AS SalesPersonName--20210525 /DZ+ET
	,TRIM(SalesOfficeDescrip) AS WarehouseCode -- real one is WarehouseCode, use officedescrip for temp solution --/DZ + ET 2022-03-18
	--,'' AS CostBearerNum
	--,'' AS SalesChannel
	,'Normal Order Handling' AS AxInterSalesChannel
	,TRIM(SalesOfficeDescrip) AS Department --20210525 /DZ+ET
	--,'' AS ProjectNum
	--,'' AS IndexKey
	--,'0' AS Cancellation
	--,'' AS SORes1
	--,'' AS SORes2
	--,'' AS SORes3
	--,NULL AS [TotalMiscChrg]
FROM [stage].[CYE_ES_OLine]
GO
PRINT N'Creating [dm_DS].[dimSupplier]'
GO

CREATE VIEW [dm_DS].[dimSupplier] AS 

SELECT 
 sup.[SupplierID]
,sup.[CompanyID]
,sup.[Company]
,sup.[SupplierNum]
,sup.[MainSupplierName]
,sup.[SupplierName]
,sup.[Supplier]
,sup.[TelephoneNum]
,sup.[Email]
,sup.[ZipCode]
,sup.[City]
,sup.[District]
,sup.[CountryCode]
,sup.[CountryName]
,sup.[Region]
,sup.[SupplierCategory]
,sup.[SupplierResponsible]
,sup.[AddressLine]
,sup.[FullAddressLine]
,sup.[AccountNum]
,sup.[OrganizationNum]
,sup.[VATNum]
,sup.[InternalExternal]
,sup.[CodeOfConduct]
,sup.[CustomerNum]
,sup.[SupplierScore]
,sup.[MinOrderQty]
,sup.[MinOrderValue]
,sup.[Website]
,sup.[Comments]
,sup.[IsMaterialSupplier]
,sup.[DUNS]
,sup.[DUNS_MatchScore]
,sup.[is_inferred]
,sup.[is_deleted]
,sup.[is_validCountryCode]
,sup.[DUNS_Status]
FROM [dm].[DimSupplier] sup
LEFT JOIN dbo.Company com ON sup.Company = com.Company
WHERE com.BusinessArea = 'Driveline Solutions' AND com.[Status] = 'Active' 

--WHERE [Company] in ('MIT', 'ATZ', 'Transaut')
GO
PRINT N'Creating [stage].[WID_EE_CustomerAgreement]'
GO
CREATE TABLE [stage].[WID_EE_CustomerAgreement]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[AgreementCode] [nvarchar] (50) NULL,
[AgreementDescription] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[AgreementStart] [date] NULL,
[AgreementEnd] [date] NULL,
[DelivTime] [nvarchar] (10) NULL,
[Currency] [nvarchar] (10) NULL
)
GO
PRINT N'Creating [stage].[vWID_EE_CustomerAgreement]'
GO
CREATE VIEW [stage].[vWID_EE_CustomerAgreement] AS 
--COMMENT EMPTY FIELD // ADD TRIM()UPPER() INTO CustomerID, PartID 23-01-12 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM([Company]),'#',TRIM(AgreementCode),'#',TRIM(PartNum),'#',TRIM(CustomerNum)))) AS CustomerAgreementID --CustomerAgreementID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',TRIM([Company]))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM(Company),'#',TRIM(CustomerNum)))) AS CustomerID 
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM(Company),'#',TRIM(PartNum)))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',TRIM([Currency]))) AS CurrencyID
	,[PartitionKey]

	,TRIM([Company]) AS Company
	,TRIM(CustomerNum) AS CustomerNum
	,TRIM(PartNum) AS PartNum
	,AgreementCode
	,AgreementDescription
	,DiscountPercent
	,MAX([UnitPrice]) AS [UnitPrice]
	,NULL AS AgreementQty
	,TRIM([Currency]) AS Currency
	,[DelivTime]
	,AgreementStart
	,AgreementEnd
	--,'' AS CustomerTerms
	--,NULL AS FulfilledQty
	--,NULL  AS RemainingQty
	--,''	AS UoM
	--,'' AS CARes1
	--,'' AS CARes2
	--,'' AS CARes3

	
FROM 
	[stage].[WID_EE_CustomerAgreement]
GROUP BY [PartitionKey], [Company], AgreementCode, AgreementDescription, [Currency], PartNum, CustomerNum, [DiscountPercent], [DelivTime], AgreementStart, AgreementEnd
--WHERE 
--	RecordType = 'D'
GO
PRINT N'Creating [stage].[NOM_SEIND_OLine]'
GO
CREATE TABLE [stage].[NOM_SEIND_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[SalesOrderType] [nvarchar] (50) NULL,
[OrderRelNum] [nvarchar] (50) NULL,
[OrderDate] [nvarchar] (50) NULL,
[ExpDelivDate] [nvarchar] (50) NULL,
[DelivDate] [nvarchar] (50) NULL,
[NeedByDate] [nvarchar] (50) NULL,
[FirstConfirnedDate] [nvarchar] (50) NULL,
[ActualDelivDate] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (38, 8) NULL,
[DelivQty] [decimal] (38, 8) NULL,
[RemainingQty] [decimal] (38, 8) NULL,
[UnitPrice] [numeric] (28, 8) NULL,
[UnitCost] [numeric] (28, 8) NULL,
[SumUnitCost] [numeric] (38, 6) NULL,
[SumUnitPrice] [numeric] (38, 6) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (28, 8) NULL,
[OpenRelease] [nvarchar] (1) NULL,
[DiscountPercent] [decimal] (38, 6) NULL,
[DiscountAmount] [decimal] (38, 6) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [int] NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[SalesOrderChannel] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (100) NULL,
[SalesReturnOrderNum] [nvarchar] (50) NULL,
[SalesReturnInvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[ItemClass] [nvarchar] (50) NULL,
[UpdateStock] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vNOM_SEIND_OLine]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vNOM_SEIND_OLine] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company),'#', TRIM(OrderNum),'#', TRIM(OrderLine),'#', TRIM(OrderRelNum))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(OrderNum))))) AS SalesOrderNumID  
	,UPPER(CONCAT(TRIM(Company), '#', TRIM(OrderNum), '#', TRIM(OrderLine))) AS SalesOrderCode 
	,CONVERT(int, replace(convert(date, OrderDate), '-', '')) AS SalesOrderDateID --Redundant?  
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT( Company,'#','')) ))	AS ProjectID
	,PartitionKey 

	,UPPER(TRIM(Company)) AS Company
	,UPPER(TRIM(CustNum)) AS CustomerNum 
	,UPPER(TRIM(OrderNum)) AS SalesOrderNum
	,UPPER(TRIM(OrderLine)) AS SalesOrderLine
	,OrderSubLine AS SalesOrderSubLine
	,IIF(SalesOrderType = '10 - Internal Order', 'Internal Order', SalesOrderType) AS SalesOrderType -- added 2022-08-26 LL/DZ
	--,'' AS SalesOrderCategory
	,CONVERT(date, IIF(OrderDate = '0--', '1900-01-01', OrderDate)) AS SalesOrderDate
	,CONVERT(date, IIF(NeedbyDate = '0--', '1900-01-01', NeedbyDate)) AS NeedbyDate
	,CONVERT(date, IIF(ExpDelivDate = '0--', '1900-01-01', ExpDelivDate)) AS ExpDelivDate
	,CONVERT(date, IIF(ActualDelivDate = '0--', '1900-01-01', ActualDelivDate)) AS ActualDelivDate
	,CONVERT(date, IIF(FirstConfirnedDate = '0--', '1900-01-01', FirstConfirnedDate)) AS ConfirmedDelivDate
	,UPPER(TRIM(InvoiceNum)) AS SalesInvoiceNum
	,IIF(SalesOrderType = '7 - Direct Credit Order' OR SalesOrderType = '8 - Credit Order', -1*OrderQty, OrderQty) AS SalesOrderQty
	,IIF(SalesOrderType = '7 - Direct Credit Order' OR SalesOrderType = '8 - Credit Order', -1*DelivQty, DelivQty) AS DelivQty
	,RemainingQty
	--,NULL AS SalesInvoiceQty
	--,'' AS UoM
	,UnitPrice
	,UnitCost
	,Currency  --CASE WHEN (Company = 'NomoSE' and CurrExChRate = 1) THEN 'SEK'  WHEN (Company = 'NomoDK' and CurrExChRate = 1) THEN 'DKK'  WHEN (Company = 'NomoFI' and CurrExChRate = 1) THEN 'EUR' ELSE CURRENCY END AS 
	,ExchangeRate
	,CASE WHEN OpenRelease = 'I' THEN '0' ELSE '1' END AS OpenRelease
	,IIF(SalesOrderType = '7 - Direct Credit Order' OR SalesOrderType = '8 - Credit Order', -1*DiscountAmount, DiscountAmount) AS DiscountAmount
	,IIF(SalesOrderType = '7 - Direct Credit Order' OR SalesOrderType = '8 - Credit Order', -1*DiscountPercent, DiscountPercent) AS DiscountPercent
	,PartNum
	,ItemClass AS PartType
	,PartStatus
	,SalesPersonName
	,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
	,SalesOrderChannel AS SalesChannel
	,SalesOrderChannel As AxInterSalesChannel
	,UpdateStock AS IsUpdatingStock
	--,'' AS Department
	--,'' AS ProjectNum
	--,'' AS IndexKey
	,ReturnComment
	,UPPER(TRIM(SalesReturnOrderNum)) AS SalesReturnOrderNum
	,UPPER(TRIM(SalesReturnInvoiceNum)) AS SalesReturnInvoiceNum
	--,'0' AS Cancellation
	--,'' AS SORes1
	--,'' AS SORes2
	--,'' AS SORes3
	--,NULL AS [TotalMiscChrg]
FROM stage.NOM_SEIND_OLine
GROUP BY
	PartitionKey, Company, CustNum, OrderNum, OrderLine, OrderSubLine, SalesOrderType, OrderRelNum, InvoiceNum, OrderQty, DelivQty, RemainingQty, UnitPrice, UnitCost, Currency, ExchangeRate, OpenRelease, DiscountAmount, DiscountPercent, PartNum, PartStatus, SalesPersonName, ReturnComment, SalesReturnOrderNum, SalesReturnInvoiceNum, WarehouseCode, OrderDate, NeedbyDate, DelivDate, SalesOrderChannel, ItemClass, ExpDelivDate, ActualDelivDate, FirstConfirnedDate, UpdateStock
GO
PRINT N'Creating [stage].[BELL_SI_Customer]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[BELL_SI_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[CustomerName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[AddressLine3] [nvarchar] (100) NULL,
[PhoneNo] [nvarchar] (50) NULL,
[Email] [nvarchar] (100) NULL,
[ABCCode] [nvarchar] (10) NULL,
[City] [nvarchar] (50) NULL,
[ZIP] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNr] [nvarchar] (20) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (2) NULL,
[SalesPerson] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vBELL_SI_Customer]'
GO
CREATE VIEW [stage].[vBELL_SI_Customer] AS
--COMMENT EMPTY FIELDS // ADD UPPER() TRIM() INTO CustomerID 2022-12-27 VA
SELECT 
	--CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(CustomerNum)))) AS CustomerID
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',[Company])) AS CompanyID
	,CONCAT([Company],'#',TRIM([CustomerNum])) AS CustomerCode
	,PartitionKey

	,Company
    ,TRIM(CustomerNum) AS CustomerNum
	,[dbo].[ProperCase](CustomerName) AS MainCustomerName --add according to taskCard
    ,[dbo].[ProperCase](CustomerName) AS CustomerName -- can be replaced by if there is sub- Customer name
    ,[AddressLine1]
    ,[AddressLine2]
    ,[AddressLine3]
	,[PhoneNo] AS [TelephoneNum1]
	--,'' AS [TelephoneNum2]
	,[Email]
	,[ZIP] AS ZipCode
    ,IIF([City]= ' ',null,[dbo].[ProperCase]([City])) AS [City]    
    ,IIF([State]= ' ',null,[State]) AS [State]
	,[District]	AS SalesDistrict
	--,'' AS CustomerIndustry
	--,'' AS CustomerSubIndustry
    ,[dbo].[ProperCase](CountryName) AS CountryName
	--,'' AS Division
	,[dbo].[ProperCase](TRIM(CONCAT(AddressLine1,' ',AddressLine2))) as AddressLine
	,[dbo].[ProperCase](concat_ws(',',coalesce(CountryName,null),coalesce(IIF([State]= ' ',null,[State]),IIF(City= ' ',null,City),IIF(ZIP= ' ',null,ZIP)),IIF([AddressLine3]=' ',null, [AddressLine3])
		,coalesce(IIF([addressline1]= ' ',null,[addressline1]),IIF([addressline2]= ' ',null,[addressline2]))
		,coalesce(IIF([addressline2]= ' ',null,[addressline2]),IIF([addressline3]= ' ',null,[addressline3])))) AS FullAddressLine
    ,CustomerGroup AS CustomerGroup
	,CustomerGroup AS CustomerSubGroup
	,[SalesRepCode]	AS SalesPersonCode
    ,[dbo].[ProperCase](SalesPerson) AS SalesPersonName
	--,'' AS [SalesPersonResponsible]
    ,TRIM([VATRegNr]) AS [VATNum]
	--,'' AS OrganizationNum
	,[AccountString]	AS AccountNum
	,[InternalExternal]
	,[ABCCode] AS CustomerScore
	--,'' AS CustomerType
	,GETDATE() AS ValidFrom
	,DATEADD(year,1,GETDATE()) AS ValidTo
	, State as CountryCode
  FROM [stage].[BELL_SI_Customer]
GO
PRINT N'Creating [stage].[JEN_SE_PurchaseOrder]'
GO
CREATE TABLE [stage].[JEN_SE_PurchaseOrder]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [varchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[LineType] [nvarchar] (50) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[InvoiceSupplierCode] [nvarchar] (50) NULL,
[DelivCustCode] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[PurchaseDelivLine] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[ItemType] [int] NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[OrderedQty] [decimal] (18, 4) NULL,
[ReceivedQty] [decimal] (18, 4) NULL,
[InvoicedQty] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[CommitedDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[ReqDelivDate] [date] NULL,
[DelivDate] [date] NULL,
[OrgReqDelivDate] [date] NULL,
[IsOrderClosed] [bit] NULL,
[PurchaserName] [nvarchar] (50) NULL,
[RecievingNumber] [nvarchar] (50) NULL,
[LeadTime] [nvarchar] (50) NULL,
[Comments] [nvarchar] (max) NULL,
[WarehouseCode] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vJEN_SE_PurchaseOrder]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vJEN_SE_PurchaseOrder] AS
--COMMENT EMPTY FIELDS / ADD UPPER() TRIM() CustomerID PartID,WarehouseID 2022-12-19 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderType), '#', TRIM(PartNum), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(PurchaserName), '#', IsOrderClosed)))) AS PurchaseOrderID -- was included in ID: , '#', TRIM(PurchaseDelivLine)", '#', TRIM(PurchaseOrderSubLine), '#', TRIM(InvoiceNum),'#',TRIM(UPPER([PartNum])), '#', TRIM(UPPER(SupplierCode)), '#', OrderedQty", '#', TRIM(InvoiceNum)
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', '')))) AS PurchaseInvoiceID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(DelivCustCode))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(DelivCustCode))))) AS CustomerID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(UPPER(SupplierCode)))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierCode))))) AS SupplierID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(UPPER([PartNum])))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Trim(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM([Company]))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([CurrencyCode])))) AS CurrencyID
	,UPPER(CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(PurchaseOrderNum))) AS PurchaseOrderCode
	,PartitionKey

	,TRIM(UPPER(Company)) AS Company
	,TRIM(PurchaseOrderNum) AS PurchaseOrderNum
	,TRIM(PurchaseOrderLine) AS PurchaseOrderLine
	,TRIM(PurchaseOrderSubLine) AS PurchaseOrderSubLine
	,TRIM(OrderType) AS PurchaseOrderType
	,TRIM(UPPER([PartNum])) AS PartNum
	,TRIM(UPPER(SupplierCode)) AS SupplierNum
	,TRIM(DelivCustCode) AS DelivCustomerNum
	,'' AS PurchaseInvoiceNum -- -- remove so avoid duplication / InvoiceNum and in the ID /DZ
	,OrderDate AS PurchaseOrderDate
	,MAX(OrgReqDelivDate) AS OrgReqDelivDate
	,MAX(DelivDate) AS DelivDate
	,MAX(ReqDelivDate) AS ReqDelivDate
	,MAX(CommitedDelivDate) AS CommittedDelivDate
	,MAX(ActualDelivDate) AS ActualDelivDate
	,SUM(OrderedQty) AS PurchaseOrderQty
	,SUM(ReceivedQty) AS ReceiveQty
	,SUM(InvoicedQty) AS InvoiceQty
--	,IIF(AVG(ReceivedQty) < AVG(OrderedQty), 'Open', 'Closed') AS PurchaseOrderStatus
	,IIF(IsOrderClosed = '1', 'Closed', 'Open') AS PurchaseOrderStatus
	,IsOrderClosed AS IsClosed
	--,'' AS SupplierPartNum
	--,'' AS [SupplierInvoiceNum] 
	--,'' AS PartStatus
	--,0 AS MinOrderQty
	--,'' AS UoM
	--,0 AS LandedCost
	,AVG(UnitPrice) AS UnitPrice
	,AVG(IIF(UnitPrice*OrderedQty*ExchangeRate = 0, 0, 100*DiscountAmount/(UnitPrice*OrderedQty*ExchangeRate))) AS DiscountPercent --was DiscountPercent -- changed 20230227 /DZ
	,SUM(DiscountAmount) AS DiscountAmount --was UnitPrice*OrderedQty*DiscountPercent/100  -- changed 20230227 /DZ
	,SUM(TotalMiscChrg) AS TotalMiscChrg
	,AVG(ExchangeRate) AS ExchangeRate
	,CASE WHEN CurrencyCode = '15' THEN 'EUR' WHEN CurrencyCode = '2' THEN 'USD' ELSE CurrencyCode END AS Currency
	,TRIM(PurchaserName) AS PurchaserName
	,TRIM(WarehouseCode) AS WarehouseCode
	,TRIM(RecievingNumber) AS ReceivingNum
	,IIF(LeadTime = 'na', NULL, Leadtime) AS DelivTime
	,CASE WHEN CONVERT(NVARCHAR(50),TRIM([LineType])) like '0' THEN 'Stock Item Line' WHEN CONVERT(NVARCHAR(50),TRIM([LineType])) like '1' THEN 'Non Stock Item Line' ELSE NULL END AS [LineType]
	,CONVERT(NVARCHAR(50),ItemType) AS ItemType
	,TRIM(Comments) AS Comments
	--,'' AS PurchaseChannel
	--,'' AS Documents
	--,'' AS PORes1
	--,'' AS PORes2
	--,'' AS PORes3
	--,'' AS DaysSincePOrder
FROM [stage].[JEN_SE_PurchaseOrder]
	
GROUP BY
	PartitionKey, Company, PurchaseOrderNum, PurchaseOrderLine, PurchaseOrderSubLine, SupplierCode, DelivCustCode, LineType, PartNum, OrderType, CurrencyCode, ItemType, OrderDate, PurchaserName, RecievingNumber, LeadTime, Comments, WarehouseCode, IsOrderClosed
GO
PRINT N'Creating [stage].[NOM_DK_SupplierAgreement]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[NOM_DK_SupplierAgreement]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[AgreementCode] [nvarchar] (50) NULL,
[AgreementDescription] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[DiscountPercent] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[AgreementQty] [nvarchar] (50) NULL,
[UoM] [nvarchar] (50) NULL,
[DelivTime] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[SupplierTerms] [nvarchar] (100) NULL,
[AgreementStart] [nvarchar] (50) NULL,
[AgreementEnd] [nvarchar] (50) NULL,
[SARes1] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vNOM_DK_SupplierAgreement]'
GO
CREATE VIEW [stage].[vNOM_DK_SupplierAgreement] AS 
--COMMENT EMPTY FIELDS // ADD TRIM() INTO PartID 23-01-05
--ADD  TRIM() INTO SupplierID 23-01-24 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([PartNum]), '#', TRIM([SupplierNum]), '#', [AgreementStart], '#', [AgreementEnd])))) AS SupplierAgreementID --CustomerAgreementID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM([SupplierNum]))))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([SupplierNum]))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(Currency)))) AS CurrencyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM([PartNum]))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([PartNum]))))) AS PartID
	,[PartitionKey]

	,UPPER([Company]) AS [Company]
	,UPPER(TRIM([SupplierNum])) AS SupplierNum
	,UPPER(TRIM([PartNum])) AS PartNum
	,AgreementCode AS [AgreementCode]
	,AgreementDescription AS [AgreementDescription]
	,[DiscountPercent]
	,[UnitPrice] AS [UnitPrice]
	,[SARes1] AS UoM
	,AgreementQty AS [AgreementQty]
	,Currency AS [Currency]
	,CONVERT(int, [DelivTime]) AS [DelivTime]
	,IIF([AgreementStart] = 0, '1900-01-01', CONVERT(Date, [AgreementStart])) AS [AgreementStart]
	,IIF([AgreementEnd] = 0, '1900-01-01', CONVERT(Date, [AgreementEnd])) AS [AgreementEnd]
	,[SupplierTerms]
	--,0	AS FulfilledQty
	--,0  AS RemainingQty
	,[SARes1]
	--,'' AS [SARes2]
	--,'' AS [SARes3]
FROM 
	[stage].[NOM_DK_SupplierAgreement]
GROUP BY [PartitionKey], [Company], [SupplierNum], [PartNum], AgreementCode, AgreementDescription, [DiscountPercent], AgreementQty, Currency, [DelivTime], [SupplierTerms], [UnitPrice],[AgreementStart],[AgreementEnd], [SARes1]
GO
PRINT N'Creating [dm_TS].[fctSalesInvoice]'
GO



CREATE VIEW [dm_TS].[fctSalesInvoice] AS


SELECT 
 si.[SalesInvoiceID]
,si.[SalesOrderID]
,si.[SalesOrderNumID]
,si.[CustomerID]
,si.[CompanyID]
,si.[PartID]
,si.[WarehouseID]
,si.[SalesPersonNameID]
,si.[DepartmentID]
,si.[Company]
,si.[SalesInvoiceCode]
,si.[SalesInvoiceDateID]
,si.[ProjectID]
,si.[SalesPersonName]
,si.[CustomerNum]
,si.[PartNum]
,si.[PartType]
,si.[SalesOrderNum]
,si.[SalesOrderLine]
,si.[SalesOrderSubLine]
,si.[SalesOrderType]
,si.[SalesInvoiceNum]
,si.[SalesInvoiceLine]
,si.[SalesInvoiceType]
,si.[SalesInvoiceDate]
,si.[ActualDelivDate]
,si.[SalesInvoiceQty]
,si.[UoM]
,si.[UnitPrice]
,si.[UnitCost]
,si.[DiscountPercent]
,si.[DiscountAmount]
,si.[TotalMiscChrg]
,si.[Currency]
,si.[ExchangeRate]
,si.[VATAmount]
,si.[CreditMemo]
,si.[Department]
,si.[ProjectNum]
,si.[WarehouseCode]
,si.[CostBearerNum]
,si.[CostUnitNum]
,si.[ReturnComment]
,si.[ReturnNum]
,si.[OrderHandler]
,si.[SalesChannel]
,si.[NeedbyDate]
,si.[ExpDelivDate]
,si.[SalesOrderCode]
,si.[SalesOrderDateID]
,si.[SalesOrderDate]
,si.[ConfirmedDelivDate]
,si.[PartStatus]
,si.[AxInterSalesChannel]
,si.[DueDate]
,si.[LastPaymentDate]
,si.[SalesInvoiceStatus]
,si.[CashDiscountOffered]
,si.[CashDiscountUsed]
,si.[IsUpdatingStock]
,si.[SIRes1]
,si.[SIRes2]
,si.[SIRes3]
,si.[SIRes4]
,si.[SIRes5]
,si.[SIRes6]
FROM dm.FactSalesInvoice as si
/*temp putting (CERPL) Certex PL here such that they see the data in same company*/
WHERE si.Company  in ('FESFORA', 'FSEFORA', 'FFRFORA', 'FORPL', 'CERPL', 'FFRGPI', 'FFRLEX', 'IFIWIDN', 'IEEWIDN', 'TMTFI', 'TMTEE', 'FITMT', 'EETMT', 'ABKSE', 'ROROSE','STESE','CERBG'
,'FORBG')  -- TS basket by 2021-03-04 --, 'EIGSE'
GO
PRINT N'Creating [stage].[CER_LT_SalesLedger]'
GO
CREATE TABLE [stage].[CER_LT_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[InvoiceAmountOC] [decimal] (18, 8) NULL,
[PaidAmountOC] [decimal] (18, 8) NULL,
[OpenAmountOC] [decimal] (18, 8) NULL,
[ExchangeRate] [decimal] (18, 8) NULL,
[Currency] [nvarchar] (10) NULL,
[VATAmount] [decimal] (18, 8) NULL,
[VATCode] [nvarchar] (25) NULL
)
GO
PRINT N'Creating [stage].[vCER_LT_SalesLedger]'
GO
CREATE VIEW [stage].[vCER_LT_SalesLedger] AS
--COMMENT EMPTY FIELDS // ADD TRIM()UPPER() INTO CustomerID 2022-12-14 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ), '#', InvoiceNum))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#',TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) )))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#',TRIM(CustNum))))) AS CustomerID
	,CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ), '#', InvoiceNum) AS SalesLedgerCode
	,PartitionKey

	,TRIM(Company) AS Company
	,TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ) AS CustomerNum
	,TRIM(InvoiceNum) AS SalesInvoiceNum
	,InvoiceDate AS SalesInvoiceDate
	,CONVERT(date, DueDate) AS SalesDueDate
	,CONVERT(date, LastPaymentDate) AS SalesLastPaymentDate
	,InvoiceAmountOC AS InvoiceAmount
	,PaidAmountOC AS PaidInvoiceAmount
	,OpenAmountOC RemainingInvoiceAmount
	,ExchangeRate
	,Currency
	,VATAmount
	,VATCode
	--,'' AS PayToName
	--,'' AS PayToCity
	--,'' AS PayToContact
	--,'' AS PaymentTerms
	--,'' AS SLRes1
	--,'' AS SLRes2
	--,'' AS SLRes3
	,'1900-01-01' AS AccountingDate
	--,'' AS AgingPeriod
	--,'' AS AgingSort
	--,'' AS VATCodeDesc
	--,'' AS LinkToOriginalInvoice
FROM 
	stage.CER_LT_SalesLedger
GO
PRINT N'Creating [dm_DS].[fctPurchaseOrderDistinct]'
GO
CREATE VIEW [dm_DS].[fctPurchaseOrderDistinct] AS

SELECT  [PurchaseOrderNumID]
,[CompanyID]
,[SupplierID]
,[PurchaseOrderNum]
,[Company]
,[Supplier]

FROM dm.FactPurchaseOrderDistinct
WHERE Company  in ('MIT', 'ATZ', 'TRANSAUTO', 'IPLIOWTR')  -- DS basket
GO
PRINT N'Creating [stage].[FOR_SE_StockTransaction]'
GO
CREATE TABLE [stage].[FOR_SE_StockTransaction]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SysRowID] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[BinNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[TransactionDate] [date] NULL,
[CreateDate] [date] NULL,
[CreateTime] [nvarchar] (20) NULL,
[TranDT] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[CostPrice] [decimal] (18, 4) NULL,
[CostPrice1] [decimal] (18, 4) NULL,
[SellPrice] [decimal] (18, 4) NULL,
[TranType] [nchar] (10) NULL,
[BatchID] [nvarchar] (50) NULL,
[FifoBatchID] [nvarchar] (50) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[Exchangerate] [decimal] (18, 4) NULL,
[IssueRecCode] [nvarchar] (50) NULL,
[TranSource] [nvarchar] (50) NULL,
[TranValue] [decimal] (18, 4) NULL,
[TranValue1] [decimal] (18, 4) NULL,
[Reference] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vFOR_SE_StockTransaction]'
GO
CREATE VIEW [stage].[vFOR_SE_StockTransaction] AS 
--COMMENT EMPTY FIELDS 2022-12-20 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company], '#', TRIM([SysRowID]))))) AS StockTransactionID
	,CONCAT([Company], '#', TRIM([SysRowID])) AS IndexKeyCode --StockTransactionCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Company])))) AS CompanyID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([PartNum]))))) AS PartID
 	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,IIF((TRIM([TranSource]) = 'Sales'), CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([OrderNum]))))), NULL) AS SalesOrderNumID
	,IIF((TRIM([TranSource]) = 'Purchase' AND TRIM([TranType]) like 'PUR-STK%' AND TRIM([TranType]) not like 'ADJ-%'), CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([OrderNum]))))), NULL) AS PurchaseOrderNumID
	,IIF((TRIM([TranSource]) = 'Sales'), CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([InvoiceNum]))))), NULL) AS SalesInvoiceID
	,IIF((TRIM([TranSource]) = 'Purchase' AND TRIM([TranType]) like 'PUR-STK%' AND TRIM([TranType]) not like 'ADJ-%'), CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([InvoiceNum]))))), NULL) AS PurchaseInvoiceID
	,IIF((TRIM([TranSource]) = 'Sales'), CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM(IssueRecCode))))), NULL) AS CustomerID
	,IIF((TRIM([TranSource]) = 'Purchase' AND TRIM([TranType]) like 'PUR-STK%' AND TRIM([TranType]) not like 'ADJ-%')
		, CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM(IssueRecCode)))))
		, HASHBYTES('SHA2_256',[Company])) AS SupplierID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([CurrencyCode])))) AS CurrencyID
	,[PartitionKey]

    ,UPPER([Company]) AS [Company] -- 
	,UPPER(TRIM([PartNum])) AS PartNum
	,IIF(TRIM(IssueRecCode)='', NULL, UPPER(TRIM(IssueRecCode))) AS IssuerReceiverNum
	,UPPER(TRIM([WarehouseCode])) AS WarehouseCode
	,IIF(LEFT(TRIM([TranType]),4) = 'ADJ-' AND convert(date, [TransactionDate])  = '2014-05-31','OB',TRIM([TranType])) AS TransactionCode
	,CASE WHEN TRIM([TranSource]) = 'Purchase' AND TRIM([TranType]) like 'PUR-STK%' AND LEFT(TRIM([TranType]),4) != 'ADJ-' THEN 'Incoming goods' 
		WHEN TRIM([TranType])	= 'PUR-DRP' THEN  'Incoming goods'
		WHEN LEFT(TRIM([TranType]),4) = 'ADJ-' AND convert(date, [TransactionDate])  = '2014-05-31' THEN 'Opening balance'
		WHEN LEFT(TRIM([TranType]),4) = 'ADJ-' THEN 'Adjustment'
		WHEN TRIM([TranSource]) = 'Sales' THEN 'Outgoing goods' 
		WHEN TRIM([TranSource]) = 'Stock' THEN 'Transit goods'
		ELSE 'unknown'
		END AS [TransactionDescription]
    ,IIF(TRIM([OrderNum])='', NULL,UPPER(TRIM(OrderNum))) AS OrderNum
	--,'' AS OrderLine
	,IIF(TRIM([InvoiceNum])='', NULL,UPPER(TRIM(InvoiceNum))) AS InvoiceNum
	--,'' InvoiceLine
    ,IIF(TRIM([BinNum])='', NULL,TRIM(BinNum)) AS BinNum
    ,IIF(TRIM([BatchID])='', NULL,TRIM(BatchID)) AS BatchNum
	,convert(date, [TransactionDate]) AS TransactionDate
	,[CreateTime] AS TransactionTime
	,SellingShipQty AS [TransactionQty]
	,CASE WHEN TRIM([TranType]) like 'ADJ-%' THEN [TranValue] WHEN SellingShipQty < 0 THEN ABS([TranValue])*-1 ELSE ABS([TranValue]) END AS TransactionValue
	,[CostPrice]
	,SellPrice AS [SalesUnitPrice]
	,IIF(TRIM([CurrencyCode])='', NULL,TRIM(CurrencyCode)) AS Currency
	,TRIM([Reference]) AS Reference
	,convert(date, [CreateDate]) AS AdjustmentDate
	,CASE WHEN TRIM([TranSource]) = 'Purchase' AND TRIM([TranType]) like 'PUR-STK%' AND TRIM([TranType]) not like 'ADJ-%' THEN 'External' 
		WHEN TRIM([TranType])	= 'PUR-DRP' THEN  'External'
		WHEN TRIM([TranType]) like 'ADJ-%' THEN 'Internal'
		WHEN TRIM([TranSource]) = 'Sales' THEN 'External' 
		WHEN TRIM([TranSource]) = 'Stock' THEN 'Internal'
		ELSE 'Internal'
		END  AS InternalExternal
	--,'' AS STRes1
	--,'' AS STRes2
	--,'' AS STRes3
    ,IIF(TRIM([FifoBatchID])='', NULL,TRIM(FIFOBatchID)) AS FIFOBatchID
    ,IIF(TRIM([BatchID])='', NULL,TRIM(BatchID)) AS SupplierBatchID
	,[TranDT]
    ,TRIM([TranSource]) AS TransactionSource
	  -- DZ added conditions ----AND TRIM([TranType]) LIKE '%STK-CUS%') THEN
	,[SysRowID] AS IndexKey 
	,SUM(SellingShipQty) OVER (PARTITION BY  WarehouseCode , PartNum, BatchID ORDER BY TranDT ASC) AS StockBalanceCount 
	,SUM(TranValue) OVER (PARTITION BY  WarehouseCode , PartNum, BatchID ORDER BY TranDT ASC) AS StockBalanceValue
FROM 
	[stage].[FOR_SE_StockTransaction]
GO
PRINT N'Creating [stage].[AXL_IE_SOLine]'
GO
CREATE TABLE [stage].[AXL_IE_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[InvoiceType] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (22, 8) NULL,
[UnitCost] [decimal] (22, 8) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[VAT] [decimal] (18, 4) NULL,
[CashDiscountOffered] [decimal] (18, 4) NULL,
[CashDiscountUsed] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OrderType] [nvarchar] (50) NULL,
[SalesChannel] [varchar] (10) NULL,
[BusinessChain] [varchar] (10) NULL,
[Res1] [varchar] (100) NULL,
[Res2] [varchar] (100) NULL,
[Res3] [varchar] (100) NULL,
[PartDesc] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[vAXL_IE_SOLine]'
GO
CREATE VIEW [stage].[vAXL_IE_SOLine] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine), '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(PartNum), '#', TRIM(PartDesc))))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(PartDesc))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(InvoiceNum))))) AS SalesLedgerID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum), '#', (IIF(TRIM([PartNum]) LIKE 'IACO%' , 'MISC. CHARGES', TRIM([PartDesc]))))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT(int, IIF(InvoiceDate = '', 19900101, replace(convert(date, InvoiceDate), '-', ''))) AS SalesInvoiceDateID
	,UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine))) AS SalesInvoiceCode
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine))) AS SalesOrderCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(SalesPerson) AS SalesPersonName
	,TRIM(CustNum) AS [CustomerNum]
	,TRIM(PartNum) AS PartNum
	,UPPER(PartDesc) AS PartDesc
	,'' AS [PartType]
	,TRIM(OrderNum) AS [SalesOrderNum]
	,CAST(OrderLine AS text) AS [SalesOrderLine]
	,TRIM(OrderSubLine) AS [SalesOrderSubLine]
	,TRIM(OrderType) AS [SalesOrderType]
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,TRIM(InvoiceLine) AS [SalesInvoiceLine]
	,TRIM(InvoiceType) AS [SalesInvoiceType]
	,CASE WHEN InvoiceDate = '' THEN '1900-01-01' ELSE CONVERT(date, InvoiceDate) END AS [SalesInvoiceDate]
	,ActualDeliveryDate AS [ActualDelivDate]
	,SellingShipQty AS [SalesInvoiceQty]
	,TRIM(Unit) AS [UoM]
	,UnitPrice
	,UnitCost
	,DiscountAmount
	,IIF(UnitPrice*SellingShipQty = 0, 0, DiscountAmount/UnitPrice*SellingShipQty) AS DiscountPercent
	,CONVERT(decimal(18,4), CashDiscountOffered) AS [CashDiscOffered] 
	,CONVERT(decimal(18,4), CashDiscountUsed) AS [CashDiscUsed] 
	,TotalMiscChrg
	,VAT AS [VATAmount]
	,Currency
	,ExchangeRate
	,TRIM(CreditMemo) AS CreditMemo
	,TRIM([SalesChannel]) AS [SalesChannel]
	,TRIM([BusinessChain]) AS [Department]
	,TRIM(WarehouseCode) AS WarehouseCode
	,NULL AS [CostBearerNum]
	,NULL AS [CostUnitNum]
	,NULL AS [ReturnComment]
	,NULL AS [ReturnNum]
	,NULL AS [ProjectNum]
	,'' AS [IndexKey]
	,Res1 AS SIRes1
	,Res2 AS SIRes2
	,Res3 AS SIRes3
FROM stage.AXL_IE_SOLine


	--,CASE WHEN OrderType = 'MD' THEN 1 
	--		WHEN OrderType = 'MT' THEN 2
	--		WHEN OrderType = 'MR' THEN 3
	--		WHEN OrderType = 'IV' THEN 4
	--		WHEN OrderType = 'Misc. Charges' THEN 5 --added after Ulf changes in the night /DZ
	--	ELSE OrderType END AS [SalesOrderType]

--GROUP BY
--	PartitionKey, Company, SalesPerson, CustNum, PartNum, PartDesc, OrderNum, OrderLine, OrderSubLine,OrderType, InvoiceNum, InvoiceLine, InvoiceDate, SellingShipQty, UnitPrice, UnitCost, DiscountAmount, TotalMiscChrg, WarehouseCode, CreditMemo, ActualDeliveryDate, Currency, ExchangeRate, InvoiceType, Res1, Res2, Res3, Unit, VAT, SalesChannel, BusinessChain, CashDiscountOffered, CashDiscountUsed
GO
PRINT N'Creating [stage].[SUM_UK_SOLine]'
GO
CREATE TABLE [stage].[SUM_UK_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SalesPerson] [nvarchar] (100) NULL,
[CustNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[InvoiceType] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[VAT] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[BusinessChain] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Res1] [varchar] (100) NULL,
[Res2] [varchar] (100) NULL,
[Res3] [varchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vSUM_UK_SOLine]'
GO
CREATE VIEW [stage].[vSUM_UK_SOLine] AS
SELECT
	 CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(dbo.summers()), '#', TRIM(CustNum), '#',TRIM(OrderNum), '#',TRIM(OrderLine), '#',TRIM(PartNum), '#',TRIM(InvoiceNum), '#',TRIM(InvoiceLine))))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(dbo.summers()), '#', TRIM(OrderNum), '#',TRIM(OrderLine), '#', TRIM(InvoiceNum))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(dbo.summers()), '#', TRIM(CustNum), '#', TRIM(InvoiceNum))))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(dbo.summers()), '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(dbo.summers())))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(dbo.summers()), '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(dbo.summers()) ,'#', TRIM(PartNum))))) AS PartID  
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(dbo.summers()), '#', TRIM(WarehouseCode))))) AS WareHouseID
	,CONCAT(UPPER(TRIM(dbo.summers())), '#', UPPER(TRIM(CustNum)), '#', UPPER(TRIM(OrderNum)), '#', UPPER(TRIM(InvoiceLine))) AS SalesOrderCode 
	,CONVERT(int, replace(convert(date,InvoiceDate), '-', '')) AS SalesInvoiceDateID  --Redundant??
	,CONCAT(UPPER(TRIM(dbo.summers())), '#', UPPER(TRIM(InvoiceNum)), '#', UPPER(TRIM(InvoiceType))) AS SalesInvoiceCode --Redundant??
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT(UPPER(TRIM(dbo.summers())),'#','') ))	AS ProjectID
	,PartitionKey

	,UPPER(TRIM(dbo.summers())) AS Company
	,[dbo].[ProperCase](SalesPerson) AS SalesPersonName
	,UPPER(TRIM(CustNum)) AS CustomerNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,CASE WHEN TRIM(OrderNum) = '0' THEN 'PrimaryPart' ELSE 'SubPart' END  AS PartType
	,UPPER(TRIM(OrderNum)) AS SalesOrderNum
	--,UPPER(TRIM(OrderLine)) AS SalesOrderLine
	,OrderType AS SalesOrderType
	,TRIM(InvoiceNum) AS SalesInvoiceNum
	,TRIM(InvoiceLine) AS SalesInvoiceLine
	,InvoiceType AS SalesInvoiceType
	,CASE WHEN InvoiceDate = '' THEN '1901-01-01' ELSE CONVERT(date, InvoiceDate) END AS SalesInvoiceDate
	,ActualDeliveryDate	AS ActualDelivDate
	,SellingShipQty	AS SalesInvoiceQty
	,UnitPrice
	,UnitCost
	,IIF(SellingShipQty*UnitPrice = 0, 0, DiscountAmount/SellingShipQty*UnitPrice) AS DiscountPercent
	,DiscountAmount
	,TotalMiscChrg
	,LEFT(Currency, 3) AS Currency
	,IIF(LEFT(Currency, 3) = 'GBP', 1, ExchangeRate) AS ExchangeRate
	--,CreditMemo
	,IIF(OrderType = '4', 1, 0) AS  CreditMemo
	,CASE	WHEN LEN(SalesChannel) = 8 THEN 'EXPRESS'	
			WHEN LEN(SalesChannel) = 12 THEN 'ADVANCE'
			WHEN CustNum LIKE 'RSCOMP%' THEN 'EDI'
			WHEN SalesPerson = '' THEN 'IMPORTED'
			ELSE SalesChannel END AS SalesChannel
	,CASE WHEN NULLIF(TRIM(SalesPerson),'') IS NULL THEN 'Digital'
			ELSE 'Manual' END	AS Department
	,TRIM(WarehouseCode) AS WarehouseCode
	--,Res1	AS SIRes1
	--,Res2	AS SIRes2
	--,Res3	AS SIRes3
FROM [stage].[SUM_UK_SOLine] 
;
GO
PRINT N'Creating [stage].[Nom_FI_StocktransactionOB_Tobias2ndPatch]'
GO
CREATE TABLE [stage].[Nom_FI_StocktransactionOB_Tobias2ndPatch]
(
[Company] [nvarchar] (50) NULL,
[IndexKey] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[TransactionCode] [nvarchar] (50) NULL,
[TransactionDescription] [nvarchar] (50) NULL,
[IssuerReceiverNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[BinNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[TransactionDate] [nvarchar] (50) NULL,
[TransactionTime] [nvarchar] (50) NULL,
[TransactionQty] [nvarchar] (50) NULL,
[TransactionValue] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[CostPrice] [nvarchar] (50) NULL,
[SalesUnitPrice] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[Reference] [nvarchar] (50) NULL,
[AdjustmentDate] [nvarchar] (50) NULL,
[STRes1] [nvarchar] (50) NULL,
[STRes2] [nvarchar] (50) NULL,
[STRes3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vNOM_FI_StockTransactionOB]'
GO



CREATE VIEW [stage].[vNOM_FI_StockTransactionOB] AS 

--SELECT 
--	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', TRIM(IndexKey), '#', TRIM(IssuerReceiverNum), '#', TRIM([OrderNum])))) AS StockTransactionID
--	,UPPER([Company]) AS [Company]
--	,UPPER(TRIM([WarehouseCode])) AS WarehouseCode
--	,TransactionCode
--	,TransactionDescription
--	,IIF(TRIM(IssuerReceiverNum)='', NULL,TRIM(IssuerReceiverNum)) AS IssuerReceiverNum
--	,IIF(TRIM([OrderNum])='', NULL,TRIM(OrderNum)) AS OrderNum
--	,OrderLine
--	,IIF(TRIM([InvoiceNum])='', NULL,TRIM(InvoiceNum)) AS InvoiceNum
--	,InvoiceLine
--	,UPPER(TRIM([PartNum])) AS [PartNum]
--	,IIF(TRIM([BinNum])='', NULL,TRIM(BinNum)) AS BinNum
--	,IIF(TRIM([BatchNum])='', NULL,TRIM(BatchNum)) AS BatchNum
--	,CONVERT(date, TransactionDate) AS TransactionDate
--	,TransactionTime
--	,CONVERT(decimal(18,4), IIF(TRIM(TransactionQty) LIKE '%-%', 0, REPLACE(REPLACE(TRIM(TransactionQty), ',', '.'), ' ', ''))) AS TransactionQty
--	,CONVERT(decimal(18,4), IIF(TRIM(TransactionValue) LIKE '%-%', 0, REPLACE(REPLACE(TRIM(TransactionValue), ',', '.'), ' ', ''))) AS TransactionValue
--	,CONVERT(decimal(18,4), IIF(TRIM([CostPrice]) LIKE '%-%', 0, REPLACE(REPLACE(TRIM([CostPrice]), ',', '.'), ' ', '' ))) AS [CostPrice]
--	,CONVERT(decimal(18,4), IIF(TRIM(SalesUnitPrice) LIKE '%-%', 0, REPLACE(REPLACE(TRIM(SalesUnitPrice), ',', '.'), ' ', ''))) AS SalesUnitPrice
--	,IIF(TRIM([Currency])='', NULL,TRIM(Currency)) AS Currency
--	,'FI_ST_OB' AS [Reference]
--	,CONVERT(date, AdjustmentDate) AS AdjustmentDate
--	,InternalExternal

--	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
--	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
--	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
--	,IIF(TransactionCode in ('930', '931', '936', '907', '912', '913'), CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([InvoiceNum])))), NULL) AS PurchaseInvoiceID
--	,IIF(TransactionCode in ('930', '931', '936', '907', '912', '913'), CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company],'#',TRIM([OrderNum]))))), NULL) AS PurchaseOrderNumID
--	,IIF(TransactionCode in ('800', '801', '815'), CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company],'#',TRIM([OrderNum]))))), NULL) AS SalesOrderNumID
--	,IIF(TransactionCode in ('800', '801', '815'), CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company],'#',TRIM([InvoiceNum]))))), NULL) AS SalesInvoiceID
--	,IIF(TransactionCode in ('800', '801', '815'), CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company],'#',TRIM(IssuerReceiverNum))))), NULL) AS CustomerID
--	,IIF(TransactionCode in ('930', '931', '936', '907', '912', '913'), CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company],'#',TRIM(IssuerReceiverNum)))), NULL) AS SupplierID
--	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Currency])))) AS CurrencyID
--	,'2023-02-03 16:00' AS PartitionKey
--	,IndexKey
--	--,0 AS is_deleted
--	--,'' AS STRes1
--	--,'' AS STRes2
--	--,'' AS STRes3
--FROM [stage].[Nom_FI_StockTransactionOB20220927]

--UNION ALL

--SELECT 
--	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', TRIM(IndexKey), '#', TRIM(IssuerReceiverNum), '#', TRIM([OrderNum])))) AS StockTransactionID
--	,UPPER([Company]) AS [Company]
--	,UPPER(TRIM([WarehouseCode])) AS WarehouseCode
--	,TransactionCode
--	,TransactionDescription
--	,IIF(TRIM(IssuerReceiverNum)='', NULL,TRIM(IssuerReceiverNum)) AS IssuerReceiverNum
--	,IIF(TRIM([OrderNum])='', NULL,TRIM(OrderNum)) AS OrderNum
--	,OrderLine
--	,IIF(TRIM([InvoiceNum])='', NULL,TRIM(InvoiceNum)) AS InvoiceNum
--	,InvoiceLine
--	,UPPER(TRIM([PartNum])) AS [PartNum]
--	,IIF(TRIM([BinNum])='', NULL,TRIM(BinNum)) AS BinNum
--	,IIF(TRIM([BatchNum])='', NULL,TRIM(BatchNum)) AS BatchNum
--	,CONVERT(date, TransactionDate) AS TransactionDate
--	,TransactionTime
--	,CONVERT(decimal(18,4), IIF(TRIM(TransactionQty) LIKE '%-%', 0, REPLACE(REPLACE(TRIM(TransactionQty), ',', '.'), ' ', ''))) AS TransactionQty
--	,CONVERT(decimal(18,4), IIF(TRIM(TransactionValue) LIKE '%-%', 0, REPLACE(REPLACE(TRIM(TransactionValue), ',', '.'), ' ', ''))) AS TransactionValue
--	,CONVERT(decimal(18,4), IIF(TRIM([CostPrice]) LIKE '%-%', 0, REPLACE(REPLACE(TRIM([CostPrice]), ',', '.'), ' ', '' ))) AS [CostPrice]
--	,CONVERT(decimal(18,4), IIF(TRIM(SalesUnitPrice) LIKE '%-%', 0, REPLACE(REPLACE(TRIM(SalesUnitPrice), ',', '.'), ' ', ''))) AS SalesUnitPrice
--	,IIF(TRIM([Currency])='', NULL,TRIM(Currency)) AS Currency
--	,'FI_ST_Hist' AS [Reference]
--	,CONVERT(date, AdjustmentDate) AS AdjustmentDate
--	,'External' AS InternalExternal

--	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
--	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
--	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
--	,IIF(TransactionCode in ('930', '931', '936', '907', '912', '913'), CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([InvoiceNum])))), NULL) AS PurchaseInvoiceID
--	,IIF(TransactionCode in ('930', '931', '936', '907', '912', '913'), CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company],'#',TRIM([OrderNum]))))), NULL) AS PurchaseOrderNumID
--	,IIF(TransactionCode in ('800', '801', '815'), CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company],'#',TRIM([OrderNum]))))), NULL) AS SalesOrderNumID
--	,IIF(TransactionCode in ('800', '801', '815'), CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company],'#',TRIM([InvoiceNum]))))), NULL) AS SalesInvoiceID
--	,IIF(TransactionCode in ('800', '801', '815'), CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company],'#',TRIM(IssuerReceiverNum))))), NULL) AS CustomerID
--	,IIF(TransactionCode in ('930', '931', '936', '907', '912', '913'), CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company],'#',TRIM(IssuerReceiverNum)))), NULL) AS SupplierID
--	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Currency])))) AS CurrencyID
--	,'2023-02-03 16:00' AS PartitionKey
--	,IndexKey
--	--,0 AS is_deleted
--	--,'' AS STRes1
--	--,'' AS STRes2
--	--,'' AS STRes3
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', TRIM(TransactionCode), '#', TRIM(IssuerReceiverNum), '#', TRIM([OrderNum]), '#', TRIM([OrderLine]), '#', TRIM(PartNum), '#', TRIM(TransactionQty), '#', TRIM(WarehouseCode)))) AS StockTransactionID
	,'2023-02-03 16:00' AS PartitionKey
	,UPPER([Company]) AS [Company]
	,UPPER(TRIM([WarehouseCode])) AS WarehouseCode
	,TransactionCode
	,TransactionDescription
	,IIF(TRIM(IssuerReceiverNum)='', NULL,TRIM(IssuerReceiverNum)) AS IssuerReceiverNum
	,IIF(TRIM([OrderNum])='', NULL,TRIM(OrderNum)) AS OrderNum
	,OrderLine
	,IIF(TRIM([InvoiceNum])='', NULL,TRIM(InvoiceNum)) AS InvoiceNum
	,InvoiceLine
	,UPPER(TRIM([PartNum])) AS [PartNum]
	,IIF(TRIM([BinNum])='', NULL,TRIM(BinNum)) AS BinNum
	,IIF(TRIM([BatchNum])='', NULL,TRIM(BatchNum)) AS BatchNum
	,CONVERT(date, TransactionDate) AS TransactionDate
	,TransactionTime
	,IIF(TransactionQty IS NULL, 0, TRY_CONVERT(decimal(18,2), REPLACE(REPLACE(TransactionQty, ' ', ''), ',', '.'))) AS TransactionQty 
	,IIF(TransactionValue IS NULL, 0, TRY_CONVERT(decimal(18,2), REPLACE(TransactionValue, ',', '.'))) AS TransactionValue
	,IIF(CostPrice IS NULL, 0, TRY_CONVERT(decimal(18,2), REPLACE(REPLACE(CostPrice, ' ', ''), ',', '.'))) AS [CostPrice]
	,IIF(SalesUnitPrice IS NULL, 0, TRY_CONVERT(decimal(18,2), REPLACE(REPLACE(SalesUnitPrice, ' ', ''), ',', '.'))) AS SalesUnitPrice 
	,IIF(TRIM([Currency])='', NULL,TRIM(Currency)) AS Currency
	,'FI_ST_Hist' AS [Reference]
	,CONVERT(date, AdjustmentDate) AS AdjustmentDate
	,'External' AS InternalExternal

	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,IIF(TransactionCode in ('930', '931', '936', '907', '912', '913'), CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([InvoiceNum])))), NULL) AS PurchaseInvoiceID
	,IIF(TransactionCode in ('930', '931', '936', '907', '912', '913'), CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company],'#',TRIM([OrderNum]))))), NULL) AS PurchaseOrderNumID
	,IIF(TransactionCode in ('800', '801', '815'), CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company],'#',TRIM([OrderNum]))))), NULL) AS SalesOrderNumID
	,IIF(TransactionCode in ('800', '801', '815'), CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company],'#',TRIM([InvoiceNum]))))), NULL) AS SalesInvoiceID
	,IIF(TransactionCode in ('800', '801', '815'), CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company],'#',TRIM(IssuerReceiverNum))))), NULL) AS CustomerID
	,IIF(TransactionCode in ('930', '931', '936', '907', '912', '913'), CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company],'#',TRIM(IssuerReceiverNum)))), NULL) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Currency])))) AS CurrencyID
FROM [stage].[Nom_FI_StocktransactionOB_Tobias2ndPatch]  -- this version is used one and after has modified the citatet techen in v.202305
--Main: [stage].[Nom_FI_StocktransactionOBwithHist_20230203], delete blank partnum, push in 70 by Tobias Ö 20230208.
--TÖ 1st patch 70 lines
--TÖ 2nd patch 12 lines
--Total = Main + 1st + 2nd
GO
PRINT N'Creating [stage].[STE_SE_Oline]'
GO
CREATE TABLE [stage].[STE_SE_Oline]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (500) NULL,
[CustNum] [nvarchar] (500) NULL,
[OrderNum] [nvarchar] (500) NULL,
[SalesOrderType] [nvarchar] (500) NULL,
[OrderLine] [nvarchar] (500) NULL,
[IsOrderClosed] [nvarchar] (500) NULL,
[OrderDate] [nvarchar] (500) NULL,
[ReqDelivDate] [nvarchar] (500) NULL,
[ExpDelivDate] [nvarchar] (500) NULL,
[ExpShipDate] [nvarchar] (500) NULL,
[ActualShipDate] [nvarchar] (500) NULL,
[ActualDelivDate] [nvarchar] (500) NULL,
[InvoiceNum] [nvarchar] (500) NULL,
[OrderQty] [nvarchar] (500) NULL,
[SalesDelivQty] [nvarchar] (500) NULL,
[SalesInvoiceQty] [nvarchar] (500) NULL,
[SalesRemainingQty] [nvarchar] (500) NULL,
[UoM] [nvarchar] (500) NULL,
[UnitPrice] [nvarchar] (500) NULL,
[UnitCost] [nvarchar] (500) NULL,
[Currency] [nvarchar] (500) NULL,
[CurrExchRate] [nvarchar] (500) NULL,
[DiscountPercent] [nvarchar] (500) NULL,
[DiscountAmount] [nvarchar] (500) NULL,
[PartNum] [nvarchar] (500) NULL,
[PartType] [nvarchar] (500) NULL,
[PartStatus] [nvarchar] (500) NULL,
[SalesPersonName] [nvarchar] (500) NULL,
[WarehouseCode] [nvarchar] (500) NULL,
[IndexKey] [nvarchar] (500) NULL,
[Sales Channel] [nvarchar] (500) NULL,
[SORes1] [nvarchar] (500) NULL
)
GO
PRINT N'Creating [stage].[vSTE_SE_Oline]'
GO


CREATE View [stage].[vSTE_SE_Oline] AS
SELECT
	 CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(InvoiceNum))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(Company))))	 AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum)))))	 AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company) ,'#', TRIM(PartNum)))))	AS PartID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM([WarehouseCode])))))	 AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#',''))))	 AS ProjectID
	,UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine))) AS SalesOrderCode
    ,CONVERT(int, replace(convert(date, OrderDate),'-','')) AS SalesOrderDateID
	

	,[PartitionKey] 
	,UPPER(TRIM("Company")) AS "Company"
	,UPPER(TRIM([CustNum])) AS "CustomerNum"	
	,UPPER(TRIM([PartNum])) AS "PartNum"	
	,UPPER(TRIM([OrderNum])) AS "SalesOrderNum"	
	,[OrderLine] AS "SalesOrderLine"
	,[OrderDate] AS "SalesOrderDate"
	,[InvoiceNum] AS "SalesInvoiceNum"
	,[SalesOrderType]		
	,iif([IsOrderClosed]='True',0,1) as OpenRelease
	,[IsOrderClosed]
	,[ReqDelivDate]		
	,[ExpDelivDate]		
	,[ExpShipDate]		
	,[ActualShipDate]		
	,[ActualDelivDate]
	,[OrderQty]		AS "SalesOrderQty"	
	,[SalesDelivQty]
	,[SalesInvoiceQty]	
	,[SalesRemainingQty] AS	"RemainingQty"
	,[UoM]				
	,[UnitPrice]			
	,[UnitCost]			
	,[Currency]			
	,[CurrExchRate]	 AS "ExchangeRate"	
	,[DiscountPercent]	
	,[DiscountAmount]		
	,[PartType]			
	,[PartStatus]			
	,[SalesPersonName]	
	,[WarehouseCode]		
	,[IndexKey]			
	,[Sales Channel]	AS "SalesChannel"
	,SORes1

FROM
	stage.STE_SE_OLine
GO
PRINT N'Creating [dm_TS].[dimSupplier]'
GO













CREATE VIEW [dm_TS].[dimSupplier] AS

SELECT
 sup.[SupplierID]
,sup.[CompanyID]
,sup.[Company]
,sup.[SupplierNum]
,sup.[MainSupplierName]
,sup.[SupplierName]
,sup.[Supplier]
,sup.[TelephoneNum]
,sup.[Email]
,sup.[ZipCode]
,sup.[City]
,sup.[District]
,sup.[CountryCode]
,sup.[CountryName]
,sup.[Region]
,sup.[SupplierCategory]
,sup.[SupplierResponsible]
,sup.[AddressLine]
,sup.[FullAddressLine]
,sup.[AccountNum]
,sup.[OrganizationNum]
,sup.[VATNum]
,sup.[InternalExternal]
,sup.[CodeOfConduct]
,sup.[CustomerNum]
,sup.[SupplierScore]
,sup.[MinOrderQty]
,sup.[MinOrderValue]
,sup.[Website]
,sup.[Comments]
,sup.[IsMaterialSupplier]
,sup.[DUNS]
,sup.[DUNS_MatchScore]
,sup.[is_inferred]
,sup.[is_deleted]
,sup.[is_validCountryCode]
,sup.[DUNS_Status]
FROM [dm].[DimSupplier] as sup
WHERE sup.[Company] in ('FESFORA', 'FSEFORA', 'FFRFORA', 'FFRGPI', 'FFRLEX', 'IFIWIDN', 'IEEWIDN', 'TMTFI', 'TMTEE', 'FITMT', 'EETMT', 'ABKSE', 'ROROSE','STESE'
, 'FORPL'
, 'CERPL'
,'CERBG'
,'FORBG')
GO
PRINT N'Creating [stage].[ARK_PI_StockTransaction]'
GO
CREATE TABLE [stage].[ARK_PI_StockTransaction]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[IndexKey] [nvarchar] (50) NOT NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[TransactionCode] [nvarchar] (50) NULL,
[TransactionDescription] [nvarchar] (600) NULL,
[IssuerReceiverNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[BinNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[TransactionDate] [date] NULL,
[TransactionTime] [nvarchar] (50) NULL,
[TransactionQty] [decimal] (18, 4) NULL,
[TransactionValue] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[CostPrice] [decimal] (18, 4) NULL,
[SalesUnitPrice] [decimal] (18, 4) NULL,
[Reference] [nvarchar] (50) NULL,
[AdjustmentDate] [date] NULL,
[STRes1] [nvarchar] (50) NULL,
[STRes2] [nvarchar] (50) NULL,
[STRes3] [nvarchar] (50) NULL,
[IssuerReceiverName] [nvarchar] (600) NULL,
[Outlier] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vARK_PI_StockTransaction]'
GO





CREATE VIEW [stage].[vARK_PI_StockTransaction] AS 
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company], '#', TRIM(IndexKey))))) AS StockTransactionID --
	,CONCAT([Company], '#', TRIM(IndexKey)) AS IndexKey --StockTransactionCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Company])))) AS CompanyID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([PartNum]))))) AS PartID
 	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([OrderNum]))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([OrderNum]))))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([InvoiceNum]))))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([InvoiceNum]))))) AS PurchaseInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM(IssuerReceiverNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM(IssuerReceiverNum))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM([Currency])))) AS CurrencyID
	,[PartitionKey]

    ,[Company] -- 
	,UPPER(TRIM([WarehouseCode])) AS WarehouseCode
	,TransactionCode
	,[TransactionDescription]
	,IssuerReceiverNum
    ,OrderNum
	,OrderLine
	,InvoiceNum
	,InvoiceLine
	,TRIM([PartNum]) AS PartNum --UPPER(TRIM([PartNum]))
    ,TRIM(Outlier) AS BinNum --added by request of Jiri /DZ 2022-04-07
    ,TRIM(BatchNum) AS BatchNum
	,CONVERT(date, [TransactionDate]) AS TransactionDate
	,TransactionTime
	,[TransactionQty]
	,TransactionValue
	,[CostPrice]
	,[SalesUnitPrice]
	,UPPER(TRIM([Currency])) AS [Currency]
	,Reference
	,AdjustmentDate
	,IIF(Reference = 'I', 'Internal', 'External') AS InternalExternal
	,IndexKey AS STRes1
	,STRes2
	,LEFT(TRIM(IssuerReceiverName), 100) AS STRes3 --added by request of Jiri /DZ 2022-04-07
	
FROM [stage].[ARK_PI_StockTransaction]
	--WHERE [TransactionDate] >= DATEADD(year, -1, GETDATE()) --Added this where clause as semi-incremental load functinoality since it doesn't work easily on meta-param table. /SM 2021-10-01	
WHERE
	[TransactionDate] >= '2016-01-01'
GO
PRINT N'Creating [dm_DS].[DimRLS]'
GO

CREATE VIEW [dm_DS].[DimRLS] AS
SELECT 
	 [id]
,[Company]
,[Email]
,[RLSTable]
,[RLSField]
,[RLSValue]
,[AccessType]
,[SourceList]
,[Modified_at]
,[Author]
,[BusinessArea]
FROM [dm].DimRLS AS RLS
WHERE BusinessArea = 'Driveline Solutions'
GO
PRINT N'Creating [stage].[AXL_AU_Customer]'
GO
CREATE TABLE [stage].[AXL_AU_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[MainCustomerName] [nvarchar] (100) NULL,
[CustomerName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[AddressLine] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (20) NULL,
[TelephoneNumber2] [nvarchar] (20) NULL,
[Email] [nvarchar] (100) NULL,
[City] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[Division] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (50) NULL,
[CustomerIndustry] [nvarchar] (50) NULL,
[CustomerSubIndustry] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNo] [nvarchar] (50) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[CustomerABC] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[SalesPersonResponsible] [nvarchar] (50) NULL,
[CustomerType] [nvarchar] (50) NULL,
[Res1] [nvarchar] (50) NULL,
[Res2] [nvarchar] (50) NULL,
[Res3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXL_AU_Customer]'
GO


CREATE VIEW [stage].[vAXL_AU_Customer] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustomerNum))) )) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,UPPER(CONCAT([Company], '#', TRIM([CustomerNum]))) AS CustomerCode
	,PartitionKey

	,UPPER(Company) AS Company
	,UPPER(TRIM(CustomerNum)) AS [CustomerNum]
	,TRIM(MainCustomerName) AS MainCustomerName
	,TRIM(CustomerName) AS  [CustomerName]
	,TRIM([AddressLine1]) AS [AddressLine1]
	,TRIM([AddressLine2]) AS [AddressLine2]
	,TRIM([AddressLine3]) AS [AddressLine3]
	,TRIM([TelephoneNumber1]) AS [TelephoneNum1]
	,TRIM([TelephoneNumber2]) AS [TelephoneNum2]
	,TRIM([Email]) AS [Email]
	,TRIM([ZipCode]) AS [ZipCode]
	,TRIM([City]) AS [City]
	,TRIM([State]) AS [State]
	,TRIM([District]) AS [SalesDistrict]
	,TRIM(con.CountryName) AS CountryName
	,TRIM([ISOAlpha2Code]) AS [CountryCode]
	,TRIM([Division]) AS [Division]
	,TRIM([CustomerIndustry]) AS [CustomerIndustry]
	,TRIM([CustomerSubIndustry]) AS [CustomerSubIndustry]
	,TRIM([AddressLine3]) AS [AddressLine]
	,CONCAT(TRIM(con.CountryName), + ',  ' + TRIM([City]), + ',  ' + TRIM([ZipCode]), + ',  ' + TRIM(addressline3)) AS [FullAddressLine]
	,TRIM(CustomerGroup) AS [CustomerGroup]
	,TRIM(CustomerGroup) AS [CustomerSubGroup]
	,TRIM([SalesRepCode]) AS [SalesPersonCode]
	,TRIM(SalesPersonName) AS [SalesPersonName]
	,TRIM([SalesPersonResponsible]) AS [SalesPersonResponsible]
	,TRIM([VATRegNo]) AS [VATNum]
	,TRIM([AccountString]) AS [AccountNum]
	,TRIM([InternalExternal]) AS [InternalExternal]
	,TRIM([CustomerABC]) AS [CustomerScore]
	,TRIM([CustomerType]) AS [CustomerType]
FROM [stage].[AXL_AU_Customer] com
	LEFT JOIN dbo.Country con ON com.CountryName = con.[ISOAlpha2Code]

--GROUP BY
--	PartitionKey, Company, CustomerNum, CustomerName, MainCustomerName, [AddressLine1], [AddressLine2], [AddressLine3], [TelephoneNumber1], [TelephoneNumber2], [Email], [ZipCode], [City], [State], [District], [CountryName], [Division], [CustomerIndustry], [CustomerSubIndustry], CustomerGroup, [SalesRepCode], SalesPersonName, [SalesPersonResponsible], [VATRegNo], [AccountString], [InternalExternal], [CustomerABC], [CustomerType]

--	Stagetablename in ('AXL_AU_Customer', 'AXL_DC_Customer', 'AXL_HU_Customer', 'AXL_IE_Customer', 'AXL_PL_Customer', 'AXL_PT_Customer', 'AXL_UK_Customer')
GO
PRINT N'Creating [stage].[TMT_FI_StockTransaction]'
GO
CREATE TABLE [stage].[TMT_FI_StockTransaction]
(
[Company] [nvarchar] (50) NULL,
[PartitionKey] [nvarchar] (50) NULL,
[IndexKey] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[SalesOrderNum] [nvarchar] (50) NULL,
[SalesOrderLine] [nvarchar] (50) NULL,
[SalesInvoiceNum] [nvarchar] (50) NULL,
[SalesInvoiceLine] [nvarchar] (50) NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[PurchaseInvoiceLine] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[BinNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[Version] [nvarchar] (50) NULL,
[TransActionDate] [nvarchar] (50) NULL,
[AdjustmentDate] [nvarchar] (50) NULL,
[TransActionTime] [nvarchar] (50) NULL,
[TransactionType] [nvarchar] (50) NULL,
[TransactionCode] [nvarchar] (50) NULL,
[TransactionDescription] [nvarchar] (200) NULL,
[Reference] [nvarchar] (30) NULL,
[TransActionQty] [decimal] (18, 4) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[CostPrice] [decimal] (18, 4) NULL,
[SalesUnitPrice] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[TransActionValue] [decimal] (18, 4) NULL,
[STRes1] [nvarchar] (100) NULL,
[STRes2] [nvarchar] (100) NULL,
[STRes3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vTMT_FI_StockTransaction]'
GO

CREATE VIEW [stage].[vTMT_FI_StockTransaction] AS 
--ADD TRIM() Into CustomerID,WarehouseID,PartID 23-01-09 VA
--add trim() into SupplierID 23-01-24 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(WarehouseCode), '#', TRIM(BinNum), '#', TRIM(PartNum), '#', TRIM([Version]), '#',TRIM(IndexKey) )))) AS StockTransactionID
	,UPPER(CONCAT(Company, '#', TRIM(IndexKey))) AS StockTransactionCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
    --,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM([WarehouseCode]))))) AS WarehouseID
 	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SalesOrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SalesInvoiceNum))))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseInvoiceNum))))) AS PurchaseInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustomerNum))))) AS CustomerID
		,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum))))) AS SupplierID
--	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierNum))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Currency])))) AS CurrencyID
	,CONVERT(nvarchar(50), getdate()) AS [PartitionKey]

    ,IndexKey
    ,UPPER(Company) AS Company -- 
    ,UPPER(TRIM(PartNum)) AS PartNum
	,UPPER(IIF(TRIM(TransactionCode)='Delivery', TRIM(CustomerNum), TRIM(SupplierNum))) AS IssuerReceiverNum
	,TRIM([WarehouseCode]) AS WarehouseCode
	,TRIM(TransactionCode) AS TransactionCode
	,TRIM(TransactionDescription) AS TransactionDescription
	,IIF(TRIM(TransactionCode)='Delivery', TRIM(SalesOrderNum), TRIM(PurchaseOrderNum)) AS OrderNum 
	,IIF(TRIM(TransactionCode)='Delivery', TRIM(SalesOrderLine), TRIM(PurchaseOrderLine)) AS OrderLine
    ,IIF(TRIM(TransactionCode)='Delivery', TRIM(SalesInvoiceNum),TRIM(PurchaseInvoiceNum)) AS InvoiceNum
	,IIF(TRIM(TransactionCode)='Delivery', TRIM(SalesInvoiceLine), TRIM(PurchaseInvoiceLine)) AS InvoiceLine
    ,TRIM(BinNum) AS BinNum
    ,TRIM(BatchNum) AS BatchNum
	,convert(date, TransactionDate) AS TransactionDate 
	,TransactionTime
	,TransactionQty
	,IIF(TransactionQty < 0, -1*ABS(TransactionValue), TransactionValue) AS TransactionValue
	,[CostPrice] 
	,SalesUnitPrice 
	,Currency
	,[Reference]
	,AdjustmentDate
	,IIF(TransactionCode = 'Taking', 'External', TransactionType) AS InternalExternal -- Changing "Taking" transaction code to External to catch it in stock movement calculation.  Best would be to get consultant (Tomi) to make the change further back.  SB 2032-01-25
	,STRes1
	,STRes2
	,[version] AS STRes3
FROM 
	[stage].[TMT_FI_StockTransaction]

--	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([OrderNum])))) AS PurchaseOrderID
GO
PRINT N'Creating [stage].[JEN_SK_Supplier]'
GO
CREATE TABLE [stage].[JEN_SK_Supplier]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[Name] [nvarchar] (50) NULL,
[CustomerCode] [nvarchar] (10) NULL,
[Addressline1] [nvarchar] (50) NULL,
[Addressline2] [nvarchar] (50) NULL,
[Addressline3] [nvarchar] (50) NULL,
[ZIP] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[City] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[Region] [nvarchar] (50) NULL,
[SupplierCategory] [nvarchar] (50) NULL,
[Reference] [nvarchar] (50) NULL,
[BankAccountNum] [nvarchar] (34) NULL,
[VATNum] [nvarchar] (20) NULL,
[ABCCode] [nvarchar] (10) NULL,
[TelephoneNum] [nvarchar] (20) NULL,
[Email] [nvarchar] (100) NULL,
[CodeOfConduct] [nvarchar] (500) NULL,
[MinOrderQty] [nvarchar] (50) NULL,
[InternalName] [nvarchar] (50) NULL,
[GlobalID] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (10) NULL
)
GO
PRINT N'Creating [stage].[vJEN_SK_Supplier]'
GO
CREATE view [stage].[vJEN_SK_Supplier] AS
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID
--	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT([Company],'#',TRIM([SupplierNum]))))) AS SupplierID
    ,UPPER(CONCAT([Company],'#',TRIM([SupplierNum]))) AS SupplierCode --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Company])))) AS CompanyID
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,TRIM(UPPER([SupplierNum])) AS [SupplierNum]
	,[Name] AS MainSupplierName
	,[dbo].[ProperCase]([Name]) AS SupplierName
	,[AddressLine1]
    ,[AddressLine2]
    ,[AddressLine3]
	,[TelephoneNum]
	,[Email]
	,[dbo].[udf_GetNumeric]([Addressline3]) AS ZipCode
	,trim(substring(replace([dbo].[ProperCase](AddressLine3),' ', ''), 6, 100))  AS [City]
	,[District]
	,[dbo].[ProperCase]([CountryName]) AS CountryName
	,[Region]
	,[SupplierCategory]
	,[Reference] AS [SupplierResponsible]
	,[dbo].[ProperCase](TRIM(concat (addressline1+' '+ addressline2, null))) AS AddressLine
	,[dbo].[ProperCase](TRIM(concat_ws(',',coalesce([dbo].[ProperCase](CountryName),null),IIF(City= ' ',null,trim(substring(replace([dbo].[ProperCase](AddressLine3),' ', ''), 6, 100))),IIF(ZIP= ' ',null,[dbo].[udf_GetNumeric]([Addressline3]))
	,coalesce(IIF([addressline1]= ' ',null,[addressline1]),IIF([addressline2]= ' ',null,[addressline2]))
	,coalesce(IIF([addressline2]= ' ',null,[addressline2]),IIF([addressline3]= ' ',null,[addressline3]))))) AS FullAddressLine
	--,'' AS [AccountNum] 
	,[VATNum]
	--,'' AS OrganizationNum
	,[InternalName] AS [InternalExternal]
	,[CodeOfConduct]
	,[CustomerCode] AS CustomerNum
	,[ABCCode] AS [SupplierScore]
	,TRY_CONVERT(decimal(18,4),[MinOrderQty]) AS [MinOrderQty]
	,0 AS [MinOrderValue]
	--,'' AS [Website]
	--,'' AS [Comments]
	,GlobalID AS SRes1
	--,'' AS SRes2
	--,'' AS SRes3
	,CountryCode
FROM [stage].[JEN_SK_Supplier]
GO
PRINT N'Creating [stage].[JEN_NB_StockTransaction]'
GO
CREATE TABLE [stage].[JEN_NB_StockTransaction]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[SysRowID] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[BinNumber] [nvarchar] (50) NULL,
[BatchID] [nvarchar] (50) NULL,
[FIFOBatchID] [nvarchar] (50) NULL,
[SupplierBatchID] [nvarchar] (50) NULL,
[TranDate] [date] NULL,
[CreateDate] [date] NULL,
[CreateTime] [nvarchar] (50) NULL,
[TranDT] [nvarchar] (50) NULL,
[TranType] [nvarchar] (50) NULL,
[TranTypeDesc] [nvarchar] (200) NULL,
[TranSource] [nvarchar] (50) NULL,
[Reference] [nvarchar] (30) NULL,
[TranQty] [decimal] (18, 4) NULL,
[PartStatus] [nvarchar] (50) NULL,
[IssuerReceiverCode] [nvarchar] (50) NULL,
[CostPrice] [decimal] (18, 4) NULL,
[SellingPrice] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[TranValue] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vJEN_NB_StockTransaction]'
GO

CREATE VIEW [stage].[vJEN_NB_StockTransaction] AS 

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([SysRowID]))))) AS StockTransactionID
	,UPPER(CONCAT([Company], '#', TRIM([SysRowID]))) AS StockTransactionCode --StockTransactionCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]) ,'#', TRIM([PartNum]))))) AS PartID
 	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,IIF(TranSource = '0x31', CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([OrderNum]))))), NULL) AS SalesOrderID
	,IIF(TranSource <> '0x31', CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([OrderNum]))))), NULL) AS PurchaseOrderID
--	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([OrderNum])))) AS PurchaseOrderID
	,IIF(TranSource = '0x31', CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([InvoiceNum]))))), NULL) AS SalesInvoiceID
	,IIF(TranSource <> '0x31', CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([InvoiceNum]))))), NULL) AS PurchaseInvoiceID
	,IIF(TranSource = '0x31', CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([IssuerReceiverCode]))))), NULL) AS CustomerID
	,IIF(TranSource <> '0x31', CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([IssuerReceiverCode]))))), NULL) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([CurrencyCode])))) AS CurrencyID
	,[PartitionKey]

    ,UPPER([Company]) AS Company -- 
	,UPPER(TRIM([PartNum])) AS PartNum
	,UPPER(IIF(TRIM([IssuerReceiverCode])= '', NULL, TRIM(IssuerReceiverCode))) AS IssuerReceiverCode
	,TRIM([WarehouseCode]) AS WarehouseCode
	,iif(convert(date, [TranDate]) = '2022-04-01' and TRIM([TranTypeDesc]) = 'Incoming Goods','OB',TRIM([TranType])) AS TransactionCode
	,iif(convert(date, [TranDate]) = '2022-04-01' and TRIM([TranTypeDesc]) = 'Incoming Goods','Opening balance',TRIM([TranTypeDesc])) AS TransactionDescription
	,IIF(TRIM([OrderNum])='', NULL, TRIM(OrderNum)) AS OrderNum 
    ,IIF(TRIM([InvoiceNum])='', NULL,TRIM(InvoiceNum)) AS InvoiceNum
	--,'' AS InvoiceLine
    ,IIF(TRIM([BinNumber])='', NULL,TRIM(BinNumber)) AS BinNum
    ,IIF(TRIM([BatchID])='', NULL,TRIM(BatchID)) AS BatchNum
	,convert(date, [TranDate]) AS TransactionDate
	,[CreateTime] AS TransactionTime
	,[TranQty] AS TransactionQty
	,TranValue AS TransactionValue 
	,[CostPrice]
	,SellingPrice AS SalesUnitPrice
	,[ExchangeRate] 
	,'NOK' AS Currency -- CurrencyCode, changed 2023-05-16 SB
	,[Reference]
	,convert(date, [CreateDate]) AS AdjustmentDate
	,IIF(TRIM([TranTypeDesc]) IN ('Incoming goods','Outgoing goods'),'External','Internal') AS InternalExternal
	,PartStatus AS STRes1
	--,'' AS STRes2
	--,'' AS STRes3
	,[TranDT]
    ,[TranSource]
	,TRIM([SysRowID]) AS IndexKey		 
FROM 
	[stage].[JEN_NB_StockTransaction]
GO
PRINT N'Creating [stage].[WID_EE_Part]'
GO
CREATE TABLE [stage].[WID_EE_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartDescription] [nvarchar] (max) NULL,
[PartDescription2] [nvarchar] (max) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[ProductGroup2] [nvarchar] (50) NULL,
[Brand] [nvarchar] (50) NULL,
[CommodityCode] [nvarchar] (50) NULL,
[CountryOfOrigin] [nvarchar] (50) NULL,
[PartResponsible] [nvarchar] (100) NULL,
[NetWeight] [decimal] (18, 4) NULL,
[PackingSize] [decimal] (18, 4) NULL,
[PartStatus] [nvarchar] (50) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[ReorderLevel] [decimal] (18, 4) NULL,
[MainSupplier] [nvarchar] (100) NULL,
[AlternativeSupplier] [nvarchar] (100) NULL,
[EAN] [nvarchar] (50) NULL,
[SupplierPartNum] [nvarchar] (50) NULL,
[AvgCost] [decimal] (18, 4) NULL,
[LandedCost] [decimal] (18, 4) NULL,
[StartDate] [date] NULL,
[EndDate] [date] NULL,
[CodeOfConduct] [nvarchar] (50) NULL,
[InfoClient] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[vWID_EE_Part]'
GO




CREATE VIEW [stage].[vWID_EE_Part] AS
--ROWS CREATED FROM BUDGET TABLE 23-01-12 VA
--COMMENT EMPTY FIELDS 23-01-12 VA
SELECT 

	CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]), '#', TRIM([PartNum]))))) AS PartID
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', TRIM([PartNum])))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',[Company])) AS CompanyID
	,CONCAT([Company], '#', TRIM([PartNum])) AS PartCode
	,PartitionKey

	,[Company]
	,TRIM([PartNum]) AS [PartNum]
	--,'' AS [PartName]
	,[PartDescription]
	,[PartDescription2]
	--,'' AS [PartDescription3]
	,TRIM(MainSupplier) AS MainSupplier
	,TRIM(AlternativeSupplier) AS AlternativeSupplier
	,[ProductGroup]
	,[ProductGroup2]
	--,'' AS [ProductGroup3]
	,CodeOfConduct AS [ProductGroup4]
	,TRIM([Brand]) AS [Brand]
	,[CommodityCode]
	--,'' AS PartReplacementNum
	,PartStatus
	,[CountryOfOrigin]
	,CASE 
		WHEN PartResponsible = 'JN' THEN 'Janne Nyqvist'
		WHEN PartResponsible = 'MT' THEN 'Markku Tiikkainen'
		WHEN PartResponsible = 'RM' THEN 'Risto Malm'
		WHEN PartResponsible = 'SV' THEN 'Sami Venho'
		WHEN PartResponsible = 'TK' THEN 'Tanja Keiho'
		ELSE 'Others' END AS PartResponsible
	,[NetWeight]
	--,'' AS UoM
	,PackingSize AS [Material]
	--,'' AS [Barcode]
	,[ReOrderLevel]
	,[StartDate]
	,[EndDate]
	,nullif(trim([InfoClient]),'') as [PARes1]
FROM [stage].[WID_EE_Part]
GO
PRINT N'Creating [dm_TS].[DimRLS]'
GO

CREATE VIEW [dm_TS].[DimRLS] AS
SELECT 
	 [id]
,[Company]
,[Email]
,[RLSTable]
,[RLSField]
,[RLSValue]
,[AccessType]
,[SourceList]
,[Modified_at]
,[Author]
,[BusinessArea]
FROM [dm].DimRLS AS RLS
WHERE BusinessArea = 'Transport Solutions' OR Company = 'CERPL'
GO
PRINT N'Creating [axbus].[IOW_PL_Part]'
GO
CREATE TABLE [axbus].[IOW_PL_Part]
(
[PartitionKey] [nvarchar] (50) NULL,
[Company] [nvarchar] (8) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartName] [nvarchar] (max) NULL,
[PartDescription] [nvarchar] (max) NULL,
[PartDescription2] [nvarchar] (max) NULL,
[PartDescription3] [nvarchar] (max) NULL,
[ProductGroup] [nvarchar] (max) NULL,
[ProductGroup2] [nvarchar] (max) NULL,
[ProductGroup3] [nvarchar] (max) NULL,
[ProductGroup4] [nvarchar] (max) NULL,
[Brand] [nvarchar] (max) NULL,
[CommodityCode] [nvarchar] (max) NULL,
[PartReplacementNum] [nvarchar] (max) NULL,
[PartStatus] [nvarchar] (max) NULL,
[CountryOfOrigin] [nvarchar] (max) NULL,
[NetWeight] [nvarchar] (max) NULL,
[UoM] [nvarchar] (max) NULL,
[Material] [nvarchar] (max) NULL,
[BarCode] [nvarchar] (max) NULL,
[ReOrderLevel] [nvarchar] (max) NULL,
[PartResponsible] [nvarchar] (max) NULL,
[MainSupplier] [nvarchar] (max) NULL,
[AlternativeSupplier] [nvarchar] (max) NULL,
[StartDate] [nvarchar] (max) NULL,
[EndDate] [nvarchar] (max) NULL,
[PARes1] [nvarchar] (max) NULL,
[PARes2] [nvarchar] (max) NULL,
[PARes3] [nvarchar] (max) NULL,
[CreatedTimeStamp] [nvarchar] (max) NULL,
[ModifiedTimeStamp] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[vIOW_PL_Part]'
GO

CREATE VIEW [stage].[vIOW_PL_Part] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Company])))) AS CompanyID
	,UPPER(CONCAT(TRIM([Company]), '#', TRIM([PartNum]))) AS PartCode
	,PartitionKey --getdate() AS 

	,UPPER(TRIM([Company])) AS [Company]
	,UPPER(TRIM(PartNum)) AS [PartNum]
	,TRIM([PartName]) AS [PartName]
	,TRIM([PartDescription]) AS [PartDescription]
	,TRIM([PartDescription2]) AS [PartDescription2]
	,TRIM([PartDescription3]) AS [PartDescription3]
	,TRIM((MainSupplier)) AS MainSupplier
	,TRIM(AlternativeSupplier) AS AlternativeSupplier
	,TRIM([ProductGroup2]) AS [ProductGroup] --switched productgroup and productgroup2 as it was in the wrong order, 2023-03-24 SB
	,TRIM([ProductGroup]) AS [ProductGroup2]
	,TRIM([ProductGroup3]) AS [ProductGroup3]
	,TRIM([ProductGroup4]) AS [ProductGroup4]
	,TRIM([Brand]) AS [Brand]
	,TRIM(CommodityCode) AS [CommodityCode]
	,TRIM([PartReplacementNum]) AS [PartReplacementNum]
	,TRIM([PartStatus]) AS [PartStatus]
	,TRIM(([CountryOfOrigin])) AS [CountryOfOrigin]
	,NULL AS [NetWeight] --CAST([NetWeight] AS decimal(18,2))
	,TRIM([UoM]) AS [UoM]
	,TRIM([Material]) AS [Material]
	,TRIM([Barcode]) AS [Barcode]
	,NULL AS [ReOrderLevel] --CAST([ReOrderLevel] AS decimal(18,2))
	,TRIM([PartResponsible]) AS [PartResponsible]
	,[StartDate]
	,[EndDate]

FROM [axbus].[IOW_PL_Part]
--GROUP BY
--	PartitionKey, Company, [PartNum], [PartName], [PartDescription], [ProductGroup], [Brand], CommodityCode, [CountryOfOrigin], MainSupplier, [PartDescription2],[PartDescription3], AlternativeSupplier, [ProductGroup2], [ProductGroup3], [ProductGroup4], [PartReplacementNum], [PartStatus], [UoM], [Material], [Barcode], [PartResponsible], [StartDate], [EndDate]
GO
PRINT N'Creating [dm_DS].[dimWarehouse]'
GO
/****** Object:  View [dm].[fctStockTran_LS]    Script Date: 2020-10-08 16:08:21 ******/

CREATE VIEW [dm_DS].[dimWarehouse] AS

SELECT 
 whs.[WareHouseID]
,whs.[CompanyID]
,whs.[Company]
,whs.[WarehouseCode]
,whs.[WarehouseName]
,whs.[WarehouseDistrict]
,whs.[WarehouseAddress]
,whs.[WarehouseDescription]
,whs.[WarehouseType]
,whs.[WarehouseCountry]
,whs.[WarehouseSite]
FROM dm.DimWarehouse whs
LEFT JOIN dbo.Company com ON whs.Company = com.Company
WHERE com.BusinessArea = 'Driveline Solutions' AND com.[Status] = 'Active' 
--WHERE Company  in ('MIT', 'ATZ', 'Transaut', 'IPLIOWTR')  -- DS basket
GO
PRINT N'Creating [stage].[ARK_PI_CustomerAgreement]'
GO
CREATE TABLE [stage].[ARK_PI_CustomerAgreement]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[AgreementCode] [nvarchar] (50) NULL,
[AgreementDescription] [nvarchar] (800) NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[AgreementQty] [decimal] (18, 4) NULL,
[FullfiledQty] [decimal] (18, 4) NULL,
[DelivTime] [nvarchar] (10) NULL,
[Currency] [nvarchar] (10) NULL,
[AgreementStart] [date] NULL,
[AgreementEnd] [date] NULL,
[CustomerTerms] [nvarchar] (100) NULL,
[CARes1] [nvarchar] (100) NULL,
[CARes2] [nvarchar] (100) NULL,
[CARes3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vARK_PI_CustomerAgreement]'
GO
CREATE VIEW [stage].[vARK_PI_CustomerAgreement] AS 
--ADD UPPER()TRIM() INTO CustomerID,PartID 2022-12-16 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(TRIM([Company]), '#', TRIM([AgreementCode]), '#', TRIM([PartNum]), '#', TRIM(CustomerNum)))) AS CustomerAgreementID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM([Company]))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustomerNum)))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM([Currency]))) AS CurrencyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM([PartNum]))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM([PartNum])))) AS PartID
	,[PartitionKey]

	,[Company]
	,TRIM(CustomerNum) AS CustomerNum
	,TRIM([PartNum]) AS PartNum
	,[AgreementCode]
	,[AgreementDescription]
	,[DiscountPercent]
	,([UnitPrice]) AS [UnitPrice]
	,[AgreementQty]
	,[FullfiledQty] AS FulfilledQty
	,[AgreementQty] -[FullfiledQty] AS RemainingQty
	--,'' AS UoM
	,[Currency]
	,[DelivTime]
	,[AgreementStart]
	,[AgreementEnd]
	,[CustomerTerms]
	,[AgreementQty] AS CARes1
	,[FullfiledQty] AS CARes2
	,CARes3
FROM 
	[stage].[ARK_PI_CustomerAgreement]
WHERE [AgreementQty] <> 0
--GROUP BY [PartitionKey], [Company], CustomerNum, [PartNum], [AgreementCode], [AgreementDescription], [DiscountPercent], [AgreementQty], [Currency], [DelivTime],[AgreementStart],[AgreementEnd],[CustomerTerms],[FullfiledQty],CARes2,CARes3
GO
PRINT N'Creating [stage].[JEN_SE_Warehouse]'
GO
CREATE TABLE [stage].[JEN_SE_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseNum] [nvarchar] (50) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL,
[Addressline1] [nvarchar] (200) NULL,
[Addressline2] [nvarchar] (200) NULL,
[Addressline3] [nvarchar] (200) NULL,
[City] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vJEN_SE_Warehouse]'
GO
CREATE VIEW [stage].[vJEN_SE_Warehouse] AS
--COMMENT EMPTY FIELDS 2022-12-19
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseNum]))))) AS WarehouseID
	,PartitionKey

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([WarehouseNum])) AS [WarehouseCode]
	,[WarehouseName]
	,Addressline3 AS [WarehouseDistrict]
	,LEFT(CONCAT(Addressline1, ', ', Addressline2, ', ', Addressline3)  , 200) AS [WarehouseAddress]
	--,'' AS [WarehouseDescription]
	--,'' AS [WarehouseType]
	--,'' AS [WarehouseCountry]
	--,'' AS [WarehouseSite]
FROM [stage].[JEN_SE_Warehouse]
GO
PRINT N'Creating [stage].[JEN_NB_Supplier]'
GO
CREATE TABLE [stage].[JEN_NB_Supplier]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[Name] [nvarchar] (50) NULL,
[CustomerCode] [nvarchar] (10) NULL,
[Addressline1] [nvarchar] (50) NULL,
[Addressline2] [nvarchar] (50) NULL,
[Addressline3] [nvarchar] (50) NULL,
[ZIP] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[City] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[Region] [nvarchar] (50) NULL,
[SupplierCategory] [nvarchar] (50) NULL,
[Reference] [nvarchar] (50) NULL,
[BankAccountNum] [nvarchar] (34) NULL,
[VATNum] [nvarchar] (20) NULL,
[ABCCode] [nvarchar] (10) NULL,
[TelephoneNum] [nvarchar] (20) NULL,
[Email] [nvarchar] (100) NULL,
[CodeOfConduct] [nvarchar] (500) NULL,
[MinOrderQty] [nvarchar] (50) NULL,
[InternalName] [nvarchar] (50) NULL,
[GlobalID] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (10) NULL
)
GO
PRINT N'Creating [stage].[vJEN_NB_Supplier]'
GO

CREATE view [stage].[vJEN_NB_Supplier] AS
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT
	--CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company] ,'#', TRIM([SupplierNum]))))) AS SupplierID
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]),'#', TRIM([SupplierNum]))))) AS SupplierID
    ,UPPER(CONCAT([Company], '#', TRIM([SupplierNum]))) AS SupplierCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,[PartitionKey]

	,UPPER([Company]) AS Company
	,UPPER(TRIM([SupplierNum])) AS [SupplierNum]
	,TRIM([Name]) AS MainSupplierName
	,[dbo].[ProperCase]([Name]) AS SupplierName
	,[AddressLine1]
    ,[AddressLine2]
    ,[AddressLine3]
	,[TelephoneNum]
	,[Email]
	,[dbo].[udf_GetNumeric]([Addressline3]) AS ZipCode
	,trim(substring(replace([dbo].[ProperCase](AddressLine3),' ', ''), 6, 100))  AS [City]
	,[District]
	,[dbo].[ProperCase]([CountryName]) AS CountryName
	,[Region]
	,[SupplierCategory]
	,[Reference] AS [SupplierResponsible]
	,[dbo].[ProperCase](TRIM(concat (addressline1+' '+ addressline2, null))) AS AddressLine
	,[dbo].[ProperCase](TRIM(concat_ws(',',coalesce([dbo].[ProperCase](CountryName),null),IIF(City= ' ',null,trim(substring(replace([dbo].[ProperCase](AddressLine3),' ', ''), 6, 100))),IIF(ZIP= ' ',null,[dbo].[udf_GetNumeric]([Addressline3]))
	,coalesce(IIF([addressline1]= ' ',null,[addressline1]),IIF([addressline2]= ' ',null,[addressline2]))
	,coalesce(IIF([addressline2]= ' ',null,[addressline2]),IIF([addressline3]= ' ',null,[addressline3]))))) AS FullAddressLine
	--,'' AS [AccountNum] 
	,[VATNum]
	--,'' AS OrganizationNum
	,[InternalName] AS [InternalExternal]
	,[CodeOfConduct]
	,[CustomerCode] AS CustomerNum
	,[ABCCode] AS [SupplierScore]
	,TRY_CONVERT(decimal(18,4),[MinOrderQty]) AS [MinOrderQty]
	,0 AS [MinOrderValue]
	--,'' AS [Website]
	--,'' AS [Comments]
	,GlobalID AS SRes1
	--,'' AS SRes2
	--,'' AS SRes3
	, CountryCode
FROM [stage].[JEN_NB_Supplier]
GO
PRINT N'Creating [stage].[JEN_SK_SalesLedger]'
GO
CREATE TABLE [stage].[JEN_SK_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL
)
GO
PRINT N'Creating [stage].[vJEN_SK_SalesLedger]'
GO
CREATE VIEW [stage].[vJEN_SK_SalesLedger] AS
--COMMENT empty fields // ADD UPPER() TRIM() INTO CustomerID 2023-12-14 VA
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ), '#', InvoiceNum))) AS SalesLedgerID,
	CONVERT([binary](32),HASHBYTES('SHA2_256', Company)) AS CompanyID,
	--CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) )))) AS CustomerID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustNum))))) AS CustomerID,
	CONCAT(Company,'#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ), '#', InvoiceNum) AS SalesLedgerCode,
	PartitionKey,

	Company,
	TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ) AS CustomerNum,
	InvoiceNum AS SalesInvoiceNum,
	InvoiceDate	AS SalesInvoiceDate,
	CONVERT(date, DueDate) AS SalesDueDate,
	CONVERT(date, LastPaymentDate) AS SalesLastPaymentDate,
	--NULL AS InvoiceAmount,
	--NULL AS PaidInvoiceAmount,
	--NULL AS RemainingInvoiceAmount,
	1 AS ExchangeRate,
	'SEK' AS Currency,
	--NULL AS VATAmount,
	--'' AS VATCode,
	--'' AS PayToName,
	--'' AS PayToCity,
	--'' AS PayToContact,
	--'' AS PaymentTerms,
	--'' AS SLRes1,
	--'' AS SLRes2,
	--'' AS SLRes3
	'1900-01-01' AS AccountingDate
	--,'' AS AgingPeriod
	--,'' AS AgingSort
	--,'' AS VATCodeDesc
	--,'' AS LinkToOriginalInvoice
FROM 
	stage.JEN_SK_SalesLedger
GO
PRINT N'Creating [stage].[SalesPersonName]'
GO
CREATE TABLE [stage].[SalesPersonName]
(
[Company] [nvarchar] (8) NOT NULL,
[SalesPersonName] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vSalesPersonName]'
GO

CREATE VIEW [stage].[vSalesPersonName]
AS
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT(Company,'#',SalesPersonName))) as SalesPersonNameID,
	Company,
	SalesPersonName
FROM stage.SalesPersonName;
GO
PRINT N'Creating [dm_TS].[fctSalesLedger]'
GO


CREATE VIEW [dm_TS].[fctSalesLedger] AS 
SELECT 
 sl.[SalesLedgerID]
,sl.[SalesPersonNameID]
,sl.[Company]
,sl.[CustomerNum]
,sl.[SalesInvoiceNum]
,sl.[SalesInvoiceDate]
,sl.[SalesDueDate]
,sl.[SalesLastPaymentDate]
,sl.[InvoiceAmount]
,sl.[RemainingInvoiceAmount]
,sl.[ExchangeRate]
,sl.[Currency]
,sl.[VATAmount]
,sl.[VATCode]
,sl.[PayToName]
,sl.[PayToCity]
,sl.[PayToContact]
,sl.[PaymentTerms]
,sl.[SLRes1]
,sl.[SLRes2]
,sl.[SLRes3]
,sl.[SalesLedgerCode]
,sl.[CompanyID]
,sl.[PartitionKey]
,sl.[PaidInvoiceAmount]
,sl.[AccountingDate]
,sl.[AgingPeriod]
,sl.[AgingSort]
,sl.[VATCodeDesc]
,sl.[CustomerID]
,sl.[LinkToOriginalInvoice]
,sl.[SalesInvoiceDateID]
,sl.[PaymentStatus]
,sl.[WarehouseID]
  FROM [dm].[FactSalesLedger] as sl
  /*temp putting (CERPL) Certex PL here such that they see the data in same company*/
  WHERE Company  IN ('FESFORA', 'FSEFORA', 'FFRFORA', 'FORPL', 'CERPL', 'FFRGPI', 'FFRLEX', 'IFIWIDN', 'IEEWIDN', 'TMTFI', 'TMTEE', 'FITMT', 'EETMT', 'ABKSE', 'ROROSE','STESE','CERBG'
,'FORBG')
GO
PRINT N'Creating [stage].[CER_NO_OLine]'
GO
CREATE TABLE [stage].[CER_NO_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderRelNum] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[DelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[UnitPrice] [numeric] (18, 4) NULL,
[UnitCost] [numeric] (18, 4) NULL,
[SumUnitCost] [numeric] (18, 4) NULL,
[SumUnitPrice] [numeric] (18, 4) NULL,
[CurrExchRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (10) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [numeric] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[NeedbyDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[LineFlag] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_NO_OLine]'
GO

CREATE VIEW [stage].[vCER_NO_OLine] AS
--COMMENT EMPTY FIELDS // ADD TRIM() INTO PartID,CustomerID,WarehouseID 2022-12-16 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', OrderNum, '#', OrderLine))) AS SalesOrderID -- ext OrderRelNum --,'#',SalesReturnInvoiceNum , '#', InvoiceNum
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) ))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID 
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', WarehouseCode))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum)))) AS SalesOrderNumID
	,CONCAT(Company,'#',OrderNum,'#',OrderLine) AS SalesOrderCode 
	,CONVERT(int, replace(convert(date, OrderDate),'-','')) AS SalesOrderDateID  
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey 

	,UPPER(TRIM(Company)) AS Company
	,UPPER(TRIM(CustNum)) AS CustomerNum
	,TRIM(OrderNum) AS SalesOrderNum
	,TRIM(OrderLine) AS SalesOrderLine
	--,'' AS SalesOrderSubLine
	--,'' AS SalesOrderType
	--,'' AS SalesOrderCategory
	,TRIM(OrderRelNum) AS SalesOrderRelNum
	,OrderDate AS SalesOrderDate
	,NeedbyDate
	,DelivDate AS ExpDelivDate
	,CAST('1900-01-01' AS date) AS ActualDelivDate
	,CAST('1900-01-01' AS date) AS ConfirmedDelivDate
	,TRIM(InvoiceNum) AS SalesInvoiceNum --MAX
	,OrderQty AS SalesOrderQty
	,DelivQty
	,RemainingQty
	--,NULL AS SalesInvoiceQty
	--,'' AS UoM
	,UnitPrice
	,UnitCost
	,'NOK' AS Currency
	,CurrExChRate AS ExchangeRate
	,OpenRelease
	,DiscountAmount
	,DiscountPercent
	,UPPER(TRIM(PartNum)) AS PartNum
	,LineFlag AS PartType
	,PartStatus
	,TRIM(SalesPerson) AS SalesPersonName
	,CASE WHEN WarehouseCode = '' OR WarehouseCode is NULL THEN 'Other' ELSE WarehouseCode END AS WarehouseCode
	--,'' AS SalesChannel
	,'Normal Order Handling' AS AxInterSalesChannel
	--,'' AS Department
	--,'' AS ProjectNum
	--,'' AS IndexKey
	--,'0' AS Cancellation
	,LineFlag AS SORes1
	--,'' AS SORes2
	--,'' AS SORes3
	--,NULL AS [TotalMiscChrg]
FROM stage.CER_NO_OLine

--GROUP BY
--	PartitionKey, CustNum, OrderNum, OrderLine, OrderRelNum, OrderDate, NeedbyDate, DelivDate, OrderQty, DelivQty, RemainingQty, UnitPrice, UnitCost, SumUnitPrice, SumUnitCost, CurrExChRate, Company, OpenRelease, DiscountAmount, DiscountPercent, PartNum, PartStatus, SalesPerson/*, ReturnComment, SalesReturnOrderNum*/, WarehouseCode, LineFlag--, SalesReturnInvoiceNum,InvoiceNum,Currency
GO
PRINT N'Creating [dm_DS].[DimSalesPersonName]'
GO
CREATE VIEW [dm_DS].[DimSalesPersonName] AS
SELECT  sp.[SalesPersonNameID]
,sp.[Company]
,sp.[SalesPersonName]
FROM dm.DimSalesPersonName sp
LEFT JOIN dbo.Company com ON sp.Company = com.Company
WHERE com.BusinessArea = 'Driveline Solutions' AND com.[Status] = 'Active' 

--WHERE Company IN ('MIT', 'ATZ', 'Transaut') ;
GO
PRINT N'Creating [stage].[CER_EE_PurchaseInvoice]'
GO
CREATE TABLE [stage].[CER_EE_PurchaseInvoice]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaseOrderType] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[PurchaseInvoiceLine] [nvarchar] (50) NULL,
[PurchaseInvoiceType] [nvarchar] (50) NULL,
[PurchaseInvoiceDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PurchaseInvoiceQty] [decimal] (18, 4) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[VATAmount] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PurchaserName] [nvarchar] (100) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[PurchaseChannel] [nvarchar] (50) NULL,
[LastPaymentNum] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_EE_PurchaseInvoice]'
GO

CREATE   VIEW [stage].[vCER_EE_PurchaseInvoice] AS
--COMMENT EMPTY FIELDS 2022-12-15 VA
SELECT 
	--CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum),'#',TRIM(PurchaseOrderNum),'#',TRIM(PurchaseOrderLine),'#'
	--	,TRIM(PurchaseOrderSubLine),'#',TRIM(PurchaseInvoiceNum), '#', TRIM(PurchaseInvoiceLine), '#', ActualDelivDate, '#', PartNum, '#', UnitPrice, '#', DiscountAmount
	--	, '#', PurchaseInvoiceQty, '#', TRIM(WarehouseCode),'#',TRIM(LastPaymentNum))))) AS PurchaseInvoiceID --'#', PurchaseOrderType
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum),'#',TRIM(PurchaseOrderNum),'#',TRIM(PurchaseOrderLine),'#'
		,TRIM(PurchaseOrderSubLine),'#',TRIM(PurchaseInvoiceNum), '#', TRIM(PurchaseInvoiceLine), '#', TRIM(WarehouseCode))))) AS PurchaseInvoiceID

	,UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseInvoiceNum), '#', TRIM(PurchaseInvoiceLine), '#', PartNum)) AS PurchaseInvoiceCode
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum))) AS PurchaseOrderNumCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum),'#',TRIM(PurchaseOrderLine),'#',TRIM(PurchaseInvoiceNum))))) AS PurchaseOrderID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum))))) AS SupplierID
    ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT(int, replace(PurchaseInvoiceDate,'-','')) AS PurchaseInvoiceDateID --DZ 20220906
--	,CONVERT(int, replace(convert(date,'1900-01-01'),'-','')) AS PurchaseInvoiceDateID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#', TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum),'#',TRIM(PurchaseOrderNum),'#',TRIM(LastPaymentNum))))) AS PurchaseLedgerID --match PurchaseLedgerID in [vSCM_FI_PurchaseLedger]
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum),'#',TRIM(PurchaseOrderNum))) AS PurchaseOrderCode
	,PartitionKey

	,UPPER(TRIM(Company)) AS Company
	,UPPER(TRIM(PurchaseOrderNum)) AS PurchaseOrderNum
	,UPPER(TRIM(PurchaseOrderLine)) AS PurchaseOrderLine
	,UPPER(TRIM(PurchaseOrderSubLine)) AS PurchaseOrderSubLine
	,PurchaseOrderType
	,UPPER(TRIM(PurchaseInvoiceNum)) AS PurchaseInvoiceNum
	,UPPER(TRIM(PurchaseInvoiceLine)) AS PurchaseInvoiceLine -- deliv line
	,PurchaseInvoiceType
	,PurchaseInvoiceDate
	,ActualDelivDate
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,PurchaseInvoiceQty
	,UoM
	,UnitPrice
	--,0 AS DiscountPercent
	,DiscountAmount
	,TotalMiscChrg
	,VATAmount
	,Currency
	,ExchangeRate
	,CreditMemo
	,PurchaserName
	,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
	,PurchaseChannel
	--,'' AS Comment
	--,'' AS PIRes1
	--,'' AS PIRes2
	--,'' AS PIRes3
	--,'' AS OrderDelivLineNum
FROM stage.CER_EE_PurchaseInvoice

--GROUP BY
--	PartitionKey, Company, PurchaseOrderNum, PurchaseInvoiceNum, SupplierNum, PartNum, PurchaseOrderLine, PurchaseOrderSubLine, PurchaseInvoiceQty,UoM, UnitPrice, WarehouseCode,PurchaserName, 
--	PurchaseInvoiceLine, PurchaseInvoiceType, PurchaseInvoiceDate, ActualDelivDate, TotalMiscChrg, VATAmount, CreditMemo, PurchaseOrderType,DiscountAmount,Currency,ExchangeRate,PurchaseChannel, LastPaymentNum 
	
	--, PurchaseOrderType, [Site], OrderDelivLineNum, , DiscountPercent, PurchaserName, PurchaseInvoiceLine, PurchaseInvoiceType, PurchaseInvoiceDate, ActualDelivDate, TotalMiscChrg, CreditMemo
GO
PRINT N'Creating [stage].[ARK_CZ_SalesLedger]'
GO
CREATE TABLE [stage].[ARK_CZ_SalesLedger]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (8) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[Res1] [nvarchar] (50) NULL,
[Res2] [nvarchar] (50) NULL,
[Res3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vARK_CZ_SalesLedger]'
GO

CREATE VIEW [stage].[vARK_CZ_SalesLedger] AS
--COMMENT EMPTY FIELDS // ADD UPPER()TRIM() INTO CustomerID
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT(Company, '#', CustomerNum, '#', InvoiceNum))) AS SalesLedgerID
	,CONCAT(Company,'#',CustomerNum, '#', InvoiceNum) AS SalesLedgerCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',Company)) AS CompanyID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#' ,TRIM(CustomerNum)))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#' ,TRIM(CustomerNum))))) AS CustomerID
	,PartitionKey

	,Company
	,[CustomerNum]
	,InvoiceNum AS [SalesInvoiceNum]
	,[InvoiceDate] AS [SalesInvoiceDate]
	,CONVERT(date, DueDate) AS SalesDueDate
	,CONVERT(date, LastPaymentDate) AS SalesLastPaymentDate
	--,0 AS [InvoiceAmount]
	--,0 AS [RemainingInvoiceAmount]
	--,0 AS [ExchangeRate]
	--,0 AS [VATAmount]
	--,'' AS [Currency]
	--,'' AS [VATCode]
	--,'' AS [PayToName]
	--,'' AS [PayToCity]
	--,'' AS [PayToContact]
	--,'' AS [PaymentTerms]

	--,[Res1] AS SLRes1
	--,[Res2] AS SLRes2
	--,[Res3] AS SLRes3
	--,NULL			AS PaidInvoiceAmount
	,'1900-01-01' AS AccountingDate
	--,NULL AS AgingPeriod
	--,NULL AS AgingSort
	--,NULL AS VATCodeDesc
	--,NULL AS LinkToOriginalInvoice

FROM 
	stage.ARK_CZ_SalesLedger
--WHERE [DueDate] >= DATEADD(year, -1, GETDATE()) --Added this where clause as semi-incremental load functinoality since it doesn't work easily on meta-param table. /SM 2021-10-01	
--GROUP BY
--	PartitionKey, Company, CustomerNum, InvoiceNum, DueDate, LastPaymentDate, [InvoiceDate], [Res1], [Res2], [Res3]
GO
PRINT N'Creating [stage].[FOR_SE_Customer]'
GO
CREATE TABLE [stage].[FOR_SE_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[CustomerName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[ABCCode] [nchar] (10) NULL,
[City] [nvarchar] (50) NULL,
[ZIP] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNr] [nvarchar] (20) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (30) NULL,
[OrganisationNum] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vFOR_SE_Customer]'
GO


CREATE view [stage].[vFOR_SE_Customer] AS
--COMMEN EMPTY FIELDS 2022-12-20 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Company])))) AS CompanyID
	,UPPER(CONCAT(TRIM([Company]), '#', TRIM([CustomerNum]))) AS CustomerCode
	,PartitionKey

	,UPPER(Company) AS Company
    ,UPPER(TRIM(CustomerNum)) AS CustomerNum
	--,'' AS MainCustomerName
    ,[dbo].[ProperCase](CustomerName) AS CustomerName
    ,[AddressLine1]
    ,[AddressLine2]
    ,[AddressLine3]
	--,'' AS [TelephoneNum1]
	--,'' AS [TelephoneNum2]
	--,'' AS [Email]
	,[ZIP] AS ZipCode
    ,IIF([City]= ' ',null,[dbo].[ProperCase]([City])) AS [City]    
    ,IIF([State]= ' ',null,[State]) AS [State]
	,[District]	AS SalesDistrict
	,IIF(CountryName IS null OR CountryName = '', 'SE', CountryCode) AS CountryCode
    ,IIF(CountryName IS null OR CountryName = '', 'Sweden', CountryName) AS CountryName
	--,'' AS Division
	--,'' AS CustomerIndustry
	--,'' AS CustomerSubIndustry
	,[dbo].[ProperCase](TRIM(CONCAT(AddressLine1,' ',AddressLine2))) as AddressLine
	,[dbo].[ProperCase](concat_ws(',',coalesce(CountryName,null),coalesce(IIF([State]= ' ',null,[State]),IIF(City= ' ',null,City),IIF(ZIP= ' ',null,ZIP)),IIF([AddressLine3]=' ',null, [AddressLine3])
		,coalesce(IIF([addressline1]= ' ',null,[addressline1]),IIF([addressline2]= ' ',null,[addressline2]))
		,coalesce(IIF([addressline2]= ' ',null,[addressline2]),IIF([addressline3]= ' ',null,[addressline3])))) AS FullAddressLine
    ,[dbo].[ProperCase](CustomerGroup) AS CustomerGroup
	,[dbo].[ProperCase](CustomerGroup) AS CustomerSubGroup
	,[SalesRepCode] AS SalesPersonCode
    ,[dbo].[ProperCase](SalesPersonName) AS SalesPersonName
	--,'' AS [SalesPersonResponsible]
    ,TRIM([VATRegNr]) AS [VATNum]
	,OrganisationNum AS OrganizationNum
	,[AccountString] AS AccountNum
	,iif([InternalExternal] = 'True', 'Internal', 'External') as InternalExternal
	,[ABCCode] AS CustomerScore
	--,'' AS CustomerType


  FROM [stage].[FOR_SE_Customer]
  GROUP BY [Company], [CustomerNum], [PartitionKey], [CustomerNum],  [CustomerName],[AddressLine1], [AddressLine2] ,[AddressLine3], [ZIP], [City], [State], [District], CountryCode, CountryName,CustomerGroup, [SalesRepCode], SalesPersonName, [VATRegNr], [AccountString], [InternalExternal], [ABCCode], OrganisationNum
GO
PRINT N'Creating [stage].[TMT_FI_StockTransactionOB]'
GO
CREATE TABLE [stage].[TMT_FI_StockTransactionOB]
(
[Company] [nvarchar] (50) NULL,
[IndexKey] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[SalesOrderNum] [nvarchar] (50) NULL,
[SalesOrderLine] [nvarchar] (50) NULL,
[SalesInvoiceNum] [nvarchar] (50) NULL,
[SalesInvoiceLine] [nvarchar] (50) NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[PurchaseInvoiceLine] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[BinNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[Version] [nvarchar] (50) NULL,
[TransActionDate] [nvarchar] (50) NULL,
[AdjustmentDate] [nvarchar] (50) NULL,
[TransActionTime] [nvarchar] (50) NULL,
[TransactionType] [nvarchar] (50) NULL,
[TransactionCode] [nvarchar] (50) NULL,
[TransactionDescription] [nvarchar] (200) NULL,
[Reference] [nvarchar] (100) NULL,
[TransActionQty] [decimal] (18, 4) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[CostPrice] [decimal] (18, 4) NULL,
[SalesUnitPrice] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[TransActionValue] [decimal] (18, 4) NULL,
[STRes1] [nvarchar] (100) NULL,
[STRes2] [nvarchar] (100) NULL,
[STRes3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vTMT_FI_StockTransactionOB]'
GO
CREATE VIEW [stage].[vTMT_FI_StockTransactionOB] AS 

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(WarehouseCode), '#', TRIM(BinNum), '#', TRIM(PartNum), '#', TRIM([Version]), '#',TRIM(IndexKey) )))) AS StockTransactionID
	,UPPER(CONCAT(Company, '#', TRIM(IndexKey))) AS StockTransactionCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum))))) AS PartID
 	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SalesOrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SalesInvoiceNum))))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseInvoiceNum))))) AS PurchaseInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustomerNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierNum))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Currency])))) AS CurrencyID
	,CONVERT(nvarchar(50), getdate()) AS [PartitionKey]

    ,IndexKey
    ,UPPER(Company) AS Company -- 
    ,UPPER(TRIM(PartNum)) AS PartNum
	,UPPER(IIF(TRIM(TransactionCode)='Delivery', TRIM(CustomerNum), TRIM(SupplierNum))) AS IssuerReceiverNum
	,TRIM([WarehouseCode]) AS WarehouseCode
	,TRIM(TransactionCode) AS TransactionCode
	,TRIM(TransactionDescription) AS TransactionDescription
	,IIF(TRIM(TransactionCode)='Delivery', TRIM(SalesOrderNum), TRIM(PurchaseOrderNum)) AS OrderNum 
	,IIF(TRIM(TransactionCode)='Delivery', TRIM(SalesOrderLine), TRIM(PurchaseOrderLine)) AS OrderLine
    ,IIF(TRIM(TransactionCode)='Delivery', TRIM(SalesInvoiceNum),TRIM(PurchaseInvoiceNum)) AS InvoiceNum
	,IIF(TRIM(TransactionCode)='Delivery', TRIM(SalesInvoiceLine), TRIM(PurchaseInvoiceLine)) AS InvoiceLine
    ,TRIM(BinNum) AS BinNum
    ,TRIM(BatchNum) AS BatchNum
	,convert(date, TransactionDate) AS TransactionDate 
	,TransactionTime
	,TransactionQty
	,IIF(TransactionQty < 0, -1*ABS(TransactionValue), TransactionValue) AS TransactionValue
	,[CostPrice] 
	,SalesUnitPrice 
	,Currency
	,[Reference]
	,AdjustmentDate
	,TransactionType AS InternalExternal
	,STRes1
	,STRes2
	,[version] AS STRes3
FROM 
	[stage].[TMT_FI_StockTransactionOB]
GROUP BY
	IndexKey, Company, PartNum, TransactionCode, [WarehouseCode], TransactionDescription, BinNum, BatchNum, TransactionDate, TransactionTime, TransactionQty, [CostPrice], SalesUnitPrice, Currency, AdjustmentDate, TransactionType, STRes1, STRes2, [version], SalesOrderNum, SalesOrderLine, SalesInvoiceNum, SalesInvoiceLine, PurchaseOrderNum, PurchaseOrderLine, PurchaseInvoiceNum, PurchaseInvoiceLine, CustomerNum, SupplierNum, TransactionValue, [Reference]
GO
PRINT N'Creating [stage].[StockAvailability_SCM_FI]'
GO



--This is used in EDC Stock Availability report in Lifting Solution Group PBI Workspace
--The Analysis Service model BI_CentralSourcing_LS is reading this view (in GIT)
CREATE VIEW  [stage].[StockAvailability_SCM_FI] AS
-- Can likely be refactored to use CTE instead for better readability and slight performance improvement /SM

SELECT sb.PartNum
		,CONVERT(bigint,sb.PartID) AS PartID
		,sb.Company as Company
		,CONVERT(bigint,sb.CompanyID) AS CompanyID
		,p.partDescription
		,CONCAT(sb.PartNum , ' |  ' + NULLIF(p.PartDescription,'') , ' | ' + NULLIF(p.PartDescription2,'') , ' | ' + NULLIF(p.PartDescription3,'') )   AS [PartNum&Desc] 
		,sb.StockBalance AS Qty
		,ca.UnitPrice
		,sb.BatchNum as BatchNum
		,'Stock Balance' AS [QtyType]
		,CAST(GETDATE() AS date) AS GenericDate
		,'' AS DueDate 
		,w.WarehouseSite
		,CONVERT(bigint,sb.WarehouseID) AS WarehouseID
		,CONVERT(bigint,sb.SupplierID) AS SupplierID
FROM dw.StockBalance sb
LEFT JOIN dw.Part p ON  p.Company = 'AFISCM' AND  p.PartID = sb.PartID 
LEFT JOIN dw.Warehouse w ON w.WareHouseID = sb.WarehouseID
LEFT JOIN (SELECT PartID, MAX(UnitPrice) AS UnitPrice, Company FROM dw.CustomerAgreement 
		WHERE Company = 'AFISCM' and is_deleted != '1' GROUP BY PartID, Company) ca ON  ca.PartID = sb.PartID
WHERE sb.Company = 'AFISCM' and sb.is_deleted != '1'

UNION ALL

SELECT so.PartNum
		,CONVERT(bigint,so.PartID) AS PartID
		,so.Company
		,CONVERT(bigint,so.CompanyID) AS CompanyID
		,p.partDescription
		,CONCAT(so.PartNum , ' |  ' + NULLIF(p.PartDescription,'') , ' | ' + NULLIF(p.PartDescription2,'') , ' | ' + NULLIF(p.PartDescription3,'') )   AS [PartNum&Desc] 
		,so.RemainingQty AS Qty
		,ca.UnitPrice
		,NULL AS BatchNum
		,'Normal Order Sales Remaining Qty' AS [QtyType]
		,so.SalesOrderDate AS GenericDate
		,'' AS DueDate 
		,w.WarehouseSite
		,CONVERT(bigint,so.WarehouseID) AS WarehouseID
		,0 AS SupplierID
FROM dw.SalesOrder so
LEFT JOIN dw.Part p ON  p.Company = 'AFISCM'  AND  p.PartID = so.PartID 
LEFT JOIN dw.Warehouse w ON w.Company = 'AFISCM' AND w.WareHouseID = so.WarehouseID 
LEFT JOIN (SELECT PartID, MAX(UnitPrice)  AS UnitPrice, Company FROM dw.CustomerAgreement 
			WHERE Company = 'AFISCM' and is_deleted != '1' GROUP BY PartID, Company) ca ON ca.Company = 'AFISCM' AND ca.PartID = so.PartID
Where so.Company = 'AFISCM' AND so.SalesOrderType = 'Normal Order' AND so.OpenRelease = '1' AND so.is_deleted != '1'

UNION ALL

SELECT po.PartNum
		,po.PartID
		,po.Company
		,CONVERT(bigint,po.CompanyID) AS CompanyID
		,p.partDescription
		,CONCAT(po.PartNum , ' |  ' + NULLIF(p.PartDescription,'') , ' | ' + NULLIF(p.PartDescription2,'') , ' | ' + NULLIF(p.PartDescription3,'') )   AS [PartNum&Desc] 
		,po.PurchaseOrderQty - po.ReceiveQty AS Qty
		,ca.UnitPrice
		,NULL AS BatchNum
		,'Normal Order Purchase Incoming Qty' AS [QtyType]
		,po.PurchaseOrderDate AS GenericDate
		,CONCAT('Incoming Date: ', CONVERT(nvarchar, po.OrgReqDelivDate, 23),' - ', 'PO',po.PurchaseOrderNum ) AS DueDate 
		,w.WarehouseSite
		,CONVERT(bigint,po.WarehouseID) AS WarehouseID
		,CONVERT(bigint,po.SupplierID) AS SupplierID
FROM dw.PurchaseOrder po
LEFT JOIN dw.Part p ON  p.Company = 'AFISCM'  AND p.PartID = po.PartID 
LEFT JOIN dw.Warehouse w ON w.Company = 'AFISCM' AND w.WareHouseID = po.WarehouseID 
LEFT JOIN (SELECT PartID, MAX(UnitPrice) AS UnitPrice, Company FROM dw.CustomerAgreement 
		WHERE Company = 'AFISCM' and is_deleted != '1' GROUP BY PartID, Company) ca ON ca.PartID = po.PartID
Where po.Company = 'AFISCM' AND po.PurchaseOrderType = 'Stock Order' AND po.PurchaseOrderStatus = 'Open' AND po.is_deleted != '1'
GO
PRINT N'Creating [dm_TS].[fctGeneralLedger]'
GO


CREATE   VIEW [dm_TS].[fctGeneralLedger] AS 
SELECT 
 gl.[GeneralLedgerID]
,gl.[AccountID]
,gl.[CustomerID]
,gl.[SupplierID]
,gl.[CompanyID]
,gl.[ProjectID]
,gl.[CostUnitID]
,gl.[CostBearerID]
,gl.[PartitionKey]
,gl.[Company]
,gl.[AccountNum]
,gl.[CostUnitNum]
,gl.[CostBearerNum]
,gl.[JournalType]
,gl.[JournalDate]
,gl.[JournalNum]
,gl.[JournalLine]
,gl.[AccountingDate]
,gl.[Description]
,gl.[Currency]
,gl.[ExchangeRate]
,gl.[InvoiceAmount]
,gl.[InvoiceAmountLC]
,gl.[CustomerNum]
,gl.[SupplierNum]
,gl.[SalesInvoiceNum]
,gl.[PurchaseInvoiceNum]
,gl.[SupplierInvoiceNum]
,gl.[LinkToOriginalInvoice]
,gl.[DeliveryCountry]
,gl.[TransactionNum]
,gl.[VATCode]
,gl.[VATCodeDesc]
,gl.[GLRes1]
,gl.[GLRes2]
,gl.[GLRes3]
  FROM [dm].[FactGeneralLedger] as gl
WHERE Company  IN ('FESFORA', 'FSEFORA', 'FFRFORA', 'FORPL', 'CERPL', 'FFRGPI', 'FFRLEX', 'IFIWIDN', 'IEEWIDN', 'TMTFI', 'TMTEE', 'FITMT', 'EETMT', 'ABKSE', 'ROROSE','STESE')
GO
PRINT N'Creating [stage].[CER_FI_SOLine]'
GO
CREATE TABLE [stage].[CER_FI_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (100) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [varchar] (50) NULL,
[OrderLine] [varchar] (50) NULL,
[OrderSubLine] [varchar] (50) NULL,
[InvoiceNum] [varchar] (50) NULL,
[InvoiceLine] [varchar] (50) NULL,
[CreditMemo] [varchar] (50) NULL,
[PartNum] [varchar] (50) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[CostCenter] [nvarchar] (50) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[WarehouseCode] [varchar] (50) NULL,
[Indexkey] [varchar] (50) NULL,
[Site] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[ReturnComment] [nvarchar] (max) NULL,
[ReturnNum] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_FI_SOLine]'
GO




CREATE VIEW [stage].[vCER_FI_SOLine] AS
--COMMENT EMPTY FIELD // ADD TRIM() INTO CustomerID,PartID,WarehouseID 2022-12-20 VA
--CHANGE SALAES LEDGER ID 23-02-24 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', Indexkey))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company,'#',OrderNum,'#',OrderLine,'#',InvoiceNum))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum), '#', TRIM(InvoiceNum))))) AS SalesLedgerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum), '#', InvoiceNum)))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum)))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID 
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) ))))) AS PartID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', WarehouseCode))) AS WarehouseID
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine),'#',InvoiceNum )) AS SalesOrderCode
	--,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) ))) AS SalesOrderCode
	,CONCAT(Company, '#', InvoiceNum, '#', InvoiceLine) AS SalesInvoiceCode --Redundant?
	,CONVERT(int, replace(convert(date,InvoiceDate),'-','')) AS SalesInvoiceDateID   -- Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey

	,UPPER(TRIM(Company)) AS Company
	,TRIM(SalesPerson) AS SalesPersonName
	,UPPER(TRIM(CustNum)) AS CustomerNum 
	,UPPER(TRIM(PartNum)) AS PartNum
	--,UPPER(TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum))) AS CustomerNum 
	--,UPPER(TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) )) AS PartNum
	,IIF(OrderSubLine = '000000',  'Main',  'Sub' ) AS PartType
	,TRIM(OrderNum) AS SalesOrderNum
	,TRIM(OrderLine) AS SalesOrderLine
	,TRIM(OrderSubLine) AS SalesOrderSubLine
	,TRIM(OrderType)	AS SalesOrderType
	,TRIM(InvoiceNum)	AS SalesInvoiceNum
	,TRIM(InvoiceLine) AS SalesInvoiceLine
	--,'' AS SalesInvoiceType
	,CONVERT(date, InvoiceDate) AS SalesInvoiceDate
	,ActualDeliveryDate	AS ActualDelivDate
	,SellingShipQty	AS SalesInvoiceQty
	--,'' AS UoM
	,UnitPrice
	,UnitCost
	,CONVERT(decimal (18,4), IIF(SellingShipQty*UnitPrice = 0, 0, DiscountAmount/SellingShipQty*UnitPrice)) AS DiscountPercent
	,DiscountAmount
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	,TotalMiscChrg
	--,NULL AS VATAmount
	,Currency
	,ExchangeRate
	,CreditMemo
	--,'' AS SalesChannel
	--,'' AS Department
	,TRIM(WarehouseCode) AS WarehouseCode
	--,NULL AS DeliveryAddress
	--,'' AS CostBearerNum
	,CostCenter AS CostUnitNum --added after Vera T ticket #SR-95348 /DZ 20230215
	,ReturnComment
	,TRIM(ReturnNum) AS ReturnNum
	--,'' AS ProjectNum
	,IndexKey
	--,'' AS SIRes1
	--,'' AS SIRes2
	--,'' AS SIRes3
FROM 
	stage.CER_FI_SOLine AS SO
GROUP BY
	PartitionKey, Company, SalesPerson, CustNum, PartNum, OrderNum, OrderLine, OrderSubLine, OrderType, InvoiceNum, InvoiceLine, InvoiceDate, SellingShipQty, UnitPrice, UnitCost, DiscountAmount, TotalMiscChrg, WarehouseCode, CreditMemo, ActualDeliveryDate, Currency, ExchangeRate, Indexkey, ReturnComment, ReturnNum, CostCenter
GO
PRINT N'Creating [dm_DS].[dimCustomerAgreement]'
GO
CREATE VIEW [dm_DS].[dimCustomerAgreement] AS
SELECT ca.[CompanyID]
,ca.[CustomerID]
,ca.[PartID]
,ca.[CurrencyID]
,ca.[Company]
,ca.[CustomerNum]
,ca.[PartNum]
,ca.[AgreementCode]
,ca.[AgreementDescription]
,ca.[DiscountPercent]
,ca.[UnitPrice]
,ca.[AgreementQty]
,ca.[Currency]
,ca.[DelivTime]
,ca.[AgreementStart]
,ca.[AgreementEnd]
,ca.[CustomerTerms]
,ca.[FulfilledQty]
,ca.[RemainingQty]
,ca.[UoM]
,ca.[PartitionKey]
,ca.[ExchangeRate]
FROM [dm].[DimCustomerAgreement] ca
LEFT JOIN dbo.Company com ON ca.Company = com.Company
WHERE com.BusinessArea = 'Driveline Solutions' AND com.[Status] = 'Active'


--WHERE [Company] in ('AFISCM', 'CDKCERT', 'CEECERT', 'CFICERT', 'CLTCERT', 'CLVCERT', 'CSECERT', 'CUKCERT', 'CNOEHAU', 'CNOCERT', 'CERPL', 'CyESA', 'HFIHAKL', 'TRACLEV',
--'MENBE14','MENNL01','MENNL02','MENNL03','MENNL04','MENNL07','MENNL11')
GO
PRINT N'Creating [stage].[AXI_HQ_GeneralLedger_Sharepoint]'
GO
CREATE TABLE [stage].[AXI_HQ_GeneralLedger_Sharepoint]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (8) NOT NULL,
[AccountNum] [nvarchar] (50) NULL,
[CostUnitNum] [nvarchar] (50) NULL,
[CostBearerNum] [nvarchar] (50) NULL,
[JournalType] [nvarchar] (50) NULL,
[JournalDate] [date] NULL,
[JournalNum] [nvarchar] (50) NULL,
[JournalLine] [nvarchar] (50) NULL,
[AccountingDate] [date] NULL,
[Description] [nvarchar] (500) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[InvoiceAmount] [decimal] (18, 4) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[SalesInvoiceNum] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[SupplierInvoiceNum] [nvarchar] (50) NULL,
[LinkToOriginalInvoice] [nvarchar] (500) NULL,
[DeliveryCountry] [nvarchar] (100) NULL,
[TransactionNum] [nvarchar] (50) NULL,
[VATCode] [nvarchar] (50) NULL,
[VATCodeDesc] [nvarchar] (500) NULL,
[GLRes1] [nvarchar] (100) NULL,
[GLRes2] [nvarchar] (100) NULL,
[GLRes3] [nvarchar] (100) NULL,
[InvoiceAmountLC] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vAXI_HQ_GeneralLedger]'
GO







CREATE VIEW [stage].[vAXI_HQ_GeneralLedger] AS
SELECT 
		CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', [TransactionNum], '#', JournalNum,'#', JournalLine,'#', JournalType ))) AS GeneralLedgerID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', AccountNum ))) AS AccountID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', RIGHT('000000' + CostUnitNum,6) ))) AS CostUnitID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', CostBearerNum ))) AS CostBearerID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', [SupplierNum] ))) AS SupplierID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', [CustomerNum] ))) AS CustomerID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', '' ))) AS ProjectID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',Company)) AS CompanyID
	  ,CONVERT(varchar, GETDATE(), 23) AS PartitionKey

      ,[Company]
      ,[AccountNum]
      ,RIGHT('000000' + CostUnitNum,6)	AS [CostUnitNum]
      ,[CostBearerNum]
      ,[JournalType]
      ,[JournalDate]
      ,[JournalNum]
      ,[JournalLine]
      ,[AccountingDate]
      ,[Description]
      ,IIF([ExchangeRate] = 1, 'SEK', [Currency]) AS [Currency]
      ,[ExchangeRate]
      ,[InvoiceAmount]
	  ,[InvoiceAmountLC]
      ,[CustomerNum]
      ,[SupplierNum]
      ,[SalesInvoiceNum]
      ,[PurchaseInvoiceNum]
      ,[SupplierInvoiceNum]
      ,[LinkToOriginalInvoice]
      ,[DeliveryCountry]
      ,[TransactionNum]
      ,[VATCode]
      ,[VATCodeDesc]
      ,[GLRes1]
      ,[GLRes2]
      ,[GLRes3]
  FROM [stage].[AXI_HQ_GeneralLedger]
  where UPPER(Company) = 'AXISE'

 
  union 

  select 
     CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', [TransactionNum], '#', JournalNum,'#', JournalLine,'#', JournalType ))) AS GeneralLedgerID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', AccountNum ))) AS AccountID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', RIGHT('000000' + CostUnitNum,6) ))) AS CostUnitID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', CostBearerNum ))) AS CostBearerID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', [SupplierNum] ))) AS SupplierID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', [CustomerNum] ))) AS CustomerID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', '' ))) AS ProjectID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',Company)) AS CompanyID
	  ,CONVERT(varchar, GETDATE(), 23) AS PartitionKey
      ,[Company]
      ,[AccountNum]
      ,RIGHT('000000' + CostUnitNum,6)	AS [CostUnitNum]
      ,[CostBearerNum]
      ,[JournalType]
      ,[JournalDate]
      ,[JournalNum]
      ,[JournalLine]
      ,[AccountingDate]
      ,[Description]
      ,IIF([ExchangeRate] = 1, 'SEK', [Currency]) AS [Currency]
      ,[ExchangeRate]
      ,[InvoiceAmount]
	  ,[InvoiceAmountLC]
      ,[CustomerNum]
      ,[SupplierNum]
      ,[SalesInvoiceNum]
      ,[PurchaseInvoiceNum]
      ,[SupplierInvoiceNum]
      ,[LinkToOriginalInvoice]
      ,[DeliveryCountry]
      ,[TransactionNum]
      ,[VATCode]
      ,[VATCodeDesc]
      ,[GLRes1]
      ,[GLRes2]
      ,[GLRes3]

from [stage].[AXI_HQ_GeneralLedger_Sharepoint]
GO
PRINT N'Creating [stage].[NOM_FI_Supplier]'
GO
CREATE TABLE [stage].[NOM_FI_Supplier]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[MainSupplierName] [nvarchar] (100) NULL,
[SupplierName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[AddressLine3] [nvarchar] (100) NULL,
[City] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[TelephoneNum] [nvarchar] (50) NULL,
[Email] [nvarchar] (100) NULL,
[District] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (100) NULL,
[Region] [nvarchar] (50) NULL,
[SupplierCategory] [nvarchar] (50) NULL,
[SupplierResponsible] [nvarchar] (100) NULL,
[AccountNum] [nvarchar] (50) NULL,
[VATNum] [nvarchar] (50) NULL,
[OrganisationNum] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[CodeOfConduct] [nvarchar] (50) NULL,
[SupplierScore] [nvarchar] (50) NULL,
[MinOrderQty] [decimal] (18, 4) NULL,
[MinOrderValue] [decimal] (18, 4) NULL,
[Website] [nvarchar] (100) NULL,
[Comments] [nvarchar] (max) NULL,
[SRes1] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vNOM_FI_Supplier]'
GO





CREATE VIEW [stage].[vNOM_FI_Supplier] AS

SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID
    ,UPPER(CONCAT([Company],'#',TRIM([SupplierNum]))) AS SupplierCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([SupplierNum])) AS SupplierNum
	,TRIM(MainSupplierName) AS MainSupplierName
	,TRIM(SupplierName) AS SupplierName
	,TRIM([AddressLine1]) AS AddressLine1
    ,TRIM([AddressLine2]) AS AddressLine2
    ,TRIM([AddressLine3]) AS AddressLine3
	,TRIM([TelephoneNum]) AS [TelephoneNum]
	,[Email]
	,TRIM(ZipCode) AS ZipCode
	,TRIM([City]) AS City
	,District
	,TRIM(CountryCode) AS CountryCode
	,TRIM(CountryName) AS CountryName
	,[Region] 
	,TRIM([SupplierCategory]) AS SupplierCategory 
	,TRIM(SupplierResponsible) AS SupplierResponsible
	,IIF(AddressLine1 = '', TRIM([AddressLine2]), TRIM([AddressLine1])) AS AddressLine
	,Concat(TRIM(CountryName), ', ', TRIM([City]), ', ', TRIM(ZipCode), ', ', IIF(AddressLine1 = '', TRIM([AddressLine2]), TRIM([AddressLine1]))) AS FullAddressLine
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [AccountNum])) AS [AccountNum]
	,[VATNum]
	,OrganisationNum as OrganizationNum
	,InternalExternal AS InternalExternal
	,[CodeOfConduct]
	,'' AS CustomerNum
	,TRIM(SupplierScore) AS SupplierScore
	,[MinOrderQty]
	,MinOrderValue	
	,[Website]
	,TRIM(Comments) AS Comments
	,SRes1
	--,'' AS SRes2
	--,'' AS SRes3
FROM [stage].[NOM_FI_Supplier]
/*GROUP BY 
      [PartitionKey],[Company],[SupplierNum],[SupplierName],[AddressLine1],[AddressLine2],[AddressLine3],[City],[ZIP],[Region],[CountryName]
	  ,[SupplierCategory],[Reference],[BankAccountNum],[VATNum],[SupplierABC],[CustomerCode],[TelephoneNum],[Email],[Website],[CodeOfConduct]
	  ,[MinOrderQty],[InternalName],[Comment] */
GO
PRINT N'Creating [audit].[IndexMaintenance]'
GO
CREATE TABLE [audit].[IndexMaintenance]
(
[Date] [date] NOT NULL,
[TableSchema] [varchar] (15) NOT NULL,
[TableName] [varchar] (80) NOT NULL,
[IndexName] [varchar] (100) NOT NULL,
[SecDuration] [int] NOT NULL,
[Succeeded] [bit] NOT NULL
)
GO
PRINT N'Creating [audit].[IndexMaintenanceLog]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE PROCEDURE [audit].[IndexMaintenanceLog]
	@debug bit = 0
AS
	-- Declarar las variables necesarias para el cursor
	DECLARE 
	 @SqlStatement	varchar(2000)
	,@StartTime		datetime
	,@EndTime		datetime
	,@Schema		varchar(15)
	,@TableName		varchar(50)
	,@IndexName		varchar(100)
	-- ... (Declarar variables para cada columna que necesitas)

	-- Declarar el cursor
	DECLARE iterator CURSOR FOR

	SELECT TOP 15

	--DDIPS.avg_fragmentation_in_percent,
	--DDIPS.page_count,
	CASE WHEN cast(DDIPS.avg_fragmentation_in_percent as float) <= 30.00 THEN  CONCAT('ALTER INDEX ',I.name,' ON ',S.name,'.',T.name,' REORGANIZE;')
	ELSE CONCAT('ALTER INDEX ',I.name,' ON ',S.name,'.',T.name,' REBUILD;') END AS Statement,
	S.name as 'Schema',
	T.name as 'Table',
	I.name as 'Index'
	FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL, NULL, NULL) AS DDIPS
	INNER JOIN sys.tables T on T.object_id = DDIPS.object_id
	INNER JOIN sys.schemas S on T.schema_id = S.schema_id
	INNER JOIN sys.indexes I ON I.object_id = DDIPS.object_id
	AND DDIPS.index_id = I.index_id
	WHERE DDIPS.database_id = DB_ID()
	and I.name is not null
	AND DDIPS.avg_fragmentation_in_percent > 5
	and S.name =  'dw'
	ORDER BY DDIPS.avg_fragmentation_in_percent desc

	-- Abrir el cursor
	OPEN iterator

	-- Recuperar el primer registro
	FETCH NEXT FROM iterator INTO @SqlStatement, @Schema, @TableName, @IndexName

	-- Iniciar el bucle para iterar sobre los registros
	WHILE @@FETCH_STATUS = 0
	BEGIN
		-- Aquí puedes hacer lo que necesites con los valores de cada registro
		-- Por ejemplo, imprimirlos, realizar cálculos, etc.
		begin try
			set @StartTime = GETDATE()
			if @debug = 1
			begin
				print(@SqlStatement)
			end
			else
			begin
				exec(@SqlStatement);
			end
			set @EndTime = GETDATE()

			if @debug = 0
			begin
				INSERT INTO audit.IndexMaintenance (Date, TableSchema, TableName, IndexName, SecDuration, Succeeded)
				VALUES (CAST(@StartTime AS DATE), @Schema, @TableName, @IndexName, DATEDIFF(SECOND, @StartTime, @EndTime), 1)
			end
		end try
		begin catch
			set @EndTime = GETDATE()

			if @debug = 0
			begin
				INSERT INTO audit.IndexMaintenance (Date, TableSchema, TableName, IndexName, SecDuration, Succeeded)
				VALUES (CAST(@StartTime AS DATE), @Schema, @TableName, @IndexName, DATEDIFF(SECOND, @StartTime, @EndTime), 0)
			end
		end catch
		-- ...

		-- Recuperar el siguiente registro
		FETCH NEXT FROM iterator INTO @SqlStatement, @Schema, @TableName, @IndexName
	END

	-- Cerrar el cursor
	CLOSE iterator

	-- Liberar los recursos del cursor
	DEALLOCATE iterator
GO
PRINT N'Creating [stage].[JEN_NB_PurchaseInvoice]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[JEN_NB_PurchaseInvoice]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[LineType] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaserName] [nvarchar] (100) NULL,
[OrderType] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[InvoiceType] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[PurchaseInvoiceQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CreditMemo] [nvarchar] (1) NULL,
[WarehouseCode] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vJEN_NB_PurchaseInvoice]'
GO

CREATE VIEW [stage].[vJEN_NB_PurchaseInvoice] AS
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT 
	--CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(InvoiceNum), '#', PurchaseShipQty, '#', ActualDeliveryDate, '#', TRIM([PartNum]) )))) AS PurchaseInvoiceID
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(InvoiceNum), '#', TRIM([PartNum]) )))) AS PurchaseInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(PurchaseOrderSubLine))))) AS PurchaseOrderID
	,UPPER(CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine))) AS PurchaseOrderCode
	,UPPER(CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(InvoiceNum))) AS PurchaseInvoiceCode
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierCode))))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierCode))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(InvoiceNum))))) AS PurchaseLedgerID
	,CONVERT(int, replace(InvoiceDate, '-', '')) AS PurchaseInvoiceDateID 
	,PartitionKey

	,UPPER(Company) AS Company
	,UPPER(TRIM([PartNum])) AS PartNum
	,UPPER(TRIM(SupplierCode)) AS SupplierNum
	,TRIM(PurchaseOrderNum) AS PurchaseOrderNum
	,TRIM(PurchaseOrderLine) AS PurchaseOrderLine
	,TRIM(PurchaseOrderSubLine) AS PurchaseOrderSubLine
	--,MIN(TRIM(OrderType)) AS PurchaseOrderType
	,TRIM(OrderType) AS PurchaseOrderType
	,TRIM(InvoiceNum) AS PurchaseInvoiceNum
	,InvoiceLine AS PurchaseInvoiceLine
	,InvoiceType AS PurchaseInvoiceType
	,InvoiceDate AS PurchaseInvoiceDate
	,MAX(ActualDeliveryDate) AS ActualDelivDate -- have to be sum/max/AVG because of partial deliveries
	--,MAX(PurchaseInvoiceQty) AS PurchaseInvoiceQty
	,SUM(PurchaseInvoiceQty) AS PurchaseInvoiceQty -- have to be sum/max/AVG because of partial deliveries
	,'' AS UoM
	,UnitPrice
	,NULL AS DiscountPercent
	,DiscountAmount
	,TotalMiscChrg
	,NULL AS VATAmount
	,AVG(ExchangeRate) AS ExchangeRate -- have to be sum/max/AVG because of partial deliveries
	,CurrencyCode AS Currency
	,TRIM(CreditMemo) AS CreditMemo
	,TRIM(PurchaserName) AS PurchaserName
	,TRIM(WarehouseCode) AS WarehouseCode
	,'' AS PurchaseChannel
	,'' AS Comment
	,'' AS PIRes1
	,'' AS PIRes2
	,'' AS PIRes3
	,LineType
	,'' AS OrderDelivLineNum --
FROM stage.JEN_NB_PurchaseInvoice

GROUP BY
	PartitionKey, Company, PurchaseOrderNum, InvoiceNum, SupplierCode, PartNum, PurchaserName, InvoiceLine, InvoiceType, InvoiceDate, UnitPrice, DiscountAmount, TotalMiscChrg, CreditMemo, WarehouseCode, CurrencyCode, LineType, PurchaseOrderLine , PurchaseOrderSubLine, OrderType
GO
PRINT N'Creating [stage].[MAK_NL_Part]'
GO
CREATE TABLE [stage].[MAK_NL_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartName] [nvarchar] (50) NULL,
[PartDescription] [nvarchar] (max) NULL,
[PartDescription2] [nvarchar] (max) NULL,
[PartDescription3] [nvarchar] (max) NULL,
[DescLineNr] [int] NULL,
[ProductGroup] [nvarchar] (50) NULL,
[ProductGroup2] [nvarchar] (50) NULL,
[ProductGroup3] [nvarchar] (50) NULL,
[ProductGroup4] [nvarchar] (50) NULL,
[Brand] [nvarchar] (50) NULL,
[CommodityCode] [nvarchar] (50) NULL,
[PartNumReplacement] [nvarchar] (50) NULL,
[CountryOfOrigin] [nvarchar] (50) NULL,
[NetWeight] [decimal] (18, 4) NULL,
[Material] [nvarchar] (50) NULL,
[ReorderLevel] [decimal] (18, 4) NULL,
[Barcode] [nvarchar] (50) NULL,
[Startdate] [nvarchar] (50) NULL,
[Enddate] [nvarchar] (50) NULL,
[Unit] [nvarchar] (50) NULL,
[UoM] [nvarchar] (50) NULL,
[Volume] [nvarchar] (50) NULL,
[StockMonitoring] [nvarchar] (50) NULL,
[Language] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[PrefSupplier] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vMAK_NL_Part]'
GO
CREATE view [stage].[vMAK_NL_Part] AS
--COMMENT empty fields / ADD UPPER()TRIM() INTO PartID 13-12-2022 VA
/****** First group by to collect all brands  ******/
WITH Part AS (

SELECT  [PartitionKey]
      ,[Company]
      ,[PartNum]
      ,[PartName]
      ,[PartDescription]
      ,[PartDescription2]
      ,[PartDescription3]
      ,[DescLineNr]
      ,[ProductGroup]
      ,[ProductGroup2]
      ,[ProductGroup3]
      ,[ProductGroup4]
      ,STRING_AGG([Brand],', ') WITHIN GROUP (Order BY Brand)	AS Brand
      ,[CommodityCode]
      ,[PartNumReplacement]
	  ,STRING_AGG(TRIM([CountryOfOrigin]),', ') WITHIN GROUP (Order BY Brand)	AS CountryOfOrigin
      ,[NetWeight]
     -- ,[Volume]
      ,[Material]
      ,[ReOrderLevel]
      ,[Barcode]
      ,CONVERT(date, [Startdate], 112 ) AS Startdate
      ,CASE WHEN [Enddate] = '0' THEN NULL ELSE CONVERT(date, [Enddate], 112 ) END	AS EndDate
      ,[UoM]
      ,[StockMonitoring]
      ,[Language]
      ,[PartStatus]
--      ,[PrefSupplier]
  FROM [stage].[MAK_NL_Part]
  GROUP BY 
    [PartitionKey], [Company], [PartNum], [PartName], [PartDescription], [PartDescription2], [PartDescription3], [DescLineNr]
      ,[ProductGroup], [ProductGroup2], [ProductGroup3], [ProductGroup4] /* ,[Brand] */, [CommodityCode], [PartNumReplacement] /*,[CountryOfOrigin]*/ ,[NetWeight] /*, [Volume]*/
      ,[Material], [ReorderLevel], [Barcode], [Startdate], [Enddate], [UoM], [StockMonitoring], [Language], [PartStatus] /*   ,[PrefSupplier]*/
	  )

	  /* Part description are split up into multiple rows. We group and concatenate it all to one row. */
SELECT
	  CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID 
	  ,CONVERT([binary](32),HASHBYTES('SHA2_256',Company)) AS CompanyID
	  ,CONCAT(Company, '#', PartNum) AS PartCode
	  ,[PartitionKey]

      ,[Company]
      ,[PartNum]
      ,[PartName]
      ,STRING_AGG(TRIM( [PartDescription]),' ') WITHIN GROUP (Order BY [DescLineNr])	AS [PartDescription]
      ,[PartDescription2]
      ,[PartDescription3]
	  --,NULL AS MainSupplier
	  --,NULL AS AlternativeSupplier
      ,CONCAT([ProductGroup],' - ', [ProductGroup2]) AS ProductGroup	--ProductGroupNum + Name
      ,[ProductGroup2]
      ,[ProductGroup3]
      ,[ProductGroup4]
      ,Brand
      ,[CommodityCode]
      ,[PartNumReplacement]	AS PartReplacementNum
	  ,[PartStatus]
	  ,CountryOfOrigin
      ,[NetWeight]
      ,[UoM]
      ,[Material]
      ,[Barcode]
	  ,[ReOrderLevel]
	  --,'' AS PartResponsible
      ,[StartDate]
      ,[EndDate]
      ,[StockMonitoring]
      ,[Language]
     
FROM Part
   GROUP BY
     [PartitionKey],[Company] ,[PartNum] ,[PartName] /* ,[PartDescription] */, [PartDescription2], [PartDescription3] /*   ,[DescLineNr] */
      ,[ProductGroup], [ProductGroup2], [ProductGroup3], [ProductGroup4], [Brand], [CommodityCode], [PartNumReplacement], [CountryOfOrigin], [NetWeight],
      /*[Volume],*/ [Material], [ReorderLevel], [Barcode], [Startdate], [Enddate], [UoM], [StockMonitoring], [Language], [PartStatus] /*  ,[PrefSupplier] */
GO
PRINT N'Creating [dnb].[UnspscCodes]'
GO
CREATE TABLE [dnb].[UnspscCodes]
(
[duns] [int] NULL,
[organization.unspscCodes.code] [nvarchar] (20) NULL,
[organization.unspscCodes.description] [nvarchar] (250) NULL,
[organization.unspscCodes.priority] [nvarchar] (10) NULL
)
GO
PRINT N'Creating [dnb].[numberOfEmployees]'
GO
CREATE TABLE [dnb].[numberOfEmployees]
(
[duns] [int] NOT NULL,
[organization.numberOfEmployees.informationScopeDescription] [nvarchar] (40) NULL,
[organization.numberOfEmployees.value] [int] NULL
)
GO
PRINT N'Creating [dnb].[InternalExcelCompanies]'
GO
CREATE TABLE [dnb].[InternalExcelCompanies]
(
[customerReference] [int] NULL,
[subsidiariesName] [nvarchar] (100) NULL,
[city] [nvarchar] (100) NULL,
[organizationNum] [nvarchar] (100) NULL,
[countryCode] [nvarchar] (100) NULL,
[DUNS] [int] NULL,
[confidenceCode] [int] NULL
)
GO
PRINT N'Creating [dnb].[Financials]'
GO
CREATE TABLE [dnb].[Financials]
(
[duns] [int] NULL,
[organization.financials.financialStatementToDate] [nvarchar] (100) NULL,
[organization.financials.yearlyRevenue.value] [nvarchar] (100) NULL,
[organization.financials.yearlyRevenue.currency] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [dnb].[dimUnspscHierarchy]'
GO
CREATE TABLE [dnb].[dimUnspscHierarchy]
(
[Level_1_Code] [nvarchar] (2) NOT NULL,
[Level_1_Description] [nvarchar] (1000) NOT NULL,
[Level_2_Code] [nvarchar] (4) NULL,
[Level_2_Description] [nvarchar] (1000) NULL,
[Level_3_Code] [nvarchar] (6) NULL,
[Level_3_Description] [nvarchar] (1000) NULL,
[Level_4_Code] [nvarchar] (8) NULL,
[Level_4_Description] [nvarchar] (1000) NULL
)
GO
PRINT N'Creating [dnb].[dimDnB]'
GO








CREATE view [dnb].[dimDnB]  as

select 
  concat(cast(master.[duns] as nvarchar(30)),' | ',TRIM(master.[organization.primaryName])) as Entity,									-- Entity
  cast(master.[duns] as nvarchar(30))														as Entity_DUNS,										-- Entity_DUNS
  master.[organization.primaryName]															as Entity_Name,								-- Entity_Name
  master.[organization.registeredName]														as Entity_Name_Registered,							-- Entity_Name_Registered

  master.[organization.legalForm.description] 												as LegalFormDescription,						-- LegalFormDescription
  master.[organization.registeredDetails.legalForm.description]								as LegalFormDescription_Registered,	-- LegalFormDescription_Registered
  case when LEN(TRIM(master.[organization.legalForm.startDate])) = 7 
	then cast(isnull(CONCAT(TRIM(master.[organization.legalForm.startDate]),'-01') ,'1900-01-01') as date)
	else cast(isnull(TRIM(master.[organization.legalForm.startDate]),'1900-01-01') as date)
	end																						as LegalFormStartDate,						-- LegalFormStartDate
--, master.[organization.legalForm.startDate]
  master.[organization.controlOwnershipType.description]									as ControlOwnershipDescription,			-- ControlOwnershipDescription

  case when LEN(TRIM(master.[organization.controlOwnershipDate])) = 7 
	then cast(isnull(CONCAT(TRIM(master.[organization.controlOwnershipDate]),'-01') ,'1900-01-01') as date)
	else cast(isnull(TRIM(master.[organization.controlOwnershipDate]),'1900-01-01') as date)
	end																						as ControlOwnershipDate,						-- ControlOwnershipDate
--, master.[organization.controlOwnershipDate]

  case when LEN(TRIM(financials.[organization.financials.financialStatementToDate])) = 7 
    then cast(isnull(CONCAT(TRIM(financials.[organization.financials.financialStatementToDate]),'-01') ,'1900-01-01') as date)
	else cast(isnull(TRIM(financials.[organization.financials.financialStatementToDate]),'1900-01-01') as date)
    end as FinancialStatementDate,																							-- FinancialStatementDate
  financials.[organization.financials.yearlyRevenue.currency] as FinancialCurrency,										-- FinancialCurrency
  convert(decimal(18),financials.[organization.financials.yearlyRevenue.value]) as FinancialRevenueFY,						-- FinancialRevenueFY

  --master.[organization.legalForm.registrationLocation.addressRegion]						as [legalForm.registrationLocation.addressRegion], -- THIS CAN BE EXCLUDED OR REMOVED

  master.[organization.primaryAddress.continentalRegion.name]								as Continent,		-- Continent
  master.[organization.primaryAddress.addressCountry.name]									as Country,		-- Country
  master.[organization.primaryAddress.addressRegion.name]									as State,			-- State
  master.[organization.primaryAddress.addressCounty.name]									as City,			-- City
  master.[organization.primaryAddress.addressLocality.name]									as PostalArea,		-- PostalArea
  master.[organization.primaryAddress.postalCode]											as PostalCode,					-- PostalCode
  master.[organization.primaryAddress]														as Address,							-- Address
  master.[organization.primaryAddress.latitude]												as Address_Latitude,					-- Address_Latitude
  master.[organization.primaryAddress.longitude]											as Address_Longitude,					-- Address_Longitude


  aux_2.Level_1_Description							as IndustrySegment_Level_1,					-- IndustrySegment_Level_1
  aux_2.Level_2_Description							as IndustrySegment_Level_2,					-- IndustrySegment_Level_2
  aux_2.Level_3_Description							as IndustrySegment_Level_3,					-- IndustrySegment_Level_3
  aux_2.Level_4_Description							as IndustrySegment_Level_4,					-- IndustrySegment_Level_4
  aux_2.Level_5_Description							as IndustrySegment_Level_5,					-- IndustrySegment_Level_5
  aux_1.[organization.industryCodes.code]			as IndustryCode,							-- IndustryCode
 
  --unspsc.[organization.unspscCodes.code]			as unspscCode,								-- THIS CAN BE EXCLUDED 
  --unspscHierarchy.Level_1_Description				as unspsc_Level_1,							-- THIS CAN BE EXCLUDED 
  --unspscHierarchy.Level_2_Description				as unspsc_Level_2,							-- THIS CAN BE EXCLUDED 
  --unspscHierarchy.Level_3_Description				as unspsc_Level_3,							-- THIS CAN BE EXCLUDED 
  --unspscHierarchy.Level_4_Description				as unspsc_Level_4,							-- THIS CAN BE EXCLUDED 

  

-- Special case to determine internal companies (SHOULD BE REMOVED AND THEN USE THE LEGAL COMPANY LIST OF OUR COMPANIES THAT IS JOINED IN AS INTERNAL)
 -- case when master.[organization.corporateLinkage.globalUltimate.duns] IN (416370278, 291803745, 260980537, 310094669) 
	--		  and [organization.corporateLinkage.parent.primaryName] IN ('Dagab Inköp & Logistik AB',
	--																	 'Axfood AB',
	--																	 'Novax Gym Holding AB',
	--																	 'Martin & Servera Logistik AB',
	--																	 'Datema AB') 
	--		  then  0
	--   when master.[organization.corporateLinkage.globalUltimate.duns] IN (416370278, 291803745, 260980537, 310094669) 
	--		  and [organization.primaryName] IN ('Martin & Servera AB') 
	--		  then  0	
	--   when master.[organization.corporateLinkage.globalUltimate.duns] IN (416370278, 291803745, 260980537, 310094669) 
	--		  then 1
	--else 0
 --  end as is_internal,
   CASE WHEN internal_companies.DUNS IS NULL THEN 0 ELSE 1 end as is_AxInterInternal,

  cast(master.[organization.corporateLinkage.globalUltimate.duns]	AS nvarchar(30))		as GlobalOwner_DUNS,				-- GlobalOwner_DUNS
  master.[organization.corporateLinkage.globalUltimate.primaryName] 						as GlobalOwner_Name,		-- GlobalOwner_Name
  cast(master.[organization.corporateLinkage.domesticUltimate.duns] AS nvarchar(30))		as DomesticOwner_DUNS,				-- DomesticOwner_DUNS
  master.[organization.corporateLinkage.domesticUltimate.primaryName] 						as DomesticOwner_Name,		-- DomesticOwner_Name

  cast(master.[organization.corporateLinkage.parent.duns] 		AS nvarchar(30))			as ParentEntity_DUNS,						-- ParentEntity_DUNS
  master.[organization.corporateLinkage.parent.primaryName] 								as ParentEntity_Name,				-- ParentEntity_Name
  cast(master.[organization.corporateLinkage.headQuarter.duns] AS nvarchar(30))				as Headquarter_DUNS,					-- Headquarter_DUNS
  master.[organization.corporateLinkage.headQuarter.primaryName]							as Headquarter_Name,			-- Headquarter_Name

  master.[organization.corporateLinkage.role] as CorporateHierarchyRole,															-- CorporateHierarchyRole
  try_CAST([organization.corporateLinkage.hierarchyLevel] as decimal(4,0)) as CorporateHierarchyLevel,					-- CorporateHierarchyLevel
  case when HoldingCompanies.duns IS not null then 1
	else 0
    end as is_HoldingCompany,																										-- is_HoldingCompany

  master.[organization.isStandalone] as is_Standalone																				-- is_Standalone
, cast(employees.[organization.numberOfEmployees.value] as int) as NumberOfEmployees
, case when master.[organization.dunsControlStatus.operatingStatus.description] IS NULL then 'Missing Status' 
	else [organization.dunsControlStatus.operatingStatus.description]
	end as OperatingStatus

from dnb.MasterTable as master

LEFT JOIN (
	select 
	duns,
	[organization.industryCodes.code]
	from dnb.IndustryCodes
	where [organization.industryCodes.typeDnBCode] is not null
	and [organization.industryCodes.typeDnBCode] = '3599'
	and [organization.industryCodes.priority] = '1'
) AS aux_1 
	on master.duns = aux_1.duns
LEFT JOIN dnb.dimIndustryCode_3599_Hierarchy AS aux_2
	on aux_1.[organization.industryCodes.code] = aux_2.Level_5_Code
LEFT JOIN dnb.UnspscCodes as unspsc
	on master.duns = unspsc.duns
	and cast(unspsc.[organization.unspscCodes.priority] as int) = 1
left join dnb.dimUnspscHierarchy as unspscHierarchy
	on unspsc.[organization.unspscCodes.code] = unspscHierarchy.Level_4_Code
left join dnb.Financials as financials
	on master.duns = financials.duns
	and financials.[organization.financials.yearlyRevenue.currency] = 'USD'
LEFT JOIN (
	select distinct duns
	from dnb.IndustryCodes
	where [organization.industryCodes.code] = '67120000' 
	or [organization.industryCodes.code] = '67190000'
) as HoldingCompanies
	on master.duns = HoldingCompanies.duns
LEFT JOIN (select distinct DUNS
from dnb.InternalExcelCompanies
where DUNS is not null)
as internal_companies
	on internal_companies.DUNS = master.duns
LEFT JOIN (
select 
  duns
, ROW_NUMBER() over (partition by duns order by [organization.numberOfEmployees.informationScopeDescription] desc) as rn
--, [organization.numberOfEmployees.informationScopeDescription]
, [organization.numberOfEmployees.value]
from dnb.numberOfEmployees
) as employees
	on master.duns = employees.duns and employees.rn = 1
--where internal_companies.DUNS is not null
;
GO
PRINT N'Creating [stage].[NOM_FI_StockBalance]'
GO
CREATE TABLE [stage].[NOM_FI_StockBalance]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[Currency] [nvarchar] (10) NULL,
[BinNum] [nvarchar] (12) NULL,
[BatchNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (70) NOT NULL,
[LastStockTakeDate] [nvarchar] (50) NULL,
[LastStdCostDate] [nvarchar] (50) NULL,
[MaxStockQty] [nvarchar] (50) NULL,
[StockBalance] [decimal] (18, 4) NULL,
[StockValue] [decimal] (18, 4) NULL,
[ManualReservations] [decimal] (18, 4) NULL,
[ReserveQty] [nvarchar] (50) NULL,
[BackOrderQty] [decimal] (18, 4) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[StockTakeDiff] [decimal] (18, 4) NULL,
[ReOrderLevel] [decimal] (18, 4) NULL,
[SafetyStock] [decimal] (18, 4) NULL,
[OptimalOrderQty] [decimal] (18, 4) NULL,
[AvgCost] [decimal] (18, 4) NULL,
[DelivTime] [nvarchar] (50) NULL,
[SBRes1] [nvarchar] (50) NULL,
[SBRes2] [nvarchar] (50) NULL,
[SBRes3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vNOM_FI_StockBalance]'
GO
CREATE VIEW [stage].[vNOM_FI_StockBalance] AS
--ADD TRIM() INTO PartID 2022-12-15 VA
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT([Company],'#',TRIM([PartNum]),'#',TRIM([WarehouseCode]))))) AS ItemWarehouseID
	,TRIM(WarehouseCode) AS WarehouseCode
	,UPPER(CONCAT([Company],'#',TRIM([PartNum]),'#',TRIM([WarehouseCode]))) AS ItemWarehouseCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER([Company]))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT([Company],'#',TRIM([SupplierNum]))))) AS SupplierID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT([Company],'#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey

	,UPPER(Company) AS Company
	,CASE WHEN TRIM(BinNum) like '' OR BinNum like ' ' THEN NULL ELSE TRIM(BinNum) END AS BinNum
	,TRIM(BatchNum) AS BatchNum
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,[DelivTime]-- convert to days
	,IIF(LastStockTakeDate = 0, '1900-01-01', CONVERT(date, LastStockTakeDate)) AS LastStockTakeDate
	,IIF(LastStdCostDate = 0,  '1900-01-01', CONVERT(date, LastStdCostDate)) AS LastStdCostCalDate
	,TRIM(Currency) AS Currency
	,SafetyStock
	,ManualReservations AS MaxStockQty
	,StockBalance
	,StockValue
	,AvgCost
	,ReserveQty
	,BackOrderQty
	,OrderQty
	,StockTakeDiff
	,ReOrderLevel
	,OptimalOrderQty
	,SBRes1
	,SBRes2
	,SBRes3
FROM 
	[stage].[NOM_FI_StockBalance]
GO
PRINT N'Creating [dm_DS].[fctPurchaseLedger]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [dm_DS].[fctPurchaseLedger]
	AS 

	SELECT 
 pl.[PurchaseLedgerID]
,pl.[Company]
,pl.[SupplierNum]
,pl.[PurchaseOrderNum]
,pl.[PurchaseInvoiceNum]
,pl.[PurchaseInvoiceDate]
,pl.[PurchaseDueDate]
,pl.[PurchaseLastPaymentDate]
,pl.[InvoiceAmount]
,pl.[ExchangeRate]
,pl.[Currency]
,pl.[VATAmount]
,pl.[VATCode]
,pl.[PayToName]
,pl.[PayToCity]
,pl.[PayToContact]
,pl.[PaymentTerms]
,pl.[PrePaymentNum]
,pl.[LastPaymentNum]
,pl.[PLRes1]
,pl.[PLRes2]
,pl.[PLRes3]
,pl.[PurchaseLedgerCode]
,pl.[CompanyID]
,pl.[SupplierID]
,pl.[PurchaseInvoiceID]
,pl.[PurchaseOrderNumID]
,pl.[CurrencyID]
,pl.[PurchaseInvoiceDateID]
,pl.[PartitionKey]
,pl.[PaidInvoiceAmount]
,pl.[RemainingInvoiceAmount]
,pl.[AccountingDate]
,pl.[AgingPeriod]
,pl.[AgingSort]
,pl.[VATCodeDesc]
,pl.[LinkToOriginalInvoice]
FROM [dm].[FactPurchaseLedger]  as pl
LEFT JOIN dbo.Company com ON pl.Company = com.Company
WHERE com.BusinessArea = 'Driveline Solutions' AND com.[Status] = 'Active'
GO
PRINT N'Creating [stage].[SCM_FI_StockBalance]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[SCM_FI_StockBalance]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PartNum] [nvarchar] (70) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[StockBalance] [decimal] (18, 4) NULL,
[ReservedQty] [decimal] (18, 4) NULL,
[BackOrderQty] [decimal] (18, 4) NULL,
[QtyOrdered] [decimal] (18, 4) NULL,
[OptimalOrderQty] [decimal] (18, 4) NULL,
[ReOrderLevel] [decimal] (18, 4) NULL,
[StockTakDiff] [decimal] (18, 4) NULL,
[DelivTimeToWHS] [int] NULL,
[DefaultBinNo] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[StockTakDate] [date] NULL,
[DelivDateSupplier] [date] NULL,
[DelivDateCust] [date] NULL,
[BatchNoPrefix] [nvarchar] (50) NULL,
[BatchNoSuffix] [nvarchar] (50) NULL,
[BatchNumber] [nvarchar] (50) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[BatchQty] [decimal] (18, 4) NULL,
[MaxStockQty] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vSCM_FI_StockBalance]'
GO


CREATE VIEW [stage].[vSCM_FI_StockBalance] AS
--COMMENT EMPTY FIELDS // ADD UPPER()TRIM() INTO PartID 2022-12-21 VA
--ADD TRIM() UPPER() INTO SupplierID 23-01-24 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', TRIM([PartNum]), '#', TRIM([WarehouseCode]) , '#', TRIM(BatchNumber)))) AS ItemWarehouseID
	,TRIM([WarehouseCode]) AS WarehouseCode
	,CurrencyCode AS Currency
	,CONCAT([Company], '#', TRIM([PartNum]), '#', TRIM([WarehouseCode])) AS ItemWarehouseCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]), '#', TRIM([PartNum]))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', TRIM([PartNum])))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [Company])) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]), '#', TRIM([SupplierNum]))))) AS SupplierID 
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', TRIM([SupplierNum])))) AS SupplierID -- var '0000000'
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,[PartitionKey]

	,[Company]
	,TRIM(DefaultBinNo) AS BinNum
	,TRIM(BatchNumber) AS [BatchNum]
	,TRIM([SupplierNum]) AS [SupplierNum]
	,TRIM([PartNum]) AS PartNum
	--,NULL AS [DelivTime]
	,CONVERT(date, [StockTakDate]) AS [LastStockTakeDate]
	,CONVERT(date, '1900-01-01') AS [LastStdCostCalDate]
	--,NULL AS [SafetyStock]
	,MaxStockQty
	,[StockBalance]
	--,NULL AS [StockValue]
	--,0 AS AvgCost
	,[ReservedQty] AS [ReserveQty]
	,[BackOrderQty]
	,[QtyOrdered] AS [OrderQty]
	,[StockTakDiff] AS [StockTakeDiff]
	,MAX([ReOrderLevel]) AS [ReOrderLevel]
	--,NULL AS [OptimalOrderQty]
	--,'' AS [SBRes1]
	--,'' AS [SBRes2]
	--,'' AS [SBRes3]
FROM 
	[stage].[SCM_FI_StockBalance]
GROUP BY
	[PartitionKey],[Company],[PartNum],[WarehouseCode],[StockBalance],[ReservedQty],[BackOrderQty],[QtyOrdered],[StockTakDiff],DefaultBinNo,[SupplierNum], [StockTakDate],BatchNumber,MaxStockQty,CurrencyCode
GO
PRINT N'Creating [stage].[AXL_CZ_OLine]'
GO
CREATE TABLE [stage].[AXL_CZ_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[NeedbyDate] [date] NULL,
[ExpDelivDate] [date] NULL,
[EDCExpDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (10) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[SalesPerson] [nvarchar] (50) NULL,
[WareHouseCode] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[BusinessChain] [nvarchar] (50) NULL,
[SalesOrderCategory] [nvarchar] (100) NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL,
[PartDesc] [nvarchar] (max) NULL,
[APV_Cost_EUR] [nvarchar] (50) NULL,
[APV_Item] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXL_CZ_OLine]'
GO
CREATE VIEW [stage].[vAXL_CZ_OLine] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(PartDesc))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum), '#', (IIF(TRIM([PartNum]) LIKE 'IACO%' , 'MISC. CHARGES', TRIM(PartDesc) )) )))) AS PartID
	,CONVERT(int, replace(convert(date, OrderDate), '-', '')) AS SalesOrderDateID
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine))) AS SalesOrderCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(CustNum) AS CustomerNum 
	,TRIM(OrderNum) AS [SalesOrderNum]
	,TRIM(OrderLine) AS [SalesOrderLine]
	,TRIM(OrderSubLine) AS [SalesOrderSubLine]
	,CONVERT(nvarchar(50), TRIM(OrderType)) AS [SalesOrderType]
	,TRIM([SalesOrderCategory]) AS [SalesOrderCategory]
	,OrderDate AS [SalesOrderDate]
	,NeedbyDate
	,ExpDelivDate AS [ExpDelivDate]
	,EDCExpDelivDate
	,ActualDelivDate
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,OrderQty AS [SalesOrderQty]
	,DelivQty
	,RemainingQty
	,Unit AS [UoM]
	,UnitPrice
	,UnitCost
	,LEFT(TRIM(Currency), 3) AS Currency
	,ExchangeRate
	,LEFT(TRIM(OpenRelease), 1) AS OpenRelease
	,DiscountAmount
	,DiscountPercent
	,NULL AS CashDiscOffered
	,NULL AS CashDiscUsed
	,TRIM(PartNum) AS PartNum
	,UPPER(PartDesc) AS PartDesc
	,'' AS [PartType]
	,CONVERT(nvarchar(50), PartStatus) AS PartStatus
	,TRIM(SalesPerson) AS [SalesPersonName]
	,TRIM(WareHouseCode) AS WarehouseCode
	,'' AS IndexKey
	,TRIM(SalesChannel) AS SalesChannel
	,TRIM(BusinessChain) AS [Department]
	,Res3 AS [ProjectNum] -- = FreeOfCharge: Y = yes, N = no
	,'' AS Cancellation
	,Res1 AS SORes1
	,Res2 AS SORes2
	,Res3 AS SORes3
FROM stage.AXL_CZ_OLine
WHERE OrderDate >= '2015-01-01'
GO
PRINT N'Creating [stage].[LEX_FR_SalesLedger]'
GO
CREATE TABLE [stage].[LEX_FR_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustomerNum] [nvarchar] (10) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL
)
GO
PRINT N'Creating [stage].[vLEX_FR_SalesLedger]'
GO
CREATE VIEW [stage].[vLEX_FR_SalesLedger] AS 
--COMMENT EMPTY FIELDS / ADD UPPER()TRIM() CustomerID 2022-12-14 VA
SELECt
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustomerNum), '#', TRIM(InvoiceNum)))) AS SalesLedgerID
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustomerNum), '#', TRIM(InvoiceNum)))) AS SalesLedgerID --SOLine
	,CONCAT(Company, '#', TRIM(CustomerNum), '#', TRIM(InvoiceNum)) AS SalesLedgerCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustomerNum)))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,PartitionKey

	,Company
	,TRIM(CustomerNum) AS CustomerNum
	,TRIM(InvoiceNum) AS SalesInvoiceNum
	,CONVERT(date, InvoiceDate) AS [SalesInvoiceDate]
	,CONVERT(date, DueDate) AS SalesDueDate
	,CONVERT(date, DueDate) AS SalesLastPaymentDate -- 20210906 /DZ. before CONVERT(date, LastPaymentDate) AS LastPaymentDate, if it is NULL, the in DM stage it gives bias results -- no LatPaymentdate, work around
	--,NULL AS [InvoiceAmount]
	--,NULL AS [RemainingInvoiceAmount]
	,1 AS [ExchangeRate]
	,'EUR' AS [Currency]
	--,NULL AS [VATAmount]
	--,'' AS [VATCode]
	--,'' AS [PayToName]
	--,'' AS [PayToCity]
	--,'' AS [PayToContact]
	--,'' AS [PaymentTerms]
	--,'' AS SLRes1
	--,'' AS SLRes2
	--,'' AS SLRes3
	--,NULL			AS PaidInvoiceAmount
	,'1900-01-01' AS AccountingDate
	--,'' AS AgingPeriod
	--,'' AS AgingSort
	--,'' AS VATCodeDesc
	--,'' AS LinkToOriginalInvoice
FROM 
	stage.LEX_FR_SalesLedger
GO
PRINT N'Creating [stage].[ARK_PI_ProductionOrder]'
GO
CREATE TABLE [stage].[ARK_PI_ProductionOrder]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[ProductionOrderNum] [nvarchar] (50) NOT NULL,
[ProductionOrderLineNum] [nvarchar] (50) NULL,
[ProductionOrderSubLineNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[Version] [nvarchar] (50) NULL,
[UoM] [nvarchar] (50) NULL,
[PartType] [nvarchar] (50) NULL,
[OrderQuantity] [nvarchar] (50) NULL,
[ScrappedQty] [nvarchar] (50) NULL,
[CompletedQuantity] [nvarchar] (50) NULL,
[RemainingQty] [nvarchar] (50) NULL,
[Status] [nvarchar] (50) NULL,
[CurrentOperationStage] [nvarchar] (50) NULL,
[CurrentResourceGroup] [nvarchar] (50) NULL,
[OrderCreateDate] [nvarchar] (50) NULL,
[RequestedEndDate] [nvarchar] (50) NULL,
[PlannedStartDate] [nvarchar] (50) NULL,
[PlannedEndDate] [nvarchar] (50) NULL,
[StartDate] [nvarchar] (50) NULL,
[EndDate] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[TotalHoursPlanned] [nvarchar] (50) NULL,
[TotalHoursSpent] [nvarchar] (50) NULL,
[SetupHoursSpent] [nvarchar] (50) NULL,
[MaterialCost] [nvarchar] (50) NULL,
[LabourCost] [nvarchar] (50) NULL,
[OtherCost] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[BinNum] [nvarchar] (50) NULL,
[CostUnit] [nvarchar] (50) NULL,
[SalesOrderNum] [nvarchar] (50) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[ProductionOrderCreaterName] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vARK_PI_ProductionOrder]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vARK_PI_ProductionOrder] AS
 SELECT 
 
        CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(ProductionOrderNum), '#', TRIM(ProductionOrderLineNum), '#',TRIM(PartNum)))))  as [ProductionOrderID]
      ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) as CustomerID
	  ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) as CompanyID
	  ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID 
	  ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM(WarehouseCode))))) AS WarehouseID
	  ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SalesOrderNum))))) AS SalesOrderNumID  
	  ,[PartitionKey]                                  
      ,UPPER(TRIM([Company]))  AS     "Company"                                  
      ,UPPER(TRIM([ProductionOrderNum])) AS    "ProductionOrderNum"                    
      ,UPPER(TRIM([ProductionOrderLineNum]))  AS  "ProductionOrderLineNum"                 
      ,UPPER(TRIM([PartNum])) AS   "PartNum"                                 
      ,[Uom]                                        
      ,[PartType]
      ,IIF(PartType = 'Component',-1 * CONVERT(decimal(18,4), Replace(OrderQuantity, ',', '.')), CONVERT(decimal(18,4), Replace(OrderQuantity, ',', '.'))) AS "OrderQuantity"
      ,IIF(PartType = 'Component',-1* CONVERT(decimal(18,4), Replace(ScrappedQty, ',', '.')),CONVERT(decimal(18,4), Replace(ScrappedQty, ',', '.'))) AS "ScrappedQty"
      ,IIF(PartType = 'Component',-1* CONVERT(decimal(18,4), Replace(CompletedQuantity, ',', '.')),CONVERT(decimal(18,4), Replace(CompletedQuantity, ',', '.'))) AS "CompletedQuantity"
      ,IIF(PartType = 'Component',-1* CONVERT(decimal(18,4), Replace([RemainingQty], ',', '.')),CONVERT(decimal(18,4), Replace([RemainingQty], ',', '.'))) AS "RemainingQty"                          
      ,[Status]
      --,CASE 
      --  WHEN [CurrentOperationStage_Preparado]  = '.' AND [CurrentOperationStage_Preparado] = '.' AND [CurrentOpeartionStage_Empaquetado]  = '.'    THEN 'NotStarted'
      --  WHEN [CurrentOperationStage_Preparado]  = 'OK' AND [CurrentOperationStage_Preparado] = '.' AND [CurrentOpeartionStage_Empaquetado]  = '.'   THEN 'Prepared'
      --  WHEN [CurrentOperationStage_Preparado]  = 'OK' AND [CurrentOperationStage_Cosido] = '.' AND [CurrentOpeartionStage_Empaquetado]  = 'OK'     THEN 'Sewing'
      --  WHEN [CurrentOperationStage_Preparado]  = 'OK' AND [CurrentOperationStage_Cosido] = 'OK' AND [CurrentOpeartionStage_Empaquetado]  = '.'     THEN 'Packaging'
      --  WHEN [CurrentOperationStage_Preparado]  = 'OK' AND [CurrentOperationStage_Cosido] = 'OK' AND [CurrentOpeartionStage_Empaquetado]  = 'OK'    THEN 'ReadyToSend'
      --  ELSE NULL END AS "CurrentOperationStage"  
      ,CASE WHEN [OrderCreateDate] = '' OR [OrderCreateDate] is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, [OrderCreateDate]) END AS "OrderCreateDate"
      ,CASE WHEN [PlannedEndDate] = '' OR [PlannedEndDate] is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, [PlannedEndDate]) END AS "PlannedEndDate"
      ,CASE WHEN [StartDate] = '' OR [StartDate] is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, [StartDate]) END AS "StartDate"
      ,CASE WHEN [EndDate] = '' OR [EndDate] is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, [EndDate]) END AS "EndDate"
      ,CASE WHEN [EndDate] = '' OR RequestedEndDate is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, RequestedEndDate) END AS "RequestedEndDate"         
      ,[OrderType]                                  
      ,UPPER(TRIM(WarehouseCode))   AS "WarehouseCode"                               
      ,UPPER(TRIM([SalesOrderNum])) AS "SalesOrderNum"                              
      ,UPPER(TRIM([CustomerNum]))  AS  "CustomerNum"                          
      ,[ProductionOrderCreaterName]  AS   "ProductionOrderCreaterName"
      ,[CurrentResourceGroup]
      ,[Currency]
      ,[ExchangeRate]
      ,CASE WHEN CreatedTimeStamp = '' OR CreatedTimeStamp is NULL THEN CONVERT(datetime,'1900-01-01') ELSE CONVERT(datetime, left(CreatedTimeStamp,19 )) END AS CreatedTimeStamp
      ,CASE WHEN [ModifiedTimeStamp] = '' OR [ModifiedTimeStamp] is NULL THEN CONVERT(datetime,'1900-01-01') ELSE CONVERT(datetime, left(ModifiedTimeStamp,19 )) END AS ModifiedTimeStamp
      ,[TotalHoursPlanned]
      ,[TotalHoursSpent]
      ,[SetupHoursSpent]
      ,[MaterialCost]
      ,[LabourCost]
      ,[OtherCost]

	
	FROM [stage].[ARK_PI_ProductionOrder]
GO
PRINT N'Creating [dnb].[vdimCustomer]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO



CREATE view [dnb].[vdimCustomer] as
select 
  convert(bigint,customer.CustomerID) as CustomerID
, customer.AccountNum
, customer.AddressLine
, customer.AddressLine1
, customer.AddressLine2
, customer.AddressLine3
, customer.City
, customer.Company
, customer.CompanyID
, customer.CountryCode
, customer.CountryName
, customer.CustomerCode
, customer.CustomerGroup
, customer.CustomerIndustry
, customer.CustomerName
, customer.CustomerNum
, customer.CustomerScore
, customer.CustomerSubGroup
, customer.CustomerSubIndustry
, customer.CustomerType
, customer.Division
, customer.Email
, customer.FullAddressLine
, customer.InternalExternal
, customer.MainCustomerName
, customer.OrganizationNum
, customer.PartitionKey
, customer.SalesDistrict
, customer.SalesPersonCode
, customer.SalesPersonName
, customer.SalesPersonResponsible
, customer.State
, customer.TelephoneNum1
, customer.TelephoneNum2
, customer.VATNum
, customer.ZipCode
,cast(dnb.DUNS as nvarchar(30)) as DUNS
,dnb.confidence_code as ConfidenceCode
from dw.Customer as customer
INNER JOIN dnb.DnBCustomerAndSupplier as dnb
	on customer.CustomerID = dnb.dw_id
		and is_customer = 1;
GO
PRINT N'Creating [stage].[ABK_SE_OLine]'
GO
CREATE TABLE [stage].[ABK_SE_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[NeedByDate] [date] NULL,
[DelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[InvoicedQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitPriceSEK] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ISOCode] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (1) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountPercent2] [decimal] (18, 4) NULL,
[DiscountPercent3] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[SalesPerson_Rsp] [nvarchar] (50) NULL,
[SalesPerson_Seller] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[SalesChannelTxt] [nvarchar] (200) NULL,
[BusinessChain] [nvarchar] (50) NULL,
[ProjectNum] [nvarchar] (50) NULL,
[Res1_PriceGroup] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vABK_SE_OLine]'
GO
CREATE VIEW [stage].[vABK_SE_OLine] AS
--COMMENT EMPTY FIELDS // ADD TRIM() UPPER() 2022-12-21  VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', OrderNum, '#', OrderLine))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum)))))AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', WarehouseCode))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum)))) AS SalesOrderNumID
	,CONVERT(int, replace(convert(date, OrderDate), '-', '')) AS SalesOrderDateID  --redundent?
	,CONCAT(Company, '#', OrderNum, '#', OrderLine) AS SalesOrderCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#','') )))	AS ProjectID
	,PartitionKey

	,Company
	,TRIM(CustNum) AS CustomerNum
	,OrderNum AS SalesOrderNum
	,OrderLine AS SalesOrderLine
	,OrderSubLine AS SalesOrderSubLine
	,CONVERT(nvarchar(50), OrderType) AS SalesOrderType
	,Res1_PriceGroup AS [SalesOrderCategory]
	,OrderDate AS SalesOrderDate
	,NeedByDate AS NeedbyDate
	,DelivDate AS ExpDelivDate
	,CAST('1900-01-01' AS date) AS ActualDelivDate
	,CAST('1900-01-01' AS date) AS ConfirmedDelivDate
	,InvoiceNum AS SalesInvoiceNum
	,OrderQty AS SalesOrderQty
	,DelivQty
	,RemainingQty
	--,NULL AS SalesInvoiceQty
	,Unit AS UoM
	,UnitPriceSEK AS UnitPrice
	,UnitCost -- This is always in SEK
	--,ISOCode	AS Currency
	,'SEK'	AS Currency
	,1 ExchangeRate
	--,OpenRelease 
	,IIF(RemainingQty > 0, '1', '0') AS OpenRelease --Changed according to meeting discussion.
	,UnitPriceSEK*OrderQty*(1 - (1 - DiscountPercent/100)*(1 - DiscountPercent2/100)*(1 - DiscountPercent3/100))	AS DiscountAmount
	,1 - (1 - DiscountPercent/100)*(1 - DiscountPercent2/100)*(1 - DiscountPercent3/100) AS DiscountPercent
	,TRIM(PartNum) AS PartNum
	--,'' AS PartType
	,PartStatus
	,SalesPerson_Seller AS SalesPersonName
	,TRIM(WarehouseCode) AS WarehouseCode
	,CASE WHEN SalesChannel IN ('1') THEN 'Gm mail'
		WHEN SalesChannel IN ('2') THEN 'Gm telefon'
		WHEN SalesChannel IN ('3') THEN 'Gm säljare'
		WHEN SalesChannel IN ('4') THEN 'Gm webb'
		WHEN SalesChannel IN ('5') THEN 'Gm fax'
		WHEN SalesChannel IN ('6') THEN 'Gm mail säljare'
		WHEN SalesChannel IN ('7') THEN 'Gm telefon säljare'
		WHEN SalesChannel IN ('8') THEN 'Gm fax säjare'
		WHEN SalesChannel IN ('9') THEN 'Gm reklamation'
		WHEN SalesChannel IN ('10') THEN 'Gm kundbesök'
		WHEN SalesChannel IN ('11') THEN 'Gm Sveviaportalen'
		WHEN SalesChannel IN ('12') THEN 'Gm Telemarkering'
		WHEN SalesChannel IN ('3254') THEN 'Gm mail'
		ELSE SalesChannel END AS SalesChannel
	,CASE WHEN SalesChannel IN ('4') THEN 'Webshop'
		ELSE 'Normal Order Handling' END AS AxInterSalesChannel
	,BusinessChain AS Department
	,[ProjectNum]
	--,'' AS [IndexKey]
	--,'0' AS Cancellation
	,SalesPerson_Rsp AS SORes1
	--,'' AS SORes2
	--,'' AS SORes3
	--,NULL AS [TotalMiscChrg]
FROM stage.ABK_SE_OLine
GO
PRINT N'Creating [dm_DS].[dimDepartment]'
GO


create view [dm_DS].[dimDepartment] as

select 
 dpt.[DepartmentID]
 ,dpt.CompanyID
,dpt.[Company]
,dpt.[DepartmentCode]
,dpt.[DepartmentName]
,dpt.[DepartmentSite]
,dpt.[Address]
,dpt.[ZipCode]
,dpt.[City]
,dpt.[State]
,dpt.[CountryCode]
,dpt.[CountryName]
,dpt.[DepartmentType]
,dpt.[DepartmentDescription]
,dpt.[DptRes1]
,dpt.[DptRes2]
,dpt.[DptRes3]
from dm.dimDepartment as dpt
LEFT JOIN DBO.Company as company
	on dpt.Company = company.Company
WHERE company.BusinessArea = 'Driveline Solutions' AND company.[Status] = 'Active';
GO
PRINT N'Creating [stage].[CER_LV_OLine]'
GO
CREATE TABLE [stage].[CER_LV_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderRelNum] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[DelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[UnitPrice] [numeric] (18, 4) NULL,
[UnitCost] [numeric] (18, 4) NULL,
[SumUnitCost] [numeric] (18, 4) NULL,
[SumUnitPrice] [numeric] (18, 4) NULL,
[CurrExchRate] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[OpenRelease] [nvarchar] (10) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [numeric] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[NeedbyDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (500) NULL,
[SalesReturnOrderNum] [nvarchar] (100) NULL,
[SalesReturnInvoiceNum] [nvarchar] (100) NULL,
[WarehouseCode] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_LV_OLine]'
GO

CREATE VIEW [stage].[vCER_LV_OLine] AS
--COMMENT EMPTY FIELDS / ADD UPPER()TRIM() INTO PartID,CustomerID 2022-12-21 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(lvo.Company, '#', OrderNum, '#', OrderLine, '#', OrderSubLine, '#', OrderRelNum, '#', MAX(InvoiceNum), '#', SalesReturnOrderNum))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(lvo.Company), '#', TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(lvo.Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ) ))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', lvo.Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(lvo.Company), '#', TRIM(PartNum) )))) AS PartID 
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(lvo.Company, '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) )))) AS PartID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(lvo.Company, '#', WarehouseCode))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(lvo.Company, '#', TRIM(OrderNum)))) AS SalesOrderNumID
	,CONCAT(lvo.Company, '#', OrderNum, '#', OrderLine, '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) )) AS SalesOrderCode
	,CONVERT(int, replace(convert(date, OrderDate),'-','')) AS SalesOrderDateID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT( lvo.Company,'#','') ))	AS ProjectID
	,lvo.PartitionKey 

	,TRIM(lvo.Company) AS Company
	,TRIM(CustNum) AS CustomerNum 
	--,TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ) AS CustomerNum 
	,TRIM(OrderNum) AS SalesOrderNum
	,TRIM(OrderLine) AS SalesOrderLine
	,TRIM(OrderSubLine) AS SalesOrderSubLine
	,TRIM(OrderType) AS SalesOrderType
	--,'' AS SalesOrderCategory
	,TRIM(OrderRelNum) AS SalesOrderRelNum
	,OrderDate AS SalesOrderDate
	,NeedbyDate
	,DelivDate AS ExpDelivDate
	,CAST('1900-01-01' AS date) AS ActualDelivDate
	,CAST('1900-01-01' AS date) AS ConfirmedDelivDate
	,MAX(InvoiceNum) AS SalesInvoiceNum
	,OrderQty AS SalesOrderQty
	,DelivQty
	,RemainingQty
	--,NULL AS SalesInvoiceQty
	--,'' AS UoM
	,UnitPrice
	,UnitCost
	,TRIM(CurrencyCode) AS Currency
	,CurrExChRate AS ExchangeRate
	,OpenRelease
	,DiscountAmount
	,DiscountPercent
	,TRIM(PartNum) AS PartNum
	--,TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) ) AS PartNum
	,IIF(OrderSubLine = '000000', 'Main', 'Sub' ) AS PartType
	,PartStatus
	,TRIM(lvo.SalesPerson) AS SalesPersonName
	,CASE WHEN WarehouseCode = '' OR WarehouseCode is NULL THEN 'Other' ELSE WarehouseCode END AS WarehouseCode
	--,'' AS SalesChannel
	,CASE WHEN left(OrderNum, 4) = '0004' THEN 'RFQ'
		WHEN left(OrderNum, 4) = '0005' THEN 'Webshop'
		ELSE 'Normal Order Handling' END AS AxInterSalesChannel
	--,'' AS Department
	--,'' AS ProjectNum
	--,'' AS IndexKey
	--,'0' AS Cancellation
	--,'' AS SORes1
	--,'' AS SORes2
	--,'' AS SORes3
	--,NULL AS [TotalMiscChrg]
FROM stage.CER_LV_OLine lvo


GROUP BY
	lvo.PartitionKey, CustNum, OrderNum, OrderLine, OrderSubLine, OrderType, OrderRelNum, OrderDate, NeedbyDate, DelivDate, OrderQty, DelivQty, RemainingQty, UnitPrice, UnitCost,  CurrExChRate, lvo.Company, OpenRelease, DiscountAmount, DiscountPercent, PartNum, PartStatus, SalesPerson, WarehouseCode, CurrencyCode, SalesReturnOrderNum
GO
PRINT N'Creating [stage].[ARK_CZ_Customer]'
GO
CREATE TABLE [stage].[ARK_CZ_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[CustomerName] [nvarchar] (200) NULL,
[AddressLine1] [nvarchar] (200) NULL,
[AddressLine2] [nvarchar] (200) NULL,
[AddressLine3] [nvarchar] (200) NULL,
[TelephoneNumber1] [nvarchar] (50) NULL,
[TelephoneNumber2] [nvarchar] (50) NULL,
[Email] [nvarchar] (100) NULL,
[CustomerABC] [nchar] (10) NULL,
[City] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[SalesPersonResponsible] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (50) NULL,
[Division] [nvarchar] (50) NULL,
[SalesRepCode] [varchar] (50) NULL,
[VATRegNr] [nvarchar] (20) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (2) NULL,
[SalesPersonName] [varchar] (50) NULL,
[CustomerType] [nvarchar] (50) NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL,
[Disctrict] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vARK_CZ_Customer]'
GO
CREATE VIEW [stage].[vARK_CZ_Customer] AS
--COMMENT EMPTY FIELDS // ADD TRIM()UPPER() INTO CustomerID 2022-12-16 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#' ,TRIM(CustomerNum))))) AS CustomerID
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#' ,TRIM(CustomerNum)))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [Company])) AS CompanyID
	,CONCAT([Company], '#', TRIM([CustomerNum])) AS CustomerCode
	,PartitionKey

	,Company
    ,TRIM(CustomerNum) AS CustomerNum
	--,'' AS MainCustomerName
    ,CustomerName
    ,[AddressLine1]
    ,[AddressLine2]
    ,[AddressLine3]
	,[TelephoneNumber1] AS [TelephoneNum1]
	,[TelephoneNumber2] AS [TelephoneNum2]
	,[Email]
	,ZipCode
	,[City]
    ,IIF([State]= ' ',null,[State]) AS [State]
	,[District] AS SalesDistrict
	,TRIM(CountryCode) AS CountryCode
    ,CASE WHEN CountryName is null THEN 'Czech Republic' ELSE CountryName END AS CountryName
	,Division
	--,'' AS CustomerIndustry
	--,'' AS CustomerSubIndustry
	,TRIM(CONCAT(AddressLine1,', ',AddressLine2)) AS AddressLine
	,CONCAT(CASE WHEN CountryName is null THEN 'Czech Republic' ELSE CountryName END, + ',' + ZipCode, + ',' + City) AS FullAddressLine
    ,CustomerGroup AS CustomerGroup
	,CustomerSubGroup AS CustomerSubGroup
    ,[SalesRepCode]	AS SalesPersonCode
	,CONVERT(varchar(50), SalesPersonName) AS SalesPersonName --[dbo].[ProperCase](SalesPersonName) AS --SERVERPROPERTY('Czech_CI_AS'), 
	,[SalesPersonResponsible]
    ,TRIM([VATRegNr]) AS [VATNum]
	--,'' AS OrganizationNum
	,[AccountString] AS AccountNum
	,[InternalExternal]
	,[CustomerABC] AS CustomerScore
	,CustomerType
FROM [stage].[ARK_CZ_Customer]
GO
PRINT N'Creating [audit].[CompanyLinePipelinesLog]'
GO
CREATE TABLE [audit].[CompanyLinePipelinesLog]
(
[PipelineRunID] [varchar] (100) NULL,
[Company] [varchar] (40) NULL,
[StartTime] [datetime] NULL,
[EndTime] [datetime] NULL,
[Status] [varchar] (25) NULL,
[Date] [date] NULL,
[Triggered] [bit] NULL
)
GO
PRINT N'Creating [audit].[CompanyHeaderPipelinesLog]'
GO
CREATE TABLE [audit].[CompanyHeaderPipelinesLog]
(
[PipelineRunID] [varchar] (100) NULL,
[PipelineTriggerRunID] [varchar] (100) NULL,
[PipelineName] [varchar] (100) NULL,
[StartTime] [datetime] NULL,
[EndTime] [datetime] NULL,
[Status] [varchar] (25) NULL,
[Date] [date] NULL,
[Triggered] [bit] NULL
)
GO
PRINT N'Creating [audit].[ASModelLog]'
GO
CREATE TABLE [audit].[ASModelLog]
(
[PipelineRunID] [varchar] (100) NULL,
[PipelineTriggerRunID] [varchar] (100) NULL,
[ASModelName] [varchar] (50) NULL,
[StartTime] [datetime] NULL,
[EndTime] [datetime] NULL,
[Status] [varchar] (25) NULL,
[ErrorMessage] [varchar] (max) NULL,
[Date] [date] NULL,
[Triggered] [bit] NULL
)
GO
PRINT N'Creating [audit].[AdfLog_test_dev]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO

CREATE procedure [audit].[AdfLog_test_dev] 
@PipelineRunID varchar(100),
@PipelineTriggerRunID varchar(100),
@PipelineName varchar(100),
@StartTime datetime,
@EndTime datetime,
@Status varchar(25),
@Stage varchar(25),
@TableName varchar(60),	
@ErrorMessage varchar(max),
@LogTable varchar(50),
@Company varchar(25),
@Triggered varchar(25),
@rowsCopied varchar(25) = null,
@timePeriod nvarchar(40) = null,
@PartitionKey varchar(50) = null

as

declare @date date;

set @date = CASE 
            WHEN DATEPART(HOUR, @StartTime) >= 21
                THEN cast(dateadd(dd,1,@StartTime ) as date)
            ELSE cast(@StartTime as date) 
			end


begin
	if @LogTable = 'CompanyHeaderPipelinesLog'
	
		INSERT INTO  audit.[CompanyHeaderPipelinesLog]
		(
		PipelineRunID
		,PipelineTriggerRunID
		,PipelineName
		,StartTime
		,EndTime
		,Status
		,Date
		,Triggered
		)
		VALUES (
		@PipelineRunID,
		@PipelineTriggerRunID,
		@PipelineName,
		@StartTime,
		@EndTime,
		@Status,
		@date,
		@Triggered
		);
		
	if @LogTable = 'CompanyLinePipelinesLog'
	
		INSERT INTO  audit.[CompanyLinePipelinesLog]
		(
		PipelineRunID
		,Company
		,StartTime
		,EndTime
		,Status
		,Date
		,Triggered
		)
		VALUES (
		@PipelineRunID,
		--@PipelineTriggerRunID,
		@Company,
		@StartTime,
		@EndTime,
		@Status,
		@date,
		@Triggered
		);
		
	if @LogTable = 'PipelinesActivitiesLog'
	
		INSERT INTO  audit.[PipelinesActivitiesLog]
		(
		PipelineRunID
		,PipelineTriggerRunID
		,Company
		,TableName
		,Stage
		,StartTime
		,EndTime
		,Status
		,ErrorMessage
		,rowsCopied
		,Date
		,Period
		,Triggered
		,PartitionKey
		)
		VALUES(
		@PipelineRunID,
		@PipelineTriggerRunID,
		@Company,
		@TableName,
		@Stage,
		@StartTime,
		@EndTime,
		@Status,
		@ErrorMessage,
		@rowsCopied,
		@date,
		nullif(replace(@timePeriod,'''',''),''),
		@Triggered,
		@PartitionKey
		)
		
	if @LogTable = 'ASModelLog'
	
		INSERT INTO  audit.[ASModelLog]
		(
		PipelineRunID
		,PipelineTriggerRunID
		,ASModelName
		,StartTime
		,EndTime
		,Status
		,ErrorMessage
		,Date
		,Triggered
		)
		VALUES(
		@PipelineRunID,
		@PipelineTriggerRunID,
		@TableName,
		@StartTime,
		@EndTime,
		@Status,
		@ErrorMessage,
		@date,
		@Triggered
		)
	
end
GO
PRINT N'Creating [stage].[CER_DK_StockBalance]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[CER_DK_StockBalance]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Currency] [nvarchar] (10) NULL,
[BinNum] [nvarchar] (12) NULL,
[BatchNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (70) NULL,
[DelivTime] [int] NULL,
[LastStockTakeDate] [date] NULL,
[LastStdCostCalDate] [date] NULL,
[MaxStockQty] [decimal] (18, 4) NULL,
[StockBalance] [decimal] (18, 4) NULL,
[StockValue] [decimal] (18, 4) NULL,
[ReserveQty] [decimal] (18, 4) NULL,
[BackOrderQty] [decimal] (18, 4) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[StockTakeDiff] [decimal] (18, 4) NULL,
[ReOrderLevel] [decimal] (18, 4) NULL,
[SafetyStock] [decimal] (18, 4) NULL,
[OptimalOrderQty] [decimal] (18, 4) NULL,
[AvgCost] [decimal] (18, 4) NULL,
[SBRes1] [nvarchar] (50) NULL,
[SBRes2] [nvarchar] (50) NULL,
[SBRes3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_DK_StockBalance]'
GO












CREATE VIEW [stage].[vCER_DK_StockBalance] AS

SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]),'#',TRIM([WarehouseCode]))))) AS ItemWarehouseID
	,UPPER(CONCAT([Company],'#',TRIM([PartNum]),'#',TRIM([WarehouseCode]))) AS ItemWarehouseCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',[Company])) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#','')))) AS SupplierID -- var '0000000'
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,IIF(UPPER(TRIM([WarehouseCode])) IS NULL, 'MissingWHS', UPPER(TRIM([WarehouseCode]))) AS WarehouseCode
	,'DKK'	AS Currency
	,BinNum --Currently there are some duplicates here and BinNum needs to be aggregated. It is only around 6 duplicate rows /SM 2021-05-21
	,BatchNum
	,'' AS SupplierNum
	,UPPER(TRIM([PartNum])) AS PartNum
	,[DelivTime]
	,LastStockTakeDate
	,LastStdCostCalDate
	,SafetyStock
	,MaxStockQty
	,[StockBalance]
	,StockValue
	,AvgCost
	,[ReserveQty]
	,[BackOrderQty]
	,[OrderQty]
	,[StockTakeDiff]
	,[ReOrderLevel]
	,[OptimalOrderQty]
	,SBRes1
	,SBRes2
	,SBRes3
FROM 
	[stage].[CER_DK_StockBalance]
WHERE PartNum IS NOT NULL
GO
PRINT N'Creating [stage].[MEN_NL_OLine]'
GO
CREATE TABLE [stage].[MEN_NL_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[CustomerNum] [nvarchar] (50) NULL,
[SalesOrderNum] [nvarchar] (50) NOT NULL,
[SalesOrderLine] [nvarchar] (50) NULL,
[SalesOrderSubLine] [nvarchar] (50) NULL,
[SalesOrderType] [nvarchar] (50) NULL,
[SalesOrderCategory] [nvarchar] (100) NULL,
[SalesOrderStatus] [nvarchar] (50) NULL,
[SalesOrderDate] [date] NULL,
[NeedbyDate] [date] NULL,
[ExpDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[SalesInvoiceNum] [nvarchar] (50) NULL,
[SalesOrderQty] [decimal] (18, 8) NULL,
[DelivQty] [decimal] (18, 8) NULL,
[RemainingQTY] [decimal] (18, 8) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 8) NULL,
[UnitCost] [decimal] (18, 8) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 8) NULL,
[DiscountPercent] [decimal] (18, 8) NULL,
[DiscountAmount] [decimal] (18, 8) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartType] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[SalesChanel] [nvarchar] (50) NULL,
[Department] [nvarchar] (100) NULL,
[ProjectNum] [nvarchar] (50) NULL,
[Cancellation] [nvarchar] (50) NULL,
[IndexKey] [nvarchar] (50) NULL,
[SORes1] [nvarchar] (50) NULL,
[SORes2] [nvarchar] (50) NULL,
[SORes3] [nvarchar] (50) NULL,
[DebiteurKey] [nvarchar] (50) NULL,
[ProductKey] [nvarchar] (50) NULL,
[DW_TimeStamp] [date] NULL,
[SalesAmount] [decimal] (18, 8) NULL,
[CustomerNumPayer] [nvarchar] (50) NULL,
[SalesOrderQty_2] [decimal] (18, 8) NULL,
[InternalSalesIdentifier] [bit] NULL
)
GO
PRINT N'Creating [stage].[vMEN_NL_OLine]'
GO


CREATE VIEW [stage].[vMEN_NL_OLine] AS
WITH CTE AS (
SELECT CASE WHEN Company = '14' THEN  CONCAT(N'MENBE',Company) 
			ELSE  CONCAT(N'MENNL',Company)  END AS CompanyCode		--Doing this to have the company code in nvarchar and don't need to repeat CAST(CONCAT('MEN-',Company) AS nvarchar(50)) everywhere /SM
	  ,[PartitionKey], [Company], [CustomerNum], [SalesOrderNum], [SalesOrderLine], [SalesOrderSubLine], [SalesOrderType], [SalesOrderCategory], [SalesOrderStatus], [SalesOrderDate], [NeedbyDate], [ExpDelivDate], [ActualDelivDate], [SalesInvoiceNum], [SalesOrderQty], [DelivQty], [RemainingQTY], [UoM], [UnitPrice], [UnitCost], [Currency], [ExchangeRate], [DiscountPercent], [DiscountAmount], [PartNum], [PartType], [PartStatus], [SalesPersonName], [WarehouseCode], [SalesChanel], [Department], [ProjectNum], [Cancellation], [IndexKey], [SORes1], [SORes2], [SORes3], [DebiteurKey], [ProductKey], [DW_TimeStamp], [SalesAmount], [CustomerNumPayer], [SalesOrderQty_2], [InternalSalesIdentifier]
	  ,CASE WHEN SalesOrderQty <> 0 THEN SalesOrderQty
		 WHEN SalesOrderQty = 0 THEN SalesOrderQty_2
		ELSE 1 END												AS SalesOrderQty_calc
		,ROW_NUMBER() OVER (Partition by Company,SalesOrderNum,SalesOrderLine,PartNum ORDER BY SalesInvoiceNum) as rownum
  FROM [stage].[MEN_NL_OLine]
)
SELECT
	--ADD TRIM()UPPER() INTO WarehouseID 23-01-12 VA

	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(CompanyCode,'#',SalesOrderNum,'#',SalesOrderLine,'#', PartNum,'#', rownum ))) AS SalesOrderID
	,CONCAT(CompanyCode,'#',SalesOrderNum,'#',SalesOrderLine, '#',SalesInvoiceNum, '#', PartNum) as SalesOrderCode --'#',OrderSubLine,
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(CompanyCode,'#',CustomerNum))) as CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',(CompanyCode))) as CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(CompanyCode, '#', PartNum))) AS PartID 
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(CompanyCode),'#',TRIM(WarehouseCode))))) AS WareHouseID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(CompanyCode,'#',UPPER(WarehouseCode)))) AS WareHouseID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(CompanyCode,'#',SalesOrderNum))) AS SalesOrderNumID
	,YEAR(SalesOrderDate)*10000+MONTH(SalesOrderDate)*100+DAY(SalesOrderDate) AS SalesOrderDateID  
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT(CompanyCode,'#','') ))	AS ProjectID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(CompanyCode,'#',trim(Department)))) AS DepartmentID
	,PartitionKey 

	,CompanyCode AS Company
	,TRIM(CustomerNum) AS CustomerNum 
	,SalesOrderNum
	,SalesOrderLine
	,rownum AS SalesOrderSubLine
	,SalesOrderType
	,InternalSalesIdentifier AS SalesOrderCategory --Putting an internal order flag here for now
	--,NULL AS SalesOrderRelNum
	,SalesOrderDate
	,CASE WHEN YEAR(NeedbyDate) > 9000 THEN '3000-01-01' ELSE NeedbyDate END AS NeedbyDate
	,CASE WHEN YEAR(ExpDelivDate) > 9000 THEN '3000-01-01' ELSE ExpDelivDate END AS ExpDelivDate
	,ActualDelivDate			AS ActualDelivDate
	,CAST('1900-01-01' AS date)		AS ConfirmedDelivDate
	,SalesInvoiceNum
	,SalesOrderQty_calc		AS SalesOrderQty
	,DelivQty					AS DelivQty
	,RemainingQty				AS RemainingQty
	--,NULL AS SalesInvoiceQty
	,UoM
	,IIF(SalesOrderQty_calc=0
		,SalesAmount+DiscountAmount
		,((SalesAmount+DiscountAmount)/SalesOrderQty_calc)) AS UnitPrice
	,IIF(SalesOrderQty_calc=0
		,UnitCost
		,(UnitCost*SalesOrderQty_calc/SalesOrderQty_calc)) AS UnitCost
	,COALESCE(UPPER(Currency), 'EUR') AS Currency
	,ExchangeRate
	,CASE WHEN SalesOrderStatus = 'False' THEN '1' ELSE '0' END AS OpenRelease
--	,COALESCE( UnitPrice/100.0 *  SalesOrderQty * DiscountPercent/100 ,0) AS DiscountAmount
	,DiscountAmount AS [DiscountAmount]
	,DiscountPercent
	--,CONCAT(TRIM(PartNum), '-', ProductKey)	AS PartNum
	,TRIM(PartNum) as PartNum -- TO 2023-02-06 changing for ticket
	,PartType
	,PartStatus
	,SalesPersonName
	,WarehouseCode
	,SalesChanel	AS SalesChannel
	--,NULL AS AxInterSalesChannel
	,Department
	,ProjectNum
	,IndexKey
	,[Cancellation]
	,InternalSalesIdentifier AS SORes1
	,SORes2
	,SORes3

	--,NULL AS ReturnComment
	--,NULL AS SalesReturnOrderNum
	--,NULL AS SalesReturnInvoiceNum
	--,NULL AS [TotalMiscChrg]
FROM CTE
GO
PRINT N'Creating [dnb].[MatchComponents]'
GO
CREATE TABLE [dnb].[MatchComponents]
(
[customerReference] [nvarchar] (60) NOT NULL,
[matchCandidates.matchQualityInformation.matchGradeComponents.componentType] [nvarchar] (20) NULL,
[matchCandidates.matchQualityInformation.matchGradeComponents.componentRating] [nvarchar] (40) NULL
)
GO
PRINT N'Creating [dnb].[dimMatchGradeString]'
GO
CREATE TABLE [dnb].[dimMatchGradeString]
(
[Grade] [char] (1) NULL,
[Definition] [nvarchar] (80) NULL,
[Example] [nvarchar] (80) NULL,
[GradeScore] [int] NULL
)
GO
PRINT N'Creating [dnb].[dimError]'
GO
CREATE TABLE [dnb].[dimError]
(
[errorCode] [nvarchar] (10) NOT NULL,
[errorDescription] [nvarchar] (200) NOT NULL,
[stage] [nvarchar] (15) NULL
)
GO
PRINT N'Creating [dnb].[dimDnB_CustomerMatchImprovements]'
GO



--alter table stage.MasterTable add [organization.dunsControlStatus.operatingStatus.description] nvarchar (200) null;




CREATE view [dnb].[dimDnB_CustomerMatchImprovements] as 

select convert(bigint,dnb.dw_id) as CustomerID
,dnb.confidence_code																as DUNS_MatchScore
,error.errorDescription																as DUNS_MatchDescription																					-- DUNS_MatchDescription
--,dnb.match_status																									---- THIS CAN BE EXCLUDED SINCE THE CODE IS NOT INTERESTING
,case 
	when mc.[matchCandidates.matchQualityInformation.matchGradeComponents.componentType] = 'PostalCode' then 'ZipCode'
	when mc.[matchCandidates.matchQualityInformation.matchGradeComponents.componentType] = 'Street Name' then 'Address Name'
	when mc.[matchCandidates.matchQualityInformation.matchGradeComponents.componentType] = 'Street Number' then 'Address Number'
	when mc.[matchCandidates.matchQualityInformation.matchGradeComponents.componentType] = 'Phone' then 'TelephoneNum'
	else mc.[matchCandidates.matchQualityInformation.matchGradeComponents.componentType]
end as InputField
,mc.[matchCandidates.matchQualityInformation.matchGradeComponents.componentRating]	as InputField_Rating				--		as componentRating      -- InputField_Rating
,mgs.GradeScore																		as InputField_MatchScore			--			-- InputField_MatchScore
,mgs.Definition																		as InputField_MatchDescription		--				-- InputField_MatchDescription
,mgs.Example																		as InputField_Example				--		-- InputField_Example
from dnb.MatchComponents as mc
inner join dnb.DnBCustomerAndSupplier as dnb
on	CAST(left(mc.customerReference,len(mc.customerReference)-2) as bigint) = CAST(dnb.dw_id as bigint)
		and dnb.is_customer = 1
inner join dnb.dimError as error
	on dnb.match_status = error.errorCode and stage = 'match'
inner join dnb.dimMatchGradeString as mgs
	on mgs.Grade = mc.[matchCandidates.matchQualityInformation.matchGradeComponents.componentRating]
where (confidence_code < 9 or confidence_code is null)
and mc.[matchCandidates.matchQualityInformation.matchGradeComponents.componentType] in ('Name', 'State','City','PostalCode','Street Name','Street Number','Phone')
;
GO
PRINT N'Creating [stage].[NOM_SE_Supplier]'
GO
CREATE TABLE [stage].[NOM_SE_Supplier]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[MainSupplierName] [nvarchar] (100) NULL,
[SupplierName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[AddressLine3] [nvarchar] (100) NULL,
[City] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[TelephoneNum] [nvarchar] (50) NULL,
[Email] [nvarchar] (100) NULL,
[District] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (100) NULL,
[Region] [nvarchar] (50) NULL,
[SupplierCategory] [nvarchar] (50) NULL,
[SupplierResponsible] [nvarchar] (100) NULL,
[AccountNum] [nvarchar] (50) NULL,
[VATNum] [nvarchar] (50) NULL,
[OrganisationNum] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[CodeOfConduct] [nvarchar] (50) NULL,
[SupplierScore] [nvarchar] (50) NULL,
[MinOrderQty] [decimal] (18, 4) NULL,
[MinOrderValue] [decimal] (18, 4) NULL,
[Website] [nvarchar] (100) NULL,
[Comments] [nvarchar] (max) NULL,
[SRes1] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vNOM_SE_Supplier]'
GO

CREATE VIEW [stage].[vNOM_SE_Supplier] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([SupplierNum]))))) AS SupplierID
    ,UPPER(CONCAT([Company], '#', TRIM([SupplierNum]))) AS SupplierCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Company])))) AS CompanyID
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([SupplierNum])) AS SupplierNum
	,TRIM(MainSupplierName) AS MainSupplierName
	,TRIM(SupplierName) AS SupplierName
	,TRIM([AddressLine1]) AS AddressLine1
    ,TRIM([AddressLine2]) AS AddressLine2
    ,TRIM([AddressLine3]) AS AddressLine3
	,TRIM([TelephoneNum]) AS [TelephoneNum]
	,[Email]
	,TRIM(ZipCode) AS ZipCode
	,TRIM([City]) AS City
	,District
	,TRIM(CountryCode) AS CountryCode
	,TRIM(CountryName) AS CountryName
	,[Region] 
	,TRIM([SupplierCategory]) AS SupplierCategory 
	,TRIM(SupplierResponsible) AS SupplierResponsible
	,IIF(AddressLine1 = '', TRIM([AddressLine2]), TRIM([AddressLine1])) AS AddressLine
	,Concat(TRIM(CountryName), ', ', TRIM([City]), ', ', TRIM(ZipCode), ', ', IIF(AddressLine1 = '', TRIM([AddressLine2]), TRIM([AddressLine1]))) AS FullAddressLine
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [AccountNum])) AS [AccountNum]
	,[VATNum]
	,OrganisationNum as OrganizationNum
	,InternalExternal AS InternalExternal
	,[CodeOfConduct]
	,'' AS CustomerNum
	,TRIM(SupplierScore) AS SupplierScore
	,[MinOrderQty]
	,MinOrderValue	
	,[Website]
	,TRIM(Comments) AS Comments
	,SRes1
	--,'' AS SRes2
	--,'' AS SRes3
FROM [stage].[NOM_SE_Supplier]
/*GROUP BY 
      [PartitionKey],[Company],[SupplierNum],[SupplierName],[AddressLine1],[AddressLine2],[AddressLine3],[City],[ZIP],[Region],[CountryName]
	  ,[SupplierCategory],[Reference],[BankAccountNum],[VATNum],[SupplierABC],[CustomerCode],[TelephoneNum],[Email],[Website],[CodeOfConduct]
	  ,[MinOrderQty],[InternalName],[Comment] */
GO
PRINT N'Creating [dm_DS].[fctSalesOrder]'
GO



CREATE VIEW [dm_DS].[fctSalesOrder] AS

SELECT 
 so.[SalesOrderID]
,so.[SalesOrderNumID]
,so.[CustomerID]
,so.[CompanyID]
,so.[PartID]
,so.[WarehouseID]
,so.[ProjectID]
,so.[SalesPersonNameID]
,so.[DepartmentID]
,so.[SalesOrderDateID]
,so.[Company]
,so.[CustomerNum]
,so.[SalesOrderNum]
,so.[SalesOrderLine]
,so.[SalesOrderSubLine]
,so.[SalesOrderType]
,so.[SalesOrderCategory]
,so.[SalesOrderDate]
,so.[NeedbyDate]
,so.[ExpDelivDate]
,so.[ConfirmedDelivDate]
,so.[SalesInvoiceNum]
,so.[SalesOrderQty]
,so.[DelivQty]
,so.[RemainingQty]
,so.[UoM]
,so.[UnitPrice]
,so.[UnitCost]
,so.[Currency]
,so.[ExchangeRate]
,so.[OpenRelease]
,so.[OrderStatus]
,so.[DiscountAmount]
,so.[DiscountPercent]
,so.[PartNum]
,so.[PartType]
,so.[PartStatus]
,so.[SalesPersonName]
,so.[WarehouseCode]
,so.[SalesChannel]
,so.[AxInterSalesChannel]
,so.[Department]
,so.[ProjectNum]
,so.[ActualDelivDate]
,so.[SalesInvoiceQty]
,so.[TotalMiscChrg]
,so.[IsUpdatingStock]
,so.[SORes1]
,so.[SORes2]
,so.[SORes3]
,so.[SORes4]
,so.[SORes5]
,so.[SORes6]
FROM dm.FactSalesOrder so
LEFT JOIN dbo.Company com ON so.Company = com.Company
WHERE com.BusinessArea = 'Driveline Solutions' AND com.[Status] = 'Active';
GO
PRINT N'Creating [stage].[SKS_FI_SupplierAgreement]'
GO
CREATE TABLE [stage].[SKS_FI_SupplierAgreement]
(
[PartitionKey] [varchar] (50) NOT NULL,
[COMPANY] [nvarchar] (8) NOT NULL,
[MANDT] [nvarchar] (50) NULL,
[SUPPLIER] [nvarchar] (50) NOT NULL,
[PRODUCT] [nvarchar] (50) NULL,
[REC_TYPE] [nvarchar] (50) NULL,
[REC_TYPE_DESC] [nvarchar] (50) NULL,
[DISCOUNT_PRC] [decimal] (18, 4) NULL,
[UNIT_PRICE] [decimal] (18, 4) NULL,
[QUANTITY] [decimal] (18, 4) NULL,
[CURRENCY] [nvarchar] (10) NULL,
[DELIVERY_TIME] [nvarchar] (10) NULL,
[AGREEMENT_START] [nvarchar] (50) NULL,
[AGREEMENT_END] [nvarchar] (50) NULL,
[SUPPLIER_TERMS] [nvarchar] (50) NULL,
[UNIT] [nvarchar] (50) NULL,
[SRES1] [nvarchar] (50) NULL,
[SRES2] [nvarchar] (50) NULL,
[SRES3] [nvarchar] (50) NULL,
[EKORG] [nvarchar] (50) NULL,
[INFNR] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vSKS_FI_SupplierAgreement]'
GO

CREATE VIEW [stage].[vSKS_FI_SupplierAgreement] AS 
--ADD TRIM() UPPER() INTO SupplierID 23-01-24 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(TRIM([Company]), '#', TRIM(PRODUCT), '#', TRIM(SUPPLIER), EKORG ))) AS SupplierAgreementID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM([Company]))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(SUPPLIER), '#', TRIM(EKORG))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM([CURRENCY]))) AS CurrencyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', PRODUCT ))) AS PartID
	,[PartitionKey]

--	,CASE WHEN COMPANY = 'SKSSWE' THEN 'JSESKSSW' WHEN COMPANY = '' THEN 'SCOFI' ELSE COMPANY END AS Company 
	,Company 
	,TRIM([SUPPLIER]) AS SupplierNum
	,IIF(ISNUMERIC([PRODUCT]) = 1,CAST(CAST(trim([PRODUCT]) AS int)as nvarchar(50)),(trim([PRODUCT]))) AS PartNum
	,[REC_TYPE] AS [AgreementCode]
	,[REC_TYPE_DESC] AS [AgreementDescription]
	,[DISCOUNT_PRC]	AS DiscountPercent
	,MAX([UNIT_PRICE]) AS [UnitPrice]
	,[QUANTITY] AS [AgreementQty]
	,[CURRENCY] AS [Currency]
	,[DELIVERY_TIME]	AS DelivTime
	,IIF(AGREEMENT_START = '00000000', '1900-01-01', CONVERT(date, AGREEMENT_START)) AS [AgreementStart]
	,IIF(AGREEMENT_END = '00000000', '1900-01-01', CONVERT(date, AGREEMENT_END)) AS [AgreementEnd]
	,SUPPLIER_TERMS AS [SupplierTerms]
	,0	AS FulfilledQty
	,0  AS RemainingQty
	,''	AS UoM
	,SRES1 AS [SARes1]
	,SRES2 AS [SARes2]
	,SRES3 AS [SARes3]
FROM 
	[stage].[SKS_FI_SupplierAgreement]
WHERE  EKORG NOT IN ('FI00','SE10','')
GROUP BY [PartitionKey], [Company], EKORG, SUPPLIER, PRODUCT, REC_TYPE, REC_TYPE_DESC, DISCOUNT_PRC, [QUANTITY], CURRENCY, [DELIVERY_TIME], SUPPLIER_TERMS, AGREEMENT_START, AGREEMENT_END, SRES1, SRES2, SRES3
GO
PRINT N'Creating [stage].[MAK_NL_Budget]'
GO
CREATE TABLE [stage].[MAK_NL_Budget]
(
[PartitionKey] [nvarchar] (60) NULL,
[Company] [nvarchar] (60) NULL,
[BudgetPeriodDate] [nvarchar] (60) NULL,
[PeriodType] [nvarchar] (60) NULL,
[BudgetSales] [nvarchar] (60) NULL,
[BudgetCost] [nvarchar] (60) NULL,
[GrossProfitInvoiced] [nvarchar] (60) NULL,
[GrossMarginInvoicedPercent] [nvarchar] (60) NULL,
[Currency] [nvarchar] (60) NULL
)
GO
PRINT N'Creating [stage].[vMAK_NL_Budget]'
GO
CREATE view [stage].[vMAK_NL_Budget] as 

select 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#', BudgetPeriodDate)))) AS BudgetID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',Company)) AS CompanyID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'')))) AS ProjectID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'')))) AS WarehouseID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'')))) AS PartID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'')))) AS CustomerID,
	YEAR(BudgetPeriodDate)*10000 + MONTH(BudgetPeriodDate)*100 + DAY(BudgetPeriodDate)	AS BudgetPeriodDateID,
	PartitionKey,
	Company,
	BudgetPeriodDate,
	PeriodType,
	try_cast(replace(BudgetSales               ,',','.') as numeric(18,5)) as BudgetSales ,
	try_cast(replace(BudgetCost                ,',','.') as numeric(18,5)) as BudgetCost ,
	try_cast(replace(GrossProfitInvoiced       ,',','.') as numeric(18,5)) as GrossProfitInvoiced ,
	try_cast(replace(GrossMarginInvoicedPercent,',','.') as numeric(18,5)) as GrossMarginInvoicedPercent ,
	Currency
from [stage].[MAK_NL_Budget]
;
GO
PRINT N'Creating [dw].[SupplierAgreement]'
GO
CREATE TABLE [dw].[SupplierAgreement]
(
[SupplierAgreementID] [binary] (32) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NOT NULL,
[AgreementCode] [nvarchar] (50) NULL,
[AgreementDescription] [nvarchar] (max) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UoM] [nvarchar] (50) NULL,
[AgreementQty] [decimal] (18, 4) NULL,
[FulfilledQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (10) NULL,
[DelivTime] [smallint] NULL,
[AgreementStart] [date] NULL,
[AgreementEnd] [date] NULL,
[SupplierTerms] [nvarchar] (50) NULL,
[SARes1] [nvarchar] (100) NULL,
[SARes2] [nvarchar] (100) NULL,
[SARes3] [nvarchar] (100) NULL,
[CompanyID] [binary] (32) NULL,
[SupplierID] [binary] (32) NULL,
[CurrencyID] [binary] (32) NULL,
[PartID] [binary] (32) NULL,
[PartitionKey] [nvarchar] (50) NOT NULL,
[is_deleted] [bit] NULL,
[is_inferred] [bit] NULL,
[AgreementResponsible] [nvarchar] (100) NULL,
[IsActiveRecord] [bit] NULL
)
GO
PRINT N'Creating primary key [PK_SupplierAgreement] on [dw].[SupplierAgreement]'
GO
ALTER TABLE [dw].[SupplierAgreement] ADD CONSTRAINT [PK_SupplierAgreement] PRIMARY KEY NONCLUSTERED ([SupplierAgreementID])
GO
PRINT N'Creating [dw].[Claim]'
GO
CREATE TABLE [dw].[Claim]
(
[ClaimID] [binary] (32) NOT NULL,
[CompanyID] [binary] (32) NOT NULL,
[PartID] [binary] (32) NULL,
[CustomerID] [binary] (32) NULL,
[SupplierID] [binary] (32) NULL,
[WarehouseID] [binary] (32) NULL,
[StartDateID] [int] NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NULL,
[SalesOrderNum] [nvarchar] (50) NULL,
[SalesOrderLine] [nvarchar] (20) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (20) NULL,
[ClaimNum] [nvarchar] (50) NOT NULL,
[ClaimDescription] [nvarchar] (100) NULL,
[ClaimType] [nvarchar] (20) NULL,
[ClaimGroup] [nvarchar] (50) NULL,
[ClaimPriority] [nvarchar] (20) NULL,
[PartNum] [nvarchar] (50) NULL,
[ClaimHandler] [nvarchar] (50) NULL,
[CreateDate] [date] NULL,
[StartDate] [date] NULL,
[StartTime] [datetime] NULL,
[EndDate] [date] NULL,
[EndTime] [datetime] NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Comment] [nvarchar] (4000) NULL,
[is_deleted] [bit] NULL,
[ClaimResponsible] [nvarchar] (50) NULL,
[CreateTime] [datetime] NULL,
[IsActiveRecord] [bit] NULL,
[CLRes1] [nvarchar] (100) NULL,
[CLRes2] [nvarchar] (100) NULL,
[CLRes3] [nvarchar] (100) NULL,
[PartitionKey] [nvarchar] (50) NOT NULL
)
GO
PRINT N'Creating primary key [PK__Claims__7507310B6CC97501] on [dw].[Claim]'
GO
ALTER TABLE [dw].[Claim] ADD CONSTRAINT [PK__Claims__7507310B6CC97501] PRIMARY KEY CLUSTERED ([ClaimID])
GO
PRINT N'Creating [audit].[TableCoverageLog]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE PROCEDURE [audit].[TableCoverageLog]
	--@param1 int = 0,
	--@param2 int
AS

INSERT INTO audit.TableCoverage (DateRef,Company, DwTable, Field, PercentageNull)

SELECT cast(getdate() as date) as DateRef
,CovAud.Company
, CovAud.SMSSTable
, CovAud.Field
, cast(CovAud.PercentageNull as decimal(4,3)) as PercentageNull
FROM(


-- Account Table (finance) added 2023-03-03 SB
SELECT [Company], [PercentageNull], [Field], [SMSSTable]
FROM( 
   select Company, 'dw.Account' as SMSSTable, Field,  [PercentageNull]
   FROM ( SELECT
	   Company, 
	   
	   CAST(cast(count(NULLIF(AccountNum,'')) as decimal) /count(*) AS decimal(10,3)) as AccountNum,
	   CAST(cast(count(NULLIF(AccountName,'')) as decimal) /count(*) AS decimal(10,3)) as AccountName,
	   CAST(cast(count(NULLIF(Assets,'')) as decimal) /count(*) AS decimal(10,3)) as Assets,
	   CAST(cast(count(NULLIF(Amortization,'')) as decimal) /count(*) AS decimal(10,3)) as Amortization,
	   CAST(cast(count(NULLIF(Costs,'')) as decimal) /count(*) AS decimal(10,3)) as Costs,
	   CAST(cast(count(NULLIF(LiabilitiesAndEquity,'')) as decimal) /count(*) AS decimal(10,3)) as LiabilitiesAndEquity,
	   CAST(cast(count(NULLIF(Revenue,'')) as decimal) /count(*) AS decimal(10,3)) as Revenue,
	   CAST(cast(count(NULLIF(CurrentAssets,'')) as decimal) /count(*) AS decimal(10,3)) as CurrentAssets,
	   CAST(cast(count(NULLIF(CurrentLiabilities,'')) as decimal) /count(*) AS decimal(10,3)) as CurrentLiabilities,
	   CAST(cast(count(NULLIF(Deprecation,'')) as decimal) /count(*) AS decimal(10,3)) as Depreciation,  -- changed AS call to new name 2023-03-08 SB
	   CAST(cast(count(NULLIF(Equity,'')) as decimal) /count(*) AS decimal(10,3)) as Equity,
	   CAST(cast(count(NULLIF(Liability,'')) as decimal) /count(*) AS decimal(10,3)) as Liability,
	   CAST(cast(count(NULLIF(Interest,'')) as decimal) /count(*) AS decimal(10,3)) as Interest,
	   CAST(cast(count(NULLIF(Tax,'')) as decimal) /count(*) AS decimal(10,3)) as Tax,
	   CAST(cast(count(NULLIF(Materials,'')) as decimal) /count(*) AS decimal(10,3)) as Materials,
	   CAST(cast(count(NULLIF(Expenses,'')) as decimal) /count(*) AS decimal(10,3)) as Expenses,
	   CAST(cast(count(NULLIF(AccountReceivables,'')) as decimal) /count(*) AS decimal(10,3)) as AccountReceivables,
	   CAST(cast(count(NULLIF(CashAndEquivalents,'')) as decimal) /count(*) AS decimal(10,3)) as CashAndEquivalents,
	   CAST(cast(count(NULLIF(Inventory,'')) as decimal) /count(*) AS decimal(10,3)) as Inventory,
	   CAST(cast(count(NULLIF(AccountType,'')) as decimal) /count(*) AS decimal(10,3)) as AccountType,
	   CAST(cast(count(NULLIF(AccountType2,'')) as decimal) /count(*) AS decimal(10,3)) as AccountType2,
	   CAST(cast(count(NULLIF(AccountType3,'')) as decimal) /count(*) AS decimal(10,3)) as AccountType3,
	   CAST(cast(count(NULLIF(AccountType4,'')) as decimal) /count(*) AS decimal(10,3)) as AccountType4,
	   CAST(cast(count(NULLIF(AccountType5,'')) as decimal) /count(*) AS decimal(10,3)) as AccountType5,
	   CAST(cast(count(NULLIF(AccountType6,'')) as decimal) /count(*) AS decimal(10,3)) as AccountType6,
	   CAST(cast(count(NULLIF(AccountType7,'')) as decimal) /count(*) AS decimal(10,3)) as AccountType7,
	   CAST(cast(count(NULLIF(AccountType8,'')) as decimal) /count(*) AS decimal(10,3)) as AccountType8,
	   CAST(cast(count(NULLIF(AccountType9,'')) as decimal) /count(*) AS decimal(10,3)) as AccountType9,
	   CAST(cast(count(NULLIF(AccountType10,'')) as decimal) /count(*) AS decimal(10,3)) as AccountType10,
	   CAST(cast(count(NULLIF(AccountGroupNum,'')) as decimal) /count(*) AS decimal(10,3)) as AccountGroupNum,
	   CAST(cast(count(NULLIF(AccountGroupName,'')) as decimal) /count(*) AS decimal(10,3)) as AccountGroupName,
	   CAST(cast(count(NULLIF(Statement,'')) as decimal) /count(*) AS decimal(10,3)) as Statement,
	   CAST(cast(count(StatementNum) as decimal) /count(*) AS decimal(10,3)) as StatementOrder, -- needs to be changed to StatementOrder 2023-03-29 SB
	   CAST(cast(count(NULLIF([IsActiveRecord],'')) as decimal) /count(*) AS decimal(10,3)) as [IsActiveRecord],
	   CAST(cast(count(NULLIF([AccountIsActive],'')) as decimal) /count(*) AS decimal(10,3)) as IsActiveAccount,
	   CAST(cast(count(AccountGroupOrder) as decimal) /count(*) AS decimal(10,3)) as AccountGroupOrder,
	   CAST(cast(count(NULLIF('','')) as decimal) /count(*) AS decimal(10,3)) as FinancialStatement, -- needs to be added 2023-03-29 SB
	   CAST(cast(count(NULLIF(AccRes1,'')) as decimal) /count(*) AS decimal(10,3)) as AccRes1,
	   CAST(cast(count(NULLIF(AccRes2,'')) as decimal) /count(*) AS decimal(10,3)) as AccRes2,
	   CAST(cast(count(NULLIF(AccRes3,'')) as decimal) /count(*) AS decimal(10,3)) as AccRes3


	 	   	   
from dw.Account 
where is_deleted != 1
group by Company 
     ) AS Grouped_Table
	 UNPIVOT ([PercentageNull] FOR Field IN ( AccountNum, AccountName, Assets,  Amortization, Costs, LiabilitiesAndEquity, Revenue, CurrentAssets, CurrentLiabilities, Depreciation, Equity, Liability, Interest, Tax, Materials, Expenses, AccountReceivables, CashAndEquivalents,Inventory, AccountType, AccountType2, AccountType3,  AccountType4, AccountType5, AccountType6, AccountType7, AccountType8 ,AccountType9, AccountType10, AccountGroupNum,AccountGroupName, AccountGroupOrder, FinancialStatement, Statement, StatementOrder,IsActiveRecord,IsActiveAccount, AccRes1, AccRes2, AccRes3
											  ) 
			  ) as Unpivoted
) as subq_unpivoted




UNION ALL



-- dw.CostBearer  (finance) added 2023-03-07 SB
SELECT [Company], [PercentageNull], [Field], [SMSSTable]
FROM( 
   select Company, 'dw.CostBearer' as SMSSTable, Field,  [PercentageNull]
   FROM ( SELECT
	  Company, 
	  CAST(cast(count(NULLIF([CostBearerNum],'')) as decimal) /count(*) AS decimal(10,3)) as [CostBearerNum],
	  CAST(cast(count(NULLIF([CostBearerName],'')) as decimal) /count(*) AS decimal(10,3)) as [CostBearerName],
	  CAST(cast(count(NULLIF([CostBearerStatus],'')) as decimal) /count(*) AS decimal(10,3)) as [CostBearerStatus],
	  CAST(cast(count(NULLIF([CostBearerGroup],'')) as decimal) /count(*) AS decimal(10,3)) as [CostBearerGroup],
	  CAST(cast(count(NULLIF([CostBearerGroup2],'')) as decimal) /count(*) AS decimal(10,3)) as [CostBearerGroup2],
	  CAST(cast(count(NULLIF([CostBearerGroup3],'')) as decimal) /count(*) AS decimal(10,3)) as [CostBearerGroup3],
	  CAST(cast(count(NULLIF([CBRes1],'')) as decimal) /count(*) AS decimal(10,3)) as [CBRes1],
	  CAST(cast(count(NULLIF([CBRes2],'')) as decimal) /count(*) AS decimal(10,3)) as [CBRes2],
	  CAST(cast(count(NULLIF([CBRes3],'')) as decimal) /count(*) AS decimal(10,3)) as [CBRes3],
	  CAST(cast(count(NULLIF(IsActiveRecord,'')) as decimal) /count(*) AS decimal(10,3)) as IsActiveRecord
	
	 	   	   
from dw.CostBearer 
where is_deleted != 1
group by Company 
     ) AS Grouped_Table
	 UNPIVOT ([PercentageNull] FOR Field IN ( [CostBearerNum], [CostBearerName], [CostBearerStatus], [CostBearerGroup], [CostBearerGroup2], [CostBearerGroup3], [CBRes1], [CBRes2], [CBRes3],[IsActiveRecord]
											  ) 
			  ) as Unpivoted
) as subq_unpivoted

UNION ALL



-- dw.CostUnit  (finance) added 2023-03-07 SB
SELECT [Company], [PercentageNull], [Field], [SMSSTable]
FROM( 
   select Company, 'dw.CostUnit' as SMSSTable, Field,  [PercentageNull]
   FROM ( SELECT
	   Company, 
	   CAST(cast(count(NULLIF([CostUnitNum],'')) as decimal) /count(*) AS decimal(10,3)) as [CostUnitNum],
	   CAST(cast(count(NULLIF([CostUnitName],'')) as decimal) /count(*) AS decimal(10,3)) as [CostUnitName],
	   CAST(cast(count(NULLIF([CostUnitStatus],'')) as decimal) /count(*) AS decimal(10,3)) as [CostUnitStatus],
	   CAST(cast(count(NULLIF([CostUnitGroup],'')) as decimal) /count(*) AS decimal(10,3)) as [CostUnitGroup],
	   CAST(cast(count(NULLIF([CostUnitGroup2],'')) as decimal) /count(*) AS decimal(10,3)) as [CostUnitGroup2],
	   CAST(cast(count(NULLIF([CostUnitGroup3],'')) as decimal) /count(*) AS decimal(10,3)) as [CostUnitGroup3],
	   CAST(cast(count(NULLIF([CURes1],'')) as decimal) /count(*) AS decimal(10,3)) as [CURes1],
	   CAST(cast(count(NULLIF([CURes2],'')) as decimal) /count(*) AS decimal(10,3)) as [CURes2],
	   CAST(cast(count(NULLIF([CURes3],'')) as decimal) /count(*) AS decimal(10,3)) as [CURes3],
	   CAST(cast(count(NULLIF(IsActiveRecord,'')) as decimal) /count(*) AS decimal(10,3)) as IsActiveRecord

	 	   	   
from dw.CostUnit 
where is_deleted != 1
group by Company 
     ) AS Grouped_Table
	 UNPIVOT ([PercentageNull] FOR Field IN ( [CostUnitNum], [CostUnitName], [CostUnitStatus], [CostUnitGroup], [CostUnitGroup2], [CostUnitGroup3], [CURes1], [CURes2], [CURes3],[IsActiveRecord]
											  ) 
			  ) as Unpivoted
) as subq_unpivoted

UNION ALL


-- dw.Claim added 2023-03-07 SB
SELECT [Company], [PercentageNull], [Field], [SMSSTable]
FROM( 
   select Company, 'dw.Claim' as SMSSTable, Field,  [PercentageNull]
   FROM ( SELECT
	   Company, 
	   CAST(cast(count(NULLIF([CustomerNum],'')) as decimal) /count(*) AS decimal(10,3)) as [CustomerNum],
	   CAST(cast(count(NULLIF([SalesOrderNum],'')) as decimal) /count(*) AS decimal(10,3)) as [SalesOrderNum],
	   CAST(cast(count(NULLIF([SalesOrderLine],'')) as decimal) /count(*) AS decimal(10,3)) as [SalesOrderLine],
	   CAST(cast(count(NULLIF([SupplierNum],'')) as decimal) /count(*) AS decimal(10,3)) as [SupplierNum],
	   CAST(cast(count(NULLIF([PurchaseOrderNum],'')) as decimal) /count(*) AS decimal(10,3)) as [PurchaseOrderNum],
	   CAST(cast(count(NULLIF([PurchaseOrderLine],'')) as decimal) /count(*) AS decimal(10,3)) as [PurchaseOrderLine],
	   CAST(cast(count(NULLIF([ClaimNum],'')) as decimal) /count(*) AS decimal(10,3)) as [ClaimNum],
	   CAST(cast(count(NULLIF([ClaimDescription],'')) as decimal) /count(*) AS decimal(10,3)) as [ClaimDescription],
	    CAST(cast(count(NULLIF([ClaimType],'')) as decimal) /count(*) AS decimal(10,3)) as [ClaimType],
	   CAST(cast(count(NULLIF([ClaimGroup],'')) as decimal) /count(*) AS decimal(10,3)) as [ClaimGroup],
	   CAST(cast(count(NULLIF([ClaimPriority],'')) as decimal) /count(*) AS decimal(10,3)) as [ClaimPriority],
	   CAST(cast(count(NULLIF([PartNum],'')) as decimal) /count(*) AS decimal(10,3)) as [PartNum],
	   CAST(cast(count(NULLIF([ClaimHandler],'')) as decimal) /count(*) AS decimal(10,3)) as [ClaimHandler],
	   CAST(cast(count(NULLIF([WarehouseCode],'')) as decimal) /count(*) AS decimal(10,3)) as [WarehouseCode],
	   CAST(cast(count(NULLIF([Comment],'')) as decimal) /count(*) AS decimal(10,3)) as [Comment],
	   CAST(cast(count(NULLIF([CreateDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [CreateDate],
	   CAST(cast(count(NULLIF([StartDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as  [StartDate],
	   CAST(cast(count(NULLIF([StartTime],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as  [StartTime],
	   CAST(cast(count(NULLIF([EndDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [EndDate],
	   CAST(cast(count(NULLIF([EndTime],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [EndTime],
	   CAST(cast(count(NULLIF([ClaimResponsible],'')) as decimal) /count(*) AS decimal(10,3)) as [ClaimResponsible],
	   CAST(cast(count(NULLIF(CLRes1,'')) as decimal) /count(*) AS decimal(10,3)) as CLRes1,
	   CAST(cast(count(NULLIF(CLRes2,'')) as decimal) /count(*) AS decimal(10,3)) as CLRes2,
	   CAST(cast(count(NULLIF(CLRes3,'')) as decimal) /count(*) AS decimal(10,3)) as CLRes3,
	   CAST(cast(count(NULLIF([IsActiveRecord],'')) as decimal) /count(*) AS decimal(10,3)) as [IsActiveRecord],
	    CAST(cast(count(NULLIF([CreateTime],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [CreateTime]
	   
from dw.Claim 
where is_deleted != 1
group by Company 
     ) AS Grouped_Table
	 UNPIVOT ([PercentageNull] FOR Field IN ([CustomerNum], [SalesOrderNum], [SalesOrderLine], [SupplierNum], [PurchaseOrderNum], [PurchaseOrderLine], [ClaimNum], [ClaimDescription], [ClaimType], [ClaimGroup], [ClaimPriority], [PartNum], [ClaimHandler], [CreateDate], [StartDate], [StartTime], [EndDate], [EndTime], [WarehouseCode], [Comment],[ClaimResponsible], CLRes1, CLRes2, CLRes3, [IsActiveRecord],[CreateTime]
											  ) 
			  ) as Unpivoted
) as subq_unpivoted

UNION ALL



-- Customer Table
SELECT [Company], [PercentageNull], [Field], [SMSSTable]
FROM( 
   select Company, 'dw.Customer' as SMSSTable, Field,  [PercentageNull]
   FROM ( SELECT
	   Company, 
	   CAST(cast(count(NULLIF(MainCustomerName,'')) as decimal) /count(*) AS decimal(10,3)) as ParentCustomerName,  --Changed 2023-03-03 MainCustomerName
	   CAST(cast(count(NULLIF(CustomerName,'')) as decimal) /count(*) AS decimal(10,3)) as CustomerName,
	   CAST(cast(count(NULLIF(CustomerNum,'')) as decimal) /count(*) AS decimal(10,3)) as CustomerNum, -- Added 2023-03-03
	   CAST(cast(count(NULLIF(AddressLine1,'')) as decimal) /count(*) AS decimal(10,3)) as AddressLine1, 
	   CAST(cast(count(NULLIF(AddressLine2,'')) as decimal) /count(*) AS decimal(10,3)) as AddressLine2, 
	   CAST(cast(count(NULLIF(AddressLine3,'')) as decimal) /count(*) AS decimal(10,3)) as AddressLine3, 
	   CAST(cast(count(NULLIF(TelephoneNum1,'')) as decimal) /count(*) AS decimal(10,3)) as TelephoneNum1, 
	   CAST(cast(count(NULLIF(TelephoneNum2,'')) as decimal) /count(*) AS decimal(10,3)) as TelephoneNum2, 
	   CAST(cast(count(NULLIF(Email,'')) as decimal) /count(*) AS decimal(10,3)) as Email, 
	   CAST(cast(count(NULLIF(ZipCode,'')) as decimal) /count(*) AS decimal(10,3)) as ZipCode, 
	   CAST(cast(count(NULLIF(City,'')) as decimal) /count(*) AS decimal(10,3)) as City, 
	   CAST(cast(count(NULLIF(State,'')) as decimal) /count(*) AS decimal(10,3)) as State, 
	   CAST(cast(count(NULLIF(SalesDistrict,'')) as decimal) /count(*) AS decimal(10,3)) as SalesDistrict, 
	   CAST(cast(count(NULLIF(CountryCode,'')) as decimal) /count(*) AS decimal(10,3)) as CountryCode, 
	   CAST(cast(count(NULLIF(CountryName,'')) as decimal) /count(*) AS decimal(10,3)) as CountryName, 
	   CAST(cast(count(NULLIF(Division,'')) as decimal) /count(*) AS decimal(10,3)) as Division, 
	   CAST(cast(count(NULLIF(CustomerIndustry,'')) as decimal) /count(*) AS decimal(10,3)) as CustomerIndustry, 
	   CAST(cast(count(NULLIF(CustomerSubIndustry,'')) as decimal) /count(*) AS decimal(10,3)) as CustomerSubIndustry, 
	   CAST(cast(count(NULLIF(CustomerGroup,'')) as decimal) /count(*) AS decimal(10,3)) as CustomerGroup, 
	   CAST(cast(count(NULLIF(CustomerSubGroup,'')) as decimal) /count(*) AS decimal(10,3)) as CustomerSubGroup, 
	  -- CAST(cast(count(NULLIF(SalesPersonCode,'')) as decimal) /count(*) AS decimal(10,3)) as SalesPersonCode, removed from SC
	   CAST(cast(count(NULLIF(SalesPersonName,'')) as decimal) /count(*) AS decimal(10,3)) as SalesPerson,  -- changed as statement 2023-03-08 salesperon SB
	   CAST(cast(count(NULLIF(SalesPersonResponsible,'')) as decimal) /count(*) AS decimal(10,3)) as SalesPersonResponsible, 
	   CAST(cast(count(NULLIF(VATNum,'')) as decimal) /count(*) AS decimal(10,3)) as VATNum, 
	   CAST(cast(count(NULLIF(OrganizationNum,'')) as decimal) /count(*) AS decimal(10,3)) as OrganisationNum, -- Changed 2023-03-03 OrganizationNum
	   CAST(cast(count(NULLIF(AccountNum,'')) as decimal) /count(*) AS decimal(10,3)) as AccountNum, 
	   CAST(cast(count(NULLIF(InternalExternal,'')) as decimal) /count(*) AS decimal(10,3)) as IsAxInterInternal, --Changed 2023-03-03 InternalExternal
	   CAST(cast(count(NULLIF(CustomerScore,'')) as decimal) /count(*) AS decimal(10,3)) as CustomerScore, 
	   CAST(cast(count(NULLIF(CustomerType,'')) as decimal) /count(*) AS decimal(10,3)) as CustomerType,
	   CAST(cast(count(NULLIF(Comments,'')) as decimal) /count(*) AS decimal(10,3)) as Comments,
	   CAST(cast(count(CreditLimit) as decimal) /count(*) AS decimal(10,3)) as CreditLimit,
	   CAST(cast(count(NULLIF(CRes1,'')) as decimal) /count(*) AS decimal(10,3)) as CRes1,
	   CAST(cast(count(NULLIF(CRes2,'')) as decimal) /count(*) AS decimal(10,3)) as CRes2,
	   CAST(cast(count(NULLIF(CRes3,'')) as decimal) /count(*) AS decimal(10,3)) as CRes3,
	   CAST(cast(count(NULLIF(IsActiveRecord,'')) as decimal) /count(*) AS decimal(10,3)) as IsActiveRecord,
	   CAST(cast(count(NULLIF(IsBusinessAreaInternal,'')) as decimal) /count(*) AS decimal(10,3)) as IsBusinessAreaInternal,
	   CAST(cast(count(NULLIF(IsCompanyGroupInternal,'')) as decimal) /count(*) AS decimal(10,3)) as IsCompanyGroupInternal,
	   CAST(cast(count(NULLIF(PaymentTerms,'')) as decimal) /count(*) AS decimal(10,3)) as PaymentTerms
	 	   	   
from dw.Customer
where is_deleted != 1
group by Company 
     ) AS Grouped_Table
	 UNPIVOT ([PercentageNull] FOR Field IN (ParentCustomerName, CustomerName, CustomerNum, AddressLine1, AddressLine2, AddressLine3, TelephoneNum1, 
	 TelephoneNum2, Email, ZipCode, City, State, SalesDistrict, CountryCode, CountryName, Division, CustomerIndustry, CustomerSubIndustry, CustomerGroup, 
	 CustomerSubGroup, SalesPerson, SalesPersonResponsible, VATNum, OrganisationNum, AccountNum, IsAxInterInternal, CustomerScore, CustomerType, 
	 Comments,CreditLimit, CRes1, CRes2, CRes3, IsActiveRecord, IsBusinessAreaInternal, IsCompanyGroupInternal, PaymentTerms 
											  ) 
			  ) as Unpivoted
) as subq_unpivoted




UNION ALL


-- dwCustomerAgreement


SELECT [Company], [PercentageNull], [Field], [SMSSTable]
FROM( 
   select Company, 'dw.CustomerAgreement' as SMSSTable, Field,  [PercentageNull]
   FROM ( SELECT
	     Company,
	   CAST(cast(count(NULLIF([CustomerNum],'')) as decimal) /count(*) AS decimal(10,3)) as [CustomerNum],
	   CAST(cast(count(NULLIF([PartNum],'')) as decimal) /count(*) AS decimal(10,3)) as [PartNum],
	   CAST(cast(count(NULLIF([AgreementCode],'')) as decimal) /count(*) AS decimal(10,3)) as [AgreementCode],
	   CAST(cast(count(NULLIF([AgreementDescription],'')) as decimal) /count(*) AS decimal(10,3)) as [AgreementDescription],
	   CAST(cast(count([DiscountPercent]) as decimal) /count(*) AS decimal(10,3)) as [DiscountPercent],
	   CAST(cast(count([UnitPrice]) as decimal) /count(*) AS decimal(10,3)) as [UnitPrice],
	   CAST(cast(count([FulfilledQty]) as decimal) /count(*) AS decimal(10,3)) as [FulfilledQty],
	    CAST(cast(count([RemainingQty]) as decimal) /count(*) AS decimal(10,3)) as [RemainingQty], -- Added 2023-03-03 SB
	   CAST(cast(count([AgreementQty]) as decimal) /count(*) AS decimal(10,3)) as [AgreementQty],
	   CAST(cast(count(NULLIF([Currency],'')) as decimal) /count(*) AS decimal(10,3)) as [Currency],
	   CAST(cast(count(NULLIF([DelivTime],'')) as decimal) /count(*) AS decimal(10,3)) as [DelivTime],
	   CAST(cast(count(NULLIF([AgreementStart],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [AgreementStart],
	   CAST(cast(count(NULLIF([AgreementEnd],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [AgreementEnd],
	   CAST(cast(count(NULLIF([CustomerTerms],'')) as decimal) /count(*) AS decimal(10,3)) as [CustomerTerms],
	   CAST(cast(count(NULLIF([UoM],'')) as decimal) /count(*) AS decimal(10,3)) as [UoM],
	   CAST(cast(count(NULLIF([CARes1],'')) as decimal) /count(*) AS decimal(10,3)) as [CARes1], -- Added 2023-03-03 SB
	   CAST(cast(count(NULLIF([CARes2],'')) as decimal) /count(*) AS decimal(10,3)) as [CARes2], -- Added 2023-03-03 SB
	   CAST(cast(count(NULLIF([CARes3],'')) as decimal) /count(*) AS decimal(10,3)) as [CARes3], -- Added 2023-03-03 SB
	   CAST(cast(count(NULLIF(IsActiveRecord,'')) as decimal) /count(*) AS decimal(10,3)) as IsActiveRecord,
	   CAST(cast(count(NULLIF(AgreementResponsible,'')) as decimal) /count(*) AS decimal(10,3)) as AgreementResponsible


from dw.CustomerAgreement
where is_deleted != 1
group by Company 
 ) AS Grouped_Table
	 UNPIVOT ([PercentageNull] FOR Field IN ([CustomerNum], [PartNum], [AgreementCode], [AgreementDescription], [DiscountPercent], [UnitPrice], [FulfilledQty],[RemainingQty], [AgreementQty],
	 [Currency], [DelivTime], [AgreementStart], [AgreementEnd], [CustomerTerms], [UoM], [CARes1], [CARes2], [CARes3], IsActiveRecord, AgreementResponsible
											  ) 
			  ) as Unpivoted
) as subq_unpivoted

UNION ALL

-- dwDepartment  added 2023-03-03 SB

SELECT [Company], [PercentageNull], [Field], [SMSSTable]
FROM( 
   select Company, 'dw.Department' as SMSSTable, Field,  [PercentageNull]
   FROM ( SELECT
	     Company,
	   CAST(cast(count(NULLIF([DepartmentCode],'')) as decimal) /count(*) AS decimal(10,3)) as [DepartmentCode],
	   CAST(cast(count(NULLIF([DepartmentName],'')) as decimal) /count(*) AS decimal(10,3)) as [DepartmentName],
	   CAST(cast(count(NULLIF([DepartmentSite],'')) as decimal) /count(*) AS decimal(10,3)) as [DepartmentSite],
	   CAST(cast(count(NULLIF([Address],'')) as decimal) /count(*) AS decimal(10,3)) as [Address],
	   CAST(cast(count(NULLIF([ZipCode],'')) as decimal) /count(*) AS decimal(10,3)) as [ZipCode],
	   CAST(cast(count(NULLIF([City],'')) as decimal) /count(*) AS decimal(10,3)) as [City],
	   CAST(cast(count(NULLIF([State],'')) as decimal) /count(*) AS decimal(10,3)) as [State],
	   CAST(cast(count(NULLIF([CountryCode],'')) as decimal) /count(*) AS decimal(10,3)) as [CountryCode],
	   CAST(cast(count(NULLIF([CountryName],'')) as decimal) /count(*) AS decimal(10,3)) as [CountryName],
	   CAST(cast(count(NULLIF([DepartmentType],'')) as decimal) /count(*) AS decimal(10,3)) as [DepartmentType],
	   CAST(cast(count(NULLIF([DepartmentDescription],'')) as decimal) /count(*) AS decimal(10,3)) as [DepartmentDescription],
	   CAST(cast(count([IsActiveRecord]) as decimal) /count(*) AS decimal(10,3)) as [IsActiveRecord],
	   CAST(cast(count(NULLIF([DptRes1],'')) as decimal) /count(*) AS decimal(10,3)) as [DptRes1],
	   CAST(cast(count(NULLIF([DptRes2],'')) as decimal) /count(*) AS decimal(10,3)) as [DptRes2],
	   CAST(cast(count(NULLIF([DptRes3],'')) as decimal) /count(*) AS decimal(10,3)) as [DptRes3]

from dw.Department
where is_deleted != 1
group by Company 
 ) AS Grouped_Table
	 UNPIVOT ([PercentageNull] FOR Field IN ([DepartmentCode], [DepartmentName], [DepartmentSite], [Address], [ZipCode], [City], [State], [CountryCode], [CountryName], [DepartmentType], [DepartmentDescription], [IsActiveRecord], [DptRes1], [DptRes2], [DptRes3]
											  ) 
			  ) as Unpivoted
) as subq_unpivoted

UNION ALL


--DwFinanceBudget

SELECT [Company], [PercentageNull], [Field], [SMSSTable]
FROM( 
   select Company, 'dw.FinanceBudget' as SMSSTable, Field,  [PercentageNull]
   FROM ( SELECT
        Company,
	   CAST(cast(count(NULLIF([BudgetType],'')) as decimal) /count(*) AS decimal(10,3)) as [BudgetType],
	   CAST(cast(count(NULLIF([BudgetName],'')) as decimal) /count(*) AS decimal(10,3)) as [BudgetName],
	   CAST(cast(count(NULLIF([BudgetDescription],'')) as decimal) /count(*) AS decimal(10,3)) as [BudgetDescription],
	   CAST(cast(count(NULLIF([BudgetPeriod],'')) as decimal) /count(*) AS decimal(10,3)) as [BudgetPeriod],
	   CAST(cast(count(NULLIF([BudgetPeriodDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as  [BudgetPeriodDate],
	   CAST(cast(count(NULLIF([PeriodType],'')) as decimal) /count(*) AS decimal(10,3)) as [PeriodType],
	   CAST(cast(count(NULLIF([Currency],'')) as decimal) /count(*) AS decimal(10,3)) as [Currency],
	   CAST(cast(count([BudgetFinance]) as decimal) /count(*) AS decimal(10,3)) as [BudgetFinance],
	   CAST(cast(count(NULLIF([CostBearerNum],'')) as decimal) /count(*) AS decimal(10,3)) as [CostBearerNum],
	   CAST(cast(count(NULLIF([CostUnitNum],'')) as decimal) /count(*) AS decimal(10,3)) as [CostUnitNum],
	   CAST(cast(count(NULLIF([AccountNum],'')) as decimal) /count(*) AS decimal(10,3)) as [AccountNum],
	   CAST(cast(count(NULLIF([AccountGroupNum],'')) as decimal) /count(*) AS decimal(10,3)) as [AccountGroupNum],
	   CAST(cast(count(ExchangeRate) as decimal) /count(*) AS decimal(10,3)) as [ExchangeRate],
	   CAST(cast(count(NULLIF([IsActiveRecord],'')) as decimal) /count(*) AS decimal(10,3)) as [IsActiveRecord],
	   CAST(cast(count(NULLIF([BRes1],'')) as decimal) /count(*) AS decimal(10,3)) as [BRes1],
	   CAST(cast(count(NULLIF([BRes2],'')) as decimal) /count(*) AS decimal(10,3)) as [BRes2],
	   CAST(cast(count(NULLIF([BRes3],'')) as decimal) /count(*) AS decimal(10,3)) as [BRes3]

from dw.FinanceBudget

group by Company 
) AS Grouped_Table
	 UNPIVOT ([PercentageNull] FOR Field IN ([BudgetType], [BudgetName], [BudgetDescription], [BudgetPeriod], [BudgetPeriodDate], [PeriodType], [Currency], [BudgetFinance], 
	 [CostBearerNum], [CostUnitNum],[AccountNum],[AccountGroupNum],[ExchangeRate],[IsActiveRecord],[BRes1],[BRes2],[BRes3]
											  ) 
			  ) as Unpivoted
) as subq_unpivoted


UNION ALL
 

--dw.GeneralLedger

SELECT [Company], [PercentageNull], [Field], [SMSSTable]
FROM( 
   select Company, 'dw.GeneralLedger' as SMSSTable, Field,  [PercentageNull]
   FROM ( SELECT
        Company,
	   CAST(cast(count(NULLIF([AccountNum],'')) as decimal) /count(*) AS decimal(10,3)) as [AccountNum],
	   CAST(cast(count(NULLIF([CostUnitNum],'')) as decimal) /count(*) AS decimal(10,3)) as [CostUnitNum],
	   CAST(cast(count(NULLIF([CostBearerNum],'')) as decimal) /count(*) AS decimal(10,3)) as [CostBearerNum],
	   CAST(cast(count(NULLIF([JournalType],'')) as decimal) /count(*) AS decimal(10,3)) as [JournalType],
	   CAST(cast(count(NULLIF([JournalDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [JournalDate],
	   CAST(cast(count(NULLIF([JournalNum],'')) as decimal) /count(*) AS decimal(10,3)) as [JournalNum],
	   CAST(cast(count(NULLIF([JournalLine],'')) as decimal) /count(*) AS decimal(10,3)) as [JournalLine],
	   CAST(cast(count(NULLIF([AccountingDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [AccountingDate],
	   CAST(cast(count(NULLIF([Description],'')) as decimal) /count(*) AS decimal(10,3)) as [Description],
	   CAST(cast(count(NULLIF([Currency],'')) as decimal) /count(*) AS decimal(10,3)) as [Currency],
	   CAST(cast(count([ExchangeRate]) as decimal) /count(*) AS decimal(10,3)) as [ExchangeRate],
	   CAST(cast(count([InvoiceAmount]) as decimal) /count(*) AS decimal(10,3)) as [TransactionAmount], --changed from InvoiceAmount 2023-08-04
	   CAST(cast(count(NULLIF([CustomerNum],'')) as decimal) /count(*) AS decimal(10,3)) as [CustomerNum],
	   CAST(cast(count(NULLIF([SupplierNum],'')) as decimal) /count(*) AS decimal(10,3)) as [SupplierNum],
	   CAST(cast(count(NULLIF([SalesInvoiceNum],'')) as decimal) /count(*) AS decimal(10,3)) as [SalesInvoiceNum],
	   CAST(cast(count(NULLIF([PurchaseInvoiceNum],'')) as decimal) /count(*) AS decimal(10,3)) as [PurchaseInvoiceNum],
	   CAST(cast(count(NULLIF([SupplierInvoiceNum],'')) as decimal) /count(*) AS decimal(10,3)) as [SupplierInvoiceNum],
	   CAST(cast(count(NULLIF([LinkToOriginalInvoice],'')) as decimal) /count(*) AS decimal(10,3)) as [LinkToOriginalInvoice],
	   CAST(cast(count(NULLIF([TransactionNum],'')) as decimal) /count(*) AS decimal(10,3)) as [TransactionNum],
	   CAST(cast(count(NULLIF([GLRes1],'')) as decimal) /count(*) AS decimal(10,3)) as [GLRes1],
	   CAST(cast(count(NULLIF([GLRes2],'')) as decimal) /count(*) AS decimal(10,3)) as [GLRes2],
	   CAST(cast(count(NULLIF([GLRes3],'')) as decimal) /count(*) AS decimal(10,3)) as [GLRes3],
       CAST(cast(count([InvoiceAmountLC]) as decimal) /count(*) AS decimal(10,3)) as [TransactionAmountLC],--changed from InvoiceAmountLC 
	   CAST(cast(count(NULLIF(IndexKey,'')) as decimal) /count(*) AS decimal(10,3)) as [IndexKey],
	   CAST(cast(count(NULLIF([IsActiveRecord],'')) as decimal) /count(*) AS decimal(10,3)) as [IsActiveRecord],
	   CAST(cast(count(NULLIF(IsManual,'')) as decimal) /count(*) AS decimal(10,3)) as [IsManual],
	   CAST(cast(count(NULLIF([ProjectNum],'')) as decimal) /count(*) AS decimal(10,3)) as [ProjectNum],
	   CAST(cast(count(NULLIF(UserIDApproved,'')) as decimal) /count(*) AS decimal(10,3)) as [UserIDApproved],
	   CAST(cast(count(NULLIF(UserIDBooked,'')) as decimal) /count(*) AS decimal(10,3)) as [UserIDBooked]

	   


from dw.GeneralLedger
where is_deleted != 1
group by Company 
) AS Grouped_Table
	 UNPIVOT ([PercentageNull] FOR Field IN ([AccountNum], [CostUnitNum], [CostBearerNum], [JournalType], [JournalDate], [JournalNum], [JournalLine], [AccountingDate], [Description], 	 [Currency], [ExchangeRate], [TransactionAmount], [CustomerNum], [SupplierNum], [SalesInvoiceNum], [PurchaseInvoiceNum],[SupplierInvoiceNum], [LinkToOriginalInvoice], [TransactionNum], [GLRes1], [GLRes2], [GLRes3], [TransactionAmountLC], [IndexKey],[IsActiveRecord],[IsManual], [ProjectNum],[UserIDApproved],[UserIDBooked] 
											  ) 
			  ) as Unpivoted
) as subq_unpivoted


UNION ALL

--dw.OpenBalance

SELECT [Company], [PercentageNull], [Field], [SMSSTable]
FROM( 
   select Company, 'dw.OpenBalance' as SMSSTable, Field,  [PercentageNull]
   FROM ( SELECT
        Company,
		CAST(cast(count(NULLIF([AccountNum],'')) as decimal) /count(*) AS decimal(10,3)) as [AccountNum],
		CAST(cast(count(NULLIF([CostUnitNum],'')) as decimal) /count(*) AS decimal(10,3)) as [CostUnitNum],
		CAST(cast(count(NULLIF([CostBearerNum],'')) as decimal) /count(*) AS decimal(10,3)) as [CostBearerNum],
		CAST(cast(count(NULLIF([ProjectNum],'')) as decimal) /count(*) AS decimal(10,3)) as [ProjectNum],
		CAST(cast(count(NULLIF([AccountingDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [AccountingDate],
	    CAST(cast(count(NULLIF([Description],'')) as decimal) /count(*) AS decimal(10,3)) as [Description],
		CAST(cast(count([OpeningBalance]) as decimal) /count(*) AS decimal(10,3)) as [OpeningBalance],
		CAST(cast(count(NULLIF([Currency],'')) as decimal) /count(*) AS decimal(10,3)) as [Currency],
		CAST(cast(count([ExchangeRate]) as decimal) /count(*) AS decimal(10,3)) as [ExchangeRate],
		CAST(cast(count(NULLIF([OBRes1],'')) as decimal) /count(*) AS decimal(10,3)) as [OBRes1],
		CAST(cast(count(NULLIF([OBRes2],'')) as decimal) /count(*) AS decimal(10,3)) as [OBRes2],
		CAST(cast(count(NULLIF([OBRes3],'')) as decimal) /count(*) AS decimal(10,3)) as [OBRes3],
		CAST(cast(count(NULLIF([IsActiveRecord],'')) as decimal) /count(*) AS decimal(10,3)) as [IsActiveRecord]

	 --   CAST(cast(count(NULLIF(,'')) as decimal) /count(*) AS decimal(10,3)) as ,
	 --   CAST(cast(count(NULLIF(,'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as ,
	--    CAST(cast(count() as decimal) /count(*) AS decimal(10,3)) as ,


from dw.OpenBalance
where is_deleted != 1
group by Company 
) AS Grouped_Table
	 UNPIVOT ([PercentageNull] FOR Field IN ([AccountNum], [CostUnitNum], [CostBearerNum], [ProjectNum],  [AccountingDate], [Description], [OpeningBalance], [Currency],  [ExchangeRate], [OBRes1], [OBRes2], [OBRes3],[IsActiveRecord]
											  ) 
			  ) as Unpivoted
) as subq_unpivoted


UNION ALL

-- DwPart

SELECT [Company], [PercentageNull], [Field], [SMSSTable]
FROM( 
   select Company, 'dw.Part' as SMSSTable, Field,  [PercentageNull]
   FROM ( SELECT
        Company,
       CAST(cast(count(NULLIF(PartNum,'')) as decimal) /count(*) AS decimal(10,3)) as PartNum,
	   CAST(cast(count(NULLIF(PartName,'')) as decimal) /count(*) AS decimal(10,3)) as PartName,
	   CAST(cast(count(NULLIF(PartDescription,'')) as decimal) /count(*) AS decimal(10,3)) as PartDescription,
	   CAST(cast(count(NULLIF(PartDescription2,'')) as decimal) /count(*) AS decimal(10,3)) as PartDescription2,
	   CAST(cast(count(NULLIF(PartDescription3,'')) as decimal) /count(*) AS decimal(10,3)) as PartDescription3,
	   CAST(cast(count(NULLIF(ProductGroup,'')) as decimal) /count(*) AS decimal(10,3)) as ProductGroup,
	   CAST(cast(count(NULLIF(ProductGroup2,'')) as decimal) /count(*) AS decimal(10,3)) as ProductGroup2,
	   CAST(cast(count(NULLIF(ProductGroup3,'')) as decimal) /count(*) AS decimal(10,3)) as ProductGroup3,
	   CAST(cast(count(NULLIF(ProductGroup4,'')) as decimal) /count(*) AS decimal(10,3)) as ProductGroup4,
	   CAST(cast(count(NULLIF(Brand,'')) as decimal) /count(*) AS decimal(10,3)) as Brand,
	   CAST(cast(count(CommodityCode) as decimal) /count(*) AS decimal(10,3)) as CommodityCode,
	   CAST(cast(count(NULLIF(PartReplacementNum,'')) as decimal) /count(*) AS decimal(10,3)) as PartReplacementNum,
	   CAST(cast(count(NULLIF(PartStatus,'')) as decimal) /count(*) AS decimal(10,3)) as PartStatus,
	   CAST(cast(count(NULLIF(CountryOfOrigin,'')) as decimal) /count(*) AS decimal(10,3)) as CountryOfOriginCode, -- Changed AS statement due to name change 2023-03-08 SB
	   CAST(CAST(COUNT(NULLIF(NetWeight, 0)) AS DECIMAL) / COUNT(*) AS DECIMAL(10, 3)) as NetWeight, -- changed 2023-05-10 SB to exclude both null and 0 weight CAST(cast(count(NetWeight) as decimal) /count(*) AS decimal(10,3)) ,
	   CAST(cast(count(NULLIF(UoM,'')) as decimal) /count(*) AS decimal(10,3)) as UoM,
	   CAST(cast(count(NULLIF(Material,'')) as decimal) /count(*) AS decimal(10,3)) as Material,
	   CAST(cast(count(NULLIF(Barcode,'')) as decimal) /count(*) AS decimal(10,3)) as Barcode,
	   CAST(cast(count(ReOrderLevel) as decimal) /count(*) AS decimal(10,3)) as ReOrderLevel,
	   CAST(cast(count(NULLIF(PartResponsible,'')) as decimal) /count(*) AS decimal(10,3)) as PartResponsible,
	   CAST(cast(count(NULLIF(MainSupplier,'')) as decimal) /count(*) AS decimal(10,3)) as PrimarySupplier, -- changed from MainSupplier
	   CAST(cast(count(NULLIF(AlternativeSupplier,'')) as decimal) /count(*) AS decimal(10,3)) as AlternativeSupplier,
	   CAST(cast(count(NULLIF(StartDate,'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as StartDate,
	   CAST(cast(count(NULLIF(EndDate,'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as EndDate,
	   CAST(cast(count(NULLIF([PARes1],'')) as decimal) /count(*) AS decimal(10,3)) as [PARes1],
	   CAST(cast(count(NULLIF([PARes2],'')) as decimal) /count(*) AS decimal(10,3)) as [PARes2],
	   CAST(cast(count(NULLIF([PARes3],'')) as decimal) /count(*) AS decimal(10,3)) as [PARes3],
	   CAST(cast(count([IsActiveRecord]) as decimal) /count(*) AS decimal(10,3)) as [IsActiveRecord]



from dw.Part
where is_deleted != 1
group by Company 
) AS Grouped_Table
	 UNPIVOT ([PercentageNull] FOR Field IN (PartNum, PartName, PartDescription, PartDescription2, PartDescription3, ProductGroup, ProductGroup2, ProductGroup3, ProductGroup4, Brand,
	                                         CommodityCode, PartReplacementNum,  PartStatus, CountryOfOriginCode, NetWeight, UoM, Material, Barcode, ReOrderLevel, PartResponsible, PrimarySupplier, AlternativeSupplier, StartDate, EndDate, [PARes1], [PARes2], [PARes3], [IsActiveRecord] 
											  ) 
			  ) as Unpivoted
) as subq_unpivoted


UNION ALL


--dw.Project


SELECT [Company], [PercentageNull], [Field], [SMSSTable]
FROM( 
   select Company,  'dw.Project' as SMSSTable, Field,  [PercentageNull]
   FROM ( SELECT
       Company,
       CAST(cast(count(NULLIF([MainProjectNum],'')) as decimal) /count(*) AS decimal(10,3)) as [MainProjectNum],
	   CAST(cast(count(NULLIF([ProjectNum],'')) as decimal) /count(*) AS decimal(10,3)) as [ProjectNum],
	   CAST(cast(count(NULLIF([ProjectDescription],'')) as decimal) /count(*) AS decimal(10,3)) as [ProjectDescription],
	   CAST(cast(count(NULLIF([Organisation],'')) as decimal) /count(*) AS decimal(10,3)) as [Organisation],
	   CAST(cast(count(NULLIF([ProjectStatus],'')) as decimal) /count(*) AS decimal(10,3)) as [ProjectStatus],
	   CAST(cast(count(NULLIF([ProjectCategory],'')) as decimal) /count(*) AS decimal(10,3)) as [ProjectCategory],
	   --CAST(cast(count(NULLIF([WBSElement],'')) as decimal) /count(*) AS decimal(10,3)) as [WBSElement], not in SC anymore
	   --CAST(cast(count(NULLIF([ObjectNum],'')) as decimal) /count(*) AS decimal(10,3)) as [ObjectNum], not in SC anymore
	   CAST(cast(count(NULLIF([Currency],'')) as decimal) /count(*) AS decimal(10,3)) as [Currency],
	   CAST(cast(count(NULLIF([WarehouseCode],'')) as decimal) /count(*) AS decimal(10,3)) as [WarehouseCode],
	   CAST(cast(count(NULLIF([ProjectResponsible],'')) as decimal) /count(*) AS decimal(10,3)) as [ProjectResponsible],
	   CAST(cast(count(NULLIF([Comments],'')) as decimal) /count(*) AS decimal(10,3)) as [Comments],
	   CAST(cast(count(NULLIF([StartDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [StartDate],
	   CAST(cast(count(NULLIF([EndDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [EndDate],
	   CAST(cast(count(NULLIF([EstEndDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [EstEndDate],
	   CAST(cast(count([ProjectCompletion]) as decimal) /count(*) AS decimal(10,3)) as [ProjectCompletion],
	   CAST(cast(count([ActualCost]) as decimal) /count(*) AS decimal(10,3)) as [ActualCost],
	   CAST(cast(count(NULLIF([IsActiveRecord],'')) as decimal) /count(*) AS decimal(10,3)) as [IsActiveRecord],
	   CAST(cast(count(NULLIF(ProjectNumLine,'')) as decimal) /count(*) AS decimal(10,3)) as ProjectNumLine,
	   CAST(cast(count(NULLIF('','')) as decimal) /count(*) AS decimal(10,3)) as ProjectNumSubLine, -- missing from DW, empty
	   CAST(cast(count(NULLIF(PJRes1,'')) as decimal) /count(*) AS decimal(10,3)) as PJRes1,
	   CAST(cast(count(NULLIF(PJRes2,'')) as decimal) /count(*) AS decimal(10,3)) as PJRes2,
	   CAST(cast(count(NULLIF(PJRes3,'')) as decimal) /count(*) AS decimal(10,3)) as PJRes3
	   
from dw.Project
where is_deleted != 1
group by Company 
) AS Grouped_Table
	 UNPIVOT ([PercentageNull] FOR Field IN ([MainProjectNum], [ProjectNum], [ProjectDescription], [Organisation], [ProjectStatus], [ProjectCategory], 
	 [Currency], [WarehouseCode], [ProjectResponsible], [Comments],  [StartDate], [EndDate], [EstEndDate], [ProjectCompletion], [ActualCost],[IsActiveRecord], [ProjectNumLine],ProjectNumSubLine, PJRes1, PJRes2, PJRes3
											  ) 
			  ) as Unpivoted
) as subq_unpivoted

UNION ALL


--dw.PurchaseInvoice

SELECT [Company], [PercentageNull], [Field], [SMSSTable]
FROM( 
   select Company, 'dw.PurchaseInvoice' as SMSSTable, Field,  [PercentageNull]
   FROM ( SELECT
       Company,
       CAST(cast(count(NULLIF([PurchaseOrderNum],'')) as decimal) /count(*) AS decimal(10,3)) as [PurchaseOrderNum],
	   CAST(cast(count(NULLIF([PurchaseOrderLine],'')) as decimal) /count(*) AS decimal(10,3)) as [PurchaseOrderLine],
	   CAST(cast(count(NULLIF([PurchaseOrderSubLine],'')) as decimal) /count(*) AS decimal(10,3)) as [PurchaseOrderSubLine],
	   CAST(cast(count(NULLIF([PurchaseOrderType],'')) as decimal) /count(*) AS decimal(10,3)) as [PurchaseOrderType],
	   CAST(cast(count(NULLIF([PurchaseInvoiceNum],'')) as decimal) /count(*) AS decimal(10,3)) as [PurchaseInvoiceNum],
	   CAST(cast(count(NULLIF([PurchaseInvoiceLine],'')) as decimal) /count(*) AS decimal(10,3)) as [PurchaseInvoiceLine],
	   CAST(cast(count(NULLIF([PurchaseInvoiceType],'')) as decimal) /count(*) AS decimal(10,3)) as [PurchaseInvoiceType],
	   CAST(cast(count(NULLIF([PurchaseInvoiceDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [PurchaseInvoiceDate],
	   CAST(cast(count(NULLIF([ActualDelivDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [ActualReceiveDate], -- was [ActualDelivDate]
	   CAST(cast(count(NULLIF([SupplierNum],'')) as decimal) /count(*) AS decimal(10,3)) as [SupplierNum],
	   CAST(cast(count(NULLIF([PartNum],'')) as decimal) /count(*) AS decimal(10,3)) as [PartNum],
	   CAST(cast(count([PurchaseInvoiceQty]) as decimal) /count(*) AS decimal(10,3)) as [PurchaseInvoiceQty],
	   CAST(cast(count(NULLIF([UoM],'')) as decimal) /count(*) AS decimal(10,3)) as [UoM],
	   CAST(cast(count([UnitPrice]) as decimal) /count(*) AS decimal(10,3)) as [UnitPrice],
	   CAST(cast(count([DiscountPercent]) as decimal) /count(*) AS decimal(10,3)) as [DiscountPercent],
	   CAST(cast(count([DiscountAmount]) as decimal) /count(*) AS decimal(10,3)) as [DiscountAmount],
	   CAST(cast(count([TotalMiscChrg]) as decimal) /count(*) AS decimal(10,3)) as [TotalMiscChrg],
	   CAST(cast(count([VATAmount]) as decimal) /count(*) AS decimal(10,3)) as [VATAmount],
	   CAST(cast(count([ExchangeRate]) as decimal) /count(*) AS decimal(10,3)) as [ExchangeRate],
	   CAST(cast(count(NULLIF([Currency],'')) as decimal) /count(*) AS decimal(10,3)) as [Currency],
	   CAST(cast(count(NULLIF([CreditMemo],'')) as decimal) /count(*) AS decimal(10,3)) as [IsCreditMemo], -- Changed AS statement due to name change 2023-03-08 SB
	   CAST(cast(count(NULLIF([PurchaserName],'')) as decimal) /count(*) AS decimal(10,3)) as [PurchaserName],
	   CAST(cast(count(NULLIF([WarehouseCode],'')) as decimal) /count(*) AS decimal(10,3)) as [WarehouseCode],
	   CAST(cast(count(NULLIF([PurchaseChannel],'')) as decimal) /count(*) AS decimal(10,3)) as [PurchaseChannel],
	   CAST(cast(count(NULLIF([ActualShipDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [ActualShipDate],
	   CAST(cast(count(NULLIF([Comment],'')) as decimal) /count(*) AS decimal(10,3)) as [Comment],
	   CAST(cast(count(NULLIF([IsActiveRecord],'')) as decimal) /count(*) AS decimal(10,3)) as [IsActiveRecord],
	   CAST(cast(count(NULLIF([IsInvoiceClosed],'')) as decimal) /count(*) AS decimal(10,3)) as [IsInvoiceClosed],
	   CAST(cast(count(NULLIF([PIRes1],'')) as decimal) /count(*) AS decimal(10,3)) as [PIRes1],
	   CAST(cast(count(NULLIF([PIRes2],'')) as decimal) /count(*) AS decimal(10,3)) as [PIRes2],
	   CAST(cast(count(NULLIF([PIRes3],'')) as decimal) /count(*) AS decimal(10,3)) as [PIRes3],
	   CAST(cast(count(NULLIF([PurchaseInvoiceSubLine],'')) as decimal) /count(*) AS decimal(10,3)) as [PurchaseInvoiceSubline]

from dw.PurchaseInvoice
where is_deleted != 1
group by Company
) AS Grouped_Table
	 UNPIVOT ([PercentageNull] FOR Field IN ([PurchaseOrderNum], [PurchaseOrderLine], [PurchaseOrderSubLine], [PurchaseOrderType], [PurchaseInvoiceNum], [PurchaseInvoiceLine], [PurchaseInvoiceType], 
	 [PurchaseInvoiceDate], [ActualReceiveDate], [SupplierNum],
	 [PartNum], [PurchaseInvoiceQty],  [UoM], [UnitPrice], [DiscountPercent], [DiscountAmount], [TotalMiscChrg],[VATAmount] ,[ExchangeRate] , [Currency],
	 [IsCreditMemo], [PurchaserName], [WarehouseCode], [PurchaseChannel],[ActualShipDate],[Comment],[IsActiveRecord], [IsInvoiceClosed],[PIRes1],[PIRes2],[PIRes3],[PurchaseInvoiceSubline] 
											  ) 
			  ) as Unpivoted
) as subq_unpivoted

UNION ALL

--dw.PurchaseLedger

SELECT [Company], [PercentageNull], [Field], [SMSSTable]
FROM( 
   select Company, 'dw.PurchaseLedger' as SMSSTable, Field,  [PercentageNull]
   FROM ( SELECT
       Company,
       CAST(cast(count(NULLIF([SupplierNum],'')) as decimal) /count(*) AS decimal(10,3)) as [SupplierNum],
	   CAST(cast(count(NULLIF([PurchaseOrderNum],'')) as decimal) /count(*) AS decimal(10,3)) as [PurchaseOrderNum],
	   CAST(cast(count(NULLIF([PurchaseInvoiceNum],'')) as decimal) /count(*) AS decimal(10,3)) as [PurchaseInvoiceNum],
	   CAST(cast(count(NULLIF([PurchaseInvoiceDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [PurchaseInvoiceDate],
	   CAST(cast(count(NULLIF([PurchaseDueDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [PurchaseDueDate],
	   CAST(cast(count(NULLIF([PurchaseLastPaymentDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [PurchaseLastPaymentDate],
	   CAST(cast(count([InvoiceAmount]) as decimal) /count(*) AS decimal(10,3)) as [InvoiceAmount],
	   CAST(cast(count([ExchangeRate]) as decimal) /count(*) AS decimal(10,3)) as [ExchangeRate],
	   CAST(cast(count(NULLIF([Currency],'')) as decimal) /count(*) AS decimal(10,3)) as [Currency],
	   CAST(cast(count([VATAmount]) as decimal) /count(*) AS decimal(10,3)) as [VATAmount],
	   CAST(cast(count(NULLIF([VATCode],'')) as decimal) /count(*) AS decimal(10,3)) as [VATCode],
	   CAST(cast(count(NULLIF([PayToName],'')) as decimal) /count(*) AS decimal(10,3)) as [PayToName],
	   CAST(cast(count(NULLIF([PayToCity],'')) as decimal) /count(*) AS decimal(10,3)) as [PayToCity],
	   CAST(cast(count(NULLIF([PayToContact],'')) as decimal) /count(*) AS decimal(10,3)) as [PayToContact],
	   CAST(cast(count(NULLIF([PaymentTerms],'')) as decimal) /count(*) AS decimal(10,3)) as [PaymentTerms],
	   --CAST(cast(count(NULLIF([PrePaymentNum],'')) as decimal) /count(*) AS decimal(10,3)) as [PrePaymentNum],  NOT REQUESTED IN SC any longer
	   --CAST(cast(count(NULLIF([LastPaymentNum],'')) as decimal) /count(*) AS decimal(10,3)) as [LastPaymentNum], NOT REQUESTED IN SC any longer
	   CAST(cast(count([PaidInvoiceAmount]) as decimal) /count(*) AS decimal(10,3)) as [PaidInvoiceAmount],
	   CAST(cast(count(NULLIF([AccountingDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [AccountingDate],
	  CAST(cast(count(NULLIF([VATCodeDesc],'')) as decimal) /count(*) AS decimal(10,3)) as [VATCodeDesc],
	   CAST(cast(count([RemainingInvoiceAmount]) as decimal) /count(*) AS decimal(10,3)) as [RemainingInvoiceAmount],
	   CAST(cast(count(NULLIF([LinkToOriginalInvoice],'')) as decimal) /count(*) AS decimal(10,3)) as [LinkToOriginalInvoice],
	   CAST(cast(count(NULLIF([IsActiveRecord],'')) as decimal) /count(*) AS decimal(10,3)) as [IsActiveRecord],
	   CAST(cast(count(NULLIF([IsInvoiceClosed],'')) as decimal) /count(*) AS decimal(10,3)) as [IsInvoiceClosed],
	   CAST(cast(count([PaymentEvents]) as decimal) /count(*) AS decimal(10,3)) as [PaymentEvents],
	   CAST(cast(count(NULLIF([SupplierInvoiceNum],'')) as decimal) /count(*) AS decimal(10,3)) as [SupplierInvoiceNum],
	   CAST(cast(count(NULLIF([CostUnitNum],'')) as decimal) /count(*) AS decimal(10,3)) as [CostUnitNum],
	     CAST(cast(count(NULLIF([PLRes1],'')) as decimal) /count(*) AS decimal(10,3)) as [PLRes1],
	   CAST(cast(count(NULLIF([PLRes2],'')) as decimal) /count(*) AS decimal(10,3)) as [PLRes2],
	   CAST(cast(count(NULLIF([PLRes3],'')) as decimal) /count(*) AS decimal(10,3)) as [PLRes3]
	  

from dw.PurchaseLedger
where is_deleted != 1
group by Company 
) AS Grouped_Table
	 UNPIVOT ([PercentageNull] FOR Field IN ([SupplierNum], [PurchaseOrderNum], [PurchaseInvoiceNum], [PurchaseInvoiceDate], [PurchaseDueDate], [PurchaseLastPaymentDate], [InvoiceAmount], [ExchangeRate], [Currency], [VATAmount],
	                                         [VATCode], [PayToName],  [PayToCity], [PayToContact], [PaymentTerms], [PaidInvoiceAmount] , [AccountingDate], 
											 [VATCodeDesc], [RemainingInvoiceAmount],[LinkToOriginalInvoice],[IsActiveRecord],[IsInvoiceClosed], [PaymentEvents], [SupplierInvoiceNum], [CostUnitNum],[PLRes1],[PLRes2],[PLRes3]
											  ) 
			  ) as Unpivoted
) as subq_unpivoted

UNION ALL

   

--dw.PurchaseOrder

SELECT [Company], [PercentageNull], [Field], [SMSSTable]
FROM( 
   select Company, 'dw.PurchaseOrder' as SMSSTable, Field,  [PercentageNull]
   FROM ( SELECT
       Company,
       CAST(cast(count(NULLIF([PurchaseOrderNum],'')) as decimal) /count(*) AS decimal(10,3)) as [PurchaseOrderNum],
	   CAST(cast(count(NULLIF([PurchaseOrderLine],'')) as decimal) /count(*) AS decimal(10,3)) as [PurchaseOrderLine],
	   CAST(cast(count(NULLIF([PurchaseOrderSubLine],'')) as decimal) /count(*) AS decimal(10,3)) as [PurchaseOrderSubLine],
	   CAST(cast(count(NULLIF([PurchaseOrderType],'')) as decimal) /count(*) AS decimal(10,3)) as [PurchaseOrderType],
	   CAST(cast(count(NULLIF([PurchaseOrderDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [PurchaseOrderDate],
	   CAST(cast(count(NULLIF([PurchaseOrderStatus],'')) as decimal) /count(*) AS decimal(10,3)) as [PurchaseOrderStatus],
	   CAST(cast(count(NULLIF([OrgReqDelivDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [OrgReqDelivDate],
	   CAST(cast(count(NULLIF([CommittedDelivDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [CommittedDelivDate],
	   CAST(cast(count(NULLIF([ActualDelivDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [ActualDelivDate],
	   CAST(cast(count(NULLIF([ReqDelivDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [ReqDelivDate],
	   CAST(cast(count(NULLIF([PurchaseInvoiceNum],'')) as decimal) /count(*) AS decimal(10,3)) as [PurchaseInvoiceNum],
	   CAST(cast(count(NULLIF([PartNum],'')) as decimal) /count(*) AS decimal(10,3)) as [PartNum],
	   CAST(cast(count(NULLIF([SupplierNum],'')) as decimal) /count(*) AS decimal(10,3)) as [SupplierNum],
	   CAST(cast(count(NULLIF([SupplierPartNum],'')) as decimal) /count(*) AS decimal(10,3)) as [SupplierPartNum],
	   CAST(cast(count(NULLIF([SupplierInvoiceNum],'')) as decimal) /count(*) AS decimal(10,3)) as [SupplierInvoiceNum],
	   CAST(cast(count(NULLIF([DelivCustomerNum],'')) as decimal) /count(*) AS decimal(10,3)) as [DelivCustomerNum],
	   CAST(cast(count(NULLIF([PartStatus],'')) as decimal) /count(*) AS decimal(10,3)) as [PartStatus],
	   CAST(cast(count([PurchaseOrderQty]) as decimal) /count(*) AS decimal(10,3)) as [PurchaseOrderQty],
	   CAST(cast(count([ReceiveQty]) as decimal) /count(*) AS decimal(10,3)) as [PurchaseReceiveQty],
	   CAST(cast(count([InvoiceQty]) as decimal) /count(*) AS decimal(10,3)) as [PurchaseInvoiceQty],
	   CAST(cast(count([MinOrderQty]) as decimal) /count(*) AS decimal(10,3)) as [MinOrderQty],
	   CAST(cast(count(NULLIF([UoM],'')) as decimal) /count(*) AS decimal(10,3)) as [UoM],
	   CAST(cast(count([UnitPrice]) as decimal) /count(*) AS decimal(10,3)) as [UnitPrice],
	   CAST(cast(count([DiscountPercent]) as decimal) /count(*) AS decimal(10,3)) as [DiscountPercent],
	   CAST(cast(count([DiscountAmount]) as decimal) /count(*) AS decimal(10,3)) as [DiscountAmount],
	   CAST(cast(count([LandedCost]) as decimal) /count(*) AS decimal(10,3)) as [LandedCost],
	   CAST(cast(count([ExchangeRate]) as decimal) /count(*) AS decimal(10,3)) as [ExchangeRate],
	   CAST(cast(count(NULLIF([Currency],'')) as decimal) /count(*) AS decimal(10,3)) as [Currency],
	   CAST(cast(count(NULLIF([PurchaserName],'')) as decimal) /count(*) AS decimal(10,3)) as [PurchaserName],
	   CAST(cast(count(NULLIF([WarehouseCode],'')) as decimal) /count(*) AS decimal(10,3)) as [WarehouseCode],
	   CAST(cast(count(NULLIF([ReceivingNum],'')) as decimal) /count(*) AS decimal(10,3)) as [ReceivingNum],
	   CAST(cast(count(NULLIF([DelivTime],'')) as decimal) /count(*) AS decimal(10,3)) as [DelivTime],
	   CAST(cast(count(NULLIF([PurchaseChannel],'')) as decimal) /count(*) AS decimal(10,3)) as [PurchaseChannel],
	   CAST(cast(count(NULLIF([Documents],'')) as decimal) /count(*) AS decimal(10,3)) as [Documents],
	   CAST(cast(count(NULLIF([Comments],'')) as decimal) /count(*) AS decimal(10,3)) as [Comments],
	   CAST(cast(count(NULLIF([PORes1],'')) as decimal) /count(*) AS decimal(10,3)) as [PORes1],
	   CAST(cast(count(NULLIF([PORes2],'')) as decimal) /count(*) AS decimal(10,3)) as [PORes2],
	   CAST(cast(count(NULLIF([PORes3],'')) as decimal) /count(*) AS decimal(10,3)) as [PORes3],
	   CAST(cast(count(NULLIF([OrgCommittedDelivDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [OrgCommittedDelivDate],
	   CAST(cast(count(NULLIF([OrgCommittedShipDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [OrgCommittedShipDate],
	   CAST(cast(count(NULLIF([ActualShipDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [ActualShipDate],
	   CAST(cast(count([IsClosed]) as decimal) /count(*) AS decimal(10,3)) as [IsOrderClosed], -- changed from IsClosed
	   CAST(cast(count([IsActiveRecord]) as decimal) /count(*) AS decimal(10,3)) as [IsActiveRecord],
	   CAST(cast(count(NULLIF([CommittedShipDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [CommittedShipDate]
	 

		 


from dw.PurchaseOrder
where is_deleted != 1
group by Company 
) AS Grouped_Table
	 UNPIVOT ([PercentageNull] FOR Field IN ([PurchaseOrderNum], [PurchaseOrderLine], [PurchaseOrderSubLine], [PurchaseOrderType], [PurchaseOrderDate], [PurchaseOrderStatus], [OrgReqDelivDate], [CommittedDelivDate], [ActualDelivDate], [ReqDelivDate],
	                                         [PurchaseInvoiceNum], [PartNum],  [SupplierNum], [SupplierPartNum], [SupplierInvoiceNum], [DelivCustomerNum], [PartStatus],[PurchaseOrderQty] ,[PurchaseReceiveQty] , [PurchaseInvoiceQty], [MinOrderQty], 
											 [UoM], [UnitPrice], [DiscountPercent],[DiscountAmount], [LandedCost],[ExchangeRate] ,[Currency] , [PurchaserName], [WarehouseCode], [ReceivingNum], [DelivTime], [PurchaseChannel], [Documents], [Comments], [PORes1], [PORes2], [PORes3], [OrgCommittedDelivDate], [OrgCommittedShipDate], [ActualShipDate], [IsOrderClosed], [IsActiveRecord],[CommittedShipDate]
											  ) 
			  ) as Unpivoted
) as subq_unpivoted


UNION ALL




-- dw.Budget
SELECT [Company], [PercentageNull], [Field], [SMSSTable]
FROM( 
   select Company,   'dw.Budget' as SMSSTable, Field,  [PercentageNull]
   FROM ( SELECT
       Company,
       CAST(cast(count(NULLIF([BudgetPeriod],'')) as decimal) /count(*) AS decimal(10,3)) as [BudgetPeriod],
	   CAST(cast(count(NULLIF([BudgetPeriodDate],'')) as decimal) /count(*) AS decimal(10,3)) as [BudgetPeriodDate],
	   CAST(cast(count(NULLIF([BudgetType],'')) as decimal) /count(*) AS decimal(10,3)) as [BudgetType],
	   CAST(cast(count(NULLIF([PeriodType],'')) as decimal) /count(*) AS decimal(10,3)) as [PeriodType],
	   CAST(cast(count(NULLIF([CustomerNum],'')) as decimal) /count(*) AS decimal(10,3)) as [CustomerNum],
	   CAST(cast(count(NULLIF([ProjectNum],'')) as decimal) /count(*) AS decimal(10,3)) as [ProjectNum],
	   --CAST(cast(count(NULLIF([AccountNum],'')) as decimal) /count(*) AS decimal(10,3)) as [AccountNum], removed from SC
	   CAST(cast(count(NULLIF([Department],'')) as decimal) /count(*) AS decimal(10,3)) as [Department], -- Added 2023-03-03 SB
	   CAST(cast(count(NULLIF([CustomerGroup],'')) as decimal) /count(*) AS decimal(10,3)) as [CustomerGroup],
	   CAST(cast(count(NULLIF([ProductGroup],'')) as decimal) /count(*) AS decimal(10,3)) as [ProductGroup],
	   --CAST(cast(count(NULLIF([SalesPersonCode],'')) as decimal) /count(*) AS decimal(10,3)) as [SalesPersonCode], removed from SC
	   CAST(cast(count(NULLIF([SalesPersonName],'')) as decimal) /count(*) AS decimal(10,3)) as [SalesPerson], -- Changed AS statement due to name change 2023-03-08 SB
	   CAST(cast(count(NULLIF([BudgetDescription],'')) as decimal) /count(*) AS decimal(10,3)) as [BudgetDescription],
	   CAST(cast(count([BudgetSales]) as decimal) /count(*) AS decimal(10,3)) as [BudgetSales],
	   CAST(cast(count([BudgetCost]) as decimal) /count(*) AS decimal(10,3)) as [BudgetCost],
	   CAST(cast(count([GrossProfitInvoiced]) as decimal) /count(*) AS decimal(10,3)) as [BudgetGrossProfit], --Changed  2023-03-03 [GrossProfitInvoiced]
	   CAST(cast(count([GrossMarginInvoicedPercent]) as decimal) /count(*) AS decimal(10,3)) as [BudgetGrossMargin], -- [GrossMarginInvoicedPercent]
	   CAST(cast(count([ExchangeRate]) as decimal) /count(*) AS decimal(10,3)) as [ExchangeRate], -- Add when in DW table 
	   CAST(cast(count(NULLIF([Currency],'')) as decimal) /count(*) AS decimal(10,3)) as [Currency],
	   CAST(cast(count(NULLIF(BRes1,'')) as decimal) /count(*) AS decimal(10,3)) as BRes1,
	   CAST(cast(count(NULLIF(BRes2,'')) as decimal) /count(*) AS decimal(10,3)) as BRes2,
	   CAST(cast(count(NULLIF(BRes3,'')) as decimal) /count(*) AS decimal(10,3)) as BRes3


from dw.Budget
where is_deleted != 1
group by Company 
) AS Grouped_Table
	 UNPIVOT ([PercentageNull] FOR Field IN ([BudgetPeriod], [BudgetPeriodDate],[BudgetType], [PeriodType], [CustomerNum], [ProjectNum],  [Department], [CustomerGroup], [ProductGroup], [SalesPerson],  [BudgetDescription], [BudgetSales], [BudgetCost], [BudgetGrossProfit], [BudgetGrossMargin], [ExchangeRate], [Currency], BRes1, BRes2, BRes3 
											  ) 
			  ) as Unpivoted
) as subq_unpivoted


UNION ALL


--dw.SalesInvoice
SELECT [Company], [PercentageNull], [Field], [SMSSTable]
FROM( 
   select Company, 'dw.SalesInvoice' as SMSSTable, Field,  [PercentageNull]
   FROM ( SELECT
       Company,
       CAST(cast(count(NULLIF([SalesPersonName],'')) as decimal) /count(*) AS decimal(10,3)) as [SalesPerson], -- Changed AS statement due to name change 2023-03-08 SB
	   CAST(cast(count(NULLIF([CustomerNum],'')) as decimal) /count(*) AS decimal(10,3)) as [CustomerNum],
	   CAST(cast(count(NULLIF([PartNum],'')) as decimal) /count(*) AS decimal(10,3)) as [PartNum],
	   CAST(cast(count(NULLIF([PartType],'')) as decimal) /count(*) AS decimal(10,3)) as [PartType],
	   CAST(cast(count(NULLIF([SalesOrderNum],'')) as decimal) /count(*) AS decimal(10,3)) as [SalesOrderNum],
	   CAST(cast(count(NULLIF([SalesOrderLine],'')) as decimal) /count(*) AS decimal(10,3)) as [SalesOrderLine],
	   CAST(cast(count(NULLIF([SalesOrderSubLine],'')) as decimal) /count(*) AS decimal(10,3)) as [SalesOrderSubLine],
	   CAST(cast(count(NULLIF([SalesOrderType],'')) as decimal) /count(*) AS decimal(10,3)) as [SalesOrderType],
	   CAST(cast(count(NULLIF([SalesInvoiceNum],'')) as decimal) /count(*) AS decimal(10,3)) as [SalesInvoiceNum],
	   CAST(cast(count(NULLIF([SalesInvoiceLine],'')) as decimal) /count(*) AS decimal(10,3)) as [SalesInvoiceLine],
	   CAST(cast(count(NULLIF([SalesInvoiceType],'')) as decimal) /count(*) AS decimal(10,3)) as [SalesInvoiceType],
	   CAST(cast(count(NULLIF([SalesInvoiceDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [SalesInvoiceDate],
	   CAST(cast(count(NULLIF([ActualDelivDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [ActualDelivDate],
	   CAST(cast(count([SalesInvoiceQty]) as decimal) /count(*) AS decimal(10,3)) as [SalesInvoiceQty],
	   CAST(cast(count(NULLIF([UoM],'')) as decimal) /count(*) AS decimal(10,3)) as [UoM],
	   CAST(cast(count([UnitPrice]) as decimal) /count(*) AS decimal(10,3)) as [UnitPrice],
	   CAST(cast(count([UnitCost]) as decimal) /count(*) AS decimal(10,3)) as [UnitCost],
	   CAST(cast(count([DiscountPercent]) as decimal) /count(*) AS decimal(10,3)) as [DiscountPercent],
	   CAST(cast(count([DiscountAmount]) as decimal) /count(*) AS decimal(10,3)) as [DiscountAmount],
	   CAST(cast(count([TotalMiscChrg]) as decimal) /count(*) AS decimal(10,3)) as [TotalMiscChrg],
	   CAST(cast(count([VATAmount]) as decimal) /count(*) AS decimal(10,3)) as [VATAmount],
	   CAST(cast(count(NULLIF([Currency],'')) as decimal) /count(*) AS decimal(10,3)) as [Currency],
	   CAST(cast(count([ExchangeRate]) as decimal) /count(*) AS decimal(10,3)) as [ExchangeRate],
	   CAST(cast(count(NULLIF([CreditMemo],'')) as decimal) /count(*) AS decimal(10,3)) as [IsCreditMemo], -- Changed AS statement due to name change 2023-03-08 SB
	   CAST(cast(count(NULLIF([SalesChannel],'')) as decimal) /count(*) AS decimal(10,3)) as [SalesChannel],
	   CAST(cast(count(NULLIF([Department],'')) as decimal) /count(*) AS decimal(10,3)) as [DepartmentCode],
	   CAST(cast(count(NULLIF([WarehouseCode],'')) as decimal) /count(*) AS decimal(10,3)) as [WarehouseCode],
	   CAST(cast(count(NULLIF([CostBearerNum],'')) as decimal) /count(*) AS decimal(10,3)) as [CostBearerNum],
	   CAST(cast(count(NULLIF([CostUnitNum],'')) as decimal) /count(*) AS decimal(10,3)) as [CostUnitNum],
	   CAST(cast(count(NULLIF([ReturnComment],'')) as decimal) /count(*) AS decimal(10,3)) as [ReturnComment],
	   CAST(cast(count(NULLIF([ReturnNum],'')) as decimal) /count(*) AS decimal(10,3)) as [ReturnNum],
	   CAST(cast(count(NULLIF([ProjectNum],'')) as decimal) /count(*) AS decimal(10,3)) as [ProjectNum],
	   CAST(cast(count(NULLIF([IndexKey],'')) as decimal) /count(*) AS decimal(10,3)) as [IndexKey],
	   CAST(cast(count(NULLIF([SIRes1],'')) as decimal) /count(*) AS decimal(10,3)) as [SIRes1],
	   CAST(cast(count(NULLIF([SIRes2],'')) as decimal) /count(*) AS decimal(10,3)) as [SIRes2],
	   CAST(cast(count(NULLIF([SIRes3],'')) as decimal) /count(*) AS decimal(10,3)) as [SIRes3],
	   CAST(cast(count([IsUpdatingStock]) as decimal) /count(*) AS decimal(10,3)) as [IsUpdatingStock],
	   CAST(cast(count([SIRes4]) as decimal) /count(*) AS decimal(10,3)) as [SIRes4],
	   CAST(cast(count([SIRes5]) as decimal) /count(*) AS decimal(10,3)) as [SIRes5],
	   CAST(cast(count([SIRes6]) as decimal) /count(*) AS decimal(10,3)) as [SIRes6],
	   CAST(cast(count([CashDiscountOffered]) as decimal) /count(*) AS decimal(10,3)) as [CashDiscountOffered],
	   CAST(cast(count([CashDiscountUsed]) as decimal) /count(*) AS decimal(10,3)) as [CashDiscountUsed],
	   CAST(cast(count(NULLIF([DeliveryAddress],'')) as decimal) /count(*) AS decimal(10,3)) as [DeliveryAddressLine], --DeliverAddressLine in SC
	   CAST(cast(count([DeliveryCity]) as decimal) /count(*) AS decimal(10,3)) as [DeliveryCity], 
	   CAST(cast(count([DeliveryCountry]) as decimal) /count(*) AS decimal(10,3)) as [DeliveryCountry],
	   CAST(cast(count([DeliveryZipCode]) as decimal) /count(*) AS decimal(10,3)) as [DeliveryZipCode],
	   CAST(cast(count([InvoiceHandler]) as decimal) /count(*) AS decimal(10,3)) as [InvoiceHandler],
	   CAST(cast(count([IsActiveRecord]) as decimal) /count(*) AS decimal(10,3)) as [IsActiveRecord],
	   CAST(cast(count([IsInvoiceClosed]) as decimal) /count(*) AS decimal(10,3)) as [IsInvoiceClosed],
	   CAST(cast(count([SalesInvoiceSubLine]) as decimal) /count(*) AS decimal(10,3)) as [SalesInvoiceSubLine]
	

from dw.SalesInvoice
where is_deleted != 1
group by Company 
) AS Grouped_Table
	 UNPIVOT ([PercentageNull] FOR Field IN ([SalesPerson], [CustomerNum], [PartNum], [PartType], [SalesOrderNum], [SalesOrderLine], [SalesOrderSubLine], [SalesOrderType], [SalesInvoiceNum], [SalesInvoiceLine], [SalesInvoiceType], [SalesInvoiceDate],  [ActualDelivDate], [SalesInvoiceQty], [UoM], [UnitPrice], [UnitCost],[DiscountPercent] ,[DiscountAmount] , [TotalMiscChrg], [VATAmount], [Currency], [ExchangeRate], [IsCreditMemo],[SalesChannel], [DepartmentCode], [WarehouseCode], [CostBearerNum], [CostUnitNum],[ReturnComment] , [ReturnNum], [ProjectNum], [IndexKey], [SIRes1], [SIRes2], [SIRes3], [DeliveryAddressLine], [IsUpdatingStock], [SIRes4], [SIRes5], [SIRes6],[CashDiscountOffered],[CashDiscountUsed],[DeliveryCity],[DeliveryCountry],[DeliveryZipCode],[InvoiceHandler],[IsActiveRecord],[IsInvoiceClosed],[SalesInvoiceSubLine]
											  ) 
			  ) as Unpivoted
) as subq_unpivoted


UNION ALL


--dw.SalesLedger -
SELECT [Company], [PercentageNull], [Field], [SMSSTable]
FROM( 
   select Company, 'dw.SalesLedger' as SMSSTable, Field,  [PercentageNull]
   FROM ( SELECT
       Company,
       CAST(cast(count(NULLIF([CustomerNum],'')) as decimal) /count(*) AS decimal(10,3)) as [CustomerNum],
       CAST(cast(count(NULLIF([SalesInvoiceNum],'')) as decimal) /count(*) AS decimal(10,3)) as [SalesInvoiceNum],
	   CAST(cast(count(NULLIF([SalesInvoiceDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [SalesInvoiceDate],
	   CAST(cast(count(NULLIF([SalesDueDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [SalesInvoiceDueDate], -- Changed AS statement due to name change 2023-03-08 SB
	   CAST(cast(count(NULLIF([SalesLastPaymentDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [SalesInvoiceLastPaymentDate], --Changed AS statement due to name change 2023-03-08 SB
	   CAST(cast(count([InvoiceAmount]) as decimal) /count(*) AS decimal(10,3)) as [InvoiceAmount],
	   CAST(cast(count([RemainingInvoiceAmount]) as decimal) /count(*) AS decimal(10,3)) as [RemainingInvoiceAmount],
	   CAST(cast(count([ExchangeRate]) as decimal) /count(*) AS decimal(10,3)) as [ExchangeRate],
	   CAST(cast(count(NULLIF([Currency],'')) as decimal) /count(*) AS decimal(10,3)) as [Currency],
	   CAST(cast(count([VATAmount]) as decimal) /count(*) AS decimal(10,3)) as [VATAmount],
	   CAST(cast(count(NULLIF([VATCode],'')) as decimal) /count(*) AS decimal(10,3)) as [VATCode],
	   CAST(cast(count(NULLIF([PayToName],'')) as decimal) /count(*) AS decimal(10,3)) as [PayToName],
	   CAST(cast(count(NULLIF([PayToCity],'')) as decimal) /count(*) AS decimal(10,3)) as [PayToCity],
	   CAST(cast(count(NULLIF([PayToContact],'')) as decimal) /count(*) AS decimal(10,3)) as [PayToContact],
	   CAST(cast(count(NULLIF([PaymentTerms],'')) as decimal) /count(*) AS decimal(10,3)) as [PaymentTerms],
	   CAST(cast(count([PaidInvoiceAmount]) as decimal) /count(*) AS decimal(10,3)) as [PaidInvoiceAmount],
	   CAST(cast(count(NULLIF([AccountingDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [AccountingDate],
	   CAST(cast(count(NULLIF([VATCodeDesc],'')) as decimal) /count(*) AS decimal(10,3)) as [VATCodeDesc],
	   CAST(cast(count(NULLIF([LinkToOriginalInvoice],'')) as decimal) /count(*) AS decimal(10,3)) as [LinkToOriginalInvoice],
	   CAST(cast(count(NULLIF([SLRes1],'')) as decimal) /count(*) AS decimal(10,3)) as [SLRes1],
	   CAST(cast(count(NULLIF([SLRes2],'')) as decimal) /count(*) AS decimal(10,3)) as [SLRes2],
	   CAST(cast(count(NULLIF([SLRes3],'')) as decimal) /count(*) AS decimal(10,3)) as [SLRes3],
	   CAST(cast(count(NULLIF([SalesPersonName],'')) as decimal) /count(*) AS decimal(10,3)) as [SalesPerson],
	   CAST(cast(count(NULLIF([IsActiveRecord],'')) as decimal) /count(*) AS decimal(10,3)) as [IsActiveRecord],
	   CAST(cast(count(NULLIF([IsInvoiceClosed],'')) as decimal) /count(*) AS decimal(10,3)) as [IsInvoiceClosed],
	   CAST(cast(count(NULLIF([PaymentEvents],'')) as decimal) /count(*) AS decimal(10,3)) as [PaymentEvents],
	   CAST(cast(count(NULLIF([SalesOrderNum],'')) as decimal) /count(*) AS decimal(10,3)) as [SalesOrderNum]

from dw.SalesLedger
where is_deleted != 1
group by Company 
) AS Grouped_Table
	 UNPIVOT ([PercentageNull] FOR Field IN ([CustomerNum], [SalesInvoiceNum], [SalesInvoiceDate],[SalesInvoiceDueDate], [SalesInvoiceLastPaymentDate], [InvoiceAmount], 
	 [RemainingInvoiceAmount], [ExchangeRate],[Currency], [VATAmount], [VATCode], [PayToName], [PayToCity], [PayToContact], [PaymentTerms], [PaidInvoiceAmount], [AccountingDate], [VATCodeDesc],[LinkToOriginalInvoice], [SLRes1], [SLRes2], [SLRes3],  [SalesPerson], [IsActiveRecord],[IsInvoiceClosed],[PaymentEvents],[SalesOrderNum]
											  ) 
			  ) as Unpivoted
) as subq_unpivoted


UNION ALL

--dw.SalesOrder
SELECT [Company], [PercentageNull], [Field], [SMSSTable]
FROM( 
   select Company, 'dw.SalesOrder' as SMSSTable, Field, [PercentageNull]
   FROM ( SELECT
       Company,
       CAST(cast(count(NULLIF([CustomerNum],'')) as decimal) /count(*) AS decimal(10,3)) as [CustomerNum],
	   CAST(cast(count(NULLIF([SalesOrderNum],'')) as decimal) /count(*) AS decimal(10,3)) as [SalesOrderNum],
	   CAST(cast(count(NULLIF([SalesOrderLine],'')) as decimal) /count(*) AS decimal(10,3)) as [SalesOrderLine],
	   CAST(cast(count(NULLIF([SalesOrderSubLine],'')) as decimal) /count(*) AS decimal(10,3)) as [SalesOrderSubLine],
	   CAST(cast(count(NULLIF([SalesOrderType],'')) as decimal) /count(*) AS decimal(10,3)) as [SalesOrderType],
	   CAST(cast(count(NULLIF([SalesOrderCategory],'')) as decimal) /count(*) AS decimal(10,3)) as [SalesOrderCategory],
	   CAST(cast(count(NULLIF([SalesOrderDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [SalesOrderDate],
	   --CAST(cast(count(NULLIF([NeedbyDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [NeedbyDate], --changed to ReqDelivDate in SC
	   CAST(cast(count(NULLIF([ExpDelivDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [ExpDelivDate],
	   CAST(cast(count(NULLIF([ActualDelivDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [ActualDelivDate],
	   CAST(cast(count(nullif([SalesInvoiceNum],'')) as decimal) /count(*) AS decimal(10,3)) as [SalesInvoiceNum],
	   CAST(cast(count([SalesOrderQty]) as decimal) /count(*) AS decimal(10,3)) as [SalesOrderQty],
	   CAST(cast(count([DelivQty]) as decimal) /count(*) AS decimal(10,3)) as [SalesDelivQty], -- Changed AS statement due to name change 2023-03-08 SB
	   CAST(cast(count([RemainingQty]) as decimal) /count(*) AS decimal(10,3)) as [SalesRemainingQty],  -- Changed AS statement due to name change 2023-03-08 SB
	   CAST(cast(count(NULLIF([UoM],'')) as decimal) /count(*) AS decimal(10,3)) as [UoM],
	   CAST(cast(count([UnitPrice]) as decimal) /count(*) AS decimal(10,3)) as [UnitPrice],
	   CAST(cast(count([UnitCost]) as decimal) /count(*) AS decimal(10,3)) as [UnitCost],
	   CAST(cast(count([ExchangeRate]) as decimal) /count(*) AS decimal(10,3)) as [ExchangeRate],
	  -- CAST(cast(count(Nullif([OpenRelease],'')) as decimal) /count(*) AS decimal(10,3)) as [OpenRelease], changed to IsOrderClosed in SC
	   CAST(cast(count([DiscountAmount]) as decimal) /count(*) AS decimal(10,3)) as [DiscountAmount],
	   CAST(cast(count(NULLIF([Currency],'')) as decimal) /count(*) AS decimal(10,3)) as [Currency],
	   CAST(cast(count([DiscountPercent]) as decimal) /count(*) AS decimal(10,3)) as [DiscountPercent],
	   CAST(cast(count(NULLIF([PartNum],'')) as decimal) /count(*) AS decimal(10,3)) as [PartNum],
	   CAST(cast(count(NULLIF([PartType],'')) as decimal) /count(*) AS decimal(10,3)) as [PartType],
	   CAST(cast(count(NULLIF([PartStatus],'')) as decimal) /count(*) AS decimal(10,3)) as [PartStatus],
	   CAST(cast(count(NULLIF([SalesPersonName],'')) as decimal) /count(*) AS decimal(10,3)) as [SalesPerson], -- Changed AS statement due to name change 2023-03-08 SB
	   CAST(cast(count(NULLIF([WarehouseCode],'')) as decimal) /count(*) AS decimal(10,3)) as [WarehouseCode],
	   CAST(cast(count(NULLIF([SalesChannel],'')) as decimal) /count(*) AS decimal(10,3)) as [SalesChannel],
	   CAST(cast(count(NULLIF([Department],'')) as decimal) /count(*) AS decimal(10,3)) as [DepartmentCode],
	   CAST(cast(count(NULLIF([ProjectNum],'')) as decimal) /count(*) AS decimal(10,3)) as [ProjectNum],
	   CAST(cast(count(NULLIF([IndexKey],'')) as decimal) /count(*) AS decimal(10,3)) as [IndexKey],
	   CAST(cast(count(NULLIF([SORes1],'')) as decimal) /count(*) AS decimal(10,3)) as [SORes1],
	   CAST(cast(count(NULLIF([Cancellation],'')) as decimal) /count(*) AS decimal(10,3)) as [Cancellation],
	   CAST(cast(count(NULLIF([SORes2],'')) as decimal) /count(*) AS decimal(10,3)) as [SORes2],
	   CAST(cast(count(NULLIF([SORes3],'')) as decimal) /count(*) AS decimal(10,3)) as [SORes3],
	   --CAST(cast(count(NULLIF([ConfirmedDelivDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [ConfirmedDelivDate], changed to CommittedDelivDate in SC
	   CAST(cast(count([SalesInvoiceQty]) as decimal) /count(*) AS decimal(10,3)) as [SalesInvoiceQty],
	   --CAST(cast(count([TotalMiscChrg]) as decimal) /count(*) AS decimal(10,3)) as [TotalMiscChrg], -- not in SC anymore
	   CAST(cast(count([IsUpdatingStock]) as decimal) /count(*) AS decimal(10,3)) as [IsUpdatingStock],
	   CAST(cast(count([SORes4]) as decimal) /count(*) AS decimal(10,3)) as [SORes4],
	   CAST(cast(count([SORes5]) as decimal) /count(*) AS decimal(10,3)) as [SORes5],
	   CAST(cast(count([SORes6]) as decimal) /count(*) AS decimal(10,3)) as [SORes6],
	   CAST(cast(count(NULLIF([ActualShipDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [ActualShipDate],
	   CAST(cast(count(NULLIF([CommittedDelivDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [CommittedDelivDate],
	   CAST(cast(count(NULLIF([ExpShipDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [ExpShipDate],
	   CAST(cast(count([IsActiveRecord]) as decimal) /count(*) AS decimal(10,3)) as [IsActiveRecord],
	   CAST(cast(count([IsOrderClosed]) as decimal) /count(*) AS decimal(10,3)) as [IsOrderClosed],
	   CAST(cast(count(NULLIF([OrderHandler],'')) as decimal) /count(*) AS decimal(10,3)) as [OrderHandler],
	   CAST(cast(count(NULLIF([OrgCommittedDelivDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [OrgCommittedDelivDate],
	   CAST(cast(count(NULLIF([OrgExpDelivDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [OrgExpDelivDate],
	   CAST(cast(count(NULLIF([OrgExpShipDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [OrgExpShipDate],
	   CAST(cast(count(NULLIF([OrgReqDelivDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [OrgReqDelivDate],
	   CAST(cast(count(NULLIF([ReqDelivDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [ReqDelivDate]

from dw.SalesOrder
where is_deleted != 1
group by Company 
) AS Grouped_Table
	 UNPIVOT ([PercentageNull] FOR Field IN ( [CustomerNum],[SalesOrderNum],[SalesOrderLine],[SalesOrderSubLine],[SalesOrderType],[SalesOrderCategory],[SalesOrderDate],[ExpDelivDate],[ActualDelivDate],[SalesInvoiceNum], [SalesOrderQty],[SalesDelivQty],[SalesRemainingQty],[UoM],[UnitPrice],[UnitCost],[Currency],[ExchangeRate],[DiscountAmount],[DiscountPercent],[PartNum],[PartType],[PartStatus],[SalesPerson],[WarehouseCode],[SalesChannel],[DepartmentCode],[ProjectNum],[IndexKey],[Cancellation],[SORes1],[SORes2],[SORes3],[SalesInvoiceQty], [IsUpdatingStock], [SORes4], [SORes5], [SORes6],[ActualShipDate],[CommittedDelivDate],[ExpShipDate],[IsActiveRecord],[IsOrderClosed], [OrderHandler],[OrgCommittedDelivDate],[OrgExpDelivDate],[OrgExpShipDate],[OrgReqDelivDate],[ReqDelivDate] 
											 )
			  ) as Unpivoted
) as subq_unpivoted


UNION ALL



--dw.SalesOrderLog

--SELECT *
--FROM( 
--   select Company, 'dw.SalesOrderLog' as SMSSTable, Field,  [PercentageNull]
--   FROM ( SELECT
--       Company,
--       CAST(cast(count(NULLIF([CustomerNum],'')) as decimal) /count(*) AS decimal(10,3)) as [CustomerNum],
--	   CAST(cast(count(NULLIF([SalesOrderNum],'')) as decimal) /count(*) AS decimal(10,3)) as [SalesOrderNum],
--	   CAST(cast(count(NULLIF([SalesOrderLine],'')) as decimal) /count(*) AS decimal(10,3)) as [SalesOrderLine],
--	   CAST(cast(count(NULLIF([SalesOrderSubLine],'')) as decimal) /count(*) AS decimal(10,3)) as [SalesOrderSubLine],
--	   CAST(cast(count(NULLIF([SalesOrderType],'')) as decimal) /count(*) AS decimal(10,3)) as [SalesOrderType],
--	   CAST(cast(count(NULLIF([SalesOrderLogType],'')) as decimal) /count(*) AS decimal(10,3)) as [SalesOrderLogType],
--	   CAST(cast(count(NULLIF([SalesOrderDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [SalesOrderDate],
--	   CAST(cast(count(NULLIF([SalesOrderLogDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [SalesOrderLogDate],
--	   CAST(cast(count([SalesInvoiceNum]) as decimal) /count(*) AS decimal(10,3)) as [SalesInvoiceNum],
--	   CAST(cast(count([SalesOrderQty]) as decimal) /count(*) AS decimal(10,3)) as [SalesOrderQty],
--	   CAST(cast(count([UoM]) as decimal) /count(*) AS decimal(10,3)) as [UoM],
--	   CAST(cast(count([UnitPrice]) as decimal) /count(*) AS decimal(10,3)) as [UnitPrice],
--	   CAST(cast(count([UnitCost]) as decimal) /count(*) AS decimal(10,3)) as [UnitCost],
--	   CAST(cast(count(NULLIF([Currency],'')) as decimal) /count(*) AS decimal(10,3)) as [Currency],
--	   CAST(cast(count([ExchangeRate]) as decimal) /count(*) AS decimal(10,3)) as [ExchangeRate],
--	   CAST(cast(count(NULLIF([OpenRelease],'')) as decimal) /count(*) AS decimal(10,3)) as [OpenRelease],
--	   CAST(cast(count([DiscountPercent]) as decimal) /count(*) AS decimal(10,3)) as [DiscountPercent],
--	   CAST(cast(count([DiscountAmount]) as decimal) /count(*) AS decimal(10,3)) as [DiscountAmount],
--	   CAST(cast(count(NULLIF([PartNum],'')) as decimal) /count(*) AS decimal(10,3)) as [PartNum],
--	   CAST(cast(count(NULLIF([PartType],'')) as decimal) /count(*) AS decimal(10,3)) as [PartType],
--	   CAST(cast(count(NULLIF([SalesPersonName],'')) as decimal) /count(*) AS decimal(10,3)) as [SalesPersonName],
--	   CAST(cast(count(NULLIF([Department],'')) as decimal) /count(*) AS decimal(10,3)) as [Department],
--	   CAST(cast(count(NULLIF([ReturnComment],'')) as decimal) /count(*) AS decimal(10,3)) as [ReturnComment],
--	   CAST(cast(count(NULLIF([SalesReturnInvoiceNum],'')) as decimal) /count(*) AS decimal(10,3)) as [SalesReturnInvoiceNum],
--	   CAST(cast(count(NULLIF([CancellationCode],'')) as decimal) /count(*) AS decimal(10,3)) as [CancellationCode],
--	   CAST(cast(count(NULLIF([WarehouseCode],'')) as decimal) /count(*) AS decimal(10,3)) as [WarehouseCode],
--	   CAST(cast(count(NULLIF([IndexKey],'')) as decimal) /count(*) AS decimal(10,3)) as [IndexKey]

--from dw.SalesOrderLog
--where is_deleted != 1
--group by Company 
--) AS Grouped_Table
--	 UNPIVOT ([PercentageNull] FOR Field IN ([CustomerNum], [SalesOrderNum], [SalesOrderLine], [SalesOrderSubLine], [SalesOrderType], [SalesOrderLogType], [SalesOrderDate], [SalesOrderLogDate], [SalesInvoiceNum], [SalesOrderQty], [UoM], [UnitPrice],  [UnitCost], [Currency], [ExchangeRate], [OpenRelease], [DiscountPercent],[DiscountAmount] ,[PartNum] , [PartType], [SalesPersonName], [Department], [ReturnComment], [SalesReturnInvoiceNum],[CancellationCode], [WarehouseCode], [IndexKey]											 
--	                                         ) 
--			  ) as Unpivoted
--) as subq_unpivoted


--UNION ALL   


--dw.StockBalance
SELECT [Company], [PercentageNull], [Field], [SMSSTable]
FROM( 
   select Company, 'dw.StockBalance' as SMSSTable, Field,  [PercentageNull]
   FROM ( SELECT
       Company,
       CAST(cast(count(NULLIF([WarehouseCode],'')) as decimal) /count(*) AS decimal(10,3)) as [WarehouseCode],
	   CAST(cast(count(NULLIF([Currency],'')) as decimal) /count(*) AS decimal(10,3)) as [Currency],
	   CAST(cast(count(NULLIF([BinNum],'')) as decimal) /count(*) AS decimal(10,3)) as [BinNum],
	   --CAST(cast(count(NULLIF([BatchNum],'')) as decimal) /count(*) AS decimal(10,3)) as [BatchNum], not in SC any more
	   CAST(cast(count(NULLIF([SupplierNum],'')) as decimal) /count(*) AS decimal(10,3)) as [SupplierNum],
	   CAST(cast(count(NULLIF([PartNum],'')) as decimal) /count(*) AS decimal(10,3)) as [PartNum],
	   CAST(cast(count(NULLIF([DelivTime],'')) as decimal) /count(*) AS decimal(10,3)) as [DelivTime],
	   CAST(cast(count(NULLIF([LastStockTakeDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [LastStockTakeDate],
	   CAST(cast(count(NULLIF([LastStdCostCalDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [LastStdCostCalDate],
	   CAST(cast(count([SafetyStock]) as decimal) /count(*) AS decimal(10,3)) as [SafetyStock],
	   CAST(cast(count([MaxStockQty]) as decimal) /count(*) AS decimal(10,3)) as [MaxStockQty],
	   CAST(cast(count([StockBalance]) as decimal) /count(*) AS decimal(10,3)) as [StockBalance],
	   CAST(cast(count([StockValue]) as decimal) /count(*) AS decimal(10,3)) as [StockValue],
	   --CAST(cast(count([ReserveQty]) as decimal) /count(*) AS decimal(10,3)) as [ReserveQty], not in SC anymore
	  -- CAST(cast(count([BackOrderQty]) as decimal) /count(*) AS decimal(10,3)) as [BackOrderQty], switched to SalesRemainingQty in SC
	   --CAST(cast(count([OrderQty]) as decimal) /count(*) AS decimal(10,3)) as [OrderQty], not in SC any more
	   CAST(cast(count([StockTakeDiff]) as decimal) /count(*) AS decimal(10,3)) as [StockTakeDiff],
	   CAST(cast(count([ReOrderLevel]) as decimal) /count(*) AS decimal(10,3)) as [ReOrderLevel],
	   CAST(cast(count([OptimalOrderQty]) as decimal) /count(*) AS decimal(10,3)) as [OptimalOrderQty],
	   CAST(cast(count([AvgCost]) as decimal) /count(*) AS decimal(10,3)) as [AvgCost],
	   CAST(cast(count(ExchangeRate) as decimal) /count(*) AS decimal(10,3)) as [ExchangeRate],
	   CAST(cast(count(IsActiveRecord) as decimal) /count(*) AS decimal(10,3)) as IsActiveRecord,
	   CAST(cast(count(PurchaseRemainingQty) as decimal) /count(*) AS decimal(10,3)) as PurchaseRemainingQty,
	   CAST(cast(count(SalesRemainingQty) as decimal) /count(*) AS decimal(10,3)) as SalesRemainingQty,
	   CAST(cast(count(NULLIF([SBRes1],'')) as decimal) /count(*) AS decimal(10,3)) as [SBRes1],
	   CAST(cast(count(NULLIF([SBRes2],'')) as decimal) /count(*) AS decimal(10,3)) as [SBRes2],
	   CAST(cast(count(NULLIF([SBRes3],'')) as decimal) /count(*) AS decimal(10,3)) as [SBRes3]
	
	
from dw.StockBalance
where is_deleted != 1
group by Company 
) AS Grouped_Table
	 UNPIVOT ([PercentageNull] FOR Field IN ([WarehouseCode], [Currency], [BinNum], [SupplierNum], [PartNum], [DelivTime], [LastStockTakeDate], [LastStdCostCalDate], [SafetyStock],
	                                         [MaxStockQty], [StockBalance],  [StockValue],  [StockTakeDiff],[ReOrderLevel] ,[OptimalOrderQty] , [AvgCost],[ExchangeRate],IsActiveRecord, PurchaseRemainingQty,SalesRemainingQty,[SBRes1],[SBRes2],[SBRes3]	  
											 ) 
			  ) as Unpivoted
) as subq_unpivoted


UNION ALL   


--dw.StockTransaction

SELECT [Company], [PercentageNull], [Field], [SMSSTable]
FROM( 
   select Company,   'dw.StockTransaction' as SMSSTable, Field,  [PercentageNull]
   FROM ( SELECT
       Company,
	   CAST(cast(count(NULLIF([WarehouseCode],'')) as decimal) /count(*) AS decimal(10,3)) as [WarehouseCode],
	   CAST(cast(count(NULLIF([TransactionCode],'')) as decimal) /count(*) AS decimal(10,3)) as [TransactionCode],
	   CAST(cast(count(NULLIF([IndexKey],'')) as decimal) /count(*) AS decimal(10,3)) as [IndexKey],
	   CAST(cast(count(NULLIF([TransactionDescription],'')) as decimal) /count(*) AS decimal(10,3)) as [TransactionCodeDescription], -- Changed AS statement due to name change 2023-03-08 SB
	  -- CAST(cast(count(NULLIF([IssuerReceiverNum],'')) as decimal) /count(*) AS decimal(10,3)) as [IssuerReceiverNum], not in SC anymore
	  -- CAST(cast(count(NULLIF([OrderNum],'')) as decimal) /count(*) AS decimal(10,3)) as [OrderNum], not in SC anymore
	  -- CAST(cast(count(NULLIF([OrderLine],'')) as decimal) /count(*) AS decimal(10,3)) as [OrderLine], not in SC anymore
	  -- CAST(cast(count(NULLIF([InvoiceNum],'')) as decimal) /count(*) AS decimal(10,3)) as [InvoiceNum], not in SC anymore
	  -- CAST(cast(count(NULLIF([InvoiceLine],'')) as decimal) /count(*) AS decimal(10,3)) as [InvoiceLine], not in SC anymore
	   CAST(cast(count(NULLIF([PartNum],'')) as decimal) /count(*) AS decimal(10,3)) as [PartNum],
	   CAST(cast(count(NULLIF([BinNum],'')) as decimal) /count(*) AS decimal(10,3)) as [BinNum],
	   CAST(cast(count(NULLIF([BatchNum],'')) as decimal) /count(*) AS decimal(10,3)) as [BatchNum],
	   CAST(cast(count(NULLIF([TransactionDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [TransactionDate],
	   CAST(cast(count(NULLIF([TransactionTime],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [TransactionTime],
	   CAST(cast(count([TransactionQty]) as decimal) /count(*) AS decimal(10,3)) as [TransactionQty],
	   CAST(cast(count([TransactionValue]) as decimal) /count(*) AS decimal(10,3)) as [TransactionValue],
	   --CAST(cast(count([CostPrice]) as decimal) /count(*) AS decimal(10,3)) as [CostPrice], not in SC anymore
	   --CAST(cast(count([SalesUnitPrice]) as decimal) /count(*) AS decimal(10,3)) as [SalesUnitPrice], not in SC anymore
	   CAST(cast(count(NULLIF([Currency],'')) as decimal) /count(*) AS decimal(10,3)) as [Currency],
	   CAST(cast(count(NULLIF([Reference],'')) as decimal) /count(*) AS decimal(10,3)) as [Reference],
	  -- CAST(cast(count(NULLIF([AdjustmentDate],'1900-01-01')) as decimal) /count(*) AS decimal(10,3)) as [AdjustmentDate], not in SC anymore
	   CAST(cast(count(NULLIF([CustomerNum],'')) as decimal) /count(*) AS decimal(10,3)) as [CustomerNum],
	   CAST(cast(count(ExchangeRate) as decimal) /count(*) AS decimal(10,3)) as ExchangeRate,
	   CAST(cast(count(IsActiveRecord) as decimal) /count(*) AS decimal(10,3)) as IsActiveRecord,
	   CAST(cast(count(IsInternalTransaction) as decimal) /count(*) AS decimal(10,3)) as IsInternalTransaction,
	   CAST(cast(count(NULLIF([PurchaseInvoiceLine],'')) as decimal) /count(*) AS decimal(10,3)) as [PurchaseInvoiceLine],
	   CAST(cast(count(NULLIF([PurchaseInvoiceNum],'')) as decimal) /count(*) AS decimal(10,3)) as [PurchaseInvoiceNum],
	   CAST(cast(count(NULLIF([PurchaseOrderLine],'')) as decimal) /count(*) AS decimal(10,3)) as [PurchaseOrderLine],
	   CAST(cast(count(NULLIF([PurchaseOrderNum],'')) as decimal) /count(*) AS decimal(10,3)) as [PurchaseOrderNum],
	   CAST(cast(count(NULLIF([SalesInvoiceLine],'')) as decimal) /count(*) AS decimal(10,3)) as [SalesInvoiceLine],
	   CAST(cast(count(NULLIF([SalesInvoiceNum],'')) as decimal) /count(*) AS decimal(10,3)) as [SalesInvoiceNum],
	   CAST(cast(count(NULLIF([SalesOrderLine],'')) as decimal) /count(*) AS decimal(10,3)) as [SalesOrderLine],
	   CAST(cast(count(NULLIF([SalesOrderNum],'')) as decimal) /count(*) AS decimal(10,3)) as [SalesOrderNum],
	   CAST(cast(count(NULLIF([STRes1],'')) as decimal) /count(*) AS decimal(10,3)) as [STRes1],
	   CAST(cast(count(NULLIF([STRes2],'')) as decimal) /count(*) AS decimal(10,3)) as [STRes2],
	   CAST(cast(count(NULLIF([STRes3],'')) as decimal) /count(*) AS decimal(10,3)) as [STRes3],
	   CAST(cast(count(NULLIF([SupplierNum],'')) as decimal) /count(*) AS decimal(10,3)) as [SupplierNum]

from dw.StockTransaction
where is_deleted != 1
group by Company 
) AS Grouped_Table
	 UNPIVOT ([PercentageNull] FOR Field IN ([WarehouseCode], [TransactionCode],[IndexKey], [TransactionCodeDescription], [PartNum], [BinNum], [BatchNum], [TransactionDate],  [TransactionTime], [TransactionQty], [TransactionValue],[Currency] ,[Reference] ,[CustomerNum],ExchangeRate,	IsActiveRecord,	IsInternalTransaction,	[PurchaseInvoiceLine],[PurchaseInvoiceNum], [PurchaseOrderLine], [PurchaseOrderNum],[SalesInvoiceLine],[SalesInvoiceNum],[SalesOrderLine],[SalesOrderNum],[STRes1],[STRes2],[STRes3],[SupplierNum]
											 ) 
			  ) as Unpivoted
) as subq_unpivoted


UNION ALL   
    

--dw.Supplier
SELECT [Company], [PercentageNull], [Field], [SMSSTable]
FROM( 
   select Company, 'dw.Supplier' as SMSSTable, Field,  [PercentageNull]
   FROM ( SELECT
       Company,
       CAST(cast(count(NULLIF([SupplierNum],'')) as decimal) /count(*) AS decimal(10,3)) as [SupplierNum],
	   CAST(cast(count(NULLIF([MainSupplierName],'')) as decimal) /count(*) AS decimal(10,3)) as [ParentSupplierName],--Was MainSupplierName
	   CAST(cast(count(NULLIF([SupplierName],'')) as decimal) /count(*) AS decimal(10,3)) as [SupplierName],
	   CAST(cast(count(NULLIF([AddressLine1],'')) as decimal) /count(*) AS decimal(10,3)) as [AddressLine1],
	   CAST(cast(count(NULLIF([AddressLine2],'')) as decimal) /count(*) AS decimal(10,3)) as [AddressLine2],
	   CAST(cast(count(NULLIF([AddressLine3],'')) as decimal) /count(*) AS decimal(10,3)) as [AddressLine3],
	   CAST(cast(count(NULLIF([TelephoneNum],'')) as decimal) /count(*) AS decimal(10,3)) as [TelephoneNum1], --refers to old telephonenum field 2023-03-22 SB
	   CAST(cast(count(NULLIF([TelephoneNum2],'')) as decimal) /count(*) AS decimal(10,3)) as [TelephoneNum2],
	   CAST(cast(count(NULLIF([Email],'')) as decimal) /count(*) AS decimal(10,3)) as [Email],
	   CAST(cast(count(NULLIF([ZipCode],'')) as decimal) /count(*) AS decimal(10,3)) as [ZipCode],
	   CAST(cast(count(NULLIF([City],'')) as decimal) /count(*) AS decimal(10,3)) as [City],
	   CAST(cast(count(NULLIF([CountryCode],'')) as decimal) /count(*) AS decimal(10,3)) as [CountryCode],
	   CAST(cast(count(NULLIF([CountryName],'')) as decimal) /count(*) AS decimal(10,3)) as [CountryName],
	   CAST(cast(count(NULLIF([Region],'')) as decimal) /count(*) AS decimal(10,3)) as [State],
	  -- CAST(cast(count(NULLIF([SupplierCategory],'')) as decimal) /count(*) AS decimal(10,3)) as [SupplierCategory], not in SC anymore
	   CAST(cast(count(NULLIF([SupplierResponsible],'')) as decimal) /count(*) AS decimal(10,3)) as [PrimaryPurchaser], --was SupplierResponsible
	   --CAST(cast(count(NULLIF([AddressLine],'')) as decimal) /count(*) AS decimal(10,3)) as [AddressLine], not requested in SC
	   --CAST(cast(count(NULLIF([FullAddressLine],'')) as decimal) /count(*) AS decimal(10,3)) as [FullAddressLine], not in source
	   CAST(cast(count(NULLIF([AccountNum],'')) as decimal) /count(*) AS decimal(10,3)) as [AccountNum], 
	   CAST(cast(count(NULLIF([VATNum],'')) as decimal) /count(*) AS decimal(10,3)) as [VATNum],
	   CAST(cast(count(NULLIF([OrganizationNum],'')) as decimal) /count(*) AS decimal(10,3)) as [OrgNum],
	   CAST(cast(count(NULLIF([InternalExternal],'')) as decimal) /count(*) AS decimal(10,3)) as [IsAxInterInternal], -- InternalExternal
	   CAST(cast(count(NULLIF([IsCompanyGroupInternal],'')) as decimal) /count(*) AS decimal(10,3)) as [IsCompanyGroupInternal],
	   CAST(cast(count(NULLIF([CodeOfConduct],'')) as decimal) /count(*) AS decimal(10,3)) as [CodeOfConduct],
	   --CAST(cast(count(NULLIF([CustomerNum],'')) as decimal) /count(*) AS decimal(10,3)) as [CustomerNum], not in SC anymore
	   CAST(cast(count(NULLIF([SupplierScore],'')) as decimal) /count(*) AS decimal(10,3)) as [SupplierScore],
	   CAST(cast(count([MinOrderQty]) as decimal) /count(*) AS decimal(10,3)) as [MinOrderQty],
	   CAST(cast(count([MinOrderValue]) as decimal) /count(*) AS decimal(10,3)) as [MinOrderValue],
	   CAST(cast(count(NULLIF([Website],'')) as decimal) /count(*) AS decimal(10,3)) as [Website],
	   CAST(cast(count(NULLIF([Comments],'')) as decimal) /count(*) AS decimal(10,3)) as [Comments],
	   CAST(cast(count(NULLIF([SupplierGroup],'')) as decimal) /count(*) AS decimal(10,3)) as [SupplierGroup],
	   CAST(cast(count(NULLIF([SupplierSubGroup],'')) as decimal) /count(*) AS decimal(10,3)) as [SupplierSubGroup],
	   CAST(cast(count(NULLIF([SupplierIndustry],'')) as decimal) /count(*) AS decimal(10,3)) as [SupplierIndustry],
	   CAST(cast(count(NULLIF([SupplierSubIndustry],'')) as decimal) /count(*) AS decimal(10,3)) as [SupplierSubIndustry],
	   CAST(cast(count(NULLIF([SupplierType],'')) as decimal) /count(*) AS decimal(10,3)) as [SupplierType],
	   CAST(cast(count(NULLIF([MinOrderValueCurrency],'')) as decimal) /count(*) AS decimal(10,3)) as [MinOrderValueCurrency],
	   CAST(cast(count([IsActiveRecord]) as decimal) /count(*) AS decimal(10,3)) as [IsActiveRecord],
	   CAST(cast(count([IsBusinessGroupInternal]) as decimal) /count(*) AS decimal(10,3)) as [IsBusinessAreaInternal],--mistakenly IsBusinessGROUPInternal in DW?
	   CAST(cast(count(NULLIF([SRes1],'')) as decimal) /count(*) AS decimal(10,3)) as [SRes1],
	   CAST(cast(count(NULLIF([SRes2],'')) as decimal) /count(*) AS decimal(10,3)) as [SRes2],
	   CAST(cast(count(NULLIF([SRes3],'')) as decimal) /count(*) AS decimal(10,3)) as [SRes3]


from dw.Supplier
where is_deleted != 1
group by Company 
) AS Grouped_Table
	 UNPIVOT ([PercentageNull] FOR Field IN ([SupplierNum], [ParentSupplierName], [SupplierName], [AddressLine1], [AddressLine2], [AddressLine3], [TelephoneNum1], [TelephoneNum2], [Email], [ZipCode], [City], [State], [CountryCode], [CountryName], [PrimaryPurchaser], [AccountNum],[OrgNum],[VATNum] ,[IsAxInterInternal],[IsCompanyGroupInternal], [CodeOfConduct], [SupplierScore] ,[MinOrderQty], [MinOrderValue], [Website], [Comments],[SupplierGroup], [SupplierSubGroup], [SupplierIndustry], [SupplierSubIndustry], [SupplierType], [MinOrderValueCurrency],[IsActiveRecord],[IsBusinessAreaInternal], [SRes1], [SRes2], [SRes3]
	 ) 
			  ) as Unpivoted
) as subq_unpivoted


UNION ALL  

--dw.SupplierAgreement

SELECT [Company], [PercentageNull], [Field], [SMSSTable]
FROM( 
   select Company, 'dw.SupplierAgreement' as SMSSTable, Field,  [PercentageNull]
   FROM ( SELECT
       Company,
       CAST(cast(count(NULLIF([SupplierNum],'')) as decimal) /count(*) AS decimal(10,3)) as [SupplierNum],
	   CAST(cast(count(NULLIF([PartNum],'')) as decimal) /count(*) AS decimal(10,3)) as [PartNum],
	   CAST(cast(count(NULLIF([AgreementCode],'')) as decimal) /count(*) AS decimal(10,3)) as [AgreementCode],
	   CAST(cast(count(NULLIF([AgreementDescription],'')) as decimal) /count(*) AS decimal(10,3)) as [AgreementDescription],
	   CAST(cast(count([DiscountPercent]) as decimal) /count(*) AS decimal(10,3)) as [DiscountPercent],
	   CAST(cast(count([UnitPrice]) as decimal) /count(*) AS decimal(10,3)) as [UnitPrice],
	   CAST(cast(count(NULLIF([UoM],'')) as decimal) /count(*) AS decimal(10,3)) as [UoM],
	   CAST(cast(count([AgreementQty]) as decimal) /count(*) AS decimal(10,3)) as [AgreementQty],
	   CAST(cast(count([FulfilledQty]) as decimal) /count(*) AS decimal(10,3)) as [FulfilledQty],
	   CAST(cast(count([RemainingQty]) as decimal) /count(*) AS decimal(10,3)) as [RemainingQty],
	   CAST(cast(count(NULLIF([Currency],'')) as decimal) /count(*) AS decimal(10,3)) as [Currency],
	   CAST(cast(count(NULLIF([DelivTime],'')) as decimal) /count(*) AS decimal(10,3)) as [DelivTime],
	   CAST(cast(count(NULLIF([AgreementStart],'')) as decimal) /count(*) AS decimal(10,3)) as [AgreementStart],
	   CAST(cast(count(NULLIF([AgreementEnd],'')) as decimal) /count(*) AS decimal(10,3)) as [AgreementEnd],
	   CAST(cast(count(NULLIF([SupplierTerms],'')) as decimal) /count(*) AS decimal(10,3)) as [SupplierTerms],
	   CAST(cast(count(NULLIF(AgreementResponsible,'')) as decimal) /count(*) AS decimal(10,3)) as [AgreementResponsible],
	   CAST(cast(count(IsActiveRecord) as decimal) /count(*) AS decimal(10,3)) as IsActiveRecord,
	   CAST(cast(count(NULLIF(SARes1,'')) as decimal) /count(*) AS decimal(10,3)) as [SARes1],
	   CAST(cast(count(NULLIF(SARes2,'')) as decimal) /count(*) AS decimal(10,3)) as [SARes2],
	   CAST(cast(count(NULLIF(SARes3,'')) as decimal) /count(*) AS decimal(10,3)) as [SARes3]

from dw.SupplierAgreement
where is_deleted != 1
group by Company 
) AS Grouped_Table
	 UNPIVOT ([PercentageNull] FOR Field IN ([SupplierNum], [PartNum], [AgreementCode], [AgreementDescription], [DiscountPercent], [UnitPrice], [UoM], [AgreementQty], [FulfilledQty], [RemainingQty], [Currency], [DelivTime],  [AgreementStart], [AgreementEnd], [SupplierTerms],AgreementResponsible,IsActiveRecord,[SARes1],[SARes2],[SARes3]
											 ) 
			  ) as Unpivoted
) as subq_unpivoted

UNION ALL  
   

-- dimWarehouse
SELECT [Company], [PercentageNull], [Field], [SMSSTable]
FROM( 
   select Company,  'dw.Warehouse' as SMSSTable, Field,  [PercentageNull]
   FROM ( SELECT
       Company,
       CAST(cast(count(NULLIF(WarehouseCode,'')) as decimal) /count(*) AS decimal(10,3)) as WarehouseCode,
	   CAST(cast(count(NULLIF(WarehouseName,'')) as decimal) /count(*) AS decimal(10,3)) as WarehouseName,
	   --CAST(cast(count(NULLIF(WarehouseDistrict,'')) as decimal) /count(*) AS decimal(10,3)) as WarehouseDistrict,
	   CAST(cast(count(NULLIF(WarehouseAddress,'')) as decimal) /count(*) AS decimal(10,3)) as [Address], -- Changed AS statement due to name change 2023-03-08 SB
	   CAST(cast(count(NULLIF(WarehouseDescription,'')) as decimal) /count(*) AS decimal(10,3)) as WarehouseDescription,
	   CAST(cast(count(NULLIF(WarehouseType,'')) as decimal) /count(*) AS decimal(10,3)) as WarehouseType,
	   CAST(cast(count(NULLIF(WarehouseCountry,'')) as decimal) /count(*) AS decimal(10,3)) as CountryName, -- Changed AS statement due to name change 2023-03-08 SB
	   CAST(cast(count(NULLIF(WarehouseSite,'')) as decimal) /count(*) AS decimal(10,3)) as Site, -- Changed AS statement due to name change 2023-03-08 SB
	   CAST(cast(count(NULLIF(City,'')) as decimal) /count(*) AS decimal(10,3)) as City, 
	   CAST(cast(count(NULLIF(CountryCode,'')) as decimal) /count(*) AS decimal(10,3)) as CountryCode, 
	   CAST(cast(count(IsActiveRecord) as decimal) /count(*) AS decimal(10,3)) as IsActiveRecord,
	   CAST(cast(count(NULLIF(State,'')) as decimal) /count(*) AS decimal(10,3)) as State, 
	   CAST(cast(count(NULLIF(WhRes1,'')) as decimal) /count(*) AS decimal(10,3)) as WhRes1, 
	   CAST(cast(count(NULLIF(WhRes2,'')) as decimal) /count(*) AS decimal(10,3)) as WhRes2, 
	   CAST(cast(count(NULLIF(WhRes3,'')) as decimal) /count(*) AS decimal(10,3)) as WhRes3, 
	   CAST(cast(count(NULLIF(ZipCode,'')) as decimal) /count(*) AS decimal(10,3)) as ZipCode 

from dw.Warehouse
where is_deleted != 1
group by Company 
) AS Grouped_Table
	 UNPIVOT ([PercentageNull] FOR Field IN (WarehouseCode, WarehouseName,  Address, WarehouseDescription, WarehouseType, CountryName, Site,
	 City, CountryCode,  IsActiveRecord,State,  WhRes1,  WhRes2,  WhRes3, ZipCode 
											 ) 
			  ) as Unpivoted
) as subq_unpivoted



-- Join to get columns from Company table
) as CovAud
GO
PRINT N'Creating [stage].[NOM_SE_OLine]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[NOM_SE_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[SalesOrderType] [nvarchar] (50) NULL,
[OrderRelNum] [nvarchar] (50) NULL,
[OrderDate] [nvarchar] (50) NULL,
[ExpDelivDate] [nvarchar] (50) NULL,
[DelivDate] [nvarchar] (50) NULL,
[NeedByDate] [nvarchar] (50) NULL,
[FirstConfirnedDate] [nvarchar] (50) NULL,
[ActualDelivDate] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (38, 8) NULL,
[DelivQty] [decimal] (38, 8) NULL,
[RemainingQty] [decimal] (38, 8) NULL,
[UnitPrice] [numeric] (28, 8) NULL,
[UnitCost] [numeric] (28, 8) NULL,
[SumUnitCost] [numeric] (38, 6) NULL,
[SumUnitPrice] [numeric] (38, 6) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (28, 8) NULL,
[OpenRelease] [nvarchar] (1) NULL,
[DiscountPercent] [decimal] (38, 6) NULL,
[DiscountAmount] [decimal] (38, 6) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [int] NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[SalesOrderChannel] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (100) NULL,
[SalesReturnOrderNum] [nvarchar] (50) NULL,
[SalesReturnInvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[ItemClass] [nvarchar] (50) NULL,
[UpdateStock] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vNOM_SE_OLine]'
GO
CREATE VIEW [stage].[vNOM_SE_OLine] AS
--COMMENT EMPTY FIELDS 2022-12-20 VA
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company),'#', TRIM(OrderNum),'#', TRIM(OrderLine),'#', TRIM(OrderRelNum))))) AS SalesOrderID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID 
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(OrderNum))))) AS SalesOrderNumID  
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(OrderNum),'#',TRIM(OrderLine))) AS SalesOrderCode 
	,CONVERT(int, replace(convert(date, OrderDate),'-','')) AS SalesOrderDateID --Redundant?  
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey 

	,UPPER(TRIM(Company)) AS Company
	,UPPER(TRIM(CustNum)) AS CustomerNum 
	,UPPER(TRIM(OrderNum)) AS SalesOrderNum
	,UPPER(TRIM(OrderLine)) AS SalesOrderLine
	,OrderSubLine AS SalesOrderSubLine
	,IIF(SalesOrderType = '10 - Internal Order', 'Internal Order', SalesOrderType) AS SalesOrderType -- added 2022-08-26 LL/DZ
	--,'' AS SalesOrderCategory
	,CONVERT(date, IIF(OrderDate = '0--', '1900-01-01', OrderDate)) AS SalesOrderDate
	,CONVERT(date, IIF(NeedbyDate = '0--', '1900-01-01', NeedbyDate)) AS NeedbyDate
	,CONVERT(date, IIF(ExpDelivDate = '0--', '1900-01-01', ExpDelivDate)) AS ExpDelivDate
	,CONVERT(date, IIF(ActualDelivDate = '0--', '1900-01-01', ActualDelivDate)) AS ActualDelivDate
	,CONVERT(date, IIF(FirstConfirnedDate = '0--', '1900-01-01', FirstConfirnedDate)) AS ConfirmedDelivDate
	,UPPER(TRIM(InvoiceNum)) AS SalesInvoiceNum
	,IIF(SalesOrderType = '7 - Direct Credit Order' OR SalesOrderType = '8 - Credit Order', -1*OrderQty, OrderQty) AS SalesOrderQty
	,IIF(SalesOrderType = '7 - Direct Credit Order' OR SalesOrderType = '8 - Credit Order', -1*DelivQty, DelivQty) AS DelivQty
	,RemainingQty
	--,NULL AS SalesInvoiceQty
	--,'' AS UoM
	,UnitPrice
	,UnitCost
	,Currency  --CASE WHEN (Company = 'NomoSE' and CurrExChRate = 1) THEN 'SEK'  WHEN (Company = 'NomoDK' and CurrExChRate = 1) THEN 'DKK'  WHEN (Company = 'NomoFI' and CurrExChRate = 1) THEN 'EUR' ELSE CURRENCY END AS 
	,ExchangeRate
	,CASE WHEN OpenRelease = 'I' THEN '0' ELSE '1' END AS OpenRelease
	,IIF(SalesOrderType = '7 - Direct Credit Order' OR SalesOrderType = '8 - Credit Order', -1*DiscountAmount, DiscountAmount) AS DiscountAmount
	,IIF(SalesOrderType = '7 - Direct Credit Order' OR SalesOrderType = '8 - Credit Order', -1*DiscountPercent, DiscountPercent) AS DiscountPercent
	,PartNum
	,ItemClass AS PartType
	,PartStatus
	,SalesPersonName
	,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
	,SalesOrderChannel AS SalesChannel
	,SalesOrderChannel As AxInterSalesChannel
	,UpdateStock AS IsUpdatingStock
	--,'' AS Department
	--,'' AS ProjectNum
	--,'' AS IndexKey
	,ReturnComment
	,UPPER(TRIM(SalesReturnOrderNum)) AS SalesReturnOrderNum
	,UPPER(TRIM(SalesReturnInvoiceNum)) AS SalesReturnInvoiceNum
	--,'0' AS Cancellation
	--,'' AS SORes1
	--,'' AS SORes2
	--,'' AS SORes3
	--,NULL AS [TotalMiscChrg]
FROM stage.NOM_SE_OLine
GROUP BY
	PartitionKey, Company, CustNum, OrderNum, OrderLine, OrderSubLine, SalesOrderType, OrderRelNum, InvoiceNum, OrderQty, DelivQty, RemainingQty, UnitPrice, UnitCost, Currency, ExchangeRate, OpenRelease, DiscountAmount, DiscountPercent, PartNum, PartStatus, SalesPersonName, ReturnComment, SalesReturnOrderNum, SalesReturnInvoiceNum, WarehouseCode, OrderDate, NeedbyDate, DelivDate, SalesOrderChannel, ItemClass, ExpDelivDate, ActualDelivDate, FirstConfirnedDate, UpdateStock
GO
PRINT N'Creating [stage].[vAXI_HQ_PurchaseLedger]'
GO




CREATE VIEW [stage].[vAXI_HQ_PurchaseLedger] AS
SELECT 

	  CONVERT(binary(32), HASHBYTES('SHA2_256', CONCAT(Company, '#', PurchaseInvoiceNum, '#', SupplierNum ))) AS PurchaseLedgerID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', SupplierNum ))) AS SupplierID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', '' ))) AS ProjectID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256', CONCAT(Company, '#', PurchaseInvoiceNum ))) AS PurchaseInvoiceID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256', CONCAT(Company, '#', '' ))) AS PurchaseOrderNumID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',Company)) AS CompanyID
	  ,CONVERT([binary](32), HASHBYTES('SHA2_256', Currency)) AS CurrencyID
	  ,CONVERT(int, replace(convert(date, PurchaseInvoiceDate), '-', '')) AS PurchaseInvoiceDateID
	  ,CONCAT(Company, '#', PurchaseInvoiceNum, '#', SupplierNum ) AS PurchaseLedgerCode
	  ,CONVERT(varchar, GETDATE(), 23) AS PartitionKey

      ,[Company]
      ,[SupplierNum]
      ,[PurchaseInvoiceNum]
      ,[PurchaseInvoiceDate]
	  ,'' AS PurchaseOrderNum
      ,[PurchaseDueDate]
      ,[PurchaseLastPaymentDate]
      ,[InvoiceAmount]
      ,CAST(COALESCE(InvoiceAmountLC/NULLIF([InvoiceAmount],0),[ExchangeRate]) AS decimal(18,8)) AS  [ExchangeRate]
      ,IIF([ExchangeRate] = 1, 'SEK', [Currency]) AS [Currency]
      ,[VATAmount]
      ,[VATCode]
      ,[PayToName]
      ,[PayToCity]
      ,[PayToContact]
      ,[PaymentTerms]
      ,[PrePaymentNum]
      ,[LastPaymentNum]
      ,-1*[PaidInvoiceAmount]	AS [PaidInvoiceAmount]
      ,[AccountingDate]
      ,CASE WHEN [InvoiceAmount] + [PaidInvoiceAmount] <> 0 AND DATEDIFF(DAY, [PurchaseDueDate], GETDATE())< -7 THEN 'Not Due Yet'
	WHEN [InvoiceAmount] + [PaidInvoiceAmount] <> 0 AND DATEDIFF(DAY, [PurchaseDueDate], GETDATE()) BETWEEN -7 AND 0 THEN 'Due in (0-7)'
	WHEN [InvoiceAmount] + [PaidInvoiceAmount] <> 0 AND DATEDIFF(DAY, [PurchaseDueDate], GETDATE())BETWEEN 1 AND 14 THEN 'Overdue (1-14)'
	WHEN [InvoiceAmount] + [PaidInvoiceAmount] <> 0 AND DATEDIFF(DAY, [PurchaseDueDate], GETDATE())BETWEEN 15 AND 30 THEN 'Overdue (15-30)'
	WHEN [InvoiceAmount] + [PaidInvoiceAmount] <> 0 AND DATEDIFF(DAY, [PurchaseDueDate], GETDATE())BETWEEN 31 AND 60 THEN 'Overdue (31-60)'
	WHEN [InvoiceAmount] + [PaidInvoiceAmount] <> 0 AND DATEDIFF(DAY, [PurchaseDueDate], GETDATE())> 60 THEN 'Overdue (60>)'
	WHEN [InvoiceAmount] + [PaidInvoiceAmount] = 0 THEN 'Settled'
	ELSE '' END AS [AgingPeriod]
	,CASE WHEN [InvoiceAmount] + [PaidInvoiceAmount] = 0 THEN 0
	WHEN [InvoiceAmount] + [PaidInvoiceAmount] <> 0 AND DATEDIFF(DAY, [PurchaseDueDate], GETDATE())<-7 THEN 1
	WHEN [InvoiceAmount] + [PaidInvoiceAmount] <> 0 AND DATEDIFF(DAY, [PurchaseDueDate], GETDATE())BETWEEN -7 AND 0 THEN 2
	WHEN [InvoiceAmount] + [PaidInvoiceAmount] <> 0 AND DATEDIFF(DAY, [PurchaseDueDate], GETDATE())BETWEEN 1 AND 14 THEN 3
	WHEN [InvoiceAmount] + [PaidInvoiceAmount] <> 0 AND DATEDIFF(DAY, [PurchaseDueDate], GETDATE())BETWEEN 15 AND 30 THEN 4
	WHEN [InvoiceAmount] + [PaidInvoiceAmount] <> 0 AND DATEDIFF(DAY, [PurchaseDueDate], GETDATE())BETWEEN 31 AND 60 THEN 5
	WHEN [InvoiceAmount] + [PaidInvoiceAmount] <> 0 AND DATEDIFF(DAY, [PurchaseDueDate], GETDATE())>'60' THEN 6
	ELSE 7 END AS [AgingSort]
      ,[VATCodeDesc]
      ,[InvoiceAmount] + [PaidInvoiceAmount] AS [RemainingInvoiceAmount]
--	  ,PLLink.LinkToOriginalInvoice --don't un-comment this line before you have a solution for duplication.
      ,[PLRes1]
      ,[PLRes2]
      ,[PLRes3]
  FROM [stage].[AXI_HQ_PurchaseLedger] PL
  where UPPER(pl.company) = 'AXISE'
  --LEFT JOIN ( SELECT DISTINCT		--don't un-comment this line before you have a solution for duplication.
		--	PurchaseInvoiceNum AS PIM
		--	,LinkToOriginalInvoice 
		--	FROM [stage].[AXI_HQ_GeneralLedger]
		--	where PurchaseInvoiceNum IS NOT NULL ) AS PLLink	ON PLLink.PIM = PL.PurchaseInvoiceNum
GO
PRINT N'Creating [dnb].[vdimSupplier]'
GO



CREATE view [dnb].[vdimSupplier] as
select 
  convert(bigint,supplier.SupplierID) as SupplierID
, supplier.AccountNum
, supplier.AddressLine
, supplier.AddressLine1
, supplier.AddressLine2
, supplier.AddressLine3
, supplier.City
, supplier.CodeOfConduct
, supplier.Comments
, supplier.Company
, supplier.CompanyID
, supplier.CountryCode
, supplier.CountryName
, supplier.CustomerNum
, supplier.District
, supplier.Email
, supplier.FullAddressLine
, supplier.InternalExternal
, supplier.IsActiveRecord
, supplier.IsBusinessGroupInternal
, supplier.IsCompanyGroupInternal
, supplier.MainSupplierName
, supplier.MinOrderQty
, supplier.MinOrderValue
, supplier.OrganizationNum
, supplier.PartitionKey
, supplier.PurchaserPersonCode
, supplier.PurchaserPersonName
, supplier.Region
, supplier.SRes1
, supplier.SRes2
, supplier.SRes3
, supplier.State
, supplier.SupplierCategory
, supplier.SupplierCode
, supplier.SupplierGroup
, supplier.SupplierIndustry
, supplier.SupplierName
, supplier.SupplierNum
, supplier.SupplierResponsible
, supplier.SupplierScore
, supplier.SupplierStatus
, supplier.SupplierSubGroup
, supplier.SupplierSubIndustry
, supplier.TelephoneNum
, supplier.VATNum
, supplier.Website
, supplier.ZipCode
, cast(dnb.DUNS as nvarchar(30)) as DUNS
,dnb.confidence_code as ConfidenceCode
from dw.Supplier as supplier
INNER JOIN dnb.DnBCustomerAndSupplier as dnb
	on supplier.SupplierID = dnb.dw_id
		and is_customer = 0;
GO
PRINT N'Creating [stage].[AXL_SE_SalesLedger]'
GO
CREATE TABLE [stage].[AXL_SE_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceAmount] [decimal] (18, 4) NULL,
[RemainAmount] [decimal] (18, 4) NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vAXL_SE_SalesLedger]'
GO
CREATE VIEW [stage].[vAXL_SE_SalesLedger] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(sl.Company, '#', TRIM(sl.CustNum), '#', TRIM(sl.InvoiceNum))))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(sl.Company))) AS CompanyID
	,UPPER(CONCAT(sl.Company, '#', TRIM(sl.CustNum), '#', TRIM(sl.InvoiceNum))) AS SalesLedgerCode
	,sl.PartitionKey

	,UPPER(sl.Company) AS Company
	,UPPER(TRIM(sl.CustNum)) AS CustomerNum
	,TRIM(sl.InvoiceNum) AS [SalesInvoiceNum]
	,IIF(so.InvoiceDate = '' OR so.InvoiceDate IS NULL, '1900-01-01', so.InvoiceDate) AS [SalesInvoiceDate] --
	,CONVERT(date, DueDate) AS SalesDueDate
	,CONVERT(date, LastPaymentDate) AS LastPaymentDate
	,[InvoiceAmount]
	,[RemainAmount] AS [RemainingInvoiceAmount]
	,NULL AS CashDiscOffered
	,NULL AS CashDiscUsed
	,NULL AS [ExchangeRate]
	,NULL AS [Currency]
	,NULL AS [VATAmount]
	,NULL AS [VATCode]
	,NULL AS [PayToName]
	,NULL AS [PayToCity]
	,NULL AS [PayToContact]
	,NULL AS [PaymentTerms]
	,sl.Res1 AS SLRes1
	,sl.Res2 AS SLRes2
	,sl.Res3 AS SLRes3
FROM stage.AXL_SE_SalesLedger sl
	LEFT JOIN stage.AXL_CZ_SOLine so ON TRIM(sl.InvoiceNum) = TRIM(so.InvoiceNum)
WHERE DueDate > '2015-01-01'
GROUP BY
	sl.PartitionKey, sl.Company, sl.CustNum, sl.InvoiceNum, sl.Res2, sl.Res1, sl.Res3, sl.[InvoiceAmount], sl.[RemainAmount], so.InvoiceDate, DueDate, LastPaymentDate
GO
PRINT N'Creating [dm_DS].[dimCustomer]'
GO




CREATE VIEW [dm_DS].[dimCustomer] AS

SELECT 
	   cust.[CustomerID]
      ,cust.[CompanyID]
      ,cust.[Company]
      ,cust.[CustomerNum]
      ,cust.[MainCustomerName]
      ,cust.[CustomerName]
      ,cust.[Customer]
      ,cust.[AddressLine1]
      ,cust.[AddressLine2]
      ,cust.[AddressLine3]
      ,cust.[TelephoneNum1]
      ,cust.[TelephoneNum2]
      ,cust.[Email]
      ,cust.[ZipCode]
      ,cust.[City]
      ,cust.[State]
      ,cust.[SalesDistrict]
      ,cust.[CountryCode]
      ,cust.[CountryName]
      ,cust.[Division]
      ,cust.[CustomerIndustry]
      ,cust.[CustomerSubIndustry]
      ,cust.[AddressLine]
      ,cust.[FullAddressLine]
      ,cust.[CustomerGroup]
      ,cust.[CustomerSubGroup]
      ,cust.[SalesPersonCode]
      ,cust.[SalesPersonName]
      ,cust.[SalesPersonResponsible]
      ,cust.[VATNum]
      ,cust.[OrganizationNum]
      ,cust.[AccountNum]
      ,cust.[InternalExternal]
      ,cust.[CustomerScore]
      ,cust.[CustomerType]
      ,cust.[CustomerCode]
      ,cust.[CustomerStatus]
      ,cust.[DUNS]
      ,cust.[DUNS_MatchScore]
      ,cust.[CRes1]
      ,cust.[CRes2]
      ,cust.[CRes3]
      ,cust.[is_inferred]
      ,cust.[is_deleted]
      ,cust.[is_validCountryCode]
      ,cust.[DUNS_Status]

FROM [dm].[DimCustomer] cust
LEFT JOIN dbo.Company com ON cust.Company = com.Company
WHERE com.BusinessArea = 'Driveline Solutions' AND com.[Status] = 'Active' 

--WHERE [Company] in ('MIT', 'ATZ', 'Transaut', 'IPLIOWTR')
GO
PRINT N'Creating [stage].[JEN_SE_OLine]'
GO
CREATE TABLE [stage].[JEN_SE_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderRelNum] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[ERPOrderStatus] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[NeedbyDate] [date] NULL,
[DelivDate] [date] NULL,
[ConfirmedDelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[SumUnitCost] [decimal] (18, 4) NULL,
[SumUnitPrice] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[CurrExchRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (1) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[Site] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[SalesPerson] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (500) NULL,
[SalesReturnOrderNum] [nvarchar] (50) NULL,
[SalesReturnInvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[CustPONo] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vJEN_SE_OLine]'
GO

CREATE VIEW [stage].[vJEN_SE_OLine] AS
--COMMENT EMPTY FIELDS // ADD UPPER()TRIM() INTO PartID,CustomerID 2022-12-19 VA
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',OrderNum,'#',OrderLine,'#',OrderSubLine,'#',OrderRelNum,'#',InvoiceNum,'#',SalesReturnOrderNum,'#',SalesReturnInvoiceNum))) AS SalesOrderID -- ext OrderRelNum
	,CONVERT([binary](32),HASHBYTES('SHA2_256',Company)) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) )))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID 
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) )))) AS PartID 
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(WarehouseCode))))) AS WareHouseID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(WarehouseCode)))) AS WareHouseID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(OrderNum)))) AS SalesOrderNumID
	,CONCAT(Company,'#',OrderNum,'#',OrderLine,'#',OrderSubLine, '#',InvoiceNum) AS SalesOrderCode
	,CONVERT(int, replace(convert(date, OrderDate),'-','')) AS SalesOrderDateID   --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey 

	,Company 
	,TRIM(CustNum) AS CustomerNum 
	,OrderNum		AS SalesOrderNum
	,OrderLine		AS SalesOrderLine
	,OrderSubLine	AS SalesOrderSubLine
	,OrderType		AS SalesOrderType
	,ERPOrderStatus	AS SalesOrderCategory	--Added ERPOrderStatus here because SalesOrderCategory is unused field for JENS S.
	,OrderRelNum	AS SalesOrderRelNum
	,OrderDate		AS SalesOrderDate
	,NeedbyDate
	,DelivDate		AS ExpDelivDate
	,CAST('1900-01-01' AS date) AS ActualDelivDate
	,ConfirmedDelivDate
	,InvoiceNum		AS SalesInvoiceNum
	,OrderQty		AS SalesOrderQty
	,DelivQty
	,RemainingQty
	--,NULL AS SalesInvoiceQty
	--,''				AS UoM
	,UnitPrice
	,UnitCost
	,CurrencyCode	AS Currency
	,CurrExchRate	AS ExchangeRate
	,OpenRelease
	,DiscountAmount
	,DiscountPercent
	,TRIM(PartNum) AS PartNum
	--,''				AS PartType
	--,'0'				AS PartStatus
	,SalesPerson	AS SalesPersonName
	,TRIM(WarehouseCode) AS WarehouseCode
	,CASE WHEN TRIM(SalesPerson) = 'EDI - Digital Order' THEN 'EDI'
		ELSE 'Normal Order Handling' END AS SalesChannel
	,CASE WHEN TRIM(SalesPerson) = 'EDI - Digital Order' THEN 'EDI'
		ELSE 'Normal Order Handling' END AS AxInterSalesChannel
	--,'' AS Department
	--,'' AS ProjectNum
	--,'' AS IndexKey
	--,'0' AS Cancellation
	--,'' AS SORes1
	--,'' AS SORes2
	--,'' AS SORes3
	,iif(ReturnComment = ' ',null,ReturnComment) as SORes1
	,SalesReturnOrderNum
	,SalesReturnInvoiceNum
	,CustPONo AS SORes2
	--,NULL AS [TotalMiscChrg]
FROM stage.JEN_SE_OLine
GO
PRINT N'Creating [stage].[ABK_SE_PurchaseOrder]'
GO
CREATE TABLE [stage].[ABK_SE_PurchaseOrder]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [varchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[PurchaseOrderDate] [nvarchar] (50) NULL,
[OrgReqDelivDate] [nvarchar] (50) NULL,
[OrgCommittedDelivDate] [nvarchar] (50) NULL,
[ActualDelivDate] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PurchaseOrderQty] [decimal] (18, 4) NULL,
[PurchaseReceiveQty] [decimal] (18, 4) NULL,
[PurchaseInvoiceQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[PurchaserName] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[LandedCost] [decimal] (18, 4) NULL,
[IsClosed] [bit] NULL,
[IsActiveRecord] [bit] NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vABK_SE_PurchaseOrder]'
GO
CREATE VIEW [stage].[vABK_SE_PurchaseOrder] AS
--COMMENT EMPTY FIELD // ADD TRIM() 2022-12-21 VA
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(UPPER([PartNum])))))) AS PurchaseOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', '')))) AS PurchaseInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', '')))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum))))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(UPPER(SupplierNum)))))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(UPPER([PartNum])))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Currency])))) AS CurrencyID
	,UPPER(CONCAT(Company, '#', TRIM(SupplierNum), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine))) AS PurchaseOrderCode
	,PartitionKey

	,UPPER(Company) AS Company
	,UPPER(TRIM([PartNum])) AS PartNum
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
	,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
	,TRIM(PurchaseOrderNum) AS PurchaseOrderNum
	,TRIM(PurchaseOrderLine) AS PurchaseOrderLine
	--,'' AS PurchaseOrderSubLine
	--,'' AS PurchaseOrderType
	--,'' AS PurchaseOrderStatus
	,CONVERT(Date, IIF(PurchaseOrderDate = '0', '1900-01-01', PurchaseOrderDate)) AS PurchaseOrderDate
	,CONVERT(Date, IIF(OrgReqDelivDate = '0', '1900-01-01', OrgReqDelivDate)) AS OrgReqDelivDate
	,CONVERT(Date, IIF(OrgCommittedDelivDate = '0', '1900-01-01', OrgCommittedDelivDate)) AS CommittedDelivDate
	,CONVERT(Date, IIF(ActualDelivDate = '0', '1900-01-01', ActualDelivDate)) AS ActualDelivDate
	,CONVERT(Date, '1900-01-01') AS ReqDelivDate
	,CONVERT(Date, '1900-01-01') AS DelivDate
	--,'' AS PurchaseInvoiceNum
	--,'' AS SupplierPartNum
	--,'' AS SupplierInvoiceNum
	--,'' AS DelivCustomerNum
	--,'' AS PartStatus
	,PurchaseOrderQty
	,PurchaseReceiveQty AS ReceiveQty
	,PurchaseInvoiceQty AS InvoiceQty
	--,NULL AS MinOrderQty
	--,'' AS UoM
	,UnitPrice AS UnitPrice
	--,NULL AS DiscountPercent
	--,NULL AS DiscountAmount
	--,NULL AS TotalMiscChrg
	,LandedCost
	,IIF(Currency IN ('SEK', 'DKK', 'NOK'), (CONVERT(decimal(18,4), ExchangeRate))/100, (CONVERT(decimal(18,4), ExchangeRate)))ExchangeRate
	,TRIM(Currency) AS Currency
	,TRIM(PurchaserName) AS PurchaserName
	--,'' AS ReceivingNum
	--,'' AS DelivTime
	--,'' AS PurchaseChannel
	--,'' AS Documents
	--,'' AS Comments
	--,'' AS PORes1
	--,'' AS PORes2
	--,'' AS PORes3
	--,'' AS [LineType]
	--,'' AS ItemType
	--,'' AS DaysSincePOrder
FROM 
	[stage].[ABK_SE_PurchaseOrder]
	
--GROUP BY
--	PartitionKey, Company, PurchaseOrderNum, PurchaseOrderLine, PurchaseOrderSubLine, SupplierCode, DelivCustCode, LineType, InvoiceNum, PartNum, OrderType, UnitPrice, DiscountPercent, OrderedQty, ReceivedQty, InvoicedQty, TotalMiscChrg, ExchangeRate, CurrencyCode, ItemType, OrderDate, OrgReqDelivDate, CommitedDelivDate, ActualDelivDate, DelivDate, ReqDelivDate, PurchaserName, RecievingNumber, LeadTime, Comments, WarehouseCode
GO
PRINT N'Creating [dnb].[sp_Match]'
GO
CREATE PROCEDURE [dnb].[sp_Match] @DUNS int, @confidence_code int, @dw_id_bigint bigint, @is_customer bit as


	UPDATE dnb.DnBCustomerAndSupplier
	SET DUNS = @DUNS,
	confidence_code = @confidence_code,
	sent_date = GETDATE(),
	match_date = GETDATE()
	WHERE CONVERT(bigint, dw_id) = @dw_id_bigint
	AND is_customer = @is_customer;
GO
PRINT N'Creating [stage].[JEN_NB_Warehouse]'
GO
CREATE TABLE [stage].[JEN_NB_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseNum] [nvarchar] (50) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL,
[Addressline1] [nvarchar] (200) NULL,
[Addressline2] [nvarchar] (200) NULL,
[Addressline3] [nvarchar] (200) NULL,
[City] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vJEN_NB_Warehouse]'
GO
CREATE VIEW [stage].[vJEN_NB_Warehouse] AS
--COMMENT EMPTY FIELDS 23-01-03 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseNum]))))) AS WarehouseID
	,PartitionKey

	,UPPER([Company]) AS Company
	,TRIM([WarehouseNum]) AS [WarehouseCode]
	,[WarehouseName]
	,Addressline3 AS [WarehouseDistrict]
	,LEFT(CONCAT(Addressline1, ', ', Addressline2, ', ', Addressline3)  , 200) AS [WarehouseAddress]
	--,'' AS [WarehouseDescription]
	--,'' AS [WarehouseType]
	--,'' AS [WarehouseCountry]
	--,'' AS [WarehouseSite]
FROM [stage].[JEN_NB_Warehouse]
GO
PRINT N'Creating [stage].[CER_EE_SalesLedger]'
GO
CREATE TABLE [stage].[CER_EE_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (10) NULL,
[InvoiceNum] [nvarchar] (25) NULL,
[InvoiceDate] [datetime] NULL,
[DueDate] [datetime] NULL,
[LastPaymentDate] [datetime] NULL,
[InvoiceAmountOC] [decimal] (18, 8) NULL,
[PaidAmountOC] [decimal] (18, 8) NULL,
[OpenAmountOC] [decimal] (18, 8) NULL,
[ExchangeRate] [decimal] (18, 8) NULL,
[Currency] [nvarchar] (10) NULL,
[VATAmount] [decimal] (18, 8) NULL,
[VATCode] [nvarchar] (25) NULL
)
GO
PRINT N'Creating [stage].[vCER_EE_SalesLedger]'
GO

CREATE VIEW [stage].[vCER_EE_SalesLedger] AS
--COMMENT EMPTY FIELDS // ADJUST CustomerID 2022-12-15 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', CustNum, '#', InvoiceNum))) AS SalesLedgerID,
	CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID,
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID,
	--CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ))))) AS CustomerID,
	CONCAT(Company,'#',CustNum, '#', InvoiceNum) AS SalesLedgerCode,
	PartitionKey,

	UPPER(TRIM(Company)) AS Company,
	UPPER(TRIM(CustNum)) AS CustomerNum,
	TRIM(InvoiceNum) AS SalesInvoiceNum,
	InvoiceDate AS SalesInvoiceDate,
	CONVERT(date, DueDate) AS SalesDueDate,
	CONVERT(date, LastPaymentDate) AS SalesLastPaymentDate,
	InvoiceAmountOC AS InvoiceAmount,
	PaidAmountOC AS PaidInvoiceAmount,
	OpenAmountOC AS RemainingInvoiceAmount,
	ExchangeRate,
	Currency,
	VATAmount,
	VATCode,
	--'' AS PayToName,
	--'' AS PayToCity,
	--'' AS PayToContact,
	--'' AS PaymentTerms,
	--'' AS SLRes1,
	--'' AS SLRes2,
	--'' AS SLRes3
	'1900-01-01' AS AccountingDate
	--,NULL AS AgingPeriod
	--,NULL AS AgingSort
	--,NULL AS VATCodeDesc
	--,NULL AS LinkToOriginalInvoice
FROM 
	stage.CER_EE_SalesLedger
GO
PRINT N'Creating [dnb].[dimDnB_SupplierMatchImprovements]'
GO


CREATE view [dnb].[dimDnB_SupplierMatchImprovements] as
select convert(bigint,dnb.dw_id) as SupplierID
,dnb.confidence_code																as DUNS_MatchScore
,error.errorDescription																as DUNS_MatchDescription	-- DUNS_MatchDescription
--,dnb.match_status																										-- THIS CAN BE EXCLUDED SINCE THE CODE IS NOT INTERESTING
,case 
	when mc.[matchCandidates.matchQualityInformation.matchGradeComponents.componentType] = 'PostalCode' then 'ZipCode'
	when mc.[matchCandidates.matchQualityInformation.matchGradeComponents.componentType] = 'Street Name' then 'Address Name'
	when mc.[matchCandidates.matchQualityInformation.matchGradeComponents.componentType] = 'Street Number' then 'Address Number'
	when mc.[matchCandidates.matchQualityInformation.matchGradeComponents.componentType] = 'Phone' then 'TelephoneNum'
	else mc.[matchCandidates.matchQualityInformation.matchGradeComponents.componentType]
end as InputField						--as componentType		-- InputField
,mc.[matchCandidates.matchQualityInformation.matchGradeComponents.componentRating]	as InputField_Rating				--as componentRating      -- InputField_Rating
,mgs.GradeScore																		as InputField_MatchScore						-- InputField_MatchScore
,mgs.Definition																		as InputField_MatchDescription						-- InputField_MatchDescription
,mgs.Example																		as InputField_Example						-- InputField_Example
from dnb.MatchComponents as mc
inner join dnb.DnBCustomerAndSupplier as dnb
on	CAST(left(mc.customerReference,len(mc.customerReference)-2) as bigint) = CAST(dnb.dw_id as bigint)
		and dnb.is_customer = 0
inner join dnb.dimError as error
	on dnb.match_status = error.errorCode and stage = 'match'
inner join dnb.dimMatchGradeString as mgs
	on mgs.Grade = mc.[matchCandidates.matchQualityInformation.matchGradeComponents.componentRating]
where (confidence_code < 9 or confidence_code is null)
and mc.[matchCandidates.matchQualityInformation.matchGradeComponents.componentType] in ('Name', 'State','City','PostalCode','Street Name','Street Number','Phone')
;
GO
PRINT N'Creating [stage].[FOR_PL_StockTransaction]'
GO
CREATE TABLE [stage].[FOR_PL_StockTransaction]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [varchar] (20) NULL,
[IndexKey] [varchar] (20) NULL,
[WarehouseCode] [varchar] (20) NULL,
[TransactionCode] [varchar] (20) NULL,
[TransactionCodeDescription] [nvarchar] (80) NULL,
[CustomerNum] [nvarchar] (60) NULL,
[SupplierNum] [nvarchar] (60) NULL,
[PartNum] [nvarchar] (60) NULL,
[TransactionDate] [nvarchar] (60) NULL,
[TransactionTime] [nvarchar] (60) NULL,
[TransactionQty] [nvarchar] (60) NULL,
[TransactionValue] [nvarchar] (60) NULL,
[CostPrice] [nvarchar] (60) NULL,
[Currency] [nvarchar] (60) NULL,
[ExchangeRate] [nvarchar] (60) NULL,
[Reference] [nvarchar] (60) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[IsInternalTransaction] [nvarchar] (10) NULL
)
GO
PRINT N'Creating [stage].[vFOR_PL_StockTransaction]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vFOR_PL_StockTransaction]
	AS SELECT 
	
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(PartNum),'#',TRIM(WarehouseCode),'#',IndexKey)))) AS StockTransactionID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',TRIM([Company]))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([SupplierNum]))))) AS SupplierID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID

	 ,PartitionKey
	--------- Mandatory fields ---------

	,Company
	,IndexKey
	,WarehouseCode
	,trim(TransactionCode) as TransactionCode
	,trim(TransactionCodeDescription) as TransactionDescription
	--,IsInternalTransaction
	,nullif(trim(PartNum),'') as PartNum
	,cast(TransactionDate as date) as TransactionDate
	,cast(TransactionQty as decimal(18,4)) as TransactionQty
	--,CreatedTimeStamp
	--,ModifiedTimeStamp

	--------- Other fields ---------
	,cast(CostPrice as decimal(18,4)) as CostPrice
	--,IsActiveRecord
	,trim(CustomerNum) as CustomerNum
	,trim(SupplierNum) as SupplierNum
	--,SalesOrderNum
	--,PurchaseOrderNum
	--,SalesInvoiceNum
	--,PurchaseInvoiceNum
	--,BinNum
	,trim(Currency) as Currency
	,iif(cast(ExchangeRate as decimal(18,4)) = 0,1,cast(ExchangeRate as decimal(18,4))) as ExchangeRate
	,trim(Reference) as Reference
	--,SalesOrderLine
	--,PurchaseOrderLine
	--,SalesInvoiceLine
	--,PurchaseInvoiceLine
	--,BatchNum
	,nullif(trim(TransactionTime),'') as TransactionTime
	--,STRes1
	--,STRes2
	--,STRes3
	,IsInternalTransaction


	FROM [stage].[FOR_PL_StockTransaction]
GO
PRINT N'Creating [dm_DS].[fctSalesOrderLog]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE   VIEW [dm_DS].[fctSalesOrderLog] AS

SELECT  sol.[SalesOrderLogID]
,sol.[CompanyID]
,sol.[CustomerID]
,sol.[PartID]
,sol.[WarehouseID]
,sol.[SalesPersonNameID]
,sol.[SalesOrderDateID]
,sol.[PartitionKey]
,sol.[Company]
,sol.[CustomerNum]
,sol.[SalesOrderNum]
,sol.[SalesOrderLine]
,sol.[SalesOrderSubLine]
,sol.[SalesOrderType]
,sol.[SalesOrderLogType]
,sol.[SalesOrderDate]
,sol.[SalesOrderLogDate]
,sol.[SalesInvoiceNum]
,sol.[SalesOrderQty]
,sol.[UoM]
,sol.[UnitPrice]
,sol.[UnitCost]
,sol.[Currency]
,sol.[ExchangeRate]
,sol.[OpenRelease]
,sol.[DiscountPercent]
,sol.[DiscountAmount]
,sol.[PartNum]
,sol.[PartType]
,sol.[SalesPersonName]
,sol.[Department]
,sol.[WarehouseCode]
FROM [dm].[FactSalesOrderLog] as sol
LEFT JOIN dbo.Company com ON sol.Company = com.Company
WHERE com.BusinessArea = 'Driveline Solutions' AND com.[Status] = 'Active'

--WHERE Company in ('MIT', 'ATZ', 'Transaut')
GO
PRINT N'Creating [stage].[BELL_SI_SOLine]'
GO
CREATE TABLE [stage].[BELL_SI_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[CustNum] [nvarchar] (100) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (10) NULL,
[OrderSubLine] [nvarchar] (10) NULL,
[OrderRel] [nvarchar] (100) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (10) NULL,
[CreditMemo] [nvarchar] (100) NULL,
[PartNum] [nvarchar] (50) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [nvarchar] (100) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[VAT] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Indexkey] [nvarchar] (8) NULL,
[Site] [nvarchar] (50) NULL,
[LineType] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vBELL_SI_SOLine]'
GO

CREATE VIEW [stage].[vBELL_SI_SOLine] AS
--COMMENT EMPTY FIELDS // ADD UPPER() INTO PartID,CustomerID,WarehouseID 2022-12-27
WITH CTE AS (
-- The company has requested that they do not want the invoices that have these characteristics -AV / -SAV
--ticket INC-96774 VA 2023-03-16
SELECT [PartitionKey], [Company], [InvoiceDate], [ActualDeliveryDate], [SalesPersonName], [CustNum], [OrderNum], [OrderLine], [OrderSubLine], [OrderRel], [InvoiceNum], [InvoiceLine], [CreditMemo], [PartNum], [SellingShipQty], [UnitPrice], [UnitCost], [DiscountAmount], [TotalMiscChrg], [Currency], [ExchangeRate], [VAT], [WarehouseCode], [Indexkey], [Site], [LineType] FROM stage.BELL_SI_SOLine where InvoiceNum not like '%-AV%' and InvoiceNum not like '%-SAV%'
)
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(CustNum), '#', TRIM(OrderNum), '#', IIF(LEFT(TRIM([PartNum]), 1) = 'I', SUBSTRING(TRIM([PartNum]), 2, 50), TRIM([PartNum])), '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine)))) AS SalesInvoiceID --, '#', TRIM(OrderLine)
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',OrderNum,'#',InvoiceNum))) AS SalesOrderID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',CustNum, '#', InvoiceNum))) AS SalesLedgerID 
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(OrderNum)))) AS SalesOrderNumID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',Company)) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(CustNum)))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',IIF(LEFT(TRIM([PartNum]), 1) = 'I', SUBSTRING(TRIM([PartNum]), 2, 50), TRIM([PartNum])))))) AS PartID 
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',IIF(LEFT(TRIM([PartNum]), 1) = 'I', SUBSTRING(TRIM([PartNum]), 2, 50), TRIM([PartNum]))))) AS PartID 
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#', TRIM(WarehouseCode))))) AS WarehouseID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#', WarehouseCode))) AS WarehouseID
	,CONCAT(Company,'#', OrderNum,'#', IIF(LEFT(TRIM([PartNum]), 1) = 'I', SUBSTRING(TRIM([PartNum]), 2, 50), TRIM([PartNum]))) AS SalesOrderCode -- should be identical as in Order table
	,CONVERT(int, replace(convert(date,InvoiceDate),'-','')) AS SalesInvoiceDateID --Redundant?
	,CONCAT(Company,'#',TRIM(InvoiceNum),'#',TRIM(InvoiceLine)) AS SalesInvoiceCode --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID

	,PartitionKey
	,Company
	,SalesPersonName
	,CustNum	AS CustomerNum
	,IIF(LEFT(TRIM([PartNum]), 1) = 'I', SUBSTRING(TRIM([PartNum]), 2, 50), TRIM([PartNum])) AS PartNum
	,CASE WHEN TRIM(OrderNum) = '0' THEN 'PrimaryPart' ELSE 'SubPart' END  AS PartType
	,OrderNum	AS SalesOrderNum
	,LineType AS SalesOrderLine
	,OrderSubLine	AS SalesOrderSubLine
	--,'' AS SalesOrderType
	,InvoiceNum		AS SalesInvoiceNum
	,InvoiceLine	AS SalesInvoiceLine
	--,'' AS SalesInvoiceType
	,convert(date, InvoiceDate) as SalesInvoiceDate
	,ActualDeliveryDate	AS ActualDelivDate
	,SellingShipQty		AS SalesInvoiceQty
	--,'' AS UoM
	,UnitPrice	
	,UnitCost
	--,0 AS DiscountPercent
	,DiscountAmount
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	,TotalMiscChrg
	,VAT AS VATAmount
	,Currency
	,ExchangeRate
	,CreditMemo
	--,'' AS SalesChannel
	--,'' AS Department
	,WarehouseCode
	--,NULL AS DeliveryAddress
	--,'' AS CostBearerNum
	--,'' AS CostUnitNum
	--,'' AS ReturnComment
	--,'' AS ReturnNum
	--,'' AS ProjectNum
	,Indexkey
	--,'' AS SIRes1
	--,'' AS SIRes2
	,VAT AS SIRes3
FROM 
	CTE
GO
PRINT N'Creating [stage].[AXL_N1_SOLine]'
GO
CREATE TABLE [stage].[AXL_N1_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[InvoiceType] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (22, 8) NULL,
[UnitCost] [decimal] (22, 8) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[VAT] [decimal] (18, 4) NULL,
[CashDiscountOffered] [decimal] (18, 4) NULL,
[CashDiscountUsed] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OrderType] [nvarchar] (50) NULL,
[SalesChannel] [varchar] (10) NULL,
[BusinessChain] [varchar] (10) NULL,
[Res1] [varchar] (100) NULL,
[Res2] [varchar] (100) NULL,
[Res3] [varchar] (100) NULL,
[PartDesc] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[vAXL_N1_SOLine]'
GO
CREATE VIEW [stage].[vAXL_N1_SOLine] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine), '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(PartNum), '#', TRIM(PartDesc))))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(PartDesc))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(InvoiceNum))))) AS SalesLedgerID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum), '#', (IIF(TRIM([PartNum]) LIKE 'IACO%' , 'MISC. CHARGES', TRIM([PartDesc]))))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT(int, IIF(InvoiceDate = '', 19900101, replace(convert(date, InvoiceDate), '-', ''))) AS SalesInvoiceDateID
	,UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine))) AS SalesInvoiceCode
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine))) AS SalesOrderCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(SalesPerson) AS SalesPersonName
	,TRIM(CustNum) AS [CustomerNum]
	,TRIM(PartNum) AS PartNum
	,UPPER(PartDesc) AS PartDesc
	,'' AS [PartType]
	,TRIM(OrderNum) AS [SalesOrderNum]
	,CAST(OrderLine AS text) AS [SalesOrderLine]
	,TRIM(OrderSubLine) AS [SalesOrderSubLine]
	,TRIM(OrderType) AS [SalesOrderType]
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,TRIM(InvoiceLine) AS [SalesInvoiceLine]
	,TRIM(InvoiceType) AS [SalesInvoiceType]
	,CASE WHEN InvoiceDate = '' THEN '1900-01-01' ELSE CONVERT(date, InvoiceDate) END AS [SalesInvoiceDate]
	,ActualDeliveryDate AS [ActualDelivDate]
	,SellingShipQty AS [SalesInvoiceQty]
	,TRIM(Unit) AS [UoM]
	,UnitPrice
	,UnitCost
	,DiscountAmount
	,IIF(UnitPrice*SellingShipQty = 0, 0, DiscountAmount/UnitPrice*SellingShipQty) AS DiscountPercent
	,CONVERT(decimal(18,4), CashDiscountOffered) AS [CashDiscOffered] 
	,CONVERT(decimal(18,4), CashDiscountUsed) AS [CashDiscUsed] 
	,TotalMiscChrg
	,VAT AS [VATAmount]
	,Currency
	,ExchangeRate
	,TRIM(CreditMemo) AS CreditMemo
	,TRIM([SalesChannel]) AS [SalesChannel]
	,TRIM([BusinessChain]) AS [Department]
	,TRIM(WarehouseCode) AS WarehouseCode
	,NULL AS [CostBearerNum]
	,NULL AS [CostUnitNum]
	,NULL AS [ReturnComment]
	,NULL AS [ReturnNum]
	,NULL AS [ProjectNum]
	,'' AS [IndexKey]
	,Res1 AS SIRes1
	,Res2 AS SIRes2
	,Res3 AS SIRes3
FROM stage.AXL_N1_SOLine


	--,CASE WHEN OrderType = 'MD' THEN 1 
	--		WHEN OrderType = 'MT' THEN 2
	--		WHEN OrderType = 'MR' THEN 3
	--		WHEN OrderType = 'IV' THEN 4
	--		WHEN OrderType = 'Misc. Charges' THEN 5 --added after Ulf changes in the night /DZ
	--	ELSE OrderType END AS [SalesOrderType]

--GROUP BY
--	PartitionKey, Company, SalesPerson, CustNum, PartNum, PartDesc, OrderNum, OrderLine, OrderSubLine,OrderType, InvoiceNum, InvoiceLine, InvoiceDate, SellingShipQty, UnitPrice, UnitCost, DiscountAmount, TotalMiscChrg, WarehouseCode, CreditMemo, ActualDeliveryDate, Currency, ExchangeRate, InvoiceType, Res1, Res2, Res3, Unit, VAT, SalesChannel, BusinessChain, CashDiscountOffered, CashDiscountUsed
GO
PRINT N'Creating [stage].[DnBCustomerAndSupplier]'
GO
CREATE TABLE [stage].[DnBCustomerAndSupplier]
(
[PartitionKey] [varchar] (50) NULL,
[dw_id] [binary] (32) NULL,
[BusinessName1] [varchar] (100) NULL,
[BusinessName2] [varchar] (100) NULL,
[VisitStreetAddress] [varchar] (200) NULL,
[MailStreetAddress] [varchar] (100) NULL,
[VisitPostalCode] [varchar] (100) NULL,
[ProvinceName] [varchar] (100) NULL,
[CountryCode] [varchar] (100) NULL,
[TelephoneNumber] [varchar] (100) NULL,
[LocalRegistrationNumber] [varchar] (100) NULL,
[Email] [varchar] (100) NULL,
[is_customer] [bit] NULL,
[lastDateDetected] [varchar] (60) NULL,
[Company] [nvarchar] (15) NULL
)
GO
PRINT N'Creating [dnb].[sp_DnBCustomerAndSupplier]'
GO





CREATE PROCEDURE [dnb].[sp_DnBCustomerAndSupplier]
AS
-- Start of procedure

BEGIN TRY
	
	DECLARE @transaction_name nvarchar(500);

	--0) Truncate stage table

	SET @transaction_name = 'Truncate stage.DnBCustomerAndSupplier.'

	BEGIN TRAN @transaction_name;

	TRUNCATE TABLE stage.DnBCustomerAndSupplier;

	COMMIT TRAN @transaction_name;

	--1) Insert values into stage table stage.DnBCustomerAndSupplier

	SET @transaction_name = 'INSERT INTO stage.DnBCustomerAndSupplier.'

	BEGIN TRAN @transaction_name;

	with baseline as (

		select CustomerID as ID, max(SalesOrderDate) as lastDateDetected, 'salesOrder' as sourceTable, 1 as is_customer--, rank()over(partition by CustomerID order by salesorderdate desc) as rn
		from dw.SalesOrder
		group by CustomerID

		UNION 

		select CustomerID as ID, max(SalesInvoiceDate) as lastDateDetected, 'salesInvoice' as sourceTable, 1 as is_customer--, rank()over(partition by CustomerID order by salesorderdate desc) as rn
		from dw.SalesInvoice
		group by CustomerID

		UNION 
	
		select CustomerID as ID, max(SalesDueDate) as lastDateDetected, 'salesLedger' as sourceTable, 1 as is_customer--, rank()over(partition by CustomerID order by salesorderdate desc) as rn
		from dw.SalesLedger
		group by CustomerID

		UNION 
	
		select SupplierID as ID, max(PurchaseOrderDate) as lastDateDetected, 'purchaseOrder' as sourceTable, 0 as is_customer--, rank()over(partition by CustomerID order by salesorderdate desc) as rn
		from dw.PurchaseOrder
		group by SupplierID

		UNION 
	
		select SupplierID as ID, max(PurchaseInvoiceDate) as lastDateDetected, 'purchaseInvoice' as sourceTable, 0 as is_customer--, rank()over(partition by CustomerID order by salesorderdate desc) as rn
		from dw.PurchaseInvoice
		group by SupplierID

		UNION 
	
		select SupplierID as ID, max(PurchaseDueDate) as lastDateDetected, 'purchaseOrder' as sourceTable, 0 as is_customer--, rank()over(partition by CustomerID order by salesorderdate desc) as rn
		from dw.PurchaseLedger 

		group by SupplierID
	), grouped_ids as (
	select id, MAX(lastDateDetected) as lastDateDetected, is_customer
	from baseline
	group by id, is_customer )

		INSERT INTO stage.DnBCustomerAndSupplier (
		PartitionKey     ,
		dw_id                    ,
		BusinessName1            ,
		BusinessName2			 ,
		VisitStreetAddress		 ,
		MailStreetAddress		 ,
		VisitPostalCode			 ,
		ProvinceName			 ,
		CountryCode				 ,
		TelephoneNumber			 ,
		LocalRegistrationNumber	 ,
		Email					 ,
		is_customer              ,
		lastDateDetected		 ,
		--Num						 ,
		Company
		) 

	select 
		case when grouped_ids.is_customer = 1 then nullif(trim(customer.PartitionKey),'')
			 when grouped_ids.is_customer = 0 then nullif(trim(supplier.PartitionKey),'')
			 else null end as PartitionKey,
		grouped_ids.ID AS dw_id,
		case when grouped_ids.is_customer = 1 then nullif(trim(customer.CustomerName),'')
			 when grouped_ids.is_customer = 0 then nullif(trim(supplier.SupplierName),'')
			 else null end as BusinessName1,
		case when grouped_ids.is_customer = 1 then nullif(trim(customer.MainCustomerName),'') 
			 when grouped_ids.is_customer = 0 then nullif(trim(supplier.MainSupplierName),'')
			 else null end as BusinessName2,
		case when grouped_ids.is_customer = 1 then nullif(trim(isnull(nullif(trim(customer.AddressLine),''),customer.AddressLine1)),'')   -- I can change it to full address line
			 when grouped_ids.is_customer = 0 then nullif(trim(isnull(nullif(trim(supplier.AddressLine),''),supplier.AddressLine1)),'')	-- I can change it to full address line
			 else null end as VisitStreetAddress,
		case when grouped_ids.is_customer = 1 then nullif(trim(customer.AddressLine2),'')   
			 when grouped_ids.is_customer = 0 then nullif(trim(supplier.AddressLine2),'')
			 else null end as MailStreetAddress,
		case when grouped_ids.is_customer = 1 then nullif(trim(customer.ZipCode),'')   
			 when grouped_ids.is_customer = 0 then nullif(trim(supplier.ZipCode),'')
			 else null end as VisitPostalCode, -- Could be MailPostalCode as well
		--MailPostalCode
		--VisitCityName
		--MailCityName
		case when grouped_ids.is_customer = 1 then nullif(trim(customer.City),'')  
			 when grouped_ids.is_customer = 0 then nullif(trim(supplier.City),'')	
			 else null end as ProvinceName,
		case when grouped_ids.is_customer = 1 then nullif(trim(customer.CountryCode),'')
			 when grouped_ids.is_customer = 0 then nullif(trim(supplier.CountryCode),'')	
			 else null end as CountryCode,
		case when grouped_ids.is_customer = 1 then nullif(trim(customer.TelephoneNum1),'') 
			 when grouped_ids.is_customer = 0 then nullif(trim(supplier.TelephoneNum ),'')
			 else null end as TelephoneNumber,
		--Fax Number
		case when grouped_ids.is_customer = 1 then nullif(trim(isnull(nullif(trim(customer.OrganizationNum),''),customer.VATNum)),'')
			 when grouped_ids.is_customer = 0 then nullif(trim(isnull(nullif(trim(supplier.OrganizationNum),''),supplier.VATNum)),'')
			 else null end as LocalRegistrationNumber,
		case when grouped_ids.is_customer = 1 then nullif(trim(customer.Email),'')
			 when grouped_ids.is_customer = 0 then nullif(trim(supplier.Email),'')
			 else null end as Email,
		--Url
		--Revenue or Purchase amount
		--Must Match Indicator ? What's the meaning
		grouped_ids.is_customer,
		grouped_ids.lastDateDetected
		--,case when grouped_ids.is_customer = 1 then customer.CustomerNum
		--	else supplier.SupplierNum
		--end as Num
		,case when grouped_ids.is_customer = 1 then customer.Company
			else supplier.Company
		end as Company
		--,CAST(grouped_ids.id as bigint) as id_bigint
	from grouped_ids
	left join dw.Customer as customer on grouped_ids.ID = customer.CustomerID and grouped_ids.is_customer = 1
	left join dw.Supplier as supplier on grouped_ids.ID = supplier.SupplierID and grouped_ids.is_customer = 0
	--left join dw.DnBCustomerAndSupplier as dnb on grouped_ids.ID = dnb.dw_id
	-- We need to avoid inferred or deleted records
	where 
	((
		customer.is_inferred = 0 or customer.is_inferred is null 
		--and
		--customer.is_deleted = 0 or customer.is_deleted is null
	)
	or
	(
		supplier.is_inferred = 0 or supplier.is_inferred is null 
		--and
		--supplier.is_deleted = 0 or supplier.is_deleted is null
	)) and (customer.is_deleted = 0 or supplier.is_deleted = 0)
	and (customer.Company != 'DEMO' or supplier.Company != 'DEMO')
	;  -- Quiere decir que no es inferred

	COMMIT TRAN @transaction_name;

	--2) Merge with target table dnb.DnBCustomerAndSupplier

	SET @transaction_name = 'MERGE stage.DnBCustomerAndSupplier INTO dnb.DnBCustomerAndSupplier.'

	BEGIN TRAN @transaction_name;

	MERGE dnb.DnBCustomerAndSupplier as target
	using stage.[DnBCustomerAndSupplier] as source
		on target.dw_id = source.dw_id and target.is_customer = source.is_customer
	WHEN NOT MATCHED BY target THEN 
		INSERT (
		[PartitionKey]				,
		[dw_id]						,
		[BusinessName1]				,
		[BusinessName2]				,
		[VisitStreetAddress]		,
		[MailStreetAddress]			,
		[VisitPostalCode]			,
		[ProvinceName]				,
		[CountryCode]				,
		[TelephoneNumber]			,
		[LocalRegistrationNumber]	,
		[Email]						,
		[is_customer]				,
		[lastDateDetected]			,
		--Num						,
		Company
		)
		VALUES (
		source.[PartitionKey]				,	
		source.[dw_id]						,	
		source.[BusinessName1]				,	
		source.[BusinessName2]				,	
		source.[VisitStreetAddress]			,
		source.[MailStreetAddress]			,	
		source.[VisitPostalCode]			,
		source.[ProvinceName]				,	
		UPPER(source.[CountryCode])			,
		source.[TelephoneNumber]			,
		source.[LocalRegistrationNumber]	,
		source.[Email]						,	
		source.[is_customer]				,
		source.[lastDateDetected]			,
		--source.Num						,
		source.Company
		)
	WHEN MATCHED 
	AND (
			(source.PartitionKey > target.PartitionKey and target.duns is null) 
			OR
			(target.DUNS IS NULL AND NOT
				(
				isnull(cast(convert(VARCHAR(200),target.VisitStreetAddress) COLLATE SQL_Latin1_General_CP1_CI_AS as varchar(max)), '' ) = isnull(cast(convert(NVARCHAR(200),source.VisitStreetAddress) COLLATE SQL_Latin1_General_CP1_CI_AS as varchar(max)), '' )  And
				isnull(cast(convert(VARCHAR(100),target.LocalRegistrationNumber) COLLATE SQL_Latin1_General_CP1_CI_AS as varchar(max)), '' ) = isnull(cast(convert(NVARCHAR(50),source.LocalRegistrationNumber) COLLATE SQL_Latin1_General_CP1_CI_AS as varchar(max)), '' )
				)
			)
		)
	THEN
	/*
	Can add more conditions here in further time. For example to exclude those records
	that have duns and the confidence is over 10
	*/
		UPDATE SET
		PartitionKey = case when target.PartitionKey < source.PartitionKey then source.PartitionKey else CONVERT(varchar(19), GETDATE(), 120)  end,
		[BusinessName1]				= source.[BusinessName1]				  ,
		[BusinessName2]				= source.[BusinessName2]				  ,
		[VisitStreetAddress]		= source.[VisitStreetAddress]			  ,
		[MailStreetAddress]			= source.[MailStreetAddress]			  ,
		[VisitPostalCode]			= source.[VisitPostalCode]				  ,
		[ProvinceName]				= source.[ProvinceName]					  ,
		[CountryCode]				= UPPER(source.[CountryCode])			  ,
		[TelephoneNumber]			= source.[TelephoneNumber]				  ,
		[LocalRegistrationNumber]	= source.[LocalRegistrationNumber]		  ,
		[Email]						= source.[Email]						  ,
		Company						= source.Company
		
		;
		;

	COMMIT TRAN @transaction_name;
	
	/* 3) Update dnb.DnBCustomerAndSupplier
	There are some samples that are not coming in the stage, but are already in the dnb.dnbCustomerAndSupplier table
	We need then to check if those ones have had a change
	*/
	
	SET @transaction_name = 'Include not coming ones'

	BEGIN TRAN @transaction_name;

		with agregados_que_no_vienen as (
		select  target.dw_id, target.is_customer, target.PartitionKey, target.Company
		from dnb.DnBCustomerAndSupplier as target
		left join stage.DnBCustomerAndSupplier as source
			on target.dw_id = source.dw_id
				and target.is_customer = source.is_customer
		where source.dw_id is null and target.DUNS is null
		), stage as (

		select c.PartitionKey as new_pk
		, c.CustomerID as dw_id
		, c.CustomerName as BusinessName1
		, c.MainCustomerName as BusinessName2
		, nullif(trim(isnull(nullif(trim(c.AddressLine),''),c.AddressLine1)),'') as VisitStreetAddress
		, nullif(trim(c.AddressLine2),'') as MailStreetAddress
		, nullif(trim(c.ZipCode),'') as VisitPostalCode
		, nullif(trim(c.City),'') as ProvinceName
		, nullif(trim(c.CountryCode),'') as CountryCode
		, nullif(trim(c.TelephoneNum1),'') as TelephoneNumber
		, nullif(trim(isnull(nullif(trim(c.OrganizationNum),''),c.VATNum)),'') as LocalRegistrationNumber
		, nullif(trim(c.Email),'') as Email
		, anv.is_customer
		, c.Company
		from dw.Customer as c
		INNER JOIN agregados_que_no_vienen as anv
			on c.CustomerID = anv.dw_id
				and anv.is_customer = 1
				and c.Company = anv.Company
		WHERE c.is_deleted = 0

		union

		select s.PartitionKey as new_pk
		, s.SupplierID as dw_id
		, s.SupplierName as BusinessName1
		, s.MainSupplierName as BusinessName2
		, nullif(trim(isnull(nullif(trim(s.AddressLine),''),s.AddressLine1)),'') as VisitStreetAddress
		, nullif(trim(s.AddressLine2),'') as MailStreetAddress
		, nullif(trim(s.ZipCode),'') as VisitPostalCode
		, nullif(trim(s.City),'') as ProvinceName
		, nullif(trim(s.CountryCode),'') as CountryCode
		, nullif(trim(s.TelephoneNum),'') as TelephoneNumber
		, nullif(trim(isnull(nullif(trim(s.OrganizationNum),''),s.VATNum)),'') as LocalRegistrationNumber
		, nullif(trim(s.Email),'') as Email
		, anv.is_customer
		, s.Company
		from dw.Supplier as s
		INNER JOIN agregados_que_no_vienen as anv
			on s.SupplierID = anv.dw_id
			and anv.is_customer = 0
			and s.Company = anv.Company
		WHERE s.is_deleted = 0
		)
		MERGE dnb.DnBCustomerAndSupplier as target
		using stage as source
		on target.dw_id = source.dw_id and target.is_customer = source.is_customer and target.company = source.Company
		WHEN MATCHED AND source.new_pk > target.PartitionKey
		THEN
			UPDATE SET
				PartitionKey = source.new_pk,
				[BusinessName1]				= source.[BusinessName1]				  ,
				[BusinessName2]				= source.[BusinessName2]				  ,
				[VisitStreetAddress]		= source.[VisitStreetAddress]			  ,
				[MailStreetAddress]			= source.[MailStreetAddress]			  ,
				[VisitPostalCode]			= source.[VisitPostalCode]				  ,
				[ProvinceName]				= source.[ProvinceName]					  ,
				[CountryCode]				= UPPER(source.[CountryCode])			  ,
				[TelephoneNumber]			= source.[TelephoneNumber]				  ,
				[LocalRegistrationNumber]	= source.[LocalRegistrationNumber]		  ,
				[Email]						= source.[Email]						  ,
				Company						= source.Company
		;

	COMMIT TRAN @transaction_name;

	--4) Delete records that will never match since they are not coming anymore from source

	
	SET @transaction_name = 'Delete deleted unmatched records'

	BEGIN TRAN @transaction_name;

	with deleted as (
	select CustomerID as dw_id, 1 as is_customer
	from dw.Customer
	where is_deleted = 1
	union 
	select SupplierID as dw_id, 0 as is_customer
	from dw.Supplier
	where is_deleted = 1
	)
	delete dnb
	from dnb.DnBCustomerAndSupplier as dnb
		INNER JOIN deleted as d
			on dnb.dw_id = d.dw_id
				and dnb.is_customer = d.is_customer
	WHERE DUNS is null;

	COMMIT TRAN @transaction_name;


	--5) Update PartitionKey

	SET @transaction_name = 'Update PartitionKey'

	BEGIN TRAN @transaction_name;

	UPDATE dnb.DnBCustomerAndSupplier
		set PartitionKey = left(REPLACE(PartitionKey,'T',' '),CHARINDEX('.',PartitionKey)-1)
	where LEN(PartitionKey) > 19;

	COMMIT TRAN @transaction_name;
	-- Finish of procedure

END TRY

BEGIN CATCH

	IF @@TRANCOUNT > 0
		ROLLBACK;

	DECLARE @CompleteErrorMessage VARCHAR(MAX);
	SET @CompleteErrorMessage = CONCAT('Transaction: ',@transaction_name,' Error message: ',ERROR_MESSAGE())
	RAISERROR(@CompleteErrorMessage,16,1);

END CATCH
GO
PRINT N'Creating [stage].[FOR_ES_PurchaseLedger]'
GO
CREATE TABLE [stage].[FOR_ES_PurchaseLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[SupplierInvoiceNum] [nvarchar] (50) NULL,
[PurchaseInvoiceDate] [date] NULL,
[PurchaseDueDate] [date] NULL,
[PurchaseLastPaymentDate] [date] NULL,
[InvoiceAmount] [decimal] (18, 4) NULL,
[PaidInvoiceAmount] [decimal] (18, 4) NULL,
[RemainingInvoiceAmount] [decimal] (18, 4) NULL,
[AccountingDate] [date] NULL,
[Currency] [nvarchar] (10) NULL,
[VATAmount] [decimal] (18, 4) NULL,
[VATCode] [nvarchar] (10) NULL,
[VATCodeDesc] [nvarchar] (300) NULL,
[PayToName] [nvarchar] (100) NULL,
[PayToCity] [nvarchar] (50) NULL,
[PayToContact] [nvarchar] (50) NULL,
[PaymentTerms] [nvarchar] (10) NULL,
[PrePaymentNum] [nvarchar] (50) NULL,
[LastPaymentNum] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 8) NULL,
[AgingPeriod] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vFOR_ES_PurchaseLedger]'
GO


CREATE VIEW [stage].[vFOR_ES_PurchaseLedger] AS 
SELECT 

	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum)))) AS PurchaseLedgerID,
	CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM([Company]))) AS CompanyID,
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([SupplierNum]))))) AS SupplierID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(PurchaseOrderNum)))) AS PurchaseOrderNumID,
	-- CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseInvoiceNum), '#', TRIM(PurchaseInvoiceLine) )))) AS PurchaseInvoiceID, - cant create cause we dont have purchaseinvoiceline

	PartitionKey,
	Company,
	SupplierNum				,
	PurchaseOrderNum		,
	PurchaseInvoiceNum		,
	SupplierInvoiceNum		,
	PurchaseInvoiceDate		,
	PurchaseDueDate			,
	PurchaseLastPaymentDate	,
	InvoiceAmount			,
	PaidInvoiceAmount		,
	RemainingInvoiceAmount	,
	AccountingDate			,
	Currency				,
	VATAmount				,
	VATCode					,
	VATCodeDesc				,
	PayToName				,
	PayToCity				,
	PayToContact			,
	PaymentTerms			,
	PrePaymentNum			,
	LastPaymentNum			,
	ExchangeRate			,
	AgingPeriod				


FROM 
	 [stage].[FOR_ES_PurchaseLedger]
GO
PRINT N'Creating [stage].[STE_SE_Customer]'
GO
CREATE TABLE [stage].[STE_SE_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (100) NOT NULL,
[CustomerNum] [nvarchar] (100) NULL,
[CustomerName] [nvarchar] (max) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[ZipCode] [nvarchar] (100) NULL,
[City] [nvarchar] (100) NULL,
[CountryName] [nvarchar] (100) NULL,
[CountryCode] [nvarchar] (100) NULL,
[TelephoneNumber1] [nvarchar] (100) NULL,
[Email] [nvarchar] (100) NULL,
[VATNum] [nvarchar] (100) NULL,
[ModifiedTimeStamp] [nvarchar] (100) NULL,
[CustomerGroup] [nvarchar] (100) NULL,
[CustomerSubGroup] [nvarchar] (100) NULL,
[SalesPerson] [nvarchar] (100) NULL,
[CreditLimit] [nvarchar] (100) NULL,
[Currency Code] [nvarchar] (100) NULL,
[PaymentTerms] [nvarchar] (100) NULL,
[IsAxInterInternal] [nvarchar] (100) NULL,
[TEST_FIELD] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vSTE_SE_Customer]'
GO
CREATE view [stage].[vSTE_SE_Customer] AS
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID
	,[PartitionKey] 
	,UPPER(TRIM("Company")) AS [Company]
	,UPPER(TRIM("CustomerNum")) AS [CustomerNum]
	,"CustomerName" 		
	,"AddressLine1" 		
	,"AddressLine2"		
	,"ZipCode"			
	,"City"				
	,"CountryName"		
	,"CountryCode"		
	,"TelephoneNumber1"	
	,"Email"				
	,"VATNum"			
	,"ModifiedTimeStamp"	
	,"CustomerGroup"		
	,"SalesPerson"
	,"CreditLimit"		--create
	,"Currency Code" 	--create
	,"PaymentTerms" 	--create	
	,"IsAxInterInternal" as [InternalExternal]
	
	


FROM
	[stage].[STE_SE_Customer]
GO
PRINT N'Creating [dnb].[vCustomerImprovement]'
GO

CREATE view [dnb].[vCustomerImprovement] as
select convert(bigint,dnb.dw_id) as CustomerID
,dnb.confidence_code
,dnb.match_status
,mc.[matchCandidates.matchQualityInformation.matchGradeComponents.componentType]   as componentType
,mc.[matchCandidates.matchQualityInformation.matchGradeComponents.componentRating] as componentRating
,error.errorDescription
,mgs.Definition
,mgs.GradeScore
,mgs.Example
from dnb.MatchComponents as mc
inner join dnb.DnBCustomerAndSupplier as dnb
on	CAST(left(mc.customerReference,len(mc.customerReference)-2) as bigint) = CAST(dnb.dw_id as bigint)
		and dnb.is_customer = 1
inner join dnb.dimError as error
	on dnb.match_status = error.errorCode and stage = 'match'
inner join dnb.dimMatchGradeString as mgs
	on mgs.Grade = mc.[matchCandidates.matchQualityInformation.matchGradeComponents.componentRating]
where confidence_code < 9 or confidence_code is null
;
GO
PRINT N'Creating [stage].[SVE_SE_PurchaseOrder]'
GO
CREATE TABLE [stage].[SVE_SE_PurchaseOrder]
(
[PartitionKey] [nvarchar] (50) NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [varchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaseOrderType] [nvarchar] (50) NULL,
[IsOrderClosed] [nvarchar] (50) NULL,
[PurchaseOrderDate] [nvarchar] (50) NULL,
[ActualDelivDate] [nvarchar] (50) NULL,
[ActualShipDate] [nvarchar] (50) NULL,
[OrgReqDelivDate] [nvarchar] (50) NULL,
[ReqDelivDate] [nvarchar] (50) NULL,
[OrgCommittedDelivDate] [nvarchar] (50) NULL,
[CommittedDelivDate] [nvarchar] (50) NULL,
[OrgCommittedShipDate] [nvarchar] (50) NULL,
[CommittedShipDate] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[SupplierPartNum] [nvarchar] (50) NULL,
[DelivCustomerNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[UoM] [nvarchar] (50) NULL,
[PurchaseOrderQty] [decimal] (18, 4) NULL,
[PurchaseReceiveQty] [decimal] (18, 4) NULL,
[PurchaseInvoiceQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[LandedCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[PurchaserName] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[ReceivingNum] [nvarchar] (50) NULL,
[DelivTime] [nvarchar] (50) NULL,
[PurchaseChannel] [nvarchar] (50) NULL,
[Documents] [nvarchar] (50) NULL,
[Comments] [nvarchar] (max) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL,
[IsActiveRecord] [nvarchar] (50) NULL,
[PurchaseOrderStatus] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vSVE_SE_PurchaseOrder]'
GO
CREATE VIEW [stage].[vSVE_SE_PurchaseOrder] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(UPPER([PartNum])))))) AS PurchaseOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', '')))) AS PurchaseInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', '')))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Currency])))) AS CurrencyID
	,UPPER(CONCAT(Company, '#', TRIM(SupplierNum), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine))) AS PurchaseOrderCode
	,PartitionKey

	,UPPER(Company) AS Company
	,UPPER(TRIM([PartNum])) AS PartNum
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
	,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
	,TRIM(PurchaseOrderNum) AS PurchaseOrderNum
	,TRIM(PurchaseOrderLine) AS PurchaseOrderLine
	,TRIM(PurchaseOrderSubLine) AS PurchaseOrderSubLine
	,TRIM(PurchaseOrderType) AS PurchaseOrderType
	,IsOrderClosed AS PurchaseOrderStatus
	,TRY_CONVERT(Date, PurchaseOrderDate) as PurchaseOrderDate
--	,CONVERT(Date, OrgReqDelivDate) AS OrgReqDelivDate
--	,CONVERT(Date, CommittedDelivDate) AS CommittedDelivDate
	,TRY_CONVERT(Date, ActualDelivDate) as ActualDelivDate
--	,CONVERT(Date, ReqDelivDate) AS ReqDelivDate
--	,CONVERT(Date, '1900-01-01') AS DelivDate
--	,CONVERT(Date, OrgCommittedDelivDate) AS OrgCommittedDelivDate
--	,CONVERT(Date, OrgCommittedShipDate) AS OrgCommittedShipDate
--	,CONVERT(Date, ActualShipDate) AS ActualShipDate
--	,CONVERT(Date, CommittedShipDate) AS CommittedShipDate
	--,'' AS PurchaseInvoiceNum
	--,'' AS SupplierInvoiceNum
	,TRIM(SupplierPartNum) AS SupplierPartNum
	,TRIM(DelivCustomerNum) AS DelivCustomerNum
	,TRIM(PartStatus) AS PartStatus
	,PurchaseOrderQty
	,PurchaseReceiveQty AS ReceiveQty
	,PurchaseInvoiceQty AS InvoiceQty
	--,NULL AS MinOrderQty
	,TRIM(UoM) AS UoM
--	,UnitPrice AS UnitPrice
	,IIF(CONVERT(decimal(18,4), ExchangeRate) = 0, UnitPrice, UnitPrice/CONVERT(decimal(18,4), ExchangeRate)) AS UnitPrice
	,LandedCost
	--,NULL AS DiscountPercent
	--,NULL AS DiscountAmount
	--,NULL AS TotalMiscChrg
	,IIF(Currency IN ('SEK'), 1, ExchangeRate) AS ExchangeRate
	,TRIM(Currency) AS Currency
	,TRIM(PurchaserName) AS PurchaserName
	,TRIM(ReceivingNum) AS ReceivingNum
	,DelivTime AS DelivTime
	,TRIM(PurchaseChannel) AS PurchaseChannel
	,TRIM(Documents) AS Documents
	,TRIM(Comments) AS Comments
	,TRIM(CreatedTimeStamp) AS PORes1
	,TRIM(ModifiedTimeStamp) AS PORes2
	,'' AS PORes3
FROM 
	[stage].[SVE_SE_PurchaseOrder]
WHERE PurchaseOrderType NOT IN ('KED', 'T', 'E')
	
--GROUP BY
--	PartitionKey, Company, PurchaseOrderNum, PurchaseOrderLine, PurchaseOrderSubLine, SupplierCode, DelivCustCode, LineType, InvoiceNum, PartNum, OrderType, UnitPrice, DiscountPercent, OrderedQty, ReceivedQty, InvoicedQty, TotalMiscChrg, ExchangeRate, CurrencyCode, ItemType, OrderDate, OrgReqDelivDate, CommitedDelivDate, ActualDelivDate, DelivDate, ReqDelivDate, PurchaserName, RecievingNumber, LeadTime, Comments, WarehouseCode
GO
PRINT N'Creating [dm_DS].[fctPurchaseInvoice]'
GO

CREATE VIEW [dm_DS].[fctPurchaseInvoice] AS
-- LS basket
SELECT 
 pinv.[PurchaseInvoiceID]
,pinv.[CompanyID]
,pinv.[SupplierID]
,pinv.[PartID]
,pinv.[WarehouseID]
,pinv.[PurchaseOrderNumID]
,pinv.[CurrencyID]
,pinv.[PurchaseInvoiceDateID]
,pinv.[Company]
,pinv.[PurchaseOrderNum]
,pinv.[PurchaseOrderLine]
,pinv.[PurchaseOrderType]
,pinv.[PurchaseInvoiceNum]
,pinv.[PurchaseInvoiceLine]
,pinv.[PurchaseInvoiceType]
,pinv.[PurchaseInvoiceDate]
,pinv.[ActualDelivDate]
,pinv.[SupplierNum]
,pinv.[PartNum]
,pinv.[PurchaseInvoiceQty]
,pinv.[UoM]
,pinv.[UnitPrice]
,pinv.[DiscountPercent]
,pinv.[DiscountAmount]
,pinv.[TotalMiscChrg]
,pinv.[VATAmount]
,pinv.[Currency]
,pinv.[ExchangeRate]
,pinv.[CreditMemo]
,pinv.[PurchaserName]
,pinv.[WarehouseCode]
,pinv.[PurchaseChannel]
,pinv.[Comment]
,pinv.[PIRes1]
,pinv.[PIRes2]
,pinv.[PIRes3]
,pinv.[PIRes4]
,pinv.[PurchaseInvoiceAmountOC]
,pinv.[PurchaseOrderDate]
,pinv.[ReqDelivDate]
,pinv.[OrgReqDelivDate]
,pinv.[CommittedDelivDate]
,pinv.[OrgCommittedDelivDate]
,pinv.[DueDate]
,pinv.[PaymentDate]
,pinv.[InvoiceStatus]
FROM dm.FactPurchaseInvoice pinv
LEFT JOIN dbo.Company com ON pinv.Company = com.Company
WHERE com.BusinessArea = 'Driveline Solutions' AND com.[Status] = 'Active'
--It is a dynamic Company addition in the sub-dataset in a way that so long a company is added in its parent dataset, this company will automatically appear in its assigend Business Area sub-dataset.
--This company addtion should in its first hand appear in the dbo.Company with correct attributes.

--WHERE Company in ('AFISCM', 'CDKCERT', 'CEECERT','CERDE', 'CFICERT', 'CLTCERT', 'CLVCERT', 'CSECERT', 'CUKCERT', 'CNOEHAU', 'CNOCERT', 'CyESA', 'HFIHAKL', 'TRACLEV','MENBE14','MENNL01','MENNL02','MENNL03','MENNL04','MENNL07','MENNL11')  --and PurchaseOrderType <> 'Backorder' -- don't know/remember why BackOrder is excluded before changes time 20210604 /DZ
GO
PRINT N'Creating [stage].[TRA_FR_Part]'
GO
CREATE TABLE [stage].[TRA_FR_Part]
(
[PartitionKey] [nvarchar] (50) NULL,
[Company] [nvarchar] (8) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartName] [nvarchar] (max) NULL,
[PartDescription] [nvarchar] (max) NULL,
[PartDescription2] [nvarchar] (max) NULL,
[PartDescription3] [nvarchar] (max) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[ProductGroup2] [nvarchar] (50) NULL,
[ProductGroup3] [nvarchar] (50) NULL,
[ProductGroup4] [nvarchar] (max) NULL,
[Brand] [nvarchar] (50) NULL,
[CommodityCode] [nvarchar] (50) NULL,
[PartReplacementNum] [nvarchar] (max) NULL,
[PartStatus] [nvarchar] (50) NULL,
[CountryOfOrigin] [nvarchar] (max) NULL,
[NetWeight] [nvarchar] (50) NULL,
[UoM] [nvarchar] (50) NULL,
[MainSupplier] [nvarchar] (max) NULL,
[AlternativeSupplier] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[vTRA_FR_Part]'
GO
CREATE VIEW [stage].[vTRA_FR_Part] AS
--COMMENT EMPTY FIELDS // ADD TRIM() UPPER() INTO PartID 22-12-29 VA
SELECT
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(UPPER(Company),'#', TRIM([PartNum])))) AS PartID
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company),'#', TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONCAT(Company, '#', TRIM(UPPER(Company))) AS PartCode
	,PartitionKey

	,UPPER(Company) AS [Company]
	,TRIM([PartNum]) AS [PartNum]
	,TRIM([PartName]) AS [PartName]
	,TRIM([PartDescription]) AS [PartDescription]
	,TRIM([PartDescription2]) AS [PartDescription2]
	,TRIM([PartDescription3]) AS [PartDescription3]
	,LEFT(TRIM([MainSupplier]), 100) AS [MainSupplier]
	,TRIM([AlternativeSupplier]) AS [AlternativeSupplier]
	,TRIM([ProductGroup]) AS [ProductGroup]
	,TRIM([ProductGroup2]) AS [ProductGroup2]
	,TRIM([ProductGroup3]) AS [ProductGroup3]
	,TRIM([ProductGroup4]) AS [ProductGroup4]
	,TRIM([Brand]) AS [Brand]
	,TRIM([CommodityCode]) AS [CommodityCode]
	,TRIM([PartReplacementNum]) AS [PartReplacementNum]
	,IIF(TRIM([PartStatus]) = '', 'Aktiv', TRIM([PartStatus])) AS [PartStatus]
	,TRIM([CountryOfOrigin]) AS [CountryOfOrigin]
	,IIF([NetWeight] = '' or [NetWeight] IS NULL, 0,  TRY_CONVERT(decimal (18,4), [NetWeight])) AS [NetWeight]
	,TRIM([UoM]) AS [UoM]
	--,'' AS [Material]
	--,'' AS [Barcode]
	--,NULL AS [ReOrderLevel]
	--,'' AS [PartResponsible]
	--,'' AS [StartDate]
	--,'' AS [EndDate]
FROM [stage].[TRA_FR_Part]
GO
PRINT N'Creating [stage].[AXL_SY_Customer]'
GO
CREATE TABLE [stage].[AXL_SY_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[MainCustomerName] [nvarchar] (100) NULL,
[CustomerName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[AddressLine] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (20) NULL,
[TelephoneNumber2] [nvarchar] (20) NULL,
[Email] [nvarchar] (100) NULL,
[City] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[Division] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (50) NULL,
[CustomerIndustry] [nvarchar] (50) NULL,
[CustomerSubIndustry] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNo] [nvarchar] (50) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[CustomerABC] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[SalesPersonResponsible] [nvarchar] (50) NULL,
[CustomerType] [nvarchar] (50) NULL,
[Res1] [nvarchar] (50) NULL,
[Res2] [nvarchar] (50) NULL,
[Res3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXL_SY_Customer]'
GO


CREATE VIEW [stage].[vAXL_SY_Customer] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustomerNum))) )) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,UPPER(CONCAT([Company], '#', TRIM([CustomerNum]))) AS CustomerCode
	,PartitionKey

	,UPPER(Company) AS Company
	,UPPER(TRIM(CustomerNum)) AS [CustomerNum]
	,TRIM(MainCustomerName) AS MainCustomerName
	,TRIM(CustomerName) AS  [CustomerName]
	,TRIM([AddressLine1]) AS [AddressLine1]
	,TRIM([AddressLine2]) AS [AddressLine2]
	,TRIM([AddressLine3]) AS [AddressLine3]
	,TRIM([TelephoneNumber1]) AS [TelephoneNum1]
	,TRIM([TelephoneNumber2]) AS [TelephoneNum2]
	,TRIM([Email]) AS [Email]
	,TRIM([ZipCode]) AS [ZipCode]
	,TRIM([City]) AS [City]
	,TRIM([State]) AS [State]
	,TRIM([District]) AS [SalesDistrict]
	,TRIM(con.CountryName) AS CountryName
	,TRIM([ISOAlpha2Code]) AS [CountryCode]
	,TRIM([Division]) AS [Division]
	,TRIM([CustomerIndustry]) AS [CustomerIndustry]
	,TRIM([CustomerSubIndustry]) AS [CustomerSubIndustry]
	,TRIM([AddressLine3]) AS [AddressLine]
	,CONCAT(TRIM(con.CountryName), + ',  ' + TRIM([City]), + ',  ' + TRIM([ZipCode]), + ',  ' + TRIM(addressline3)) AS [FullAddressLine]
	,TRIM(CustomerGroup) AS [CustomerGroup]
	,TRIM(CustomerGroup) AS [CustomerSubGroup]
	,TRIM([SalesRepCode]) AS [SalesPersonCode]
	,TRIM(SalesPersonName) AS [SalesPersonName]
	,TRIM([SalesPersonResponsible]) AS [SalesPersonResponsible]
	,TRIM([VATRegNo]) AS [VATNum]
	,TRIM([AccountString]) AS [AccountNum]
	,TRIM([InternalExternal]) AS [InternalExternal]
	,TRIM([CustomerABC]) AS [CustomerScore]
	,TRIM([CustomerType]) AS [CustomerType]
FROM [stage].[AXL_SY_Customer] com
	LEFT JOIN dbo.Country con ON com.CountryName = con.[ISOAlpha2Code]

--GROUP BY
--	PartitionKey, Company, CustomerNum, CustomerName, MainCustomerName, [AddressLine1], [AddressLine2], [AddressLine3], [TelephoneNumber1], [TelephoneNumber2], [Email], [ZipCode], [City], [State], [District], [CountryName], [Division], [CustomerIndustry], [CustomerSubIndustry], CustomerGroup, [SalesRepCode], SalesPersonName, [SalesPersonResponsible], [VATRegNo], [AccountString], [InternalExternal], [CustomerABC], [CustomerType]

--	Stagetablename in ('AXL_AU_Customer', 'AXL_DC_Customer', 'AXL_HU_Customer', 'AXL_IE_Customer', 'AXL_PL_Customer', 'AXL_PT_Customer', 'AXL_UK_Customer')
GO
PRINT N'Creating [stage].[IndustryCodes]'
GO
CREATE TABLE [stage].[IndustryCodes]
(
[duns] [int] NULL,
[organization.industryCodes.code] [nvarchar] (100) NULL,
[organization.industryCodes.description] [nvarchar] (300) NULL,
[organization.industryCodes.priority] [nvarchar] (100) NULL,
[organization.industryCodes.typeDescription] [nvarchar] (100) NULL,
[organization.industryCodes.typeDnBCode] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[Financials]'
GO
CREATE TABLE [stage].[Financials]
(
[duns] [int] NULL,
[organization.financials.financialStatementToDate] [nvarchar] (100) NULL,
[organization.financials.yearlyRevenue.value] [nvarchar] (100) NULL,
[organization.financials.yearlyRevenue.currency] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[FamilyTree]'
GO
CREATE TABLE [stage].[FamilyTree]
(
[duns] [int] NULL,
[organization.corporateLinkage.familytreeRolesPlayed.description] [nvarchar] (25) NULL,
[organization.corporateLinkage.familytreeRolesPlayed.dnbCode] [int] NULL
)
GO
PRINT N'Creating [stage].[Relationship]'
GO
CREATE TABLE [stage].[Relationship]
(
[customerReference] [nvarchar] (60) NOT NULL,
[duns] [int] NULL,
[organization.confidenceCode] [int] NULL,
[match_status] [nvarchar] (15) NULL,
[error_detail] [nvarchar] (300) NULL,
[enrich_status] [nvarchar] (15) NULL
)
GO
PRINT N'Creating [stage].[numberOfEmployees]'
GO
CREATE TABLE [stage].[numberOfEmployees]
(
[duns] [int] NOT NULL,
[organization.numberOfEmployees.informationScopeDescription] [nvarchar] (40) NULL,
[organization.numberOfEmployees.value] [int] NULL
)
GO
PRINT N'Creating [stage].[MatchComponents]'
GO
CREATE TABLE [stage].[MatchComponents]
(
[customerReference] [nvarchar] (60) NOT NULL,
[matchCandidates.matchQualityInformation.matchGradeComponents.componentType] [nvarchar] (20) NULL,
[matchCandidates.matchQualityInformation.matchGradeComponents.componentRating] [nvarchar] (40) NULL
)
GO
PRINT N'Creating [stage].[MasterTable]'
GO
CREATE TABLE [stage].[MasterTable]
(
[duns] [int] NULL,
[organization.controlOwnershipDate] [nvarchar] (100) NULL,
[organization.controlOwnershipType.description] [nvarchar] (100) NULL,
[organization.corporateLinkage.domesticUltimate.duns] [nvarchar] (100) NULL,
[organization.corporateLinkage.domesticUltimate.primaryName] [nvarchar] (250) NULL,
[organization.corporateLinkage.globalUltimate.duns] [nvarchar] (100) NULL,
[organization.corporateLinkage.globalUltimate.primaryName] [nvarchar] (250) NULL,
[organization.corporateLinkage.parent.duns] [nvarchar] (100) NULL,
[organization.corporateLinkage.parent.primaryName] [nvarchar] (250) NULL,
[organization.legalForm.description] [nvarchar] (100) NULL,
[organization.legalForm.startDate] [nvarchar] (100) NULL,
[organization.primaryName] [nvarchar] (250) NULL,
[organization.registeredDetails.legalForm.description] [nvarchar] (100) NULL,
[organization.registeredName] [nvarchar] (300) NULL,
[organization.corporateLinkage.headQuarter.duns] [nvarchar] (100) NULL,
[organization.corporateLinkage.headQuarter.primaryName] [nvarchar] (250) NULL,
[organization.legalForm.registrationLocation.addressRegion] [nvarchar] (100) NULL,
[organization.primaryAddress] [nvarchar] (200) NULL,
[organization.primaryAddress.addressCountry.name] [nvarchar] (100) NULL,
[organization.primaryAddress.addressCounty.name] [nvarchar] (100) NULL,
[organization.primaryAddress.addressLocality.name] [nvarchar] (100) NULL,
[organization.primaryAddress.addressRegion.name] [nvarchar] (100) NULL,
[organization.primaryAddress.continentalRegion.name] [nvarchar] (100) NULL,
[organization.primaryAddress.latitude] [nvarchar] (25) NULL,
[organization.primaryAddress.longitude] [nvarchar] (25) NULL,
[organization.primaryAddress.postalCode] [nvarchar] (30) NULL,
[organization.corporateLinkage.hierarchyLevel] [nvarchar] (10) NULL,
[organization.corporateLinkage.role] [nvarchar] (35) NULL,
[organization.isStandalone] [bit] NULL,
[organization.dunsControlStatus.operatingStatus.description] [nvarchar] (200) NULL
)
GO
PRINT N'Creating [stage].[UnspscCodes]'
GO
CREATE TABLE [stage].[UnspscCodes]
(
[duns] [int] NULL,
[organization.unspscCodes.code] [nvarchar] (20) NULL,
[organization.unspscCodes.description] [nvarchar] (250) NULL,
[organization.unspscCodes.priority] [nvarchar] (10) NULL
)
GO
PRINT N'Creating [dnb].[FamilyTree]'
GO
CREATE TABLE [dnb].[FamilyTree]
(
[duns] [int] NULL,
[organization.corporateLinkage.familytreeRolesPlayed.description] [nvarchar] (25) NULL,
[organization.corporateLinkage.familytreeRolesPlayed.dnbCode] [int] NULL
)
GO
PRINT N'Creating [ext].[CoC_Local_sign]'
GO
CREATE TABLE [ext].[CoC_Local_sign]
(
[dw_id] [bigint] NOT NULL,
[is_customer] [bit] NOT NULL,
[last_modified_date] [date] NULL
)
GO
PRINT N'Creating [ext].[CoC_DUNS_sign]'
GO
CREATE TABLE [ext].[CoC_DUNS_sign]
(
[DUNS] [int] NOT NULL,
[last_modified_date] [date] NULL
)
GO
PRINT N'Creating primary key [PK__CoC_DUNS__2A5E8099DCBA8E67] on [ext].[CoC_DUNS_sign]'
GO
ALTER TABLE [ext].[CoC_DUNS_sign] ADD CONSTRAINT [PK__CoC_DUNS__2A5E8099DCBA8E67] PRIMARY KEY CLUSTERED ([DUNS])
GO
PRINT N'Creating [dnb].[sp_loadAll]'
GO
CREATE PROCEDURE [dnb].[sp_loadAll] 
	@process nvarchar(40) = NULL,
	@monitor_partitionKey nvarchar(14) = NULL
as

-- Relationship
begin try
	
	DECLARE @ds_bloque NVARCHAR(80);
    SET @ds_bloque = 'Refrescamos dnb.dnbCustomerAndSupplier';
	DECLARE @enrich_date datetime = getdate();

	BEGIN TRAN @ds_bloque;
		
		-- Updateamos los que tuvieron exito y su conf_code >= 9
		update dnb 
		set
			duns =				NULLIF(rel.duns							,''),	
			confidence_code =	NULLIF(rel.[organization.confidenceCode],''),
			match_status =		NULLIF(rel.match_status					,''),
			enrich_status =		NULLIF(rel.enrich_status				,''),
			error_detail =		NULLIF(rel.error_detail					,''),
			enrich_date =		@enrich_date						,
			match_date =		@enrich_date
		from dnb.DnBCustomerAndSupplier as dnb
		inner join stage.Relationship as rel
			on CAST(left(rel.customerReference,len(rel.customerReference)-2) as bigint) = CAST(dnb.dw_id as bigint)
			and dnb.is_customer = CAST(right(rel.customerReference,1) as bit)
		where rel.[organization.confidenceCode] >= 9 and rel.duns is not null ;

		-- All the ones without a match success, will have a match status and null in confidence code
		update dnb 
		set
			duns =					NULLIF(rel.duns							,''),
			confidence_code =		NULLIF(rel.[organization.confidenceCode],''),
			match_status =			NULLIF(rel.match_status					,''),
			enrich_status =			NULLIF(rel.enrich_status				,''),
			error_detail =			NULLIF(rel.error_detail					,'')
		from dnb.DnBCustomerAndSupplier as dnb
		inner join stage.Relationship as rel
			on CAST(left(rel.customerReference,len(rel.customerReference)-2) as bigint) = CAST(dnb.dw_id as bigint)
			and dnb.is_customer = CAST(right(rel.customerReference,1) as bit)
		where (rel.[organization.confidenceCode] is null);

		update dnb 
		set
			duns =				NULLIF(rel.duns							,''),
			confidence_code =	NULLIF(rel.[organization.confidenceCode],''),
			-- Here I'm not updating the status because i don't want to consider success when
			-- the code is below 9
			-- match_status = rel.match_status,   
			-- enrich_status = rel.enrich_status,
			error_detail = NULLIF(rel.error_detail,'')
		from dnb.DnBCustomerAndSupplier as dnb
		inner join stage.Relationship as rel
			on CAST(left(rel.customerReference,len(rel.customerReference)-2) as bigint) = CAST(dnb.dw_id as bigint)
			and dnb.is_customer = CAST(right(rel.customerReference,1) as bit)
		where (rel.[organization.confidenceCode] < 9);

		IF @process = 'monitor' and @process IS NOT NULL
		BEGIN
			UPDATE dnb
			SET dnb.last_modified_date = CONVERT(datetime, LEFT(@monitor_partitionKey, 8) + ' ' + SUBSTRING(@monitor_partitionKey, 9, 2) + ':' + SUBSTRING(@monitor_partitionKey, 11, 2) + ':' + SUBSTRING(@monitor_partitionKey, 13, 2), 120)
			, dnb.is_monitored = 1
			FROM dnb.DnBCustomerAndSupplier AS dnb 
			INNER JOIN stage.MasterTable as stage
				ON dnb.DUNS = stage.duns
			WHERE dnb.DUNS IS NOT NULL;
		END

	COMMIT TRAN @ds_bloque;

	-- MatchComponents
	SET @ds_bloque = 'Refrescamos dnb.MatchComponents';
	BEGIN TRAN @ds_bloque;

	WITH temporal AS 
	(
	select DISTINCT customerReference
	from stage.MatchComponents
	)
	delete matchComp
	from dnb.MatchComponents as matchComp
	inner join temporal as t
		on matchComp.customerReference = t.customerReference;

	INSERT INTO dnb.MatchComponents (
	  [customerReference]
	, [matchCandidates.matchQualityInformation.matchGradeComponents.componentType]  
	, [matchCandidates.matchQualityInformation.matchGradeComponents.componentRating]
	)
	SELECT 
	  NULLIF([customerReference]														   ,'')
	, NULLIF([matchCandidates.matchQualityInformation.matchGradeComponents.componentType]  ,'')
	, NULLIF([matchCandidates.matchQualityInformation.matchGradeComponents.componentRating],'')
	FROM stage.MatchComponents;

	COMMIT TRAN @ds_bloque;

	-- MasterTable
	SET @ds_bloque = 'Refrescamos dnb.MasterTable';
	BEGIN TRAN @ds_bloque;

		Merge dnb.MasterTable as target
		USING stage.MasterTable as source
		ON cast(target.duns as int) = cast(source.duns as int)
		WHEN NOT MATCHED BY target THEN
			INSERT (
			[duns],
			[organization.controlOwnershipDate],
			[organization.controlOwnershipType.description],
			[organization.corporateLinkage.domesticUltimate.duns] ,
			[organization.corporateLinkage.domesticUltimate.primaryName] ,
			[organization.corporateLinkage.globalUltimate.duns],
			[organization.corporateLinkage.globalUltimate.primaryName] ,
			[organization.corporateLinkage.parent.duns],
			[organization.corporateLinkage.parent.primaryName],
			[organization.legalForm.description],
			[organization.legalForm.startDate],
			[organization.primaryName],
			[organization.registeredDetails.legalForm.description],
			[organization.registeredName],
			[organization.corporateLinkage.headQuarter.duns],
			[organization.corporateLinkage.headQuarter.primaryName],
			[organization.legalForm.registrationLocation.addressRegion],
			[organization.primaryAddress] 								,
			[organization.primaryAddress.addressCountry.name] 			,
			[organization.primaryAddress.addressCounty.name] 			,
			[organization.primaryAddress.addressLocality.name]			,
			[organization.primaryAddress.addressRegion.name]			,
			[organization.primaryAddress.continentalRegion.name]		,
			[organization.primaryAddress.latitude] 						,
			[organization.primaryAddress.longitude] 					,
			[organization.primaryAddress.postalCode]					,
			[organization.corporateLinkage.hierarchyLevel]				,
			[organization.corporateLinkage.role]						,
			[organization.isStandalone]									,
			[organization.dunsControlStatus.operatingStatus.description]
			)
			VALUES(
			NULLIF(source.[duns]										 ,'')			,
			NULLIF(source.[organization.controlOwnershipDate]			 ,'')			,
			NULLIF(source.[organization.controlOwnershipType.description],'')			,
			case when source.[organization.isStandalone] = 1 and source.[organization.corporateLinkage.domesticUltimate.duns] is null			then nullif(source.[duns]					 ,'')	else nullif(source.[organization.corporateLinkage.domesticUltimate.duns]		,'')	end ,
			case when source.[organization.isStandalone] = 1 and source.[organization.corporateLinkage.domesticUltimate.primaryName] is null	then nullif(source.[organization.primaryName],'')	else nullif(source.[organization.corporateLinkage.domesticUltimate.primaryName]	,'')	end ,
			case when source.[organization.isStandalone] = 1 and source.[organization.corporateLinkage.globalUltimate.duns]			is null		then nullif(source.[duns]					,''	)	else nullif(source.[organization.corporateLinkage.globalUltimate.duns]			,'')	end,
			case when source.[organization.isStandalone] = 1 and source.[organization.corporateLinkage.globalUltimate.primaryName]	is null		then nullif(source.[organization.primaryName],'')	else nullif(source.[organization.corporateLinkage.globalUltimate.primaryName]	,'')	end ,
			case when source.[organization.isStandalone] = 1 and source.[organization.corporateLinkage.parent.duns]					is null		then nullif(source.[duns]					,''	)	else nullif(source.[organization.corporateLinkage.parent.duns]					,'')	end,
			case when source.[organization.isStandalone] = 1 and source.[organization.corporateLinkage.parent.primaryName]			is null		then nullif(source.[organization.primaryName],'')	else nullif(source.[organization.corporateLinkage.parent.primaryName]			,'')	end,
			nullif(source.[organization.legalForm.description]					,'')		,
			nullif(source.[organization.legalForm.startDate]					,'')		,
			nullif(source.[organization.primaryName]							,'')		,
			nullif(source.[organization.registeredDetails.legalForm.description],'')		,
			nullif(source.[organization.registeredName]							,'')	,
			case when source.[organization.isStandalone] = 1 and source.[organization.corporateLinkage.headQuarter.duns]		is null then nullif(source.[duns]					 ,'')	else nullif(source.[organization.corporateLinkage.headQuarter.duns]		  ,'')	end,
			case when source.[organization.isStandalone] = 1 and source.[organization.corporateLinkage.headQuarter.primaryName]	is null then nullif(source.[organization.primaryName],'')	else nullif(source.[organization.corporateLinkage.headQuarter.primaryName],'') end,
			nullif(source.[organization.legalForm.registrationLocation.addressRegion]		,''),
			nullif(source.[organization.primaryAddress] 									,''),
			nullif(source.[organization.primaryAddress.addressCountry.name] 				,''),
			nullif(source.[organization.primaryAddress.addressCounty.name] 					,''),
			nullif(source.[organization.primaryAddress.addressLocality.name]				,''),
			nullif(source.[organization.primaryAddress.addressRegion.name]					,''),
			nullif(source.[organization.primaryAddress.continentalRegion.name]				,''),
			nullif(source.[organization.primaryAddress.latitude] 							,''),
			nullif(source.[organization.primaryAddress.longitude] 							,''),
			nullif(source.[organization.primaryAddress.postalCode]							,''),
			nullif(source.[organization.corporateLinkage.hierarchyLevel]					,''),
			nullif(source.[organization.corporateLinkage.role]								,''),
			nullif(source.[organization.isStandalone]										,''),
			nullif(source.[organization.dunsControlStatus.operatingStatus.description]		,'')
			)

		WHEN MATCHED THEN UPDATE SET
			target.[organization.controlOwnershipDate]								= nullif(source.[organization.controlOwnershipDate]				,''),
			target.[organization.controlOwnershipType.description]					= nullif(source.[organization.controlOwnershipType.description]	,''),
			target.[organization.corporateLinkage.domesticUltimate.duns] 			= (case when source.[organization.isStandalone] = 1 and source.[organization.corporateLinkage.domesticUltimate.duns]		is null then nullif(source.[duns]						,'') else nullif(source.[organization.corporateLinkage.domesticUltimate.duns]			,'') end),
			target.[organization.corporateLinkage.domesticUltimate.primaryName] 	= (case when source.[organization.isStandalone] = 1 and source.[organization.corporateLinkage.domesticUltimate.primaryName] is null then nullif(source.[organization.primaryName]	,'') else nullif(source.[organization.corporateLinkage.domesticUltimate.primaryName]	,'') end),
			target.[organization.corporateLinkage.globalUltimate.duns]				= (case when source.[organization.isStandalone] = 1 and source.[organization.corporateLinkage.globalUltimate.duns]			is null then nullif(source.[duns]						,'') else nullif(source.[organization.corporateLinkage.globalUltimate.duns]				,'') end),
			target.[organization.corporateLinkage.globalUltimate.primaryName] 		= (case when source.[organization.isStandalone] = 1 and source.[organization.corporateLinkage.globalUltimate.primaryName]	is null then nullif(source.[organization.primaryName]	,'') else nullif(source.[organization.corporateLinkage.globalUltimate.primaryName]		,'') end),
			target.[organization.corporateLinkage.parent.duns]						= (case when source.[organization.isStandalone] = 1 and source.[organization.corporateLinkage.parent.duns]					is null then nullif(source.[duns]						,'') else nullif(source.[organization.corporateLinkage.parent.duns]						,'') end),
			target.[organization.corporateLinkage.parent.primaryName]				= (case when source.[organization.isStandalone] = 1 and source.[organization.corporateLinkage.parent.primaryName]			is null then nullif(source.[organization.primaryName]	,'') else nullif(source.[organization.corporateLinkage.parent.primaryName]				,'') end),
			target.[organization.legalForm.description]								= nullif(source.[organization.legalForm.description]					,''),
			target.[organization.legalForm.startDate]								= nullif(source.[organization.legalForm.startDate]						,''),
			target.[organization.primaryName]										= nullif(source.[organization.primaryName]								,''),
			target.[organization.registeredDetails.legalForm.description]			= nullif(source.[organization.registeredDetails.legalForm.description]	,''),
			target.[organization.registeredName]									= nullif(source.[organization.registeredName],''),	
			target.[organization.corporateLinkage.headQuarter.duns]					= (case when source.[organization.isStandalone] = 1 and source.[organization.corporateLinkage.headQuarter.duns]			is null then nullif(source.[duns]						,'') else nullif(source.[organization.corporateLinkage.headQuarter.duns]		,'') end),
			target.[organization.corporateLinkage.headQuarter.primaryName]			= (case when source.[organization.isStandalone] = 1 and source.[organization.corporateLinkage.headQuarter.primaryName]	is null then nullif(source.[organization.primaryName]	,'') else nullif(source.[organization.corporateLinkage.headQuarter.primaryName] ,'') end),
			target.[organization.legalForm.registrationLocation.addressRegion]		= nullif(source.[organization.legalForm.registrationLocation.addressRegion],''),
			target.[organization.primaryAddress] 									= nullif(source.[organization.primaryAddress] 							,''),	
			target.[organization.primaryAddress.addressCountry.name] 				= nullif(source.[organization.primaryAddress.addressCountry.name] 		,''),
			target.[organization.primaryAddress.addressCounty.name] 				= nullif(source.[organization.primaryAddress.addressCounty.name] 		,''),
			target.[organization.primaryAddress.addressLocality.name]				= nullif(source.[organization.primaryAddress.addressLocality.name]		,''),
			target.[organization.primaryAddress.addressRegion.name]					= nullif(source.[organization.primaryAddress.addressRegion.name]		,''),
			target.[organization.primaryAddress.continentalRegion.name]				= nullif(source.[organization.primaryAddress.continentalRegion.name]	,''),
			target.[organization.primaryAddress.latitude] 							= nullif(source.[organization.primaryAddress.latitude] 					,''),
			target.[organization.primaryAddress.longitude] 							= nullif(source.[organization.primaryAddress.longitude] 				,''),
			target.[organization.primaryAddress.postalCode] 						= nullif(source.[organization.primaryAddress.postalCode]				,''),
			target.[organization.corporateLinkage.hierarchyLevel]					= nullif(source.[organization.corporateLinkage.hierarchyLevel]			,''),
			target.[organization.corporateLinkage.role]								= (case when source.[organization.corporateLinkage.role] != 'Dummy' then nullif(source.[organization.corporateLinkage.role],'') else nullif(target.[organization.corporateLinkage.role],'') end),
			target.[organization.isStandalone]										= nullif(source.[organization.isStandalone]									,''),
			target.[organization.dunsControlStatus.operatingStatus.description]		= nullif(source.[organization.dunsControlStatus.operatingStatus.description],'')
		;

	COMMIT TRAN @ds_bloque;

	-- IndustryCodes
    SET @ds_bloque = 'Refrescamos IndustryCodes';

	BEGIN TRAN @ds_bloque;

		WITH temporal AS 
		(
		select DISTINCT duns
		from stage.IndustryCodes
		)
		delete indCode
		from dnb.IndustryCodes as indCode
		inner join temporal as t
			on indCode.duns = t.duns;

		INSERT INTO dnb.IndustryCodes (
		duns
		,[organization.industryCodes.code]
		,[organization.industryCodes.description]
		,[organization.industryCodes.typeDescription]
		,[organization.industryCodes.priority]
		,[organization.industryCodes.typeDnBCode]
		)
		SELECT 
		 nullif(duns										,'')
		,nullif([organization.industryCodes.code]			,'')
		,nullif([organization.industryCodes.description]	,'')
		,nullif([organization.industryCodes.typeDescription],'')
		,nullif([organization.industryCodes.priority]		,'')
		,nullif([organization.industryCodes.typeDnBCode]	,'')
		FROM stage.IndustryCodes;

	COMMIT TRAN @ds_bloque;

	-- UnspscCodes
    SET @ds_bloque = 'Refrescamos UnspscCodes';

	BEGIN TRAN @ds_bloque;

		WITH temporal AS 
		(
		select DISTINCT duns
		from stage.UnspscCodes
		)
		delete unspsc
		from dnb.UnspscCodes as unspsc
		inner join temporal as t
			on unspsc.duns = t.duns;

		INSERT INTO dnb.UnspscCodes
		(
		[duns]									,
		[organization.unspscCodes.code]			,
		[organization.unspscCodes.description]	,
		[organization.unspscCodes.priority]		
		)
		SELECT 
		nullif([duns]									,''),
		nullif([organization.unspscCodes.code]			,''),
		nullif([organization.unspscCodes.description]	,''),
		nullif([organization.unspscCodes.priority]		,'')
		FROM stage.UnspscCodes;

	COMMIT TRAN @ds_bloque;

	-- Financials
    SET @ds_bloque = 'Refrescamos Financials';

	BEGIN TRAN @ds_bloque;

		WITH temporal AS 
		(
		select DISTINCT duns
		from stage.Financials
		)
		delete Financials
		from dnb.Financials as Financials
		inner join temporal as t
			on Financials.duns = t.duns;

		INSERT INTO dnb.Financials
		(
		[duns]												,
		[organization.financials.financialStatementToDate]	,
		[organization.financials.yearlyRevenue.value]		,
		[organization.financials.yearlyRevenue.currency]	
		)
		SELECT 
		nullif([duns]												,''),  	
		nullif([organization.financials.financialStatementToDate]	,''),
		nullif([organization.financials.yearlyRevenue.value]		,''),
		nullif([organization.financials.yearlyRevenue.currency]	   	,'')
		FROM stage.Financials;

	COMMIT TRAN @ds_bloque;

	-- FamilyTree
    SET @ds_bloque = 'Refrescamos FamilyTree';

	BEGIN TRAN @ds_bloque;

		WITH temporal AS 
		(
		select DISTINCT duns
		from stage.FamilyTree
		)
		delete FamilyTree
		from dnb.FamilyTree as FamilyTree
		inner join temporal as t
			on FamilyTree.duns = t.duns;

		INSERT INTO dnb.FamilyTree
		(
		[duns]																,
		[organization.corporateLinkage.familytreeRolesPlayed.description]	,
		[organization.corporateLinkage.familytreeRolesPlayed.dnbCode]		
		)
		SELECT 
		nullif([duns]															,'')	,
		nullif([organization.corporateLinkage.familytreeRolesPlayed.description],'')	,
		nullif([organization.corporateLinkage.familytreeRolesPlayed.dnbCode]	,'')	
		FROM stage.FamilyTree;

	COMMIT TRAN @ds_bloque;

	-- NumberOfEmployees
    SET @ds_bloque = 'Refrescamos NumberOfEmployees';

	BEGIN TRAN @ds_bloque;

		WITH temporal AS 
		(
		select DISTINCT duns
		from stage.numberOfEmployees
		)
		delete numberOfEmployees
		from dnb.numberOfEmployees as numberOfEmployees
		inner join temporal as t
			on numberOfEmployees.duns = t.duns;

		INSERT INTO dnb.numberOfEmployees
		(
		[duns]														,
		[organization.numberOfEmployees.informationScopeDescription],
		[organization.numberOfEmployees.value]						
		)
		SELECT 
		nullif([duns]														,''),
		nullif([organization.numberOfEmployees.informationScopeDescription] ,''),
		nullif([organization.numberOfEmployees.value]						,'')
		FROM stage.numberOfEmployees;

	COMMIT TRAN @ds_bloque;

	-- Insert into CoC_DUNS_sign from local signed companies

	SET @ds_bloque = 'Insert DUNS signed'

	BEGIN TRAN @ds_bloque;

	WITH cte AS (
		SELECT DISTINCT dnb.DUNS
		FROM ext.CoC_Local_sign as ls
		LEFT JOIN dnb.DnBCustomerAndSupplier as dnb
			ON ls.dw_id = cast(dnb.dw_id as bigint)
				AND ls.is_customer = dnb.is_customer
		WHERE dnb.DUNS IS NOT NULL
	)
	MERGE INTO ext.CoC_DUNS_sign as target
	USING cte AS source
	ON target.DUNS = source.DUNS
	WHEN NOT MATCHED THEN
		INSERT (DUNS)
		VALUES (source.DUNS);

	COMMIT TRAN @ds_bloque;

	/*
	If we are running the monitor process that means that we have the records that were updated
	so we will update the dnb.DunsInMonitoring table to know the latest changes on each duns
	*/
	IF @process = 'monitor' and @process IS NOT NULL
		BEGIN
			update dnb
				set last_modified_date = CAST(GETDATE() as DATE)
			from dnb.DunsInMonitoring as dnb
			INNER JOIN stage.MasterTable as smt
				on dnb.duns = smt.duns;
	END

end try

begin catch
	IF @@TRANCOUNT > 0
	ROLLBACK;
	DECLARE @ErrorMessage NVARCHAR(4000), @Bloque NVARCHAR(80),@ErrorLine INT;
	SET @Bloque = @ds_bloque;
	SET @ErrorLine = ERROR_LINE();
	SELECT @ErrorMessage = ERROR_MESSAGE();
	RAISERROR('Error en la transacción %s, línea %d: %s',16,1,@Bloque, @ErrorLine, @ErrorMessage);
end catch
GO
PRINT N'Creating [stage].[AXL_SE_Customer]'
GO
CREATE TABLE [stage].[AXL_SE_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[MainCustomerName] [nvarchar] (100) NULL,
[CustomerName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[AddressLine] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (20) NULL,
[TelephoneNumber2] [nvarchar] (20) NULL,
[Email] [nvarchar] (100) NULL,
[City] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[Division] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (50) NULL,
[CustomerIndustry] [nvarchar] (50) NULL,
[CustomerSubIndustry] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNo] [nvarchar] (50) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[CustomerABC] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[SalesPersonResponsible] [nvarchar] (50) NULL,
[CustomerType] [nvarchar] (50) NULL,
[Res1] [nvarchar] (50) NULL,
[Res2] [nvarchar] (50) NULL,
[Res3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXL_SE_Customer]'
GO


CREATE VIEW [stage].[vAXL_SE_Customer] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustomerNum))) )) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,UPPER(CONCAT([Company], '#', TRIM([CustomerNum]))) AS CustomerCode
	,PartitionKey

	,UPPER(Company) AS Company
	,UPPER(TRIM(CustomerNum)) AS [CustomerNum]
	,TRIM(MainCustomerName) AS MainCustomerName
	,TRIM(CustomerName) AS  [CustomerName]
	,TRIM([AddressLine1]) AS [AddressLine1]
	,TRIM([AddressLine2]) AS [AddressLine2]
	,TRIM([AddressLine3]) AS [AddressLine3]
	,TRIM([TelephoneNumber1]) AS [TelephoneNum1]
	,TRIM([TelephoneNumber2]) AS [TelephoneNum2]
	,TRIM([Email]) AS [Email]
	,TRIM([ZipCode]) AS [ZipCode]
	,TRIM([City]) AS [City]
	,TRIM([State]) AS [State]
	,TRIM([District]) AS [SalesDistrict]
	,TRIM(con.CountryName) AS CountryName
	,TRIM([ISOAlpha2Code]) AS [CountryCode]
	,TRIM([Division]) AS [Division]
	,TRIM([CustomerIndustry]) AS [CustomerIndustry]
	,TRIM([CustomerSubIndustry]) AS [CustomerSubIndustry]
	,TRIM([AddressLine3]) AS [AddressLine]
	,CONCAT(TRIM(con.CountryName), + ',  ' + TRIM([City]), + ',  ' + TRIM([ZipCode]), + ',  ' + TRIM(addressline3)) AS [FullAddressLine]
	,TRIM(CustomerGroup) AS [CustomerGroup]
	,TRIM(CustomerGroup) AS [CustomerSubGroup]
	,TRIM([SalesRepCode]) AS [SalesPersonCode]
	,TRIM(SalesPersonName) AS [SalesPersonName]
	,TRIM([SalesPersonResponsible]) AS [SalesPersonResponsible]
	,TRIM([VATRegNo]) AS [VATNum]
	,TRIM([AccountString]) AS [AccountNum]
	,TRIM([InternalExternal]) AS [InternalExternal]
	,TRIM([CustomerABC]) AS [CustomerScore]
	,TRIM([CustomerType]) AS [CustomerType]
FROM [stage].[AXL_SE_Customer] com
	LEFT JOIN dbo.Country con ON com.CountryName = con.[ISOAlpha2Code]

--GROUP BY
--	PartitionKey, Company, CustomerNum, CustomerName, MainCustomerName, [AddressLine1], [AddressLine2], [AddressLine3], [TelephoneNumber1], [TelephoneNumber2], [Email], [ZipCode], [City], [State], [District], [CountryName], [Division], [CustomerIndustry], [CustomerSubIndustry], CustomerGroup, [SalesRepCode], SalesPersonName, [SalesPersonResponsible], [VATRegNo], [AccountString], [InternalExternal], [CustomerABC], [CustomerType]

--	Stagetablename in ('AXL_AU_Customer', 'AXL_DC_Customer', 'AXL_HU_Customer', 'AXL_IE_Customer', 'AXL_PL_Customer', 'AXL_PT_Customer', 'AXL_UK_Customer')
GO
PRINT N'Creating [stage].[CYE_ES_StockBalance]'
GO
CREATE TABLE [stage].[CYE_ES_StockBalance]
(
[PartitionKey] [nvarchar] (50) NULL,
[Company] [nvarchar] (50) NOT NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[BinNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[DelivTime] [nvarchar] (50) NULL,
[LastStockTakeDate] [date] NULL,
[LastStdCostCalDate] [date] NULL,
[MaxStockQty] [nvarchar] (50) NULL,
[StockBalance] [nvarchar] (50) NULL,
[StockValue] [nvarchar] (50) NULL,
[ReserveQty] [nvarchar] (50) NULL,
[BackOrderQty] [nvarchar] (50) NULL,
[OrderQty] [nvarchar] (50) NULL,
[StockTakeDiff] [nvarchar] (50) NULL,
[ReOrderLevel] [nvarchar] (50) NULL,
[SafetyStock] [nvarchar] (50) NULL,
[OptimalOrderQty] [nvarchar] (50) NULL,
[AvgCost] [nvarchar] (50) NULL,
[SBRes1] [nvarchar] (100) NULL,
[SBRes2] [nvarchar] (100) NULL,
[SBRes3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vCYE_ES_StockBalance]'
GO
CREATE VIEW [stage].[vCYE_ES_StockBalance] AS
--ADD TRIM() INTO WarehouseID 23-01-03 VA 
--ADD TRIM() INTO SupplierID 23-01-03 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company], '#', TRIM([PartNum]), '#', TRIM([WarehouseCode]), '#', TRIM(BinNum), '#', TRIM(BatchNum))))) AS ItemWarehouseID
	,UPPER(CONCAT(Company, '#', TRIM(WarehouseCode))) AS WarehouseCode
	,UPPER(CONCAT([Company], '#', TRIM([PartNum]), '#', TRIM([WarehouseCode]))) AS ItemWarehouseCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([SupplierNum]))))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company], '#', TRIM([SupplierNum]))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company], '#', TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company], '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey

	,UPPER([Company]) AS Company
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,CASE WHEN TRIM(BinNum) like '' OR BinNum like ' ' THEN NULL ELSE TRIM(BinNum) END AS BinNum
	,TRIM(BatchNum) AS BatchNum
	--,NULL AS [DelivTime]-- convert to days
	,CONVERT(date, '1900-01-01') AS LastStockTakeDate
	,CONVERT(date, '1900-01-01') AS LastStdCostCalDate
	,CONVERT(date, '1900-01-01') AS DelivDateSupplier
	,CONVERT(date, '1900-01-01') AS DelivDateCust
	,CONVERT(date, '1900-01-01') AS OrderDateSupplier
	,CONVERT(date, '1900-01-01') AS OrderDateCust
	,TRIM(Currency) AS Currency
	--,NULL AS SafetyStock
	--,NULL AS MaxStockQty
	,CONVERT(decimal(18,4), REPLACE(StockBalance, ',', '.')) AS StockBalance
	,CONVERT(decimal(18,4), REPLACE(StockValue, ',', '.')) AS StockValue
	,CONVERT(decimal(18,4), REPLACE(AvgCost, ',', '.')) AS AvgCost
	,CONVERT(decimal(18,4), REPLACE(ReserveQty, ',', '.')) AS ReserveQty
	,CONVERT(decimal(18,4), REPLACE(BackOrderQty, ',', '.')) AS BackOrderQty
	,CONVERT(decimal(18,4), REPLACE(OrderQty, ',', '.')) AS OrderQty
	,CONVERT(decimal(18,4), REPLACE(StockTakeDiff, ',', '.')) AS StockTakeDiff
	,CONVERT(decimal(18,4), REPLACE(ReOrderLevel, ',', '.')) AS ReOrderLevel
	,CONVERT(decimal(18,4), REPLACE(OptimalOrderQty, ',', '.')) AS OptimalOrderQty
	,SBRes1
	,SBRes2
	,SBRes3
	
FROM 
	[stage].[CYE_ES_StockBalance]
--	LEFT JOIN dw.PurchaseOrder po ON st.Company = po.Company AND st.PartNum = po.PartNum
--GROUP BY
--	st.[PartitionKey],st.[Company],st.[PartNum],st.[WarehouseCode],st.[IssuerReceiverNum]
GO
PRINT N'Creating [dw].[vALL_Warehous]'
GO

CREATE VIEW [dw].[vALL_Warehous] AS

SELECT
	UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([WarehouseCode])) AS [WarehouseCode]
	,TRIM(WarehouseName) AS WarehouseName
FROM [dw].[Warehouse]
GO
PRINT N'Creating [stage].[ROR_SE_StockBalance]'
GO
CREATE TABLE [stage].[ROR_SE_StockBalance]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (50) NOT NULL,
[WarehouseCode] [nvarchar] (500) NULL,
[BinNum] [nvarchar] (500) NULL,
[SupplierNum] [nvarchar] (500) NULL,
[PartNum] [nvarchar] (500) NULL,
[DelivTime] [nvarchar] (50) NULL,
[LastStockTakeDate] [date] NULL,
[LastStdCostCalDate] [date] NULL,
[StockTakeDiff] [nvarchar] (50) NULL,
[MaxStockQty] [nvarchar] (500) NULL,
[StockBalance] [nvarchar] (500) NULL,
[StockValue] [nvarchar] (500) NULL,
[ReOrderLevel] [nvarchar] (500) NULL,
[SafetyStock] [nvarchar] (500) NULL,
[OptimalOrderQty] [nvarchar] (500) NULL,
[SalesRemainingQty] [nvarchar] (500) NULL,
[PurchaseRemainingqty] [nvarchar] (500) NULL,
[AvgCost] [nvarchar] (500) NULL,
[Currency] [nvarchar] (500) NULL,
[ExchangeRate] [nvarchar] (500) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL,
[IsActiveRecord] [nvarchar] (50) NULL,
[SBRes1] [nvarchar] (50) NULL,
[SBRes2] [nvarchar] (50) NULL,
[SBRes3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vROR_SE_StockBalance]'
GO
CREATE VIEW [stage].[vROR_SE_StockBalance] AS
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company], '#', TRIM([WarehouseCode]), '#', TRIM(BinNum), '#', TRIM(PartNum))))) AS ItemWarehouseID
	,UPPER(TRIM([WarehouseCode])) AS WarehouseCode
	,UPPER(CONCAT([Company], '#', TRIM(PartNum), '#', TRIM([WarehouseCode]))) AS ItemWarehouseCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([SupplierNum]))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey

	,UPPER(Company) AS Company
	,UPPER(TRIM(PartNum)) AS PartNum
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
	,CASE WHEN TRIM(BinNum) like '' OR BinNum like ' ' THEN NULL ELSE TRIM(BinNum) END AS BinNum
	,'' AS BatchNum
	,CONVERT(decimal(18,4), IIF(DelivTime = '', NULL, DelivTime)) AS [DelivTime]-- convert to days
	,CONVERT(date, MAX(LastStockTakeDate)) AS LastStockTakeDate
	,CONVERT(date, LastStdCostCalDate) AS LastStdCostCalDate
	,CONVERT(date, '1900-01-01') AS DelivDateSupplier
	,CONVERT(date, '1900-01-01') AS DelivDateCust
	,CONVERT(date, '1900-01-01') AS OrderDateSupplier
	,CONVERT(date, '1900-01-01') AS OrderDateCust
	,TRIM(Currency) AS Currency
	,CONVERT(decimal(18,2), REPLACE(ExchangeRate, ',', '.')) AS ExchangeRate
	,CONVERT(decimal(18,2), REPLACE(SafetyStock, ',', '.')) AS SafetyStock --  -- gives convertion error!!!
	,CONVERT(decimal(18,2), REPLACE(MaxStockQty, ',', '.')) AS MaxStockQty --CAST(MaxStockQty AS decimal(18,2))
	,CONVERT(decimal(18,4), REPLACE(StockBalance, ',', '.')) AS StockBalance
	,CONVERT(decimal(18,4), REPLACE(StockValue, ',', '.')) AS StockValue
	,AVG(CONVERT(decimal(18,4), REPLACE(AvgCost, ',', '.'))) AS AvgCost
	,CONVERT(decimal(18,4), REPLACE(SalesRemainingQty, ',', '.')) AS SalesRemainingQty
	,CONVERT(decimal(18,4), REPLACE(PurchaseRemainingqty, ',', '.')) AS PurchaseRemainingqty
	--,ReserveQty
	--,BackOrderQty
	--,OrderQty
	,CONVERT(decimal(18,4), REPLACE(StockTakeDiff, ',', '.')) AS StockTakeDiff
	,CONVERT(decimal(18,4), ReOrderLevel) AS  ReOrderLevel --
	,CONVERT(decimal(18,4), OptimalOrderQty) AS  OptimalOrderQty --
	--,'' AS SBRes1
	--,'' AS SBRes2
	--,'' AS SBRes3
FROM 
	[stage].[ROR_SE_StockBalance]
WHERE AvgCost != '0.0000'
GROUP BY
	PartitionKey, Company, PartNum, SupplierNum, BinNum, DelivTime, LastStdCostCalDate, Currency, SafetyStock, MaxStockQty, StockBalance, StockValue, StockTakeDiff, ReOrderLevel, OptimalOrderQty, [WarehouseCode], ExchangeRate, SalesRemainingQty, PurchaseRemainingqty
GO
PRINT N'Creating [dm_DS].[dimProject]'
GO
CREATE VIEW [dm_DS].[dimProject] AS

SELECT 
 proj.[ProjectID]
,proj.[ProjectCode]
,proj.[PartitionKey]
,proj.[Company]
,proj.[MainProjectNum]
,proj.[ProjectNum]
,proj.[ProjectDescription]
,proj.[Project]
,proj.[Organisation]
,proj.[ProjectStatus]
,proj.[ProjectCategory]
,proj.[WBSElement]
,proj.[ObjectNum]
,proj.[Level]
,proj.[Currency]
,proj.[WarehouseCode]
,proj.[ProjectResponsible]
,proj.[Comments]
,proj.[StartDate]
,proj.[EndDate]
,proj.[EstEndDate]
,proj.[ActualCost]
FROM [dm].[DimProject] proj
LEFT JOIN dbo.Company com ON proj.Company = com.Company
WHERE com.BusinessArea = 'Driveline Solutions' AND com.[Status] = 'Active' 

--WHERE [Company] in ('MIT', 'ATZ', 'Transaut')
GO
PRINT N'Creating [stage].[JEN_DK_StockTransaction]'
GO
CREATE TABLE [stage].[JEN_DK_StockTransaction]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[SysRowID] [nvarchar] (20) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[BinNumber] [nvarchar] (50) NULL,
[BatchID] [nvarchar] (50) NULL,
[FIFOBatchID] [nvarchar] (50) NULL,
[SupplierBatchID] [nvarchar] (50) NULL,
[TranDate] [date] NULL,
[CreateDate] [date] NULL,
[CreateTime] [nvarchar] (20) NULL,
[TranDT] [nvarchar] (50) NULL,
[TranType] [nvarchar] (50) NULL,
[TranTypeDesc] [nvarchar] (500) NULL,
[TranSource] [nvarchar] (50) NULL,
[Reference] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[IssuerReceiverCode] [nvarchar] (50) NULL,
[CostPrice] [decimal] (18, 4) NULL,
[SellingPrice] [decimal] (18, 4) NULL,
[TranQty] [decimal] (18, 4) NULL,
[TranValue] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vJEN_DK_StockTransaction]'
GO

CREATE VIEW [stage].[vJEN_DK_StockTransaction] AS 
--COMMENT EMPTY FIELD // ADD UPPER() INTO CustomerID 22-12-29 VA
SELECT 
--	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([SysRowID]))))) AS StockTransactionID
--	,UPPER(CONCAT([Company],'#',TRIM([SysRowID]))) AS StockTransactionCode --StockTransactionCode
--	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER([Company]))) AS CompanyID
--    ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
-- 	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
--	,IIF(TranSource = '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM([Company]),'#',TRIM([OrderNum])))), NULL) AS SalesOrderID
--	,IIF(TranSource <> '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM([Company]),'#',TRIM([OrderNum])))), NULL) AS PurchaseOrderID
----	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([OrderNum])))) AS PurchaseOrderID
--	,IIF(TranSource = '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM([Company]),'#',TRIM([InvoiceNum])))), NULL) AS SalesInvoiceID
--	,IIF(TranSource <> '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM([Company]),'#',TRIM([InvoiceNum])))), NULL) AS PurchaseInvoiceID

--	,IIF(TranSource = '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([IssuerReceiverCode]))))), NULL) AS CustomerID
--	,IIF(TranSource <> '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM([Company]),'#',TRIM([IssuerReceiverCode])))), NULL) AS SupplierID
--	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([CurrencyCode])))) AS CurrencyID
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM([Company]),'#',TRIM([SysRowID])))) AS StockTransactionID
	,CONCAT([Company],'#',TRIM([SysRowID])) AS StockTransactionCode --StockTransactionCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',TRIM([Company]))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
 	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',TRIM([CurrencyCode]))) AS CurrencyID

	,IIF([TranTypeDesc] = 'Outgoing goods', CONVERT([binary](32), HASHBYTES('SHA2_256', Upper(CONCAT(TRIM([Company]),'#',TRIM([IssuerReceiverCode]))))), NULL) AS CustomerID
	,IIF([TranTypeDesc] = 'Outgoing goods', CONVERT([binary](32), HASHBYTES('SHA2_256', Upper(CONCAT(TRIM([Company]),'#',TRIM([OrderNum]))))), NULL) AS SalesOrderNumID
	,IIF([TranTypeDesc] = 'Outgoing goods', CONVERT([binary](32), HASHBYTES('SHA2_256', Upper(CONCAT(TRIM([Company]),'#',TRIM([InvoiceNum]))))), NULL) AS SalesInvoiceID
	,IIF([TranTypeDesc] = 'Incoming goods', CONVERT([binary](32), HASHBYTES('SHA2_256', Upper(CONCAT(TRIM([Company]),'#',TRIM([IssuerReceiverCode]))))), NULL) AS SupplierID
	,IIF([TranTypeDesc] = 'Incoming goods', CONVERT([binary](32), HASHBYTES('SHA2_256', Upper(CONCAT(TRIM([Company]),'#',TRIM([OrderNum]))))), NULL) AS PurchaseOrderNumID
	,IIF([TranTypeDesc] = 'Incoming goods', CONVERT([binary](32), HASHBYTES('SHA2_256', Upper(CONCAT(TRIM([Company]),'#',TRIM([InvoiceNum]))))), NULL) AS PurchaseInvoiceID

	,[PartitionKey]
    ,[SysRowID] AS IndexKey
    ,TRIM([Company]) AS Company -- 
	,TRIM([WarehouseCode]) AS WarehouseCode
	,TRIM([TranType])		AS TransactionCode
	,TRIM([TranTypeDesc])	AS TransactionDescription
	,IIF(TRIM([IssuerReceiverCode])='', NULL,TRIM(IssuerReceiverCode)) AS IssuerReceiverCode
	,IIF(TRIM([OrderNum])='', NULL, TRIM(OrderNum)) AS OrderNum 
    ,IIF(TRIM([InvoiceNum])='', NULL,TRIM(InvoiceNum)) AS InvoiceNum
	--,'' AS InvoiceLine
    ,TRIM([PartNum]) AS PartNum
    ,IIF(TRIM([BinNumber])='', NULL,TRIM(BinNumber)) AS BinNum
    ,IIF(TRIM([BatchID])='', NULL,TRIM(BatchID)) AS BatchNum
	,convert(date, [TranDate]) AS TransactionDate
	,[CreateTime] AS TransactionTime
	,[TranQty] AS TransactionQty
	,TranValue AS TransactionValue 
	,[CostPrice]
	,SellingPrice AS SalesUnitPrice
	,'DKK' AS Currency  -- CurrencyCode changed 2023-05-16 SB
	,CONVERT(decimal(18,4), ExchangeRate) AS ExchangeRate
	,[Reference]
	,convert(date, [CreateDate]) AS AdjustmentDate
	,IIF(TRIM([TranTypeDesc]) IN ('Incoming goods','Outgoing goods'),'External','Internal') AS InternalExternal
	,PartStatus AS STRes1
	--,'' AS STRes2
	--,'' AS STRes3
	,[TranDT]
    ,[TranSource]
			 
FROM 
	[stage].[JEN_DK_StockTransaction]
GO
PRINT N'Creating [stage].[CYE_ES_PurchaseInvoice]'
GO
CREATE TABLE [stage].[CYE_ES_PurchaseInvoice]
(
[PartitionKey] [nvarchar] (50) NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaseOrderType] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[PurchaseInvoiceLine] [nvarchar] (50) NULL,
[PurchaseInvoiceType] [nvarchar] (50) NULL,
[PurchaseInvoiceDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PurchaseInvoiceQty] [nvarchar] (50) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [nvarchar] (50) NULL,
[DiscountPercent] [nvarchar] (50) NULL,
[DiscountAmount] [nvarchar] (50) NULL,
[TotalMiscChrg] [nvarchar] (50) NULL,
[VATAmount] [nvarchar] (50) NULL,
[ExchangeRate] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PurchaserName] [nvarchar] (100) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[PurchaseChannel] [nvarchar] (50) NULL,
[Comment] [nvarchar] (max) NULL,
[PIRes1] [nvarchar] (50) NULL,
[PIRes2] [nvarchar] (50) NULL,
[PIRes3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCYE_ES_PurchaseInvoice]'
GO




CREATE VIEW [stage].[vCYE_ES_PurchaseInvoice] AS
--ADD TRIM() INTO CustomerID,PartID 23-01-03 VA
--ADD TRIM() INTO SupplierID 23-01-23 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([PurchaseInvoiceNum]), '#', TRIM(SupplierNum), '#', TRIM(PartNum), '#', TRIM([PurchaseInvoiceNum]), '#', TRIM([PurchaseInvoiceLine]))))) AS PurchaseInvoiceID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([PurchaseInvoiceNum]), '#', TRIM(SupplierNum), '#', TRIM(PartNum), '#', TRIM([PurchaseOrderNum]),'#', TRIM([PurchaseOrderLine]))))) AS PurchaseOrderID
	,UPPER(CONCAT(Company, '#', TRIM(SupplierNum), '#', TRIM([PurchaseOrderNum]), '#', TRIM([PurchaseOrderLine]), '#', TRIM(PartNum))) AS PurchaseOrderCode
	,UPPER(CONCAT(Company, '#', TRIM(SupplierNum), '#', TRIM([PurchaseInvoiceNum]), '#', TRIM([PurchaseInvoiceLine]), '#', TRIM(PartNum))) AS [PurchaseInvoiceCode]
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([PurchaseOrderNum]))))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([PurchaseInvoiceNum]))))) AS PurchaseLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', 'EUR')) AS CurrencyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', '')))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(''))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum))))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierNum))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,CONVERT(int, replace([PurchaseInvoiceDate],'-','')) AS PurchaseInvoiceDateID
	,[PartitionKey]

    ,UPPER([Company]) AS [Company]
    ,UPPER(TRIM([SupplierNum])) AS [SupplierNum]
    ,UPPER(TRIM([PartNum])) AS [PartNum]
    ,UPPER(TRIM([WarehouseCode])) AS [WarehouseCode]
	,[PurchaseOrderNum]
    ,[PurchaseOrderLine]
    ,[PurchaseOrderSubLine]
    ,[PurchaseOrderType]
    ,[PurchaseInvoiceNum]
    ,[PurchaseInvoiceLine]
    ,[PurchaseInvoiceType]
    ,[PurchaseInvoiceDate]
    ,[ActualDelivDate]
    ,IIF([PurchaseInvoiceType] = 'Credit Memo', -1*CAST(REPLACE([PurchaseInvoiceQty], ',', '.') AS decimal(18,2)), CAST(REPLACE([PurchaseInvoiceQty], ',', '.') AS decimal(18,2))) AS [PurchaseInvoiceQty]
    ,[UoM]
    ,IIF(CONVERT(decimal(18,2), REPLACE([TotalMiscChrg], ',', '.')) = CONVERT(decimal(18,2), REPLACE([UnitPrice], ',', '.')), 0, CONVERT(decimal(18,2), REPLACE([UnitPrice], ',', '.'))) AS [UnitPrice] -- miscchrg is at header lever, this way it doesn't calc twice in our measure when inklude miscchrg options
    ,REPLACE([DiscountPercent], ',', '.') AS [DiscountPercent]
    ,REPLACE([DiscountAmount], ',', '.') AS [DiscountAmount]
    ,REPLACE([TotalMiscChrg], ',', '.') AS [TotalMiscChrg]
    ,REPLACE([VATAmount], ',', '.') AS [VATAmount]
    ,REPLACE([ExchangeRate], ',', '.') [ExchangeRate]
	,[Currency]
    ,[CreditMemo]
    ,[PurchaserName]
    ,[PurchaseChannel]
    ,[PIRes1]
    ,[PIRes2]
    ,[PIRes3]
    ,[Comment]
FROM [stage].[CYE_ES_PurchaseInvoice]
GO
PRINT N'Creating [dbo].[AllDates]'
GO
CREATE TABLE [dbo].[AllDates]
(
[DateID] [int] NOT NULL,
[Date] [date] NOT NULL,
[WeekDayNo] [int] NOT NULL,
[DateCounter] [bigint] NOT NULL,
[YearMonthCounter] [bigint] NOT NULL,
[YearQuarterCounter] [bigint] NOT NULL
)
GO
PRINT N'Creating [dw].[AllDates_Load]'
GO

CREATE PROC [dw].[AllDates_Load] AS

/*
	Create Date: 2019-10-28
	Description: Inserts dates to the date table dw.Date. Should only be run once or if it needs to be refilled for some reason.
				Most of the Date attributes are added in the Date view (to create a more flexible solution) but some attributes needed to be created in the table for different reasons.

*/

BEGIN

	TRUNCATE TABLE [dbo].[AllDates]

	SET DATEFIRST 1 -- to Monday as first day of week

	DECLARE @StartDate DATE = '20050101', @NumberOfYears INT = 50;

	DECLARE @CutoffDate DATE = DATEADD(YEAR, @NumberOfYears, @StartDate);

	INSERT [dbo].[AllDates] (DateID, [Date], [WeekDayNo], DateCounter, YearMonthCounter, YearQuarterCounter)
	SELECT 
		CAST(CONVERT(VARCHAR(10), [Date], 112) AS int) AS DateID
		,[Date]
		,DATEPART(WEEKDAY, [Date]) AS [WeekDayNo] 
		,ROW_NUMBER() OVER (ORDER BY [Date]) AS DateCounter
		,DENSE_RANK() OVER (ORDER BY LEFT(CONVERT(varchar, [Date],112),6)) AS YearMonthCounter
		,DENSE_RANK() OVER (ORDER BY CONCAT(DATEPART(YEAR, [Date]),DATENAME(QUARTER, [Date]))) AS YearQuarterCounter
		
	FROM
	(
		SELECT [Date] = DATEADD(DAY, rn - 1, @StartDate)
		FROM 
		(
		SELECT TOP (DATEDIFF(DAY, @StartDate, @CutoffDate)) 
			rn = ROW_NUMBER() OVER (ORDER BY s1.[object_id])
		FROM sys.all_objects AS s1
		CROSS JOIN sys.all_objects AS s2
		ORDER BY s1.[object_id]
		) AS x
	) AS y


END
GO
PRINT N'Creating [stage].[ABK_SE_SalesLedger]'
GO
CREATE TABLE [stage].[ABK_SE_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustomerID] [nvarchar] (50) NULL,
[InvoiceID] [nvarchar] (50) NULL,
[InvoDate] [date] NULL,
[DueDate] [date] NULL,
[LastPayment] [date] NULL,
[AmountSEK] [decimal] (18, 8) NULL,
[OutstandingAmountSEK] [decimal] (18, 8) NULL,
[Currency] [nvarchar] (50) NULL,
[ISOCode] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 8) NULL,
[AmountCur] [decimal] (18, 8) NULL,
[OutstandingAmountCur] [decimal] (18, 8) NULL,
[VatAmSEK] [decimal] (18, 8) NULL,
[VatAmCur] [decimal] (18, 8) NULL
)
GO
PRINT N'Creating [stage].[vABK_SE_SalesLedger]'
GO
CREATE VIEW [stage].[vABK_SE_SalesLedger] AS
	-- An invoice can have multiple SalesDueDate and SalesLastPaymentDate. We have for now chosen to pick max dates and sum of amounts, which works. But we have also temporarily chosen to pick max of ExchangeRate despite it not being correct. This is due to that all the troublesome invoices are in SEK (local currency)
	-- But in the future, this could become incorrect for some invoice /SM 2021-12-13
	--COMMENT EMPTY FIELDS 2022-12-21 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', InvoiceID ))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerID))))) AS CustomerID
	,CONCAT(Company, '#', TRIM(UPPER(CustomerID)), '#', TRIM(UPPER(InvoiceID)) ) AS SalesLedgerCode
	,PartitionKey

	,Company
	,TRIM(UPPER(CustomerID)) AS CustomerNum
	,TRIM(UPPER(InvoiceID)) AS SalesInvoiceNum
	,[InvoDate] AS SalesInvoiceDate
	,CONVERT(date, Min(DueDate)) AS SalesDueDate
	,CONVERT(date, MAX(LastPayment)) AS SalesLastPaymentDate
	,SUM([AmountCur]) AS InvoiceAmount
	,SUM([OutstandingAmountCur]) AS RemainingInvoiceAmount
	,CASE WHEN ISOCode IN ('SEK', 'NOK', 'DKK') THEN MAX(ExchangeRate)/100 ELSE MAX(ExchangeRate) END AS ExchangeRate
	,ISOCode AS Currency
	,SUM(VatAmCur) AS VATAmount
	--,'' AS VATCode
	--,'' AS PayToName
	--,'' AS PayToCity
	--,'' AS PayToContact
	--,'' AS PaymentTerms
	--,'' AS SLRes1
	--,'' AS SLRes2
	--,'' AS SLRes3
	--,NULL			AS PaidInvoiceAmount
	,'1900-01-01' AS AccountingDate
	--,NULL AS AgingPeriod
	--,NULL AS AgingSort
	--,NULL AS VATCodeDesc
	--,NULL AS LinkToOriginalInvoice
FROM 
	stage.ABK_SE_SalesLedger


	GROUP BY PartitionKey, Company, CustomerID, InvoiceID, [InvoDate], ISOCode	
HAVING SUM([AmountCur]) != 0  --added 2023-05-24 otherwise one duplication with invoicenum = 54018679 to two customers! one is amt = 0 /DZ
GO
PRINT N'Creating [stage].[NOM_SE_PurchaseInvoice]'
GO
CREATE TABLE [stage].[NOM_SE_PurchaseInvoice]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaseOrderType] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[PurchaseInvoiceLine] [nvarchar] (50) NULL,
[PurchaseInvoiceType] [nvarchar] (50) NULL,
[PurchaseInvoiceDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PurchaseInvoiceQty] [decimal] (18, 4) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[VATAmount] [decimal] (18, 4) NULL,
[CreditMemo] [nvarchar] (1) NULL,
[PurchaserName] [nvarchar] (100) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[PurchaseChannel] [nvarchar] (50) NULL,
[Comment] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[vNOM_SE_PurchaseInvoice]'
GO
CREATE VIEW [stage].[vNOM_SE_PurchaseInvoice] AS
--COMMENT EMPTY FIELD 2022-12-20 VA
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company,'#', TRIM(PurchaseOrderNum),'#', TRIM(PurchaseOrderLine),'#', TRIM(PurchaseOrderSubLine), '#', TRIM(PurchaseInvoiceNum), '#', TRIM(PurchaseInvoiceLine))))) AS PurchaseInvoiceID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(PurchaseInvoiceNum))))) AS PurchaseOrderID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierNum))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum))))) AS SupplierID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT(int, replace(PurchaseInvoiceDate,'-','')) AS PurchaseInvoiceDateID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#', TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum),'#',TRIM(PurchaseOrderNum))))) AS PurchaseLedgerID --match PurchaseLedgerID in [vSCM_FI_PurchaseLedger]
	,UPPER(CONCAT(Company, '#', TRIM(SupplierNum), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine) )) AS PurchaseOrderCode
	,UPPER(CONCAT(Company,'#',TRIM(PurchaseInvoiceNum), '#', TRIM(PurchaseInvoiceLine), '#', PartNum)) AS PurchaseInvoiceCode
	,UPPER(CONCAT(Company,'#',TRIM(PurchaseOrderNum))) AS PurchaseOrderNumCode
	,PartitionKey

	,UPPER(Company) AS Company
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
	,UPPER(TRIM(PurchaseOrderNum)) AS PurchaseOrderNum
	,UPPER(TRIM(PurchaseOrderLine)) AS PurchaseOrderLine
	,UPPER(TRIM(PurchaseOrderSubLine)) AS PurchaseOrderSubLine
	,PurchaseOrderType
	,UPPER(TRIM(PurchaseInvoiceNum)) AS PurchaseInvoiceNum
	,UPPER(TRIM(PurchaseInvoiceLine)) AS PurchaseInvoiceLine
	,PurchaseInvoiceType
	,PurchaseInvoiceDate
	,ActualDelivDate
	,PurchaseInvoiceQty
	,UoM
	,UnitPrice
	,DiscountPercent
	,DiscountAmount
	,TotalMiscChrg
	,VATAmount
	,IIF(TRIM(PurchaseInvoiceNum) = '174224', 10.64, ExchangeRate) AS ExchangeRate  --special case wrong rate
	,Currency
	,CreditMemo
	,PurchaserName
	,PurchaseChannel
	--,'' AS Comment
	--,'' AS PIRes1
	--,'' AS PIRes2
	--,'' AS PIRes3
	--,'' AS LineType
	--,'' AS OrderDelivLineNum
FROM stage.NOM_SE_PurchaseInvoice

GROUP BY
	PartitionKey, Company, PurchaseOrderNum, PurchaseInvoiceNum, SupplierNum, PartNum, PurchaseOrderLine, PurchaseOrderSubLine, PurchaseInvoiceQty, UnitPrice, WarehouseCode,PurchaserName, PurchaseInvoiceLine, PurchaseInvoiceType, PurchaseInvoiceDate, ActualDelivDate, TotalMiscChrg, CreditMemo, PurchaseOrderType,DiscountAmount,Currency,ExchangeRate, UoM, VATAmount, PurchaseChannel, DiscountPercent, DiscountAmount--, LastPaymentNum --, OrderType, [Site], OrderDelivLineNum, , DiscountPercent, PurchaserName, InvoiceLine, InvoiceType, InvoiceDate, ActualDeliveryDate, TotalMiscChrg, CreditMemo
GO
PRINT N'Creating [dw].[vALL_SalesPerson]'
GO
CREATE VIEW [dw].[vALL_SalesPerson]
AS
SELECT
	c.Company
	, c.SalesPersonCode
	, c.SalesPersonName
	, MAX(si.SalesPersonName) AS siSalesPerson
	, MAX(so.SalesPersonName) AS soSalesPerson
FROM
	dw.Customer c
	INNER JOIN dw.SalesInvoice si ON c.CustomerID = si.CustomerID AND c.SalesPersonName = si.SalesPersonName
	INNER JOIN dw.SalesOrder so ON c.CustomerID = so.CustomerID AND c.SalesPersonName = so.SalesPersonName
GROUP BY c.Company, c.SalesPersonCode, c.SalesPersonName
GO
PRINT N'Creating [dbo].[SalesBudget_Widni]'
GO
CREATE TABLE [dbo].[SalesBudget_Widni]
(
[Company] [nvarchar] (8) NULL,
[YearMonth] [date] NULL,
[Year] [nvarchar] (50) NULL,
[Month] [nvarchar] (50) NULL,
[BudgetSales] [decimal] (18, 4) NULL,
[BudgetProfit] [decimal] (18, 4) NULL,
[BudgetMargin] [decimal] (18, 4) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (1) NULL,
[CustomerGroup] [nvarchar] (1) NULL,
[ProductGroupKey] [nvarchar] (50) NULL,
[SalesPersonKey] [nvarchar] (1) NULL,
[CustomerKey] [nvarchar] (1) NULL
)
GO
PRINT N'Creating [stage].[vWID_Budget]'
GO

/****** Script for SelectTopNRows command from SSMS  ******/
CREATE VIEW [stage].[vWID_Budget] AS

SELECT 	
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#', [YearMonth], '#', TRIM([CustomerGroup]), '#', TRIM([ProductGroup]) )))) AS BudgetID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM([CustomerGroup]))))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([ProductGroup]))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#','')))) AS WarehouseID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#','')))) AS ProjectID
	,YEAR([YearMonth])*10000 + MONTH([YearMonth])*100 + DAY([YearMonth])	AS BudgetPeriodDateID
	,CONVERT(varchar(50), getdate(), 23) AS PartitionKey --Temporary added

	,NULL AS [BudgetType]
      ,NULL AS [BudgetName]
      ,NULL AS[BudgetDescription]
      ,[Company]
      ,LEFT(CAST([YearMonth] AS varchar(50)), 6)	AS	[BudgetPeriod]
      ,[YearMonth]	AS [BudgetPeriodDate]
      ,'Monthly'	AS [PeriodType]
      ,CONCAT('BUD','-' + CustomerGroup) AS [CustomerNum]
      ,[CustomerGroup]
      ,CONCAT('BUD','-' + ProductGroup) AS [PartNum]
      ,[ProductGroup]
      ,NULL AS [SalesPersonCode]
      ,[SalesPersonName]
      ,[BudgetSales]
      ,[BudgetSales] - BudgetProfit AS [BudgetCost]
      ,'EUR' AS [Currency]
      ,BudgetProfit AS [GrossProfitInvoiced]
      ,BudgetProfit/[BudgetSales] AS [GrossMarginInvoicedPercent]
      ,NULL AS [BudgetFinance]
      ,NULL AS [WarehouseCode]
      ,NULL AS [CostBearerNum]
      ,NULL AS [CostUnitNum]
      ,NULL AS [ProjectNum]
      ,NULL AS [AccountNum]
      ,NULL AS [AccountGroupNum]
      ,NULL AS [BRes1]
      ,NULL AS [BRes2]
      ,NULL AS [BRes3]
  FROM [dbo].[SalesBudget_Widni]
GO
PRINT N'Creating [dm_DS].[fctSalesInvoice]'
GO


CREATE VIEW [dm_DS].[fctSalesInvoice] AS

SELECT 
 si.[SalesInvoiceID]
,si.[SalesOrderID]
,si.[SalesOrderNumID]
,si.[CustomerID]
,si.[CompanyID]
,si.[PartID]
,si.[WarehouseID]
,si.[SalesPersonNameID]
,si.[DepartmentID]
,si.[Company]
,si.[SalesInvoiceCode]
,si.[SalesInvoiceDateID]
,si.[ProjectID]
,si.[SalesPersonName]
,si.[CustomerNum]
,si.[PartNum]
,si.[PartType]
,si.[SalesOrderNum]
,si.[SalesOrderLine]
,si.[SalesOrderSubLine]
,si.[SalesOrderType]
,si.[SalesInvoiceNum]
,si.[SalesInvoiceLine]
,si.[SalesInvoiceType]
,si.[SalesInvoiceDate]
,si.[ActualDelivDate]
,si.[SalesInvoiceQty]
,si.[UoM]
,si.[UnitPrice]
,si.[UnitCost]
,si.[DiscountPercent]
,si.[DiscountAmount]
,si.[TotalMiscChrg]
,si.[Currency]
,si.[ExchangeRate]
,si.[VATAmount]
,si.[CreditMemo]
,si.[Department]
,si.[ProjectNum]
,si.[WarehouseCode]
,si.[CostBearerNum]
,si.[CostUnitNum]
,si.[ReturnComment]
,si.[ReturnNum]
,si.[OrderHandler]
,si.[SalesChannel]
,si.[NeedbyDate]
,si.[ExpDelivDate]
,si.[SalesOrderCode]
,si.[SalesOrderDateID]
,si.[SalesOrderDate]
,si.[ConfirmedDelivDate]
,si.[PartStatus]
,si.[AxInterSalesChannel]
,si.[DueDate]
,si.[LastPaymentDate]
,si.[SalesInvoiceStatus]
,si.[CashDiscountOffered]
,si.[CashDiscountUsed]
,si.[IsUpdatingStock]
,si.[SIRes1]
,si.[SIRes2]
,si.[SIRes3]
,si.[SIRes4]
,si.[SIRes5]
,si.[SIRes6]
FROM dm.FactSalesInvoice si
LEFT JOIN dbo.Company com ON si.Company = com.Company
WHERE com.BusinessArea = 'Driveline Solutions' AND com.[Status] = 'Active' 
--WHERE Company  in ('MIT', 'ATZ', 'TRANSAUT', 'IPLIOWTR')  -- DS basket
GO
PRINT N'Creating [stage].[CYE_ES_Customer]'
GO
CREATE TABLE [stage].[CYE_ES_Customer]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (8) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[CustomerName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (50) NULL,
[Email] [nvarchar] (200) NULL,
[CustomerScore] [nchar] (10) NULL,
[City] [nvarchar] (50) NULL,
[ZIP] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNr] [nvarchar] (50) NULL,
[CustomerType] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vCYE_ES_Customer]'
GO
CREATE view [stage].[vCYE_ES_Customer] AS
--COMMENT EMPTY FIELDS // ADD TRIM() INTO CustomerID 23-01-03 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
	--CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustomerNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,UPPER(CONCAT([Company], '#', TRIM([CustomerNum]))) AS CustomerCode
	,PartitionKey

	,UPPER([Company]) AS Company
	,UPPER(TRIM(CustomerNum)) AS CustomerNum
	--,'' AS MainCustomerName
	,CustomerName
	,[AddressLine1]
	,[AddressLine2]
	,[AddressLine3]
	,TelephoneNumber1 AS TelephoneNum1
	--,'' AS TelephoneNum2
	,Email
	,[ZIP] AS ZipCode
	,IIF([City]= ' ', null, [City]) AS [City]
	,IIF([State]= ' ', null, [State]) AS [State]
	,[District]	AS SalesDistrict
	,CountryCode
	,CountryName
	--,'' AS Division
	--,'' AS CustomerIndustry
	--,'' AS CustomerSubIndustry
	,CONCAT(TRIM(AddressLine1), ' ', TRIM(AddressLine2)) AS AddressLine
	,CONCAT(TRIM(CountryName), ', ', TRIM([ZIP]), ', ', TRIM(City), ', ', TRIM(AddressLine1)) AS FullAddressLine
	,CustomerGroup
	,CustomerSubGroup
	,[SalesRepCode]	AS SalesPersonCode
	,SalesRepCode AS SalesPersonName
	--,'' AS SalesPersonResponsible
	,TRIM([VATRegNr]) AS [VATNum]
	--,'' AS OrganizationNum
	--,'' AS AccountNum 
	,[InternalExternal]
	,CustomerScore --[ABCCode] AS 
	--,'' AS CustomerType
FROM [stage].[CYE_ES_Customer]
GO
PRINT N'Creating [stage].[AXL_CZ_Customer]'
GO
CREATE TABLE [stage].[AXL_CZ_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[MainCustomerName] [nvarchar] (100) NULL,
[CustomerName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[AddressLine] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (20) NULL,
[TelephoneNumber2] [nvarchar] (20) NULL,
[Email] [nvarchar] (100) NULL,
[City] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[Division] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (50) NULL,
[CustomerIndustry] [nvarchar] (50) NULL,
[CustomerSubIndustry] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNo] [nvarchar] (50) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[CustomerABC] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[SalesPersonResponsible] [nvarchar] (50) NULL,
[CustomerType] [nvarchar] (50) NULL,
[Res1] [nvarchar] (50) NULL,
[Res2] [nvarchar] (50) NULL,
[Res3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXL_CZ_Customer]'
GO


CREATE VIEW [stage].[vAXL_CZ_Customer] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustomerNum))) )) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,UPPER(CONCAT([Company], '#', TRIM([CustomerNum]))) AS CustomerCode
	,PartitionKey

	,UPPER(Company) AS Company
	,UPPER(TRIM(CustomerNum)) AS [CustomerNum]
	,TRIM(MainCustomerName) AS MainCustomerName
	,TRIM(CustomerName) AS  [CustomerName]
	,TRIM([AddressLine1]) AS [AddressLine1]
	,TRIM([AddressLine2]) AS [AddressLine2]
	,TRIM([AddressLine3]) AS [AddressLine3]
	,TRIM([TelephoneNumber1]) AS [TelephoneNum1]
	,TRIM([TelephoneNumber2]) AS [TelephoneNum2]
	,TRIM([Email]) AS [Email]
	,TRIM([ZipCode]) AS [ZipCode]
	,TRIM([City]) AS [City]
	,TRIM([State]) AS [State]
	,TRIM([District]) AS [SalesDistrict]
	,TRIM(con.CountryName) AS CountryName
	,TRIM([ISOAlpha2Code]) AS [CountryCode]
	,TRIM([Division]) AS [Division]
	,TRIM([CustomerIndustry]) AS [CustomerIndustry]
	,TRIM([CustomerSubIndustry]) AS [CustomerSubIndustry]
	,TRIM([AddressLine3]) AS [AddressLine]
	,CONCAT(TRIM(con.CountryName), + ',  ' + TRIM([City]), + ',  ' + TRIM([ZipCode]), + ',  ' + TRIM(addressline3)) AS [FullAddressLine]
	,TRIM(CustomerGroup) AS [CustomerGroup]
	,TRIM(CustomerGroup) AS [CustomerSubGroup]
	,TRIM([SalesRepCode]) AS [SalesPersonCode]
	,TRIM(SalesPersonName) AS [SalesPersonName]
	,TRIM([SalesPersonResponsible]) AS [SalesPersonResponsible]
	,TRIM([VATRegNo]) AS [VATNum]
	,TRIM([AccountString]) AS [AccountNum]
	,TRIM([InternalExternal]) AS [InternalExternal]
	,TRIM([CustomerABC]) AS [CustomerScore]
	,TRIM([CustomerType]) AS [CustomerType]
FROM [stage].[AXL_CZ_Customer] com
	LEFT JOIN dbo.Country con ON com.CountryName = con.[ISOAlpha2Code]

--GROUP BY
--	PartitionKey, Company, CustomerNum, CustomerName, MainCustomerName, [AddressLine1], [AddressLine2], [AddressLine3], [TelephoneNumber1], [TelephoneNumber2], [Email], [ZipCode], [City], [State], [District], [CountryName], [Division], [CustomerIndustry], [CustomerSubIndustry], CustomerGroup, [SalesRepCode], SalesPersonName, [SalesPersonResponsible], [VATRegNo], [AccountString], [InternalExternal], [CustomerABC], [CustomerType]

--	Stagetablename in ('AXL_AU_Customer', 'AXL_DC_Customer', 'AXL_HU_Customer', 'AXL_IE_Customer', 'AXL_PL_Customer', 'AXL_PT_Customer', 'AXL_UK_Customer')
GO
PRINT N'Creating [stage].[AXL_NO_SalesLedger]'
GO
CREATE TABLE [stage].[AXL_NO_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceAmount] [decimal] (18, 4) NULL,
[RemainAmount] [decimal] (18, 4) NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vAXL_NO_SalesLedger]'
GO
CREATE VIEW [stage].[vAXL_NO_SalesLedger] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(sl.Company, '#', TRIM(sl.CustNum), '#', TRIM(sl.InvoiceNum))))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(sl.Company))) AS CompanyID
	,UPPER(CONCAT(sl.Company, '#', TRIM(sl.CustNum), '#', TRIM(sl.InvoiceNum))) AS SalesLedgerCode
	,sl.PartitionKey

	,UPPER(sl.Company) AS Company
	,UPPER(TRIM(sl.CustNum)) AS CustomerNum
	,TRIM(sl.InvoiceNum) AS [SalesInvoiceNum]
	,IIF(so.InvoiceDate = '' OR so.InvoiceDate IS NULL, '1900-01-01', so.InvoiceDate) AS [SalesInvoiceDate] --
	,CONVERT(date, DueDate) AS SalesDueDate
	,CONVERT(date, LastPaymentDate) AS LastPaymentDate
	,[InvoiceAmount]
	,[RemainAmount] AS [RemainingInvoiceAmount]
	,NULL AS CashDiscOffered
	,NULL AS CashDiscUsed
	,NULL AS [ExchangeRate]
	,NULL AS [Currency]
	,NULL AS [VATAmount]
	,NULL AS [VATCode]
	,NULL AS [PayToName]
	,NULL AS [PayToCity]
	,NULL AS [PayToContact]
	,NULL AS [PaymentTerms]
	,sl.Res1 AS SLRes1
	,sl.Res2 AS SLRes2
	,sl.Res3 AS SLRes3
FROM stage.AXL_NO_SalesLedger sl
	LEFT JOIN stage.AXL_CZ_SOLine so ON TRIM(sl.InvoiceNum) = TRIM(so.InvoiceNum)
WHERE DueDate > '2015-01-01'
GROUP BY
	sl.PartitionKey, sl.Company, sl.CustNum, sl.InvoiceNum, sl.Res2, sl.Res1, sl.Res3, sl.[InvoiceAmount], sl.[RemainAmount], so.InvoiceDate, DueDate, LastPaymentDate
GO
PRINT N'Creating [stage].[OCS_SE_Account]'
GO
CREATE TABLE [stage].[OCS_SE_Account]
(
[PartitionKey] [nvarchar] (50) NULL,
[Company] [nvarchar] (50) NULL,
[AccountNum] [nvarchar] (50) NULL,
[AccountName] [nvarchar] (200) NULL,
[AccountGroupNum] [nvarchar] (50) NULL,
[AccountGroup] [nvarchar] (50) NULL,
[Statement] [nvarchar] (50) NULL,
[StatementNum] [nvarchar] (50) NULL,
[AccountType2Num] [nvarchar] (50) NULL,
[AccountType2] [nvarchar] (50) NULL,
[AccountIsActive] [nvarchar] (50) NULL,
[AccountIsBalanceAccount] [nvarchar] (50) NULL,
[Revenue] [nvarchar] (50) NULL,
[Costs] [nvarchar] (50) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vOCS_SE_Account]'
GO
CREATE VIEW [stage].[vOCS_SE_Account] AS

SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company, '#', [AccountNum]))) AS AccountID,
	CONCAT(Company, '#', [AccountNum], '#', [AccountName]) AS AccountCode,
	CONVERT([binary](32), HASHBYTES('SHA2_256',Company)) AS CompanyID,
	PartitionKey,
	Company,
	[AccountNum],
	[AccountName],
	[AccountType2Num] AS [AccountName2],
	CASE WHEN TRIM([AccountType2]) = 'Material'					THEN '1. Material'
	     WHEN TRIM([AccountType2]) = 'Design & PL'				THEN '2. Design & PL'
	     WHEN TRIM([AccountType2]) = 'Automation'				THEN '3. Automation'
		 WHEN TRIM([AccountType2]) = 'Installation'				THEN '4. Installation'
		 WHEN TRIM([AccountType2]) = 'Frakter & Emballage'		THEN '5. Frakter & Emballage'
		 WHEN TRIM([AccountType2]) = 'Övrigt'			        THEN '6. Övrigt'
		 ELSE [AccountType2] END AS AccountType3, --added case clauses on 2023-08-28 SB at OCS request to be able to order them
	CONCAT(AccountNum,' - ',AccountName) AS Account, -- added 2023-03-22 SB
	CONVERT(nvarchar(50), IIF([AccountGroupNum] = '', '9999', REPLACE([AccountGroupNum],'X',''))) as [AccountGroupNum],
	CONVERT(nvarchar(50), IIF([AccountGroupNum] = '', '*Saknar kategori*',[AccountGroup])) as AccountGroupName,
	concat(IIF([AccountGroupNum] = '', '9999', REPLACE([AccountGroupNum],'X','')) ,' - ',IIF([AccountGroupNum] = '', '*Saknar kategori*',[AccountGroup])) as AccountGroup, --. changed  2023-04-04 SB
	CASE WHEN TRIM([AccountGroup]) = 'Balanserade_utgifter'					THEN 1
	     WHEN TRIM([AccountGroup]) = 'Patent'								THEN 2
	     WHEN TRIM([AccountGroup]) = 'Byggnader_o_mark'						THEN 3
		 WHEN TRIM([AccountGroup]) = 'Maskiner_o_inventarier'				THEN 4
		 WHEN TRIM([AccountGroup]) = 'Andelar_i_koncernföretag'				THEN 5
		 WHEN TRIM([AccountGroup]) = 'Andelar_i_intresseföretag'			THEN 6
		 WHEN TRIM([AccountGroup]) = 'Uppskjuten_skattefordran'				THEN 7
		 WHEN TRIM([AccountGroup]) = 'Lager_av_råvaror'						THEN 8
		 WHEN TRIM([AccountGroup]) = 'Lager_av_halvfabrikat'				THEN 9
		 WHEN TRIM([AccountGroup]) = 'Påg_arbete_för_annans_räkning'		THEN 10
		 WHEN TRIM([AccountGroup]) = 'Förskott_till_leverantörer'			THEN 11
		 WHEN TRIM([AccountGroup]) = 'Kundfordringar'						THEN 12
		 WHEN TRIM([AccountGroup]) = 'Övriga_kortfristiga_fordringar'		THEN 13
		 WHEN TRIM([AccountGroup]) = 'Förutbetalda_kostn_uppl_intäkter'		THEN 14
		 WHEN TRIM([AccountGroup]) = 'Kassa_och_bank'						THEN 15
		 WHEN TRIM([AccountGroup]) = 'Bundet_eget_kapital'					THEN 16
		 WHEN TRIM([AccountGroup]) = 'Fritt_eget_kapital'					THEN 17
		 WHEN TRIM([AccountGroup]) = 'Obeskattade_reserver'					THEN 18
		 WHEN TRIM([AccountGroup]) = 'Avsättningar'							THEN 19
		 WHEN TRIM([AccountGroup]) = 'Skulder_till_kreditinstitut'			THEN 20
		 WHEN TRIM([AccountGroup]) = 'Leverantörsskulder'					THEN 21
		 WHEN TRIM([AccountGroup]) = 'Skatteskulder'						THEN 22
		 WHEN TRIM([AccountGroup]) = 'Moms'									THEN 23
		 WHEN TRIM([AccountGroup]) = 'Personalens_skatter'					THEN 24
		 WHEN TRIM([AccountGroup]) = 'Personalens_övr_skulder'				THEN 25
		 WHEN TRIM([AccountGroup]) = 'Övr_kortfristiga_skulder'				THEN 26
		 WHEN TRIM([AccountGroup]) = 'Uppl_kostn_o_förutbet_int'			THEN 27
		 WHEN TRIM([AccountGroup]) = 'Prel_kostn_attest'					THEN 28 -- End of Balance Statement
		 WHEN TRIM([AccountGroup]) = 'Huvudintäkter'					    THEN 29 -- Start of Income Statement
		 WHEN TRIM([AccountGroup]) = 'Rörelsens_sidointäkter'			    THEN 30
		 WHEN TRIM([AccountGroup]) = 'Intäktskorrigeringar'					THEN 31
		 WHEN TRIM([AccountGroup]) = 'Aktiverat_arbete'					    THEN 32
		 WHEN TRIM([AccountGroup]) = 'Övriga_rörelseintäkter'				THEN 33
		 WHEN TRIM([AccountGroup]) = 'Inköp_varor_o_material'				THEN 34 
		 WHEN TRIM([AccountGroup]) = 'Legoarbeten'					        THEN 35
		 WHEN TRIM([AccountGroup]) = 'Reduktion_av_inköpspriser'			THEN 36
		 WHEN TRIM([AccountGroup]) = 'Förändring_lager'					    THEN 37
		 WHEN TRIM([AccountGroup]) = 'Frakter_o_transporter'				THEN 38
		 WHEN TRIM([AccountGroup]) = 'Lokalkostnader'					    THEN 39
		 WHEN TRIM([AccountGroup]) = 'Fastighetskostnader'					THEN 40
		 WHEN TRIM([AccountGroup]) = 'Hyra_av_anläggningstillgångar'		THEN 41
		 WHEN TRIM([AccountGroup]) = 'Förbrukningsinv_o_material'			THEN 42
		 WHEN TRIM([AccountGroup]) = 'Reparation_o_underhåll'				THEN 43
		 WHEN TRIM([AccountGroup]) = 'Kostnad_transportmedel'				THEN 44
		 WHEN TRIM([AccountGroup]) = 'Resekostnader'					    THEN 45
		 WHEN TRIM([AccountGroup]) = 'Reklam_o_pr'					        THEN 46 
		 WHEN TRIM([AccountGroup]) = 'Övr_försäljningskostnader'			THEN 47
		 WHEN TRIM([AccountGroup]) = 'Kontorsmaterial_o_trycksaker'			THEN 48
		 WHEN TRIM([AccountGroup]) = 'Tele_o_post'					        THEN 49
		 WHEN TRIM([AccountGroup]) = 'Företagsförsäkring'					THEN 50
		 WHEN TRIM([AccountGroup]) = 'Förvaltningskostnader'				THEN 51
		 WHEN TRIM([AccountGroup]) = 'Övr_externa_tjänster'					THEN 52
		 WHEN TRIM([AccountGroup]) = 'Inhyrd_personal'					    THEN 53
		 WHEN TRIM([AccountGroup]) = 'Övr_externa_kostnader'				THEN 54
		 WHEN TRIM([AccountGroup]) = 'Förvaltningskostnader'				THEN 55
		 WHEN TRIM([AccountGroup]) = 'Löner_kollektivanställda'				THEN 56
		 WHEN TRIM([AccountGroup]) = 'Löner_tjänstemän_företagsledare'		THEN 57
		 WHEN TRIM([AccountGroup]) = 'Kostnadsersättningar_o_förmåner'		THEN 58
		 WHEN TRIM([AccountGroup]) = 'Pensionskostnader'					THEN 59
		 WHEN TRIM([AccountGroup]) = 'Sociala_avgifter'					    THEN 60
		 WHEN TRIM([AccountGroup]) = 'Övriga_personalkostnader'				THEN 61
		 WHEN TRIM([AccountGroup]) = 'Nedskrivning_o_återför_nedskr'		THEN 62
		 WHEN TRIM([AccountGroup]) = 'Övriga_rörelsekostnader'				THEN 63
		 WHEN TRIM([AccountGroup]) = 'Avskrivning_enl_plan'					THEN 64
		 WHEN TRIM([AccountGroup]) = 'Resultat_fr_andelar_koncern'			THEN 65
		 WHEN TRIM([AccountGroup]) = 'Övriga_ränteintäkter'					THEN 66
		 WHEN TRIM([AccountGroup]) = 'Räntekostnader'					    THEN 67
		 WHEN TRIM([AccountGroup]) = 'Bokslutsdispositioner'				THEN 68
		 WHEN TRIM([AccountGroup]) = 'Skatt_på_årets_resultat'				THEN 69 
		 ELSE 70 END AS AccountGroupOrder,
	CONVERT(nvarchar(50), 
	CASE WHEN LEFT([AccountNum],1) in ('1') OR LEFT([AccountNum],4) in ('2330','2420') THEN 'Tillgångar'
	     WHEN LEFT([AccountNum],1) in ('2') THEN 'Eget kapital och skulder'
		 WHEN TRIM([AccountGroup]) = 'Övriga_rörelseintäkter' THEN 'Övriga rörelseintäkter'
		 WHEN LEFT([AccountNum],1) in ('3') THEN 'Rörelsens inkomster/intäkter'
		 WHEN LEFT([AccountNum],1) in ('4') OR LEFT([AccountNum],2) in ('57')  THEN 'Kostnader för varor, material och vissa köpta tjänster'
		 WHEN LEFT([AccountNum],1) in ('5','6') THEN 'Övriga externa rörelsekostnader'
		 WHEN LEFT([AccountGroupNum],3) in ('781') THEN 'Avskrivningar'
		 WHEN LEFT([AccountNum],1) in ('7') THEN 'Kostnader för personal, m.m'
		 WHEN LEFT([AccountNum],1) in ('8') THEN 'Finansiella och andra inkomster/intäkter och kostnader'
		 WHEN LEFT([AccountNum],1) in ('9') THEN 'Statistiska/interna konton'
		 ELSE '*Saknar kategori*'
		 END) AS [Statement],
	CONVERT(nvarchar(50), CASE WHEN LEFT([AccountNum],1) in ('1') OR LEFT([AccountNum],4) in ('2330','2420') THEN '1'
	     WHEN LEFT([AccountNum],1) in ('2') THEN '2'
		 WHEN TRIM([AccountGroup]) = 'Övriga_rörelseintäkter' THEN '4' --added 2023-05-31
		 WHEN LEFT([AccountNum],1) in ('3') THEN '3'
		 WHEN LEFT([AccountNum],1) in ('4')  OR LEFT([AccountNum],2) in ('57') THEN '5'
         WHEN LEFT([AccountNum],1) in ('5','6') THEN '6'
		 WHEN LEFT([AccountNum],1) in ('7') THEN '7'
		 WHEN LEFT([AccountNum],1) in ('8') THEN '8'
		 ELSE '9'
		 END) AS [StatementNum],
	AccountIsActive AS AccountStatus,
	IIF( LEFT([AccountNum],1) in ('1','2'),'1','0') AS BalanceAccount,
	Revenue,
	Costs,
	IIF(LEFT([AccountNum],1) = '1','1','0') AS Assets,
	IIF(substring([AccountNum],1,3) = '102', '1', '0') AS Amortization,
	IIF(LEFT([AccountNum],1) = '2','1','0') AS LiabilitiesAndEquity,
	IIF(substring([AccountNum],1,3)  between '140' AND '199', '1', '0') AS CurrentAssets,
	IIF(substring([AccountNum],1,3) between '240' AND '299', '1', '0') AS CurrentLiabilities,
	IIF(substring([AccountNum],1,2) BETWEEN '78' AND '79', '1', '0') AS Deprecation, --this is spelled wrong?
	IIF(substring([AccountNum],1,2) BETWEEN '20' AND '21', '1', '0') AS Equity,
	IIF(substring([AccountNum],1,2) = '15', '1', '0') AS AccountReceivables,
	IIF(substring([AccountNum],1,2) = '19', '1', '0') AS CashAndEquivalents,
	IIF([AccountNum] between '8200' AND '8400', '1', '0') AS Interest,
	IIF(substring([AccountNum],1,2) BETWEEN '22' AND '29', '1', '0') AS Liability,
	IIF([AccountNum] between '8900' AND '8940', '1', '0') AS Tax,
	IIF(TRIM([AccountGroupNum]) = '401X', '1', '0') AS Materials, 		
	IIF([Statement] = 'Expenses', '1', '0') AS Expenses,
	CASE WHEN LEFT([AccountNum],1) in ('1','2') then 'B' -- Balance Accounts
	     WHEN LEFT([AccountNum],1) IN ('3','4','5','6','7','8') THEN 'R' --Income Statement Accounts 
	     WHEN LEFT([AccountNum],1) = ('9') then 'U' -- Statistical Accounts
		 ELSE '*Error*' END AS AccountType, -- added 2023-03-15 SB
	CASE WHEN [AccountNum] = '2420'                         THEN 'Förskott'
	     WHEN LEFT([AccountNum],1) = ('1')				    THEN 'Tillgångar'
		 WHEN LEFT([AccountNum],1) = ('2')					THEN 'Eget kapital och skulder'
	     WHEN LEFT([AccountNum],1) = ('3')					THEN 'Intäkter'
		 WHEN LEFT([AccountNum],1) IN ('4','5','6','7','8') THEN 'Kostnader'
	     WHEN LEFT([AccountNum],1) = ('9')					THEN '9-konton' 
		 ELSE '*Error*' END AS AccountType2, -- added 2023-05-08 SB
	CreatedTimeStamp AS AccRes1,
	ModifiedTimeStamp AS AccRes2
	
FROM stage.OCS_SE_Account
GO
PRINT N'Creating [stage].[SVE_SE_StockTransactionOB20230621]'
GO
CREATE TABLE [stage].[SVE_SE_StockTransactionOB20230621]
(
[Company] [nvarchar] (8) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[StockBalance] [decimal] (18, 4) NULL,
[StockValue] [decimal] (18, 4) NULL,
[SalesRemainingQty] [decimal] (18, 4) NULL,
[AvgCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (10) NULL,
[ExchangeRate] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[SVE_SE_StockTransaction]'
GO
CREATE TABLE [stage].[SVE_SE_StockTransaction]
(
[PartitionKey] [nvarchar] (50) NULL,
[Company] [nvarchar] (50) NULL,
[IndexKey] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[TransactionCode] [nvarchar] (50) NULL,
[TransactionCodeDescription] [nvarchar] (50) NULL,
[IsInternalTransaction] [nvarchar] (50) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[SalesOrderNum] [nvarchar] (50) NULL,
[SalesOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[SalesInvoiceNum] [nvarchar] (50) NULL,
[SalesInvoiceLine] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[PurchaseInvoiceLine] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[BinNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[TransactionDate] [date] NULL,
[TransactionTime] [nvarchar] (50) NULL,
[TransactionQty] [decimal] (18, 4) NULL,
[TransactionValue] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[Reference] [nvarchar] (50) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL,
[IsActiveRecord] [nvarchar] (50) NULL,
[PartType] [nvarchar] (50) NULL,
[Sign] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vSVE_SE_StockTransaction]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vSVE_SE_StockTransaction] AS 

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM(IndexKey), '#', TRIM([WarehouseCode]), '#', TRIM([PartNum]), '#', TRIM(TransactionCode), '#', TRIM(CustomerNum), '#', TRIM(SalesOrderNum), '#', TRIM(SalesOrderLine)
	, '#', TRIM(SupplierNum), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(PurchaseOrderSubLine), '#', TRIM(PurchaseInvoiceNum), '#', TransactionDate, '#', TransactionTime, '#', TransactionQty, '#', TransactionValue)))) AS StockTransactionID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Company])))) AS CompanyID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([PartNum]))))) AS PartID
 	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,IIF(TransactionCode = '1', CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM(SalesOrderNum))))), NULL) AS SalesOrderNumID
	,IIF(TransactionCode = '6', CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM(PurchaseOrderNum))))), NULL) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM(SalesInvoiceNum))))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM(PurchaseInvoiceNum))))) AS PurchaseInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM(CustomerNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM(SupplierNum))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Currency])))) AS CurrencyID
	,[PartitionKey]

    ,IndexKey
    ,UPPER(TRIM([Company])) AS Company -- 
	,UPPER(TRIM([WarehouseCode])) AS WarehouseCode
    ,UPPER(TRIM([PartNum])) AS PartNum
	,TRIM(TransactionCode) AS TransactionCode
	,TRIM(TransactionCodeDescription) AS TransactionDescription
	,TRIM(CustomerNum) AS CustomerNum
	,TRIM(SupplierNum) AS SupplierNum
	,TRIM(SalesOrderNum) AS SalesOrderNum
	,TRIM(SalesOrderLine) AS SalesOrderLine
	,TRIM(PurchaseOrderNum) AS PurchaseOrderNum
	,TRIM(PurchaseOrderLine) AS PurchaseOrderLine
	,TRIM(PurchaseOrderSubLine) AS PurchaseOrderSubLine
    ,TRIM(SalesInvoiceNum) AS SalesInvoiceNum
	,TRIM(SalesInvoiceLine) AS SalesInvoiceLine
	,TRIM(PurchaseInvoiceNum) AS PurchaseInvoiceNum
	,TRIM(PurchaseInvoiceLine) AS PurchaseInvoiceLine
    ,TRIM(BinNum) AS BinNum
    ,TRIM(BatchNum) AS BatchNum
	,CONVERT(date, TransactionDate) AS TransactionDate 
	,LEFT(TransactionTime, 8) AS TransactionTime
	,CASE WHEN TRIM(TransactionCode) = '3' THEN (TransactionQty) --20230810 deleted ABS
		WHEN TRIM(TransactionCode) = '4' THEN 1*(TransactionQty) --20230811 deleted ABS
		ELSE TransactionQty END AS TransactionQty
	,CASE WHEN TRIM(TransactionCode) = '3' THEN (TransactionValue) --20230810 deleted ABS
		WHEN TRIM(TransactionCode) = '4' THEN 1*(TransactionValue) --20230811 deleted ABS
		ELSE (TransactionValue) END AS TransactionValue
	,IIF((TransactionQty) = 0 OR (TransactionQty) IS NULL, 0, (TransactionValue)/(TransactionQty)) AS [CostPrice] 
	--,NULL AS SalesUnitPrice 
	,TRIM(Currency) AS Currency
	,ExchangeRate
	,CASE WHEN TRIM(TransactionCode) in ('3', '4') THEN '0'
		WHEN TRIM(TransactionCode) = 'OB' AND transactionqty = 0 THEN '0'
		ELSE '1' END AS IsInternalTransaction
	,CASE WHEN TRIM(TransactionCode) in ('3', '4') THEN 'External'
		WHEN TRIM(TransactionCode) = 'OB' AND transactionqty != 0 THEN 'External'
		ELSE 'Internal' END AS InternalExternal
	,TRIM([Reference]) AS [Reference]
	,CONCAT(TransactionDate, TransactionTime) AS STRes1
	,TRIM(PartType) AS STRes2
	,'' AS STRes3
FROM 
	[stage].[SVE_SE_StockTransaction]
WHERE CONVERT(date, TransactionDate) >= '2023-06-21' AND (PartType != 'LA' or [Sign] != '2')--and LEFT(UPPER(TRIM([PartNum])), 3) != 'XXX'-- The openingbalace is on '2018-12-31'
--WHERE (TRIM(TransactionCodeDescription) = 'RMA' and SalesOrderNum != '') OR (TRIM(TransactionCodeDescription) = 'Internal Adjustment') OR (TransactionCodeDescription = 'Incoming' and PurchaseInvoiceNum != '')
GROUP BY [PartitionKey], IndexKey, Company, WarehouseCode, PartNum, TransactionCode, TransactionCodeDescription, CustomerNum, SupplierNum, SalesOrderNum, SalesOrderLine, PurchaseOrderNum, PurchaseOrderLine, PurchaseOrderSubLine
	, SalesInvoiceNum, SalesInvoiceLine, PurchaseInvoiceNum, PurchaseInvoiceLine, BinNum, BatchNum, TransactionDate, TransactionTime, Currency, ExchangeRate, IsInternalTransaction, Reference, [Sign], TransactionQty, TransactionValue, PartType

UNION ALL
-- the "Opening Balance" from a snapshot of dw.StockBalance on 20230620 ending day
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]), '#', TRIM([PartNum]), '#', TRIM(SupplierNum))))) AS StockTransactionID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Company])))) AS CompanyID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([PartNum]))))) AS PartID
 	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', '')))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', '')))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', '')))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', '')))) AS PurchaseInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', '')))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM(SupplierNum))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', 'SEK')) AS CurrencyID
	,'2023-06-22' AS [PartitionKey]

    ,'' AS IndexKey
    ,UPPER(TRIM([Company])) AS Company -- 
	,UPPER(TRIM([WarehouseCode])) AS WarehouseCode
    ,UPPER(TRIM([PartNum])) AS PartNum
	,'OB' AS TransactionCode
	,'Opening Balance' AS TransactionDescription
	,'' AS CustomerNum
	,TRIM(SupplierNum) AS SupplierNum
	,'' AS SalesOrderNum
	,'' AS SalesOrderLine
	,'' AS PurchaseOrderNum
	,'' AS PurchaseOrderLine
	,'' AS PurchaseOrderSubLine
    ,'' AS SalesInvoiceNum
	,'' AS SalesInvoiceLine
	,'' AS PurchaseInvoiceNum
	,'' AS PurchaseInvoiceLine
    ,'' AS BinNum
    ,'' AS BatchNum
	,CONVERT(date, '2023-06-21') AS TransactionDate 
	,'00:00' AS TransactionTime
	,SUM(StockBalance) AS TransactionQty -- from different bin
	,SUM(StockValue) AS TransactionValue -- from different bin
	,IIF((SUM(StockBalance)) = 0 OR (SUM(StockBalance)) IS NULL, 0, SUM(StockValue)/SUM(StockBalance)) AS [CostPrice] 
	,'SEK' AS Currency
	,1 AS ExchangeRate
	,'0' AS IsInternalTransaction
	,'External' AS InternalExternal
	,'Using 20230621 ending dw.StockBalance data' AS [Reference]
	,'' AS STRes1
	,'' AS STRes2
	,'' AS STRes3

FROM [stage].[SVE_SE_StockTransactionOB20230621]

GROUP BY [Company], [WarehouseCode], [PartNum], SupplierNum
GO
PRINT N'Creating [dm_DS].[fctStockTransaction]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE VIEW [dm_DS].[fctStockTransaction] AS

SELECT 

 st.[StockTransactionID]
,st.[CompanyID]
,st.[PartID]
,st.[WarehouseID]
,st.[CurrencyID]
,st.[TransactionDateID]
,st.[SupplierID]
,st.[PurchaseOrderNumID]
,st.[PurchaseInvoiceID]
,st.[CustomerID]
,st.[SalesOrderNumID]
,st.[SalesInvoiceID]
,st.[CurrencyMonthKey]
,st.[Company]
,st.[WarehouseCode]
,st.[TransactionCode]
,st.[TransactionDescription]
,st.[IssuerReceiverNum]
,st.[IssuerReceiverName]
,st.[OrderNum]
,st.[OrderLine]
,st.[InvoiceNum]
,st.[InvoiceLine]
,st.[PartNum]
,st.[BinNum]
,st.[BatchNum]
,st.[TransactionDate]
,st.[TransactionTime]
,st.[TransactionQty]
,st.[TransactionValue]
,st.[CostPrice]
,st.[SalesUnitPrice]
,st.[Currency]
,st.[Reference]
,st.[AdjustmentDate]
,st.[IndexKey]
,st.[InternalExternal]

FROM dm.FactStockTransaction st
LEFT JOIN dbo.Company com ON st.Company = com.Company
WHERE com.BusinessArea = 'Driveline Solutions' AND com.[Status] = 'Active'


--WHERE Company  in ('AFISCM', 'CDKCERT', 'CEECERT', 'CFICERT', 'CLTCERT', 'CLVCERT', 'CSECERT', 'CUKCERT', 'CNOEHAU', 'CNOCERT', 'CERPL', 'CyESA', 'HFIHAKL', 'TRACLEV')  -- LS basket

--GROUP BY  -- Aggregate those fields in dw.FactOrder which have more than one values, such as different NeedbyDate & DelivDate and different discountPercent, left over fields should by in GROUP BY
GO
PRINT N'Creating [stage].[TMT_FI_OLine]'
GO
CREATE TABLE [stage].[TMT_FI_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderRelNum] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[DelivDate] [date] NULL,
[Confirmed delivery date] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[SumUnitCost] [decimal] (18, 4) NULL,
[SumUnitPrice] [decimal] (18, 4) NULL,
[currencyCode] [nchar] (10) NULL,
[CurrExchRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (1) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [int] NULL,
[NeedbyDate] [date] NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (500) NULL,
[SalesReturnOrderNum] [nvarchar] (50) NULL,
[SalesReturnInvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[OrderHandler] [nvarchar] (50) NULL,
[Version] [varchar] (20) NULL
)
GO
PRINT N'Creating [stage].[vTMT_FI_OLine]'
GO



CREATE VIEW [stage].[vTMT_FI_OLine] AS
--COMMENT EMPTY FIELDS // ADDTRIM()INTO CustomerID,PartID 23-01-09 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', OrderNum, '#', OrderLine, '#', OrderSubLine)))) AS SalesOrderID -- ext OrderRelNum
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID	
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company],'#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(InvoiceNum))) AS SalesOrderCode
	,CONVERT(int, replace(convert(date, OrderDate),'-','')) AS SalesOrderDateID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT( Company,'#','')) ))	AS ProjectID
	,PartitionKey 

	,UPPER(Company) AS Company
	,UPPER(TRIM(CustNum)) AS CustomerNum 
	,TRIM(OrderNum) AS SalesOrderNum
	,TRIM(OrderLine) AS SalesOrderLine
	,TRIM(OrderSubLine) AS SalesOrderSubLine
	,TRIM(OrderType) AS SalesOrderType
	--,''	AS SalesOrderCategory
	,isnull(OrderDate, cast('1900-01-01' as date)) AS SalesOrderDate
	,NeedbyDate
	,DelivDate AS ExpDelivDate
	,CAST('1900-01-01' AS date) AS ActualDelivDate
	,CAST([Confirmed delivery date] AS date) AS ConfirmedDelivDate
	,TRIM(InvoiceNum) AS SalesInvoiceNum
	,OrderQty AS SalesOrderQty
	,DelivQty
	,OrderQty-DelivQty AS RemainingQty   -- RemainingQty  || RemaingQty was always 0, so calculation was added | SB 2023-01-31
	--,NULL AS SalesInvoiceQty
	--,'' AS UoM
	,UnitPrice*CurrExchRate as UnitPrice-- Have received local net unitprice, changing to ordered unit price witih the initial current exchange rate we recieved UnitPrice
	,UnitCost*CurrExchRate as UnitCost -- Have received local unitcost, changing to ordered unit cost witih the initial current exchange rate we recieved UnitCost SB 2023-02-02
	,currencyCode AS Currency
	,1/CurrExChRate AS ExchangeRate -- inverted so that it is the currency rate from ordered currency to local (EUR) SB 2023-01-31
	,OpenRelease
	,0 as DiscountAmount -- DiscountAmount  || Setting to 0 as we are receiving net unitprice, so the discount has already been applied || SB 2023-02-01
	,DiscountPercent
	,UPPER(TRIM(PartNum)) AS PartNum
	--,'' AS PartType
	,PartStatus
	,IIF(LEFT(SalesChannel, 2) = 'NT', 'WebShop', SalesPersonName) AS SalesPersonName
	,TRIM(WarehouseCode) AS WarehouseCode
	,SalesChannel
	,IIF(LEFT(SalesChannel, 2) = 'NT', 'WebShop', 'Normal Order Handling') AS AxInterSalesChannel
	--,'' AS Department
	--,'' AS [ProjectNum]
	--,'' AS [IndexKey]
	--,'' AS Cancellation
	,[Version] AS SORes1
	--,'' AS SORes2
	--,'' AS SORes3
	--,NULL AS [TotalMiscChrg]
FROM stage.TMT_FI_OLine

--GROUP BY
--	PartitionKey, Company, CustNum, OrderNum, OrderLine, OrderSubLine, OrderType, OrderRelNum, OrderDate, NeedbyDate, DelivDate, InvoiceNum, OrderQty, DelivQty, RemainingQty, UnitPrice, UnitCost, SumUnitPrice, SumUnitCost, currencyCode, CurrExChRate, OpenRelease, DiscountAmount, DiscountPercent, PartNum, PartStatus, SalesPersonName, WarehouseCode, SalesChannel, SalesReturnOrderNum, SalesReturnInvoiceNum, [Confirmed delivery date]
GO
PRINT N'Creating [stage].[MEN_NL_Budget]'
GO
CREATE TABLE [stage].[MEN_NL_Budget]
(
[PartitionKey] [nvarchar] (20) NULL,
[Company] [nvarchar] (12) NULL,
[AccountNum] [nvarchar] (80) NULL,
[BudgetPeriod] [nvarchar] (80) NULL,
[BudgetPeriodDate] [nvarchar] (80) NULL,
[PeriodType] [nvarchar] (80) NULL,
[CustomerNum] [nvarchar] (80) NULL,
[ProjectNum] [nvarchar] (80) NULL,
[CustomerGroup] [nvarchar] (80) NULL,
[ProductGroup] [nvarchar] (80) NULL,
[SalesPersonCode] [nvarchar] (80) NULL,
[SalesPersonName] [nvarchar] (80) NULL,
[BudgetDescription] [nvarchar] (80) NULL,
[Currency] [nvarchar] (80) NULL,
[ExchangeRate] [nvarchar] (80) NULL,
[BudgetSales] [nvarchar] (80) NULL,
[BudgetCost] [nvarchar] (80) NULL,
[BudgetGrossProfit] [nvarchar] (80) NULL,
[BudgetGrossMargin] [nvarchar] (80) NULL,
[BudgetType] [nvarchar] (80) NULL,
[Department] [nvarchar] (80) NULL,
[Bres3] [nvarchar] (80) NULL
)
GO
PRINT N'Creating [stage].[vMEN_NL_Budget]'
GO


CREATE view [stage].[vMEN_NL_Budget] as 

with company_correct as (
select
	CASE 
		WHEN Company = '14' THEN  CONCAT(N'MENBE',Company) 
		ELSE  CONCAT(N'MENNL',Company)  
	END AS CompanyCorrect,
	'' AS PartNum,
	[PartitionKey], [Company], [AccountNum], [BudgetPeriod], [BudgetPeriodDate], [PeriodType], [CustomerNum], [ProjectNum], [CustomerGroup], [ProductGroup], [SalesPersonCode], [SalesPersonName], [BudgetDescription], [Currency], [ExchangeRate], [BudgetSales], [BudgetCost], [BudgetGrossProfit], [BudgetGrossMargin], [BudgetType], [Department], [Bres3]
from stage.MEN_NL_Budget
)
select
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(CompanyCorrect),'#', BudgetPeriodDate, '#', TRIM(BudgetType), '#', TRIM(Department))))) AS BudgetID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM(CompanyCorrect),'#',TRIM(CustomerNum)))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(CompanyCorrect)))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(CompanyCorrect,'#',[PartNum]))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(CompanyCorrect),'#',null)))) AS WarehouseID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(CompanyCorrect),'#',null)))) AS ProjectID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(CompanyCorrect,'#',trim(Department)))) AS DepartmentID
	,YEAR(BudgetPeriodDate)*10000 + MONTH(BudgetPeriodDate)*100 + DAY(BudgetPeriodDate)	AS BudgetPeriodDateID
	,PartitionKey
	,CompanyCorrect as Company
	,cast(BudgetPeriodDate as date) as BudgetPeriodDate
	,Currency
	,LTRIM(RTRIM(CASE 
        WHEN BudgetSales like '%E-%' THEN CAST(CAST(BudgetSales AS FLOAT) AS DECIMAL(22,4))
        WHEN BudgetSales like '%E+%' THEN CAST(CAST(BudgetSales AS FLOAT) AS DECIMAL)
        ELSE cast(BudgetSales  as decimal(22,4))
    END)) as BudgetSales
	,LTRIM(RTRIM(CASE 
        WHEN BudgetCost like '%E-%' THEN CAST(CAST(BudgetCost AS FLOAT) AS DECIMAL(22,4))
        WHEN BudgetCost like '%E+%' THEN CAST(CAST(BudgetCost AS FLOAT) AS DECIMAL)
        ELSE cast(BudgetCost as decimal(22,4))
    END)) as BudgetCost
	,BudgetCost as budget_cost_stage
	--the names in this fields are not using in the dwtable. VA
	,LTRIM(RTRIM(CASE 
        WHEN BudgetGrossProfit like '%E-%' THEN CAST(CAST(BudgetGrossProfit AS FLOAT) AS DECIMAL(22,4))
        WHEN BudgetGrossProfit like '%E+%' THEN CAST(CAST(BudgetGrossProfit AS FLOAT) AS DECIMAL)
        ELSE cast(BudgetGrossProfit as decimal(22,4))
    END)) as BudgetGrossProfit --the names in this fields are not using in the dwtable. VA
	,LTRIM(RTRIM(CASE 
        WHEN BudgetGrossMargin like '%E-%' THEN CAST(CAST(BudgetGrossMargin AS FLOAT) AS DECIMAL(18,4))
        WHEN BudgetGrossMargin like '%E+%' THEN CAST(CAST(BudgetGrossMargin AS FLOAT) AS DECIMAL)
        ELSE cast(BudgetGrossMargin as decimal(18,4))
    END)) as BudgetGrossMargin --the names in this fields are not using in the dwtable. VA
	,BudgetType
	,Department
from company_correct
GO
PRINT N'Creating [meta].[LoadTableAndHistory]'
GO





-- =============================================
-- Author:		Richard Lautmann
-- Create date: 2012-03-01
-- Description:	Generic procedure for insert/update 

-- Basically how it works:
-- The procedure looks at the target table and dynamically finds the columns, except those deinfed to be
-- igored and the insert audit columns, and creates a merge statement based on those conditions.   
-- It expects the source to have the same columns, and based on that it creates a merge statement. It also requires
-- rows to have a natural key, a code in one column. 

-- How to Use 
-- exec meta.LoadTableAndHistory @targetTable='Airport', @sourceTable='KS_Import..vAirport', @targetNKColumn='AirportCode',@PartitionId=1

-- Required parameters are: PartitionId, targetTable, sourceTable and targetNKColumn. 
-- You can override the names of the source audit column, source natural key column, the insert audit column and the 
-- update audit column. You can also define columns to ignore in the comparison, default is to compare all columns
-- except audit, primary keys and natural keys.   
-- =============================================
CREATE PROCEDURE [meta].[LoadTableAndHistory] (@PartitionKey varchar(50),@targetTable varchar(50), @sourceTable varchar(50), 
								@targetNKColumn varchar(50), @sourceNKColumn varchar(50)='',
								@sourceAuditColumn varchar(50)='PartitionKey', @updateAuditColumn varchar(50)='PartitionKey',
								@insertAuditColumn varchar(50)='PartitionKey',@ignoreColumns varchar(500)='', @debugOnly int = 0)
AS
BEGIN
	--**** Logging variables *******
	Declare  @ProcName varchar(100) = OBJECT_NAME(@@PROCID)
			, @FromTable varchar(100) = @sourceTable
			, @ToTable varchar(100)  = @targetTable
			, @startTime datetime = getdate() AT TIME ZONE 'UTC' AT TIME ZONE 'Central Europe Standard Time' -- Added double conversion to make sure we get the swedish timestamp /SM 2021-10-07
			, @endTime datetime
			, @rowsAffected int
			, @StatusName varchar(10)='OK'
			, @ErrorMessage varchar(max)	
	--**** Logging variables *******

	declare @sSql varchar(max)
	declare @sSql_detective varchar(max)
	declare @columns varchar(max), @updateColumns varchar(max), @checkChangeColumns varchar(max)
	Declare @tmpTableName varchar(500) = 'stage.[__tmp_LoadTableAndHistory_'+@sourceTable+'_'+@PartitionKey+']' --Changed to @sourceTable instead of @targetTable here to to avoid the error of tmp table already exists with same name when multiple parallel loads are active. /Sm 2021-10-06

	if @sourceNKColumn = '' 
		set @sourceNKColumn = @targetNKColumn

	set @ignoreColumns = @ignoreColumns + 'ValidFrom,ValidTo,'+
							@insertAuditColumn+','+
							@updateAuditColumn+','+
							@targetNKColumn+','+
							@sourceNKColumn
	
	-- stage som strings for audit columns
	if @updateAuditColumn <> ''
		set @updateAuditColumn = ','+@updateAuditColumn+' = source.'+@sourceAuditColumn
	if @sourceAuditColumn <> ''
		set @sourceAuditColumn = ', source.'+@sourceAuditColumn
	if @insertAuditColumn <> ''
		set @insertAuditColumn =  ','+@insertAuditColumn

	-----------------------------------------------
	-- Improvement of tomas. We can include specific columns that we want to avoid checking in the merge statement
	declare @ignore_sqlStatement nvarchar(max)
	declare @append_ignoreColumns varchar(500) = ''

	declare @paramDefinition nvarchar(300) = N'@append_ignoreColumns varchar(600) OUTPUT, @sourceTable varchar(60)'
	set @ignore_sqlStatement = 'select @append_ignoreColumns = @append_ignoreColumns + '','' + columnName 
								from dbo.ignoreTableColumns where stageTableName = ' + '''' + @sourceTable + ''''

	EXEC sp_executesql @ignore_sqlStatement,
				@paramDefinition,
				@append_ignoreColumns = @append_ignoreColumns OUTPUT,
				@sourceTable = @sourceTable;

	if len(@append_ignoreColumns) > 0
		begin
			set @ignoreColumns = @ignoreColumns + @append_ignoreColumns
		end

	--if @sourceTable in ('stage.vROR_SE_OLine','stage.vTMT_FI_OLine','stage.vWID_FI_OLine')
	--	begin
	--		set @ignoreColumns = @ignoreColumns + ',' + 'ProjectNum'
	--	end

	-----------------------------------------------
	-- Previous procedure
	--exec meta.GetTableColumnList 
	--	@targetTable, 
	--	@ignoreColumns,
	--	@ColumnList=@columns	 output, 
	--	@updateList=@updateColumns output ,
	--	@checkForChangeList=@checkChangeColumns output

	exec meta.GetTableColumnList_test 
		@targetTable, 
		@sourceTable,
		@ignoreColumns,
		@ColumnList=@columns output,
		@updateList=@updateColumns output ,
		@checkForChangeList=@checkChangeColumns output

	if @debugOnly = 1
	begin
		print('Update audit column  '+@updateAuditColumn)
		print('Source audit column  '+@sourceAuditColumn)
		print('Insert audit column  '+@insertAuditColumn)
		print @columns
		print(char(10))
		print @updateColumns
		print(char(10))
		print @checkChangeColumns
		print(char(10))
		print('Right side')
		print (right(@checkChangeColumns,3999))
		print(char(10))
		print('Ignore Columns')
		print @ignoreColumns

	end
	-- *** For performance reason, create a temp table to work with. Temp storage is too small to use.
	if object_id(@tmpTableName) is not null
		exec ('drop table ' + @tmpTableName)
	
	set @sSql = 'select * into '+@tmpTableName+' from '+@sourceTable --+ ' where PartitionKey='''+@PartitionKey+'''' --Commented due to PartitionKey is not serving the correct purpose in our case. /SM 2021-10-06 

	if @debugOnly = 0
	Begin
		exec (@sSql)
		if @@ROWCOUNT=0
		begin
			exec ('drop table ' + @tmpTableName)
			return
		end
	End
	else 
		print @sSql
	-- ***

	--------------------------------------------
	declare @version bit = 1;
	begin try
		Declare @sqlStatement_Cursor nvarchar(600) = 'DECLARE companyCursor cursor for SELECT DISTINCT Company FROM ' + @sourceTable
		Declare @companyNameIterator varchar(50)
		declare @companyPiece varchar(2000) = ''

		exec sp_executesql @sqlStatement_Cursor

		OPEN companyCursor
		FETCH NEXT FROM companyCursor
			INTO @companyNameIterator

		WHILE @@FETCH_STATUS = 0
		BEGIN
			set @companyPiece = @companyPiece + '''' + @companyNameIterator + '''' + ','

			fetch next FROM companyCursor
				INTO @companyNameIterator
		END

		close companyCursor
		deallocate companyCursor
	end try
	begin catch
		set @version = 0;
	end catch

	if len(@companyPiece) > 0
		begin
			set @companyPiece = left(@companyPiece, len(@companyPiece)-1)
			-- set @companyPiece = ' when  not matched by source and target.company IN (' + @companyPiece + ')' es el anterior
			set @companyPiece = ' where target.company IN (' + @companyPiece + ')' -- CAMBIO PROBANDO
		end

	--------------------------------------------
		
	-- Create the merge statement
	if @version = 0
		begin
			Set @sSql = 'MERGE '+@targetTable+' as Target 
				Using (Select * from '+@tmpTableName+' ) source
					on target.'+@targetNKColumn+' = source.'+@sourceNKColumn+'
				When matched 
					And Not ('+@checkChangeColumns+')
				then  update  
						SET '+@updateColumns+'
								'+@updateAuditColumn+'
				When Not matched by target then 
					insert ('+@targetNKColumn+','+@columns+''+REPLACE(@insertAuditColumn, 'source.', '')+')
					Values ('+@sourceNKColumn+','+@columns+' '+@sourceAuditColumn+');'
		end
	else
		begin
			Set @sSql = 'WITH target_filtered as (SELECT * FROM ' + @targetTable + ' as target' + @companyPiece + ') 
							MERGE target_filtered as Target 
			Using (Select * from '+@tmpTableName+' ) source
				on target.'+@targetNKColumn+' = source.'+@sourceNKColumn+'
			When matched 
				And Not ('+@checkChangeColumns+')
			then  update  
					SET '+@updateColumns+'
							'+@updateAuditColumn+'
			When Not matched by target then 
				insert ('+@targetNKColumn+','+@columns+''+REPLACE(@insertAuditColumn, 'source.', '')+')
				Values ('+@sourceNKColumn+','+@columns+' '+@sourceAuditColumn+');'
		end

	set @sSql_detective = 'SELECT target.' + @targetNKColumn + 
							' FROM ' + @targetTable + ' AS target
								INNER JOIN ' + @sourceTable + ' AS source ON target.' + @targetNKColumn + ' = source.' + @sourceNKColumn + 
								' WHERE ' + @checkChangeColumns

	begin try 
		if @debugOnly = 0
			begin
				exec (@sSql)
				set @rowsAffected = @@rowcount
			end 
		else 
			begin
				print(char(10))
				print ('@sqlStatement_Cursor: ' + @sqlStatement_Cursor)
				print(char(10))
				print ('@companyPiece: ' + @companyPiece)
				print(char(10))
				print @sSql	
				print(char(10))
				print('Right side')
				print(right(@sSql,3999))
				print(char(10))
				print('Sql Detective')
				PRINT (@sSql_detective)
				print(char(10))
				print('Right side')
				PRINT (RIGHT(@sSql_detective,3999))
			end
	End Try
	Begin Catch
	-- *** Logging ***	
		set @StatusNAme = 'FAIL'
		set @ErrorMessage = @ToTable+':'+ERROR_MESSAGE()
	End Catch

	set @endTime = getdate() AT TIME ZONE 'UTC' AT TIME ZONE 'Central Europe Standard Time' -- Added double conversion to make sure we get the swedish timestamp /SM 2021-10-07
	if @debugOnly = 0
	begin
		--Drop temp table
		if object_id(@tmpTableName) is not null
		exec ('drop table ' + @tmpTableName)

		exec audit.writeLog @PartitionKey=@PartitionKey, @ProcName = @ProcName, @FromTable =@FromTable, @ToTable=@ToTable
						, @startTime=@startTime, @endTime=@endTime
						, @rowsAffected=@rowsAffected, @StatusName=@StatusName, @ErrorMessage=@ErrorMessage
		if @StatusName <> 'OK'
			RAISERROR(@ErrorMessage, 16, 1)
	end
	-- *** Logging ***	



--	declare @tableNameWithoutSchema varchar(50)
--	select @tableNameWithoutSchema=dbo.Split(@targetTable, '.', 2)
--	if @debugOnly = 0
--		exec hist.Rebuild @tableNameWithoutSchema, @targetNKColumn
END
GO
PRINT N'Creating [stage].[CYE_ES_POLine]'
GO
CREATE TABLE [stage].[CYE_ES_POLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[PONum] [nvarchar] (50) NULL,
[POLine] [nvarchar] (50) NULL,
[PORelNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[Qty] [decimal] (18, 4) NULL,
[Indexkey] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCyE_ES_PurchaseOrder]'
GO
CREATE VIEW [stage].[vCyE_ES_PurchaseOrder] AS
--COMMENT EMPTY FIELDS // ADD UPPER() TRIM() INTO CustomerID,WarehouseID,PartID 23-01-03 VA
--ADD UPPER() INTO SupplierID 23-01-23 VA
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(InvoiceNum),'#',TRIM(SupplierNum),'#',TRIM(PartNum),'#',TRIM(PONum),'#',TRIM(POLine)))) AS PurchaseOrderID --, '#', OrderDate
	,CONCAT(Company,'#',TRIM(SupplierNum),'#',TRIM(PONum),'#',TRIM(POLine), '#', TRIM(PartNum), '#', TRIM(InvoiceNum)) AS PurchaseOrderCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(PONum)))) AS PurchaseOrderNumID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(InvoiceNum)))) AS PurchaseInvoiceID
	,CONVERT([binary](32),HASHBYTES('SHA2_256','EUR')) AS CurrencyID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM('')))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#','')))) AS CustomerID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(SupplierNum)))) AS SupplierID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum))))) AS SupplierID	
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(PartNum)))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]), '#', '')))) AS WarehouseID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM(''))))) AS WarehouseID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',TRIM([Company]))) AS CompanyID
	,PartitionKey

	,Company
	,TRIM(PONum) AS PurchaseOrderNum
	,TRIM(POLine) AS PurchaseOrderLine
	--,TRIM('') AS PurchaseOrderSubLine
	--,TRIM('') AS PurchaseOrderType
	,OrderDate AS PurchaseOrderDate
	,CASE WHEN InvoiceNum IS NULL or InvoiceNum = '' THEN 'Open' ELSE 'Closed' END AS PurchaseOrderStatus
	,CAST ('1900-01-01' AS date) AS OrgReqDelivDate
	,CAST ('1900-01-01' AS date) AS CommittedDelivDate
	,CAST ('1900-01-01' AS date) AS ActualDelivDate
	,CAST ('1900-01-01' AS date) AS ReqDelivDate
	,TRIM(InvoiceNum) AS PurchaseInvoiceNum
	,TRIM(PartNum) AS PartNum
	,TRIM(SupplierNum) AS SupplierNum
	,TRIM(PartNum) AS SupplierPartNum
	,TRIM(InvoiceNum) AS SupplierInvoiceNum
	--,TRIM('') AS DelivCustomerNum
	--,NULL AS PartStatus
	,Qty/1000 AS PurchaseOrderQty
	--,NULL AS ReceiveQty
	--,NULL AS InvoiceQty
	--,NULL AS MinOrderQty
	--,'' AS UoM
	,UnitPrice
	--,NULL AS DiscountPercent
	--,NULL AS DiscountAmount
	--,NULL AS LandedCost
	,1 ExchangeRate
	,'EUR' AS Currency
	--,TRIM('') AS PurchaserName
	--,TRIM('') AS WarehouseCode
	--,'' AS ReceivingNum
	--,'' AS DelivTime
	--,'' AS PurchaseChannel
	,CONVERT(NVARCHAR(50),'') AS Documents
	--,TRIM('') AS Comments
--	,DelivDate
--	,CASE WHEN CONVERT(NVARCHAR(50),TRIM([LineType])) like '0' THEN 'Stock Item Line' WHEN CONVERT(NVARCHAR(50),TRIM([LineType])) like '1' THEN 'Non Stock Item Line' ELSE NULL END AS [LineType]
	--,'' AS PORes1
	--,'' AS PORes2
	--,'' AS PORes3
FROM 
	[stage].[CYE_ES_POLine]
	
GROUP BY
	PartitionKey, Company, PONum, POLine, SupplierNum, InvoiceNum, PartNum, UnitPrice, Qty, OrderDate
GO
PRINT N'Creating [stage].[JEN_DK_StockBalance]'
GO
CREATE TABLE [stage].[JEN_DK_StockBalance]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PartNum] [nvarchar] (70) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[FIFOValue] [decimal] (18, 4) NULL,
[StockBalance] [decimal] (18, 4) NULL,
[ReservedQty] [decimal] (18, 4) NULL,
[OptimalOrderQty] [decimal] (18, 4) NULL,
[BackOrderQty] [decimal] (18, 4) NULL,
[QtyOrdered] [decimal] (18, 4) NULL,
[StockTakDiff] [decimal] (18, 4) NULL,
[DelivTimeDesc] [nvarchar] (50) NULL,
[DelivTimeUnit] [int] NULL,
[DelivTimeToWHS] [int] NULL,
[ReOrderLevel] [decimal] (18, 4) NULL,
[DefaultBinNo] [nvarchar] (12) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[StockTakDate] [date] NULL,
[StdCostLaCaD] [date] NULL,
[DelivDateSupplier] [date] NULL,
[DelivDateCust] [date] NULL,
[OrderDateSupplier] [date] NULL,
[AvgCost] [decimal] (18, 4) NULL,
[LandedCost] [decimal] (18, 4) NULL,
[BatchNumber] [nvarchar] (50) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[MaxStockQty] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vJEN_DK_StockBalance]'
GO
CREATE VIEW [stage].[vJEN_DK_StockBalance] AS
--COMMENT EMPTY FIELDS // ADD TRIM() INTO PartID, WarehouseID 22-12-29 VA
--ADD TRIM() INTO SupplierID 23-01-23 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company], '#', TRIM([PartNum]), '#', TRIM([WarehouseCode]))))) AS ItemWarehouseID --,'#',MAX([FIFOValue]),'#',MAX([StockTakDate]),'#',MAX([StdCostLaCaD]),'#',MAX([DelivDateSupplier]),'#',MAX([DelivDateCust]),'#',MAX([DelivDateCust])
	,UPPER(CONCAT([Company], '#', TRIM([PartNum]), '#', TRIM([SupplierNum]))) AS ItemWarehouseCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company],'#',TRIM([SupplierNum]))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company],'#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company],'#',TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	,[PartitionKey]

	,UPPER([Company]) AS [Company]
	,TRIM([WarehouseCode]) AS WarehouseCode
	,TRIM(CurrencyCode) AS Currency
	,TRIM([DefaultBinNo]) AS BinNum
	,TRIM(BatchNumber) AS BatchNum
	,TRIM([SupplierNum]) AS [SupplierNum]
	,TRIM([PartNum]) AS PartNum
	,[DelivTimeUnit] AS [DelivTime]
	,MAX(convert(date, [StockTakDate])) AS LastStockTakeDate
	,MAX(convert(date, [StdCostLaCaD])) AS LastStdCostCalDate
	--,NULL AS SafetyStock
	,MaxStockQty
	,[StockBalance]
	,AvgCost*StockBalance AS StockValue
	,AvgCost
	,[ReservedQty] AS ReserveQty
	,[BackOrderQty] AS BackOrderQty
	,[QtyOrdered] AS OrderQty
	,[StockTakDiff] AS StockTakeDiff
	,MIN([ReOrderLevel]) AS [ReOrderLevel]
	,[OptimalOrderQty]
	--,'' AS SBRes1
	--,'' AS SBRes2
	--,'' AS SBRes3
	,MAX([FIFOValue]) AS [FIFOValue] --MAX
	,'' AS [DelivTimeToWHS]-- will not be sent out to new companies, not delete in DW for that use as reservation
	,'' AS [DelivTimeDesc]-- will not be sent out to new companies, not delete in DW for that use as reservation
	,'' AS [DaysOnStock]
--	,CASE WHEN TRIM(DefaultBinNo) like '' OR DefaultBinNo like  ' '
--		THEN NULL ELSE TRIM(DefaultBinNo) END AS DefaultBinNo
	,MAX(convert(date, [DelivDateSupplier])) AS DelivDateSupplier --
	,MAX(convert(date, [DelivDateCust])) AS DelivDateCust --
	,MAX(convert(date, [OrderDateSupplier])) AS OrderDateSupplier
	,convert(date, '') AS OrderDateCust
	--,'' AS BatchNoPrefix-- will not be sent out to new companies, not delete in DW for that use as reservation
	--,'' AS BatchNoSuffix-- will not be sent out to new companies, not delete in DW for that use as reservation
FROM 
	[stage].[JEN_DK_StockBalance]
WHERE [StockBalance] != 0
GROUP BY
	[PartitionKey], [Company], [PartNum], [WarehouseCode], [StockBalance], [ReservedQty], [BackOrderQty], [QtyOrdered], [StockTakDiff], [DelivTimeUnit], [OptimalOrderQty], [DefaultBinNo], [SupplierNum], BatchNumber, MaxStockQty, CurrencyCode, AvgCost
GO
PRINT N'Creating [dw].[vALL_Product]'
GO

CREATE VIEW [dw].[vALL_Product] AS

SELECT 
	UPPER(TRIM(Company)) AS Company
    ,UPPER(TRIM(PartNum)) AS PartNum
	,PartName AS ProductName
	,ProductGroup
FROM [dw].[Part]
GO
PRINT N'Creating [stage].[PAS_PL_Customer]'
GO
CREATE TABLE [stage].[PAS_PL_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[company] [nvarchar] (8) NOT NULL,
[customernum] [nvarchar] (50) NOT NULL,
[maincustomername] [nvarchar] (300) NULL,
[customername] [nvarchar] (300) NULL,
[addressline1] [nvarchar] (50) NULL,
[addressline2] [nvarchar] (50) NULL,
[addressline3] [nvarchar] (50) NULL,
[telephonenum1] [nvarchar] (50) NULL,
[telephonenum2] [nvarchar] (50) NULL,
[email] [nvarchar] (100) NULL,
[customerabc] [nvarchar] (50) NULL,
[city] [nvarchar] (50) NULL,
[zipcode] [nvarchar] (50) NULL,
[state] [nvarchar] (50) NULL,
[countrycode] [nvarchar] (50) NULL,
[countryname] [nvarchar] (50) NULL,
[division] [nvarchar] (50) NULL,
[customergroup] [nvarchar] (50) NULL,
[customersubgroup] [nvarchar] (50) NULL,
[salesrepcode] [nvarchar] (50) NULL,
[vatregnr] [nvarchar] (50) NULL,
[accountstring] [nvarchar] (50) NULL,
[district] [nvarchar] (50) NULL,
[internalexternal] [nvarchar] (50) NULL,
[salespersonresponsible] [nvarchar] (50) NULL,
[salespersonname] [nvarchar] (100) NULL,
[customertype] [nvarchar] (50) NULL,
[customercode] [nvarchar] (50) NULL,
[res1] [nvarchar] (50) NULL,
[res2] [nvarchar] (50) NULL,
[res3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vPAS_PL_Customer]'
GO
CREATE VIEW [stage].[vPAS_PL_Customer] AS
--COMMENT EMPTY FIELDS // ADD TRIM()UPPER() INTO CustomerID 23-01-05 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
--	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(UPPER(CustomerNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',Company)) AS CompanyID --
	,CONCAT(Company, '#', TRIM(UPPER([CustomerNum]))) AS CustomerCode
	,PartitionKey

	,[company] AS Company
	,TRIM(UPPER([customernum])) AS [CustomerNum]
	,LEFT([customercode], 100) AS MainCustomerName
	,LEFT([customername], 100) AS [CustomerName]
	,[addressline1] AS [AddressLine1]
	,[addressline2] AS [AddressLine2]
	,[addressline3] AS [AddressLine3]
	,[telephonenum1] AS [TelephoneNum1]
	,[telephonenum2] AS [TelephoneNum2]
	,[email] AS [Email]
	,[zipcode] AS [ZipCode]
	,CASE WHEN [city] = ' '	AND LEFT(addressline3, 1) IN ('1','2','3','4','5','6','7','8','9') THEN trim(substring(replace(addressline3,' ', ''), 6, 100)) ELSE [city] end AS [City]
	,IIF([state]= ' ',null,[state]) AS [State]
	,[district] AS SalesDistrict
	,IIF(TRIM(countryname) like '%Polska%', 'PL', TRIM(countrycode)) AS CountryCode
	,TRIM(countryname) AS [CountryName]
	--,'' AS Division
	--,'' AS CustomerIndustry
	--,'' AS CustomerSubIndustry
	,TRIM(CONCAT (addressline1 + ' ' + addressline2, null)) AS [AddressLine]
	,CONCAT(TRIM(countryname), + ', ' + TRIM([city]), + ', ' + TRIM([zipcode]), + ', ' + trim(addressline1)) AS [FullAddressLine]
	,(customergroup) AS [CustomerGroup]
	,(customersubgroup) AS [CustomerSubGroup]
	,[salesrepcode] AS SalesPersonCode
	,(salespersonname) AS [SalesPersonName]
	,[salespersonresponsible] AS [SalesPersonResponsible]
	,[vatregnr] AS VATNum
	--,'' AS OrganizationNum
	,[accountstring] AS AccountNum
	,[internalexternal]
	,[customerabc] AS CustomerScore
	,[customertype] AS [CustomerType]

FROM [stage].[PAS_PL_Customer]
GO
PRINT N'Creating [dm_FH].[dimCostBearer]'
GO
--CREATE schema dm_FH

CREATE VIEW [dm_FH].[dimCostBearer] AS 

SELECT  cb.[CostBearerID]
,cb.[PartitionKey]
,cb.[CostBearerCode]
,cb.[CompanyID]
,cb.[Company]
,cb.[CostBearerNum]
,cb.[CostBearerName]
,cb.[CostBearerStatus]
,cb.[CostBearerGroup]
,cb.[CostBearerGroup2]
,cb.[CostBearerGroup3]
FROM [dm].[DimCostBearer] cb
LEFT JOIN dbo.Company com ON cb.Company = com.Company
WHERE com.BusinessArea = 'Fluid Handling Solutions' AND com.[Status] = 'Active'
GO
PRINT N'Creating [stage].[TMT_FI_Part]'
GO
CREATE TABLE [stage].[TMT_FI_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartDescription] [nvarchar] (max) NULL,
[PartDescription2] [nvarchar] (max) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[ProductGroup2] [nvarchar] (50) NULL,
[ProductGroup3] [nvarchar] (50) NULL,
[CommodityCode] [nvarchar] (50) NULL,
[CountryOfOrigin] [nvarchar] (50) NULL,
[NetWeight] [decimal] (18, 4) NULL,
[PartStatus] [nvarchar] (50) NULL,
[UoM] [nvarchar] (50) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[Reorderlevel] [decimal] (18, 4) NULL,
[Myyntiseuranta ] [nvarchar] (100) NULL,
[SalesTracking] [nvarchar] (50) NULL,
[Selite] [nvarchar] (50) NULL,
[Tuoteryhmä] [nvarchar] (50) NULL,
[Version] [nvarchar] (50) NULL,
[PartType] [nvarchar] (60) NULL
)
GO
PRINT N'Creating [stage].[vTMT_FI_Part]'
GO
CREATE VIEW [stage].[vTMT_FI_Part] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(p.[Company]), '#', TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(p.[Company]))) AS CompanyID
	,UPPER(CONCAT(p.[Company], '#', TRIM([PartNum]))) AS PartCode
	,p.PartitionKey

	,UPPER(p.[Company]) AS [Company]
	,UPPER(TRIM([PartNum]))	AS PartNum
	,'' AS [PartName] --[Version]
	,[PartDescription]
	,[PartDescription2]
	,[SalesTracking] AS [PartDescription3] 
	,CONCAT(SupplierCode, '-', MainSupplierName) AS MainSupplier
	--,NULL AS AlternativeSupplier
	,[ProductGroup]
	,[ProductGroup2]
	,[ProductGroup3]
	,CONCAT(Tuoteryhmä, '-', Selite) AS [ProductGroup4]
	,[PartType] AS [Brand]
	,[CommodityCode]
	--,'' AS PartReplacementNum
	--,'' AS PartStatus
	,[CountryOfOrigin]
	,[NetWeight]
	,UoM
	--,'' AS [Material]
	--,'' AS [Barcode]
	,[ReOrderLevel]
	--,'' AS [PartResponsible]  --PartResponsible
	--,'' AS [StartDate]
	--,'' AS [EndDate]
FROM [stage].[TMT_FI_Part] p
 LEFT JOIN [stage].[TMT_FI_Supplier] s ON p.SupplierCode = s.SupplierNum

GROUP BY p.[Company], p.PartitionKey, [PartNum], [PartDescription],[PartDescription2],[SalesTracking], SupplierCode, [ProductGroup], [ProductGroup2],[ProductGroup3], Tuoteryhmä, Selite, [CommodityCode], [CountryOfOrigin], [NetWeight], [ReOrderLevel], UoM, MainSupplierName, [PartType]
GO
PRINT N'Creating [stage].[TRA_FR_PurchaseInvoice]'
GO
CREATE TABLE [stage].[TRA_FR_PurchaseInvoice]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaseOrderType] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[PurchaseInvoiceLine] [nvarchar] (50) NULL,
[OrderDelivLineNum] [nvarchar] (50) NULL,
[PurchaseInvoiceType] [nvarchar] (50) NULL,
[PurchaseInvoiceDate] [nvarchar] (50) NULL,
[ActualDelivDate] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PurchaseInvoiceQty] [nvarchar] (50) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [nvarchar] (50) NULL,
[DiscountPercent] [nvarchar] (50) NULL,
[DiscountAmount] [nvarchar] (50) NULL,
[TotalMiscChrg] [nvarchar] (50) NULL,
[VATAmount] [nvarchar] (50) NULL,
[ExchangeRate] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[PurchaserName] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[PurchaseChannel] [nvarchar] (50) NULL,
[Comment] [nvarchar] (50) NULL,
[PIRes1] [nvarchar] (100) NULL,
[PIRes2] [nvarchar] (100) NULL,
[PIRes3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vTRA_FR_PurchaseInvoice]'
GO
CREATE VIEW [stage].[vTRA_FR_PurchaseInvoice] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(PurchaseOrderSubLine), '#', TRIM(PurchaseInvoiceNum), '#', TRIM(PurchaseInvoiceLine), '#', PartNum, '#', TRIM(WarehouseCode))))) AS PurchaseInvoiceID 
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseInvoiceNum), '#', TRIM(PurchaseInvoiceLine), '#', PartNum)) AS PurchaseInvoiceCode
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum))) AS PurchaseOrderNumCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum),'#',TRIM(PurchaseOrderLine),'#',TRIM(PurchaseInvoiceNum))))) AS PurchaseOrderID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum))))) AS SupplierID
    ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT(int, CONCAT(SUBSTRING(PurchaseInvoiceDate, 7,4), SUBSTRING(PurchaseInvoiceDate, 4,2), SUBSTRING(PurchaseInvoiceDate, 1,2))) AS PurchaseInvoiceDateID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#', TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum),'#',TRIM(PurchaseOrderNum))))) AS PurchaseLedgerID
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum),'#',TRIM(PurchaseOrderNum))) AS PurchaseOrderCode
	,PartitionKey

	,UPPER(TRIM(Company)) AS Company
	,UPPER(TRIM(PurchaseOrderNum)) AS PurchaseOrderNum
	,UPPER(TRIM(PurchaseOrderLine)) AS PurchaseOrderLine
	,UPPER(TRIM(PurchaseOrderSubLine)) AS PurchaseOrderSubLine
	,PurchaseOrderType
	,UPPER(TRIM(PurchaseInvoiceNum)) AS PurchaseInvoiceNum
	,UPPER(TRIM(PurchaseInvoiceLine)) AS PurchaseInvoiceLine
	,PurchaseInvoiceType
	,TRY_CONVERT(date, CONCAT(SUBSTRING(PurchaseInvoiceDate, 7,4), '-', SUBSTRING(PurchaseInvoiceDate, 4,2),  '-', SUBSTRING(PurchaseInvoiceDate, 1,2))) AS PurchaseInvoiceDate
	,TRY_CONVERT(date, CONCAT(SUBSTRING(ActualDelivDate, 7,4), '-', SUBSTRING(ActualDelivDate, 4,2), '-', SUBSTRING(ActualDelivDate, 1,2))) AS ActualDelivDate
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,CONVERT(decimal(18, 4), PurchaseInvoiceQty) AS PurchaseInvoiceQty
	,UoM
	,CONVERT(decimal(18, 4), UnitPrice) AS UnitPrice
	,CONVERT(decimal(18, 4), DiscountPercent) AS DiscountPercent
	,CONVERT(decimal(18, 4), DiscountAmount) AS DiscountAmount
	,CONVERT(decimal(18, 4), TotalMiscChrg) AS TotalMiscChrg
	,CONVERT(decimal(18, 4), VATAmount) AS VATAmount
	,Currency
	,CONVERT(decimal(18, 4), ExchangeRate) AS ExchangeRate
	,CreditMemo
	,PurchaserName
	,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
	,PurchaseChannel
	,Comment
	,PIRes1
	,PIRes2
	,PIRes3
	--,'' AS OrderDelivLineNum
FROM stage.TRA_FR_PurchaseInvoice

--GROUP BY
--	PartitionKey, Company, PurchaseOrderNum, PurchaseInvoiceNum, SupplierNum, PartNum, PurchaseOrderLine, PurchaseOrderSubLine, PurchaseInvoiceQty,UoM, UnitPrice, WarehouseCode,PurchaserName, 
--	PurchaseInvoiceLine, PurchaseInvoiceType, PurchaseInvoiceDate, ActualDelivDate, TotalMiscChrg, VATAmount, CreditMemo, PurchaseOrderType,DiscountAmount,Currency,ExchangeRate,PurchaseChannel, LastPaymentNum --, PurchaseOrderType, [Site], OrderDelivLineNum, , DiscountPercent, PurchaserName, PurchaseInvoiceLine, PurchaseInvoiceType, PurchaseInvoiceDate, ActualDelivDate, TotalMiscChrg, CreditMemo
GO
PRINT N'Creating [meta].[LoadTableAndHistory_dev_tomas_inferred]'
GO


-- =============================================
-- Author:		Richard Lautmann
-- Create date: 2012-03-01
-- Description:	Generic procedure for insert/update 

-- Basically how it works:
-- The procedure looks at the target table and dynamically finds the columns, except those deinfed to be
-- igored and the insert audit columns, and creates a merge statement based on those conditions.   
-- It expects the source to have the same columns, and based on that it creates a merge statement. It also requires
-- rows to have a natural key, a code in one column. 

-- How to Use 
-- exec meta.LoadTableAndHistory @targetTable='Airport', @sourceTable='KS_Import..vAirport', @targetNKColumn='AirportCode',@PartitionId=1

-- Required parameters are: PartitionId, targetTable, sourceTable and targetNKColumn. 
-- You can override the names of the source audit column, source natural key column, the insert audit column and the 
-- update audit column. You can also define columns to ignore in the comparison, default is to compare all columns
-- except audit, primary keys and natural keys.   
-- =============================================

/*

exec [meta].[LoadTableAndHistory_dev_tomas_inferred] 
@PartitionKey = '2023-01-18 16:21:56', 
@targetTable = 'dw.Part', 
@sourceTable = 'stage.vTRA_SE_Part', 
@targetNKColumn = 'PartID',
@debugOnly = 1,
@dwFilterColumnName = null,
@deltaLoadStatement = 'WHERE 1 = 1'

*/
-- 

-- If stageView is empty then crashes.

CREATE PROCEDURE [meta].[LoadTableAndHistory_dev_tomas_inferred] (
	@PartitionKey varchar(50),
	@targetTable varchar(50), 
	@sourceTable varchar(50), 
	@targetNKColumn varchar(50),
	@sourceNKColumn varchar(50)='',
	@sourceAuditColumn varchar(50)='PartitionKey', 
	@updateAuditColumn varchar(50)='PartitionKey',
	@insertAuditColumn varchar(50)='PartitionKey',
	@ignoreColumns varchar(500)='', 
	@debugOnly int = 0,
	@dwFilterColumnName varchar(50),
	@deltaLoadStatement varchar(600)
	)
AS
BEGIN
	--**** Logging variables *******
	Declare  @ProcName varchar(100) = OBJECT_NAME(@@PROCID)
			, @FromTable varchar(100) = @sourceTable
			, @ToTable varchar(100)  = @targetTable
			, @startTime datetime = getdate() AT TIME ZONE 'UTC' AT TIME ZONE 'Central Europe Standard Time' -- Added double conversion to make sure we get the swedish timestamp /SM 2021-10-07
			, @endTime datetime
			, @rowsAffected int
			, @StatusName varchar(10)='OK'
			, @ErrorMessage varchar(max)	
			, @sSql varchar(max)
			, @sSql_detective varchar(max)
			, @columns varchar(max), @updateColumns varchar(max), @checkChangeColumns varchar(max)
			, @tmpTableName varchar(500) = 'stage.[__tmp_LoadTableAndHistory_'+@sourceTable+'_'+@PartitionKey+']' --Changed to @sourceTable instead of @targetTable here to to avoid the error of tmp table already exists with same name when multiple parallel loads are active. /Sm 2021-10-06
			, @minDateQuery varchar(max)
	--**** Logging variables *******	

	set @minDateQuery = (select concat('Select ',right(@deltaLoadStatement, charindex('=', reverse(@deltaLoadStatement)) - 1)))

	print(@minDateQuery)

	if @sourceNKColumn = '' 
		set @sourceNKColumn = @targetNKColumn

	set @ignoreColumns = @ignoreColumns + 'ValidFrom,ValidTo,'+
							@insertAuditColumn+','+
							@updateAuditColumn+','+
							@targetNKColumn+','+
							@sourceNKColumn
	
	-- stage some strings for audit columns
	if @updateAuditColumn <> ''
		set @updateAuditColumn = ','+@updateAuditColumn+' = source.'+@sourceAuditColumn
	if @sourceAuditColumn <> ''
		set @sourceAuditColumn = ', source.'+@sourceAuditColumn
	if @insertAuditColumn <> ''
		set @insertAuditColumn =  ','+@insertAuditColumn

	-- ******* Exclude specific fields ******* --
	-- We can include specific columns that we want to avoid checking in the merge statement for each company. TO
	declare @ignore_sqlStatement nvarchar(max)
	declare @append_ignoreColumns varchar(500) = ''

	declare @paramDefinition nvarchar(300) = N'@append_ignoreColumns varchar(600) OUTPUT, @sourceTable varchar(60)'
	set @ignore_sqlStatement = 'select @append_ignoreColumns = @append_ignoreColumns + '','' + columnName 
								from dbo.ignoreTableColumns where stageTableName = ' + '''' + @sourceTable + ''''

	EXEC sp_executesql @ignore_sqlStatement,
				@paramDefinition,
				@append_ignoreColumns = @append_ignoreColumns OUTPUT,
				@sourceTable = @sourceTable;

	if len(@append_ignoreColumns) > 0
		begin
			set @ignoreColumns = @ignoreColumns + @append_ignoreColumns
		end

	-- ******* Exclude specific fields ******* --

	-- ******* Get column list ******* --
	exec meta.GetTableColumnList_test
		@targetTable, 
		@sourceTable,
		@ignoreColumns,
		@ColumnList=@columns output,
		@updateList=@updateColumns output ,
		@checkForChangeList=@checkChangeColumns output

	-- ******* Get column list ******* --

	if @debugOnly = 1

	begin
		print('@updateAuditColumn '+ @updateAuditColumn)
		print(char(10))
		print('@sourceAuditColumn '+ @sourceAuditColumn)
		print(char(10))
		print('@insertAuditColumn '+ @insertAuditColumn)
		print(char(10))
		print('@columns: ' + @columns)
		print(char(10))
		print('@updateColumns ' + @updateColumns)
		print(char(10))
		print('Left @checkChangeColumns ' + @checkChangeColumns)
		print(char(10))
		print('Right @checkChangeColumns' + right(@checkChangeColumns,3999))
		print(char(10))
		print('@ignoreColumns: ' + @ignoreColumns)
		print(char(10))
	end


	-- ******* Generate @tmpTableName from @sourceTable (stage view) ******* --

	-- If I'm not debugging, I will materialize @tmpTableName and use it then for the cursor
	-- otherwise, I will use the cursor with the @sourceTable cause I know there will be no issues
	if @debugOnly = 0

	Begin
		-- *** For performance reason, create a temp table to work with. Temp storage is too small to use.
		if object_id(@tmpTableName) is not null
			exec ('drop table ' + @tmpTableName)
	
		set @sSql = 'select * into ' + @tmpTableName + ' from ' + @sourceTable 

		exec (@sSql)
		if @@ROWCOUNT=0
		begin
			exec ('drop table ' + @tmpTableName)
			return
		end
	End
	else 
		print @sSql
	-- ******* Generate @tmpTableName from @sourceTable (stage view) ******* --


	-- ******* Generate dynamic company in () ******* --

	-- When I'm not debugging, the cursor will use the table created above. Otherwise we use
	-- the stage view as we described before
	declare @cursor_success bit = 0;
	Declare @sqlStatement_Cursor nvarchar(600)
	Declare @companyNameIterator varchar(50)
	declare @companyPiece varchar(2000)


	if @debugOnly = 0
	begin
		set @cursor_success = 1;

		begin try
			set @sqlStatement_Cursor = 'DECLARE companyCursor cursor for SELECT DISTINCT Company FROM ' + @tmpTableName
			set @companyPiece = ''

			exec sp_executesql @sqlStatement_Cursor

			OPEN companyCursor
			FETCH NEXT FROM companyCursor
				INTO @companyNameIterator

			WHILE @@FETCH_STATUS = 0
			BEGIN
				set @companyPiece = @companyPiece + '''' + @companyNameIterator + '''' + ','

				fetch next FROM companyCursor
					INTO @companyNameIterator
			END

			close companyCursor
			deallocate companyCursor

			if len(@companyPiece) > 0
				begin
					set @companyPiece = left(@companyPiece, len(@companyPiece)-1)
					-- set @companyPiece = ' when  not matched by source and target.company IN (' + @companyPiece + ')' es el anterior
					--set @companyPiece = ' where target.company IN (' + @companyPiece + ')' -- CAMBIO PROBANDO
					set @companyPiece = ' target.company IN (' + @companyPiece + ')' -- CAMBIO PROBANDO
				end

		end try

		begin catch
			set @cursor_success = 0;
		end catch
	end
	else
		begin
			set @cursor_success = 1;

			begin try
				set @sqlStatement_Cursor = 'DECLARE companyCursor cursor for SELECT DISTINCT Company FROM ' + @sourceTable
				set @companyPiece = ''

				exec sp_executesql @sqlStatement_Cursor

				OPEN companyCursor
				FETCH NEXT FROM companyCursor
					INTO @companyNameIterator

				WHILE @@FETCH_STATUS = 0
				BEGIN
					set @companyPiece = @companyPiece + '''' + @companyNameIterator + '''' + ','

					fetch next FROM companyCursor
						INTO @companyNameIterator
				END

				close companyCursor
				deallocate companyCursor

				if len(@companyPiece) > 0
					begin
						set @companyPiece = left(@companyPiece, len(@companyPiece)-1)
						-- set @companyPiece = ' when  not matched by source and target.company IN (' + @companyPiece + ')' es el anterior
						--set @companyPiece = ' where target.company IN (' + @companyPiece + ')' -- CAMBIO PROBANDO
						set @companyPiece = ' target.company IN (' + @companyPiece + ')' -- CAMBIO PROBANDO
					end

			end try

			begin catch
				set @cursor_success = 0;
			end catch
		end

	-- ******* Generate dynamic company in () ******* --
		
	-- ******* Create the merge statement ******* --

	-- If we failed in generating the dynamic, we will not disable enable things (@cursor_success = 0). We delete "WHEN NOT MATCHED BY SOURCE part"
	-- We should log that the cursor did not work, or stop the process (Better logging)
	print('@cursor_success: ' + cast(@cursor_success as varchar(10)))
	print(char(10))
	--SET @cursor_success = 0
	if @cursor_success = 0
		begin
			Set @sSql = 'MERGE '+@targetTable+' as Target 
				Using (Select * from '+@tmpTableName+' ) source
					on target.'+@targetNKColumn+' = source.'+@sourceNKColumn+'
				When matched And (' + CHAR(10) + 'Not ('+@checkChangeColumns+') or (target.is_deleted = 1 or target.is_deleted is null or target.is_inferred = 1 or target.is_inferred is null)'+CHAR(10)+')
				then  update  
						SET '+@updateColumns+'
								'+@updateAuditColumn+ +
							', is_deleted = 0, is_inferred = 0'
							+' 
				When Not matched by target then 
					insert ('+@targetNKColumn+','+@columns+''+REPLACE(@insertAuditColumn, 'source.', '')+ ', is_deleted, is_inferred'+')
					Values ('+@sourceNKColumn+','+@columns+' '+@sourceAuditColumn+ ', 0, 0' +');'
		end
	else if @cursor_success = 1 and @deltaLoadStatement != 'WHERE 1 = 1'
		begin
			--Set @sSql = 'WITH target_filtered as (SELECT * FROM ' + @targetTable + ' as target' + @companyPiece + ') 
			--				MERGE target_filtered as Target 
			--Using (Select * from '+@tmpTableName+' ) source
			--	on target.'+@targetNKColumn+' = source.'+@sourceNKColumn+'
			--When matched And Not ('+@checkChangeColumns+') 
			--then  update  
			--		SET '+@updateColumns+'
			--				'+@updateAuditColumn+'
			--When Not matched by target 
			--then 
			--	insert ('+@targetNKColumn+','+@columns+''+REPLACE(@insertAuditColumn, 'source.', '')+')
			--	Values ('+@sourceNKColumn+','+@columns+' '+@sourceAuditColumn+');'

			Set @sSql = 'MERGE '+@targetTable+' as Target
			Using (Select * from '+@tmpTableName+' ) source
				on target.'+@targetNKColumn+' = source.'+@sourceNKColumn+'
			When matched And (' + CHAR(10) + 'Not ('+@checkChangeColumns+') or (target.is_deleted = 1 or target.is_deleted is null or target.is_inferred = 1 or target.is_inferred is null)'+CHAR(10)+')
			then  update  
					SET '+@updateColumns+'
							'+@updateAuditColumn +
							', is_deleted = 0, is_inferred = 0'
							+'
			When Not matched by target 
			then 
				insert ('+@targetNKColumn+','+@columns+''+REPLACE(@insertAuditColumn, 'source.', '')+ ', is_deleted, is_inferred' +            ')
				Values ('+@sourceNKColumn+','+@columns+' '+@sourceAuditColumn+ ', 0, 0' + ')'
				+ ' WHEN NOT MATCHED BY SOURCE AND ' + @companyPiece 
				+ ' AND target.' + @dwFilterColumnName + ' != CAST(''1900-01-01'' as DATE)' 
				+ ' AND target.' + @dwFilterColumnName + ' >= (' + @minDateQuery + ')'
				+ ' AND is_inferred = 0 THEN UPDATE SET is_deleted = 1'
				+';'
		end
	else if @cursor_success = 1 and @deltaLoadStatement = 'WHERE 1 = 1'
		begin
			--Set @sSql = 'WITH target_filtered as (SELECT * FROM ' + @targetTable + ' as target' + @companyPiece + ') 
			--				MERGE target_filtered as Target 
			--Using (Select * from '+@tmpTableName+' ) source
			--	on target.'+@targetNKColumn+' = source.'+@sourceNKColumn+'
			--When matched And Not ('+@checkChangeColumns+') 
			--then  update  
			--		SET '+@updateColumns+'
			--				'+@updateAuditColumn+'
			--When Not matched by target 
			--then 
			--	insert ('+@targetNKColumn+','+@columns+''+REPLACE(@insertAuditColumn, 'source.', '')+')
			--	Values ('+@sourceNKColumn+','+@columns+' '+@sourceAuditColumn+');'

			Set @sSql = 'MERGE '+@targetTable+' as Target
			Using (Select * from '+@tmpTableName+' ) source
				on target.'+@targetNKColumn+' = source.'+@sourceNKColumn+'
			When matched And (' + CHAR(10) + 'Not ('+@checkChangeColumns+') or (target.is_deleted = 1 or target.is_deleted is null or target.is_inferred = 1 or target.is_inferred is null)'+CHAR(10)+')
			then  update  
					SET '+@updateColumns+'
							'+@updateAuditColumn +
							', is_deleted = 0, is_inferred = 0'
							+'
			When Not matched by target 
			then 
				insert ('+@targetNKColumn+','+@columns+''+REPLACE(@insertAuditColumn, 'source.', '')+ ', is_deleted, is_inferred' +            ')
				Values ('+@sourceNKColumn+','+@columns+' '+@sourceAuditColumn+ ', 0, 0' + ')'
				+ ' WHEN NOT MATCHED BY SOURCE AND ' + @companyPiece 
				+ ' AND is_inferred = 0 THEN UPDATE SET is_deleted = 1'
				+';'
		end

	-- ******* Create the merge statement ******* --


	-- ******* Create sql detective query ******* --
	/*
	We can copy the result and change all the = into != to see which are actually the changes
	between the stage view and the target
	*/

	set @sSql_detective = 'SELECT target.' + @targetNKColumn + 
							' FROM ' + @targetTable + ' AS target
								INNER JOIN ' + @sourceTable + ' AS source ON target.' + @targetNKColumn + ' = source.' + @sourceNKColumn + 
								' WHERE ' + @checkChangeColumns;
	-- ******* Create sql detective query ******* --



	-- ******* Execute statements ******* --

	begin try 
		if @debugOnly = 0
			begin
				exec (@sSql)
				set @rowsAffected = @@rowcount
			end 
		else 
			begin
				print ('@sqlStatement_Cursor: ' + @sqlStatement_Cursor)
				print(char(10))
				print ('@companyPiece: ' + @companyPiece)
				print(char(10))
				print ('Left @sSql: ' + @sSql)
				print(char(10))
				print('Right @sSql: ' + right(@sSql,3999))
				print(char(10))
				print('Left @sSql_detective: ' + @sSql_detective)
				print(char(10))
				print('Right @sSql_detective: ' + RIGHT(@sSql_detective,3999))
				print(char(10))
			end
	End Try
	Begin Catch
		set @StatusNAme = 'FAIL'
		set @ErrorMessage = @ToTable+':'+ERROR_MESSAGE()
	End Catch

	-- ******* Execute statements ******* --
	
	
	
	-- ******* Cleaning and logging ******* --
	set @endTime = getdate() AT TIME ZONE 'UTC' AT TIME ZONE 'Central Europe Standard Time' -- Added double conversion to make sure we get the swedish timestamp /SM 2021-10-07
	if @debugOnly = 0
	begin
		--Drop temp table
		if object_id(@tmpTableName) is not null
		exec ('drop table ' + @tmpTableName)

		exec audit.writeLog @PartitionKey=@PartitionKey, @ProcName = @ProcName, @FromTable =@FromTable, @ToTable=@ToTable
						, @startTime=@startTime, @endTime=@endTime
						, @rowsAffected=@rowsAffected, @StatusName=@StatusName, @ErrorMessage=@ErrorMessage
		if @StatusName <> 'OK'
			RAISERROR(@ErrorMessage, 16, 1)
	end
	-- ******* Cleaning and logging ******* --
	
END
GO
PRINT N'Creating [stage].[vROR_SE_StockTransaction]'
GO

CREATE VIEW [stage].[vROR_SE_StockTransaction] AS 

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM(IndexKey))))) AS StockTransactionID --, '#', TRIM(Partnum), '#', TRIM(TransactionTime)
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Company])))) AS CompanyID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([PartNum]))))) AS PartID
 	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,IIF([TransactionCodeDescription] = 'Sales', CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM(SalesOrderNum))))), NULL) AS SalesOrderNumID
	,IIF([TransactionCodeDescription] = 'Purchase', CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM(PurchaseOrderNum))))), NULL) AS PurchaseOrderNumID
	,IIF([TransactionCodeDescription] = 'Sales', CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM(SalesInvoiceNum))))), NULL) AS SalesInvoiceID
	,IIF([TransactionCodeDescription] = 'Purchase', CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM(PurchaseInvoiceNum))))), NULL) AS PurchaseInvoiceID
	,IIF([TransactionCodeDescription] = 'Sales', CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM(CustomerNum))))), NULL) AS CustomerID
	,IIF([TransactionCodeDescription] = 'Purchase', CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM(SupplierNum))))), NULL) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Currency])))) AS CurrencyID
	,[PartitionKey]
    ,IndexKey

    ,UPPER(TRIM([Company])) AS Company -- 
	,UPPER(TRIM([WarehouseCode])) AS WarehouseCode
    ,UPPER(TRIM([PartNum])) AS PartNum
	,IIF([TransactionCodeDescription] = 'Sales', TRIM(SalesOrderNum), TRIM([PurchaseOrderNum])) AS OrderNum
	,IIF([TransactionCodeDescription] = 'Sales', TRIM(SalesOrderLine), TRIM([PurchaseOrderLine])) AS OrderLine
	,IIF([TransactionCodeDescription] = 'Sales', TRIM([SalesInvoiceNum]), TRIM([PurchaseInvoiceNum])) AS InvoiceNum
	,IIF([TransactionCodeDescription] = 'Sales', TRIM([SalesInvoiceLine]), TRIM([PurchaseInvoiceLine])) AS InvoiceLine
	,IIF([TransactionCodeDescription] = 'Sales', TRIM(CustomerNum), TRIM(SupplierNum)) AS IssuerReceiverNum
	,TRIM(TransactionCode) AS TransactionCode
	,TRIM([TransactionCodeDescription]) AS TransactionDescription
	,TRIM(CustomerNum) AS CustomerNum
	,TRIM(SalesOrderNum) AS SalesOrderNum
	,TRIM(SupplierNum) AS SupplierNum
	,TRIM([PurchaseOrderNum]) AS PurchaseOrderNum
	,TRIM([SalesOrderLine]) AS SalesOrderLine
	,TRIM([PurchaseOrderLine]) AS PurchaseOrderLine
    ,TRIM([SalesInvoiceNum]) AS SalesInvoiceNum
	,TRIM([PurchaseInvoiceNum]) AS PurchaseInvoiceNum
	,TRIM(SalesInvoiceLine) AS SalesInvoiceLine
    ,TRIM(BinNum) AS BinNum
    ,IIF(TRIM(BatchNum)='', NULL,TRIM(BatchNum)) AS BatchNum
	,CAST(CONCAT(LEFT(TransactionDate, 4), '-', SUBSTRING(TransactionDate, 6,2), '-', RIGHT(TransactionDate, 2)) AS date) AS TransactionDate  --convert(date, TransactionDate) AS 
	,[TransactionTime] AS TransactionTime
	,'1900-01-01' AS AdjustmentDate
	,CONVERT(decimal(18,4),REPLACE(TransactionQty, ',', '.')) AS TransactionQty 
	,CONVERT(decimal(18,4),REPLACE(TransactionValue, ',', '.')) AS TransactionValue 
	,IIF(CONVERT(decimal(18,4),REPLACE(TransactionQty, ',', '.')) = 0 OR CONVERT(decimal(18,4),REPLACE(TransactionQty, ',', '.')) IS NULL, 0,cast(CONVERT(decimal(18,4),REPLACE(TransactionValue, ',', '.'))/CONVERT(decimal(18,4),REPLACE(TransactionQty, ',', '.')) as decimal(18,4))) AS [CostPrice] 
	,NULL AS SalesUnitPrice 
	,TRIM(Currency) AS Currency
	,CONVERT(decimal(18,4),REPLACE([ExchangeRate], ',', '.')) AS [ExchangeRate]
	,IIF(IsInternalTransaction = '1', 'Internal', 'External') AS InternalExternal
	,TRIM([Reference]) AS [Reference]
	,[IsActiveRecord]
	,TRIM(STRes1) AS STRes1
	,[CreatedTimeStamp] AS STRes2
	,[ModifiedTimeStamp] AS STRes3
FROM [stage].[ROR_SE_Stocktransaction]

--UNION ALL

--SELECT 
--	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM(WarehouseCode), '#', TRIM([PartNum]), '#', TRIM(TransactionCode), '#', TRIM(TransactionDate))))) AS StockTransactionID --, '#', TRIM(Partnum), '#', TRIM(TransactionTime)
--	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Company])))) AS CompanyID
--    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([PartNum]))))) AS PartID
-- 	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
--	,IIF(TransactionCode = '1', CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', '')))), NULL) AS SalesOrderNumID
--	,IIF(TransactionCode = '6', CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', '')))), NULL) AS PurchaseOrderNumID
--	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', '')))) AS SalesInvoiceID
--	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', '')))) AS PurchaseInvoiceID
--	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', '')))) AS CustomerID
--	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', '')))) AS SupplierID
--	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Currency])))) AS CurrencyID
--	,[PartitionKey]
--    ,'' AS IndexKey

--    ,UPPER(TRIM([Company])) AS Company -- 
--	,UPPER(TRIM([WarehouseCode])) AS WarehouseCode
--    ,UPPER(TRIM([PartNum])) AS PartNum
--	,TRIM(TransactionCode) AS TransactionCode
--	,TRIM([TransactionCodeDescription]) AS TransactionDescription
--	,'' AS IssuerReceiverNum
--	,'' AS CustomerNum
--	,'' AS SalesOrderNum
--	,'' AS SupplierNum
--	,'' AS PurchaseOrderNum
--	,'' AS SalesOrderLine
--	,'' AS PurchaseOrderLine
--    ,'' AS SalesInvoiceNum
--	,'' AS PurchaseInvoiceNum
--	,'' AS SalesInvoiceLine
--    ,'' AS BinNum
--    ,'' AS BatchNum
--	,TransactionDate AS TransactionDate  --convert(date, TransactionDate) AS 
--	,'' AS TransactionTime
--	,'1900-01-01' AS AdjustmentDate
--	,CONVERT(decimal(18,4), REPLACE(TransactionQty, ',', '.')) AS TransactionQty 
--	,CONVERT(decimal(18,4), REPLACE(TransactionValue, ',', '.')) AS TransactionValue 
--	,IIF(CONVERT(decimal(18,4), REPLACE(TransactionQty, ',', '.')) = 0 OR CONVERT(decimal(18,4),REPLACE(TransactionQty, ',', '.')) IS NULL, 0,cast(CONVERT(decimal(18,4),REPLACE(TransactionValue, ',', '.'))/CONVERT(decimal(18,4),REPLACE(TransactionQty, ',', '.')) as decimal(18,4))) AS [CostPrice] 
--	,NULL AS SalesUnitPrice 
--	,TRIM(Currency) AS Currency
--	,CONVERT(decimal(18,4), REPLACE([ExchangeRate], ',', '.')) AS [ExchangeRate]
--	,IIF(CONVERT(decimal(18,4), REPLACE(TransactionQty, ',', '.')) = 0, 'Internal', 'External') AS InternalExternal
--	,TRIM([Reference]) AS [Reference]
--	,'1' AS [IsActiveRecord]
--	,'' AS STRes1
--	,'' AS STRes2
--	,'' AS STRes3
--FROM [stage].[ROR_SE_StockTransactionOB20180101]
GO
PRINT N'Creating [stage].[JEN_NO_PurchaseInvoice]'
GO
CREATE TABLE [stage].[JEN_NO_PurchaseInvoice]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaserName] [nvarchar] (100) NULL,
[OrderType] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[InvoiceType] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[PurchaseInvoiceQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CreditMemo] [nvarchar] (1) NULL,
[WarehouseCode] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vJEN_NO_PurchaseInvoice]'
GO
CREATE VIEW [stage].[vJEN_NO_PurchaseInvoice] AS
--COMMENT EMPTY FIELDS // ADD TRIM() INTO WarehouseID,PartID 2022-12-22 VA
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT 
	--CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(InvoiceNum), '#', TRIM([PartNum]), '#', TRIM([PurchaserName]), '#', TRIM(OrderDelivLineNum), '#', TRIM(OrderType) )))) AS PurchaseInvoiceID
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(OrderType), '#', TRIM(InvoiceNum), '#', TRIM(InvoiceType), '#', TRIM(WarehouseCode))))) AS PurchaseInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(PurchaseOrderSubLine), '#', TRIM(OrderType), '#', TRIM(InvoiceNum))))) AS PurchaseOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierCode))))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierCode))))) AS SupplierID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WareHouseID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(WarehouseCode))))) AS WareHouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company,'#', TRIM(SupplierCode), '#', TRIM(InvoiceNum))))) AS PurchaseLedgerID
	,CONVERT(int, replace(convert(date,InvoiceDate), '-', '')) AS PurchaseInvoiceDateID
	,UPPER(CONCAT(Company,'#',TRIM(InvoiceNum))) AS PurchaseInvoiceCode
	,UPPER(CONCAT(Company,'#',TRIM(SupplierCode),'#',TRIM(PurchaseOrderNum))) AS PurchaseOrderCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(PurchaseOrderNum) AS PurchaseOrderNum
	,TRIM(PurchaseOrderLine) AS PurchaseOrderLine
	,TRIM(PurchaseOrderSubLine) AS PurchaseOrderSubLine
	,TRIM(OrderType) AS PurchaseOrderType
	,TRIM(InvoiceNum) AS PurchaseInvoiceNum
	,TRIM(InvoiceLine) AS PurchaseInvoiceLine
	,TRIM(InvoiceType) AS PurchaseInvoiceType
	,InvoiceDate AS PurchaseInvoiceDate
	,MAX(ActualDeliveryDate) AS ActualDelivDate
	,TRIM(UPPER(SupplierCode)) AS SupplierNum
	,TRIM(UPPER([PartNum])) AS PartNum
	,SUM(PurchaseInvoiceQty) AS PurchaseInvoiceQty
	--,'' AS UoM
	,AVG(UnitPrice) AS UnitPrice
	--,0 AS DiscountPercent
	,SUM(DiscountAmount) AS DiscountAmount
	,SUM(TotalMiscChrg) AS TotalMiscChrg
	--,0 AS VATAmount
	,AVG(ExchangeRate) AS ExchangeRate
	,TRIM(CurrencyCode) AS Currency
	,TRIM(CreditMemo) AS CreditMemo
	,TRIM(PurchaserName) AS PurchaserName
	,TRIM(WarehouseCode) AS WarehouseCode
	--,'' AS PurchaseChannel
	--,'' AS Comment
	--,'' AS PIRes1
	--,'' AS PIRes2
	--,'' AS PIRes3
	--,'' AS LineType
	--,'' AS OrderDelivLineNum --
FROM stage.JEN_NO_PurchaseInvoice

GROUP BY
	PartitionKey, Company, PurchaseOrderNum, InvoiceNum, SupplierCode, PartNum, PurchaseOrderLine, PurchaseOrderSubLine, PurchaserName, InvoiceLine, InvoiceType, InvoiceDate, CreditMemo, WarehouseCode, CurrencyCode, OrderType, PurchaseOrderLine
GO
PRINT N'Creating [ext].[DimSupplier]'
GO


CREATE view [ext].[DimSupplier] AS

--this view created for CoC power application purpose. /DZ
--external consultant are Rebecka Nyström & Joel Björck @accigo.se
select [SupplierID], [CompanyID], [Company], [SupplierNum], [MainSupplierName], [SupplierName], [Supplier], [TelephoneNum], [Email], [ZipCode], [City], [District], [CountryName], [Region], [SupplierCategory], [SupplierResponsible], [AddressLine], [FullAddressLine], [AccountNum], [VATNum], [InternalExternal], [CodeOfConduct], [CoCfeedback], [CustomerNum], [SupplierScore], [MinOrderQty], [MinOrderValue], [Website], [Comments] FROM dm.DimSupplierTest
GO
PRINT N'Creating [stage].[CER_SE_Part]'
GO
CREATE TABLE [stage].[CER_SE_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartDescription] [nvarchar] (25) NULL,
[PartDescription2] [nvarchar] (25) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[ProductGroup2] [nvarchar] (50) NULL,
[CommodityCode] [nvarchar] (14) NULL,
[CountryOfOrigin] [nvarchar] (50) NULL,
[NetWeight] [decimal] (18, 8) NULL,
[SupplierCode] [nvarchar] (10) NULL,
[ReorderLevel] [decimal] (20, 8) NULL,
[EAN] [nvarchar] (50) NULL,
[GoodsType] [nvarchar] (50) NULL,
[LTMGroupOR] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_SE_Part]'
GO

CREATE VIEW [stage].[vCER_SE_Part] AS
--COMMENT empty fields / ADD TRIM(Company) into PartID VA - 12-13-2022
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM(([Company])))) AS CompanyID
	,CONCAT([Company], '#', TRIM(UPPER([PartNum]))) AS PartCode
	,PartitionKey

	,[Company]
	,TRIM(UPPER([PartNum])) AS [PartNum]
	--,'' AS [PartName]
	,[PartDescription]
	,[PartDescription2]
	--,'' AS [PartDescription3]
	--,NULL AS MainSupplier
	--,NULL AS AlternativeSupplier
	,[ProductGroup]
	,[ProductGroup2]
	,GoodsType AS [ProductGroup3] --request by Petter Wallin 20230329 ticket #SR-102535
	,LTMGroupOR AS [ProductGroup4] --request by Petter Wallin 20230329 ticket #SR-102535
	--,'' AS [Brand]
	,[CommodityCode]
	--,'' AS PartReplacementNum
	--,'' AS PartStatus
	,[CountryOfOrigin]
	,[NetWeight]
	--,'' AS UoM
	--,'' AS [Material]
	,[EAN] AS [Barcode]
	,[ReOrderLevel]
	--,'' AS PartResponsible
	--,'' AS [StartDate]
	--,'' AS [EndDate]
	--,'' AS ItemStatus
	
	

FROM [stage].[CER_SE_Part]
GO
PRINT N'Creating [dm_FH].[fctFinanceBudget]'
GO

CREATE VIEW [dm_FH].[fctFinanceBudget]	AS

SELECT  fb.[BudgetID]
,fb.[CompanyID]
,fb.[AccountID]
,fb.[CostUnitID]
,fb.[CostBearerID]
,fb.[ProjectID]
,fb.[PartitionKey]
,fb.[BudgetType]
,fb.[BudgetName]
,fb.[BudgetDescription]
,fb.[Company]
,fb.[BudgetPeriod]
,fb.[BudgetPeriodDate]
,fb.[PeriodType]
,fb.[Currency]
,fb.[BudgetFinance]
,fb.[CostBearerNum]
,fb.[CostUnitNum]
,fb.[AccountNum]
,fb.[AccountGroup]
,fb.[ProjectNum]
,fb.[BRes1]
,fb.[BRes2]
,fb.[BRes3]
,fb.[ExchangeRate]
,fb.[IsActiveRecord]
FROM [dm].[FactFinanceBudget] as fb
LEFT JOIN dbo.Company com ON fb.Company = com.Company
WHERE com.BusinessArea = 'Fluid Handling Solutions' AND com.[Status] = 'Active'

--WHERE Company IN ('CNOCERT')
GO
PRINT N'Creating [stage].[NOM_RLS]'
GO
CREATE TABLE [stage].[NOM_RLS]
(
[EmailID] [nvarchar] (200) NULL,
[Company] [nvarchar] (50) NULL,
[Name] [nvarchar] (200) NULL,
[Email] [nvarchar] (200) NULL
)
GO
PRINT N'Creating [stage].[vNOM_RLS]'
GO
CREATE VIEW [stage].[vNOM_RLS] AS

SELECT  [EmailID]
		,CONVERT(varchar, GETDATE(), 20) AS PartitionKey
      ,[Company]
      ,[Name]
      ,[Email]
	  ,'To be defined'	AS RLSType
  FROM stage.NOM_RLS
GO
PRINT N'Creating [stage].[ROR_SE_PurchaseLedger]'
GO
CREATE TABLE [stage].[ROR_SE_PurchaseLedger]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL,
[IsActiveRecord] [nvarchar] (50) NULL,
[PurchaseInvoiceDate] [nvarchar] (50) NULL,
[IsInvoiceClosed] [nvarchar] (50) NULL,
[VATAmount] [nvarchar] (50) NULL,
[InvoiceAmount] [nvarchar] (50) NULL,
[SupplierInvoiceNum] [nvarchar] (50) NULL,
[PurchaseDueDate] [nvarchar] (50) NULL,
[PurchaseLastPaymentDate] [nvarchar] (50) NULL,
[PaidInvoiceAmount] [nvarchar] (50) NULL,
[RemainingInvoiceAmount] [nvarchar] (50) NULL,
[AccountingDate] [nvarchar] (50) NULL,
[PaymentTerms] [nvarchar] (50) NULL,
[LinktoOriginalInvoice] [nvarchar] (50) NULL,
[VATCode] [nvarchar] (50) NULL,
[VATCodeDesc] [nvarchar] (max) NULL,
[CostUnitNum] [nvarchar] (50) NULL,
[PayToName] [nvarchar] (50) NULL,
[PayToCity] [nvarchar] (50) NULL,
[PayToContact] [nvarchar] (50) NULL,
[PaymentEvents] [nvarchar] (50) NULL,
[PLRes1] [nvarchar] (100) NULL,
[PLRes2] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vROR_SE_PurchaseLedger]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vROR_SE_PurchaseLedger] AS 

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum)  )))) AS PurchaseLedgerID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(Company)))) AS CompanyID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum))))) AS SupplierID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseInvoiceNum))))) AS PurchaseInvoiceID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM(Currency)))) AS CurrencyID
	,CONVERT(int, replace(convert(date,PurchaseInvoiceDate),'-','')) AS PurchaseInvoiceDateID 
	,UPPER(CONCAT(Company, '#', TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum))) AS PurchaseLedgerCode 
	,[PartitionKey]

	,UPPER([Company]) AS [Company]
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
	,TRIM([PurchaseOrderNum]) AS [PurchaseOrderNum]
	,TRIM([PurchaseInvoiceNum]) AS [PurchaseInvoiceNum]
	,SupplierInvoiceNum
	,CONVERT(date, PurchaseInvoiceDate) AS PurchaseInvoiceDate
	,CONVERT(date, PurchaseDueDate) AS PurchaseDueDate
	,CONVERT(date, PurchaseLastPaymentDate) AS PurchaseLastPaymentDate
	,CONVERT(decimal(18,4), REPLACE(InvoiceAmount, ',', '.')) AS [InvoiceLCYAmount] 
	,CONVERT(decimal(18,4), REPLACE(InvoiceAmount, ',', '.')) AS InvoiceAmount
	,IIF([Currency] = 'SEK', 1, CONVERT(decimal(18,4), REPLACE(ExchangeRate, ',', '.'))) AS ExchangeRate 
	,IIF([Currency] = '€UR','EUR',trim([Currency])) As [Currency]
	,CONVERT(decimal(18,4), REPLACE(VATAmount, ',', '.')) AS VATAmount
	,TRIM(VATCode) AS VATCode
	,TRIM([PayToName]) AS [PayToName]
	,IsInvoiceClosed
	,[IsActiveRecord]
	,[PayToCity]
	,[PayToContact]
	,TRIM(PaymentTerms) AS PaymentTerms
	--,'' AS [PrepaymentNum]
	--,'' AS LastPaymentNum
	,CONVERT(decimal(18,4), REPLACE(PaidInvoiceAmount, ',', '.')) AS PaidInvoiceAmount
	,CONVERT(decimal(18,4), REPLACE(RemainingInvoiceAmount, ',', '.')) AS RemainingInvoiceAmount
	,LinkToOriginalInvoice
	,CONVERT(date, AccountingDate) AS AccountingDate
	--,NULL AS AgingPeriod
	--,NULL AS AgingSort
	,CostUnitNum
	,'' AS ProjectNum
	,VATCodeDesc AS VATCodeDesc
	,ModifiedTimeStamp AS PLRES1
	,CreatedTimeStamp AS PLRES2
	--,'' AS PLRES3
FROM 
	[stage].[ROR_SE_PurchaseLedger]
GO
PRINT N'Creating [prestage].[CYE_ES_Supplier]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [prestage].[CYE_ES_Supplier]
(
[Company] [nvarchar] (8) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[MainSupplierName] [nvarchar] (100) NULL,
[SupplierName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[TelephoneNum] [nvarchar] (50) NULL,
[Email] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[City] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[Region] [nvarchar] (50) NULL,
[SupplierCategory] [nvarchar] (50) NULL,
[SupplierResponsible] [nvarchar] (50) NULL,
[AccountNum] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[VATNum] [nvarchar] (50) NULL,
[CodeOfConduct] [nvarchar] (50) NULL,
[SupplierScore] [nvarchar] (50) NULL,
[MinOrderQty] [decimal] (18, 0) NULL,
[MinOrderValue] [decimal] (18, 0) NULL,
[Website] [nvarchar] (50) NULL,
[Comments] [nvarchar] (500) NULL,
[SRes1] [nvarchar] (50) NULL,
[SRes2] [nvarchar] (50) NULL,
[SRes3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [prestage].[vCYE_ES_Supplier]'
GO
CREATE view [prestage].[vCYE_ES_Supplier] AS

SELECT 
	concat(CONVERT (date, SYSDATETIME()), ' 00:00:00') AS [PartitionKey]
	,'CYESA' AS [Company]
	,[SupplierNum]
	,MainSupplierName
	,SupplierName
	,AddressLine1
	,AddressLine2
	,AddressLine3
	,TelephoneNum
	,Email
	,ZipCode
	,City
	,District
	,CountryCode
	,CountryName
	,Region
	,SupplierCategory
	,SupplierResponsible
	,AccountNum
	,InternalExternal
	,VATNum
	,CodeOfConduct
	,SupplierScore
	,MinOrderQty
	,MinOrderValue
	,Website
	,Comments
	,SRes1
	,SRes2
	,SRes3
FROM [prestage].[CYE_ES_Supplier]
GO
PRINT N'Creating [prestage].[CYE_ES_Supplier_Load]'
GO
CREATE PROCEDURE [prestage].[CYE_ES_Supplier_Load] AS

BEGIN

Truncate table stage.[CYE_ES_Supplier]

INSERT INTO 
	stage.CYE_ES_Supplier
	(
	[PartitionKey], [Company], [SupplierNum], MainSupplierName, SupplierName, AddressLine1, AddressLine2, AddressLine3, TelephoneNum, Email, ZipCode, City, District, CountryCode, CountryName, Region, SupplierCategory, SupplierResponsible, AccountNum, InternalExternal, VATNum, CodeOfConduct, SupplierScore, MinOrderQty, MinOrderValue, Website, Comments, SRes1, SRes2, SRes3
	)
SELECT 
	[PartitionKey], [Company], [SupplierNum], MainSupplierName, SupplierName, AddressLine1, AddressLine2, AddressLine3, TelephoneNum, Email, ZipCode, City, District, CountryCode, CountryName, Region, SupplierCategory, SupplierResponsible, AccountNum, InternalExternal, VATNum, CodeOfConduct, SupplierScore, MinOrderQty, MinOrderValue, Website, Comments, SRes1, SRes2, SRes3
FROM 
	[prestage].[vCYE_ES_Supplier]

End
GO
PRINT N'Creating [stage].[AXL_PL_SOLine]'
GO
CREATE TABLE [stage].[AXL_PL_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[InvoiceType] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (22, 8) NULL,
[UnitCost] [decimal] (22, 8) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[VAT] [decimal] (18, 4) NULL,
[CashDiscountOffered] [decimal] (18, 4) NULL,
[CashDiscountUsed] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OrderType] [nvarchar] (50) NULL,
[SalesChannel] [varchar] (10) NULL,
[BusinessChain] [varchar] (10) NULL,
[Res1] [varchar] (100) NULL,
[Res2] [varchar] (100) NULL,
[Res3] [varchar] (100) NULL,
[PartDesc] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[vAXL_PL_SOLine]'
GO
CREATE VIEW [stage].[vAXL_PL_SOLine] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine), '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(PartNum), '#', TRIM(PartDesc))))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(PartDesc))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(InvoiceNum))))) AS SalesLedgerID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum), '#', (IIF(TRIM([PartNum]) LIKE 'IACO%' , 'MISC. CHARGES', TRIM([PartDesc]))))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT(int, IIF(InvoiceDate = '', 19900101, replace(convert(date, InvoiceDate), '-', ''))) AS SalesInvoiceDateID
	,UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine))) AS SalesInvoiceCode
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine))) AS SalesOrderCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(SalesPerson) AS SalesPersonName
	,TRIM(CustNum) AS [CustomerNum]
	,TRIM(PartNum) AS PartNum
	,UPPER(PartDesc) AS PartDesc
	,'' AS [PartType]
	,TRIM(OrderNum) AS [SalesOrderNum]
	,CAST(OrderLine AS text) AS [SalesOrderLine]
	,TRIM(OrderSubLine) AS [SalesOrderSubLine]
	,TRIM(OrderType) AS [SalesOrderType]
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,TRIM(InvoiceLine) AS [SalesInvoiceLine]
	,TRIM(InvoiceType) AS [SalesInvoiceType]
	,CASE WHEN InvoiceDate = '' THEN '1900-01-01' ELSE CONVERT(date, InvoiceDate) END AS [SalesInvoiceDate]
	,ActualDeliveryDate AS [ActualDelivDate]
	,SellingShipQty AS [SalesInvoiceQty]
	,TRIM(Unit) AS [UoM]
	,UnitPrice
	,UnitCost
	,DiscountAmount
	,IIF(UnitPrice*SellingShipQty = 0, 0, DiscountAmount/UnitPrice*SellingShipQty) AS DiscountPercent
	,CONVERT(decimal(18,4), CashDiscountOffered) AS [CashDiscOffered] 
	,CONVERT(decimal(18,4), CashDiscountUsed) AS [CashDiscUsed] 
	,TotalMiscChrg
	,VAT AS [VATAmount]
	,Currency
	,ExchangeRate
	,TRIM(CreditMemo) AS CreditMemo
	,TRIM([SalesChannel]) AS [SalesChannel]
	,TRIM([BusinessChain]) AS [Department]
	,TRIM(WarehouseCode) AS WarehouseCode
	,NULL AS [CostBearerNum]
	,NULL AS [CostUnitNum]
	,NULL AS [ReturnComment]
	,NULL AS [ReturnNum]
	,NULL AS [ProjectNum]
	,'' AS [IndexKey]
	,Res1 AS SIRes1
	,Res2 AS SIRes2
	,Res3 AS SIRes3
FROM stage.AXL_PL_SOLine


	--,CASE WHEN OrderType = 'MD' THEN 1 
	--		WHEN OrderType = 'MT' THEN 2
	--		WHEN OrderType = 'MR' THEN 3
	--		WHEN OrderType = 'IV' THEN 4
	--		WHEN OrderType = 'Misc. Charges' THEN 5 --added after Ulf changes in the night /DZ
	--	ELSE OrderType END AS [SalesOrderType]

--GROUP BY
--	PartitionKey, Company, SalesPerson, CustNum, PartNum, PartDesc, OrderNum, OrderLine, OrderSubLine,OrderType, InvoiceNum, InvoiceLine, InvoiceDate, SellingShipQty, UnitPrice, UnitCost, DiscountAmount, TotalMiscChrg, WarehouseCode, CreditMemo, ActualDeliveryDate, Currency, ExchangeRate, InvoiceType, Res1, Res2, Res3, Unit, VAT, SalesChannel, BusinessChain, CashDiscountOffered, CashDiscountUsed
GO
PRINT N'Creating [stage].[NOM_NO_Part]'
GO
CREATE TABLE [stage].[NOM_NO_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PartNum] [nvarchar] (50) NOT NULL,
[PartDescription] [nvarchar] (max) NULL,
[PartDescription2] [nvarchar] (max) NULL,
[ProductGroup] [nvarchar] (100) NULL,
[ProductGroup2] [nvarchar] (100) NULL,
[ProductGroup3] [nvarchar] (100) NULL,
[ProductGroup4] [nvarchar] (100) NULL,
[CommodityCode] [nvarchar] (50) NULL,
[CountryOfOrigin] [nvarchar] (50) NULL,
[PartResponsible] [nvarchar] (50) NULL,
[NetWeight] [decimal] (18, 8) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[ParentSupplier] [nvarchar] (50) NULL,
[ReorderLevel] [decimal] (18, 8) NULL,
[DiscountGroup] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vNOM_NO_Part]'
GO
CREATE VIEW [stage].[vNOM_NO_Part] AS
--COMMENT EMPTY FIELDS 23-01-09 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(vp.[Company]),'#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(vp.[Company])))) AS CompanyID
	,UPPER(CONCAT(TRIM(vp.[Company]),'#',TRIM([PartNum]))) AS PartCode
	,PartitionKey

	,UPPER(TRIM(vp.[Company])) AS Company
	,UPPER(TRIM([PartNum])) AS PartNum
	--,'' AS [PartName]
	,[PartDescription]
	,[PartDescription2]
	,DiscountGroup AS [PartDescription3]
	,CONCAT(TRIM(vp.SupplierCode), '-', TRIM(vs.SupplierName)) AS MainSupplier
	,ParentSupplier AS AlternativeSupplier
	,[ProductGroup]
	,[ProductGroup2]
	,[ProductGroup3]
	,[ProductGroup4]
	--,'' AS [Brand]
	,[CommodityCode]
	--,'' AS PartReplacementNum
	--,'' AS PartStatus
	,[CountryOfOrigin]
	,[NetWeight]
	--,'' AS [UoM]
	--,'' AS [Material]
	--,'' AS [Barcode]
	,[ReOrderLevel]
	,PartResponsible
	--,'' AS [StartDate]
	--,'' AS [EndDate]
FROM [stage].[NOM_NO_Part] vp
LEFT JOIN  [dw].[vAll_Supplier] vs ON vp.Company = vs.Company AND vp.SupplierCode = vs.SupplierNum
--GROUP BY
--	PartitionKey, vp.Company, PartNum, PartDescription, PartDescription2, ProductGroup, ProductGroup2, ProductGroup3, ProductGroup4, CommodityCode, CountryOfOrigin, NetWeight, ReorderLevel, PartResponsible, DiscountGroup, SupplierCode
GO
PRINT N'Creating [ext].[DimDnB]'
GO
CREATE VIEW [ext].[DimDnB] AS

SELECT 
 Entity
,Entity_DUNS
,Entity_Name
,Entity_Name_Registered
,LegalFormDescription
,LegalFormDescription_Registered
,LegalFormStartDate
,ControlOwnershipDescription
,ControlOwnershipDate
,FinancialStatementDate
,FinancialCurrency
,FinancialRevenueFY
,Continent
,Country
,State
,City
,PostalArea
,PostalCode
,Address
,Address_Latitude
,Address_Longitude
,IndustrySegment_Level_1
,IndustrySegment_Level_2
,IndustrySegment_Level_3
,IndustrySegment_Level_4
,IndustrySegment_Level_5
,IndustryCode
,is_AxInterInternal
,GlobalOwner_DUNS
,GlobalOwner_Name
,DomesticOwner_DUNS
,DomesticOwner_Name
,ParentEntity_DUNS
,ParentEntity_Name
,Headquarter_DUNS
,Headquarter_Name
,CorporateHierarchyRole
,CorporateHierarchyLevel
,is_HoldingCompany
,is_Standalone
,OperatingStatus
,NumberOfEmployees
FROM dnb.dimDnB
GO
PRINT N'Creating [stage].[vAXI_HQ_SalesLedger]'
GO


/****** Script for SelectTopNRows command from SSMS  ******/
CREATE VIEW [stage].[vAXI_HQ_SalesLedger] AS 
SELECT 
	  CONVERT(binary(32), HASHBYTES('SHA2_256', CONCAT(Company, '#', SalesInvoiceNum, '#', CustomerNum ))) AS SalesLedgerID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', CustomerNum ))) AS CustomerID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company,'#', '' ))) AS ProjectID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256', CONCAT(Company, '#', SalesInvoiceNum ))) AS SalesInvoiceID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256', CONCAT(Company, '#', '' ))) AS SalesOrderNumID
	  ,CONVERT(binary(32), HASHBYTES('SHA2_256',Company)) AS CompanyID
	  ,CONVERT([binary](32), HASHBYTES('SHA2_256', Currency)) AS CurrencyID
	  ,CONVERT(int, replace(convert(date, SalesInvoiceDate), '-', '')) AS SalesInvoiceDateID
	  ,CONCAT(Company, '#', SalesInvoiceNum, '#', CustomerNum ) AS SalesLedgerCode
	  ,CONVERT(varchar, GETDATE(), 23) AS PartitionKey

	  ,[Company]
      ,[CustomerNum]
      ,[SalesInvoiceNum]
      ,[SalesInvoiceDate]
      ,[SalesDueDate]
      ,[SalesLastPaymentDate]
      ,[InvoiceAmount]
      ,[PaidInvoiceAmount]
      ,[RemainingInvoiceAmount]
      ,CAST(COALESCE(InvoiceAmountLC/NULLIF([InvoiceAmount],0),[ExchangeRate]) AS decimal(18,8)) AS  [ExchangeRate]
      ,[Currency]
      ,[VATAmount]
      ,[VATCode]
      ,[VATCodeDesc]
      ,[PayToName]
      ,[PayToCity]
      ,[PayToContact]
      ,[PaymentTerms]
      ,[SLRes1]
      ,[SLRes2]
      ,[SLRes3]
      ,[AccountingDate]
--      ,[AgingPeriod]
--	  ,NULL AS AgingSort
	  	,CASE WHEN [RemainingInvoiceAmount] <>0 AND DATEDIFF(DAY, [SalesDueDate], GETDATE())<-7 THEN 'Not Due Yet'
		WHEN [RemainingInvoiceAmount] <>0 AND DATEDIFF(DAY, [SalesDueDate], GETDATE()) BETWEEN -7 AND 0 THEN 'Due in (0-7)'
		WHEN [RemainingInvoiceAmount] <>0 AND DATEDIFF(DAY, [SalesDueDate], GETDATE())BETWEEN 1 AND 14 THEN 'Overdue (1-14)'
		WHEN [RemainingInvoiceAmount] <>0 AND DATEDIFF(DAY, [SalesDueDate], GETDATE())BETWEEN 15 AND 30 THEN 'Overdue (15-30)'
		WHEN [RemainingInvoiceAmount] <>0 AND DATEDIFF(DAY, [SalesDueDate], GETDATE())BETWEEN 31 AND 60 THEN 'Overdue (31-60)'
		WHEN [RemainingInvoiceAmount] <>0 AND DATEDIFF(DAY, [SalesDueDate], GETDATE())> 60 THEN 'Overdue (60>)'
		WHEN [RemainingInvoiceAmount] =0 THEN 'Settled'
		ELSE '' END AS [AgingPeriod]
	,CASE WHEN [RemainingInvoiceAmount] <>0 AND DATEDIFF(DAY, [SalesDueDate], GETDATE())<-7 THEN 0
		WHEN [RemainingInvoiceAmount] <>0 AND DATEDIFF(DAY, [SalesDueDate], GETDATE()) BETWEEN -7 AND 0 THEN 1
		WHEN [RemainingInvoiceAmount] <>0 AND DATEDIFF(DAY, [SalesDueDate], GETDATE()) BETWEEN 1 AND 14 THEN 2
		WHEN [RemainingInvoiceAmount] <>0 AND DATEDIFF(DAY, [SalesDueDate], GETDATE()) BETWEEN 15 AND 30 THEN 3
		WHEN [RemainingInvoiceAmount] <>0 AND DATEDIFF(DAY, [SalesDueDate], GETDATE()) BETWEEN 31 AND 60 THEN 4
		WHEN [RemainingInvoiceAmount] <>0 AND DATEDIFF(DAY, [SalesDueDate], GETDATE())>60 THEN 5
		WHEN [RemainingInvoiceAmount] =0 THEN 6
		ELSE '' END AS [AgingSort]
--	  ,SLLink.LinkToOriginalInvoice
  FROM [stage].[AXI_HQ_SalesLedger] AS SL
  where upper(SL.Company) = 'AXISE'
   -- LEFT JOIN ( SELECT DISTINCT 
			--SalesInvoiceNum AS SIM
			--,LinkToOriginalInvoice 
			--FROM [stage].[AXI_HQ_GeneralLedger]
			--where SalesInvoiceNum IS NOT NULL ) AS SLLink	ON SLLink.SIM = SL.SalesInvoiceNum
GO
PRINT N'Creating [dm_FH].[fctSalesLedger]'
GO
CREATE VIEW [dm_FH].[fctSalesLedger] AS 

SELECT 
 sl.[SalesLedgerID]
,sl.[SalesPersonNameID]
,sl.[Company]
,sl.[CustomerNum]
,sl.[SalesInvoiceNum]
,sl.[SalesInvoiceDate]
,sl.[SalesDueDate]
,sl.[SalesLastPaymentDate]
,sl.[InvoiceAmount]
,sl.[RemainingInvoiceAmount]
,sl.[ExchangeRate]
,sl.[Currency]
,sl.[VATAmount]
,sl.[VATCode]
,sl.[PayToName]
,sl.[PayToCity]
,sl.[PayToContact]
,sl.[PaymentTerms]
,sl.[SLRes1]
,sl.[SLRes2]
,sl.[SLRes3]
,sl.[SalesLedgerCode]
,sl.[CompanyID]
,sl.[PartitionKey]
,sl.[PaidInvoiceAmount]
,sl.[AccountingDate]
,sl.[AgingPeriod]
,sl.[AgingSort]
,sl.[VATCodeDesc]
,sl.[CustomerID]
,sl.[LinkToOriginalInvoice]
,sl.[SalesInvoiceDateID]
,sl.[PaymentStatus]
,sl.[WarehouseID]
FROM [dm].[FactSalesLedger] sl
LEFT JOIN dbo.Company com ON sl.Company = com.Company
WHERE com.BusinessArea = 'Fluid Handling Solutions' AND com.[Status] = 'Active'
GO
PRINT N'Creating [stage].[JEN_DK_CustomerAgreement]'
GO
CREATE TABLE [stage].[JEN_DK_CustomerAgreement]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[AgreementCode] [nvarchar] (50) NULL,
[AgreementDescription] [nvarchar] (50) NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DelivTime] [nvarchar] (10) NULL,
[Currency] [nvarchar] (10) NULL,
[AgreementStart] [date] NULL,
[AgreementEnd] [date] NULL
)
GO
PRINT N'Creating [stage].[vJEN_DK_CustomerAgreement]'
GO
CREATE VIEW [stage].[vJEN_DK_CustomerAgreement] AS 
--COMMENT EMPTY FIELDS 22-12-29 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company], '#', TRIM(AgreementCode), '#', TRIM([PartNum]), '#', TRIM(CustomerNum))))) AS CustomerAgreementID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID  
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Currency])))) AS CurrencyID
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM(CustomerNum)) AS CustomerNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,TRIM(AgreementCode) AS AgreementCode
	,TRIM(AgreementDescription) AS AgreementDescription
	,DiscountPercent
	,MAX([UnitPrice]) AS [UnitPrice]
	--,0 AS AgreementQty
	,UPPER(TRIM([Currency])) AS Currency
	,[DelivTime]
	,AgreementStart
	,AgreementEnd
	--,'' AS CustomerTerms
	--,0	AS FulfilledQty
	--,0  AS RemainingQty
	--,''	AS UoM
	--,'' AS CARes1
	--,'' AS CARes2
	--,'' AS CARes3
FROM 
	[stage].[JEN_DK_CustomerAgreement]
GROUP BY [PartitionKey], [Company], AgreementCode, AgreementDescription, [Currency], [PartNum], CustomerNum, [DiscountPercent], [DelivTime], AgreementStart, AgreementEnd
--WHERE 
--	RecordType = 'D'
GO
PRINT N'Creating [stage].[CER_UK_Warehouse]'
GO
CREATE TABLE [stage].[CER_UK_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL,
[WarehouseDistrict] [nvarchar] (50) NULL,
[WarehouseAddress] [nvarchar] (100) NULL,
[WarehouseType] [nvarchar] (50) NULL,
[WarehouseCountry] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_UK_Warehouse]'
GO
CREATE VIEW [stage].[vCER_UK_Warehouse] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([WarehouseCode])) AS [WarehouseCode]
	,[WarehouseName]
	,[WarehouseDistrict]
	,[WarehouseAddress]
	--,'' AS [WarehouseDescription]
	,[WarehouseType]
	,[WarehouseCountry]
	--,'' AS [WarehouseSite]
FROM [stage].[CER_UK_Warehouse]

GROUP BY 
	PartitionKey,[Company],[WarehouseCode],[WarehouseName],[WarehouseDistrict],[WarehouseAddress],[WarehouseType],[WarehouseCountry]
GO
PRINT N'Creating [prestage].[TRA_FR_Warehouse]'
GO
CREATE TABLE [prestage].[TRA_FR_Warehouse]
(
[Prop_0] [nvarchar] (8) NOT NULL,
[Prop_1] [nvarchar] (50) NOT NULL,
[Prop_2] [nvarchar] (100) NULL,
[Prop_3] [nchar] (10) NULL,
[Prop_4] [nchar] (10) NULL,
[Prop_5] [nchar] (10) NULL,
[Prop_6] [nchar] (10) NULL,
[Prop_7] [nchar] (10) NULL,
[Prop_8] [nchar] (10) NULL,
[Prop_9] [nchar] (10) NULL
)
GO
PRINT N'Creating [prestage].[vTRA_FR_Warehouse]'
GO

CREATE VIEW [prestage].[vTRA_FR_Warehouse] AS

SELECT 
	CONCAT(CONVERT (date, SYSDATETIME()), ' 00:00:00') AS [PartitionKey]
	,Prop_0 AS [Company]
	,Prop_1 AS [WarehouseCode]
	,Prop_2 AS [WarehouseName]
FROM [prestage].[TRA_FR_Warehouse]
GO
PRINT N'Creating [prestage].[TRA_FR_Warehouse_Load]'
GO

CREATE PROCEDURE [prestage].[TRA_FR_Warehouse_Load] AS
BEGIN

Truncate table stage.[TRA_FR_Warehouse]

INSERT INTO 
	stage.TRA_FR_Warehouse 
	(PartitionKey, Company, WarehouseCode, WarehouseName)
SELECT 
	PartitionKey, Company, WarehouseCode, WarehouseName
FROM 
	[prestage].[vTRA_FR_Warehouse]

--Truncate table prestage.[TRA_FR_Warehouse]

End
GO
PRINT N'Creating [stage].[AXL_NO_OLine]'
GO
CREATE TABLE [stage].[AXL_NO_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[NeedbyDate] [date] NULL,
[ExpDelivDate] [date] NULL,
[EDCExpDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (10) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[SalesPerson] [nvarchar] (50) NULL,
[WareHouseCode] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[BusinessChain] [nvarchar] (50) NULL,
[SalesOrderCategory] [nvarchar] (100) NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL,
[PartDesc] [nvarchar] (max) NULL,
[APV_Cost_EUR] [nvarchar] (50) NULL,
[APV_Item] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXL_NO_OLine]'
GO
CREATE VIEW [stage].[vAXL_NO_OLine] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(PartDesc))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum), '#', (IIF(TRIM([PartNum]) LIKE 'IACO%' , 'MISC. CHARGES', TRIM(PartDesc) )) )))) AS PartID
	,CONVERT(int, replace(convert(date, OrderDate), '-', '')) AS SalesOrderDateID
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine))) AS SalesOrderCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(CustNum) AS CustomerNum 
	,TRIM(OrderNum) AS [SalesOrderNum]
	,TRIM(OrderLine) AS [SalesOrderLine]
	,TRIM(OrderSubLine) AS [SalesOrderSubLine]
	,CONVERT(nvarchar(50), TRIM(OrderType)) AS [SalesOrderType]
	,TRIM([SalesOrderCategory]) AS [SalesOrderCategory]
	,OrderDate AS [SalesOrderDate]
	,NeedbyDate
	,ExpDelivDate AS [ExpDelivDate]
	,EDCExpDelivDate
	,ActualDelivDate
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,OrderQty AS [SalesOrderQty]
	,DelivQty
	,RemainingQty
	,Unit AS [UoM]
	,UnitPrice
	,UnitCost
	,LEFT(TRIM(Currency), 3) AS Currency
	,ExchangeRate
	,LEFT(TRIM(OpenRelease), 1) AS OpenRelease
	,DiscountAmount
	,DiscountPercent
	,NULL AS CashDiscOffered
	,NULL AS CashDiscUsed
	,TRIM(PartNum) AS PartNum
	,UPPER(PartDesc) AS PartDesc
	,'' AS [PartType]
	,CONVERT(nvarchar(50), PartStatus) AS PartStatus
	,TRIM(SalesPerson) AS [SalesPersonName]
	,TRIM(WareHouseCode) AS WarehouseCode
	,'' AS IndexKey
	,TRIM(SalesChannel) AS SalesChannel
	,TRIM(BusinessChain) AS [Department]
	,Res3 AS [ProjectNum] -- = FreeOfCharge: Y = yes, N = no
	,'' AS Cancellation
	,Res1 AS SORes1
	,Res2 AS SORes2
	,Res3 AS SORes3
FROM stage.AXL_NO_OLine
WHERE OrderDate >= '2015-01-01'
GROUP BY Company, CustNum, OrderNum, OrderLine, OrderSubLine, OrderType, [SalesOrderCategory], OrderDate, NeedbyDate, ExpDelivDate, EDCExpDelivDate, ActualDelivDate, InvoiceNum, OrderQty, DelivQty, RemainingQty, Unit, UnitPrice, UnitCost, Currency, ExchangeRate, OpenRelease, DiscountAmount, DiscountPercent, PartNum, PartDesc, PartStatus, SalesPerson, WareHouseCode, SalesChannel, BusinessChain, Res3, Res2, Res1, PartitionKey
GO
PRINT N'Creating [stage].[vAXL_CZ_SOLine]'
GO
CREATE VIEW [stage].[vAXL_CZ_SOLine] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine), '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(PartNum), '#', TRIM(PartDesc))))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(PartDesc))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(InvoiceNum))))) AS SalesLedgerID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum), '#', (IIF(TRIM([PartNum]) LIKE 'IACO%' , 'MISC. CHARGES', TRIM([PartDesc]))))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT(int, IIF(InvoiceDate = '', 19900101, replace(convert(date, InvoiceDate), '-', ''))) AS SalesInvoiceDateID
	,UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine))) AS SalesInvoiceCode
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine))) AS SalesOrderCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(SalesPerson) AS SalesPersonName
	,TRIM(CustNum) AS [CustomerNum]
	,TRIM(PartNum) AS PartNum
	,UPPER(PartDesc) AS PartDesc
	,'' AS [PartType]
	,TRIM(OrderNum) AS [SalesOrderNum]
	,CAST(OrderLine AS text) AS [SalesOrderLine]
	,TRIM(OrderSubLine) AS [SalesOrderSubLine]
	,TRIM(OrderType) AS [SalesOrderType]
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,TRIM(InvoiceLine) AS [SalesInvoiceLine]
	,TRIM(InvoiceType) AS [SalesInvoiceType]
	,CASE WHEN InvoiceDate = '' THEN '1900-01-01' ELSE CONVERT(date, InvoiceDate) END AS [SalesInvoiceDate]
	,ActualDeliveryDate AS [ActualDelivDate]
	,SellingShipQty AS [SalesInvoiceQty]
	,TRIM(Unit) AS [UoM]
	,UnitPrice
	,UnitCost
	,DiscountAmount
	,IIF(UnitPrice*SellingShipQty = 0, 0, DiscountAmount/UnitPrice*SellingShipQty) AS DiscountPercent
	,CONVERT(decimal(18,4), CashDiscountOffered) AS [CashDiscOffered] 
	,CONVERT(decimal(18,4), CashDiscountUsed) AS [CashDiscUsed] 
	,TotalMiscChrg
	,VAT AS [VATAmount]
	,Currency
	,ExchangeRate
	,TRIM(CreditMemo) AS CreditMemo
	,TRIM([SalesChannel]) AS [SalesChannel]
	,TRIM([BusinessChain]) AS [Department]
	,TRIM(WarehouseCode) AS WarehouseCode
	,NULL AS [CostBearerNum]
	,NULL AS [CostUnitNum]
	,NULL AS [ReturnComment]
	,NULL AS [ReturnNum]
	,NULL AS [ProjectNum]
	,'' AS [IndexKey]
	,Res1 AS SIRes1
	,Res2 AS SIRes2
	,Res3 AS SIRes3
FROM stage.AXL_CZ_SOLine


	--,CASE WHEN OrderType = 'MD' THEN 1 
	--		WHEN OrderType = 'MT' THEN 2
	--		WHEN OrderType = 'MR' THEN 3
	--		WHEN OrderType = 'IV' THEN 4
	--		WHEN OrderType = 'Misc. Charges' THEN 5 --added after Ulf changes in the night /DZ
	--	ELSE OrderType END AS [SalesOrderType]

--GROUP BY
--	PartitionKey, Company, SalesPerson, CustNum, PartNum, PartDesc, OrderNum, OrderLine, OrderSubLine,OrderType, InvoiceNum, InvoiceLine, InvoiceDate, SellingShipQty, UnitPrice, UnitCost, DiscountAmount, TotalMiscChrg, WarehouseCode, CreditMemo, ActualDeliveryDate, Currency, ExchangeRate, InvoiceType, Res1, Res2, Res3, Unit, VAT, SalesChannel, BusinessChain, CashDiscountOffered, CashDiscountUsed
GO
PRINT N'Creating [ext].[DnBSupplier_new]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [ext].[DnBSupplier_new]
	AS 
		
	WITH joined_tables AS (
	SELECT DUNS
	, supp.SupplierName
	, supp.SupplierNum
	, supp.Company
	, IIF(c.CompanyLegalName is null, c.CompanyName, c.CompanyLegalName) as CompanyName
	FROM dnb.DnBCustomerAndSupplier as dnb
	INNER JOIN dw.Supplier as supp
		on supp.SupplierID = dnb.dw_id 
		and dnb.is_customer = 0
	LEFT JOIN dbo.Company as c
		on supp.Company = c.Company
	WHERE dnb.DUNS IS NOT NULL
	), result as (
	SELECT DUNS
	, STUFF((
		SELECT ' | ' + SupplierName
		FROM joined_tables jt
		WHERE DUNS = t.DUNS
		FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 3, '') 
	as Names
	,STUFF((
		SELECT ' | ' + Company
		FROM joined_tables jt
		WHERE DUNS = t.DUNS
		FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 3, '') 
	as Companies
	,STUFF((
		SELECT ' | ' + SupplierNum
		FROM joined_tables jt
		WHERE DUNS = t.DUNS
		FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 3, '') 
	as Companies_Num
	,STUFF((
		SELECT ' | ' + CompanyName
		FROM joined_tables jt
		WHERE DUNS = t.DUNS
		FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 3, '') 
	as CompanyNames
	, COUNT(1) as rows
	FROM joined_tables t
	GROUP BY DUNS
	)
	SELECT 
	r.DUNS
	,m.[organization.primaryName] as DnB_Name
	,r.Names
	,r.Companies as CompanyCodes
	,r.CompanyNames
	,r.Companies_Num as Suppliers_Num
	,CASE WHEN duns_signed.DUNS IS NULL then 0 else 1 end as CoC_DUNS_signed
	FROM result AS r
	LEFT JOIN [ext].[CoC_DUNS_sign] as duns_signed
		on duns_signed.DUNS = r.DUNS
	LEFT JOIN dnb.MasterTable as m
		on r.DUNS = m.duns
	;
GO
PRINT N'Creating [stage].[AXL_PT_SOLine]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[AXL_PT_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[InvoiceType] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (22, 8) NULL,
[UnitCost] [decimal] (22, 8) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[VAT] [decimal] (18, 4) NULL,
[CashDiscountOffered] [decimal] (18, 4) NULL,
[CashDiscountUsed] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OrderType] [nvarchar] (50) NULL,
[SalesChannel] [varchar] (10) NULL,
[BusinessChain] [varchar] (10) NULL,
[Res1] [varchar] (100) NULL,
[Res2] [varchar] (100) NULL,
[Res3] [varchar] (100) NULL,
[PartDesc] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[vAXL_PT_SOLine]'
GO
CREATE VIEW [stage].[vAXL_PT_SOLine] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine), '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(PartNum), '#', TRIM(PartDesc))))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(PartDesc))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(InvoiceNum))))) AS SalesLedgerID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum), '#', (IIF(TRIM([PartNum]) LIKE 'IACO%' , 'MISC. CHARGES', TRIM([PartDesc]))))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT(int, IIF(InvoiceDate = '', 19900101, replace(convert(date, InvoiceDate), '-', ''))) AS SalesInvoiceDateID
	,UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine))) AS SalesInvoiceCode
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine))) AS SalesOrderCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(SalesPerson) AS SalesPersonName
	,TRIM(CustNum) AS [CustomerNum]
	,TRIM(PartNum) AS PartNum
	,UPPER(PartDesc) AS PartDesc
	,'' AS [PartType]
	,TRIM(OrderNum) AS [SalesOrderNum]
	,CAST(OrderLine AS text) AS [SalesOrderLine]
	,TRIM(OrderSubLine) AS [SalesOrderSubLine]
	,TRIM(OrderType) AS [SalesOrderType]
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,TRIM(InvoiceLine) AS [SalesInvoiceLine]
	,TRIM(InvoiceType) AS [SalesInvoiceType]
	,CASE WHEN InvoiceDate = '' THEN '1900-01-01' ELSE CONVERT(date, InvoiceDate) END AS [SalesInvoiceDate]
	,ActualDeliveryDate AS [ActualDelivDate]
	,SellingShipQty AS [SalesInvoiceQty]
	,TRIM(Unit) AS [UoM]
	,UnitPrice
	,UnitCost
	,DiscountAmount
	,IIF(UnitPrice*SellingShipQty = 0, 0, DiscountAmount/UnitPrice*SellingShipQty) AS DiscountPercent
	,CONVERT(decimal(18,4), CashDiscountOffered) AS [CashDiscOffered] 
	,CONVERT(decimal(18,4), CashDiscountUsed) AS [CashDiscUsed] 
	,TotalMiscChrg
	,VAT AS [VATAmount]
	,Currency
	,ExchangeRate
	,TRIM(CreditMemo) AS CreditMemo
	,TRIM([SalesChannel]) AS [SalesChannel]
	,TRIM([BusinessChain]) AS [Department]
	,TRIM(WarehouseCode) AS WarehouseCode
	,NULL AS [CostBearerNum]
	,NULL AS [CostUnitNum]
	,NULL AS [ReturnComment]
	,NULL AS [ReturnNum]
	,NULL AS [ProjectNum]
	,'' AS [IndexKey]
	,Res1 AS SIRes1
	,Res2 AS SIRes2
	,Res3 AS SIRes3
FROM stage.AXL_PT_SOLine


	--,CASE WHEN OrderType = 'MD' THEN 1 
	--		WHEN OrderType = 'MT' THEN 2
	--		WHEN OrderType = 'MR' THEN 3
	--		WHEN OrderType = 'IV' THEN 4
	--		WHEN OrderType = 'Misc. Charges' THEN 5 --added after Ulf changes in the night /DZ
	--	ELSE OrderType END AS [SalesOrderType]

--GROUP BY
--	PartitionKey, Company, SalesPerson, CustNum, PartNum, PartDesc, OrderNum, OrderLine, OrderSubLine,OrderType, InvoiceNum, InvoiceLine, InvoiceDate, SellingShipQty, UnitPrice, UnitCost, DiscountAmount, TotalMiscChrg, WarehouseCode, CreditMemo, ActualDeliveryDate, Currency, ExchangeRate, InvoiceType, Res1, Res2, Res3, Unit, VAT, SalesChannel, BusinessChain, CashDiscountOffered, CashDiscountUsed
GO
PRINT N'Creating [dm_FH].[DimRLS]'
GO

CREATE VIEW [dm_FH].[DimRLS] AS
SELECT 
	 [id]
,[Company]
,[Email]
,[RLSTable]
,[RLSField]
,[RLSValue]
,[AccessType]
,[SourceList]
,[Modified_at]
,[Author]
,[BusinessArea]
FROM [dm].DimRLS AS RLS
WHERE BusinessArea = 'Fluid Handling Solutions'
GO
PRINT N'Creating [stage].[JEN_SE_StockTransaction]'
GO
CREATE TABLE [stage].[JEN_SE_StockTransaction]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[SysRowID] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[BinNumber] [nvarchar] (50) NULL,
[BatchID] [nvarchar] (50) NULL,
[FIFOBatchID] [nvarchar] (50) NULL,
[SupplierBatchID] [nvarchar] (50) NULL,
[TranDate] [date] NULL,
[CreateDate] [date] NULL,
[CreateTime] [nvarchar] (50) NULL,
[TranDT] [nvarchar] (50) NULL,
[TranType] [nvarchar] (50) NULL,
[TranTypeDesc] [nvarchar] (200) NULL,
[TranSource] [nvarchar] (50) NULL,
[Reference] [nvarchar] (30) NULL,
[TranQty] [decimal] (18, 4) NULL,
[PartStatus] [nvarchar] (50) NULL,
[IssuerReceiverCode] [nvarchar] (50) NULL,
[CostPrice] [decimal] (18, 4) NULL,
[SellingPrice] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[TranValue] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vJEN_SE_StockTransaction]'
GO

CREATE VIEW [stage].[vJEN_SE_StockTransaction] AS 
--COMMENT EMPTY FIELDS / ADD UPPER() INTO PartID,CustomerID,WarehouseID 2022-12-19 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM([Company]),'#',TRIM([SysRowID])))) AS StockTransactionID
	,CONCAT([Company],'#',TRIM([SysRowID])) AS StockTransactionCode --StockTransactionCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',TRIM([Company]))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
 	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',TRIM([CurrencyCode]))) AS CurrencyID

	,IIF([TranTypeDesc] = 'Outgoing goods', CONVERT([binary](32), HASHBYTES('SHA2_256', Upper(CONCAT(TRIM([Company]),'#',TRIM([IssuerReceiverCode]))))), NULL) AS CustomerID
	,IIF([TranTypeDesc] = 'Outgoing goods', CONVERT([binary](32), HASHBYTES('SHA2_256', Upper(CONCAT(TRIM([Company]),'#',TRIM([OrderNum]))))), NULL) AS SalesOrderNumID
	,IIF([TranTypeDesc] = 'Outgoing goods', CONVERT([binary](32), HASHBYTES('SHA2_256', Upper(CONCAT(TRIM([Company]),'#',TRIM([InvoiceNum]))))), NULL) AS SalesInvoiceID
	,IIF([TranTypeDesc] = 'Incoming goods', CONVERT([binary](32), HASHBYTES('SHA2_256', Upper(CONCAT(TRIM([Company]),'#',TRIM([IssuerReceiverCode]))))), NULL) AS SupplierID
	,IIF([TranTypeDesc] = 'Incoming goods', CONVERT([binary](32), HASHBYTES('SHA2_256', Upper(CONCAT(TRIM([Company]),'#',TRIM([OrderNum]))))), NULL) AS PurchaseOrderNumID
	,IIF([TranTypeDesc] = 'Incoming goods', CONVERT([binary](32), HASHBYTES('SHA2_256', Upper(CONCAT(TRIM([Company]),'#',TRIM([InvoiceNum]))))), NULL) AS PurchaseInvoiceID

	,[PartitionKey]
    ,[SysRowID] AS IndexKey
    ,TRIM([Company]) AS Company -- 
	,TRIM([WarehouseCode]) AS WarehouseCode
	,[TranType]		AS TransactionCode
	,[TranTypeDesc]	AS TransactionDescription
	,IIF(TRIM([IssuerReceiverCode])='', NULL,TRIM(IssuerReceiverCode)) AS IssuerReceiverNum
	,IIF(TRIM([OrderNum])='', NULL, TRIM(OrderNum)) AS OrderNum 
	--,'' AS OrderLine
    ,IIF(TRIM([InvoiceNum])='', NULL,TRIM(InvoiceNum)) AS InvoiceNum
	--,'' AS InvoiceLine
    ,TRIM([PartNum]) AS PartNum
    ,IIF(TRIM([BinNumber])='', NULL,TRIM(BinNumber)) AS BinNum
    ,IIF(TRIM([BatchID])='', NULL,TRIM(BatchID)) AS BatchNum
	,convert(date, [TranDate]) AS TransactionDate 
	,[CreateTime] AS TransactionTime
	,[TranQty]		AS TransactionQty
	,[TranValue] AS TransactionValue 
	,[CostPrice] 
	,[SellingPrice] AS SalesUnitPrice 
	,'SEK' AS Currency  --CurrencyCode, changed 2023-05-16 SB
	,CONVERT(decimal(18,4), ExchangeRate) AS ExchangeRate
	,[Reference]
	,convert(date, [CreateDate]) AS AdjustmentDate
	,IIF(TRIM([TranTypeDesc]) IN ('Incoming goods','Outgoing goods'),'External','Internal') AS InternalExternal
	,PartStatus AS STRes1
	--,'' AS STRes2
	--,'' AS STRes3
    ,IIF(TRIM([FIFOBatchID])='', NULL,TRIM(FIFOBatchID)) AS FIFOBatchID
    ,IIF(TRIM([SupplierBatchID])='', NULL,TRIM(SupplierBatchID)) AS SupplierBatchID
	,[TranDT]
    ,[TranSource]
--	Simple logic for counting StockBalance, maybe to simple ?
--	,SUM(TranQty) OVER (PARTITION BY  WarehouseCode , PartNum, BatchID ORDER BY TranDate asc ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) 
--	,SUM(TranQty) OVER (PARTITION BY  WarehouseCode , PartNum, BatchID ORDER BY TranDate asc) AS StockBalanceCount --Original
--	,SUM(TranQty) OVER (PARTITION BY  WarehouseCode , PartNum, BatchID ORDER BY TranDT ASC) AS StockBalanceCount -- DZ modified  -- ET 20200916 decision, solution in measures
--	,SUM(TranValue) OVER (PARTITION BY  WarehouseCode , PartNum, BatchID ORDER BY TranDate asc) AS StockBalanceValue --Original
--	,SUM(TranValue) OVER (PARTITION BY  WarehouseCode , PartNum, BatchID ORDER BY TranDT ASC) AS StockBalanceValue -- DZ modified  -- ET 20200916 decision, solution in measures
				 
FROM 
	[stage].[JEN_SE_StockTransaction]
WHERE convert(date, [TranDate]) >= '2020-01-01'
GO
PRINT N'Creating [stage].[AXL_DN_OLine]'
GO
CREATE TABLE [stage].[AXL_DN_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[NeedbyDate] [date] NULL,
[ExpDelivDate] [date] NULL,
[EDCExpDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (10) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[SalesPerson] [nvarchar] (50) NULL,
[WareHouseCode] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[BusinessChain] [nvarchar] (50) NULL,
[SalesOrderCategory] [nvarchar] (100) NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL,
[PartDesc] [nvarchar] (max) NULL,
[APV_Cost_EUR] [nvarchar] (50) NULL,
[APV_Item] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXL_DN_OLine]'
GO
CREATE VIEW [stage].[vAXL_DN_OLine] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(PartDesc))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum), '#', (IIF(TRIM([PartNum]) LIKE 'IACO%' , 'MISC. CHARGES', TRIM(PartDesc) )) )))) AS PartID
	,CONVERT(int, replace(convert(date, OrderDate), '-', '')) AS SalesOrderDateID
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine))) AS SalesOrderCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(CustNum) AS CustomerNum 
	,TRIM(OrderNum) AS [SalesOrderNum]
	,TRIM(OrderLine) AS [SalesOrderLine]
	,TRIM(OrderSubLine) AS [SalesOrderSubLine]
	,CONVERT(nvarchar(50), TRIM(OrderType)) AS [SalesOrderType]
	,TRIM([SalesOrderCategory]) AS [SalesOrderCategory]
	,OrderDate AS [SalesOrderDate]
	,NeedbyDate
	,ExpDelivDate AS [ExpDelivDate]
	,EDCExpDelivDate
	,ActualDelivDate
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,OrderQty AS [SalesOrderQty]
	,DelivQty
	,RemainingQty
	,Unit AS [UoM]
	,UnitPrice
	,UnitCost
	,LEFT(TRIM(Currency), 3) AS Currency
	,ExchangeRate
	,LEFT(TRIM(OpenRelease), 1) AS OpenRelease
	,DiscountAmount
	,DiscountPercent
	,NULL AS CashDiscOffered
	,NULL AS CashDiscUsed
	,TRIM(PartNum) AS PartNum
	,UPPER(PartDesc) AS PartDesc
	,'' AS [PartType]
	,CONVERT(nvarchar(50), PartStatus) AS PartStatus
	,TRIM(SalesPerson) AS [SalesPersonName]
	,TRIM(WareHouseCode) AS WarehouseCode
	,'' AS IndexKey
	,TRIM(SalesChannel) AS SalesChannel
	,TRIM(BusinessChain) AS [Department]
	,Res3 AS [ProjectNum] -- = FreeOfCharge: Y = yes, N = no
	,'' AS Cancellation
	,Res1 AS SORes1
	,Res2 AS SORes2
	,Res3 AS SORes3
FROM stage.AXL_DN_OLine
WHERE OrderDate >= '2015-01-01'
GO
PRINT N'Creating [prestage].[CYE_ES_Part]'
GO
CREATE TABLE [prestage].[CYE_ES_Part]
(
[Company] [nvarchar] (8) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartDescription] [nvarchar] (200) NULL,
[PartDescription2] [nvarchar] (200) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[ProductGroup2] [nvarchar] (50) NULL,
[CommodityCode] [nvarchar] (14) NULL,
[CountryOfOrigin] [nvarchar] (50) NULL,
[NetWeight] [nvarchar] (50) NULL,
[SupplierCode] [nvarchar] (10) NULL
)
GO
PRINT N'Creating [prestage].[vCYE_ES_Part]'
GO


CREATE VIEW [prestage].[vCYE_ES_Part] AS

SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',[PartNum]))) AS PartID
	,CONCAT([Company],'#',[PartNum]) AS PartCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',[Company])) AS CompanyID	  
	,CONCAT(CONVERT (date, SYSDATETIME()), ' 00:00:00') AS [PartitionKey]

	,'CYESA' AS [Company]
	,[PartNum]
	,'' AS [PartName]
	,[PartDescription]
	,[PartDescription2]
	,'' AS [PartDescription3]
	,[ProductGroup]
	,[ProductGroup2]
	,'' AS [ProductGroup3]
	,'' AS [ProductGroup4]
	,'' AS [Brand]
	,'' AS [Barcode]
	,[CommodityCode]
	,[CountryOfOrigin]
	,REPLACE(NetWeight,',','.') AS [NetWeight]
	,0 AS [Volume]
	,'' AS [Material]
	,SupplierCode
	,0 AS [ReorderLevel]
	,'' AS [StartDate]
	,'' AS [EndDate]
	,'' AS ItemStatus
FROM [prestage].[CYE_ES_Part]
GO
PRINT N'Creating [stage].[CYE_ES_Part]'
GO
CREATE TABLE [stage].[CYE_ES_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartDescription] [nvarchar] (200) NULL,
[PartDescription2] [nvarchar] (200) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[ProductGroup2] [nvarchar] (50) NULL,
[CommodityCode] [nvarchar] (14) NULL,
[CountryOfOrigin] [nvarchar] (50) NULL,
[NetWeight] [decimal] (18, 8) NULL
)
GO
PRINT N'Creating [prestage].[CYE_ES_Part_Load]'
GO

CREATE PROCEDURE [prestage].[CYE_ES_Part_Load]
AS
BEGIN

Truncate table stage.CYE_ES_Part

insert into [stage].[CYE_ES_Part](
	PartitionKey, Company, PartNum, PartDescription, PartDescription2, ProductGroup, ProductGroup2, CommodityCode, [CountryOfOrigin], NetWeight)
select PartitionKey, Company, PartNum, PartDescription, PartDescription2, ProductGroup, ProductGroup2, CommodityCode, [CountryOfOrigin], NetWeight from [prestage].[vCYE_ES_Part]

--Truncate table [prestage].[CYE_ES_Part]

End
GO
PRINT N'Creating [stage].[JEN_DK_PurchaseLedger]'
GO
CREATE TABLE [stage].[JEN_DK_PurchaseLedger]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierCode] [nvarchar] (50) NOT NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[InvoiceLCYAmount] [decimal] (18, 4) NOT NULL,
[InvoiceCurrAmount] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (10) NULL,
[VATPaid] [decimal] (18, 4) NULL,
[VATcode] [nvarchar] (10) NULL,
[PayToName] [nvarchar] (50) NULL,
[PaymentTermsCode] [nvarchar] (50) NULL,
[PrepaymentNum] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vJEN_DK_PurchaseLedger]'
GO
CREATE VIEW [stage].[vJEN_DK_PurchaseLedger] AS 
--ADD TRIM() INTO SupplierID 23-01-23 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(PurchaseInvoiceNum))))) AS PurchaseLedgerID
	,UPPER(CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(PurchaseInvoiceNum))) AS PurchaseLedgerCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierCode))))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierCode))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseInvoiceNum))))) AS PurchaseInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT(int, replace(convert(date,InvoiceDate),'-','')) AS InvoiceDateID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(CurrencyCode)))) AS CurrencyID
	,[PartitionKey]

	,UPPER(Company) AS [Company]
	,TRIM([SupplierCode]) AS SupplierNum
	,TRIM([PurchaseInvoiceNum]) AS [PurchaseInvoiceNum]
	,TRIM([PurchaseOrderNum]) AS [PurchaseOrderNum]
	,CONVERT(date, [InvoiceDate]) AS InvoiceDate
	,CONVERT(date, [DueDate]) AS PurchaseDueDate
	,CONVERT(date, [LastPaymentDate]) AS PurchaseLastPaymentDate
	,[InvoiceLCYAmount]
	,[InvoiceCurrAmount]
--	,IIF([InvoiceCurrAmount]=0, null, [InvoiceLCYAmount]/[InvoiceCurrAmount]) AS ExchangeRate
	,[ExchangeRate]
	,IIF([CurrencyCode] is null, 'DKK', TRIM([CurrencyCode])) AS Currency
	,[VATPaid]
	,[VATcode]
	,[PayToName]
	--,'' AS [PayToCity]
	--,'' AS [PayToContact]
	,[PaymentTermsCode]
	,[PrepaymentNum]
	--,'' AS LastPaymentNum
	--,'' AS PLRES1
	--,'' AS PLRES2
	--,'' AS PLRES3
	--,NULL AS PaidInvoiceAmount
	--,NULL AS RemainingInvoiceAmount
	--,NULL AS LinkToOriginalInvoice
	,CAST ('1900-01-01'AS date) AS AccountingDate
	--,NULL AS AgingPeriod
	--,NULL AS AgingSort
	--,NULL AS VATCodeDesc
FROM 
	[stage].[JEN_DK_PurchaseLedger]
GO
PRINT N'Creating [stage].[ARK_PI_PurchaseInvoice]'
GO
CREATE TABLE [stage].[ARK_PI_PurchaseInvoice]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaseOrderType] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[PurchaseInvoiceLine] [nvarchar] (50) NULL,
[PurchaseInvoiceType] [nvarchar] (50) NULL,
[PurchaseInvoiceDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PurchaseInvoiceQty] [decimal] (18, 4) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[VATAmount] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PurchaserName] [nvarchar] (100) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[PurchaseChannel] [nvarchar] (50) NULL,
[Comment] [nvarchar] (600) NULL,
[PIRes1] [nvarchar] (50) NULL,
[PIRes2] [nvarchar] (50) NULL,
[PIRes3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vARK_PI_PurchaseInvoice]'
GO

CREATE VIEW [stage].[vARK_PI_PurchaseInvoice] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(PurchaseOrderSubLine), '#', TRIM(PurchaseInvoiceNum), '#', TRIM(PurchaseInvoiceLine), '#', TRIM(PartNum), '#', TRIM(WarehouseCode))))) AS PurchaseInvoiceID
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseInvoiceNum), '#', TRIM(PurchaseInvoiceLine), '#', PartNum)) AS PurchaseInvoiceCode
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum))) AS PurchaseOrderNumCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum),'#',TRIM(PurchaseOrderLine),'#',TRIM(PurchaseInvoiceNum))))) AS PurchaseOrderID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum))))) AS SupplierID
    ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT(int, replace(PurchaseInvoiceDate,'-','')) AS PurchaseInvoiceDateID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#', TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum),'#',TRIM(PurchaseOrderNum))))) AS PurchaseLedgerID --match PurchaseLedgerID in [vSCM_FI_PurchaseLedger]
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum),'#',TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine))) AS PurchaseOrderCode
	,PartitionKey

	,UPPER(TRIM(Company)) AS Company
	,CASE WHEN UPPER(TRIM(PurchaseOrderNum)) IS NULL AND UPPER(TRIM(PartNum)) = '-NULL-' THEN 'ServiceOrder' ELSE UPPER(TRIM(PurchaseOrderNum)) END AS PurchaseOrderNum --UPPER(TRIM(PurchaseOrderNum))
	,UPPER(TRIM(PurchaseOrderLine)) AS PurchaseOrderLine
	,UPPER(TRIM(PurchaseOrderSubLine)) AS PurchaseOrderSubLine
	,CASE WHEN UPPER(TRIM(PurchaseOrderType)) IS NULL AND UPPER(TRIM(PartNum)) = '-NULL-' THEN 'Service' ELSE UPPER(TRIM(PurchaseOrderType)) END AS PurchaseOrderType
	,UPPER(TRIM(PurchaseInvoiceNum)) AS PurchaseInvoiceNum
	,UPPER(TRIM(PurchaseInvoiceLine)) AS PurchaseInvoiceLine
	,PurchaseInvoiceType
	,PurchaseInvoiceDate
	,ActualDelivDate
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
--	,UPPER(TRIM(PartNum)) AS PartNum
	,CASE WHEN UPPER(TRIM(PartNum)) = '-NULL-' AND UPPER(TRIM(PurchaseOrderNum)) IS NULL THEN 'ServicePurchase' ELSE UPPER(TRIM(PartNum)) END AS PartNum
	,PurchaseInvoiceQty
	,CASE WHEN UPPER(TRIM(UoM)) = '-NULL-' AND UPPER(TRIM(PurchaseOrderNum)) IS NULL THEN 'Unit' ELSE UPPER(TRIM(UoM)) END AS UoM
	,UnitPrice
	,DiscountPercent
	,DiscountAmount
	,TotalMiscChrg
	,VATAmount
	,ExchangeRate
	,Currency
	,CreditMemo
	,PurchaserName
	,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
	,PurchaseChannel
	,PIRes1
	,PIRes2
	,PIRes3
	,'' AS LineType
	,'' AS OrderDelivLineNum
	,Comment
FROM stage.ARK_PI_PurchaseInvoice
--WHERE PurchaseInvoiceDate >= DATEADD(year, -1, GETDATE()) --Added this where clause as semi-incremental load functinoality since it doesn't work easily on meta-param table. /SM 2021-10-01
--GROUP BY
--	PartitionKey, Company, PurchaseOrderNum, PurchaseInvoiceNum, SupplierNum, PartNum, PurchaseOrderLine, PurchaseOrderSubLine, PurchaseInvoiceQty, UnitPrice, WarehouseCode,PurchaserName, PurchaseInvoiceLine, PurchaseInvoiceType, PurchaseInvoiceDate, ActualDelivDate, TotalMiscChrg, CreditMemo, PurchaseOrderType, DiscountPercent, DiscountAmount,Currency, ExchangeRate, UoM, VATAmount, PurchaseChannel, PIRes1, PIRes2, PIRes3, Comment --, OrderType, [Site], OrderDelivLineNum, , DiscountPercent, PurchaserName, InvoiceLine, InvoiceType, InvoiceDate, ActualDeliveryDate, TotalMiscChrg, CreditMemo
GO
PRINT N'Creating [ext].[CoC_Inherited_sign]'
GO
CREATE TABLE [ext].[CoC_Inherited_sign]
(
[DUNS] [int] NOT NULL,
[DUNS_Inherited] [int] NOT NULL,
[last_modified_date] [date] NOT NULL
)
GO
PRINT N'Creating [ext].[DimSupplier_new]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [ext].[DimSupplier_new]
	AS 
	
with dim_HL as (
	select duns, isnull(iif([organization.isStandalone] = 1,1,cast(cast(m.[organization.corporateLinkage.hierarchyLevel] as float) as int)),1) as HL
	from dnb.MasterTable as m
), duns_inherited as (
select	   iSign.DUNS
		  ,dim_HL.HL as DUNS_HL
		  ,iSign.Duns_Inherited
		  , ROW_NUMBER() over (partition by iSign.Duns_Inherited order by dim_HL.HL desc) as rn
from [ext].[CoC_Inherited_sign] as iSign
left join dim_HL
	on iSign.DUNS = dim_HL.duns
where last_modified_date = (select max(last_modified_date) from ext.CoC_Inherited_sign)
)
SELECT 
	 ds.SupplierID
	 ,ds.Company
	 ,IIF(c.CompanyLegalName is null, c.CompanyName, c.CompanyLegalName) as CompanyName
	,ds.SupplierNum
	,ds.SupplierName
	,ds.DUNS
	--, dim_HL.HL as DUNS_HL
	,CASE WHEN local_signed.dw_id is null THEN 0 ELSE 1
	 END AS COC_Local_sign
	,CASE WHEN duns_signed.DUNS is null THEN 0 ELSE 1
	 END AS COC_DUNS_sign
	, case when duns_inherited.DUNS is null then 0 else 1 end as COC_Inherited_sign
	, duns_inherited.DUNS as Closest_DUNS
FROM dm.DimSupplier as ds
LEFT JOIN [ext].[CoC_Local_sign] as local_signed
	ON ds.SupplierID = local_signed.dw_id
	AND local_signed.is_customer = 0
LEFT JOIN [ext].[CoC_DUNS_sign] as duns_signed
	ON ds.DUNS = duns_signed.DUNS
LEFT JOIN dbo.Company as c
	on ds.Company = c.Company
LEFT JOIN duns_inherited
	on ds.DUNS = duns_inherited.DUNS_Inherited
	and duns_inherited.rn = 1
--where ds.DUNS = 403243921
	;
GO
PRINT N'Creating [stage].[FOR_ES_StockTransaction]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[FOR_ES_StockTransaction]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CostPrice] [nvarchar] (80) NULL,
[Currency] [nvarchar] (80) NULL,
[CustomerNum] [nvarchar] (80) NULL,
[IndexKey] [int] NULL,
[PartNum] [nvarchar] (80) NULL,
[Reference] [nvarchar] (80) NULL,
[SupplierNum] [nvarchar] (80) NULL,
[TransactionCode] [nvarchar] (80) NULL,
[TransactionDate] [nvarchar] (80) NULL,
[TransactionDescription] [nvarchar] (80) NULL,
[TransactionQty] [decimal] (18, 4) NULL,
[TransactionType] [nvarchar] (80) NULL,
[TransactionValue] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (80) NULL
)
GO
PRINT N'Creating [stage].[vFOR_ES_StockTransaction]'
GO


CREATE VIEW [stage].[vFOR_ES_StockTransaction] AS 
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(PartNum),'#',TRIM(WarehouseCode),'#',IndexKey)))) AS StockTransactionID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',TRIM([Company]))) AS CompanyID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID,
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([SupplierNum]))))) AS SupplierID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID,
	[PartitionKey]		,
	[Company]			,
	CostPrice,
	Currency,
	IndexKey,
	PartNum,
	Reference,
	TransactionCode,
	TransactionDate,
	TransactionDescription,
	TransactionQty,
	TransactionValue,
	WarehouseCode,
	CASE WHEN trim(cast(TransactionCode as varchar)) IN ('60','67','69','162','202','10000071','OB') OR TransactionCode is null   THEN 'I' 
	     WHEN trim(cast(TransactionCode as varchar)) IN ('13','14','15','16','18','19','20','21','59') THEN 'E'
		 ELSE 'Missing clasification' END as InternalExternal,
	TransactionType as STRes1
FROM 
	 [stage].[FOR_ES_StockTransaction]
GO
PRINT N'Creating [dm_FH].[fctBudget]'
GO
CREATE VIEW [dm_FH].[fctBudget] AS

SELECT bdg.[BudgetID]
,bdg.[CustomerID]
,bdg.[CompanyID]
,bdg.[PartID]
,bdg.[WarehouseID]
,bdg.[ProjectID]
,bdg.[DepartmentID]
,bdg.[BudgetPeriodDateID]
,bdg.[PartitionKey]
,bdg.[BudgetType]
,bdg.[BudgetName]
,bdg.[BudgetDescription]
,bdg.[Company]
,bdg.[BudgetPeriod]
,bdg.[BudgetPeriodDate]
,bdg.[PeriodType]
,bdg.[CustomerNum]
,bdg.[PartNum]
,bdg.[SalesPersonCode]
,bdg.[SalesPersonName]
,bdg.[BudgetSales]
,bdg.[BudgetCost]
,bdg.[GrossProfitInvoiced]
,bdg.[GrossMarginInvoicedPercent]
,bdg.[BudgetFinance]
,bdg.[WarehouseCode]
,bdg.[CostBearerNum]
,bdg.[CostUnitNum]
,bdg.[ProjectNum]
,bdg.[AccountNum]
,bdg.[AccountGroupNum]
FROM dm.FactBudget as  bdg
LEFT JOIN dbo.Company com ON bdg.Company = com.Company
WHERE com.BusinessArea = 'Fluid Handling Solutions' AND com.[Status] = 'Active'
GO
PRINT N'Creating [stage].[CER_SE_Warehouse]'
GO
CREATE TABLE [stage].[CER_SE_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL,
[WarehouseDistrict] [nvarchar] (50) NULL,
[WarehouseAddress] [nvarchar] (100) NULL,
[WarehouseType] [nvarchar] (50) NULL,
[WarehouseCountry] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_SE_Warehouse]'
GO


CREATE VIEW [stage].[vCER_SE_Warehouse] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([WarehouseCode])) AS [WarehouseCode]
	,[WarehouseName]
	,[WarehouseDistrict]
	,[WarehouseAddress]
	,'' AS [WarehouseDescription]
	,[WarehouseType]
	,[WarehouseCountry]
	,'' AS [WarehouseSite]
FROM [stage].[CER_SE_Warehouse]

GROUP BY 
	PartitionKey,[Company],[WarehouseCode],[WarehouseName],[WarehouseDistrict],[WarehouseAddress],[WarehouseType],[WarehouseCountry]
GO
PRINT N'Creating [stage].[SVE_SE_PurchaseLedger]'
GO
CREATE TABLE [stage].[SVE_SE_PurchaseLedger]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[SupplierInvoiceNum] [nvarchar] (50) NOT NULL,
[InvoiceAmount] [decimal] (18, 4) NULL,
[InvoiceAmountSEK] [decimal] (18, 4) NULL,
[PaidInvoiceAmount] [decimal] (18, 4) NULL,
[PaidInvoiceAmountSEK] [decimal] (18, 4) NULL,
[RemainingInvoiceAmount] [decimal] (18, 4) NULL,
[RemainingInvoiceAmountSEK] [decimal] (18, 4) NULL,
[PurchaseInvoiceDate] [nvarchar] (50) NULL,
[PurchaseDueDate] [nvarchar] (50) NULL,
[PurchaseLastPaymentDate] [nvarchar] (50) NULL,
[AccountingDate] [nvarchar] (50) NULL,
[Currency] [nvarchar] (10) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[VATAmount] [decimal] (18, 4) NULL,
[PaymentTerms] [nvarchar] (50) NULL,
[LinktoOriginalInvoice] [nvarchar] (max) NULL,
[VATCode] [nvarchar] (50) NULL,
[VATCodeDesc] [nvarchar] (max) NULL,
[PayToName] [nvarchar] (50) NULL,
[PayToCity] [nvarchar] (50) NULL,
[PayToContact] [nvarchar] (50) NULL,
[CostUnitNum] [nvarchar] (50) NULL,
[PaymentEvents] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[IsActiveRecord] [nvarchar] (50) NULL,
[IsInvoiceClosed] [nvarchar] (50) NULL,
[PLRes1] [nvarchar] (50) NULL,
[PLRes2] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vSVE_SE_PurchaseLedger]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vSVE_SE_PurchaseLedger] AS 

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum)  )))) AS PurchaseLedgerID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(Company)))) AS CompanyID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum))))) AS SupplierID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseInvoiceNum))))) AS PurchaseInvoiceID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM(Currency)))) AS CurrencyID
	,CONVERT(int, replace(convert(date,PurchaseInvoiceDate),'-','')) AS PurchaseInvoiceDateID 
	,UPPER(CONCAT(Company, '#', TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum))) AS PurchaseLedgerCode 
	,[PartitionKey]

	,UPPER([Company]) AS [Company]
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
	,'' AS [PurchaseOrderNum]
	,IIF(TRIM(PLRES2) = 'L', CONCAT('L', TRIM([PurchaseInvoiceNum])), TRIM([PurchaseInvoiceNum])) AS [PurchaseInvoiceNum]
	,TRIM(SupplierInvoiceNum) AS SupplierInvoiceNum
	,CONVERT(date, PurchaseInvoiceDate) AS PurchaseInvoiceDate
	,CONVERT(date, PurchaseDueDate) AS PurchaseDueDate
	,CONVERT(date, PurchaseLastPaymentDate) AS PurchaseLastPaymentDate
	,(InvoiceAmount) AS [InvoiceLCYAmount] 
	,(InvoiceAmount) AS InvoiceAmount
	,IIF([Currency] = 'SEK', 1, CONVERT(decimal(18,4), ExchangeRate)) AS ExchangeRate
	,TRIM([Currency]) As [Currency]
	,VATAmount AS VATAmount
	,VATCode AS VATCode
	,[PayToName]
	,'' AS IsInvoiceClosed
	,[PayToCity]
	,[PayToContact]
	,PaymentTerms AS PaymentTerms
	--,'' AS [PrepaymentNum]
	--,'' AS LastPaymentNum
	,InvoiceAmount - RemainingInvoiceAmount AS PaidInvoiceAmount
	,RemainingInvoiceAmount AS RemainingInvoiceAmount
	,LinkToOriginalInvoice
	,CONVERT(date, AccountingDate) AS AccountingDate
	,ModifiedTimeStamp AS AgingPeriod 
	,CreatedTimeStamp AS AgingSort  
	,CostUnitNum
	,'' AS ProjectNum
	,VATCodeDesc AS VATCodeDesc
	,PLRES1 --[D4005_Status_reskont] AS 
	,PLRES2 --[D4003_Fakturatyp] AS 
	,[IsActiveRecord] AS PLRES3
FROM 
	[stage].[SVE_SE_PurchaseLedger]
GO
PRINT N'Creating [stage].[PIM_ALL_Product]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[PIM_ALL_Product]
(
[ProductID] [nvarchar] (50) NULL,
[PartitionKey] [nvarchar] (50) NULL,
[Manufacturer_Id] [nvarchar] (50) NULL,
[Brand] [nvarchar] (50) NULL,
[Heading] [nvarchar] (500) NULL,
[Original_Description] [nvarchar] (max) NULL,
[Last_category_name] [nvarchar] (500) NULL,
[Category_name] [nvarchar] (500) NULL,
[Category_name2] [nvarchar] (500) NULL,
[Category_name3] [nvarchar] (500) NULL,
[Category_name4] [nvarchar] (500) NULL,
[Category_name5] [nvarchar] (500) NULL,
[Category_name6] [nvarchar] (500) NULL,
[Item_no_Acorn] [nvarchar] (50) NULL,
[Item_no_Arkov] [nvarchar] (50) NULL,
[Item_no_Bell] [nvarchar] (50) NULL,
[Item_no_GMMIT] [nvarchar] (50) NULL,
[Item_no_Jens_SDK] [nvarchar] (50) NULL,
[Item_no_Jens_SNO] [nvarchar] (50) NULL,
[Item_no_Jens_SSE] [nvarchar] (50) NULL,
[Item_no_KTT] [nvarchar] (50) NULL,
[Item_no_MAK] [nvarchar] (50) NULL,
[Item_no_NOMODK] [nvarchar] (50) NULL,
[Item_no_NOMOFI] [nvarchar] (50) NULL,
[Item_no_NOMONO] [nvarchar] (50) NULL,
[Item_no_NOMOSE] [nvarchar] (50) NULL,
[Item_no_Jens_SNB] [nvarchar] (50) NULL,
[Item_no_Passerotti] [nvarchar] (50) NULL,
[Item_no_SKS] [nvarchar] (50) NULL,
[Item_no_Jens_SSK] [nvarchar] (50) NULL,
[Item_no_Spruit] [nvarchar] (50) NULL,
[Item_no_Sverull] [nvarchar] (50) NULL,
[Item_no_TNXSI] [nvarchar] (50) NULL,
[Item_no_TPNNO] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [prestage].[PIM_ALL_Product]'
GO
CREATE TABLE [prestage].[PIM_ALL_Product]
(
[Prop_0] [varchar] (50) NULL,
[Prop_1] [varchar] (50) NULL,
[Prop_2] [varchar] (max) NULL,
[Prop_3] [varchar] (max) NULL,
[Prop_4] [varchar] (max) NULL,
[Prop_5] [varchar] (max) NULL,
[Prop_6] [varchar] (max) NULL,
[Prop_7] [varchar] (max) NULL,
[Prop_8] [varchar] (max) NULL,
[Prop_9] [varchar] (max) NULL,
[Prop_10] [varchar] (max) NULL,
[Prop_11] [varchar] (max) NULL,
[Prop_12] [varchar] (max) NULL,
[Prop_13] [varchar] (max) NULL,
[Prop_14] [varchar] (max) NULL,
[Prop_15] [varchar] (max) NULL,
[Prop_16] [varchar] (max) NULL,
[Prop_17] [varchar] (max) NULL,
[Prop_18] [varchar] (max) NULL,
[Prop_19] [varchar] (max) NULL,
[Prop_20] [varchar] (max) NULL,
[Prop_21] [varchar] (max) NULL,
[Prop_22] [varchar] (max) NULL,
[Prop_23] [varchar] (max) NULL,
[Prop_24] [varchar] (max) NULL,
[Prop_25] [varchar] (max) NULL,
[Prop_26] [varchar] (max) NULL,
[Prop_27] [varchar] (max) NULL,
[Prop_28] [varchar] (max) NULL,
[Prop_29] [varchar] (max) NULL,
[Prop_30] [varchar] (max) NULL,
[Prop_31] [varchar] (max) NULL,
[Prop_32] [varchar] (max) NULL
)
GO
PRINT N'Creating [prestage].[vPIM_ALL_Product]'
GO

--PTS id|
--"Manufacturer Id"|
--Brand|Heading|
--"Original Description"|
--"Last category name"|
--"Category name"|
--"Category name"|
--"Category name"|
--"Category name"|
--"Category name"|
--"Category name"|
--"Item no (SKS)"|
--"Item no (Jens S)"|
--"Item no (Acorn)"|
--"Item no (Bell)"|
--"Item no (Arkov)"| 16
--"Item no (Nomo Denmark)"| 17
--"Item no (Nomo Finland)"| 18
--"Item no (Nomo Norway)"| 19
--"Item no (Nomo Sweden)"| 20
--"Item no (Spruit)"| 21
--"Item no (MAK)"| 22 
--"Item no (Sverull)"| 23
--"Item no (Passerotti)"| 24
--"Item no (KTT)" | 25

CREATE VIEW [prestage].[vPIM_ALL_Product] AS

SELECT
	Prop_0 AS [ProductID]
	,Prop_1 AS [Manufacturer_Id]
	,Prop_2 AS [Brand]
	,Prop_3 AS [Heading]
	,Prop_4 AS [Original_Description]
	,Prop_5 AS [Last_category_name]
	,Prop_6 AS [Category_name]
	,Prop_7 AS [Category_name2]
	,Prop_8 AS [Category_name3]
	,Prop_9 AS [Category_name4]
	,Prop_10 AS [Category_name5]
	,Prop_11 AS [Category_name6]
	,Prop_12 as [ItemNo_Acorn]
	,Prop_13 as [ItemNo_Arkov]
	,Prop_14 as [ItemNo_BELL]
	,Prop_15 as [ItemNo_GMM]
	,Prop_16 as [ItemNo_JensSDK]
	,Prop_17 as [ItemNo_JensSNO]
	,Prop_18 as [ItemNo_JensSSE]
	,Prop_19 as [ItemNo_KTT]
	,Prop_20 as [ItemNo_MAK]
	,Prop_21 as [ItemNo_NOMODK]
	,Prop_22 as [ItemNo_NOMOFI]
	,Prop_23 as [ItemNo_NOMONO]
	,Prop_24 as [ItemNo_NOMOSE]
	,Prop_25 as [ItemNo_JensSNB]
	,Prop_26 as [ItemNo_Passerotti]
	,Prop_27 as [ItemNo_SKS]
	,Prop_28 as [ItemNo_JensSSK]
	,Prop_29 as [ItemNo_Spruit]
	,Prop_30 as [ItemNo_Sverull]
	,Prop_31 as [ItemNo_Tinex]
	,Prop_32 as [ItemNo_TPNordic]
	,CONCAT(CONVERT (date, SYSDATETIME()), ' 00:00:00') AS [PartitionKey]
FROM [prestage].[PIM_ALL_Product]
GO
PRINT N'Creating [prestage].[PIM_ALL_Product_Load]'
GO
CREATE PROCEDURE [prestage].[PIM_ALL_Product_Load] AS
BEGIN

Truncate table stage.[PIM_ALL_Product]

INSERT INTO 
	stage.PIM_ALL_Product 
	(
	[ProductID]
	,[Manufacturer_Id]
	,[Brand]
	,[Heading]
	,[Original_Description]
	,[Last_category_name]
	,[Category_name]
	,[Category_name2]
	,[Category_name3]
	,[Category_name4]
	,[Category_name5]
	,[Category_name6]
	,[Item_no_Acorn]
	,[Item_no_Arkov]
	,[Item_no_Bell]
	,[Item_no_GMMIT]
	,[Item_no_Jens_SDK]
	,[Item_no_Jens_SNO]
	,[Item_no_Jens_SSE]
	,[Item_No_KTT]
	,[Item_no_MAK]
	,[Item_no_NOMODK]
	,[Item_no_NOMOFI]
	,[Item_no_NOMONO]
	,[Item_no_NOMOSE]
	,[Item_no_Jens_SNB]
	,[Item_No_Passerotti]
	,[Item_no_SKS]
	,[Item_no_Jens_SSK]
	,[Item_No_Spruit]
	,[Item_No_Sverull]
	,[Item_no_TNXSI]
	,[Item_no_TPNNO]
	,[PartitionKey]
	)

SELECT 
	[ProductID]
	,[Manufacturer_Id]
	,[Brand]
	,[Heading]
	,[Original_Description]
	,[Last_category_name]
	,[Category_name]
	,[Category_name2]
	,[Category_name3]
	,[Category_name4]
	,[Category_name5]
	,[Category_name6]
	,[ItemNo_Acorn]
	,[ItemNo_Arkov]
	,[ItemNo_BELL]
	,[Itemno_GMM]
	,[ItemNo_JensSDK]
	,[ItemNo_JensSNO]
	,[ItemNo_JensSSE]
	,[Itemno_KTT]
	,[ItemNo_MAK]
	,[ItemNo_NOMODK]
	,[ItemNo_NOMOFI]
	,[ItemNo_NOMONO]
	,[ItemNo_NOMOSE]
	,[ItemNo_JensSNB]
	,[ItemNo_Passerotti]
	,[ItemNo_SKS]
	,[ItemNo_JensSSK]
	,[ItemNo_Spruit]
	,[ItemNo_Sverull]
	,[Itemno_Tinex]
	,[Itemno_TPNordic]
	,[PartitionKey]
FROM 
	[prestage].[vPIM_ALL_Product]

--Truncate table prestage.[TRA_FR_Part]

End
GO
PRINT N'Creating [dbo].[PIM_mapCompany]'
GO
CREATE TABLE [dbo].[PIM_mapCompany]
(
[CompanyGroup] [nvarchar] (50) NULL,
[Company] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vPIM_ALL_Product]'
GO

CREATE VIEW [stage].[vPIM_ALL_Product] AS

SELECT	
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(COALESCE(C.Company, unp.CompanyGroup), '#', [ProductID], '#', PartID))) AS PimID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', COALESCE(C.Company, unp.CompanyGroup))) AS CompanyID
	,p1.PartID
	,unp.PartitionKey
	,[ProductID]
	,[Manufacturer_Id]
	,unp.[Brand]
	,SUBSTRING(unp.[Heading],1,49) AS [Heading]
	,[Original_Description]
	,[Last_category_name]
	,[Category_name]
	,[Category_name2]
	,[Category_name3]
	,[Category_name4]
	,[Category_name5]
	,[Category_name6]
	,unp.PartNum
	,COALESCE(C.Company, unp.CompanyGroup) AS Company
FROM 
(
	SELECT	
		[ProductID]
		,PartitionKey
		,[Manufacturer_Id]
		,[Brand]
		,[Heading]
		,[Original_Description]
		,[Last_category_name]
		,[Category_name]
		,[Category_name2]
		,[Category_name3]
		,[Category_name4]
		,[Category_name5]
		,[Category_name6]
		,[Item_no_Acorn]
		,[Item_no_Arkov]
		,[Item_no_Bell]
		,[Item_no_GMMIT]
		,[Item_no_Jens_SDK]
		,[Item_no_Jens_SNO]
		,[Item_no_Jens_SSE]
		,[Item_no_KTT]
		,[Item_no_MAK]
		,[Item_no_NOMODK]
		,[Item_no_NOMOFI]
		,[Item_no_NOMONO]
		,[Item_no_NOMOSE]
		,[Item_no_Jens_SNB]
		,[Item_no_Passerotti]
		,[Item_no_SKS]
		,[Item_no_Jens_SSK]
		,[Item_no_Spruit]
		,[Item_no_Sverull]
		,[Item_no_TNXSI]
		,[Item_no_TPNNO]
 -- Get a 'Missing' value for fully NULL products, for unpivot function
		,CAST(IIF(COALESCE([Item_no_Acorn], [Item_no_Arkov],  [Item_no_Bell], [Item_no_GMMIT], [Item_no_Jens_SDK], [Item_no_Jens_SNO], [Item_no_Jens_SSE], [Item_no_KTT], [Item_no_MAK], [Item_no_NomoDK], [Item_no_NomoFI], [Item_no_NomoNO], [Item_no_NomoSE], [Item_no_Jens_SNB], [Item_no_Passerotti], [Item_no_SKS], [Item_no_Jens_SSK], [Item_no_Spruit], [Item_no_Sverull], [Item_no_TNXSI], [Item_no_TPNNO], 'Missing') = 'Missing', 'Missing', NULL) AS nvarchar(50)) AS Missing
	FROM [Stage].[PIM_ALL_Product]
) as p
UNPIVOT (PartNum FOR CompanyGroup IN (
		[Item_no_Acorn]
		,[Item_no_Arkov]
		,[Item_no_Bell]
		,[Item_no_GMMIT]
		,[Item_no_Jens_SDK]
		,[Item_no_Jens_SNO]
		,[Item_no_Jens_SSE]
		,[Item_no_KTT]
		,[Item_no_MAK]
		,[Item_no_NOMODK]
		,[Item_no_NOMOFI]
		,[Item_no_NOMONO]
		,[Item_no_NOMOSE]
		,[Item_no_Jens_SNB]
		,[Item_no_Passerotti]
		,[Item_no_SKS]
		,[Item_no_Jens_SSK]
		,[Item_no_Spruit]
		,[Item_no_Sverull]
		,[Item_no_TNXSI]
		,[Item_no_TPNNO]
		,[Missing])
		 ) as unp
LEFT JOIN dbo.PIM_mapCompany AS C ON unp.CompanyGroup = C.CompanyGroup
LEFT JOIN dw.Part AS p1 ON unp.CompanyGroup <> 'Missing' AND trim(p1.PartNum) = trim(unp.PartNum) AND trim(p1.Company) = trim(C.Company)
GO
PRINT N'Creating [dbo].[DimSupplierAgreement2nd]'
GO
CREATE VIEW [dbo].[DimSupplierAgreement2nd] AS
-- dummy [dbo].[DimSupplierAgreement2nd] because of SPL model has and needs it!
----------------------------------- Supplier Agreements File --------------------------------------

SELECT 
    '' AS CompanyID -- dummy [dbo].[DimSupplierAgreement2nd] because of SPL model has and needs it!
	,'' AS [Company] -- dummy [dbo].[DimSupplierAgreement2nd] because of SPL model has and needs it!
    ,'' AS [PartNum] -- dummy [dbo].[DimSupplierAgreement2nd] because of SPL model has and needs it!
	,'' AS [Supplier] -- dummy [dbo].[DimSupplierAgreement2nd] because of SPL model has and needs it!
	,'' AS [SupplierNum] -- dummy [dbo].[DimSupplierAgreement2nd] because of SPL model has and needs it!
FROM 
	[dw].[SupplierAgreement]
WHERE Company = '' -- dummy [dbo].[DimSupplierAgreement2nd] because of SPL model has and needs it!
GO
PRINT N'Creating [ext].[DimCompany]'
GO
create view [ext].[DimCompany] AS
select [CompanyID], [Company], [CompanyName], [CompanyGroup], [Division], [BusinessArea], [Country], [Currency], [CompanyShortO365], [CompanyShort], [CompanyShortAD], [CompanyCode], [FromPeriod], [DateAdd], [ValidatedSales], [ValidatedPurchase], [CompanyLogo] FROM dm.DimCompany
GO
PRINT N'Creating [stage].[SKS_FI_Warehouse]'
GO
CREATE TABLE [stage].[SKS_FI_Warehouse]
(
[WarehouseID] [nvarchar] (50) NULL,
[PartitionKey] [nvarchar] (50) NULL,
[Company] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[WarehouseName] [nvarchar] (50) NULL,
[WarehouseDistrict] [nvarchar] (50) NULL,
[WarehouseAddress] [nvarchar] (50) NULL,
[WarehouseDescription] [nvarchar] (50) NULL,
[WarehouseType] [nvarchar] (50) NULL,
[WarehouseCountry] [nvarchar] (50) NULL,
[WarehouseSite] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vSKS_FI_Warehouse]'
GO
CREATE VIEW [stage].[vSKS_FI_Warehouse] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([WarehouseCode])) AS [WarehouseCode]
	,[WarehouseName]
	,[WarehouseDistrict]
	,[WarehouseAddress]
	--,'' AS [WarehouseDescription]
	,[WarehouseType]
	,[WarehouseCountry]
	,[WarehouseSite]
FROM [stage].[SKS_FI_Warehouse]

GROUP BY 
	PartitionKey,[Company],[WarehouseCode],[WarehouseName],[WarehouseDistrict],[WarehouseAddress],[WarehouseType],[WarehouseCountry],[WarehouseSite]
GO
PRINT N'Creating [dm_FH].[fctGeneralLedger]'
GO
CREATE VIEW [dm_FH].[fctGeneralLedger] AS 
SELECT 
 gl.[GeneralLedgerID]
,gl.[AccountID]
,gl.[CustomerID]
,gl.[SupplierID]
,gl.[CompanyID]
,gl.[ProjectID]
,gl.[CostUnitID]
,gl.[CostBearerID]
,gl.[PartitionKey]
,gl.[Company]
,gl.[AccountNum]
,gl.[CostUnitNum]
,gl.[CostBearerNum]
,gl.[JournalType]
,gl.[JournalDate]
,gl.[JournalNum]
,gl.[JournalLine]
,gl.[AccountingDate]
,gl.[Description]
,gl.[Currency]
,gl.[ExchangeRate]
,gl.[InvoiceAmount]
,gl.[InvoiceAmountLC]
,gl.[CustomerNum]
,gl.[SupplierNum]
,gl.[SalesInvoiceNum]
,gl.[PurchaseInvoiceNum]
,gl.[SupplierInvoiceNum]
,gl.[LinkToOriginalInvoice]
,gl.[DeliveryCountry]
,gl.[TransactionNum]
,gl.[VATCode]
,gl.[VATCodeDesc]
,gl.[GLRes1]
,gl.[GLRes2]
,gl.[GLRes3]
FROM [dm].[FactGeneralLedger] gl
LEFT JOIN dbo.Company com ON gl.Company = com.Company
WHERE com.BusinessArea = 'Fluid Handling Solutions' AND com.[Status] = 'Active'

  --where Company IN ('CNOCERT')
GO
PRINT N'Creating [stage].[CER_EE_StockBalance]'
GO
CREATE TABLE [stage].[CER_EE_StockBalance]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[Currency] [nvarchar] (50) NULL,
[BinNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (70) NOT NULL,
[DelivTime] [int] NULL,
[LastStockTakeDate] [date] NULL,
[LastStdCostCalDate] [date] NULL,
[MaxStockQty] [decimal] (18, 4) NULL,
[StockBalance] [decimal] (18, 4) NULL,
[StockValue] [decimal] (18, 4) NULL,
[ReserveQty] [decimal] (18, 4) NULL,
[BackOrderQty] [decimal] (18, 4) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[StockTakeDiff] [decimal] (18, 4) NULL,
[ReOrderLevel] [decimal] (18, 4) NULL,
[OptimalOrderQty] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vCER_EE_StockBalance]'
GO
CREATE   VIEW [stage].[vCER_EE_StockBalance] AS
--COMMENT EMPTY FIELDS 2022-12-15 VA
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]),'#',TRIM([WarehouseCode]))))) AS ItemWarehouseID
	,UPPER(CONCAT([Company],'#',TRIM([PartNum]),'#',TRIM([WarehouseCode]))) AS ItemWarehouseCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID -- var '0000000'
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([WarehouseCode])) AS WarehouseCode
	,Currency
	,BinNum
	,BatchNum
	,UPPER(TRIM([SupplierNum])) AS SupplierNum
	,UPPER(TRIM([PartNum])) AS PartNum
	,[DelivTime]
	,convert(date, [LastStockTakeDate]) AS LastStockTakeDate
	,LastStdCostCalDate
	--,0 AS SafetyStock
	,MaxStockQty
	,[StockBalance]
	,StockValue
	--,0 AS AvgCost
	,[ReserveQty]
	,[BackOrderQty]
	,[OrderQty]
	,[StockTakeDiff]
	,[ReOrderLevel]
	,[OptimalOrderQty]
	--,'' AS SBRes1
	--,'' AS SBRes2
	--,'' AS SBRes3
	--,0 AS [FIFOValue]
	--,'' AS [DelivTimeToWHS]-- will not be sent out to new companies, not delete in DW for that use as reservation
	--,'' AS [DelivTimeDesc]-- will not be sent out to new companies, not delete in DW for that use as reservation
	--,'' AS [DaysOnStock]
	,convert(date, '') AS OrderDateSupplier
	,convert(date, '') AS OrderDateCust
	--,'' AS BatchNoPrefix-- will not be sent out to new companies, not delete in DW for that use as reservation
	--,'' AS BatchNoSuffix-- will not be sent out to new companies, not delete in DW for that use as reservation
	
FROM 
	[stage].[CER_EE_StockBalance]
GROUP BY
	[PartitionKey],[Company],[PartNum],[WarehouseCode],[StockBalance],[ReserveQty],[BackOrderQty],[OrderQty],[StockTakeDiff],[ReOrderLevel],BinNum,[SupplierNum],[DelivTime], [LastStockTakeDate],LastStdCostCalDate,
	BatchNum, StockValue,[OptimalOrderQty], MaxStockQty,Currency --BatchNoPrefix,BatchNoSuffix,,[DelivTimeToWHS]
GO
PRINT N'Creating [stage].[CER_NO_BC_Customer]'
GO
CREATE TABLE [stage].[CER_NO_BC_Customer]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (100) NULL,
[CustomerName] [nvarchar] (200) NULL,
[AddressLine1] [nvarchar] (200) NULL,
[AddressLine2] [nvarchar] (200) NULL,
[TelephoneNumber1] [nvarchar] (100) NULL,
[Email] [nvarchar] (200) NULL,
[City] [nvarchar] (100) NULL,
[ZIP] [nvarchar] (100) NULL,
[CountryName] [nvarchar] (100) NULL,
[CustomerGroup] [nvarchar] (100) NULL,
[CustomerSubGroup] [nvarchar] (100) NULL,
[SalesPersonCode] [nvarchar] (100) NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[VATNum] [nvarchar] (100) NULL,
[systemCreatedAt] [nvarchar] (50) NULL,
[systemModifiedAt] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (15) NULL,
[genBusPostingGroup] [nvarchar] (40) NULL,
[customerPostingGroup] [nvarchar] (50) NULL,
[CustomerIndustry] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_NO_BC_Customer]'
GO




CREATE VIEW [stage].[vCER_NO_BC_Customer] AS 
SELECT 
	CONVERT(binary(32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
	--,UPPER(CONCAT(Company,'#',TRIM(SupplierNum))) AS SupplierCode
	,CONVERT(binary(32), HASHBYTES('SHA2_256', TRIM(Company))) AS CompanyID
	,PartitionKey
	,Company
	,nullif(TRIM(CustomerNum),'') AS CustomerNum
	,nullif(trim(CustomerName),'') as CustomerName
	,nullif(trim(AddressLine1),'') as AddressLine1
	,nullif(trim(AddressLine2),'') as AddressLine2
	,nullif(CONCAT(CountryName, ', ' + trim([City]),  ', ' + TRIM([Zip]),', ' + trim(addressline1)),'') AS [FullAddressLine]
	,nullif(trim(TelephoneNumber1),'') as TelephoneNum1
	,nullif(trim(Email),'') as Email
	,nullif(TRIM(City),'') AS City
	,nullif(TRIM(ZIP),'') AS ZipCode
	,nullif(trim(CountryName       ),'') as CountryName
	,nullif(trim(CustomerGroup   ),'') as CustomerGroup
    ,nullif(trim(CustomerSubGroup),'') as CustomerSubGroup
    ,nullif(trim(SalesPersonCode ),'') as SalesPersonCode
    ,nullif(trim(SalesPersonName ),'') as SalesPersonName
    ,nullif(trim(VATNum		   ),'') as VATNum
	, CASE
		WHEN CUSTOMERPOSTINGGROUP = 'KONSERN' THEN 'Internal'
		ELSE 'External'
	 END AS InternalExternal
    --,systemCreatedAt
	--,systemModifiedAt
	, CountryCode
	,nullif(CustomerIndustry,'') as CustomerIndustry
FROM 
	 stage.CER_NO_BC_Customer
GO
PRINT N'Creating [prestage].[TRA_FR_Supplier]'
GO
CREATE TABLE [prestage].[TRA_FR_Supplier]
(
[Prop_0] [nvarchar] (8) NOT NULL,
[Prop_1] [nvarchar] (100) NULL,
[Prop_2] [nvarchar] (50) NULL,
[Prop_3] [nvarchar] (50) NULL,
[Prop_4] [nvarchar] (50) NULL,
[Prop_5] [nvarchar] (50) NULL,
[Prop_6] [nvarchar] (50) NULL,
[Prop_7] [nvarchar] (50) NULL,
[Prop_8] [nvarchar] (50) NULL,
[Prop_9] [nvarchar] (50) NULL,
[Prop_10] [nvarchar] (50) NULL,
[Prop_11] [nvarchar] (50) NULL,
[Prop_12] [nvarchar] (50) NULL,
[Prop_13] [nvarchar] (50) NULL,
[Prop_14] [nvarchar] (50) NULL,
[Prop_15] [nvarchar] (50) NULL,
[Prop_16] [nvarchar] (50) NULL,
[Prop_17] [nvarchar] (50) NULL,
[Prop_18] [nvarchar] (50) NULL,
[Prop_19] [nvarchar] (50) NULL,
[Prop_20] [nvarchar] (50) NULL,
[Prop_21] [nvarchar] (50) NULL,
[Prop_22] [nvarchar] (50) NULL,
[Prop_23] [nvarchar] (50) NULL,
[Prop_24] [nvarchar] (50) NULL,
[Prop_25] [nvarchar] (50) NULL,
[Prop_26] [nvarchar] (50) NULL,
[Prop_27] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [prestage].[vTRA_FR_Supplier]'
GO



CREATE VIEW [prestage].[vTRA_FR_Supplier] AS

SELECT 
	CONCAT(CONVERT (date, SYSDATETIME()), ' 00:00:00') AS [PartitionKey]
	,Prop_0 AS [Company]
	,Prop_1 AS [SupplierNum]
	,Prop_2 AS [MainSupplierName]
	,Prop_3 AS [SupplierName]
	,Prop_4 AS [AddressLine1]
	,Prop_5 AS [AddressLine2]
	,Prop_6 AS [AddressLine3]
	,Prop_7 AS [TelephoneNum]
	,Prop_8 AS [Email]
	,Prop_9 AS [ZipCode]
	,Prop_10 AS [City]
	,Prop_11 AS [District]
	,Prop_12 AS [CountryName]
	,Prop_13 AS [Region]
	,Prop_14 AS [SupplierCategory]
	,Prop_15 AS [SupplierResponsible]
	,Prop_16 AS [AccountNum]
	,Prop_17 AS [VATNum]
	,Prop_18 AS [InternalExternal]
	,Prop_19 AS [CodeOfConduct]
	,Prop_20 AS [SupplierScore]
	,Prop_21 AS [MinOrderQty]
	,Prop_22 AS [MinOrderValue]
	,Prop_23 AS [Website]
	,Prop_24 AS [Comments]
	,Prop_25 AS [SRes1]
	,Prop_26 AS [SRes2]
	,Prop_27 AS [SRes3]
FROM [prestage].[TRA_FR_Supplier]
GO
PRINT N'Creating [stage].[TRA_FR_Supplier]'
GO
CREATE TABLE [stage].[TRA_FR_Supplier]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[MainSupplierName] [nvarchar] (100) NULL,
[SupplierName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[AddressLine3] [nvarchar] (100) NULL,
[TelephoneNum] [nvarchar] (50) NULL,
[Email] [nvarchar] (100) NULL,
[City] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (100) NULL,
[Region] [nvarchar] (50) NULL,
[SupplierCategory] [nvarchar] (50) NULL,
[SupplierResponsible] [nvarchar] (100) NULL,
[AccountNum] [nvarchar] (50) NULL,
[VATNum] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[CodeOfConduct] [nvarchar] (50) NULL,
[SupplierScore] [nvarchar] (50) NULL,
[MinOrderQty] [decimal] (18, 4) NULL,
[MinOrderValue] [decimal] (18, 4) NULL,
[Website] [nvarchar] (100) NULL,
[Comments] [nvarchar] (max) NULL,
[SRes1] [nvarchar] (100) NULL,
[SRes2] [nvarchar] (100) NULL,
[SRes3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [prestage].[TRA_FR_Supplier_Load]'
GO


CREATE PROCEDURE [prestage].[TRA_FR_Supplier_Load] AS
BEGIN

Truncate table stage.[TRA_FR_Supplier]

INSERT INTO 
	stage.TRA_FR_Supplier(PartitionKey, Company,  [SupplierNum], [MainSupplierName], [SupplierName], [AddressLine1], [AddressLine2], [AddressLine3], [TelephoneNum], [Email], [ZipCode], [City], [District], [CountryName], [Region], [SupplierCategory], [SupplierResponsible], [AccountNum], [VATNum], [InternalExternal], [CodeOfConduct], [SupplierScore], [MinOrderQty], [MinOrderValue], [Website], [Comments], [SRes1], [SRes2], [SRes3])
SELECT 
	PartitionKey, Company,  [SupplierNum], [MainSupplierName], [SupplierName], [AddressLine1], [AddressLine2], [AddressLine3], [TelephoneNum], [Email], [ZipCode], [City], [District], [CountryName], [Region], [SupplierCategory], [SupplierResponsible], [AccountNum], [VATNum], [InternalExternal], [CodeOfConduct], [SupplierScore], [MinOrderQty], [MinOrderValue], [Website], [Comments], [SRes1], [SRes2], [SRes3]
FROM 
	[prestage].[vTRA_FR_Supplier]

--Truncate table prestage.[TRA_FR_Supplier]

End
GO
PRINT N'Creating [axbus].[IOW_PL_Warehouse]'
GO
CREATE TABLE [axbus].[IOW_PL_Warehouse]
(
[PartitionKey] [nvarchar] (50) NULL,
[Company] [nvarchar] (50) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL,
[WarehouseDistrict] [nvarchar] (100) NULL,
[WarehouseAddress] [nvarchar] (100) NULL,
[WarehouseDescription] [nvarchar] (100) NULL,
[WarehouseType] [nvarchar] (50) NULL,
[WarehouseCountry] [nvarchar] (100) NULL,
[Site] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vIOW_PL_Warehouse]'
GO
CREATE VIEW [stage].[vIOW_PL_Warehouse] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', TRIM([WarehouseCode])))) AS WarehouseID
	,PartitionKey --getdate() AS 

	,Company
	,[WarehouseCode]
	,[WarehouseName]
	,[WarehouseDistrict]
	,[WarehouseAddress]
	,[WarehouseDescription]
	,[WarehouseType]
	,[WarehouseCountry]
	,[Site] AS [WarehouseSite]
FROM [axbus].[IOW_PL_Warehouse]
GO
PRINT N'Creating [dm].[DimSupplierAgreement]'
GO


CREATE VIEW [dm].[DimSupplierAgreement] AS

----------------------------------- Supplier Agreements File --------------------------------------

With DimSupplierAgreement AS 
(SELECT 
--	[StockControlID]
    CONVERT(bigint, [CompanyID]) AS CompanyID
    ,CONVERT(bigint, [SupplierID]) AS SupplierID
    ,CONVERT(bigint, [PartID]) AS PartID
	,CONVERT(bigint, [CurrencyID]) AS CurrencyID
	,Company
    ,[PartNum]
	,[SupplierNum]
    ,[DiscountPercent]
    ,[UnitPrice]
	,[AgreementQty]
	,[AgreementCode]
	,[AgreementDescription]
	,[AgreementStart]
	,[AgreementEnd]
	,SupplierTerms
	,FulfilledQty
	,RemainingQty
	,UoM
	,[Currency]
	,[DelivTime]
	,[PartitionKey]
FROM 
	[dw].[SupplierAgreement]
),
------------------------------------------- Retrieveing latest Exchangerate for each Currency --------------------------------------------

-- All distinct rates per company and date
ExchangeRateTable AS
(select distinct 
	Company,
	Currency, 
	ExchangeRate, 
	PurchaseInvoiceDate
from dm.FactPurchaseInvoice
group by Company, Currency, ExchangeRate, PurchaseInvoiceDate),

-- All currencies and there latest appearence
LatestCurrencyTable AS
(select distinct 
	Company,
	Currency,  
	MAX(PurchaseInvoiceDate) AS "PurchaseInvoiceDate"
from dm.FactPurchaseInvoice
group by Company, Currency),

-- Mapping the exchangerates on the latest appearence
LatestCurrencyRateTable AS
(Select 
	LatestCurrencyTable.*,
	ExchangeRate
from LatestCurrencyTable 
	Right Outer Join ExchangeRateTable 
	on LatestCurrencyTable.Company = ExchangeRateTable.Company 
	and LatestCurrencyTable.Currency = ExchangeRateTable.Currency
	and LatestCurrencyTable.PurchaseInvoiceDate = ExchangeRateTable.PurchaseInvoiceDate)


------------------------------------ Specifing the view ---------------------------------------------
SELECT 
	DimSupplierAgreement.*
	,ExchangeRate as ExchangeRate
FROM DimSupplierAgreement
	Left Join LatestCurrencyRateTable 
		on LatestCurrencyRateTable.Company = DimSupplierAgreement.Company 
		and LatestCurrencyRateTable.Currency = DimSupplierAgreement.Currency
GO
PRINT N'Creating [ext].[DnBCustomerAndSupplier]'
GO
CREATE VIEW [ext].[DnBCustomerAndSupplier] AS

SELECT [PartitionKey], [dw_id], [is_customer], [DUNS], [BusinessName1], [BusinessName2], [VisitStreetAddress], [MailStreetAddress], [VisitPostalCode], [ProvinceName], [CountryCode], [TelephoneNumber], [LocalRegistrationNumber], [Email], [lastDateDetected], [sent_date], [match_date], [enrich_date], [last_modified_date], [confidence_code], [is_monitored], [monitor_date], [Company], [match_status], [enrich_status], [error_detail], [manual_date], [monitor_status]
FROM dnb.DnBCustomerAndSupplier
GO
PRINT N'Creating [stage].[CER_FI_PurchaseLedger]'
GO
CREATE TABLE [stage].[CER_FI_PurchaseLedger]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierCode] [nvarchar] (50) NOT NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[InvoiceLCYAmount] [decimal] (18, 4) NOT NULL,
[InvoiceCurrAmount] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (10) NULL,
[VATPaid] [decimal] (18, 4) NULL,
[VATcode] [nvarchar] (10) NULL,
[PayToName] [nvarchar] (50) NULL,
[PaymentTermsCode] [nvarchar] (50) NULL,
[PrepaymentNum] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_FI_PurchaseLedger]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vCER_FI_PurchaseLedger] AS 

SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(SupplierCode), '#', TRIM(PurchaseInvoiceNum)))) AS PurchaseLedgerID 
	,CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(PurchaseInvoiceNum)) AS PurchaseLedgerCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256',TRIM(Company))) AS CompanyID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierCode))))) AS SupplierID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(PurchaseInvoiceNum)))) AS PurchaseInvoiceID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM(CurrencyCode)))) AS CurrencyID 
	,CONVERT(int, replace(convert(date,InvoiceDate),'-','')) AS PurchaseInvoiceDateID  
	,[PartitionKey]

	,TRIM(UPPER([Company])) AS [Company]
	,TRIM(UPPER(SupplierCode)) AS SupplierNum
	,TRIM(UPPER([PurchaseOrderNum])) AS [PurchaseOrderNum]
	,TRIM(UPPER([PurchaseInvoiceNum])) AS [PurchaseInvoiceNum]
	,CONVERT(date, [InvoiceDate]) AS PurchaseInvoiceDate
	,CONVERT(date, [DueDate]) AS PurchaseDueDate
	,CONVERT(date, [LastPaymentDate]) AS PurchaseLastPaymentDate
	,[InvoiceLCYAmount] 
	,[InvoiceCurrAmount] AS InvoiceAmount
--	,IIF([InvoiceCurrAmount]=0, null, [InvoiceLCYAmount]/[InvoiceCurrAmount]) AS ExchangeRate
	,[ExchangeRate]
	,TRIM(UPPER([CurrencyCode])) AS Currency
	,[VATPaid]	AS VATAmount
	,[VATcode]	AS VATCode
	,[PayToName]
	--,'' AS [PayToCity]
	--,'' AS [PayToContact]
	,TRIM(UPPER([PaymentTermsCode])) AS PaymentTerms
	,[PrepaymentNum]
	--,'' AS LastPaymentNum
	--,'' AS PLRES1
	--,'' AS PLRES2
	--,'' AS PLRES3
	--,NULL AS PaidInvoiceAmount
	--,NULL AS RemainingInvoiceAmount
	--,NULL AS LinkToOriginalInvoice
	,'' AS AccountingDate
	--,NULL AS AgingPeriod
	--,NULL AS AgingSort
	--,NULL AS VATCodeDesc
FROM 
	[stage].[CER_FI_PurchaseLedger]
GO
PRINT N'Creating [dm_FH].[fctStockTransaction]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE VIEW [dm_FH].[fctStockTransaction] AS

SELECT 
 st.[StockTransactionID]
,st.[CompanyID]
,st.[PartID]
,st.[WarehouseID]
,st.[CurrencyID]
,st.[TransactionDateID]
,st.[SupplierID]
,st.[PurchaseOrderNumID]
,st.[PurchaseInvoiceID]
,st.[CustomerID]
,st.[SalesOrderNumID]
,st.[SalesInvoiceID]
,st.[CurrencyMonthKey]
,st.[Company]
,st.[WarehouseCode]
,st.[TransactionCode]
,st.[TransactionDescription]
,st.[IssuerReceiverNum]
,st.[IssuerReceiverName]
,st.[OrderNum]
,st.[OrderLine]
,st.[InvoiceNum]
,st.[InvoiceLine]
,st.[PartNum]
,st.[BinNum]
,st.[BatchNum]
,st.[TransactionDate]
,st.[TransactionTime]
,st.[TransactionQty]
,st.[TransactionValue]
,st.[CostPrice]
,st.[SalesUnitPrice]
,st.[Currency]
,st.[Reference]
,st.[AdjustmentDate]
,st.[IndexKey]
,st.[InternalExternal]

FROM dm.FactStockTransaction st
LEFT JOIN dbo.Company com ON st.Company = com.Company
WHERE com.BusinessArea = 'Fluid Handling Solutions' AND com.[Status] = 'Active'
GO
PRINT N'Creating [stage].[MIT_UK_SalesLedger]'
GO
CREATE TABLE [stage].[MIT_UK_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPayDate] [date] NULL
)
GO
PRINT N'Creating [stage].[vMIT_UK_SalesLedger]'
GO
CREATE VIEW [stage].[vMIT_UK_SalesLedger] AS
--COMMENT EMPTY FIELDS // ADD UPPER() TRIM() INTO CustomerID 22-12-28 VA
--SEE THE GROUP BY CLAUSE POSSIBLE ISSUE 
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ), '#', TRIM(InvoiceNum)))) AS SalesLedgerID,  --, '#', DueDate, '#', LastPayDate
	CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID,
	--CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID,
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ) ))) AS CustomerID,
	CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ), '#', TRIM(InvoiceNum)) AS SalesLedgerCode,
	PartitionKey,

	TRIM(Company) AS Company,
	TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ) AS CustomerNum,
	TRIM(InvoiceNum) AS SalesInvoiceNum,  -- various blank spaces after InvoiceNum, it affects query results! data-Input quality should be improved!
	CONVERT(date, MIN(DueDate)) AS SalesDueDate,
	CONVERT(date, MAX(LastPayDate)) AS SalesLastPaymentDate,
	CONVERT(date, MAX(InvoiceDate)) AS SalesInvoiceDate, -- DZ added 20210324
	--NULL AS InvoiceAmount,
	--NULL AS PaidInvoiceAmount,
	--NULL AS RemainingInvoiceAmount,
	1 AS ExchangeRate,
	--'EUR' AS Currency,
	--NULL AS VATAmount,
	--'' AS VATCode,
	--'' AS PayToName,
	--'' AS PayToCity,
	--'' AS PayToContact,
	--'' AS PaymentTerms,
	--'' AS SLRes1,
	--'' AS SLRes2,
	--'' AS SLRes3
	'1900-01-01' AS AccountingDate
	--,'' AS AgingPeriod
	--,'' AS AgingSort
	--,'' AS VATCodeDesc
	--,'' AS LinkToOriginalInvoice
FROM 
	stage.MIT_UK_SalesLedger
GROUP BY
	PartitionKey, Company, TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ), TRIM(InvoiceNum)--, DueDate, LastPayDate
GO
PRINT N'Creating [stage].[NOM_DK_SalesLedger]'
GO
CREATE TABLE [stage].[NOM_DK_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (25) NULL,
[InvoiceDate] [datetime] NULL,
[DueDate] [datetime] NULL,
[LastPaymentDate] [datetime] NULL
)
GO
PRINT N'Creating [stage].[vNOM_DK_SalesLedger]'
GO
CREATE VIEW [stage].[vNOM_DK_SalesLedger] AS
--Comment empty fields 23-01-05 VA
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#', TRIM(CustNum), '#', TRIM(InvoiceNum))))) AS SalesLedgerID,
	CONVERT([binary](32),HASHBYTES('SHA2_256', UPPER(TRIM(Company)))) AS CompanyID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustNum))))) AS CustomerID,
	UPPER(CONCAT(TRIM(Company),'#', TRIM(CustNum), '#', TRIM(InvoiceNum))) AS SalesLedgerCode,
	PartitionKey,

	UPPER(TRIM(Company)) AS Company,
	UPPER(TRIM(CustNum)) as CustomerNum,
	UPPER(TRIM(InvoiceNum)) as SalesInvoiceNum,
	CONVERT(DATE, InvoiceDate) AS SalesInvoiceDate,
	CONVERT(date, DueDate) AS SalesDueDate,
	CONVERT(date, LastPaymentDate) AS SalesLastPaymentDate,
	--0 AS InvoiceAmount,
	--0 AS RemainingInvoiceAmount,
	1 AS ExchangeRate,
	'DKK' AS Currency,
	--0 AS VATAmount,
	--'' AS VATCode,
	--'' AS PayToName,
	--'' AS PayToCity,
	--'' AS PayToContact,
	--'' AS PaymentTerms,
	--'' AS SLRes1,
	--'' AS SLRes2,
	--'' AS SLRes3
	--,NULL			AS PaidInvoiceAmount
	'1900-01-01' AS AccountingDate
	--,NULL AS AgingPeriod
	--,NULL AS AgingSort
	--,NULL AS VATCodeDesc
	--,NULL AS LinkToOriginalInvoice
FROM 
	stage.NOM_DK_SalesLedger
GO
PRINT N'Creating [prestage].[TRA_FR_PurchaseInvoice]'
GO
CREATE TABLE [prestage].[TRA_FR_PurchaseInvoice]
(
[Prop_0] [nvarchar] (8) NOT NULL,
[Prop_1] [nvarchar] (100) NULL,
[Prop_2] [nvarchar] (50) NULL,
[Prop_3] [nvarchar] (50) NULL,
[Prop_4] [nvarchar] (50) NULL,
[Prop_5] [nvarchar] (50) NULL,
[Prop_6] [nvarchar] (50) NULL,
[Prop_7] [nvarchar] (50) NULL,
[Prop_8] [nvarchar] (50) NULL,
[Prop_9] [nvarchar] (50) NULL,
[Prop_10] [nvarchar] (50) NULL,
[Prop_11] [nvarchar] (50) NULL,
[Prop_12] [nvarchar] (50) NULL,
[Prop_13] [nvarchar] (50) NULL,
[Prop_14] [nvarchar] (50) NULL,
[Prop_15] [nvarchar] (50) NULL,
[Prop_16] [nvarchar] (50) NULL,
[Prop_17] [nvarchar] (50) NULL,
[Prop_18] [nvarchar] (50) NULL,
[Prop_19] [nvarchar] (50) NULL,
[Prop_20] [nvarchar] (50) NULL,
[Prop_21] [nvarchar] (50) NULL,
[Prop_22] [nvarchar] (50) NULL,
[Prop_23] [nvarchar] (50) NULL,
[Prop_24] [nvarchar] (50) NULL,
[Prop_25] [nvarchar] (50) NULL,
[Prop_26] [nvarchar] (50) NULL,
[Prop_27] [nvarchar] (50) NULL,
[Prop_28] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [prestage].[vTRA_FR_PurchaseInvoice]'
GO


CREATE VIEW [prestage].[vTRA_FR_PurchaseInvoice] AS

SELECT 
	CONCAT(CONVERT (date, SYSDATETIME()), ' 00:00:00') AS [PartitionKey]
	,Prop_0 AS [Company]
	,Prop_1 AS [PurchaseOrderNum]
	,Prop_2 AS [PurchaseOrderLine]
	,Prop_3 AS [PurchaseOrderSubLine]
	,Prop_4 AS [PurchaseOrderType]
	,Prop_5 AS [PurchaseInvoiceNum]
	,Prop_6 AS [PurchaseInvoiceLine]
	,Prop_7 AS [PurchaseInvoiceType]
	,Prop_8 AS [PurchaseInvoiceDate]
	,Prop_9 AS [ActualDelivDate]
	,Prop_10 AS [SupplierNum]
	,Prop_11 AS [PartNum]
	,Prop_12 AS [PurchaseInvoiceQty]
	,Prop_13 AS [UoM]
	,Prop_14 AS [UnitPrice]
	,Prop_15 AS [DiscountPercent]
	,Prop_16 AS [DiscountAmount]
	,Prop_17 AS [TotalMiscChrg]
	,Prop_18 AS [VATAmount]
	,Prop_19 AS [ExchangeRate]
	,Prop_20 AS [Currency]
	,Prop_21 AS [CreditMemo]
	,Prop_22 AS [PurchaserName]
	,Prop_23 AS [WarehouseCode]
	,Prop_24 AS [PurchaseChannel]
	,Prop_25 AS [Comment]
	,Prop_26 AS [PIRes1]
	,Prop_27 AS [PIRes2]
	,Prop_28 AS [PIRes3]

FROM [prestage].[TRA_FR_PurchaseInvoice]
GO
PRINT N'Creating [prestage].[TRA_FR_PurchaseInvoice_Load]'
GO
CREATE PROCEDURE [prestage].[TRA_FR_PurchaseInvoice_Load] AS
BEGIN

Truncate table stage.[TRA_FR_PurchaseInvoice]

INSERT INTO 
	stage.TRA_FR_PurchaseInvoice 
	(PartitionKey, Company, [PurchaseOrderNum], [PurchaseOrderLine], [PurchaseOrderSubLine], [PurchaseInvoiceNum], [PurchaseInvoiceLine], [PurchaseInvoiceType], [PurchaseInvoiceDate], [ActualDelivDate], [SupplierNum], [PartNum], [PurchaseInvoiceQty], [UoM], [UnitPrice], [DiscountPercent], [DiscountAmount], [TotalMiscChrg], [VATAmount], [ExchangeRate], [Currency], [CreditMemo], [PurchaserName], [WarehouseCode], [PurchaseChannel], [Comment], [PIRes1], [PIRes2], [PIRes3])
SELECT 
	PartitionKey, Company, [PurchaseOrderNum], [PurchaseOrderLine], [PurchaseOrderSubLine], [PurchaseInvoiceNum], [PurchaseInvoiceLine], [PurchaseInvoiceType], [PurchaseInvoiceDate], [ActualDelivDate], [SupplierNum], [PartNum], [PurchaseInvoiceQty], [UoM], [UnitPrice], [DiscountPercent], [DiscountAmount], [TotalMiscChrg], [VATAmount], [ExchangeRate], [Currency], [CreditMemo], [PurchaserName], [WarehouseCode], [PurchaseChannel], [Comment], [PIRes1], [PIRes2], [PIRes3]
FROM 
	[prestage].[vTRA_FR_PurchaseInvoice]

--Truncate table prestage.[TRA_FR_PurchaseInvoice]

End
GO
PRINT N'Creating [stage].[ABK_SE_PurchaseInvoice]'
GO
CREATE TABLE [stage].[ABK_SE_PurchaseInvoice]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[PurchaseInvoiceLine] [nvarchar] (50) NULL,
[PurchaseInvoiceDate] [nvarchar] (50) NULL,
[ActualDelivDate] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PurchaseInvoiceQty] [nvarchar] (50) NULL,
[UnitPrice] [nvarchar] (50) NULL,
[ExchangeRate] [nvarchar] (50) NULL,
[DiscountPercent] [nvarchar] (50) NULL,
[ISOCode] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PurchaserName] [nvarchar] (100) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vABK_SE_PurchaseInvoice]'
GO
CREATE VIEW [stage].[vABK_SE_PurchaseInvoice] AS
--COMMENT EMPTY FIELDS // ADD TRIM() INTO PartID,WarehouseID 2022-12-21 VA
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(PurchaseOrderSubLine),'#',TRIM(PurchaseInvoiceNum),'#',TRIM(PurchaseInvoiceLine), '#', TRIM([PartNum]) )))) AS PurchaseInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine))))) AS PurchaseOrderID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum))))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierNum))))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(trim(Company), '#', TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum))))) AS PurchaseLedgerID
	,CONVERT(int, replace(PurchaseInvoiceDate, '-', '')) AS PurchaseInvoiceDateID
	,UPPER(CONCAT(Company, '#', TRIM(SupplierNum), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine))) AS PurchaseOrderCode
	,UPPER(CONCAT(Company, '#', TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum))) AS PurchaseInvoiceCode 
	,getdate() AS PartitionKey

	,UPPER(Company) AS Company
	,TRIM(PurchaseOrderNum) AS PurchaseOrderNum
	,TRIM(PurchaseOrderLine) AS PurchaseOrderLine
	,TRIM(PurchaseOrderSubLine) AS PurchaseOrderSubLine
	--,'' AS PurchaseOrderType --MIN
	,TRIM(PurchaseInvoiceNum) AS PurchaseInvoiceNum
	,TRIM(PurchaseInvoiceLine) PurchaseInvoiceLine
	--,'' PurchaseInvoiceType
	,CONVERT(date, IIF(PurchaseInvoiceDate = '0', '1900-01-01', PurchaseInvoiceDate)) AS PurchaseInvoiceDate
	,MAX(CONVERT(date, ActualDelivDate)) AS ActualDelivDate -- take the latest date for invoice --
	,TRIM(UPPER(SupplierNum)) AS SupplierNum
	,TRIM(UPPER([PartNum])) AS PartNum
	,SUM(CONVERT(decimal(18,4), PurchaseInvoiceQty)) AS PurchaseInvoiceQty --sum different batch payment --
	--,'' AS UoM
	,CONVERT(decimal(18,4), UnitPrice) AS UnitPrice
	,CONVERT(decimal(18,4), DiscountPercent) AS DiscountPercent
	,SUM(CONVERT(decimal(18,4), PurchaseInvoiceQty))*CONVERT(decimal(18,4), UnitPrice)*CONVERT(decimal(18,4), DiscountPercent)/100 AS DiscountAmount
	--,NULL AS TotalMiscChrg
	--,NULL AS VATAmount
	,IIF(ISOCode IN ('SEK', 'DKK', 'NOK'), AVG(CONVERT(decimal(18,4), ExchangeRate))/100, AVG(CONVERT(decimal(18,4), ExchangeRate))) AS ExchangeRate -- first date and the latest date invoice can have different curr.rates, not neccessarily who is the lagest, so average them --
	,TRIM(ISOCode) AS Currency
	,TRIM(CreditMemo) AS CreditMemo
	,TRIM(PurchaserName) AS PurchaserName
	,TRIM(WarehouseCode) AS WarehouseCode
	--,'' AS PurchaseChannel
	--,'' AS Comment
	--,'' AS PIRes1
	--,'' AS PIRes2
	--,'' AS PIRes3
FROM stage.ABK_SE_PurchaseInvoice
GROUP BY
	PartitionKey, Company, PurchaseOrderNum, PurchaseInvoiceNum, SupplierNum, PartNum, PurchaserName, PurchaseInvoiceLine,  PurchaseInvoiceDate, UnitPrice, CreditMemo, WarehouseCode, ISOCode, PurchaseOrderLine, PurchaseOrderSubLine, DiscountPercent--, PurchaseInvoiceQty, ActualDelivDate, ExchangeRate
GO
PRINT N'Creating [dm_ALL].[dimSupplierAgreement]'
GO
CREATE VIEW [dm_ALL].[dimSupplierAgreement] AS

SELECT 
 [CompanyID]
,[SupplierID]
,[PartID]
,[CurrencyID]
,[Company]
,[PartNum]
,[SupplierNum]
,[DiscountPercent]
,[UnitPrice]
,[AgreementQty]
,[AgreementCode]
,[AgreementDescription]
,[AgreementStart]
,[AgreementEnd]
,[SupplierTerms]
,[FulfilledQty]
,[RemainingQty]
,[UoM]
,[Currency]
,[DelivTime]
,[PartitionKey]
,[ExchangeRate]
FROM [dm].[DimSupplierAgreement]
GO
PRINT N'Creating [prestage].[TRA_FR_SalesLedger]'
GO
CREATE TABLE [prestage].[TRA_FR_SalesLedger]
(
[Prop_0] [nvarchar] (8) NOT NULL,
[Prop_1] [nvarchar] (100) NULL,
[Prop_2] [nvarchar] (50) NULL,
[Prop_3] [nvarchar] (50) NULL,
[Prop_4] [nvarchar] (50) NULL,
[Prop_5] [nvarchar] (50) NULL,
[Prop_6] [nvarchar] (50) NULL,
[Prop_7] [nvarchar] (50) NULL,
[Prop_8] [nvarchar] (50) NULL,
[Prop_9] [nvarchar] (50) NULL,
[Prop_10] [nvarchar] (50) NULL,
[Prop_11] [nvarchar] (50) NULL,
[Prop_12] [nvarchar] (50) NULL,
[Prop_13] [nvarchar] (50) NULL,
[Prop_14] [nvarchar] (50) NULL,
[Prop_15] [nvarchar] (50) NULL,
[Prop_16] [nvarchar] (50) NULL,
[Prop_17] [nvarchar] (50) NULL,
[Prop_18] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [prestage].[vTRA_FR_SalesLedger]'
GO


CREATE VIEW [prestage].[vTRA_FR_SalesLedger] AS

SELECT 
	CONCAT(CONVERT (date, SYSDATETIME()), ' 00:00:00') AS [PartitionKey]
	,Prop_0 AS [Company]
	,Prop_1 AS CustomerNum
	,Prop_2 AS SalesInvoiceNum
	,CONVERT(date, CONCAT(SUBSTRING(Prop_3, 7,4), SUBSTRING(Prop_3, 4,2), SUBSTRING(Prop_3, 1,2))) AS SalesInvoiceDate
	,CONVERT(date, CONCAT(SUBSTRING(Prop_4, 7,4), SUBSTRING(Prop_4, 4,2), SUBSTRING(Prop_4, 1,2))) AS DueDate
	,CONVERT(date, CONCAT(SUBSTRING(Prop_5, 7,4), SUBSTRING(Prop_5, 4,2), SUBSTRING(Prop_5, 1,2))) AS LastPaymentDate
	,TRY_CONVERT(decimal(18,4), Prop_6) AS InvoiceAmount
	,TRY_CONVERT(decimal(18,4), Prop_7) AS RemainingInvoiceAmount
	,TRY_CONVERT(decimal(18,4), Prop_8) AS ExchangeRate
	,Prop_9 AS Currency
	,TRY_CONVERT(decimal(18,4), Prop_10) AS VATAmount
	,Prop_11 AS VATCode
	,Prop_12 AS PayToName
	,Prop_13 AS PayToCity
	,Prop_14 AS PayToContact
	,Prop_15 AS PaymentTerms
FROM [prestage].[TRA_FR_SalesLedger]
GO
PRINT N'Creating [stage].[CER_LT_SalesOrderLog]'
GO
CREATE TABLE [stage].[CER_LT_SalesOrderLog]
(
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[DelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[CurrExchRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (50) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[NeedbyDate] [date] NULL,
[SalesPerson] [nvarchar] (100) NULL,
[ReturnComment] [nvarchar] (500) NULL,
[SalesReturnInvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[CancellationCode] [nvarchar] (50) NULL,
[IndexKey] [nvarchar] (50) NOT NULL,
[PartitionKey] [varchar] (50) NULL,
[TransactionDate] [date] NULL
)
GO
PRINT N'Creating [stage].[vCER_LT_SalesOrderLog]'
GO
CREATE VIEW [stage].[vCER_LT_SalesOrderLog] As
SELECT 
	--COMMINT EMPTY FIELDS // ADD UPPER()TRIM() INTO PartID,CustomerID 2022-12-14 VA	
	  CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', IndexKey)))) AS SalesOrderLogID
	  ,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM(Company))) AS CompanyID
	  ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	  --,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	  ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(UPPER(PartNum)))))) AS PartID
	  --,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(UPPER(PartNum))))) AS PartID
	  ,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	  --,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(UPPER(WarehouseCode))))) AS WarehouseID
	  --,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(UPPER(PartNum)))) AS SalesOrderCode 
	  ,CONVERT(int, replace(convert(date, OrderDate),'-','')) AS SalesOrderDateID   --redundent
	  ,PartitionKey

	  ,[Company]
      ,[CustNum]	AS CustomerNum
      ,[OrderNum]	AS SalesOrderNum
      ,[OrderLine]	AS SalesOrderLine
      ,[OrderSubLine]	AS SalesOrderSubLine
      ,[OrderType]		AS SalesOrderType
	  --,'' AS SalesOrderLogType
      ,[OrderDate]		AS SalesOrderDate
	  ,[TransactionDate]	AS SalesOrderLogDate
	  --,[DelivDate]		AS ExpDelivDate
      ,[InvoiceNum]		AS SalesInvoiceNum
      ,[OrderQty]		AS SalesOrderQty
	  --,''	AS UoM
      ,[UnitPrice]
      ,[UnitCost]
      ,[Currency]
      ,[CurrExchRate]	AS ExchangeRate
      ,[OpenRelease]
      ,[DiscountPercent]
      ,[DiscountAmount]
      ,[PartNum]
	  ,IIF(OrderSubLine = '000000', 'Main', 'Sub' ) AS PartType
      --,[NeedbyDate]
      ,[SalesPerson]	AS SalesPersonName
	  --,''				AS Department
      ,[ReturnComment]
      ,[SalesReturnInvoiceNum]
      ,[WarehouseCode]
      ,[CancellationCode]
      ,[IndexKey]
	  --,'' AS SORes1
	  --,'' AS SORes2
	  --,'' AS SORes3
	  
  FROM [stage].[CER_LT_SalesOrderLog]
GO
PRINT N'Creating [dm_FH].[dimCostUnit]'
GO

CREATE VIEW [dm_FH].[dimCostUnit] AS 


SELECT  cu.[CostUnitID]
,cu.[PartitionKey]
,cu.[CostUnitCode]
,cu.[CompanyID]
,cu.[Company]
,cu.[CostUnitNum]
,cu.[CostUnitName]
,cu.[CostUnitStatus]
,cu.[CostUnitGroup]
,cu.[CostUnitGroup2]
,cu.[CostUnitGroup3]
FROM [dm].[DimCostUnit] cu
LEFT JOIN dbo.Company com ON cu.Company = com.Company
WHERE com.BusinessArea = 'Fluid Handling Solutions' AND com.[Status] = 'Active'

--WHERE [Company] in ('CNOCERT')
GO
PRINT N'Creating [stage].[NOM_NO_PurchaseOrder]'
GO
CREATE TABLE [stage].[NOM_NO_PurchaseOrder]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [varchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaseOrderType] [nvarchar] (50) NULL,
[PurchaseOrderDate] [date] NULL,
[PurchaseOrderStatus] [nvarchar] (50) NULL,
[OpenRelease] [nvarchar] (50) NULL,
[OrgReqDelivDate] [date] NULL,
[CommittedDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[ReqDelivDate] [date] NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[SupplierPartNum] [nvarchar] (50) NULL,
[SupplierInvoiceNum] [nvarchar] (50) NULL,
[DelivCustomerNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[PurchaseOrderQty] [decimal] (18, 4) NULL,
[ReceiveQty] [decimal] (18, 4) NULL,
[PurchaseInvoiceQty] [decimal] (18, 4) NULL,
[MinOrderQty] [decimal] (18, 4) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[LandedCost] [decimal] (18, 4) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[PurchaserName] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[RecievingNum] [nvarchar] (50) NULL,
[DelivTimeWorkDays] [nvarchar] (50) NULL,
[DelivTime] [nvarchar] (50) NULL,
[PurchaseChannel] [nvarchar] (50) NULL,
[Documents] [nvarchar] (50) NULL,
[Comments] [nvarchar] (max) NULL,
[PORes1] [nvarchar] (50) NULL,
[PORes2] [nvarchar] (50) NULL,
[PORes3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vNOM_NO_PurchaseOrder]'
GO
CREATE VIEW [stage].[vNOM_NO_PurchaseOrder] AS
--COMMENT EMPTY FIELD // ADD TRIM() INTO CustomerID,PartID 23-01-09 VA
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(PurchaseInvoiceNum))))) AS PurchaseOrderID
	,UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine))) AS PurchaseOrderCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseInvoiceNum))))) AS PurchaseInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(Currency)))) AS CurrencyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(DelivCustomerNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(DelivCustomerNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum))))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierNum))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,PartitionKey AS PartitionKey

	,UPPER(TRIM(Company)) AS Company
	,UPPER(TRIM(PurchaseOrderNum)) AS PurchaseOrderNum
	,UPPER(TRIM(PurchaseOrderLine)) AS PurchaseOrderLine
	--,'' AS PurchaseOrderSubLine
	,TRIM(PurchaseOrderType) AS PurchaseOrderType
	,PurchaseOrderDate
	,PurchaseOrderStatus
	,OpenRelease
	,OrgReqDelivDate
	,CommittedDelivDate
	,ActualDelivDate
	,ReqDelivDate
	,UPPER(TRIM(PurchaseInvoiceNum)) AS [PurchaseInvoiceNum]
	,UPPER(TRIM(PartNum)) AS PartNum
	,UPPER(TRIM(SupplierNum)) AS [SupplierNum]
	,TRIM(SupplierPartNum) AS SupplierPartNum
	,TRIM(SupplierInvoiceNum) AS SupplierInvoiceNum
	,TRIM(DelivCustomerNum) AS [DelivCustomerNum]
	,PartStatus
	,PurchaseOrderQty
	,ReceiveQty
	,PurchaseInvoiceQty AS InvoiceQty
	,MinOrderQty
	,[UoM]
	,UnitPrice
	,DiscountPercent
	,DiscountAmount
	,LandedCost
	,ExchangeRate
	,Currency
	,TRIM(PurchaserName) AS PurchaserName
	,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
	,TRIM(RecievingNum) AS ReceivingNum
	,DelivTime
	,PurchaseChannel
	,Documents
	,TRIM(Comments) AS Comments
	,DelivTimeWorkDays AS PORes1 
	--,'' AS PORes2 
	--,'' AS PORes3
FROM 
	[stage].[NOM_NO_PurchaseOrder]
	
GROUP BY
	PartitionKey, Company, PurchaseOrderNum, PurchaseOrderLine, SupplierNum, DelivCustomerNum, PurchaseOrderStatus, PurchaseInvoiceNum, PartNum, OpenRelease, PurchaseOrderType, UnitPrice, PurchaseOrderQty, ReceiveQty, PurchaseInvoiceQty, MinOrderQty, UoM,  ExchangeRate, Currency, PurchaseOrderDate, ActualDelivDate, OrgReqDelivDate, CommittedDelivDate, ReqDelivDate, PurchaserName, WarehouseCode, DiscountPercent, DiscountAmount, RecievingNum, DelivTime, DelivTimeWorkDays, PurchaseChannel, SupplierPartNum, SupplierInvoiceNum,PartStatus,Documents, Comments, LandedCost --, SysRowID, LeadTime
GO
PRINT N'Creating [stage].[SKS_FI_mapStockTranCode]'
GO
CREATE TABLE [stage].[SKS_FI_mapStockTranCode]
(
[TransactionCode] [nvarchar] (50) NOT NULL,
[TransactionDescription] [nvarchar] (200) NULL,
[Internal_External] [nvarchar] (50) NULL,
[Description] [nvarchar] (200) NULL,
[Comment] [nvarchar] (200) NULL
)
GO
PRINT N'Creating [stage].[vSKS_FI_StockTransaction]'
GO

CREATE VIEW [stage].[vSKS_FI_StockTransaction] AS 
WITH CTE AS (
SELECT 
	[PartitionKey], [MANDT], [SYSROWID], [COMPANY], [WAREHOUSECODE], [TRANSTYPE], [TRANSTYPEDESC], [PARTNUM], [TRANQTY], [BINNUM], [BARTCHNUM], [TRANSACTIONDATE], [CREATEDATE], [TRANSACTIONTIME], [ORDERNUM], [INVOICENUM], [COSTPRICE], [SELLINGPRICE], [CURRENCY], [ISSUERRECEIVERCODE], [TRANSOURCE], [TRANVALUE], [REFERENCE], [SRES1], [SRES2], [SRES3]
	,CAST(CASE WHEN [WAREHOUSECODE] = 'F251' THEN 'FI25'
			WHEN [WAREHOUSECODE] = 'F261' THEN 'FI26'
			WHEN [WAREHOUSECODE] = 'SE10' THEN 'SE10'
			WHEN [WAREHOUSECODE] = 'F201' THEN 'FI20'
		ELSE [WAREHOUSECODE] END  AS nvarchar(10)) AS SKSCompCode
FROM 
	[stage].[SKS_FI_StockTransaction]  
WHERE [WAREHOUSECODE] NOT IN ('FI00','SE10')
	and (TRIM(partnum) != '' and PARTNUM is not null)    -- Filter out PartNum that are missing a value. These are related to subcontracting/service and should not affect the stockvalue. /ET 2022-08-18
)
--ADD TRIM()UPPER()INTO PartID,CustomerID,WarehouseID 2022-12-16
SELECT distinct
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#',  SYSROWID))) AS StockTransactionID	--Temporary PK due to SYSROWID not working with daily refresh. Needs revision /SM 2022-02-28
	,CONCAT([Company], '#', TRIM(SYSROWID)) AS IndexKey --StockTransactionCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', (TRIM([Company])))) AS CompanyID
    --,CONVERT([binary](32), HASHBYTES('SHA2_256', (CONCAT(TRIM([Company]), '#', TRIM([PartNum]), '#', SKSCompCode)))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', (UPPER(CONCAT(TRIM([Company]), '#', TRIM([PartNum]), '#', TRIM(SKSCompCode)))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', (CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
 	,CONVERT([binary](32), HASHBYTES('SHA2_256', (UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode])))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', (CONCAT(TRIM([Company]), '#', TRIM([OrderNum]))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', (CONCAT(TRIM([Company]), '#', TRIM([OrderNum]))))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', (CONCAT(TRIM([Company]), '#', TRIM([InvoiceNum]))))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', (CONCAT(TRIM([Company]), '#', TRIM([InvoiceNum]))))) AS PurchaseInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', (UPPER(CONCAT(TRIM([Company]), '#', TRIM(ISSUERRECEIVERCODE), '#', TRIM(SKSCompCode)))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', (CONCAT(TRIM([Company]), '#', TRIM(ISSUERRECEIVERCODE), '#', SKSCompCode )))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', (CONCAT(TRIM([Company]), '#', TRIM(ISSUERRECEIVERCODE), '#', SKSCompCode )))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', (TRIM('')))) AS CurrencyID
	,[PartitionKey]

    --,CASE WHEN COMPANY = 'SKSSWE' THEN 'JSESKSSW' ELSE COMPANY END AS Company
	,Company
	,TRIM(WAREHOUSECODE) AS WarehouseCode
	,iif(CAST([TRANSACTIONDATE] AS date) = '2018-11-22' and TRANSTYPEDESC = 'Initial stock entry','OB',TRANSTYPE) AS TransactionCode
	,iif(CAST([TRANSACTIONDATE] AS date) = '2018-11-22' and TRANSTYPEDESC = 'Initial stock entry','Opening balance',TRANSTYPEDESC) AS TransactionDescription
	,ISSUERRECEIVERCODE AS IssuerReceiverNum
    ,OrderNum
	--,'' AS OrderLine
	,InvoiceNum
	--,'' AS InvoiceLine
	,IIF(ISNUMERIC([PARTNUM]) = 1,CAST(CAST(trim([PARTNUM]) AS int)as nvarchar(50)),(trim([PARTNUM]))) AS PartNum
    ,TRIM(BINNUM) AS BinNum
    ,TRIM(BARTCHNUM) AS BatchNum
	,IIF([TRANSACTIONDATE] = '' OR [TRANSACTIONDATE] is null, '1900-01-01', CAST([TRANSACTIONDATE] AS date)) AS TransactionDate
	,TRANSACTIONTIME AS TransactionTime --CAST(TRANSACTIONTIME AS Time) --failed ??? --didn't take in, shall be done later
	--,IIF(TRANQTY = '' OR TRANQTY is NULL, Null, CONVERT(decimal(18,4), TRIM(TRANQTY))) AS [TransactionQty]
	,TRY_CONVERT(decimal(18,4), IIF(CHARINDEX('-',TRANQTY) > 0, '-' + REPLACE(TRIM(TranQty), '-',''), TRIM(TRANQTY))) AS [TransactionQty]
	--,IIF(TRANVALUE = '' OR TRANVALUE is NULL, Null, CONVERT(decimal(18,4), TRIM(TRANVALUE))) AS TransactionValue
	,TRY_CONVERT(decimal(18,4), IIF(CHARINDEX('-',TRANVALUE) > 0, '-' + REPLACE(TRIM(TRANVALUE), '-',''), TRIM(TRANVALUE))) AS TransactionValue
	,IIF(COSTPRICE = '', Null, CONVERT(decimal(18,4), TRIM(COSTPRICE))) AS [CostPrice]
	,IIF(SELLINGPRICE = '', Null, CONVERT(decimal(18,4), TRIM(SELLINGPRICE))) AS [SalesUnitPrice]
	,CURRENCY AS [Currency]
	,IIF(mapTrancode.Internal_External = 'External', 'E', 'I') AS Reference
	--,IIF(CREATEDATE = '' OR CREATEDATE is null, '1900-01-01', CAST(CREATEDATE AS date)) AS AdjustmentDate -CreateDate is equivalent to GETDATE(), meaning that it's not very useful at all
	,'1900-01-01'  AS AdjustmentDate
	,IIF(mapTrancode.Internal_External = 'External', 'External', 'Internal') AS InternalExternal
	,TRIM(SYSROWID) AS STRes1
	,Reference AS STRes2
	,SRES3 AS STRes3
FROM 
	CTE
LEFT JOIN stage.SKS_FI_mapStockTranCode as mapTrancode ON CTE.TRANSTYPE = mapTrancode.TransactionCode

/*
GROUP BY [PartitionKey],[MANDT],[COMPANY],[WAREHOUSECODE],[TRANSTYPE],[TRANSTYPEDESC],[PARTNUM],[BINNUM],[BARTCHNUM],[TRANSACTIONDATE],[CREATEDATE],[TRANSACTIONTIME]
      ,[ORDERNUM],[INVOICENUM],[CURRENCY],[ISSUERRECEIVERCODE],[TRANSOURCE],[REFERENCE],[SRES1],[SRES2],[SRES3], SKSCompCode, mapTrancode.Internal_External
--	   ,[TRANQTY]
      --,[TRANVALUE]
--	  ,[COSTPRICE]
--     ,[SELLINGPRICE]
*/
GO
PRINT N'Creating [prestage].[CYE_ES_PartTranLine]'
GO
CREATE TABLE [prestage].[CYE_ES_PartTranLine]
(
[Company] [nvarchar] (8) NOT NULL,
[SysDate] [nvarchar] (50) NULL,
[TranDate] [date] NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[BinNumber] [nvarchar] (50) NULL,
[LotNum] [nvarchar] (50) NULL,
[TranType] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[TranQty] [nvarchar] (50) NULL,
[AvgCost] [nvarchar] (50) NULL,
[SysRowID] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [prestage].[vCYE_ES_PartTranLine]'
GO



CREATE VIEW [prestage].[vCYE_ES_PartTranLine] AS
SELECT 
	concat(CONVERT (date, SYSDATETIME()), ' 00:00:00') AS [PartitionKey]
	,'CYESA' AS [Company]
	,TRIM(SysDate) AS SysDate
	,CONVERT(DATE, TranDate, 120) AS TranDate
	,TRIM(WarehouseCode) AS WarehouseCode
	,TRIM(BinNumber) AS BinNumber
	,TRIM(LotNum) AS LotNum
	,TRIM(TranType) AS TranType
	,TRIM(SysRowID) AS SysRowID
	,TRIM(PartNum) AS PartNum
	,CONVERT(Decimal(18,4), REPLACE(REPLACE(TranQty,'.',''),',','.')) AS TranQty
	,CONVERT(Decimal(18,4), REPLACE(REPLACE(AvgCost,'.',''),',','.')) AS AvgCost
FROM [prestage].[CYE_ES_PartTranLine]
GO
PRINT N'Creating [prestage].[CYE_ES_PartTranLine_Load]'
GO

CREATE PROCEDURE [prestage].[CYE_ES_PartTranLine_Load] AS

BEGIN

Truncate table stage.[CYE_ES_PartTranLine]

insert into stage.CYE_ES_PartTranLine(
	[PartitionKey]
      ,[Company]
      ,[SysDate]
      ,[TranDate]
      ,[WarehouseCode]
      ,[BinNumber]
      ,[LotNum]
      ,[TranType]
      ,[PartNum]
      ,[AvgCost]
      ,[TranQty]
      ,[SysRowID]
)
select 
	  [PartitionKey]
      ,[Company]
      ,[SysDate]
      ,[TranDate]
      ,[WarehouseCode] 
      ,[BinNumber]
      ,[LotNum]
      ,[TranType]
      ,[PartNum]
      ,[AvgCost]
      ,[TranQty]
      ,[SysRowID]
from [prestage].[vCYE_ES_PartTranLine]

--Truncate table prestage.[CYE_ES_PartTranLine] --Two loads in LSSourceTables_CYESA_dev uses the same prestage. Truncating would create conflicts. /SM 2022-02-23

End
GO
PRINT N'Creating [stage].[NOM_NO_PurchaseLedger]'
GO
CREATE TABLE [stage].[NOM_NO_PurchaseLedger]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NOT NULL,
[PurchaseInvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[InvoiceAmount] [decimal] (18, 4) NOT NULL,
[RemainingInvoiceAmount] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (10) NULL,
[VATAmount] [decimal] (18, 4) NULL,
[VATCode] [nvarchar] (10) NULL,
[PayToName] [nvarchar] (50) NULL,
[PayToCity] [nvarchar] (50) NULL,
[PayToContact] [nvarchar] (50) NULL,
[PaymentTerms] [nvarchar] (50) NULL,
[PrePaymentNum] [nvarchar] (50) NULL,
[LastPaymentNum] [nvarchar] (50) NULL,
[PLRes1] [nchar] (10) NULL,
[PLRes2] [nchar] (10) NULL,
[PLRes3] [nchar] (10) NULL
)
GO
PRINT N'Creating [stage].[vNOM_NO_PurchaseLedger]'
GO
CREATE VIEW [stage].[vNOM_NO_PurchaseLedger] AS 
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum))))) AS PurchaseLedgerID -- shall = in Invoice
	,UPPER(CONCAT(Company, '#', TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum))) AS PurchaseLedgerCode --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum))))) AS SupplierID 
	--,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(Company, '#', TRIM(SupplierNum))))) AS SupplierID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(PurchaseInvoiceNum))))) AS PurchaseInvoiceID --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM(Currency)))) AS CurrencyID --Redundant?
	,CONVERT(int, replace(convert(date,PurchaseInvoiceDate),'-','')) AS PurchaseInvoiceDateID  --Redundant?
	,[PartitionKey]

	,TRIM(UPPER([Company])) AS [Company]
	,TRIM(UPPER(SupplierNum)) AS SupplierNum
	,UPPER(TRIM([PurchaseOrderNum])) AS [PurchaseOrderNum]
	,UPPER(TRIM([PurchaseInvoiceNum])) AS  [PurchaseInvoiceNum]
	,CONVERT(date, PurchaseInvoiceDate) AS PurchaseInvoiceDate
	,CONVERT(date, [DueDate]) AS PurchaseDueDate
	,CONVERT(date, [LastPaymentDate]) AS PurchaseLastPaymentDate
	,RemainingInvoiceAmount 
	,InvoiceAmount
	,[ExchangeRate]
	,Currency
	,VATAmount
	,VATCode
	,[PayToName]
	,[PayToCity]
	,[PayToContact]
	,PaymentTerms
	,UPPER(TRIM([PrepaymentNum])) AS [PrepaymentNum]
	,UPPER(TRIM(LastPaymentNum)) AS LastPaymentNum
	,'' AS PLRES1
	,'' AS PLRES2
	,'' AS PLRES3
	--,NULL AS PaidInvoiceAmount
	--,NULL AS LinkToOriginalInvoice
	,CAST ('1900-01-01' AS DATE) AS AccountingDate
	--,NULL AS AgingPeriod
	--,NULL AS AgingSort
	--,NULL AS VATCodeDesc
FROM 
	[stage].[NOM_NO_PurchaseLedger]
GO
PRINT N'Creating [dm_DS].[dimSupplierAgreement]'
GO
CREATE VIEW [dm_DS].[dimSupplierAgreement] AS

SELECT 
 sa.[CompanyID]
,sa.[SupplierID]
,sa.[PartID]
,sa.[CurrencyID]
,sa.[Company]
,sa.[PartNum]
,sa.[SupplierNum]
,sa.[DiscountPercent]
,sa.[UnitPrice]
,sa.[AgreementQty]
,sa.[AgreementCode]
,sa.[AgreementDescription]
,sa.[AgreementStart]
,sa.[AgreementEnd]
,sa.[SupplierTerms]
,sa.[FulfilledQty]
,sa.[RemainingQty]
,sa.[UoM]
,sa.[Currency]
,sa.[DelivTime]
,sa.[PartitionKey]
,sa.[ExchangeRate]
FROM [dm].[DimSupplierAgreement] sa
LEFT JOIN dbo.Company com ON sa.Company = com.Company
WHERE com.BusinessArea = 'Driveline Solutions' AND com.[Status] = 'Active'

--WHERE [Company] in ('AFISCM', 'CDKCERT', 'CEECERT', 'CFICERT', 'CLTCERT', 'CLVCERT', 'CSECERT', 'CUKCERT', 'CNOEHAU', 'CNOCERT', 'CERPL', 'CyESA', 'HFIHAKL', 'TRACLEV')
GO
PRINT N'Creating [prestage].[CYE_ES_OLine]'
GO
CREATE TABLE [prestage].[CYE_ES_OLine]
(
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderRelNum] [nvarchar] (200) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[DelivDate] [date] NULL,
[OrderQty] [nvarchar] (50) NULL,
[DelivQty] [nvarchar] (50) NULL,
[RemainingQty] [nvarchar] (50) NULL,
[InvoiceQty] [nvarchar] (50) NULL,
[UnitPrice] [nvarchar] (50) NULL,
[UnitCost] [nvarchar] (50) NULL,
[OpenRelease] [nvarchar] (50) NULL,
[DiscountPercent] [nvarchar] (50) NULL,
[DiscountAmount] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[NeedbyDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[SalesOfficeDescrip] [nvarchar] (50) NULL,
[SalesGroupCode] [nvarchar] (50) NULL,
[SalesGroupDescrip] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[UnitCostEK02] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [prestage].[vCYE_ES_OLine]'
GO





CREATE view [prestage].[vCYE_ES_OLine]
as
SELECT 
	concat(CONVERT (date, SYSDATETIME()), ' 00:00:00') AS [PartitionKey]
	,'CYESA' AS [Company]
	,TRIM(CustNum) AS CustNum
	,TRIM(OrderNum) AS OrderNum
	,TRIM(OrderLine) AS OrderLine
	,OrderRelNum
	,OrderType
	,CONVERT(DATE, OrderDate, 120) AS OrderDate
	,CONVERT(DATE, DelivDate, 120) AS DelivDate
	,CONVERT(Decimal(18,4), REPLACE(OrderQty,',','')) AS OrderQty
	,CONVERT(Decimal(18,4), REPLACE(DelivQty,',','')) AS DelivQty
	,CONVERT(Decimal(18,4), REPLACE(RemainingQty,',','')) AS RemainingQty
	,CONVERT(Decimal(18,4), REPLACE(InvoiceQty,',','')) AS InvoiceQty
	,CONVERT(Decimal(18,4), REPLACE([UnitPrice],',','')) AS [UnitPrice]
	,CONVERT(Decimal(18,4), REPLACE([UnitCost],',','')) AS [UnitCost]
	,OpenRelease
	,CONVERT(Decimal(18,4), REPLACE([DiscountPercent],',','')) AS [DiscountPercent]
	,CONVERT(Decimal(18,4), REPLACE([DiscountAmount],',','')) AS [DiscountAmount]
	,TRIM(PartNum) AS PartNum
	,CONVERT(DATE, NeedbyDate, 120) AS NeedbyDate
	,SalesPerson
	,SalesOfficeDescrip
	,SalesGroupCode
	,SalesGroupDescrip
	,WarehouseCode
	,TRIM(InvoiceNum) AS InvoiceNum
FROM [prestage].[CYE_ES_OLine]
GO
PRINT N'Creating [stage].[HAK_FI_SalesLedger]'
GO
CREATE TABLE [stage].[HAK_FI_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (10) NULL,
[InvoiceNum] [nvarchar] (25) NULL,
[InvoiceDate] [datetime] NULL,
[DueDate] [datetime] NULL,
[LastPaymentDate] [datetime] NULL
)
GO
PRINT N'Creating [stage].[vHAK_FI_SalesLedger]'
GO


CREATE VIEW [stage].[vHAK_FI_SalesLedger] AS
--COMMENT EMPTY FIELDS 2022-12-21 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(InvoiceNum))))) AS SalesLedgerID,
	CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID,
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID,
	UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(InvoiceNum))) AS SalesLedgerCode,
	PartitionKey,

	TRIM(Company) AS Company,
	UPPER(TRIM(CustNum)) AS CustomerNum,
	UPPER(TRIM(InvoiceNum)) AS SalesInvoiceNum,
	InvoiceDate AS SalesInvoiceDate,
	CONVERT(date, Min(DueDate)) AS SalesDueDate,
	CONVERT(date, MAX(LastPaymentDate)) AS SalesLastPaymentDate,
	--0 AS InvoiceAmount,
	--NULL AS PaidInvoiceAmount,
	--0 AS RemainingInvoiceAmount,
	1 AS ExchangeRate,
	'EUR' AS Currency,
	--0 AS VATAmount,
	--'' AS VATCode,
	--'' AS PayToName,
	--'' AS PayToCity,
	--'' AS PayToContact,
	--'' AS PaymentTerms,
	--'' AS SLRes1,
	--'' AS SLRes2,
	--'' AS SLRes3

	'1900-01-01' AS AccountingDate
	--,'' AS AgingPeriod
	--,'' AS AgingSort
	--,'' AS VATCodeDesc
	--,'' AS LinkToOriginalInvoice
FROM
	stage.HAk_FI_SalesLedger
GROUP BY
	PartitionKey, Company, CustNum, InvoiceDate, InvoiceNum
GO
PRINT N'Creating [dm_FH].[fctPurchaseOrderDistinct]'
GO
CREATE VIEW [dm_FH].[fctPurchaseOrderDistinct] AS

SELECT  pod.[PurchaseOrderNumID]
,pod.[CompanyID]
,pod.[SupplierID]
,pod.[PurchaseOrderNum]
,pod.[Company]
,pod.[Supplier]

FROM dm.FactPurchaseOrderDistinct pod
LEFT JOIN dbo.Company com ON pod.Company = com.Company
WHERE com.BusinessArea = 'Fluid Handling Solutions' AND com.[Status] = 'Active'
GO
PRINT N'Creating [stage].[NOM_SEIND_SOLine]'
GO
CREATE TABLE [stage].[NOM_SEIND_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (100) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[PartClass] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (10) NULL,
[PartNum] [nvarchar] (50) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[Indexkey] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[UpdateStock] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vNOM_SEIND_SOLine]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vNOM_SEIND_SOLine] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company),'#',TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(PartNum), '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine))))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum), '#', TRIM(InvoiceNum))))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(OrderNum))))) AS SalesOrderNumID  
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,UPPER(CONCAT(TRIM(Company), '#', TRIM(OrderNum), '#', TRIM(OrderLine))) AS SalesOrderCode 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(InvoiceNum))))) AS SalesInvoiceNumID 
	,CONVERT(int, replace(convert(date,InvoiceDate), '-', '')) AS SalesInvoiceDateID
	,UPPER(CONCAT(TRIM(Company), '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine))) AS SalesInvoiceCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT( Company, '#', '') ))) AS ProjectID
	,PartitionKey

	,UPPER(TRIM(Company)) AS Company
	,TRIM(SalesPerson) AS SalesPersonName
	,UPPER(TRIM(CustNum)) AS CustomerNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,CASE WHEN TRIM(OrderNum) = '0' THEN 'PrimaryPart' ELSE 'SubPart' END  AS PartType
	,UPPER(TRIM(OrderNum)) AS SalesOrderNum
	,UPPER(TRIM(OrderLine)) AS SalesOrderLine
	,UPPER(TRIM(OrderSubLine)) AS SalesOrderSubLine-- '0' as OrderSubLine
	,UPPER(TRIM(OrderType)) AS SalesOrderType
	,UPPER(TRIM(InvoiceNum)) AS SalesInvoiceNum
	,UPPER(TRIM(InvoiceLine)) AS SalesInvoiceLine
	--,'' AS SalesInvoiceType
	,CONVERT(date, InvoiceDate) AS SalesInvoiceDate
	,CONVERT(date, ActualDeliveryDate) AS ActualDelivDate
	,CASE WHEN CreditMemo = '1' THEN -1*ABS(SellingShipQty)
--		WHEN UnitCost = 0 THEN 0 
		ELSE SellingShipQty END AS SalesInvoiceQty
	,ABS(UnitPrice) AS UnitPrice 
	,ABS(UnitCost) AS UnitCost 
	--,'' AS UoM
	--,0 AS DiscountPercent
	,DiscountAmount
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	,TotalMiscChrg
	--,0 AS VATAmount
	,Currency
	,ExchangeRate
	,CreditMemo
	--,CASE WHEN LEFT(SalesPerson, 7) = 'WEBSHOP' THEN 'Webshop'
	--	WHEN SUBSTRING(SalesPerson, 2, 5) = 'BUTIK' OR SUBSTRING(SalesPerson, 1, 7) = 'KONTANT' THEN 'Over-the-Counter'
	--	ELSE 'Normal Order Handling' END AS SalesChannel
	,SalesChannel
	,UpdateStock AS IsUpdatingStock
	--,'' AS Department
	,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
	--,NULL AS DeliveryAddress
	--,'' AS CostBearerNum
	--,'' AS CostUnitNum
	--,'' AS ReturnComment
	--,'' AS ReturnNum
	,TRIM(PartClass) AS ProjectNum
	,MAX(Indexkey) AS IndexKey
	--,'' AS SIRes1
	--,'' AS SIRes2
	--,'' AS SIRes3
FROM 
	stage.NOM_SEIND_SOLine AS SO
GROUP BY
	PartitionKey, Company, CustNum, OrderNum, OrderLine, OrderSubLine, OrderType, InvoiceNum, InvoiceLine, InvoiceDate, SellingShipQty, UnitPrice, UnitCost, Currency, ExchangeRate, TotalMiscChrg, DiscountAmount,PartNum, SalesPerson,  WarehouseCode, CreditMemo, SalesChannel, UpdateStock, PartClass, ActualDeliveryDate
GO
PRINT N'Creating [stage].[FOR_SE_GeneralLedger]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[FOR_SE_GeneralLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[AccountNum] [nvarchar] (50) NULL,
[CostUnitNum] [nvarchar] (50) NULL,
[CostBearerNum] [nvarchar] (50) NULL,
[JournalType] [nvarchar] (50) NULL,
[TransactionNum] [nvarchar] (50) NULL,
[APInvoiceNum] [nvarchar] (50) NULL,
[ARInvoiceNum] [nvarchar] (50) NULL,
[JournalNum] [nvarchar] (50) NULL,
[JournalLine] [nvarchar] (50) NULL,
[Description] [nvarchar] (500) NULL,
[Currency] [nvarchar] (50) NULL,
[FiscalYear] [nvarchar] (50) NULL,
[FiscalPeriod] [nvarchar] (50) NULL,
[AmountSystemCurrency] [decimal] (18, 4) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[SupplierInvoiceNum] [nvarchar] (50) NULL,
[JournalDate] [date] NULL,
[AccountingDate] [date] NULL,
[VATCode] [nvarchar] (50) NULL,
[VATCodeDesc] [nvarchar] (max) NULL,
[LinktoOriginalInvoice] [nvarchar] (500) NULL,
[SysRowID] [nvarchar] (50) NULL,
[UserIDBooked] [nvarchar] (50) NULL,
[UserIDApproved] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vFOR_SE_GeneralLedger]'
GO

-- Good-to-know:
-- DESCRIBE (AND DATE) ANY CHANGES TO STANDARD SCRIPT HERE.
 -- Switched Accounding Date and JournalDate fields as they have been incorrectly mapped (2022-10-27 SB)

CREATE VIEW [stage].[vFOR_SE_GeneralLedger] AS
SELECT
--------------------------------------------- Keys/ IDs ---------------------------------------------
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company, '#', SysRowID))) AS GeneralLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT(Company, '#', [AccountNum]))) AS AccountID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',Concat(Company, '#', SupplierNum))) AS SupplierID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(CustomerNum)))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT(Company, ''))) AS ProjectID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT(Company, '#', [CostUnitNum]))) AS CostUnitID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT(Company, '#', [CostBearerNum]))) AS CostBearerID
	,PartitionKey

--------------------------------------------- Regular Fields ---------------------------------------------
---Mandatory Fields ---
	,Company
	,[AccountNum]
	,[JournalNum]
	,CONVERT(date, [JournalDate]) AS AccountingDate --this must have been mapped incorrectly, because journal date = accounting date and viceversa. Made change 2022-10-27 (SB)
	,'SEK' AS [Currency]
	,1 AS ExchangeRate
	,[AmountSystemCurrency] AS InvoiceAmount
	,[AmountSystemCurrency] AS InvoiceAmountLC
---Valuable Fields ---
	,[CostUnitNum]
	,[CostBearerNum]
	,[JournalType]
	,[JournalLine]
	,[Description]
	,CONVERT(date, [AccountingDate]) AS JournalDate --this must have been mapped incorrectly, because journal date = accounting date and viceversa. Made change 2022-10-27 (SB)
	,CustomerNum
	,SupplierNum
	,ARInvoiceNum	AS SalesInvoiceNum
	,APInvoiceNum	AS PurchaseInvoiceNum
	,SupplierInvoiceNum
	,[LinktoOriginalInvoice] AS [LinkToOriginalInvoice]
	,'' AS DeliveryCountry
	,[TransactionNum]	
	,[VATCode]
	,[VATCodeDesc]
--- Good-to-have Fields ---
--UserIDApproved
--IsManual

--------------------------------------------- Meta Data ---------------------------------------------
--,CONVERT(date, ModifiedTimeStamp) AS ModifiedTimeStamp
--,CONVERT(date, CreatedTimeStamp) AS CreatedTimeStamp
--,TRIM(IsActiveRecord) AS IsActiveRecord

--------------------------------------------- Extra Fields ---------------------------------------------
	,'' AS GLRes1
	,'' AS GLRes2
	,'' AS GlRes3

FROM 
	stage.FOR_SE_GeneralLedger

/*GROUP BY
	PartitionKey, SysRowID, Company, [SupplierNum], [CustomerNum], [CostUnitNum], [CostBearerNum], [SupplierInvoiceNum], [JournalDate], [AccountingDate], [Currency], [AmountSystemCurrency], [AccountNum], [JournalType], [TransactionNum], [JournalNum], [JournalLine], [Description], [VATCode], [LinktoOriginalInvoice], [APInvoiceNum], [ARInvoiceNum], [FiscalPeriod], [VATCodeDesc],[FiscalYear]
	*/
GO
PRINT N'Creating [prestage].[TRA_FR_Customer]'
GO
CREATE TABLE [prestage].[TRA_FR_Customer]
(
[Prop_0] [nvarchar] (8) NULL,
[Prop_1] [nvarchar] (50) NULL,
[Prop_2] [nvarchar] (max) NULL,
[Prop_3] [nvarchar] (max) NULL,
[Prop_4] [nvarchar] (max) NULL,
[Prop_5] [nvarchar] (max) NULL,
[Prop_6] [nvarchar] (max) NULL,
[Prop_7] [nvarchar] (max) NULL,
[Prop_8] [nvarchar] (max) NULL,
[Prop_9] [nvarchar] (max) NULL,
[Prop_10] [nvarchar] (max) NULL,
[Prop_11] [nvarchar] (max) NULL,
[Prop_12] [nvarchar] (max) NULL,
[Prop_13] [nvarchar] (max) NULL,
[Prop_14] [nvarchar] (max) NULL,
[Prop_15] [nvarchar] (max) NULL,
[Prop_16] [nvarchar] (max) NULL,
[Prop_17] [nvarchar] (max) NULL,
[Prop_18] [nvarchar] (max) NULL,
[Prop_19] [nvarchar] (max) NULL,
[Prop_20] [nvarchar] (max) NULL,
[Prop_21] [nvarchar] (max) NULL,
[Prop_22] [nvarchar] (max) NULL,
[Prop_23] [nvarchar] (max) NULL,
[Prop_24] [nvarchar] (max) NULL,
[Prop_25] [nvarchar] (max) NULL,
[Prop_26] [nvarchar] (max) NULL,
[Prop_27] [nvarchar] (max) NULL,
[Prop_28] [nvarchar] (max) NULL,
[Prop_29] [nvarchar] (max) NULL,
[Prop_30] [nvarchar] (max) NULL,
[Prop_31] [nvarchar] (max) NULL,
[Prop_32] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [prestage].[vTRA_FR_Customer]'
GO


CREATE VIEW [prestage].[vTRA_FR_Customer] AS

SELECT 
	CONCAT(CONVERT (date, SYSDATETIME()), ' 00:00:00') AS [PartitionKey]
	,Prop_0 AS [Company]
	,Prop_1 AS [CustomerNum]
	,Prop_2 AS [MainCustomerName]
	,Prop_3 AS [CustomerName]
	,Prop_4 AS [AddressLine1]
	,Prop_5 AS [AddressLine2]
	,Prop_6 AS [AddressLine3]
	,Prop_7 AS [TelephoneNum1]
	,Prop_8 AS [TelephoneNum2]
	,Prop_9 AS [Email]
	,Prop_10 AS [ZipCode]
	,Prop_11 AS [City]
	,Prop_12 AS [State]
	,Prop_13 AS [SalesDistrict]
	,Prop_14 AS [CountryName]
	,Prop_15 AS [Division]
	,Prop_16 AS [CustomerIndustry]
	,Prop_17 AS [CustomerSubIndustry]
	,Prop_18 AS [CustomerGroup]
	,Prop_19 AS [CustomerSubGroup]
	,Prop_20 AS [SalesPersonCode]
	,Prop_21 AS [SalesPersonName]
	,Prop_22 AS [SalesPersonResponsible]
	,Prop_23 AS [VATNum]
	,Prop_24 AS [AccountNum]
	,Prop_25 AS [InternalExternal]
	,Prop_26 AS [CustomerScore]
	,Prop_27 AS [CustomerType]
	,Prop_28 AS [CRes1]
	,Prop_29 AS [CRes2]
	,Prop_30 AS [CRes3]
	,Prop_31 AS [CountryCode]
FROM [prestage].[TRA_FR_Customer]
GO
PRINT N'Creating [prestage].[TRA_FR_Customer_Load]'
GO
CREATE PROCEDURE [prestage].[TRA_FR_Customer_Load] AS
BEGIN

Truncate table stage.[TRA_FR_Customer]

INSERT INTO 
	stage.TRA_FR_Customer 
	(PartitionKey, Company, CustomerNum, [MainCustomerName], CustomerName, AddressLine1, AddressLine2, AddressLine3, TelephoneNum1, [TelephoneNum2], Email, City, ZipCode, [State], [SalesDistrict], CountryCode, CountryName, Division, CustomerIndustry, CustomerSubIndustry, CustomerGroup, CustomerSubGroup, SalesPersonCode, SalesPersonName, SalesPersonResponsible, [VATNum], AccountNum, InternalExternal, CustomerScore, CustomerType, CRes1, CRes2, CRes3)
SELECT 
	PartitionKey, Company, CustomerNum, [MainCustomerName], CustomerName, AddressLine1, AddressLine2, AddressLine3, TelephoneNum1, [TelephoneNum2], Email, City, ZipCode, [State], [SalesDistrict], CountryCode, CountryName, Division, CustomerIndustry, CustomerSubIndustry, CustomerGroup, CustomerSubGroup, SalesPersonCode, SalesPersonName, SalesPersonResponsible, [VATNum], AccountNum, InternalExternal, CustomerScore, CustomerType, CRes1, CRes2, CRes3
FROM 
	[prestage].[vTRA_FR_Customer]

--Truncate table prestage.[TRA_FR_Customer]

End
GO
PRINT N'Creating [stage].[FOR_ES_CustomerAgreement]'
GO
CREATE TABLE [stage].[FOR_ES_CustomerAgreement]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[AgreementCode] [nvarchar] (20) NULL,
[AgreementDescription] [nvarchar] (50) NULL,
[DiscountPercent] [decimal] (9, 2) NULL,
[UnitPrice] [decimal] (9, 2) NULL,
[AgreementQty] [decimal] (9, 2) NULL,
[FulfilledQty] [decimal] (9, 2) NULL,
[RemainingQty] [decimal] (9, 2) NULL,
[Currency] [nvarchar] (15) NULL,
[AgreementStart] [date] NULL,
[AgreementEnd] [date] NULL,
[CustomerTerms] [nvarchar] (100) NULL,
[CARes1] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vFOR_ES_CustomerAgreement]'
GO

CREATE VIEW [stage].[vFOR_ES_CustomerAgreement] AS 
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM(AgreementCode),'#',TRIM([PartNum]),'#',TRIM(CustomerNum))))) AS CustomerAgreementID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID  
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM([Currency])))) AS CurrencyID
	,[PartitionKey]
	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM(CustomerNum)) AS CustomerNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,AgreementCode
	,AgreementDescription
	,DiscountPercent
	,[UnitPrice] AS [UnitPrice]
	,AgreementQty
	,FulfilledQty
	,RemainingQty
	,UPPER(TRIM([Currency])) AS Currency
	,AgreementStart
	,AgreementEnd
	,CustomerTerms
	,CARes1
FROM 
	[stage].[FOR_ES_CustomerAgreement]
GO
PRINT N'Creating [dm_FH].[dimSupplierAgreement]'
GO
CREATE VIEW [dm_FH].[dimSupplierAgreement] AS

SELECT 
 sa.[CompanyID]
,sa.[SupplierID]
,sa.[PartID]
,sa.[CurrencyID]
,sa.[Company]
,sa.[PartNum]
,sa.[SupplierNum]
,sa.[DiscountPercent]
,sa.[UnitPrice]
,sa.[AgreementQty]
,sa.[AgreementCode]
,sa.[AgreementDescription]
,sa.[AgreementStart]
,sa.[AgreementEnd]
,sa.[SupplierTerms]
,sa.[FulfilledQty]
,sa.[RemainingQty]
,sa.[UoM]
,sa.[Currency]
,sa.[DelivTime]
,sa.[PartitionKey]
,sa.[ExchangeRate]
FROM [dm].[DimSupplierAgreement] sa
LEFT JOIN dbo.Company com ON sa.Company = com.Company
WHERE com.BusinessArea = 'Fluid Handling Solutions' AND com.[Status] = 'Active'
GO
PRINT N'Creating [prestage].[vCYE_ES_Warehouse]'
GO







CREATE VIEW [prestage].[vCYE_ES_Warehouse] AS

SELECT 
	CONCAT(CONVERT (date, SYSDATETIME()), ' 00:00:00') AS [PartitionKey]
	,'CYESA' AS [Company]
	,[WarehouseCode]
	,[WarehouseName]
	,[WarehouseDistrict]
	,[WarehouseAddress]
	,[WarehouseDescription]
	,[WarehouseType]
	,[WarehouseCountry]
	,[Site]
FROM [prestage].[CYE_ES_Warehouse]

GROUP BY 
	[WarehouseCode],[WarehouseName],[WarehouseDistrict], [WarehouseDescription], [WarehouseAddress],[WarehouseType],[WarehouseCountry], [Site]
GO
PRINT N'Creating [stage].[JEN_SK_StockBalance]'
GO
CREATE TABLE [stage].[JEN_SK_StockBalance]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PartNum] [nvarchar] (70) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[FIFOValue] [decimal] (18, 4) NULL,
[StockBalance] [decimal] (18, 4) NULL,
[ReservedQty] [decimal] (18, 4) NULL,
[OptimalOrderQty] [decimal] (18, 4) NULL,
[BackOrderQty] [decimal] (18, 4) NULL,
[QtyOrdered] [decimal] (18, 4) NULL,
[StockTakDiff] [decimal] (18, 4) NULL,
[ReOrderLevel] [decimal] (18, 4) NULL,
[AvgWeightedCost] [decimal] (18, 4) NULL,
[AvgCost] [decimal] (18, 4) NULL,
[LandedCost] [decimal] (18, 4) NULL,
[DelivTimeDesc] [nvarchar] (50) NULL,
[DelivTimeUnit] [int] NULL,
[DelivTimeToWHS] [int] NULL,
[SupplierNum] [nvarchar] (50) NULL,
[DefaultBinNo] [nvarchar] (12) NULL,
[BatchNumber] [nvarchar] (50) NULL,
[StockTakDate] [date] NULL,
[StdCostLaCaD] [date] NULL,
[DelivDateSupplier] [date] NULL,
[DelivDateCust] [date] NULL,
[OrderDateSupplier] [date] NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[MaxStockQty] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vJEN_SK_StockBalance]'
GO
CREATE VIEW [stage].[vJEN_SK_StockBalance] AS
--COMMENT empty fields / ADD TRIM()UPPER() INTO PartID,WarehouseID 2022-12-13 VA
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM(UPPER([PartNum])),'#',TRIM(UPPER([WarehouseCode]))))) AS ItemWarehouseID
	,CONCAT([Company],'#',TRIM(UPPER([PartNum])),'#',TRIM(UPPER([WarehouseCode]))) AS ItemWarehouseCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',TRIM([Company]))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM(UPPER([SupplierNum]))))) AS SupplierID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM(UPPER([PartNum]))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM(UPPER([WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM(UPPER([WarehouseCode])))))) AS WarehouseID
	,[PartitionKey]

	,TRIM(UPPER([WarehouseCode])) AS WarehouseCode
	,TRIM(UPPER(CurrencyCode)) AS Currency
	,[Company]
	,TRIM(UPPER([DefaultBinNo])) AS BinNum
	,TRIM(UPPER(BatchNumber)) AS BatchNum
	,TRIM(UPPER([SupplierNum])) AS [SupplierNum]
	,TRIM(UPPER([PartNum])) AS PartNum
	,[DelivTimeUnit] AS [DelivTime]
	,convert(date, [StockTakDate]) AS LastStockTakeDate
	,convert(date, [StdCostLaCaD]) AS LastStdCostCalDate
	--,Null AS SafetyStock
	,MaxStockQty
	,[StockBalance]
	,AvgCost*StockBalance AS StockValue
	,AvgCost
--	,LandedCost
	,[ReservedQty] AS ReserveQty
	,[BackOrderQty]	AS BackOrderQty
	,[QtyOrdered] AS OrderQty
	,[StockTakDiff]	AS StockTakeDiff
	,[ReOrderLevel]
	,[OptimalOrderQty]
	--,'' AS SBRes1
	--,'' AS SBRes2
	--,'' AS SBRes3
FROM 
	[stage].[JEN_SK_StockBalance]
GROUP BY
	PartitionKey, Company, WarehouseCode, CurrencyCode, Company, DefaultBinNo, BatchNumber, SupplierNum, PartNum, DelivTimeUnit, StockTakDate, StdCostLaCaD, MaxStockQty, StockBalance, ReservedQty, BackOrderQty, QtyOrdered, StockTakDiff, ReOrderLevel, OptimalOrderQty, AvgCost
GO
PRINT N'Creating [dm_FH].[dimCustomer]'
GO


CREATE VIEW [dm_FH].[dimCustomer] AS

SELECT cust.[CustomerID]
      ,cust.[CompanyID]
      ,cust.[Company]
      ,cust.[CustomerNum]
      ,cust.[MainCustomerName]
      ,cust.[CustomerName]
      ,cust.[Customer]
      ,cust.[AddressLine1]
      ,cust.[AddressLine2]
      ,cust.[AddressLine3]
      ,cust.[TelephoneNum1]
      ,cust.[TelephoneNum2]
      ,cust.[Email]
      ,cust.[ZipCode]
      ,cust.[City]
      ,cust.[State]
      ,cust.[SalesDistrict]
      ,cust.[CountryCode]
      ,cust.[CountryName]
      ,cust.[Division]
      ,cust.[CustomerIndustry]
      ,cust.[CustomerSubIndustry]
      ,cust.[AddressLine]
      ,cust.[FullAddressLine]
      ,cust.[CustomerGroup]
      ,cust.[CustomerSubGroup]
      ,cust.[SalesPersonCode]
      ,cust.[SalesPersonName]
      ,cust.[SalesPersonResponsible]
      ,cust.[VATNum]
      ,cust.[OrganizationNum]
      ,cust.[AccountNum]
      ,cust.[InternalExternal]
      ,cust.[CustomerScore]
      ,cust.[CustomerType]
      ,cust.[CustomerCode]
      ,cust.[CustomerStatus]
      ,cust.[DUNS]
      ,cust.[DUNS_MatchScore]
      ,cust.[CRes1]
      ,cust.[CRes2]
      ,cust.[CRes3]
      ,cust.[is_inferred]
      ,cust.[is_deleted]
      ,cust.[is_validCountryCode]
      ,cust.[DUNS_Status]
FROM [dm].[DimCustomer] cust
LEFT JOIN dbo.Company com ON cust.Company = com.Company
WHERE com.BusinessArea = 'Fluid Handling Solutions' AND com.[Status] = 'Active'
GO
PRINT N'Creating [stage].[JEN_NO_SupplierAgreement]'
GO
CREATE TABLE [stage].[JEN_NO_SupplierAgreement]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[RecordType] [nvarchar] (50) NULL,
[RecordTypeDesc] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[Discount] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[Qty] [decimal] (18, 4) NULL,
[DelivTimeWeeks] [nvarchar] (10) NULL,
[CurrencyCode] [nvarchar] (10) NULL
)
GO
PRINT N'Creating [stage].[vJEN_NO_SupplierAgreement]'
GO

CREATE VIEW [stage].[vJEN_NO_SupplierAgreement] AS 
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]), '#', TRIM(RecordType), '#', TRIM([PartNum]), '#', TRIM([SupplierNum]), '#', TRIM(CurrencyCode))))) AS SupplierAgreementID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum))))) AS SupplierID 
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(SupplierNum))))) AS SupplierID  
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(CurrencyCode)))) AS CurrencyID --Redundant?
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,RecordType AS AgreementCode
	,RecordTypeDesc AS AgreementDescription
	,Discount AS [DiscountPercent]
	,MAX([UnitPrice]) AS [UnitPrice]
	,NULL AS AgreementQty
	,UPPER(TRIM(CurrencyCode)) AS Currency
	,MAX(DelivTimeWeeks) AS [DelivTime]
	,'' AS AgreementStart
	,'' AS AgreementEnd
	,'' AS [SupplierTerms]
	,NULL	AS FulfilledQty
	,NULL  AS RemainingQty
	,''	AS UoM
	,'' AS  SARes1
	,'' AS  SARes2
	,'' AS  SARes3
FROM 
	[stage].[JEN_NO_SupplierAgreement]

GROUP BY [PartitionKey], [Company], RecordType, RecordTypeDesc, PartNum, SupplierNum, Discount,  CurrencyCode
--WHERE 
--	RecordType = 'D'
GO
PRINT N'Creating [stage].[PAS_PL_SalesLedger]'
GO
CREATE TABLE [stage].[PAS_PL_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[company] [nvarchar] (8) NULL,
[customernum] [nvarchar] (50) NULL,
[invoicenum] [nvarchar] (50) NULL,
[invoicedate] [date] NULL,
[duedate] [date] NULL,
[lastpaymentdate] [date] NULL,
[res1] [nvarchar] (50) NULL,
[res2] [nvarchar] (50) NULL,
[res3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vPAS_PL_SalesLedger]'
GO
CREATE VIEW [stage].[vPAS_PL_SalesLedger] AS
--COMMENT EMPTY FIELD // ADD TRIM() INTO CustomerID 23-01-05 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(company, '#', TRIM(UPPER(customernum)), '#', TRIM(UPPER(invoicenum))))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', company)) AS CompanyID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(UPPER(CustomerNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
	,CONCAT(company, '#', TRIM(UPPER(customernum)), '#', TRIM(UPPER(invoicenum))) AS SalesLedgerCode
	,PartitionKey

	,company AS Company
	,TRIM(UPPER(customernum)) AS CustomerNum
	,TRIM(UPPER(invoicenum)) AS SalesInvoiceNum
	,invoicedate AS SalesInvoiceDate
	,CONVERT(date, duedate) AS SalesDueDate
	,CONVERT(date, lastpaymentdate) AS SalesLastPaymentDate
	--,NULL AS InvoiceAmount
	--,NULL AS RemainingInvoiceAmount
	,1 AS ExchangeRate
	,'PLN' AS Currency
	--,NULL AS VATAmount
	--,'' AS VATCode
	--,'' AS PayToName
	--,'' AS PayToCity
	--,'' AS PayToContact
	--,'' AS PaymentTerms
	,res1 AS SLRes1
	,res2 AS SLRes2
	,res3 AS SLRes3
	--,NULL			AS PaidInvoiceAmount
	,'1900-01-01' AS AccountingDate
	--,NULL AS AgingPeriod
	--,NULL AS AgingSort
	--,NULL AS VATCodeDesc
	--,NULL AS LinkToOriginalInvoice
FROM 
	stage.PAS_PL_SalesLedger

GROUP BY PartitionKey, company, customernum, invoicedate, invoicenum, duedate, lastpaymentdate, res1, res2, res3
GO
PRINT N'Creating [prestage].[CYE_ES_PurchaseInvoice_Load]'
GO
CREATE PROCEDURE [prestage].[CYE_ES_PurchaseInvoice_Load] AS

BEGIN

Truncate table stage.[CYE_ES_PurchaseInvoice]

insert into stage.CYE_ES_PurchaseInvoice(
	PartitionKey,
	[Company],
	PurchaseOrderNum,
	PurchaseOrderLine,
	PurchaseOrderSubLine,
	PurchaseOrderType,
	PurchaseInvoiceNum,
	PurchaseInvoiceLine,
	PurchaseInvoiceType,
	PurchaseInvoiceDate,
	ActualDelivDate,
	[SupplierNum],
	[PartNum],
	PurchaseInvoiceQty,
	UoM,
	[UnitPrice],
	DiscountPercent,
	DiscountAmount,
	TotalMiscChrg,
	VATAmount,
	ExchangeRate,
	Currency,
	CreditMemo,
	PurchaserName,
	WarehouseCode,
	PurchaseChannel,
	Comment,
	PIRes1,
	PIRes2,
	PIRes3
)
select 
	PartitionKey,
	'CyESA',
	PurchaseOrderNum,
	PurchaseOrderLine,
	PurchaseOrderSubLine,
	PurchaseOrderType,
	PurchaseInvoiceNum,
	PurchaseInvoiceLine,
	PurchaseInvoiceType,
	PurchaseInvoiceDate,
	ActualDelivDate,
	[SupplierNum],
	[PartNum],
	PurchaseInvoiceQty,
	UoM,
	[UnitPrice],
	DiscountPercent,
	DiscountAmount,
	TotalMiscChrg,
	VATAmount,
	ExchangeRate,
	Currency,
	CreditMemo,
	PurchaserName,
	WarehouseCode,
	PurchaseChannel,
	Comment,
	PIRes1,
	PIRes2,
	PIRes3
from [prestage].[vCYE_ES_PurchaseInvoice]

--Truncate table prestage.[CYE_ES_POLine] --Two loads in LSSourceTables_CYESA_dev uses the same prestage. Truncating would create conflicts. /SM 2022-02-23

End
GO
PRINT N'Creating [stage].[vTRA_FR_Supplier]'
GO


CREATE VIEW [stage].[vTRA_FR_Supplier] AS

SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID
    ,UPPER(CONCAT([Company],'#',TRIM([SupplierNum]))) AS SupplierCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([SupplierNum])) AS SupplierNum
	,IIF(TRIM(MainSupplierName) IS NULL OR TRIM(MainSupplierName) = '', TRIM(SupplierName), TRIM(MainSupplierName)) AS MainSupplierName
	,TRIM(SupplierName) AS SupplierName
	,TRIM([AddressLine1]) AS AddressLine1
    ,TRIM([AddressLine2]) AS AddressLine2
    ,TRIM([AddressLine3]) AS AddressLine3
	,TRIM([TelephoneNum]) AS [TelephoneNum]
	,[Email]
	,TRIM(ZipCode) AS ZipCode
	,TRIM([City]) AS City
	,District
	,TRIM(CountryName) AS CountryName -- should be removed as it is the same as countrycode
	,TRIM(CountryName) AS CountryCode -- added 2023-03-22 SB
	,[Region] 
	,TRIM([SupplierCategory]) AS SupplierCategory 
	,TRIM(SupplierResponsible) AS SupplierResponsible
	,IIF(AddressLine1 = '', TRIM([AddressLine2]), TRIM([AddressLine1])) AS AddressLine
	,Concat(TRIM(CountryName), ', ', TRIM([City]), ', ', TRIM(ZipCode), ', ', IIF(AddressLine1 = '', TRIM([AddressLine2]), TRIM([AddressLine1]))) AS FullAddressLine
	,CAST([AccountNum] AS nvarchar(50)) AS [AccountNum]
	,[VATNum]
	--,'' AS OrganizationNum
	,IIF(SupplierName like  '%traction levage%' OR InternalExternal =  'Internal', UPPER('INTERNAL'), UPPER('EXTERNAL')) AS  InternalExternal -- AxInter Internal or External
	,IIF(InternalExternal =  'Internal', '0', '1') AS  IsCompanyGroupInternal
	,[CodeOfConduct]
	,1 AS IsMaterialSupplier -- added 2023-04-28 SB.  All costs we receive are from material suppliers according to communication from Traction Levage.
	--,'' AS CustomerNum
	,TRIM(SupplierScore) AS SupplierScore
	,[MinOrderQty]
	,MinOrderValue
	,[Website]
	,TRIM(Comments) AS Comments
	,SRes1
	,SRes2
	,SRes3
FROM [stage].[TRA_FR_Supplier]
/*GROUP BY 
      [PartitionKey],[Company],[SupplierNum],[SupplierName],[AddressLine1],[AddressLine2],[AddressLine3],[City],[ZIP],[Region],[CountryName]
	  ,[SupplierCategory],[Reference],[BankAccountNum],[VATNum],[SupplierABC],[CustomerCode],[TelephoneNum],[Email],[Website],[CodeOfConduct]
	  ,[MinOrderQty],[InternalName],[Comment] */
GO
PRINT N'Creating [dm_IN].[dimSupplierAgreement]'
GO

CREATE VIEW [dm_IN].[dimSupplierAgreement] AS

SELECT  sa.[CompanyID]
,sa.[SupplierID]
,sa.[PartID]
,sa.[CurrencyID]
,sa.[Company]
,sa.[PartNum]
,sa.[SupplierNum]
,sa.[DiscountPercent]
,sa.[UnitPrice]
,sa.[AgreementQty]
,sa.[AgreementCode]
,sa.[AgreementDescription]
,sa.[AgreementStart]
,sa.[AgreementEnd]
,sa.[SupplierTerms]
,sa.[FulfilledQty]
,sa.[RemainingQty]
,sa.[UoM]
,sa.[Currency]
,sa.[DelivTime]
,sa.[PartitionKey]
,sa.[ExchangeRate]
FROM [dm].[DimSupplierAgreement] sa
LEFT JOIN dbo.Company com ON sa.Company = com.Company
WHERE com.BusinessArea = 'Industrial Solutions' AND com.[Status] = 'Active'
GO
PRINT N'Creating [stage].[WID_FI_SalesLedger]'
GO
CREATE TABLE [stage].[WID_FI_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[InvAmoLocCur] [decimal] (18, 4) NULL,
[InvAmoOriCur] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[VATAmount] [decimal] (18, 4) NULL,
[PayToCity] [nvarchar] (50) NULL,
[PaymentTerms] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vWID_FI_SalesLedger]'
GO

CREATE VIEW [stage].[vWID_FI_SalesLedger] AS
--COMMENT EMPTY FIELDS // ADD TRIM() UPPER() INTO CustomerID 2022-12-15 VA
--salesledgerid / CUSTNUM 23-02-17 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(InvoiceNum)))) AS SalesLedgerID,
	CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID,
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID,
	--CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum))))) AS CustomerID,
	CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(InvoiceNum)) AS SalesLedgerCode,
	PartitionKey,

	TRIM(Company) AS Company,
	TRIM(CustNum) AS CustomerNum,
	TRIM(InvoiceNum) AS SalesInvoiceNum,
	InvoiceDate AS SalesInvoiceDate,
	CONVERT(date, DueDate) AS SalesDueDate,
	CONVERT(date, LastPaymentDate) AS SalesLastPaymentDate,
	--NULL AS InvoiceAmount,
	--NULL AS PaidInvoiceAmount,
	--NULL AS RemainingInvoiceAmount,
	1 AS ExchangeRate,
	'EUR' AS Currency,
	--NULL AS VATAmount,
	--'' AS VATCode,
	--'' AS PayToName,
	--'' AS PayToCity,
	--'' AS PayToContact,
	--'' AS PaymentTerms,
	--'' AS SLRes1,
	--'' AS SLRes2,
	--'' AS SLRes3
	'1900-01-01' AS AccountingDate
	--,NULL AS AgingPeriod
	--,NULL AS AgingSort
	--,NULL AS VATCodeDesc
	--,NULL AS LinkToOriginalInvoice
FROM 
	stage.WID_FI_SalesLedger
GO
PRINT N'Creating [dm_FH].[dimProject]'
GO
CREATE VIEW [dm_FH].[dimProject] AS

SELECT 
 proj.[ProjectID]
,proj.[ProjectCode]
,proj.[PartitionKey]
,proj.[Company]
,proj.[MainProjectNum]
,proj.[ProjectNum]
,proj.[ProjectDescription]
,proj.[Project]
,proj.[Organisation]
,proj.[ProjectStatus]
,proj.[ProjectCategory]
,proj.[WBSElement]
,proj.[ObjectNum]
,proj.[Level]
,proj.[Currency]
,proj.[WarehouseCode]
,proj.[ProjectResponsible]
,proj.[Comments]
,proj.[StartDate]
,proj.[EndDate]
,proj.[EstEndDate]
,proj.[ActualCost]
FROM [dm].[DimProject] proj
LEFT JOIN dbo.Company com ON proj.Company = com.Company
WHERE com.BusinessArea = 'Fluid Handling Solutions' AND com.[Status] = 'Active'
GO
PRINT N'Creating [stage].[JEN_SK_SupplierAgreement]'
GO
CREATE TABLE [stage].[JEN_SK_SupplierAgreement]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[AgreementCode] [nvarchar] (50) NULL,
[AgreementDescription] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DelivTime] [nvarchar] (10) NULL,
[Currency] [nvarchar] (10) NULL,
[AgreementStart] [date] NULL,
[AgreementEnd] [date] NULL
)
GO
PRINT N'Creating [stage].[vJEN_SK_SupplierAgreement]'
GO
CREATE VIEW [stage].[vJEN_SK_SupplierAgreement] AS 
--COMMENT empty fields 2022-12-12 VA
--ADD TRIM() INTO Supplier 23-01-23 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]), '#', TRIM(AgreementCode), '#', TRIM([PartNum]), '#', TRIM([SupplierNum]), '#', TRIM([Currency]))))) AS SupplierAgreementID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum))))) AS SupplierID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(SupplierNum))))) AS SupplierID  
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Currency])))) AS CurrencyID --Redundant?
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,AgreementCode
	,AgreementDescription
	,[DiscountPercent]
	,MAX([UnitPrice]) AS [UnitPrice]
	--,0 AS AgreementQty
	,UPPER(TRIM([Currency])) AS Currency
	,MAX([DelivTime]) AS [DelivTime]
	,MAX(AgreementStart) AS AgreementStart
	,AgreementEnd
	--,'' AS [SupplierTerms]
	--,0	AS FulfilledQty
	--,0  AS RemainingQty
	--,''	AS UoM
	--,'' AS  SARes1
	--,'' AS  SARes2
	--,'' AS  SARes3
FROM 
	[stage].[JEN_SK_SupplierAgreement]

GROUP BY [PartitionKey], [Company], AgreementCode, AgreementDescription, PartNum, SupplierNum, [DiscountPercent],  [Currency],  AgreementEnd
--WHERE 
--	RecordType = 'D'
GO
PRINT N'Creating [stage].[AXL_ES_OLine]'
GO
CREATE TABLE [stage].[AXL_ES_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[NeedbyDate] [date] NULL,
[ExpDelivDate] [date] NULL,
[EDCExpDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (10) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[SalesPerson] [nvarchar] (50) NULL,
[WareHouseCode] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[BusinessChain] [nvarchar] (50) NULL,
[SalesOrderCategory] [nvarchar] (100) NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL,
[PartDesc] [nvarchar] (max) NULL,
[APV_Cost_EUR] [nvarchar] (50) NULL,
[APV_Item] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXL_ES_OLine]'
GO
CREATE VIEW [stage].[vAXL_ES_OLine] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(PartDesc))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum), '#', (IIF(TRIM([PartNum]) LIKE 'IACO%' , 'MISC. CHARGES', TRIM(PartDesc) )) )))) AS PartID
	,CONVERT(int, replace(convert(date, OrderDate), '-', '')) AS SalesOrderDateID
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine))) AS SalesOrderCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(CustNum) AS CustomerNum 
	,TRIM(OrderNum) AS [SalesOrderNum]
	,TRIM(OrderLine) AS [SalesOrderLine]
	,TRIM(OrderSubLine) AS [SalesOrderSubLine]
	,CONVERT(nvarchar(50), TRIM(OrderType)) AS [SalesOrderType]
	,TRIM([SalesOrderCategory]) AS [SalesOrderCategory]
	,OrderDate AS [SalesOrderDate]
	,NeedbyDate
	,ExpDelivDate AS [ExpDelivDate]
	,EDCExpDelivDate
	,ActualDelivDate
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,OrderQty AS [SalesOrderQty]
	,DelivQty
	,RemainingQty
	,Unit AS [UoM]
	,UnitPrice
	,UnitCost
	,LEFT(TRIM(Currency), 3) AS Currency
	,ExchangeRate
	,LEFT(TRIM(OpenRelease), 1) AS OpenRelease
	,DiscountAmount
	,DiscountPercent
	,NULL AS CashDiscOffered
	,NULL AS CashDiscUsed
	,TRIM(PartNum) AS PartNum
	,UPPER(PartDesc) AS PartDesc
	,'' AS [PartType]
	,CONVERT(nvarchar(50), PartStatus) AS PartStatus
	,TRIM(SalesPerson) AS [SalesPersonName]
	,TRIM(WareHouseCode) AS WarehouseCode
	,'' AS IndexKey
	,TRIM(SalesChannel) AS SalesChannel
	,TRIM(BusinessChain) AS [Department]
	,Res3 AS [ProjectNum] -- = FreeOfCharge: Y = yes, N = no
	,'' AS Cancellation
	,Res1 AS SORes1
	,Res2 AS SORes2
	,Res3 AS SORes3
FROM stage.AXL_ES_OLine
WHERE OrderDate >= '2015-01-01'
GO
PRINT N'Creating [prestage].[CYE_ES_StockBalance]'
GO
CREATE TABLE [prestage].[CYE_ES_StockBalance]
(
[Company] [nvarchar] (50) NOT NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[BinNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[DelivTime] [nvarchar] (50) NULL,
[LastStockTakeDate] [date] NULL,
[LastStdCostCalDate] [date] NULL,
[MaxStockQty] [nvarchar] (50) NULL,
[StockBalance] [nvarchar] (50) NULL,
[StockValue] [nvarchar] (50) NULL,
[ReserveQty] [nvarchar] (50) NULL,
[BackOrderQty] [nvarchar] (50) NULL,
[OrderQty] [nvarchar] (50) NULL,
[StockTakeDiff] [nvarchar] (50) NULL,
[ReOrderLevel] [nvarchar] (50) NULL,
[SafetyStock] [nvarchar] (50) NULL,
[OptimalOrderQty] [nvarchar] (50) NULL,
[AvgCost] [nvarchar] (50) NULL,
[SBRes1] [nvarchar] (100) NULL,
[SBRes2] [nvarchar] (100) NULL,
[SBRes3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [prestage].[vCYE_ES_StockBalance]'
GO
CREATE VIEW [prestage].[vCYE_ES_StockBalance] AS
SELECT 
	concat(CONVERT (date, SYSDATETIME()), ' 00:00:00') AS [PartitionKey]
	,'CYESA' AS [Company]
	,[WarehouseCode]
	,[Currency]
	,[BinNum]
	,[BatchNum]
	,[SupplierNum]
	,[PartNum]
	,[DelivTime]
	,[LastStockTakeDate]
	,[LastStdCostCalDate]
	,[MaxStockQty]
	,[StockBalance]
	,[StockValue]
	,[ReserveQty]
	,[BackOrderQty]
	,[OrderQty]
	,[StockTakeDiff]
	,[ReOrderLevel]
	,[SafetyStock]
	,[OptimalOrderQty]
	,[AvgCost]
	,[SBRes1]
	,[SBRes2]
	,[SBRes3]
FROM [prestage].[CYE_ES_StockBalance]
GO
PRINT N'Creating [prestage].[CYE_ES_StockBalance_Load]'
GO
CREATE PROCEDURE [prestage].[CYE_ES_StockBalance_Load] AS

BEGIN

Truncate table stage.[CYE_ES_StockBalance]

insert into stage.CYE_ES_StockBalance(
	[PartitionKey]
    ,[Company]
	,[WarehouseCode]
	,[Currency]
	,[BinNum]
	,[BatchNum]
	,[SupplierNum]
	,[PartNum]
	,[DelivTime]
	,[LastStockTakeDate]
	,[LastStdCostCalDate]
	,[MaxStockQty]
	,[StockBalance]
	,[StockValue]
	,[ReserveQty]
	,[BackOrderQty]
	,[OrderQty]
	,[StockTakeDiff]
	,[ReOrderLevel]
	,[SafetyStock]
	,[OptimalOrderQty]
	,[AvgCost]
	,[SBRes1]
	,[SBRes2]
	,[SBRes3]
)
select 
	[PartitionKey]
	,[Company]
	,[WarehouseCode]
	,[Currency]
	,[BinNum]
	,[BatchNum]
	,[SupplierNum]
	,[PartNum]
	,[DelivTime]
	,[LastStockTakeDate]
	,[LastStdCostCalDate]
	,[MaxStockQty]
	,[StockBalance]
	,[StockValue]
	,[ReserveQty]
	,[BackOrderQty]
	,[OrderQty]
	,[StockTakeDiff]
	,[ReOrderLevel]
	,[SafetyStock]
	,[OptimalOrderQty]
	,[AvgCost]
	,[SBRes1]
	,[SBRes2]
	,[SBRes3]
from [prestage].[vCYE_ES_StockBalance]

--Truncate table prestage.[CYE_ES_PartTranLine] --Two loads in LSSourceTables_CYESA_dev uses the same prestage. Truncating would create conflicts. /SM 2022-02-23

End
GO
PRINT N'Creating [stage].[PAS_PL_Warehouse]'
GO
CREATE TABLE [stage].[PAS_PL_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[company] [nvarchar] (8) NOT NULL,
[warehouseid] [nvarchar] (50) NULL,
[warehousecode] [nvarchar] (50) NOT NULL,
[warehousename] [nvarchar] (100) NULL,
[warehousedistrict] [nvarchar] (50) NULL,
[warehouseaddress] [nvarchar] (100) NULL,
[warehousedescription] [nvarchar] (max) NULL,
[warehousetype] [nvarchar] (50) NULL,
[warehousecountry] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vPAS_PL_Warehouse]'
GO


CREATE VIEW [stage].[vPAS_PL_Warehouse] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([WarehouseCode])) AS [WarehouseCode]
	,[WarehouseName]
	,[WarehouseDistrict]
	,[WarehouseAddress]
	,[WarehouseDescription]
	,[WarehouseType]
	,[WarehouseCountry]
	--,'' AS [WarehouseSite]
FROM [stage].[PAS_PL_Warehouse]

GROUP BY 
	PartitionKey,[Company],[WarehouseCode],[WarehouseName],[WarehouseDistrict],[WarehouseAddress],[WarehouseDescription],[WarehouseType],[WarehouseCountry]
GO
PRINT N'Creating [dm_LS].[dimSupplierAgreement]'
GO
CREATE VIEW [dm_LS].[dimSupplierAgreement] AS

SELECT  sa.[CompanyID]
,sa.[SupplierID]
,sa.[PartID]
,sa.[CurrencyID]
,sa.[Company]
,sa.[PartNum]
,sa.[SupplierNum]
,sa.[DiscountPercent]
,sa.[UnitPrice]
,sa.[AgreementQty]
,sa.[AgreementCode]
,sa.[AgreementDescription]
,sa.[AgreementStart]
,sa.[AgreementEnd]
,sa.[SupplierTerms]
,sa.[FulfilledQty]
,sa.[RemainingQty]
,sa.[UoM]
,sa.[Currency]
,sa.[DelivTime]
,sa.[PartitionKey]
,sa.[ExchangeRate]
FROM [dm].[DimSupplierAgreement] sa
LEFT JOIN dbo.Company com ON sa.Company = com.Company
WHERE com.BusinessArea = 'Lifting Solutions' AND com.[Status] = 'Active'

--WHERE [Company] in ('AFISCM', 'CDKCERT', 'CEECERT', 'CFICERT', 'CLTCERT', 'CLVCERT', 'CSECERT', 'CUKCERT', 'CNOEHAU', 'CNOCERT', 'CERPL', 'CyESA', 'HFIHAKL', 'TRACLEV')
GO
PRINT N'Creating [stage].[CER_DK_OLine]'
GO
CREATE TABLE [stage].[CER_DK_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderRelNum] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[DelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[SumUnitCost] [decimal] (18, 4) NULL,
[SumUnitPrice] [decimal] (18, 4) NULL,
[CurrExchRate] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[OpenRelease] [nvarchar] (50) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [int] NULL,
[NeedbyDate] [date] NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (50) NULL,
[SalesReturnOrderNum] [nvarchar] (50) NULL,
[SalesReturnInvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[ProjectNum] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_DK_OLine]'
GO
CREATE VIEW [stage].[vCER_DK_OLine] AS
-- COMMENT empty fields / Add TRIM(Company) into WarehouseID/CustomerID/PartID 12-12-2022 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', OrderLine, '#', OrderRelNum, '#', TRIM(InvoiceNum), '#', SalesReturnOrderNum, '#', SalesReturnInvoiceNum)))) AS SalesOrderID
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(InvoiceNum))) AS SalesOrderCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#',  TRIM(WarehouseCode))))) AS WareHouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT(int, replace(CONVERT(date, OrderDate),'-','')) AS SalesOrderDateID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(upper(TRIM([COMPANY])), '#', UPPER(trim([ProjectNum]))))) AS ProjectID
	,PartitionKey

	,UPPER(Company) AS Company
	,UPPER(TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) )) AS CustomerNum
	,UPPER(TRIM(OrderNum)) AS SalesOrderNum
	,UPPER(TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) )) AS PartNum
	,UPPER(TRIM(InvoiceNum)) AS SalesInvoiceNum
	,UPPER(TRIM(OrderLine)) AS SalesOrderLine
	,UPPER(TRIM(OrderSubLine)) AS SalesOrderSubLine
	--,'' AS SalesOrderType
	,OrderDate AS SalesOrderDate
	,NeedbyDate
	,DelivDate AS [ExpDelivDate]
	,CAST('1900-01-01' AS date) AS ActualDelivDate
	,CAST('1900-01-01' AS date) AS ConfirmedDelivDate
	--,'' AS [SalesOrderCategory]
	,OrderQty AS SalesOrderQty
	,DelivQty
	,RemainingQty
	--,NULL AS SalesInvoiceQty
	--,'' AS [UoM]
	,UnitPrice
	,UnitCost
	,Currency
	,CurrExChRate AS [ExchangeRate]
	,CASE	WHEN OpenRelease = '1' THEN '0' 
			WHEN OpenRelease = '0' THEN '1'
			ELSE OpenRelease END AS OpenRelease	--This is reversed from source (=1 should be open and =0 should be closed)
	,DiscountAmount
	,DiscountPercent
	--,'' AS [PartType]
	,PartStatus
	,TRIM(SalesPersonName) AS SalesPersonNAme
	,TRIM(WarehouseCode) AS WarehouseCode
	,SalesChannel
	,CASE WHEN SalesChannel = 'WEB-RFQ' THEN 'RFQ'
		WHEN SalesChannel = 'WEB-ORDRE' THEN 'Webshop'
		WHEN SalesChannel = 'DC-ORDRE' THEN 'PDF Scan'
		ELSE 'Normal Order Handling' END AS AxInterSalesChannel
	--,'' AS [Department]
	,UPPER(trim(ProjectNum)) as [ProjectNum]
	--,'' AS [IndexKey]
	--,'0' AS Cancellation
	--,'' AS SORes1
	--,'' AS SORes2
	--,'' AS SORes3
	--,NULL AS [TotalMiscChrg]
FROM stage.CER_DK_OLine
GO
PRINT N'Creating [dm_FH].[dimSalesOrderDistinct]'
GO
CREATE VIEW [dm_FH].[dimSalesOrderDistinct] AS

SELECT sod.[CompanyID]
,sod.[Company]
,sod.[SalesOrderNumID]
,sod.[SalesOrderNum]
,sod.[CustomerID]
,sod.[Customer]
,sod.[SalesPersonName]
,sod.[SalesChannel]
,sod.[AxInterSalesChannel]
,sod.[Department]
FROM dm.DimSalesOrderDistinct sod
LEFT JOIN dbo.Company com ON sod.Company = com.Company
WHERE com.BusinessArea = 'Fluid Handling Solutions' AND com.[Status] = 'Active'
GO
PRINT N'Creating [stage].[CER_EE_SalesOrderLog]'
GO
CREATE TABLE [stage].[CER_EE_SalesOrderLog]
(
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[DelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[CurrExchRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (50) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[NeedbyDate] [date] NULL,
[SalesPerson] [nvarchar] (100) NULL,
[ReturnComment] [nvarchar] (500) NULL,
[SalesReturnInvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[CancellationCode] [nvarchar] (50) NULL,
[IndexKey] [nvarchar] (50) NOT NULL,
[PartitionKey] [varchar] (50) NULL,
[TransactionDate] [date] NULL
)
GO
PRINT N'Creating [stage].[vCER_EE_SalesOrderLog]'
GO
CREATE VIEW [stage].[vCER_EE_SalesOrderLog] As
--COMMENT EMPTY FIELDS / ADD TRIM()UPPER() INTO PartID,CustomerID,WarehouseID 2022-12-15 VA
SELECT 	
	  CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', IndexKey)))) AS SalesOrderLogID
	  ,CONVERT([binary](32), HASHBYTES('SHA2_256', TRIM(Company))) AS CompanyID
	  ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	  ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(UPPER(PartNum)))))) AS PartID
	  --,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(UPPER(PartNum))))) AS PartID
	  ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	  --,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(UPPER(PartNum)))) AS SalesOrderCode 
	  ,CONVERT(int, replace(convert(date, OrderDate),'-','')) AS SalesOrderDateID   --redundent
	  ,PartitionKey

	  ,[Company]
      ,[CustNum]	AS CustomerNum
      ,[OrderNum]	AS SalesOrderNum
      ,[OrderLine]	AS SalesOrderLine
      ,[OrderSubLine]	AS SalesOrderSubLine
      ,[OrderType]		AS SalesOrderType
	  --,'' AS SalesOrderLogType
      ,[OrderDate]		AS SalesOrderDate
	  ,[TransactionDate]	AS SalesOrderLogDate
--      ,[DelivDate]		AS ExpDelivDate
      ,[InvoiceNum]		AS SalesInvoiceNum
      ,[OrderQty]		AS SalesOrderQty
	  --,''				AS UoM
      ,[UnitPrice]
      ,[UnitCost]
      ,[Currency]
      ,[CurrExchRate]	AS ExchangeRate
      ,[OpenRelease]
      ,[DiscountPercent]
      ,[DiscountAmount]
      ,[PartNum]
	  ,IIF(OrderSubLine = '000000', 'Main', 'Sub' ) AS PartType
--      ,[NeedbyDate]
      ,[SalesPerson]	AS SalesPersonName
	  --,''				AS Department
      ,[ReturnComment]
      ,[SalesReturnInvoiceNum]
      ,[WarehouseCode]
      ,[CancellationCode]
      ,[IndexKey]
	  --,'' AS SORes1
	  --,'' AS SORes2
	  --,'' AS SORes3
	  
  FROM [stage].[CER_EE_SalesOrderLog]
GO
PRINT N'Creating [stage].[CER_SE_PurchaseOrder]'
GO
CREATE TABLE [stage].[CER_SE_PurchaseOrder]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [varchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[LineType] [nvarchar] (50) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[InvoiceSupplierCode] [nvarchar] (50) NULL,
[DelivCustCode] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[ItemType] [int] NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[OrderedQty] [decimal] (18, 4) NULL,
[ReceivedQty] [decimal] (18, 4) NULL,
[InvoicedQty] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[CommitedDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[ReqDelivDate] [date] NULL,
[DelivDate] [date] NULL,
[OrgReqDelivDate] [date] NULL,
[PurchaserName] [nvarchar] (50) NULL,
[RecievingNumber] [nvarchar] (50) NULL,
[LeadTime] [nvarchar] (50) NULL,
[Comments] [nvarchar] (max) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[FlagLineConfirmed] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_SE_PurchaseOrder]'
GO

CREATE VIEW [stage].[vCER_SE_PurchaseOrder] AS
--COMMENT empty fields / ADD TRIM(Company) into PartID/CustomerID/WarehouseID VA - 12-13-2022
--ADD TRIM() INTO SupplierID 23-01-23 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum), '#', TRIM(InvoiceNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(PurchaseOrderSubLine), '#', TRIM(OrderType), '#', UnitPrice, '#', TRIM(WarehouseCode), '#', TRIM(LineType), '#', TRIM(DelivCustCode), '#', OrderDate, '#', PurchaserName)))) AS PurchaseOrderID --,'#',TRIM(UPPER([PartNum])), '#', TRIM(UPPER(SupplierCode)), '#', OrderedQty
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(InvoiceNum))))) AS PurchaseInvoiceID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(DelivCustCode))))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierCode))))) AS SupplierID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(UPPER(SupplierCode)))))) AS SupplierID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',TRIM([Company]))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([CurrencyCode])))) AS CurrencyID
	--,UPPER(CONCAT(Company,'#',TRIM(UPPER(SupplierCode)),'#',PurchaseOrderNum,'#',TRIM(InvoiceNum))) AS PurchaseOrderCode
	,UPPER(CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(PurchaseOrderSubLine), '#', TRIM(InvoiceNum))) AS PurchaseOrderCode
	,PartitionKey AS PartitionKey

	,Company AS Company
	,TRIM(PurchaseOrderNum) AS PurchaseOrderNum
	,TRIM(PurchaseOrderLine) AS PurchaseOrderLine
	,TRIM(PurchaseOrderSubLine) AS PurchaseOrderSubLine
	,TRIM(OrderType) AS PurchaseOrderType
	,OrderDate AS PurchaseOrderDate
	--,'' AS PurchaseOrderStatus
	,OrgReqDelivDate AS OrgReqDelivDate
	,CommitedDelivDate AS CommittedDelivDate
	,ActualDelivDate
	,ReqDelivDate AS ReqDelivDate
	,TRIM(InvoiceNum) AS PurchaseInvoiceNum
	,TRIM(UPPER([PartNum])) AS PartNum
	,TRIM(UPPER(SupplierCode)) AS SupplierNum
	--,'' AS SupplierPartNum
	--,'' AS [SupplierInvoiceNum] 
	,TRIM(DelivCustCode) AS DelivCustomerNum
	--,'' AS PartStatus
	,OrderedQty AS PurchaseOrderQty
	,ReceivedQty AS ReceiveQty
	,InvoicedQty AS InvoiceQty
	--,0 AS MinOrderQty
	--,'' AS UoM
	,UnitPrice AS UnitPrice
	,DiscountPercent AS DiscountPercent
	,UnitPrice*OrderedQty*DiscountPercent/100 AS DiscountAmount
	--,0 AS LandedCost
	,ExchangeRate
	,CASE WHEN CurrencyCode = '15' THEN 'EUR' WHEN CurrencyCode = '2' THEN 'USD' ELSE CurrencyCode END AS Currency
	,TRIM(PurchaserName) AS PurchaserName
	,TRIM(WarehouseCode) AS WarehouseCode
	,RecievingNumber AS ReceivingNum
	,IIF(LeadTime = 'na', NULL, Leadtime) AS DelivTime
	--,'' AS PurchaseChannel
	,FlagLineConfirmed AS Documents-- added afer request of CertexSE Petter Walling ticket #inc-95188 and approved by Emil T /20230207 DZ
	,TRIM(Comments) AS Comments
	--,'' AS PORes1
	--,'' AS PORes2
	--,'' AS PORes3

	,CASE WHEN CONVERT(NVARCHAR(50),TRIM([LineType])) like '0' THEN 'Stock Item Line' WHEN CONVERT(NVARCHAR(50),TRIM([LineType])) like '1' THEN 'Non Stock Item Line' ELSE NULL END AS [LineType]
	,TotalMiscChrg AS TotalMiscChrg
	,CONVERT(NVARCHAR(50),ItemType) AS ItemType
	,DelivDate AS DelivDate
	--,'' AS DaysSincePOrder
FROM 
	[stage].[CER_SE_PurchaseOrder]
	
GROUP BY
	PartitionKey, Company, PurchaseOrderNum, PurchaseOrderLine, PurchaseOrderSubLine, SupplierCode, DelivCustCode, LineType, InvoiceNum, PartNum, OrderType, UnitPrice, DiscountPercent, OrderedQty, ReceivedQty, InvoicedQty, TotalMiscChrg, ExchangeRate, CurrencyCode, ItemType, OrderDate, OrgReqDelivDate, CommitedDelivDate, ActualDelivDate, DelivDate, ReqDelivDate, PurchaserName, RecievingNumber, LeadTime, Comments, WarehouseCode, FlagLineConfirmed
GO
PRINT N'Creating [prestage].[CYE_ES_OLine_Load]'
GO
CREATE PROCEDURE [prestage].[CYE_ES_OLine_Load]
AS
BEGIN

Truncate table stage.[CYE_ES_OLine]

insert into stage.CYE_ES_OLine(
		[PartitionKey]
      ,[Company]
      ,[CustNum]
      ,[OrderNum]
      ,[OrderLine]
      ,[OrderType]
      ,[OrderRelNum]
      ,[OrderDate]
      ,[DelivDate]
      ,[OrderQty]
	  ,[DelivQty]
      ,[RemainingQty]
	  ,[InvoiceQty]
      ,[UnitPrice]
      ,[UnitCost]
      ,[OpenRelease]
      ,[DiscountPercent]
      ,[DiscountAmount]
      ,[PartNum]
      ,[NeedbyDate]
      ,[SalesPerson]
      ,[SalesOfficeDescrip]
      ,[SalesGroupCode]
      ,[SalesGroupDescrip]
      ,[WarehouseCode]
      ,[InvoiceNum])
select [PartitionKey]
      ,[Company]
      ,[CustNum]
      ,[OrderNum]
      ,[OrderLine]
      ,[OrderType]
      ,[OrderRelNum]
      ,[OrderDate]
      ,[DelivDate]
      ,[OrderQty]
	  ,[DelivQty]
      ,[RemainingQty]
	  ,[InvoiceQty]
      ,[UnitPrice]
      ,[UnitCost]
      ,[OpenRelease]
      ,[DiscountPercent]
      ,[DiscountAmount]
      ,[PartNum]
      ,[NeedbyDate]
      ,[SalesPerson]
      ,[SalesOfficeDescrip]
      ,[SalesGroupCode]
      ,[SalesGroupDescrip]
      ,[WarehouseCode]
      ,[InvoiceNum] 
from [prestage].[vCYE_ES_OLine]

--Truncate table prestage.[CYE_ES_OLine]

End
GO
PRINT N'Creating [stage].[CER_UK_StockBalance]'
GO
CREATE TABLE [stage].[CER_UK_StockBalance]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[Currency] [nvarchar] (50) NULL,
[BinNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (70) NOT NULL,
[DelivTime] [int] NULL,
[LastStockTakeDate] [date] NULL,
[LastStdCostCalDate] [date] NULL,
[MaxStockQty] [decimal] (18, 4) NULL,
[StockBalance] [decimal] (18, 4) NULL,
[StockValue] [decimal] (18, 4) NULL,
[AvgCost] [decimal] (18, 4) NULL,
[LandedCost] [decimal] (18, 4) NULL,
[ReserveQty] [decimal] (18, 4) NULL,
[BackOrderQty] [decimal] (18, 4) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[StockTakeDiff] [decimal] (18, 4) NULL,
[ReOrderLevel] [decimal] (18, 4) NULL,
[OptimalOrderQty] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vCER_UK_StockBalance]'
GO
CREATE   VIEW [stage].[vCER_UK_StockBalance] AS
--COMMENT EMPTY FIELDS 2022-12-20 VA
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]),'#',TRIM([WarehouseCode]))))) AS ItemWarehouseID
	,UPPER(CONCAT([Company],'#',TRIM([PartNum]),'#',TRIM([WarehouseCode]))) AS ItemWarehouseCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID -- var '0000000'
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([WarehouseCode])) AS WarehouseCode
	,Currency
	,BinNum
	,BatchNum
	,UPPER(TRIM([SupplierNum])) AS SupplierNum
	,UPPER(TRIM([PartNum])) AS PartNum
	,[DelivTime]
	,convert(date, [LastStockTakeDate]) AS LastStockTakeDate
	,LastStdCostCalDate
	--,0 AS SafetyStock
	,MaxStockQty
	,[StockBalance]
	,StockValue
	,AvgCost
	--,LandedCost
	,[ReserveQty]
	,[BackOrderQty]
	,[OrderQty]
	,[StockTakeDiff]
	,[ReOrderLevel]
	,[OptimalOrderQty]
	--,'' AS SBRes1
	--,'' AS SBRes2
	--,'' AS SBRes3
	--,0 AS [FIFOValue]
	--,'' AS [DelivTimeToWHS]-- will not be sent out to new companies, not delete in DW for that use as reservation
	--,'' AS [DelivTimeDesc]-- will not be sent out to new companies, not delete in DW for that use as reservation
	--,'' AS [DaysOnStock]
	,convert(date, '') AS OrderDateSupplier
	,convert(date, '') AS OrderDateCust
	--,'' AS BatchNoPrefix-- will not be sent out to new companies, not delete in DW for that use as reservation
	--,'' AS BatchNoSuffix-- will not be sent out to new companies, not delete in DW for that use as reservation
FROM 
	[stage].[CER_UK_StockBalance]
GROUP BY
	[PartitionKey],[Company],[PartNum], [WarehouseCode], [StockBalance], [ReserveQty], [BackOrderQty], [OrderQty], [StockTakeDiff], [ReOrderLevel],BinNum,[SupplierNum],[DelivTime], [LastStockTakeDate],LastStdCostCalDate,
	BatchNum, StockValue, [OptimalOrderQty], MaxStockQty, Currency, AvgCost --BatchNoPrefix,BatchNoSuffix,,[DelivTimeToWHS]
GO
PRINT N'Creating [dm_PT].[dimSupplierAgreement]'
GO
CREATE VIEW [dm_PT].[dimSupplierAgreement] AS

SELECT  sa.[CompanyID]
,sa.[SupplierID]
,sa.[PartID]
,sa.[CurrencyID]
,sa.[Company]
,sa.[PartNum]
,sa.[SupplierNum]
,sa.[DiscountPercent]
,sa.[UnitPrice]
,sa.[AgreementQty]
,sa.[AgreementCode]
,sa.[AgreementDescription]
,sa.[AgreementStart]
,sa.[AgreementEnd]
,sa.[SupplierTerms]
,sa.[FulfilledQty]
,sa.[RemainingQty]
,sa.[UoM]
,sa.[Currency]
,sa.[DelivTime]
,sa.[PartitionKey]
,sa.[ExchangeRate]
FROM [dm].[DimSupplierAgreement] sa
LEFT JOIN dbo.Company com ON sa.Company = com.Company
WHERE com.BusinessArea = 'Power Transmission Solutions' AND com.[Status] = 'Active'


--WHERE [Company] in ('ACZARKOV', 'AcornUK', 'BSIBELL', 'JDKJENSS', 'JDKKALTE', 'JFIJENSS', 'MNLMAK', 'JNOJENSS', 'JNOORBEL', 'JSEJENSS', 'JSESKSSW', 'NORNO', 'SSWSE', 'NomoSE', 'NomoDK', 'NomoFI', 'NomoNo', 'PASSEROT', 'SKSSCOFI', 'SCOFI', 'SMKFI', 'SNLSPRUI', 'SPRUITNL', 'SVESE')  -- The PT basket --
GO
PRINT N'Creating [prestage].[TRA_FR_Part]'
GO
CREATE TABLE [prestage].[TRA_FR_Part]
(
[Prop_0] [varchar] (50) NULL,
[Prop_1] [varchar] (50) NULL,
[Prop_2] [varchar] (max) NULL,
[Prop_3] [varchar] (max) NULL,
[Prop_4] [varchar] (max) NULL,
[Prop_5] [varchar] (max) NULL,
[Prop_6] [varchar] (max) NULL,
[Prop_7] [varchar] (max) NULL,
[Prop_8] [varchar] (max) NULL,
[Prop_9] [varchar] (max) NULL,
[Prop_10] [varchar] (max) NULL,
[Prop_11] [varchar] (max) NULL,
[Prop_12] [varchar] (max) NULL,
[Prop_13] [varchar] (max) NULL,
[Prop_14] [varchar] (max) NULL,
[Prop_15] [varchar] (max) NULL,
[Prop_16] [varchar] (max) NULL,
[Prop_17] [varchar] (max) NULL,
[Prop_18] [varchar] (max) NULL,
[Prop_19] [varchar] (max) NULL,
[Prop_20] [varchar] (max) NULL,
[Prop_21] [varchar] (max) NULL,
[Prop_22] [varchar] (max) NULL,
[Prop_23] [varchar] (max) NULL,
[Prop_24] [varchar] (max) NULL,
[Prop_25] [varchar] (max) NULL,
[Prop_26] [varchar] (max) NULL,
[Prop_27] [varchar] (max) NULL
)
GO
PRINT N'Creating [prestage].[vTRA_FR_Part]'
GO


CREATE VIEW [prestage].[vTRA_FR_Part] AS

SELECT 
	CONCAT(CONVERT (date, SYSDATETIME()), ' 00:00:00') AS [PartitionKey]
	,Prop_0 AS [Company]
	,Prop_1 AS [PartNum]
	,Prop_2 AS [PartName]
	,Prop_3 AS [PartDescription]
	,Prop_4 AS [PartDescription2]
	,Prop_5 AS [PartDescription3]
	,Prop_6 AS [ProductGroup]
	,Prop_7 AS [ProductGroup2]
	,Prop_8 AS [ProductGroup3]
	,Prop_9 AS [ProductGroup4]
	,Prop_10 AS [Brand]
	,Prop_11 AS [CommodityCode]
	,Prop_12 AS [PartReplacementNum]
	,Prop_13 AS [PartStatus]
	,Prop_14 AS [CountryOfOrigin]
	,IIF(Prop_15 IS NULL, 0, TRY_CONVERT(decimal (18,2), Prop_15)) AS [NetWeight]
	,Prop_16 [UoM]
	,Prop_26 AS MainSupplier
	,Prop_27 AS AlternativeSupplier
FROM [prestage].[TRA_FR_Part]
GO
PRINT N'Creating [stage].[BELL_SI_Warehouse]'
GO
CREATE TABLE [stage].[BELL_SI_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[WarehouseName] [nvarchar] (100) NULL,
[WarehouseDistrict] [nvarchar] (50) NULL,
[WarehouseAddress] [nvarchar] (100) NULL,
[WarehouseDescription] [nvarchar] (100) NULL,
[WarehouseType] [nvarchar] (50) NULL,
[WarehouseCountry] [nvarchar] (50) NULL,
[Site] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vBELL_SI_Warehouse]'
GO

CREATE VIEW [stage].[vBELL_SI_Warehouse] AS
--COMMENT EMPTY FIELD 2022-12-27
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey

	,UPPER(TRIM([Company])) AS Company
	,IIF(UPPER(TRIM([WarehouseCode])) IS NULL, 'Central', UPPER(TRIM([WarehouseCode]))) AS [WarehouseCode]
	,[WarehouseName]
	,[WarehouseDistrict]
	,[WarehouseAddress]
	--,'' AS [WarehouseDescription]
	,[WarehouseType]
	,[WarehouseCountry]
	,[Site] AS [WarehouseSite]
FROM [stage].[BELL_SI_Warehouse]

GROUP BY 
	PartitionKey,[Company],[WarehouseCode],[WarehouseName],[WarehouseDistrict],[WarehouseAddress],[WarehouseType],[WarehouseCountry],[Site]
GO
PRINT N'Creating [dm_FH].[DimSalesPersonName]'
GO
CREATE VIEW [dm_FH].[DimSalesPersonName] AS

SELECT sp.[SalesPersonNameID]
,sp.[Company]
,sp.[SalesPersonName]
FROM dm.DimSalesPersonName as sp
LEFT JOIN dbo.Company com ON sp.Company = com.Company
WHERE com.BusinessArea = 'Fluid Handling Solutions' AND com.[Status] = 'Active'
GO
PRINT N'Creating [stage].[CER_NO_BC_StockTransaction]'
GO
CREATE TABLE [stage].[CER_NO_BC_StockTransaction]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[IndexKey] [nvarchar] (100) NULL,
[WarehouseCode] [nvarchar] (100) NULL,
[TransactionCodeDescription] [nvarchar] (100) NULL,
[PartNum] [nvarchar] (100) NULL,
[TransactionDate] [nvarchar] (100) NULL,
[TransactionQty] [nvarchar] (100) NULL,
[TransactionValue] [nvarchar] (100) NULL,
[TransactionCode] [nvarchar] (100) NULL,
[CustomerNum] [nvarchar] (100) NULL,
[SupplierNum] [nvarchar] (100) NULL,
[CreatedTimeStamp] [datetime] NULL,
[ModifiedTimeStamp] [datetime] NULL,
[IsInternalTransaction] [nvarchar] (100) NULL,
[Currency] [nvarchar] (100) NULL,
[ExchangeRate] [nvarchar] (100) NULL,
[TransactionTime] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vCER_NO_BC_StockTransaction]'
GO

CREATE VIEW [stage].[vCER_NO_BC_StockTransaction] AS

SELECT 
--------------------------------------------- Keys/ IDs ---------------------------------------------
CONVERT(binary(32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(IndexKey))))) AS StockTransactionID
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
,CONVERT(binary(32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
--,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(InvoiceNum))))) AS PurchaseInvoiceID
--,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(OrderNum))))) AS PurchaseOrderNumID
--,CONVERT(binary(32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company,'#',TRIM(OrderNum))))) AS SalesOrderNumID
--, CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(InvoiceNum))))) AS SalesInvoiceID
--,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(IssuerReceiverNum))))) AS CustomerID
--,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(IssuerReceiverNum))))) AS SupplierID
,CONVERT(binary(32),HASHBYTES('SHA2_256',TRIM(Currency))) AS CurrencyID
,PartitionKey
--------------------------------------------- Regular Fields ---------------------------------------------
---Mandatory Fields ---
,UPPER(TRIM(Company)) AS Company
,UPPER(TRIM(IndexKey)) AS IndexKey
,UPPER(TRIM(TransactionCode)) AS TransactionCode
,UPPER(TRIM(PartNum)) AS PartNum
,CASE WHEN TransactionDate = '' OR TransactionDate is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, TransactionDate) END AS TransactionDate
,CONVERT(decimal(18,4), Replace(TransactionQty, ',', '.')) AS TransactionQty
,CONVERT(decimal(18,4), Replace(TransactionValue, ',', '.')) AS TransactionValue
---Valuable Fields ---
,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
,UPPER(TRIM(TransactionCodeDescription)) AS TransactionDescription
,UPPER(TRIM(IsInternalTransaction)) AS IsInternalTransaction
,iif(IsInternalTransaction = 'True','Internal','External') as [InternalExternal]
,UPPER(TRIM(CustomerNum)) AS CustomerNum
,UPPER(TRIM(SupplierNum)) AS SupplierNum
--,UPPER(TRIM(SalesOrderNum)) AS SalesOrderNum
--,UPPER(TRIM(PurchaseOrderNum)) AS PurchaseOrderNum
--,UPPER(TRIM(SalesInvoiceNum)) AS SalesInvoiceNum
--,UPPER(TRIM(PurchaseInvoiceNum)) AS PurchaseInvoiceNum
,UPPER(TRIM(Currency)) AS Currency
,CONVERT(decimal(18,4), Replace(ExchangeRate, ',', '.')) AS ExchangeRate
--,UPPER(TRIM(Reference)) AS Reference
--,CASE WHEN AdjustmentDate = '' OR AdjustmentDate is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, AdjustmentDate) END AS AdjustmentDate
--,CASE WHEN AgreementEnd = '' OR AgreementEnd is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, AgreementEnd) END AS AgreementEnd
--- Good-to-have Fields ---
--,UPPER(TRIM(SalesOrderLine)) AS SalesOrderLine
--,UPPER(TRIM(PurchaseOrderLine)) AS PurchaseOrderLine
--,UPPER(TRIM(SalesInvoiceLine)) AS SalesInvoiceLine
--,UPPER(TRIM(PurchaseInvoiceLine)) AS PurchaseInvoiceLine
--,UPPER(TRIM(BinNum)) AS BinNum
--,UPPER(TRIM(BatchNum)) AS BatchNum
,UPPER(TRIM(TransactionTime)) AS TransactionTime
--------------------------------------------- Meta Data ---------------------------------------------
,CONVERT(date, CreatedTimeStamp) AS CreatedTimeStamp
,CONVERT(date, ModifiedTimeStamp) AS ModifiedTimeStamp
--,TRIM(IsActiveRecord) AS IsActiveRecord
--------------------------------------------- Extra Fields ---------------------------------------------
--,UPPER(TRIM(STRes1)) AS STRes1
--,UPPER(TRIM(STRes2)) AS STRes2
--,UPPER(TRIM(STRes3)) AS STRes3

FROM [stage].[CER_NO_BC_StockTransaction]
GO
PRINT N'Creating [stage].[JEN_SK_StockTransaction]'
GO
CREATE TABLE [stage].[JEN_SK_StockTransaction]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[SysRowID] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[BinNumber] [nvarchar] (50) NULL,
[BatchID] [nvarchar] (50) NULL,
[FIFOBatchID] [nvarchar] (50) NULL,
[SupplierBatchID] [nvarchar] (50) NULL,
[TranDate] [date] NULL,
[CreateDate] [date] NULL,
[CreateTime] [nvarchar] (50) NULL,
[TranDT] [nvarchar] (50) NULL,
[TranType] [nvarchar] (50) NULL,
[TranTypeDesc] [nvarchar] (200) NULL,
[TranSource] [nvarchar] (50) NULL,
[Reference] [nvarchar] (30) NULL,
[TranQty] [decimal] (18, 4) NULL,
[PartStatus] [nchar] (10) NULL,
[IssuerReceiverCode] [nvarchar] (50) NULL,
[CostPrice] [decimal] (18, 4) NULL,
[SellingPrice] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[TranValue] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[vJEN_SK_StockTransaction]'
GO

CREATE VIEW [stage].[vJEN_SK_StockTransaction] AS 
--COMMENT empty fields // ADD UPPER() INTO PartID,CustomerID,WarehouseID 2022-12-13 VA
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM([Company]),'#',TRIM([SysRowID])))) AS StockTransactionID
	,CONCAT([Company],'#',TRIM([SysRowID])) AS StockTransactionCode --StockTransactionCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',TRIM([Company]))) AS CompanyID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM([Company]),'#',TRIM([PartNum])))) AS PartID
    ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode])))) AS WarehouseID
 	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	,IIF(TranSource = '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM([Company]),'#',TRIM([OrderNum])))), NULL) AS SalesOrderNumID
	,IIF(TranSource <> '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM([Company]),'#',TRIM([OrderNum])))), NULL) AS PurchaseOrderNumID
--	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([OrderNum])))) AS PurchaseOrderID
	,IIF(TranSource = '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM([Company]),'#',TRIM([InvoiceNum])))), NULL) AS SalesInvoiceID
	,IIF(TranSource <> '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM([Company]),'#',TRIM([InvoiceNum])))), NULL) AS PurchaseInvoiceID
	,IIF(TranSource = '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([IssuerReceiverCode]))))), NULL) AS CustomerID
	--,IIF(TranSource = '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM([Company]),'#',TRIM([IssuerReceiverCode])))), NULL) AS CustomerID
	,IIF(TranSource <> '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([IssuerReceiverCode]))))), NULL) AS SupplierID
	--,IIF(TranSource <> '0x31', CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(TRIM([Company]),'#',TRIM([IssuerReceiverCode])))), NULL) AS SupplierID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',TRIM([CurrencyCode]))) AS CurrencyID
	,[PartitionKey]
    ,[SysRowID] AS IndexKey
    ,TRIM([Company]) AS Company -- 
	,TRIM([WarehouseCode]) AS WarehouseCode
	,iif(convert(date, [TranDate]) = '2022-05-02' and [TranTypeDesc] = 'Incoming Goods','OB',[TranType]) AS TransactionCode
	,iif(convert(date, [TranDate]) = '2022-05-02' and [TranTypeDesc] = 'Incoming Goods','Opening balance',[TranTypeDesc]) AS TransactionDescription
	,IIF(TRIM([IssuerReceiverCode])='', NULL,TRIM(IssuerReceiverCode)) AS IssuerReceiverNum
	,IIF(TRIM([OrderNum])='', NULL, TRIM(OrderNum)) AS OrderNum 
	--,'' AS OrderLine
    ,IIF(TRIM([InvoiceNum])='', NULL,TRIM(InvoiceNum)) AS InvoiceNum
	--,'' AS InvoiceLine
    ,TRIM([PartNum]) AS PartNum
    ,IIF(TRIM([BinNumber])='', NULL,TRIM(BinNumber)) AS BinNum
    ,IIF(TRIM([BatchID])='', NULL,TRIM(BatchID)) AS BatchNum
	,convert(date, [TranDate]) AS TransactionDate 
	,[CreateTime] AS TransactionTime
	,[TranQty]		AS TransactionQty
	,[TranValue] AS TransactionValue 
	,[CostPrice] 
	,[SellingPrice] AS SalesUnitPrice 
	,'SEK' AS Currency -- Hardcoded to SEK
	,[Reference]
	,convert(date, [CreateDate]) AS AdjustmentDate
	,IIF(TRIM([TranTypeDesc]) IN ('Incoming goods','Outgoing goods'),'External','Internal') AS InternalExternal
	,PartStatus AS STRes1
	--,'' AS STRes2
	--,'' AS STRes3
    ,IIF(TRIM([FIFOBatchID])='', NULL,TRIM(FIFOBatchID)) AS FIFOBatchID
    ,IIF(TRIM([SupplierBatchID])='', NULL,TRIM(SupplierBatchID)) AS SupplierBatchID
	,[TranDT]
    ,[TranSource]
--	Simple logic for counting StockBalance, maybe to simple ?
--	,SUM(TranQty) OVER (PARTITION BY  WarehouseCode , PartNum, BatchID ORDER BY TranDate asc ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) 
--	,SUM(TranQty) OVER (PARTITION BY  WarehouseCode , PartNum, BatchID ORDER BY TranDate asc) AS StockBalanceCount --Original
--	,SUM(TranQty) OVER (PARTITION BY  WarehouseCode , PartNum, BatchID ORDER BY TranDT ASC) AS StockBalanceCount -- DZ modified  -- ET 20200916 decision, solution in measures
--	,SUM(TranValue) OVER (PARTITION BY  WarehouseCode , PartNum, BatchID ORDER BY TranDate asc) AS StockBalanceValue --Original
--	,SUM(TranValue) OVER (PARTITION BY  WarehouseCode , PartNum, BatchID ORDER BY TranDT ASC) AS StockBalanceValue -- DZ modified  -- ET 20200916 decision, solution in measures
				 
FROM 
	[stage].[JEN_SK_StockTransaction]
GO
PRINT N'Creating [prestage].[TRA_FR_SalesLedger_Load]'
GO

CREATE PROCEDURE [prestage].[TRA_FR_SalesLedger_Load] AS
BEGIN

Truncate table stage.[TRA_FR_SalesLedger]

INSERT INTO 
	stage.TRA_FR_SalesLedger 
	(PartitionKey, Company, [CustomerNum], [SalesInvoiceNum],  [VATAmount], [Currency], [ExchangeRate], [SalesInvoiceDate], DueDate, LastPaymentDate, InvoiceAmount, RemainingInvoiceAmount, VATCode, PayToName, PayToCity, PayToContact, PaymentTerms)
SELECT 
	PartitionKey, Company, [CustomerNum],  [SalesInvoiceNum],  [VATAmount], [Currency], [ExchangeRate], SalesInvoiceDate, DueDate, LastPaymentDate, InvoiceAmount, RemainingInvoiceAmount, VATCode, PayToName, PayToCity, PayToContact, PaymentTerms
FROM 
	[prestage].[vTRA_FR_SalesLedger]

--Truncate table prestage.[TRA_FR_SalesLedger]

End
GO
PRINT N'Creating [stage].[LEX_FR_OLine]'
GO
CREATE TABLE [stage].[LEX_FR_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[NeedByDate] [date] NULL,
[DelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[SumUnitCost] [decimal] (18, 4) NULL,
[SumUnitPrice] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OpenRelease] [int] NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [int] NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[BusinessChannel] [nvarchar] (50) NULL,
[SuspendingFlag] [int] NULL,
[LabelQuotations] [nvarchar] (50) NULL,
[QuotationNum] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vLEX_FR_OLine]'
GO
CREATE VIEW [stage].[vLEX_FR_OLine] AS
--COMMENT EMPTY FIELDS / ADD UPPER()TRIM()INTO PartID,CustomerID 2022-12-14 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(SalesChannel) ))) AS SalesOrderID --, '#', NeedByDate, '#', PartNum --, '#', DelivQty, '#', UnitPrice, '#', UnitCost /*, '#', TRIM(OrderSubLine) */
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustomerNum)))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM([PartNum]))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM([PartNum])))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum)))) AS SalesOrderNumID

	,CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderSubLine), '#', TRIM(InvoiceNum)) AS SalesOrderCode

	,CONVERT(int, replace(convert(date, OrderDate), '-', '')) AS SalesOrderDateID  --redundent?
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey 

	,Company 
	,TRIM(CustomerNum) AS CustomerNum
	,TRIM(OrderNum) AS [SalesOrderNum]
	,TRIM(OrderLine) AS [SalesOrderLine]
	,MIN(OrderSubLine) AS [SalesOrderSubLine]
	,LabelQuotations AS [SalesOrderType]
	,QuotationNum AS [SalesOrderCategory] -- QuotationNum - Reference num to a quotating. Putting it in SalesOrderCategory since it is not used for Forankra FR
	,OrderDate AS [SalesOrderDate]
	,NeedByDate AS [NeedbyDate]
	,DelivDate AS [ExpDelivDate]
	,CAST('1900-01-01' AS date) AS ActualDelivDate
	,CAST('1900-01-01' AS date) AS ConfirmedDelivDate
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,OrderQty AS [SalesOrderQty]
	,IIF(LabelQuotations NOT IN ('3','4'), 0, OrderQty) AS DelivQty -- DZ 20211130
	,IIF(LabelQuotations IN ('3','4'), 0, OrderQty) RemainingQty -- DZ 20211130
	--,NULL AS SalesInvoiceQty
	--,'' AS [UoM]
	,UnitPrice
	,AVG(UnitCost) as UnitCost
	,COALESCE(Currency, 'EUR') AS Currency
	,COALESCE(ExchangeRate, 1) AS ExchangeRate
	,CASE WHEN LabelQuotations IN ('3','4') THEN '0' ELSE '1' END  AS OpenRelease  --LabelQuotations = 4 means Closed order
	,DiscountAmount
	,DiscountPercent
	,TRIM([PartNum]) AS PartNum
	--,'' AS [PartType]
	,PartStatus
	,SalesPersonName
	,TRIM(WarehouseCode) AS WarehouseCode
	,SalesChannel
	,'Normal Order Handling' AS AxInterSalesChannel
	,BusinessChannel AS [Department]
	,SuspendingFlag AS [ProjectNum] -- Since BackOrder needs this flag=1, so use [ProjectNum] for SuspendingFlag for ACK. /DZ. 20211104
	--,'' AS [IndexKey]
	--,'0' AS Cancellation
	--,'' AS SORes1
	--,'' AS SORes2
	--,'' AS SORes3
	--,'' AS ReturnComment
	--,'' AS SalesReturnOrderNum
	--,'' AS SalesReturnInvoiceNum
	--,NULL AS [TotalMiscChrg]
FROM stage.LEX_FR_OLine
WHERE SuspendingFlag <> 2 --since these are orders that they do not consider 'real' unless they are reactivated. by John D 20210902 -- /DZ
GROUP BY PartitionKey ,Company, CustomerNum, OrderNum, OrderLine,/*OrderSubLine,*/OrderType,OrderDate, NeedByDate,DelivDate,InvoiceNum,OrderQty
	/*,DelivQty */ ,RemainingQty, UnitPrice, /*UnitCost,*/ Currency, ExchangeRate, DiscountAmount, DiscountPercent, PartNum, PartStatus
	,SalesPersonName,WarehouseCode, SalesChannel, BusinessChannel, LabelQuotations,QuotationNum, OrderSubLine, SuspendingFlag
--	order by OpenRelease desc
GO
PRINT N'Creating [dm_TS].[dimSupplierAgreement]'
GO






CREATE VIEW [dm_TS].[dimSupplierAgreement] AS

SELECT  sa.[CompanyID]
,sa.[SupplierID]
,sa.[PartID]
,sa.[CurrencyID]
,sa.[Company]
,sa.[PartNum]
,sa.[SupplierNum]
,sa.[DiscountPercent]
,sa.[UnitPrice]
,sa.[AgreementQty]
,sa.[AgreementCode]
,sa.[AgreementDescription]
,sa.[AgreementStart]
,sa.[AgreementEnd]
,sa.[SupplierTerms]
,sa.[FulfilledQty]
,sa.[RemainingQty]
,sa.[UoM]
,sa.[Currency]
,sa.[DelivTime]
,sa.[PartitionKey]
,sa.[ExchangeRate]
FROM [dm].[DimSupplierAgreement] as sa
WHERE sa.[Company] in ('FESFORA','FSEFORA', 'FFRFORA', 'FFRGPI', 'FFRLEX', 'IFIWIDN', 'IEEWIDN', 'TMTFI', 'TMTEE', 'FITMT', 'EETMT', 'ABKSE', 'ROROSE','STESE', 'FORPL'
, 'CERPL','CERBG'
,'FORBG')
GO
PRINT N'Creating [stage].[NOM_SE_Warehouse]'
GO
CREATE TABLE [stage].[NOM_SE_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[WarehouseCode] [nvarchar] (10) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vNOM_SE_Warehouse]'
GO
CREATE   view [stage].[vNOM_SE_Warehouse] AS
--COMMENT EMPTY FIELDS 2022-12-20 VA
SELECT 
	
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey
	,[Company] AS Company
	,[WarehouseCode]
	,[WarehouseName]
	--,'' AS WarehouseDistrict
	--,'' AS WarehouseAddress
	--,'' AS WarehouseDescription
	--,'' AS WarehouseType
	--,'' AS WarehouseCountry
	--,'' AS WarehouseSite
FROM [stage].[NOM_SE_Warehouse]
GO
PRINT N'Creating [dm_FH].[fctSalesInvoice]'
GO
CREATE VIEW [dm_FH].[fctSalesInvoice] AS

SELECT 
 si.[SalesInvoiceID]
,si.[SalesOrderID]
,si.[SalesOrderNumID]
,si.[CustomerID]
,si.[CompanyID]
,si.[PartID]
,si.[WarehouseID]
,si.[SalesPersonNameID]
,si.[DepartmentID]
,si.[Company]
,si.[SalesInvoiceCode]
,si.[SalesInvoiceDateID]
,si.[ProjectID]
,si.[SalesPersonName]
,si.[CustomerNum]
,si.[PartNum]
,si.[PartType]
,si.[SalesOrderNum]
,si.[SalesOrderLine]
,si.[SalesOrderSubLine]
,si.[SalesOrderType]
,si.[SalesInvoiceNum]
,si.[SalesInvoiceLine]
,si.[SalesInvoiceType]
,si.[SalesInvoiceDate]
,si.[ActualDelivDate]
,si.[SalesInvoiceQty]
,si.[UoM]
,si.[UnitPrice]
,si.[UnitCost]
,si.[DiscountPercent]
,si.[DiscountAmount]
,si.[TotalMiscChrg]
,si.[Currency]
,si.[ExchangeRate]
,si.[VATAmount]
,si.[CreditMemo]
,si.[Department]
,si.[ProjectNum]
,si.[WarehouseCode]
,si.[CostBearerNum]
,si.[CostUnitNum]
,si.[ReturnComment]
,si.[ReturnNum]
,si.[OrderHandler]
,si.[SalesChannel]
,si.[NeedbyDate]
,si.[ExpDelivDate]
,si.[SalesOrderCode]
,si.[SalesOrderDateID]
,si.[SalesOrderDate]
,si.[ConfirmedDelivDate]
,si.[PartStatus]
,si.[AxInterSalesChannel]
,si.[DueDate]
,si.[LastPaymentDate]
,si.[SalesInvoiceStatus]
,si.[CashDiscountOffered]
,si.[CashDiscountUsed]
,si.[IsUpdatingStock]
,si.[SIRes1]
,si.[SIRes2]
,si.[SIRes3]
,si.[SIRes4]
,si.[SIRes5]
,si.[SIRes6]
FROM dm.FactSalesInvoice si
LEFT JOIN dbo.Company com ON si.Company = com.Company
WHERE com.BusinessArea = 'Fluid Handling Solutions' AND com.[Status] = 'Active'
GO
PRINT N'Creating [stage].[CYE_ES_SOLine]'
GO
CREATE TABLE [stage].[CYE_ES_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [datetime] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderRel] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[InvoiceType] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[SellingShipQty] [decimal] (28, 8) NULL,
[UnitPrice] [decimal] (28, 8) NULL,
[UnitCost] [decimal] (28, 8) NULL,
[DiscountAmount] [decimal] (38, 8) NULL,
[TotalMiscChrg] [decimal] (28, 8) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Indexkey] [nvarchar] (50) NULL,
[UnitCostEK02] [decimal] (28, 8) NULL,
[DiscountPercent] [decimal] (28, 8) NULL,
[SalesOfficeDescrip] [nvarchar] (max) NULL,
[SalesGroupCode] [nvarchar] (50) NULL,
[SalesGroupDescrip] [nvarchar] (max) NULL,
[ActualDeliveryDate] [date] NULL,
[ReturnNum] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[vCYE_ES_SOLine]'
GO

CREATE VIEW [stage].[vCYE_ES_SOLine] AS
--COMMENT EMPTY FIELD // ADD TRIM() INTO CustomerID,WarehouseID  23-01-03 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine), '#', TRIM(OrderNum), '#', TRIM(ReturnNum))))) AS SalesInvoiceID --,'#',UnitCost
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderRel), '#', TRIM(InvoiceNum))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', TRIM(CustNum)) ), '#', InvoiceNum)))) AS SalesLedgerID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(TRIM(CustNum)))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', TRIM(CustNum)) ) )))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  TRIM(PartNum)) ))))) AS PartID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SalesOfficeDescrip))))) AS WarehouseID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SalesOfficeDescrip))))) AS WarehouseID --temp solution to replace WarehouseCode
	,UPPER(CONCAT(Company, '#',  TRIM(OrderNum), '#', TRIM(OrderLine))) AS SalesOrderCode
	,CONVERT(int, replace(convert(date,InvoiceDate),'-','')) AS SalesInvoiceDateID  
	,UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine), '#', TRIM(OrderNum))) AS SalesInvoiceCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT( Company, '#', '') )))	AS ProjectID
	,PartitionKey

	,UPPER(Company) AS Company
	,UPPER(TRIM(CustNum)) AS CustomerNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,TRIM(SalesGroupDescrip) AS SalesPersonName --25/5
	,TRIM(OrderNum) AS SalesOrderNum
	,TRIM(OrderLine) AS SalesOrderLine
	,TRIM(OrderRel) AS SalesOrderSubLine
	--,'' AS SalesOrderType
	--,'' AS PartType
	,TRIM(InvoiceNum) AS SalesInvoiceNum
	,TRIM(InvoiceLine) AS SalesInvoiceLine
	,TRIM(InvoiceType) AS SalesInvoiceType -- added by Capgemani 20210622 /DZ
	,CONVERT(date, InvoiceDate) AS SalesInvoiceDate
	,CONVERT(date, ActualDeliveryDate) AS ActualDelivDate
	,IIF(ReturnNum IS NOT NULL OR InvoiceType in ('RE', 'S1','G2'), -1*SellingShipQty/1000, SellingShipQty/1000) AS SalesInvoiceQty --change 20210510 /DZ --: SalesInvoiceType in (’RE’, ’S1’,’G2’) then qty * -1 and DiscountAmount * -1 ET epost 20210630
	--,'' AS UoM
	,UnitPrice/10000 AS UnitPrice --change 20210510 /DZ
	,UnitCost/10000 AS UnitCost --change 20210510 /DZ
	,IIF(UnitPrice*SellingShipQty = 0, 0, DiscountAmount/(UnitPrice/10000)*(SellingShipQty/1000)) AS DiscountPercent --change 20210510 /DZ
	,IIF(InvoiceType in ('RE', 'S1','G2'), -1*DiscountAmount/100, DiscountAmount/100) AS DiscountAmount --change 20210510 /DZ
	--,0 AS CashDiscountOffered
	--,0 AS CashDiscountUsed
	,IIF(ReturnNum IS NOT NULL, -1*TotalMiscChrg/100, TotalMiscChrg/100) AS TotalMiscChrg --change 20210510 /DZ -- SalesInvoiceType in (’RE’, ’S1’,’G2’) then DiscountAmount * -1 ET epost 20210630
	--,NULL AS VATAmount
	,'EUR' AS Currency
	,1 AS ExchangeRate
	,IIF(ReturnNum IS NOT NULL OR InvoiceType in ('RE', 'S1','G2'), 1, 0) AS CreditMemo
	--,'' AS SalesChannel
	,TRIM(SalesOfficeDescrip) AS Department
	,TRIM(SalesOfficeDescrip) AS WarehouseCode -- real one is WarehouseCode, use officedescrip for temp solution --/DZ + ET 2022-03-18
	--,NULL AS DeliveryAddress
	--,'' AS CostBearerNum
	--,'' AS CostUnitNum
	,ReturnComment
	,TRIM(ReturnNum) AS ReturnNum
	--,'' AS ProjectNum
	,IndexKey
	--,'' AS SIRes1
	--,'' AS SIRes2
	--,'' AS SIRes3

FROM 
	[stage].[CYE_ES_SOLine] AS SO

GROUP BY PartitionKey, Company, SalesPerson, CustNum, OrderLine, InvoiceNum, InvoiceLine, InvoiceDate, ActualDeliveryDate, SellingShipQty, UnitPrice, UnitCost, DiscountAmount, PartNum, TotalMiscChrg, CreditMemo, WarehouseCode, IndexKey, UnitCostEK02, SalesOfficeDescrip, SalesGroupCode, SalesGroupDescrip, OrderNum, OrderRel, ReturnNum, ReturnComment, InvoiceType
GO
PRINT N'Creating [stage].[SKS_FI_BudgetCopa]'
GO
CREATE TABLE [stage].[SKS_FI_BudgetCopa]
(
[PartitionKey] [varchar] (50) NULL,
[MANDT] [nvarchar] (50) NULL,
[PALEDGER] [nvarchar] (50) NULL,
[VRGAR] [nvarchar] (50) NULL,
[VERSI] [nvarchar] (50) NULL,
[PERIO] [nvarchar] (50) NULL,
[PAOBJNR] [nvarchar] (50) NULL,
[PASUBNR] [nvarchar] (50) NULL,
[BELNR] [nvarchar] (50) NULL,
[POSNR] [nvarchar] (50) NULL,
[RPOSN] [nvarchar] (50) NULL,
[RBELN] [nvarchar] (50) NULL,
[TIMESTMP] [nvarchar] (50) NULL,
[PERBL] [nvarchar] (50) NULL,
[HZDAT] [nvarchar] (50) NULL,
[USNAM] [nvarchar] (50) NULL,
[GJAHR] [nvarchar] (50) NULL,
[KNDNR] [nvarchar] (50) NULL,
[BUKRS] [nvarchar] (50) NULL,
[PRCTR] [nvarchar] (50) NULL,
[PAPH2] [nvarchar] (50) NULL,
[KLABC] [nvarchar] (50) NULL,
[WWVMY] [nvarchar] (50) NULL,
[ERLOS001] [decimal] (18, 8) NULL,
[REC_WAERS] [nvarchar] (50) NULL,
[VVMAR001] [decimal] (18, 8) NULL,
[VVMAR_ME] [nvarchar] (50) NULL,
[BZIRK] [nvarchar] (50) NULL,
[BZTXT] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vSKS_FI_BudgetCopa]'
GO







/****** Script for SelectTopNRows command from SSMS  ******/
CREATE VIEW [stage].[vSKS_FI_BudgetCopa] AS
WITH CTE AS (
SELECT [PartitionKey], [MANDT], [PALEDGER], [VRGAR], [VERSI], [PERIO], [PAOBJNR], [PASUBNR], [BELNR], [POSNR], [RPOSN], [RBELN], [TIMESTMP], [PERBL], [HZDAT], [USNAM], [GJAHR], [KNDNR], [BUKRS], [PRCTR], [PAPH2], [KLABC], [WWVMY], [ERLOS001], [REC_WAERS], [VVMAR001], [VVMAR_ME], [BZIRK], [BZTXT]
	,CAST(CASE WHEN BUKRS IN ('FI25','FI26') THEN 'SCOFI'
		WHEN BUKRS IN ('FI20') THEN 'SMKFI'  END AS nvarchar(50)) AS Company
FROM [stage].[SKS_FI_BudgetCopa]
WHERE BUKRS IN ('FI25','FI26','FI20')
)
SELECT 
		CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#', PAOBJNR, '#', BELNR, '#', PERBL )))) AS BudgetID
		,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([COMPANY],'#',TRIM([KNDNR]),'#',TRIM(BUKRS)))) AS CustomerID
		,CONVERT([binary](32),HASHBYTES('SHA2_256',[COMPANY])) AS CompanyID
		,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM(PAPH2),'#', TRIM([PRCTR]),'#', BUKRS)))) AS PartID
		,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#','')))) AS WarehouseID
		,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([COMPANY]),'#','')))) AS ProjectID
		,CAST(LEFT(PERBL,4) + RIGHT (PERBL,2) + '01' AS int)		AS BudgetPeriodDateID 
		
	  ,[PartitionKey]
	  ,Company
      ,LEFT(PERBL,4) + '-' + RIGHT (PERBL,2)	AS BudgetPeriod
	  ,'ZBIS_SALES_COPA' AS BudgetName
	  ,CONCAT(BUKRS, '-', PAPH2,'-',PRCTR,'-',KNDNR, '-', BZIRK)	AS BudgetDescription
	  ,CAST(LEFT(PERBL,4) + '-' + RIGHT (PERBL,2) + '-01'  AS date)	AS BudgetPeriodDate
	  ,'Monthly'	AS PeriodType
	  ,'' AS BudgetType
	  ,[KNDNR]	AS CustomerNum
	  ,BZIRK + '-' + BZTXT	AS CustomerGroup
	  ,PAPH2	AS PartNum
      ,RIGHT(PAPH2,5)	AS ProductGroup
      ,WWVMY	AS SalesPersonCode
	  ,''	AS SalesPersonName
	  ,ERLOS001	AS BudgetSales
      ,ERLOS001 - ERLOS001*(ABS(VVMAR001)*12)/100	AS BudgetCost	-- Actually margin %
	  ,REC_WAERS		AS Currency
      ,ERLOS001*(ABS(VVMAR001)*12)/100 AS GrossProfitInvoiced
	  ,ABS(VVMAR001)*12  	AS GrossMarginInvoicedPercent
	  ,0			AS BudgetFinance
	  ,right(BZIRK,3)			AS WarehouseCode
	  ,''			AS CostBearerNum
	  ,''			AS CostUnitNum
	  ,BZIRK + '-' + BZTXT			AS ProjectNum -- This field is actually showing District (Also used when we build CustomerGroup but they need it in a separate field)
	  ,''			AS AccountNum
	  ,''			AS AccountGroupNum
	  ,TRIM([PRCTR])			AS BRes1
	  ,''			AS BRes2
	  ,''			AS BRes3
  FROM CTE
GO
PRINT N'Creating [prestage].[CYE_ES_POLine]'
GO
CREATE TABLE [prestage].[CYE_ES_POLine]
(
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[PONum] [nvarchar] (50) NULL,
[POLine] [nvarchar] (50) NULL,
[PORelNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[Qty] [nvarchar] (50) NULL,
[UnitPrice] [nvarchar] (50) NULL,
[Indexkey] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [prestage].[vCYE_ES_POLine]'
GO


CREATE VIEW [prestage].[vCYE_ES_POLine] AS
SELECT 
	concat(CONVERT (date, SYSDATETIME()), ' 00:00:00') AS [PartitionKey]
	,'CYESA' AS [Company]
	,TRIM(SupplierNum) AS SupplierNum
	,CONVERT(DATE, OrderDate, 120) AS OrderDate
	,TRIM(InvoiceNum) AS InvoiceNum
	,TRIM(InvoiceLine) AS InvoiceLine
	,TRIM(PONum) AS PONum
	,TRIM(POLine) AS POLine
	,TRIM(PORelNum) AS PORelNum
	,TRIM(PartNum) AS PartNum
	,TRY_CONVERT(Decimal(18,4), REPLACE(REPLACE(Qty,'.',''),',','.')) AS Qty
	,TRY_CONVERT(Decimal(18,4), REPLACE(REPLACE([UnitPrice],'.',''),',','.')) AS [UnitPrice]
	,Indexkey
FROM [prestage].[CYE_ES_POLine]
GO
PRINT N'Creating [prestage].[CYE_ES_POLine_Load]'
GO
CREATE PROCEDURE [prestage].[CYE_ES_POLine_Load] AS

BEGIN

Truncate table stage.[CYE_ES_POLine]

insert into stage.CYE_ES_POLine(
	[PartitionKey]
      ,[Company]
      ,[SupplierNum]
      ,[OrderDate]
      ,[InvoiceNum]
      ,[InvoiceLine]
      ,[PONum]
      ,[POLine]
      ,[PORelNum]
      ,[PartNum]
      ,[UnitPrice]
      ,[Qty]
      ,[Indexkey]
)
select 
	  [PartitionKey]
      ,[Company]
      ,[SupplierNum]
      ,[OrderDate]
      ,[InvoiceNum] 
      ,[InvoiceLine]
      ,[PONum]
      ,[POLine]
      ,[PORelNum]
      ,[PartNum]
      ,[UnitPrice]
      ,[Qty]
      ,[Indexkey]
from [prestage].[vCYE_ES_POLine]

--Truncate table prestage.[CYE_ES_POLine] --Two loads in LSSourceTables_CYESA_dev uses the same prestage. Truncating would create conflicts. /SM 2022-02-23

End
GO
PRINT N'Creating [stage].[NOM_DK_CustomerAgreement]'
GO
CREATE TABLE [stage].[NOM_DK_CustomerAgreement]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[AgreementCode] [nvarchar] (50) NULL,
[AgreementDescription] [nvarchar] (50) NULL,
[DiscountPercent] [nvarchar] (50) NULL,
[UnitPrice] [nvarchar] (50) NULL,
[UoM] [nvarchar] (50) NULL,
[AgreementQty] [nvarchar] (50) NULL,
[DelivTime] [nvarchar] (50) NULL,
[Currency] [nvarchar] (10) NULL,
[CustomerTerms] [nvarchar] (100) NULL,
[AgreementStart] [date] NULL,
[AgreementEnd] [date] NULL,
[CARes1] [nvarchar] (100) NULL,
[CARes2] [nvarchar] (100) NULL,
[CARes3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vNOM_DK_CustomerAgreement]'
GO
CREATE VIEW [stage].[vNOM_DK_CustomerAgreement] AS 
--COMMENT EMPTY FIELDS 23-01-03 VA
SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM(AgreementCode),'#',TRIM([PartNum]),'#',TRIM(CustomerNum),'#',AgreementStart)))) AS CustomerAgreementID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID  
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM([Currency])))) AS CurrencyID
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM(CustomerNum)) AS CustomerNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,AgreementCode
	,AgreementDescription
	--,NULL AS DiscountPercent
	,CONVERT(decimal(18,4), [UnitPrice]) AS [UnitPrice]
	,AgreementQty
	,UPPER(TRIM([Currency])) AS Currency
	,[DelivTime]
	,AgreementStart
	,AgreementEnd
	,CustomerTerms
	--,0 AS FulfilledQty
	--,0 AS RemainingQty
	--,''	AS UoM
	--,'' AS CARes1
	--,'' AS CARes2
	--,'' AS CARes3
FROM 
	[stage].[NOM_DK_CustomerAgreement]
GROUP BY [PartitionKey], [Company], AgreementCode, AgreementDescription, [Currency], [PartNum], [DelivTime], AgreementStart, AgreementEnd, CustomerTerms, [UnitPrice], CustomerNum, AgreementQty
GO
PRINT N'Creating [stage].[AXI_HQ_Budget]'
GO
CREATE TABLE [stage].[AXI_HQ_Budget]
(
[PartitionKey] [nvarchar] (50) NULL,
[BudgetType] [nvarchar] (50) NULL,
[BudgetName] [nvarchar] (100) NULL,
[BudgetDescription] [nvarchar] (500) NULL,
[Company] [nvarchar] (8) NOT NULL,
[FiscalPeriod] [nvarchar] (100) NULL,
[FiscalPeriodDate] [date] NULL,
[PeriodType] [nvarchar] (100) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (100) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (100) NULL,
[SalesPersonCode] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[BudgetSales] [decimal] (18, 4) NULL,
[BudgetCost] [decimal] (18, 4) NULL,
[Budget] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[CostBearerNum] [nvarchar] (50) NULL,
[CostUnitNum] [nvarchar] (50) NULL,
[AccountNum] [nvarchar] (50) NULL,
[AccountGroupNum] [nvarchar] (50) NULL,
[ProjectNum] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXHSE_HQ_FinanceBudget]'
GO







/****** Script for SelectTopNRows command from SSMS  ******/
CREATE VIEW [stage].[vAXHSE_HQ_FinanceBudget] AS
SELECT  
		CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(b.Company,'#',FiscalPeriod,'#', b.AccountNum,'#',CostUnitNum ))) AS BudgetID
		,CONVERT(binary(32), HASHBYTES('SHA2_256',b.Company)) AS CompanyID
		,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(b.Company, '#', b.[AccountNum]))) AS AccountID
		,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(b.Company,'#', IIF(CostUnitNum='000---',N'000000',RIGHT(N'000000' + CostUnitNum,6)))) ) AS CostUnitID
		,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(b.Company,'#', CostBearerNum)) ) AS CostBearerID
	  ,CONVERT(varchar, GETDATE(), 23) AS PartitionKey

      ,[BudgetType]
      ,[BudgetName]
      ,[BudgetDescription]
      ,b.[Company]
      ,[FiscalPeriod]	AS BudgetPeriod
      ,[FiscalPeriodDate]	AS BudgetPeriodDate
      ,[PeriodType]
	  ,'SEK'	AS Currency
      ,CASE WHEN a.AccountType = 'R' AND a.Revenue = '1' THEN ABS([Budget])
			WHEN a.AccountType = 'R' AND COALESCE(a.Revenue,'0') <> '1' THEN ABS([Budget])*-1 
			ELSE Budget	END	AS BudgetFinance	
      ,[CostBearerNum]
      ,RIGHT('000000' + CostUnitNum,6)	AS [CostUnitNum]
      ,b.[AccountNum]
      ,b.[AccountGroupNum]	AS AccountGroup
	  ,'' AS BRes1
	  ,'' AS BRes2
	  ,'' AS BRes3
  FROM [stage].[AXI_HQ_Budget] b
  LEFT JOIN stage.vAXI_HQ_Account_excel a ON a.AccountNum = b.AccountNum 
  where upper(b.Company) = 'AXHSE'
/*  GROUP BY b.[PartitionKey]
      ,[BudgetType],[BudgetName],[BudgetDescription],[Company],[FiscalPeriod],[FiscalPeriodDate],[PeriodType],[CostBearerNum],[CostUnitNum],b.[AccountNum],b.[AccountGroupNum]
	  */
GO
PRINT N'Creating [prestage].[CYE_ES_Customer]'
GO
CREATE TABLE [prestage].[CYE_ES_Customer]
(
[Company] [nvarchar] (8) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[CustomerName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (50) NULL,
[Email] [nvarchar] (200) NULL,
[CustomerScore] [nvarchar] (50) NULL,
[City] [nvarchar] (50) NULL,
[ZIP] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (100) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (50) NULL,
[VATRegNr] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [prestage].[vCYE_ES_Customer]'
GO



CREATE view [prestage].[vCYE_ES_Customer]
as
SELECT 
	  concat(CONVERT (date, SYSDATETIME()), ' 00:00:00') AS [PartitionKey]
	  ,'CYESA' AS [Company]
	  ,[CustomerNum]
	  ,[CustomerName]
	  ,[AddressLine1]
	  ,[AddressLine2]
	  ,[AddressLine3]
	  ,TelephoneNumber1
	  ,Email
	  ,[CustomerScore]
	  ,[City]
	  ,[ZIP]
	  ,[State]
	  ,CountryCode
	  ,[CountryName]
	  ,[CustomerGroup]
	  ,CustomerSubGroup
	  ,'' AS [SalesRepCode]
	  ,[VATRegNr]
FROM [prestage].[CYE_ES_Customer]
GO
PRINT N'Creating [stage].[CER_LT_PurchaseInvoice]'
GO
CREATE TABLE [stage].[CER_LT_PurchaseInvoice]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaseOrderType] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[PurchaseInvoiceLine] [nvarchar] (50) NULL,
[PurchaseInvoiceDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PurchaserName] [nvarchar] (100) NULL,
[PurchaseInvoiceQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_LT_PurchaseInvoice]'
GO
CREATE VIEW [stage].[vCER_LT_PurchaseInvoice] AS
--COMMENT EMPTY FIELDS 2022-12-14 VA
SELECT 
	--CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum),'#',TRIM(PurchaseOrderNum),'#',TRIM(PurchaseOrderLine),'#'
	--	,TRIM(PurchaseOrderSubLine),'#',TRIM(PurchaseInvoiceNum), '#', PartNum, '#', UnitPrice, '#', DiscountAmount
	--	, '#', PurchaseInvoiceQty, '#', ActualDelivDate, '#', TRIM(WarehouseCode))))) AS PurchaseInvoiceID --'#', PurchaseOrderType
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#'
		,TRIM(PurchaseOrderSubLine), '#', TRIM(PurchaseInvoiceNum), '#', TRIM(PurchaseInvoiceLine), '#', TRIM(PartNum), '#', TRIM(WarehouseCode))))) AS PurchaseInvoiceID 
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseInvoiceNum), '#', PartNum)) AS PurchaseInvoiceCode
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum))) AS PurchaseOrderNumCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum),'#',TRIM(PurchaseOrderLine),'#',TRIM(PurchaseInvoiceNum))))) AS PurchaseOrderID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum))))) AS SupplierID
    ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT(int, replace(PurchaseInvoiceDate,'-','')) AS PurchaseInvoiceDateID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#', TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum),'#',TRIM(PurchaseOrderNum))))) AS PurchaseLedgerID --match PurchaseLedgerID in [vSCM_FI_PurchaseLedger]
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum),'#',TRIM(PurchaseOrderNum))) AS PurchaseOrderCode
	,PartitionKey

	,UPPER(TRIM(Company)) AS Company
	,UPPER(TRIM(PurchaseOrderNum)) AS PurchaseOrderNum
	,UPPER(TRIM(PurchaseOrderLine)) AS PurchaseOrderLine
	,UPPER(TRIM(PurchaseOrderSubLine)) AS PurchaseOrderSubLine
	,PurchaseOrderType
	,UPPER(TRIM(PurchaseInvoiceNum)) AS PurchaseInvoiceNum
	,PurchaseInvoiceLine -- deliv line
	--,'' AS PurchaseInvoiceType
	,PurchaseInvoiceDate
	,ActualDelivDate
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,PurchaseInvoiceQty
	--,'' AS UoM
	,UnitPrice
	--,0 AS DiscountPercent
	,DiscountAmount
	,TotalMiscChrg
	--,0 AS VATAmount
	,Currency
	,ExchangeRate
	--,'' AS CreditMemo
	,PurchaserName
	,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
	--,'' AS PurchaseChannel
	--,'' AS Comment
	--,'' AS PIRes1
	--,'' AS PIRes2
	--,'' AS PIRes3
	--,'' AS OrderDelivLineNum
FROM stage.CER_LT_PurchaseInvoice

--GROUP BY
--	PartitionKey, Company, PurchaseOrderNum, PurchaseInvoiceNum, SupplierNum, PartNum, PurchaseOrderLine, PurchaseOrderSubLine, PurchaseInvoiceQty, UnitPrice, WarehouseCode,PurchaserName, 
--	PurchaseInvoiceDate, ActualDelivDate, TotalMiscChrg, PurchaseOrderType,DiscountAmount,Currency,ExchangeRate 
	
	--, PurchaseOrderType, [Site], OrderDelivLineNum, , DiscountPercent, PurchaserName, PurchaseInvoiceLine, PurchaseInvoiceType, PurchaseInvoiceDate, ActualDelivDate, TotalMiscChrg, CreditMemo,UoM,PurchaseChannel, LastPaymentNum, VATAmount, CreditMemo, PurchaseInvoiceLine, PurchaseInvoiceType, 
GO
PRINT N'Creating [dm_FH].[fctPurchaseInvoice]'
GO

CREATE VIEW [dm_FH].[fctPurchaseInvoice] AS
-- FH basket
SELECT 
 pinv.[PurchaseInvoiceID]
,pinv.[CompanyID]
,pinv.[SupplierID]
,pinv.[PartID]
,pinv.[WarehouseID]
,pinv.[PurchaseOrderNumID]
,pinv.[CurrencyID]
,pinv.[PurchaseInvoiceDateID]
,pinv.[Company]
,pinv.[PurchaseOrderNum]
,pinv.[PurchaseOrderLine]
,pinv.[PurchaseOrderType]
,pinv.[PurchaseInvoiceNum]
,pinv.[PurchaseInvoiceLine]
,pinv.[PurchaseInvoiceType]
,pinv.[PurchaseInvoiceDate]
,pinv.[ActualDelivDate]
,pinv.[SupplierNum]
,pinv.[PartNum]
,pinv.[PurchaseInvoiceQty]
,pinv.[UoM]
,pinv.[UnitPrice]
,pinv.[DiscountPercent]
,pinv.[DiscountAmount]
,pinv.[TotalMiscChrg]
,pinv.[VATAmount]
,pinv.[Currency]
,pinv.[ExchangeRate]
,pinv.[CreditMemo]
,pinv.[PurchaserName]
,pinv.[WarehouseCode]
,pinv.[PurchaseChannel]
,pinv.[Comment]
,pinv.[PIRes1]
,pinv.[PIRes2]
,pinv.[PIRes3]
,pinv.[PIRes4]
,pinv.[PurchaseInvoiceAmountOC]
,pinv.[PurchaseOrderDate]
,pinv.[ReqDelivDate]
,pinv.[OrgReqDelivDate]
,pinv.[CommittedDelivDate]
,pinv.[OrgCommittedDelivDate]
,pinv.[DueDate]
,pinv.[PaymentDate]
,pinv.[InvoiceStatus]
FROM dm.FactPurchaseInvoice pinv
LEFT JOIN dbo.Company com ON pinv.Company = com.Company
WHERE com.BusinessArea = 'Fluid Handling Solutions' AND com.[Status] = 'Active'
GO
PRINT N'Creating [stage].[JEN_SE_CustomerAgreement]'
GO
CREATE TABLE [stage].[JEN_SE_CustomerAgreement]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[AgreementCode] [nvarchar] (50) NULL,
[AgreementDescription] [nvarchar] (50) NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DelivTime] [nvarchar] (10) NULL,
[Currency] [nvarchar] (10) NULL,
[AgreementStart] [date] NULL,
[AgreementEnd] [date] NULL
)
GO
PRINT N'Creating [stage].[vJEN_SE_CustomerAgreement]'
GO






CREATE VIEW [stage].[vJEN_SE_CustomerAgreement] AS 

SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM(AgreementCode),'#',TRIM([PartNum]),'#',TRIM(CustomerNum))))) AS CustomerAgreementID --CustomerAgreementID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID  
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM([Currency])))) AS CurrencyID
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM(CustomerNum)) AS CustomerNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,AgreementCode
	,AgreementDescription
	,DiscountPercent
	,MAX([UnitPrice]) AS [UnitPrice]
	,0 AS AgreementQty
	,UPPER(TRIM([Currency])) AS Currency
	,[DelivTime]
	,AgreementStart
	,AgreementEnd
	--,'' AS CustomerTerms
	,0	AS FulfilledQty
	,0  AS RemainingQty
	--,''	AS UoM
	--,'' AS CARes1
	--,'' AS CARes2
	--,'' AS CARes3

	
FROM 
	[stage].[JEN_SE_CustomerAgreement]
GROUP BY [PartitionKey], [Company], AgreementCode, AgreementDescription, [Currency], [PartNum], CustomerNum, [DiscountPercent], [DelivTime], AgreementStart, AgreementEnd
--WHERE 
--	RecordType = 'D'
GO
PRINT N'Creating [stage].[JEN_NB_CustomerAgreement]'
GO
CREATE TABLE [stage].[JEN_NB_CustomerAgreement]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[AgreementCode] [nvarchar] (50) NULL,
[AgreementDescription] [nvarchar] (50) NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DelivTime] [nvarchar] (10) NULL,
[Currency] [nvarchar] (10) NULL,
[AgreementStart] [date] NULL,
[AgreementEnd] [date] NULL
)
GO
PRINT N'Creating [stage].[vJEN_NB_CustomerAgreement]'
GO
CREATE VIEW [stage].[vJEN_NB_CustomerAgreement] AS 
--COMMENT EMPTY FIELDS 23-01-03 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]),'#',TRIM(AgreementCode),'#',TRIM([PartNum]),'#',TRIM(CustomerNum))))) AS CustomerAgreementID --CustomerAgreementID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Company])))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID  
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Currency])))) AS CurrencyID
	,[PartitionKey]

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM(CustomerNum)) AS CustomerNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,AgreementCode
	,AgreementDescription
	,DiscountPercent
	,MAX([UnitPrice]) AS [UnitPrice]
	--,0 AS AgreementQty
	,UPPER(TRIM([Currency])) AS Currency
	,[DelivTime]
	,AgreementStart
	,AgreementEnd
	--,'' AS CustomerTerms
	--,0	AS FulfilledQty
	--,0  AS RemainingQty
	--,''	AS UoM
	--,'' AS CARes1
	--,'' AS CARes2
	--,'' AS CARes3
FROM 
	[stage].[JEN_NB_CustomerAgreement]
GROUP BY [PartitionKey], [Company], AgreementCode, AgreementDescription, [Currency], [PartNum], CustomerNum, [DiscountPercent], [DelivTime], AgreementStart, AgreementEnd
--WHERE 
--	RecordType = 'D'
GO
PRINT N'Creating [stage].[CYE_ES_Warehouse]'
GO
CREATE TABLE [stage].[CYE_ES_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[WarehouseName] [nvarchar] (200) NULL,
[WarehouseDistrict] [nvarchar] (200) NULL,
[WarehouseAddress] [nvarchar] (200) NULL,
[WarehouseDescription] [nvarchar] (200) NULL,
[WarehouseType] [nvarchar] (100) NULL,
[WarehouseCountry] [nvarchar] (100) NULL,
[Site] [nvarchar] (200) NULL
)
GO
PRINT N'Creating [prestage].[CYE_ES_Warehouse_Load]'
GO

CREATE PROCEDURE [prestage].[CYE_ES_Warehouse_Load]
AS
BEGIN

Truncate table stage.[CYE_ES_Warehouse]

insert into 
stage.CYE_ES_Warehouse(
	PartitionKey
	,[Company]
	,[WarehouseCode]
	,[WarehouseName]
	,[WarehouseDistrict]
	,[WarehouseAddress]
	,[WarehouseDescription]
	,[WarehouseType]
	,[WarehouseCountry]
	,[Site]
	)
select 
	PartitionKey
	,[Company]
	,[WarehouseCode]
	,[WarehouseName]
	,[WarehouseDistrict]
	,[WarehouseAddress]
	,[WarehouseDescription]
	,[WarehouseType]
	,[WarehouseCountry]
	,[Site]
from [prestage].[vCYE_ES_Warehouse]

--Truncate table prestage.[CYE_ES_Warehouse]

End
GO
PRINT N'Creating [stage].[NOM_NO_Warehouse]'
GO
CREATE TABLE [stage].[NOM_NO_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[WarehouseCode] [nvarchar] (10) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vNOM_NO_Warehouse]'
GO
CREATE   view [stage].[vNOM_NO_Warehouse] AS
--COMMENT EMPTY FIELDS 23-01-09 VA
SELECT 
	
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey
	,[Company] AS Company
	,[WarehouseCode]
	,[WarehouseName]
	--,'' AS WarehouseDistrict
	--,'' AS WarehouseAddress
	--,'' AS WarehouseDescription
	--,'' AS WarehouseType
	--,'' AS WarehouseCountry
	--,'' AS WarehouseSite
FROM [stage].[NOM_NO_Warehouse]
GO
PRINT N'Creating [stage].[ROR_SE_PurchaseInvoice]'
GO
CREATE TABLE [stage].[ROR_SE_PurchaseInvoice]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL,
[IsActiveRecord] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaseOrderType] [nvarchar] (50) NULL,
[ActualShipDate] [nvarchar] (50) NULL,
[PurchaseInvoiceQty] [nvarchar] (50) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [nvarchar] (50) NULL,
[DiscountPercent] [nvarchar] (50) NULL,
[DiscountAmount] [nvarchar] (50) NULL,
[PurchaserName] [nvarchar] (50) NULL,
[PurchaseChannel] [nvarchar] (50) NULL,
[PurchaseInvoiceLine] [nvarchar] (50) NULL,
[PurchaseInvoiceSubLine] [nvarchar] (50) NULL,
[PurchaseInvoiceType] [nvarchar] (50) NULL,
[PurchaseInvoiceDate] [nvarchar] (50) NULL,
[ActualRecieveDate] [nvarchar] (50) NULL,
[IsInvoiceClosed] [nvarchar] (50) NULL,
[TotalMiscChrg] [nvarchar] (50) NULL,
[VATAmount] [nvarchar] (50) NULL,
[IsCreditMemo] [nvarchar] (50) NULL,
[Comment] [nvarchar] (max) NULL,
[PIRes1] [nvarchar] (100) NULL,
[PIRes2] [nvarchar] (100) NULL,
[PurchaseInvoiceAmountOC] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vROR_SE_PurchaseInvoice]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vROR_SE_PurchaseInvoice] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(pin.Company, '#', TRIM(pin.PurchaseOrderNum), '#', TRIM(pin.PurchaseOrderLine), '#', TRIM(pin.PurchaseOrderSubLine),'#',TRIM(pin.PurchaseInvoiceNum), '#', TRIM(pin.[PartNum]) )))) AS PurchaseInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(pin.Company, '#', TRIM(pin.PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(pin.Company, '#', TRIM(pin.PurchaseOrderNum), '#', TRIM(pin.PurchaseOrderLine))))) AS PurchaseOrderID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(pin.Company)))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(pin.Company), '#', TRIM(pin.SupplierNum))))) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(trim(pin.Company), '#', TRIM(pin.[PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(pin.Company), '#', TRIM(pin.WarehouseCode))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(pin.Company, '#', TRIM(pin.SupplierNum), '#', TRIM(pin.PurchaseInvoiceNum))))) AS PurchaseLedgerID
	,CONVERT(int, REPLACE(PurchaseInvoiceDate, '-', '')) AS PurchaseInvoiceDateID
	,UPPER(CONCAT(pin.Company, '#', TRIM(pin.SupplierNum), '#', TRIM(pin.PurchaseOrderNum), '#', TRIM(pin.PurchaseOrderLine))) AS PurchaseOrderCode
	,UPPER(CONCAT(pin.Company, '#', TRIM(pin.SupplierNum), '#', TRIM(pin.PurchaseInvoiceNum))) AS PurchaseInvoiceCode 
	,pin.PartitionKey

	,UPPER(pin.Company) AS Company
	,TRIM(pin.PurchaseOrderNum) AS PurchaseOrderNum
	,TRIM(pin.PurchaseOrderLine) AS PurchaseOrderLine
	,TRIM(pin.PurchaseOrderSubLine) AS PurchaseOrderSubLine
	,TRIM(pin.PurchaseOrderType) AS PurchaseOrderType 
	,TRIM(pin.PurchaseInvoiceNum) AS PurchaseInvoiceNum
	,TRIM(pin.PurchaseInvoiceLine) PurchaseInvoiceLine
	--,'' PurchaseInvoiceType
	,CONVERT(date, IIF(PurchaseInvoiceDate = '', '1900-01-01', PurchaseInvoiceDate)) AS PurchaseInvoiceDate
	,po.ActualDelivDate AS ActualDelivDate --added 20230620 by request of Elisa Karlsson
	,(CONVERT(date, ActualRecieveDate)) AS ActualShipDate -- take the latest date for invoice --
	,TRIM(UPPER(pin.SupplierNum)) AS SupplierNum
	,TRIM(UPPER(pin.[PartNum])) AS PartNum
	,(CONVERT(decimal(18,4), PurchaseInvoiceQty)) AS PurchaseInvoiceQty --sum different batch payment --
	,TRIM(pin.UoM) AS UoM
	,CONVERT(decimal(18,4), REPLACE(pin.UnitPrice, ',', '.')) AS UnitPrice
	,CONVERT(decimal(18,4), REPLACE(pin.DiscountPercent, ',', '.')) AS DiscountPercent
	,CONVERT(decimal(18,4), REPLACE(pin.DiscountAmount, ',', '.')) AS DiscountAmount
	,CONVERT(decimal(18,4), REPLACE(TotalMiscChrg, ',', '.')) AS TotalMiscChrg
	,CONVERT(decimal(18,4), REPLACE(VATAmount, ',', '.')) AS VATAmount --PIRes4
	,CONVERT(decimal(18,4), REPLACE(PurchaseInvoiceAmountOC, ',', '.')) AS PurchaseInvoiceAmountOC -- after request from Elisa & Sam 20230607 /DZ
	--,NULL AS VATAmount
	,CONVERT(decimal(18,4), REPLACE(pin.ExchangeRate, ',', '.')) AS ExchangeRate -- first date and the latest date invoice can have different curr.rates, not neccessarily who is the lagest, so average them --
	,TRIM(pin.Currency) AS Currency
	,TRIM(pin.[IsCreditMemo]) AS CreditMemo
	,TRIM(pin.PurchaserName) AS PurchaserName
	,TRIM(pin.WarehouseCode) AS WarehouseCode
	,TRIM(pin.PurchaseChannel) AS PurchaseChannel
	,TRIM(Comment) AS Comment
	--,'' AS PIRes1
	--,'' AS PIRes2
	--,'' AS PIRes3
FROM stage.ROR_SE_PurchaseInvoice pin
		LEFT JOIN [stage].[vROR_SE_PurchaseOrder] po ON TRIM(pin.PurchaseOrderNum) = TRIM(po.PurchaseOrderNum) AND TRIM(pin.PurchaseOrderLine) = TRIM(po.PurchaseOrderLine)
GO
PRINT N'Creating [prestage].[TRA_FR_SOLine]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [prestage].[TRA_FR_SOLine]
(
[Prop_0] [nvarchar] (8) NOT NULL,
[Prop_1] [nvarchar] (100) NULL,
[Prop_2] [nvarchar] (50) NULL,
[Prop_3] [nvarchar] (50) NULL,
[Prop_4] [nvarchar] (50) NULL,
[Prop_5] [nvarchar] (50) NULL,
[Prop_6] [nvarchar] (50) NULL,
[Prop_7] [nvarchar] (50) NULL,
[Prop_8] [nvarchar] (50) NULL,
[Prop_9] [nvarchar] (50) NULL,
[Prop_10] [nvarchar] (50) NULL,
[Prop_11] [nvarchar] (50) NULL,
[Prop_12] [nvarchar] (50) NULL,
[Prop_13] [nvarchar] (50) NULL,
[Prop_14] [decimal] (18, 4) NULL,
[Prop_15] [nvarchar] (50) NULL,
[Prop_16] [decimal] (18, 4) NULL,
[Prop_17] [decimal] (18, 4) NULL,
[Prop_18] [decimal] (18, 4) NULL,
[Prop_19] [decimal] (18, 4) NULL,
[Prop_20] [decimal] (18, 4) NULL,
[Prop_21] [decimal] (18, 4) NULL,
[Prop_22] [decimal] (18, 4) NULL,
[Prop_23] [decimal] (18, 4) NULL,
[Prop_24] [nvarchar] (50) NULL,
[Prop_25] [decimal] (18, 4) NULL,
[Prop_26] [nvarchar] (50) NULL,
[Prop_27] [nvarchar] (50) NULL,
[Prop_28] [nvarchar] (50) NULL,
[Prop_29] [nvarchar] (50) NULL,
[Prop_30] [nvarchar] (50) NULL,
[Prop_31] [nvarchar] (50) NULL,
[Prop_32] [nvarchar] (max) NULL,
[Prop_33] [nvarchar] (50) NULL,
[Prop_34] [nvarchar] (50) NULL,
[Prop_35] [nvarchar] (50) NULL,
[Prop_36] [nvarchar] (100) NULL,
[Prop_37] [nvarchar] (100) NULL,
[Prop_38] [nvarchar] (100) NULL,
[Prop_39] [nchar] (10) NULL
)
GO
PRINT N'Creating [prestage].[vTRA_FR_SOLine]'
GO



CREATE VIEW [prestage].[vTRA_FR_SOLine] AS

SELECT 
	CONCAT(CONVERT (date, SYSDATETIME()), ' 00:00:00') AS [PartitionKey]
	,Prop_0 AS [Company]
	,Prop_1 AS [SalesPersonName]
	,Prop_2 AS [CustomerNum]
	,Prop_3 AS [PartNum]
	,Prop_4 AS [PartType]
	,Prop_5 AS [SalesOrderNum]
	,Prop_6 AS [SalesOrderLine]
	,Prop_7 AS [SalesOrderSubLine]
	,Prop_8 AS [SalesOrderType]
	,Prop_9 AS [SalesInvoiceNum]
	,Prop_10 AS [SalesInvoiceLine]
	,Prop_11 AS [SalesInvoiceType]
	,CONVERT(date, CONCAT(SUBSTRING(Prop_12, 7,4), SUBSTRING(Prop_12, 4,2), SUBSTRING(Prop_12, 1,2))) AS [SalesInvoiceDate]
	,CONVERT(date, CONCAT(SUBSTRING(Prop_13, 7,4), SUBSTRING(Prop_13, 4,2), SUBSTRING(Prop_13, 1,2))) AS [ActualDelivDate]
	,Prop_14 AS [SalesInvoiceQty]
	,Prop_15 AS [UoM]
	,Prop_16 AS [UnitPrice]
	,Prop_17 AS [UnitCost]
	,Prop_18 AS [DiscountPercent]
	,Prop_19 AS [DiscountAmount]
	,Prop_20 AS [TotalMiscChrg]
	,Prop_21 AS [CashDiscountOffered]
	,Prop_22 AS [CashDiscountUsed]
	,Prop_23 AS [VATAmount]
	,Prop_24 AS [Currency]
	,Prop_25 AS [ExchangeRate]
	,Prop_26 AS [CreditMemo]
	,Prop_27 AS [SalesChannel]
	,Prop_28 AS [Department]
	,Prop_29 AS [WarehouseCode]
	,Prop_30 AS [CostBearerNum]
	,Prop_31 AS [CostUnitNum]
	,Prop_32 AS [ReturnComment]
	,Prop_33 AS [ReturnNum]
	,Prop_34 AS [ProjectNum]
	,Prop_35 AS [IndexKey]
	,Prop_36 AS [SIRes1]
	,Prop_37 AS [SIRes2]
	,Prop_38 AS [SIRes3]
FROM [prestage].[TRA_FR_SOLine]
GO
PRINT N'Creating [stage].[JEN_DK_SalesLedger]'
GO
CREATE TABLE [stage].[JEN_DK_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[VATPaidInvoiceLCU] [numeric] (18, 2) NULL,
[InvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL
)
GO
PRINT N'Creating [stage].[vJEN_DK_SalesLedger]'
GO

CREATE VIEW [stage].[vJEN_DK_SalesLedger] AS
--COMMENT EMPTY FIELDS // ADD TRIM() INTO CustomerID 22-12-29 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ), '#', TRIM(InvoiceNum))))) AS SalesLedgerID,
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID,
	UPPER(CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ), '#', InvoiceNum)) AS SalesLedgerCode,
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID,
	--CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ))))) AS CustomerID,
	PartitionKey,

	UPPER(Company) AS Company,
	TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ) AS CustomerNum,
	TRIM(InvoiceNum) AS SalesInvoiceNum,
	InvoiceDate		AS SalesInvoiceDate,
	CONVERT(date, DueDate) AS SalesDueDate,
	CONVERT(date, LastPaymentDate) AS SalesLastPaymentDate,
	--NULL AS InvoiceAmount,
	--NULL AS RemainingInvoiceAmount,
	--NULL AS PaidInvoiceAmount,
	1 AS ExchangeRate,
	'DKK' AS Currency,
	VATPaidInvoiceLCU AS VATAmount,  --request by CE & Sam 2023-03-28
	--'' AS VATCode,
	--'' AS PayToName,
	--'' AS PayToCity,
	--'' AS PayToContact,
	--'' AS PaymentTerms,
	--'' AS SLRes1,
	--'' AS SLRes2,
	--'' AS SLRes3
	'1900-01-01' AS AccountingDate
	--,'' AS AgingPeriod
	--,'' AS AgingSort
	--,'' AS VATCodeDesc
	--,'' AS LinkToOriginalInvoice
FROM 
	stage.JEN_DK_SalesLedger
GO
PRINT N'Creating [dm_FH].[dimSupplier]'
GO

CREATE VIEW [dm_FH].[dimSupplier] AS

SELECT 
 sup.[SupplierID]
,sup.[CompanyID]
,sup.[Company]
,sup.[SupplierNum]
,sup.[MainSupplierName]
,sup.[SupplierName]
,sup.[Supplier]
,sup.[TelephoneNum]
,sup.[Email]
,sup.[ZipCode]
,sup.[City]
,sup.[District]
,sup.[CountryCode]
,sup.[CountryName]
,sup.[Region]
,sup.[SupplierCategory]
,sup.[SupplierResponsible]
,sup.[AddressLine]
,sup.[FullAddressLine]
,sup.[AccountNum]
,sup.[OrganizationNum]
,sup.[VATNum]
,sup.[InternalExternal]
,sup.[CodeOfConduct]
,sup.[CustomerNum]
,sup.[SupplierScore]
,sup.[MinOrderQty]
,sup.[MinOrderValue]
,sup.[Website]
,sup.[Comments]
,sup.[IsMaterialSupplier]
,sup.[DUNS]
,sup.[DUNS_MatchScore]
,sup.[is_inferred]
,sup.[is_deleted]
,sup.[is_validCountryCode]
,sup.[DUNS_Status]
FROM [dm].[DimSupplier] sup
LEFT JOIN dbo.Company com ON sup.Company = com.Company
WHERE com.BusinessArea = 'Fluid Handling Solutions' AND com.[Status] = 'Active'
GO
PRINT N'Creating [stage].[SCM_FI_PurchaseInvoice]'
GO
CREATE TABLE [stage].[SCM_FI_PurchaseInvoice]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[SupplierCode] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[LineType] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaserName] [nvarchar] (100) NULL,
[OrderType] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[InvoiceType] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[PurchaseShipQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[LastPaymentNum] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vSCM_FI_PurchaseInvoice]'
GO
CREATE VIEW [stage].[vSCM_FI_PurchaseInvoice] AS
--COMMENT EMPTY FIELDS // ADD TRIM()UPPER() INTO PartID 2022-12-21 VA
--ADD TRIM() UPPER() INTO SupplierID 23-01-24 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine), '#', TRIM(PurchaseOrderNum),  '#', TRIM(PurchaseOrderLine), '#', TRIM(PurchaseOrderSubLine) ))) AS PurchaseInvoiceID
	,CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(PurchaseOrderNum), TRIM(PurchaseOrderLine), TRIM(PurchaseOrderSubLine), TRIM(InvoiceNum)) AS PurchaseOrderCode
	,CONCAT(Company,'#',SupplierCode,'#',InvoiceNum) AS PurchaseInvoiceCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company, '#', TRIM(PurchaseOrderNum)))) AS PurchaseOrderNumID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company, '#', PurchaseOrderNum, '#', PurchaseOrderLine))) AS PurchaseOrderID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierCode))))) AS SupplierID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(SupplierCode)))) AS SupplierID
    ,CONVERT([binary](32),HASHBYTES('SHA2_256',Company)) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',PartNum))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT(int, replace(InvoiceDate,'-','')) AS PurchaseInvoiceDateID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(InvoiceNum), '#', TRIM(PurchaseOrderNum), '#', TRIM(LastPaymentNum)))) AS PurchaseLedgerID --match PurchaseLedgerID in [vSCM_FI_PurchaseLedger]
	,PartitionKey

	,Company
	,TRIM(PurchaseOrderNum) AS PurchaseOrderNum
	,TRIM(PurchaseOrderLine) AS PurchaseOrderLine
	,TRIM(PurchaseOrderSubLine) AS PurchaseOrderSubLine
	,OrderType AS [PurchaseOrderType]
	,TRIM(InvoiceNum) AS [PurchaseInvoiceNum]
	,InvoiceLine AS [PurchaseInvoiceLine]
	,InvoiceType AS [PurchaseInvoiceType]
	,InvoiceDate AS [PurchaseInvoiceDate]
	,CASE WHEN ActualDeliveryDate <= '1900-01-01' or ActualDeliveryDate = '' or ActualDeliveryDate is null THEN '1900-01-01' 
	      ELSE ActualDeliveryDate END AS [ActualDelivDate]
	,TRIM(SupplierCode) AS [SupplierNum]
	,TRIM(PartNum) AS PartNum
	,PurchaseShipQty AS [PurchaseInvoiceQty]
	--,'' AS [UoM]
	,UnitPrice
	,DiscountAmount
	,IIF((UnitPrice*PurchaseShipQty) = 0, 0, DiscountAmount/(UnitPrice*PurchaseShipQty)) AS [DiscountPercent]
	,TotalMiscChrg
	--,NULL AS [VATAmount]
	,ExchangeRate
	,CurrencyCode AS [Currency]
	,CreditMemo
	,PurchaserName
	,TRIM(WarehouseCode) AS WarehouseCode
	--,'' AS [PurchaseChannel]
	--,'' AS Comment
	--,'' AS PIRes1
	--,'' AS PIRes2
	--,'' AS PIRes3
FROM stage.SCM_FI_PurchaseInvoice
/*
GROUP BY
	PartitionKey, Company, PurchaseOrderNum, InvoiceNum, SupplierCode, PartNum, PurchaseOrderLine, PurchaseOrderSubLine, PurchaseShipQty, UnitPrice, WarehouseCode,PurchaserName, InvoiceLine, InvoiceType, InvoiceDate, ActualDeliveryDate, TotalMiscChrg, CreditMemo, OrderType, DiscountAmount, CurrencyCode, ExchangeRate, LastPaymentNum 
 */
GO
PRINT N'Creating [stage].[CER_DK_PurchaseInvoice]'
GO
CREATE TABLE [stage].[CER_DK_PurchaseInvoice]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseOrderSubLine] [nvarchar] (50) NULL,
[PurchaseOrderType] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[PurchaseInvoiceLine] [nvarchar] (50) NULL,
[PurchaseInvoiceType] [nvarchar] (50) NULL,
[PurchaseInvoiceDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PurchaseInvoiceQty] [decimal] (18, 4) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[VATAmount] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (1) NULL,
[PurchaserName] [nvarchar] (100) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[PurchaseChannel] [nvarchar] (50) NULL,
[Comments] [nvarchar] (500) NULL,
[PIRes1] [nvarchar] (100) NULL,
[PIRes2] [nvarchar] (100) NULL,
[PIRes3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vCER_DK_PurchaseInvoice]'
GO
CREATE VIEW [stage].[vCER_DK_PurchaseInvoice] AS
--ADD TRIM()INTO PartID,WarehouseID 2022-12-14 VA
--ADD TRIM() INTO SupplierID 23-01-23 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company,'#',PurchaseInvoiceNum, '#', PurchaseInvoiceLine))) AS PurchaseInvoiceID --'#', PurchaseOrderType 
	,CONCAT(TRIM(Company),'#',PurchaseInvoiceNum, '#', PurchaseInvoiceLine) AS PurchaseInvoiceCode
	,CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum)) AS PurchaseOrderNumCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum),'#',TRIM(PurchaseOrderLine),'#',TRIM(PurchaseInvoiceNum))))) AS PurchaseOrderID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT([Company],'#',TRIM([SupplierNum]))))) AS SupplierID
    ,CONVERT([binary](32),HASHBYTES('SHA2_256',Company)) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(PartNum))))) AS PartID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT(int, replace(PurchaseInvoiceDate,'-','')) AS PurchaseInvoiceDateID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#', TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum))))) AS PurchaseLedgerID 
	,UPPER(CONCAT(Company,'#',TRIM(SupplierNum),'#',PurchaseOrderNum,'#',TRIM(PurchaseInvoiceNum))) AS PurchaseOrderCode
	,PartitionKey
	,Company
	,PurchaseOrderNum
	,PurchaseOrderLine
	,PurchaseOrderSubLine
	,PurchaseOrderType
	,PurchaseInvoiceNum 
	,PurchaseInvoiceLine
	,PurchaseInvoiceType
	,PurchaseInvoiceDate
	,CASE WHEN ActualDelivDate <= '1900-01-01' or ActualDelivDate = '' or ActualDelivDate is null THEN '1900-01-01' 
	      ELSE ActualDelivDate END   AS  ActualDelivDate
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,PurchaseInvoiceQty
	,UoM
	,UnitPrice
	,DiscountPercent
	,DiscountAmount
	,TotalMiscChrg
	,VATAmount
	,Currency
	,ExchangeRate
	,CreditMemo
	,PurchaserName
	,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
	,PurchaseChannel
	--,'' AS Comment
	,PIRes1
	,PIRes2
	,PIRes3

FROM stage.CER_DK_PurchaseInvoice
/*GROUP BY
	PartitionKey, Company, PurchaseOrderNum, PurchaseInvoiceNum, SupplierNum, PartNum, PurchaseOrderLine, PurchaseOrderSubLine, PurchaseInvoiceQty,UoM, UnitPrice, WarehouseCode,PurchaserName, 
	PurchaseInvoiceLine, PurchaseInvoiceType, PurchaseInvoiceDate, ActualDelivDate, TotalMiscChrg, VATAmount, CreditMemo, PurchaseOrderType,DiscountAmount,Currency,ExchangeRate,PurchaseChannel, LastPaymentNum --, PurchaseOrderType, [Site], OrderDelivLineNum, , DiscountPercent, PurchaserName, PurchaseInvoiceLine, PurchaseInvoiceType, PurchaseInvoiceDate, ActualDelivDate, TotalMiscChrg, CreditMemo
*/
GO
PRINT N'Creating [prestage].[CYE_ES_Customer_Load]'
GO
/****** Object:  StoredProcedure [prestage].[CYE_ES_Customer_Load]    Script Date: 2020-04-07 11:43:49 ******/

CREATE PROCEDURE [prestage].[CYE_ES_Customer_Load] AS
BEGIN

Truncate table stage.[CYE_ES_Customer]

INSERT INTO 
	stage.CYE_ES_Customer(PartitionKey, Company, CustomerNum, CustomerName, AddressLine1, AddressLine2, AddressLine3, TelephoneNumber1, Email, CustomerScore, City, ZIP, [State], CountryCode, CountryName, CustomerGroup, CustomerSubGroup, VATRegNr)
SELECT 
	PartitionKey, Company, CustomerNum, CustomerName, AddressLine1, AddressLine2, AddressLine3, TelephoneNumber1, Email, CustomerScore, City, ZIP, [State], CountryCode, CountryName, CustomerGroup, CustomerSubGroup, VATRegNr 
FROM 
	[prestage].[vCYE_ES_Customer]

--Truncate table prestage.[CYE_ES_Customer]

End
GO
PRINT N'Creating [stage].[AXL_NL_Customer]'
GO
CREATE TABLE [stage].[AXL_NL_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[MainCustomerName] [nvarchar] (100) NULL,
[CustomerName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[AddressLine] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (20) NULL,
[TelephoneNumber2] [nvarchar] (20) NULL,
[Email] [nvarchar] (100) NULL,
[City] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[Division] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (50) NULL,
[CustomerIndustry] [nvarchar] (50) NULL,
[CustomerSubIndustry] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNo] [nvarchar] (50) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[CustomerABC] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[SalesPersonResponsible] [nvarchar] (50) NULL,
[CustomerType] [nvarchar] (50) NULL,
[Res1] [nvarchar] (50) NULL,
[Res2] [nvarchar] (50) NULL,
[Res3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXL_NL_Customer]'
GO
CREATE VIEW [stage].[vAXL_NL_Customer] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustomerNum))) )) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,UPPER(CONCAT([Company], '#', TRIM([CustomerNum]))) AS CustomerCode
	,PartitionKey

	,UPPER(Company) AS Company
	,UPPER(TRIM(CustomerNum)) AS [CustomerNum]
	,TRIM(MainCustomerName) AS MainCustomerName
	,TRIM(CustomerName) AS  [CustomerName]
	,TRIM([AddressLine1]) AS [AddressLine1]
	,TRIM([AddressLine2]) AS [AddressLine2]
	,TRIM([AddressLine3]) AS [AddressLine3]
	,TRIM([TelephoneNumber1]) AS [TelephoneNum1]
	,TRIM([TelephoneNumber2]) AS [TelephoneNum2]
	,TRIM([Email]) AS [Email]
	,TRIM([ZipCode]) AS [ZipCode]
	,TRIM([City]) AS [City]
	,TRIM([State]) AS [State]
	,TRIM([District]) AS [SalesDistrict]
	,TRIM(con.CountryName) AS CountryName
	,TRIM([ISOAlpha2Code]) AS [CountryCode]
	,TRIM([Division]) AS [Division]
	,TRIM([CustomerIndustry]) AS [CustomerIndustry]
	,TRIM([CustomerSubIndustry]) AS [CustomerSubIndustry]
	,TRIM([AddressLine3]) AS [AddressLine]
	,CONCAT(TRIM(con.CountryName), + ',  ' + TRIM([City]), + ',  ' + TRIM([ZipCode]), + ',  ' + TRIM(addressline3)) AS [FullAddressLine]
	,TRIM(CustomerGroup) AS [CustomerGroup]
	,TRIM(CustomerGroup) AS [CustomerSubGroup]
	,TRIM([SalesRepCode]) AS [SalesPersonCode]
	,TRIM(SalesPersonName) AS [SalesPersonName]
	,TRIM([SalesPersonResponsible]) AS [SalesPersonResponsible]
	,TRIM([VATRegNo]) AS [VATNum]
	,TRIM([AccountString]) AS [AccountNum]
	,TRIM([InternalExternal]) AS [InternalExternal]
	,TRIM([CustomerABC]) AS [CustomerScore]
	,TRIM([CustomerType]) AS [CustomerType]
FROM [stage].[AXL_NL_Customer] com
	LEFT JOIN dbo.Country con ON com.CountryName = con.[ISOAlpha2Code]

--GROUP BY
--	PartitionKey, Company, CustomerNum, CustomerName, MainCustomerName, [AddressLine1], [AddressLine2], [AddressLine3], [TelephoneNumber1], [TelephoneNumber2], [Email], [ZipCode], [City], [State], [District], [CountryName], [Division], [CustomerIndustry], [CustomerSubIndustry], CustomerGroup, [SalesRepCode], SalesPersonName, [SalesPersonResponsible], [VATRegNo], [AccountString], [InternalExternal], [CustomerABC], [CustomerType]
GO
PRINT N'Creating [stage].[FOR_SE_Budget]'
GO
CREATE TABLE [stage].[FOR_SE_Budget]
(
[Company] [nvarchar] (50) NULL,
[AccountNum] [nvarchar] (50) NULL,
[AccountGroup] [nvarchar] (50) NULL,
[CostUnitNum] [nvarchar] (50) NULL,
[CostBearerNum] [nvarchar] (50) NULL,
[Year] [nvarchar] (50) NULL,
[PeriodType] [nvarchar] (50) NULL,
[BudgetFinance] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [nvarchar] (50) NULL,
[BudgetType] [nvarchar] (50) NULL,
[BudgetName] [nvarchar] (50) NULL,
[BudgetDescription] [nvarchar] (50) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL,
[IsRecordActive] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vFOR_SE_FinanceBudget]'
GO








CREATE VIEW [stage].[vFOR_SE_FinanceBudget] AS 

select
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(b.Company),'#', TRIM(b.[AccountNum]), '#', TRIM(b.AccountGroup), '#', TRIM(CostUnitNum), '#', TRIM([YEAR]))))) AS BudgetID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(b.[Company])))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(b.Company), '#', TRIM(b.AccountNum))))) AS AccountID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(b.[Company]), '#', TRIM(CostUnitNum))))) AS CostUnitID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(b.[Company]), '#', TRIM(CostBearerNum))))) AS CostBearerID
	,'2023-02-13' AS PartitionKey
	,UPPER(b.Company) AS Company
	,CASE WHEN a.AccountType = 'R' AND a.Revenue = '1' THEN ABS(CAST(REPLACE(BudgetFinance, ',', '.') AS decimal(18,2)))
			WHEN a.AccountType = 'R' AND COALESCE(a.Revenue,'0') <> '1' THEN ABS(CAST(REPLACE(BudgetFinance, ',', '.') AS decimal(18,2)))*-1 
			ELSE CAST(REPLACE(BudgetFinance, ',', '.') AS decimal(18,2))	END	AS BudgetFinance	--CAST(REPLACE(BudgetFinance, ',', '.')*-1 AS decimal(18,2)) AS BudgetFinance
	,[PeriodType]
	,[Currency]
	,[Year] as [BudgetPeriod] 
--	,CAST(CONCAT(LEFT([Year], 4), '-', RIGHT([Year],2), '-01') AS DATE) AS BudgetPeriodDate
	,BudgetType
	,[BudgetName]
	,[BudgetDescription]
	,[CostBearerNum]
	,[CostUnitNum]
	,b.[AccountNum]
	,b.[AccountGroup]
	,[CreatedTimeStamp] AS BRes1
	,[ModifiedTimeStamp] AS BRes2
	,ModifiedTimeStamp AS BRes3
from stage.FOR_SE_Budget b
  LEFT JOIN stage.vFOR_SE_Account a ON a.AccountNum = b.AccountNum  -- copied from AXISE script, added 2023-01-31 by SB
  where upper(b.Company) = 'FSEFORA' and [Year] = '2023'
GO
PRINT N'Creating [stage].[NOM_FI_OLine]'
GO
CREATE TABLE [stage].[NOM_FI_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[SalesOrderType] [nvarchar] (50) NULL,
[OrderRelNum] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[ExpDelivDate] [date] NULL,
[DelivDate] [date] NULL,
[NeedByDate] [date] NULL,
[FirstConfirnedDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (38, 8) NULL,
[DelivQty] [decimal] (38, 8) NULL,
[RemainingQty] [decimal] (38, 8) NULL,
[UnitPrice] [numeric] (28, 8) NULL,
[UnitCost] [numeric] (28, 8) NULL,
[SumUnitCost] [numeric] (38, 6) NULL,
[SumUnitPrice] [numeric] (38, 6) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (28, 8) NULL,
[OpenRelease] [nvarchar] (1) NULL,
[DiscountPercent] [decimal] (38, 6) NULL,
[DiscountAmount] [decimal] (38, 6) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [int] NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[SalesOrderChannel] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (100) NULL,
[SalesReturnOrderNum] [nvarchar] (50) NULL,
[SalesReturnInvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[ItemClass] [nvarchar] (50) NULL,
[UpdateStock] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vNOM_FI_OLine]'
GO

CREATE VIEW [stage].[vNOM_FI_OLine] AS
--Using a CTE with ROW_NUMBER() to protect against duplicates that occasionally arises from NomoFIs system. 
--In select statement, I put WHERE  RowNum = 1 to only get one row of each order line /SM 2021-09-15
WITH CTE AS 
(
SELECT
		CONVERT([binary](32),HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company),'#', TRIM(OrderNum),'#', TRIM(OrderLine) /*,'#', TRIM(OrderRelNum),'#', UnitPrice,'#', DiscountAmount */)))) AS SalesOrderID 
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID 
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(OrderNum))))) AS SalesOrderNumID  
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(OrderNum),'#',TRIM(OrderLine))) AS SalesOrderCode 
	,CONVERT(int, replace(convert(date, OrderDate),'-','')) AS SalesOrderDateID --Redundant?  
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey 

	,UPPER(TRIM(Company)) AS Company
	,UPPER(TRIM(CustNum)) AS CustomerNum 
	,UPPER(TRIM(OrderNum)) AS SalesOrderNum
	,UPPER(TRIM(OrderLine)) AS SalesOrderLine
	,OrderSubLine AS SalesOrderSubLine
	,IIF(SalesOrderType = '10 - Internal Order', 'Internal Order', SalesOrderType) AS SalesOrderType -- added 2022-08-26 LL/DZ
	,'' AS SalesOrderCategory
	,OrderDate AS SalesOrderDate
	,NeedbyDate
	,ExpDelivDate
	,ActualDelivDate
	,FirstConfirnedDate AS ConfirmedDelivDate
	,UPPER(TRIM(InvoiceNum)) AS SalesInvoiceNum
	,CASE WHEN OpenRelease = 'I' THEN IIF(SalesOrderType = '8 - Credit Order', -1*DelivQty, DelivQty)
		WHEN SalesOrderType = '8 - Credit Order' THEN -1*abs(OrderQty) ELSE OrderQty END  AS SalesOrderQty --Tobias Teams 20221010 /DZ
	,IIF(SalesOrderType = '8 - Credit Order', -1*DelivQty, DelivQty) AS DelivQty
	,RemainingQty
	,NULL AS SalesInvoiceQty
	,'' AS UoM
	,UnitPrice
	,UnitCost
	,Currency  --CASE WHEN (Company = 'NomoSE' and CurrExChRate = 1) THEN 'SEK'  WHEN (Company = 'NomoDK' and CurrExChRate = 1) THEN 'DKK'  WHEN (Company = 'NomoFI' and CurrExChRate = 1) THEN 'EUR' ELSE CURRENCY END AS 
	, ExchangeRate
	,CASE WHEN OpenRelease = 'I' THEN '0' ELSE '1' END AS OpenRelease
	,IIF(SalesOrderType = '8 - Credit Order', -1*abs(DiscountAmount), abs(DiscountAmount)) AS DiscountAmount
	,DiscountPercent
	,PartNum
	,ItemClass AS PartType
	,PartStatus
	,SalesPersonName
	,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
	,SalesOrderChannel AS SalesChannel
	,SalesOrderChannel AS AxInterSalesChannel
	,UpdateStock AS IsUpdatingStock
	,'' AS Department
	,'' AS ProjectNum
	,'' AS IndexKey
	,ReturnComment
	,UPPER(TRIM(SalesReturnOrderNum)) AS SalesReturnOrderNum
	,UPPER(TRIM(SalesReturnInvoiceNum)) AS SalesReturnInvoiceNum
	,'0' AS Cancellation
	,'' AS SORes1
	,'' AS SORes2
	,'' AS SORes3
	,ROW_NUMBER() OVER (PARTITION BY Company,OrderNum,OrderLine ORDER BY UnitPrice) AS RowNum
	,NULL AS [TotalMiscChrg]
FROM stage.NOM_FI_OLine
GROUP BY
	PartitionKey, Company, CustNum, OrderNum, OrderLine, OrderSubLine, SalesOrderType, OrderRelNum, InvoiceNum, OrderQty, DelivQty, RemainingQty, UnitPrice, UnitCost, Currency, ExchangeRate, OpenRelease, DiscountAmount, DiscountPercent, PartNum, PartStatus, SalesPersonName, ReturnComment, SalesReturnOrderNum, SalesReturnInvoiceNum, WarehouseCode, OrderDate, NeedbyDate, DelivDate, SalesOrderChannel, ItemClass,ExpDelivDate,ActualDelivDate, FirstConfirnedDate, UpdateStock
)

SELECT [SalesOrderID], [CompanyID], [CustomerID], [PartID], [WarehouseID], [SalesOrderNumID], [SalesOrderCode], [SalesOrderDateID], [ProjectID], [PartitionKey], [Company], [CustomerNum], [SalesOrderNum], [SalesOrderLine], [SalesOrderSubLine], [SalesOrderType], [SalesOrderCategory], [SalesOrderDate], [NeedbyDate], [ExpDelivDate], [ActualDelivDate], [ConfirmedDelivDate], [SalesInvoiceNum], [SalesOrderQty], [DelivQty], [RemainingQty], [SalesInvoiceQty], [UoM], [UnitPrice], [UnitCost], [Currency], [ExchangeRate], [OpenRelease], [DiscountAmount], [DiscountPercent], [PartNum], [PartType], [PartStatus], [SalesPersonName], [WarehouseCode], [SalesChannel], [AxInterSalesChannel], [IsUpdatingStock], [Department], [ProjectNum], [IndexKey], [ReturnComment], [SalesReturnOrderNum], [SalesReturnInvoiceNum], [Cancellation], [SORes1], [SORes2], [SORes3], [RowNum], [TotalMiscChrg]
FROM CTE
WHERE RowNum = 1
GO
PRINT N'Creating [dm_FH].[dimWarehouse]'
GO
CREATE VIEW [dm_FH].[dimWarehouse] AS

SELECT 
 whs.[WareHouseID]
,whs.[CompanyID]
,whs.[Company]
,whs.[WarehouseCode]
,whs.[WarehouseName]
,whs.[WarehouseDistrict]
,whs.[WarehouseAddress]
,whs.[WarehouseDescription]
,whs.[WarehouseType]
,whs.[WarehouseCountry]
,whs.[WarehouseSite]
FROM [dm].[DimWareHouse] whs
LEFT JOIN dbo.Company com ON whs.Company = com.Company
WHERE com.BusinessArea = 'Fluid Handling Solutions' AND com.[Status] = 'Active'
GO
PRINT N'Creating [stage].[SPR_NL_ZipCode]'
GO
CREATE TABLE [stage].[SPR_NL_ZipCode]
(
[Postcode] [varchar] (50) NULL,
[DorpPlaats] [varchar] (50) NULL,
[Gemeente] [varchar] (50) NULL,
[Provincie] [varchar] (50) NULL
)
GO
PRINT N'Creating [stage].[SPR_NL_Customer]'
GO
CREATE TABLE [stage].[SPR_NL_Customer]
(
[PartitionKey] [nvarchar] (50) NULL,
[Company] [nvarchar] (8) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[MainCustomerName] [nvarchar] (max) NULL,
[CustomerName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (max) NULL,
[AddressLine2] [nvarchar] (max) NULL,
[AddressLine3] [nvarchar] (max) NULL,
[TelephoneNum1] [nvarchar] (50) NULL,
[TelephoneNum2] [nvarchar] (50) NULL,
[Email] [nvarchar] (100) NULL,
[Email2] [nvarchar] (100) NULL,
[ZipCode] [nvarchar] (50) NULL,
[City] [nvarchar] (100) NULL,
[State] [nvarchar] (max) NULL,
[SalesDistrict] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[Division] [nvarchar] (max) NULL,
[CustomerIndustry] [nvarchar] (50) NULL,
[CustomerSubIndustry] [nvarchar] (max) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (max) NULL,
[SalesPersonCode] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[SalesPersonResponsible] [nvarchar] (50) NULL,
[VATNum] [nvarchar] (50) NULL,
[AccountNum] [nvarchar] (max) NULL,
[InternalExternal] [nvarchar] (max) NULL,
[CustomerScore] [nvarchar] (50) NULL,
[CustomerType] [nvarchar] (50) NULL,
[CRes1] [nvarchar] (max) NULL,
[CRes2] [nvarchar] (max) NULL,
[CRes3] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[vSPR_NL_Customer]'
GO


CREATE VIEW  [stage].[vSPR_NL_Customer] AS
--ADD TRIM() UPPER() INTO CustomerID 23-01-09 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(CustomerNum))))) AS CustomerID
	--	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustomerNum)))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', [Company])) AS CompanyID
	,CONCAT([Company], '#', TRIM([CustomerNum])) AS CustomerCode
	,PartitionKey

	,[Company]
	,TRIM(CustomerNum) AS [CustomerNum]
	,(TRIM([MainCustomerName])) AS [MainCustomerName] --MAX
	,TRIM(CustomerName) AS [CustomerName] --()
	,TRIM([AddressLine1]) AS [AddressLine1] --()
	,TRIM([AddressLine2]) AS [AddressLine2]
	,TRIM([AddressLine3]) AS [AddressLine3]
	,(TRIM([TelephoneNum1])) AS [TelephoneNum1]
	,TRIM([TelephoneNum2]) AS [TelephoneNum2]
	,(TRIM([Email])) AS [Email]
	,(TRIM([ZipCode])) AS [ZipCode] --MAX
	,TRIM([City]) AS [City] --(SUBSTRING(TRIM(REPLACE([City], ' ', '')), 0, CHARINDEX('-', TRIM(REPLACE([City], ' ', '')))))
	,IIF(TRIM([CountryName]) = 'NL', TRIM(z.[Gemeente]), '') AS [State]
	,IIF(TRIM([CountryName]) = 'NL', TRIM(z.[Provincie]), '') AS [SalesDistrict]
	,(TRIM([CountryName])) AS [CountryName]
	,TRIM([Division]) AS [Division]
	,TRIM([CustomerIndustry]) AS [CustomerIndustry]
	,TRIM([CustomerSubIndustry]) AS [CustomerSubIndustry]
	,TRIM([CustomerGroup]) AS [CustomerGroup]
	,TRIM([CustomerSubGroup]) AS [CustomerSubGroup]
	,(TRIM([SalesPersonCode])) AS [SalesPersonCode] --MAX
	,(TRIM([SalesPersonName])) AS [SalesPersonName] --MAX
	,TRIM([SalesPersonResponsible]) AS [SalesPersonResponsible]
	,TRIM([VATNum]) AS [VATNum] --MAX
	--,'' AS OrganizationNum
	,TRIM(AccountNum) AS [AccountNum] --MAX
	,TRIM([InternalExternal]) AS [InternalExternal]
	,TRIM([CustomerScore]) AS [CustomerScore]
	,TRIM([CustomerType]) AS [CustomerType]
	,(TRIM([AddressLine2])) AS [AddressLine] --MAX
	,CONCAT((TRIM(Countryname)), + ', ' + TRIM([City]), + ', ' + (TRIM([ZipCode])), + ', ' + (TRIM(addressline2))) AS [FullAddressLine]
	,case when UPPER(TRIM(CountryName)) = 'SEVILLA' THEN 'ES'
	ELSE CountryName
	END as CountryCode
FROM [stage].[SPR_NL_Customer] c
	LEFT JOIN SPR_NL_ZipCode z ON z.PostCode = LEFT(c.ZipCode, 4)

--GROUP BY PartitionKey, Company, CustomerNum, [MainCustomerName], CustomerName, [AddressLine2], [AddressLine3], [TelephoneNum2], [City], [State], [SalesDistrict], [CountryName], [Division], [CustomerIndustry], [CustomerSubIndustry], [CustomerGroup], [CustomerSubGroup], [SalesPersonResponsible], [InternalExternal], [CustomerScore], [CustomerType], [SalesPersonName], [VATNum], [SalesPersonCode], [AddressLine1], [ZipCode], AccountNum --, [Email], [TelephoneNum1]
GO
PRINT N'Creating [stage].[AXL_NL_SOLine]'
GO
CREATE TABLE [stage].[AXL_NL_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[InvoiceType] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (22, 8) NULL,
[UnitCost] [decimal] (22, 8) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[VAT] [decimal] (18, 4) NULL,
[CashDiscountOffered] [decimal] (18, 4) NULL,
[CashDiscountUsed] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OrderType] [nvarchar] (50) NULL,
[SalesChannel] [varchar] (10) NULL,
[BusinessChain] [varchar] (10) NULL,
[Res1] [varchar] (100) NULL,
[Res2] [varchar] (100) NULL,
[Res3] [varchar] (100) NULL,
[PartDesc] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[vAXL_NL_SOLine]'
GO

CREATE VIEW [stage].[vAXL_NL_SOLine] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustNum), '#', (OrderNum), '#', (OrderLine), '#', (InvoiceNum), '#', (PartNum), '#', UPPER(PartDesc)))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', OrderNum, '#', OrderLine, '#', OrderSubLine))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustNum), '#', InvoiceNum))) AS SalesLedgerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', (OrderNum)))) AS SalesOrderNumID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustNum)))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', PartNum, '#', UPPER(PartDesc)))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', WarehouseCode))) AS WarehouseID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([WarehouseCode]))))) AS WarehouseID  
	,CONCAT(Company, '#', OrderNum, '#', OrderLine, '#', OrderSubLine) AS SalesOrderCode
	,CONCAT(Company, '#', (InvoiceNum), '#', (InvoiceLine)) AS SalesInvoiceCode
	,CONVERT(int, replace(convert(date,InvoiceDate),'-','')) AS SalesInvoiceDateID
	,PartitionKey

	,Company
	,TRIM(SalesPerson) AS SalesPersonName
	,TRIM(CustNum) AS [CustomerNum]
	,(PartNum) AS PartNum
	,UPPER(PartDesc) AS PartDesc
	,'' AS [PartType]
	,(OrderNum) AS [SalesOrderNum]
	,CAST(OrderLine AS text) AS [SalesOrderLine]
	,OrderSubLine AS [SalesOrderSubLine]
	,OrderType AS [SalesOrderType]
	--,CASE WHEN OrderType = 'MD' THEN 1 
	--		WHEN OrderType = 'MT' THEN 2
	--		WHEN OrderType = 'MR' THEN 3
	--		WHEN OrderType = 'IV' THEN 4
	--		WHEN OrderType = 'Misc. Charges' THEN 5 --added after Ulf changes in the night /DZ
	--	ELSE OrderType END AS [SalesOrderType]
	,InvoiceNum AS [SalesInvoiceNum]
	,InvoiceLine AS [SalesInvoiceLine]
	,InvoiceType AS [SalesInvoiceType]
	,CASE WHEN InvoiceDate = '' THEN '1900-01-01' ELSE CONVERT(date, InvoiceDate) END AS [SalesInvoiceDate]
	,ActualDeliveryDate AS [ActualDelivDate]
	,SellingShipQty AS [SalesInvoiceQty]
	,Unit AS [UoM]
	,UnitPrice
	,UnitCost
	,DiscountAmount
	,IIF(UnitPrice*SellingShipQty = 0, 0, DiscountAmount/UnitPrice*SellingShipQty) AS DiscountPercent
	,CONVERT(decimal(18,4), CashDiscountOffered) AS [CashDiscOffered] 
	,CONVERT(decimal(18,4), CashDiscountUsed) AS [CashDiscUsed] 
	,TotalMiscChrg
	,VAT AS [VATAmount]
	,Currency
	,ExchangeRate
	,CreditMemo
	,[SalesChannel]
	,[BusinessChain] AS [Department]
	,WarehouseCode
	,NULL AS [CostBearerNum]
	,NULL AS [CostUnitNum]
	,NULL AS [ReturnComment]
	,NULL AS [ReturnNum]
	,NULL AS [ProjectNum]
	,'' AS [IndexKey]
	,Res1 AS SIRes1
	,Res2 AS SIRes2
	,Res3 AS SIRes3

FROM stage.AXL_nl_SOLine AS SO

GROUP BY
	PartitionKey, Company, SalesPerson, CustNum, PartNum, PartDesc, OrderNum, OrderLine, OrderSubLine,OrderType, InvoiceNum, InvoiceLine, InvoiceDate, SellingShipQty, UnitPrice, UnitCost, DiscountAmount, TotalMiscChrg, WarehouseCode, CreditMemo, ActualDeliveryDate, Currency, ExchangeRate, InvoiceType, Res1, Res2, Res3, Unit, VAT, SalesChannel, BusinessChain, CashDiscountOffered, CashDiscountUsed
GO
PRINT N'Creating [prestage].[TRA_FR_SOline_Load]'
GO
CREATE PROCEDURE [prestage].[TRA_FR_SOline_Load] AS
BEGIN

Truncate table stage.[TRA_FR_SOline]

INSERT INTO 
	stage.TRA_FR_SOline 
	(PartitionKey, Company, PartNum, [SalesPersonName], [CustomerNum], [PartType], [SalesOrderNum], [SalesOrderLine], [SalesOrderSubLine], [SalesOrderType], [SalesInvoiceNum], [SalesInvoiceLine], [SalesInvoiceType], [SalesInvoiceDate], [ActualDelivDate], [SalesInvoiceQty], [UoM], [UnitPrice], [UnitCost], [DiscountPercent], [DiscountAmount], [TotalMiscChrg],[CashDiscountOffered], [CashDiscountUsed], [VATAmount], [Currency], [ExchangeRate], [CreditMemo], [SalesChannel], [Department], [WarehouseCode], [CostBearerNum], [CostUnitNum], [ReturnComment], [ReturnNum], [ProjectNum], [IndexKey], [SIRes1], [SIRes2], [SIRes3])
SELECT 
	PartitionKey, Company, PartNum, [SalesPersonName], [CustomerNum], [PartType], [SalesOrderNum], [SalesOrderLine], [SalesOrderSubLine], [SalesOrderType], [SalesInvoiceNum], [SalesInvoiceLine], [SalesInvoiceType], [SalesInvoiceDate], [ActualDelivDate], [SalesInvoiceQty], [UoM], [UnitPrice], [UnitCost], [DiscountPercent], [DiscountAmount], [TotalMiscChrg],[CashDiscountOffered], [CashDiscountUsed], [VATAmount], [Currency], [ExchangeRate], [CreditMemo], [SalesChannel], [Department], [WarehouseCode], [CostBearerNum], [CostUnitNum], [ReturnComment], [ReturnNum], [ProjectNum], [IndexKey], [SIRes1], [SIRes2], [SIRes3]
FROM 
	[prestage].[vTRA_FR_SOline]

--Truncate table prestage.[TRA_FR_SOline]

End
GO
PRINT N'Creating [stage].[ATZ_UK_Warehouse]'
GO
CREATE TABLE [stage].[ATZ_UK_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseID] [nvarchar] (50) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL,
[WarehouseDistrict] [nvarchar] (50) NULL,
[WarehouseAddress] [nvarchar] (100) NULL,
[WarehouseDescription] [nvarchar] (100) NULL,
[WarehouseType] [nvarchar] (50) NULL,
[WarehouseCountry] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vATZ_UK_Warehouse]'
GO

CREATE VIEW [stage].[vATZ_UK_Warehouse] AS
--COMMENT EMPTY FIELDS 2022-12-27 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([WarehouseCode])) AS [WarehouseCode]
	,[WarehouseName]
	,[WarehouseDistrict]
	,[WarehouseAddress]
	,[WarehouseDescription]
	,[WarehouseType]
	,[WarehouseCountry]
	--,'' AS [WarehouseSite]
FROM [stage].[ATZ_UK_Warehouse]

GROUP BY 
	PartitionKey,[Company],[WarehouseCode],[WarehouseName],[WarehouseDistrict],[WarehouseAddress],[WarehouseDescription],[WarehouseType],[WarehouseCountry]
GO
PRINT N'Creating [stage].[vAXI_HQ_FinanceBudget]'
GO







/****** Script for SelectTopNRows command from SSMS  ******/
CREATE VIEW [stage].[vAXI_HQ_FinanceBudget] AS
SELECT  
		CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(b.Company,'#',FiscalPeriod,'#', b.AccountNum,'#',CostUnitNum ))) AS BudgetID
		,CONVERT(binary(32), HASHBYTES('SHA2_256',b.Company)) AS CompanyID
		,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(b.Company, '#', b.[AccountNum]))) AS AccountID
		,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(b.Company,'#', IIF(CostUnitNum='000---',N'000000',RIGHT(N'000000' + CostUnitNum,6)))) ) AS CostUnitID
		,CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(b.Company,'#', CostBearerNum)) ) AS CostBearerID
	  ,CONVERT(varchar, GETDATE(), 23) AS PartitionKey

      ,[BudgetType]
      ,[BudgetName]
      ,[BudgetDescription]
      ,b.[Company]
      ,[FiscalPeriod]	AS BudgetPeriod
      ,[FiscalPeriodDate]	AS BudgetPeriodDate
      ,[PeriodType]
	  ,'SEK'	AS Currency
      ,CASE WHEN a.AccountType = 'R' AND a.Revenue = '1' THEN ABS([Budget])
			WHEN a.AccountType = 'R' AND COALESCE(a.Revenue,'0') <> '1' THEN ABS([Budget])*-1 
			ELSE Budget	END	AS BudgetFinance	
      ,[CostBearerNum]
      ,RIGHT('000000' + CostUnitNum,6)	AS [CostUnitNum]
      ,b.[AccountNum]
      ,b.[AccountGroupNum]	AS AccountGroup
	  ,'' AS BRes1
	  ,'' AS BRes2
	  ,'' AS BRes3
  FROM [stage].[AXI_HQ_Budget] b
  LEFT JOIN stage.vAXI_HQ_Account_excel a ON a.AccountNum = b.AccountNum 
  where upper(b.Company) = 'AXISE'
/*  GROUP BY b.[PartitionKey]
      ,[BudgetType],[BudgetName],[BudgetDescription],[Company],[FiscalPeriod],[FiscalPeriodDate],[PeriodType],[CostBearerNum],[CostUnitNum],b.[AccountNum],b.[AccountGroupNum]
	  */
GO
PRINT N'Creating [stage].[AXL_DN_SOLine]'
GO
CREATE TABLE [stage].[AXL_DN_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[InvoiceType] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (22, 8) NULL,
[UnitCost] [decimal] (22, 8) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[VAT] [decimal] (18, 4) NULL,
[CashDiscountOffered] [decimal] (18, 4) NULL,
[CashDiscountUsed] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OrderType] [nvarchar] (50) NULL,
[SalesChannel] [varchar] (10) NULL,
[BusinessChain] [varchar] (10) NULL,
[Res1] [varchar] (100) NULL,
[Res2] [varchar] (100) NULL,
[Res3] [varchar] (100) NULL,
[PartDesc] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[vAXL_DN_SOLine]'
GO
CREATE VIEW [stage].[vAXL_DN_SOLine] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine), '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(PartNum), '#', TRIM(PartDesc))))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(PartDesc))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(InvoiceNum))))) AS SalesLedgerID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum), '#', (IIF(TRIM([PartNum]) LIKE 'IACO%' , 'MISC. CHARGES', TRIM([PartDesc]))))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT(int, IIF(InvoiceDate = '', 19900101, replace(convert(date, InvoiceDate), '-', ''))) AS SalesInvoiceDateID
	,UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine))) AS SalesInvoiceCode
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine))) AS SalesOrderCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(SalesPerson) AS SalesPersonName
	,TRIM(CustNum) AS [CustomerNum]
	,TRIM(PartNum) AS PartNum
	,UPPER(PartDesc) AS PartDesc
	,'' AS [PartType]
	,TRIM(OrderNum) AS [SalesOrderNum]
	,CAST(OrderLine AS text) AS [SalesOrderLine]
	,TRIM(OrderSubLine) AS [SalesOrderSubLine]
	,TRIM(OrderType) AS [SalesOrderType]
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,TRIM(InvoiceLine) AS [SalesInvoiceLine]
	,TRIM(InvoiceType) AS [SalesInvoiceType]
	,CASE WHEN InvoiceDate = '' THEN '1900-01-01' ELSE CONVERT(date, InvoiceDate) END AS [SalesInvoiceDate]
	,ActualDeliveryDate AS [ActualDelivDate]
	,SellingShipQty AS [SalesInvoiceQty]
	,TRIM(Unit) AS [UoM]
	,UnitPrice
	,UnitCost
	,DiscountAmount
	,IIF(UnitPrice*SellingShipQty = 0, 0, DiscountAmount/UnitPrice*SellingShipQty) AS DiscountPercent
	,CONVERT(decimal(18,4), CashDiscountOffered) AS [CashDiscOffered] 
	,CONVERT(decimal(18,4), CashDiscountUsed) AS [CashDiscUsed] 
	,TotalMiscChrg
	,VAT AS [VATAmount]
	,Currency
	,ExchangeRate
	,TRIM(CreditMemo) AS CreditMemo
	,TRIM([SalesChannel]) AS [SalesChannel]
	,TRIM([BusinessChain]) AS [Department]
	,TRIM(WarehouseCode) AS WarehouseCode
	,NULL AS [CostBearerNum]
	,NULL AS [CostUnitNum]
	,NULL AS [ReturnComment]
	,NULL AS [ReturnNum]
	,NULL AS [ProjectNum]
	,'' AS [IndexKey]
	,Res1 AS SIRes1
	,Res2 AS SIRes2
	,Res3 AS SIRes3
FROM stage.AXL_DN_SOLine


	--,CASE WHEN OrderType = 'MD' THEN 1 
	--		WHEN OrderType = 'MT' THEN 2
	--		WHEN OrderType = 'MR' THEN 3
	--		WHEN OrderType = 'IV' THEN 4
	--		WHEN OrderType = 'Misc. Charges' THEN 5 --added after Ulf changes in the night /DZ
	--	ELSE OrderType END AS [SalesOrderType]

--GROUP BY
--	PartitionKey, Company, SalesPerson, CustNum, PartNum, PartDesc, OrderNum, OrderLine, OrderSubLine,OrderType, InvoiceNum, InvoiceLine, InvoiceDate, SellingShipQty, UnitPrice, UnitCost, DiscountAmount, TotalMiscChrg, WarehouseCode, CreditMemo, ActualDeliveryDate, Currency, ExchangeRate, InvoiceType, Res1, Res2, Res3, Unit, VAT, SalesChannel, BusinessChain, CashDiscountOffered, CashDiscountUsed
GO
PRINT N'Creating [dm_FH].[dimFinanceAccount]'
GO

CREATE VIEW [dm_FH].[dimFinanceAccount] AS 

SELECT  fa.[AccountID]
,fa.[AccountCode]
,fa.[CompanyID]
,fa.[PartitionKey]
,fa.[Company]
,fa.[AccountNum]
,fa.[AccountName]
,fa.[AccountName2]
,fa.[Account]
,fa.[AccountStatus]
,fa.[BalanceAccount]
,fa.[TransactionAccount]
,fa.[Assets]
,fa.[Amortization]
,fa.[Costs]
,fa.[LiabilitiesAndEquity]
,fa.[Revenue]
,fa.[CurrentAssets]
,fa.[CurrentLiabilities]
,fa.[Deprecation]
,fa.[Equity]
,fa.[Liability]
,fa.[Interest]
,fa.[Tax]
,fa.[Materials]
,fa.[Expenses]
,fa.[AccountReceivables]
,fa.[CashAndEquivalents]
,fa.[AccountType]
,fa.[AccountType2]
,fa.[AccountType3]
,fa.[AccountType4]
,fa.[AccountType5]
,fa.[AccountType6]
,fa.[AccountType7]
,fa.[AccountType8]
,fa.[AccountType9]
,fa.[AccountType10]
,fa.[AccountGroupNum]
,fa.[AccountGroupName]
,fa.[AccountGroupOrder]
,fa.[AccountGroup]
,fa.[AccountGroup2]
,fa.[AccountGroup3]
,fa.[Statement]
,fa.[StatementNum]
FROM [dm].[DimFinanceAccount] fa
LEFT JOIN dbo.Company com ON fa.Company = com.Company
WHERE com.BusinessArea = 'Fluid Handling Solutions' AND com.[Status] = 'Active'
GO
PRINT N'Creating [stage].[OCS_SE_CostUnit]'
GO
CREATE TABLE [stage].[OCS_SE_CostUnit]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[MainCostUnitNum] [nvarchar] (50) NULL,
[CostUnitNum] [nvarchar] (50) NULL,
[CostUnitName] [nvarchar] (100) NULL,
[CURes] [nvarchar] (50) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vOCS_SE_CostUnit]'
GO



CREATE VIEW [stage].[vOCS_SE_CostUnit] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([CostUnitNum]))))) AS CostUnitID,
	CONCAT(Company, '#', TRIM([CostUnitNum])) AS CostUnitCode,
	(CONVERT([binary](32), HASHBYTES('SHA2_256', Company))) AS CompanyID,
	PartitionKey,

	Company,
	[CostUnitNum],
	[CostUnitName],
	[MainCostUnitNum] AS CostUnitGroup,
	CURes AS [CostUnitGroup2],
	CreatedTimeStamp AS CURes1,
	ModifiedTimeStamp AS CURes2,
	'' AS CURes3

FROM 
	stage.OCS_SE_CostUnit
--GROUP BY
--	PartitionKey, Company, [CostUnitNum],[CostUnitName],[CostUnitStatus],[CostUnitGroup],[CostUnitGroup2],[CostUnitGroup3]
GO
PRINT N'Creating [stage].[JEN_SK_Budget]'
GO
CREATE TABLE [stage].[JEN_SK_Budget]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (8) NULL,
[AccountNum] [nvarchar] (25) NULL,
[BudgetPeriod] [nvarchar] (25) NULL,
[BudgetPeriodDate] [nvarchar] (25) NULL,
[PeriodType] [nvarchar] (25) NULL,
[CustomerNum] [nvarchar] (80) NULL,
[ProjectNum] [nvarchar] (25) NULL,
[CustomerGroup] [nvarchar] (25) NULL,
[ProductGroup] [nvarchar] (25) NULL,
[SalesPersonCode] [nvarchar] (25) NULL,
[SalesPersonName] [nvarchar] (25) NULL,
[BudgetDescription] [nvarchar] (25) NULL,
[Currency] [nvarchar] (25) NULL,
[BudgetSales] [nvarchar] (25) NULL,
[BudgetCost] [nvarchar] (25) NULL,
[BudgetGrossProfit] [nvarchar] (25) NULL,
[BudgetGrossMargin] [nvarchar] (25) NULL,
[BRes1] [nvarchar] (25) NULL,
[BRes2] [nvarchar] (25) NULL,
[BRes3] [nvarchar] (25) NULL
)
GO
PRINT N'Creating [stage].[vJEN_SK_Budget]'
GO


CREATE view [stage].[vJEN_SK_Budget] as
select 
 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#', cast(BudgetPeriod as date),TRIM(CustomerNum))))) AS BudgetID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(trim(Company)))) AS CompanyID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',null)))) AS ProjectID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',null)))) AS WarehouseID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',null)))) AS PartID,
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM(CustomerNum))))) AS CustomerID,
	YEAR(cast(BudgetPeriod as date))*10000 + MONTH(cast(BudgetPeriod as date))*100 + DAY(cast(BudgetPeriod as date))	AS BudgetPeriodDateID,
	PartitionKey,
	Company,
	cast(BudgetPeriod as date) AS BudgetPeriodDate,
	PeriodType,
	try_cast(replace(BudgetSales               ,',','.') as numeric(18,5)) as BudgetSales ,
	try_cast(replace(BudgetCost                ,',','.') as numeric(18,5)) as BudgetCost 
from stage.JEN_SK_Budget
;
GO
PRINT N'Creating [prestage].[CYE_ES_SOLine]'
GO
CREATE TABLE [prestage].[CYE_ES_SOLine]
(
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [nvarchar] (50) NULL,
[ActualDeliveryDate] [nvarchar] (50) NULL,
[SalesPerson] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderRel] [nvarchar] (max) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[InvoiceType] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[SellingShipQty] [nvarchar] (50) NULL,
[UnitPrice] [nvarchar] (50) NULL,
[UnitCost] [nvarchar] (50) NULL,
[UnitCostEK02] [nvarchar] (50) NULL,
[DiscountPercent] [nvarchar] (50) NULL,
[DiscountAmount] [nvarchar] (50) NULL,
[TotalMiscChrg] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Indexkey] [nvarchar] (50) NULL,
[SalesOfficeDescrip] [nvarchar] (50) NULL,
[SalesGroupCode] [nvarchar] (50) NULL,
[SalesGroupDescrip] [nvarchar] (50) NULL,
[ReturnNum] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [prestage].[vCYE_ES_SOLine]'
GO

CREATE view [prestage].[vCYE_ES_SOLine] AS

SELECT 
	  concat(CONVERT (date, SYSDATETIME()), ' 00:00:00') AS [PartitionKey]
	  ,'CYESA' AS [Company]
	  ,CONVERT(date, IIF(InvoiceDate = '0000-00-00' or InvoiceDate = '', '1900-01-01', InvoiceDate)) AS InvoiceDate
	  ,CONVERT(date, IIF([ActualDeliveryDate] = '0000-00-00' or [ActualDeliveryDate] = '', '1900-01-01', [ActualDeliveryDate])) AS [ActualDeliveryDate]
	  ,SalesPerson
	  ,CustNum
	  ,OrderNum
	  ,OrderLine
	  ,LEFT(OrderRel, 50) AS OrderRel
	  ,InvoiceNum
	  ,InvoiceLine
	  ,InvoiceType -- Capgemani added this field on 20210622 /DZ
	  ,CreditMemo
	  ,PartNum
	  ,IIF([SellingShipQty] IS NULL OR [SellingShipQty] = '', NULL, CONVERT(Decimal(18,4), REPLACE([SellingShipQty],',',''))) AS [SellingShipQty]
	  ,IIF([UnitPrice] IS NULL OR [UnitPrice] = '', NULL, CONVERT(Decimal(18,4), REPLACE([UnitPrice],',',''))) AS [UnitPrice]
	  ,IIF([UnitCost] IS NULL OR [UnitCost] = '', NULL, CONVERT(Decimal(18,4), REPLACE([UnitCost],',',''))) AS [UnitCost]
	  ,IIF([DiscountAmount] IS NULL OR [DiscountAmount] = '', NULL, CONVERT(Decimal(18,4), REPLACE([DiscountAmount],',',''))) AS [DiscountAmount]
	  ,IIF([TotalMiscChrg] IS NULL OR [TotalMiscChrg] = '', NULL, CONVERT(Decimal(18,4), REPLACE([TotalMiscChrg],',',''))) AS [TotalMiscChrg]
	  ,IIF([DiscountPercent] IS NULL OR [DiscountPercent] = '', NULL, CONVERT(Decimal(18,4), REPLACE([DiscountPercent],',',''))) AS [DiscountPercent]
	  ,[UnitCostEK02]
	  ,[SalesOfficeDescrip]
	  ,[SalesGroupCode]
	  ,[SalesGroupDescrip]
	  ,WarehouseCode
	  ,Indexkey
	  ,[ReturnNum]
	  ,[ReturnComment]

FROM [prestage].[CYE_ES_SOLine]
GO
PRINT N'Creating [prestage].[CYE_ES_SOLine_Load]'
GO

CREATE PROCEDURE [prestage].[CYE_ES_SOLine_Load]
AS
BEGIN

Truncate table stage.[CYE_ES_SOLine]

insert into 
stage.CYE_ES_SOLine(
	PartitionKey
	,Company
	,InvoiceDate
	,SalesPerson
	,CustNum
	,OrderNum
	,OrderLine
	,OrderRel
	,InvoiceNum
	,InvoiceLine
	,InvoiceType -- bew field by Capgemani 20210622 /DZ
	,CreditMemo
	,PartNum
	,SellingShipQty
	,UnitPrice
	,UnitCost
	,DiscountAmount
	,TotalMiscChrg
	,WarehouseCode
	,Indexkey
	,[UnitCostEK02]
	,[DiscountPercent]
	,[SalesOfficeDescrip]
	,[SalesGroupCode]
	,[SalesGroupDescrip]
	,[ReturnNum]
	,[ReturnComment]
	,[ActualDeliveryDate]	
	)
select 
	PartitionKey
	,Company
	,InvoiceDate
	,SalesPerson
	,CustNum
	,OrderNum
	,OrderLine
	,OrderRel
	,InvoiceNum
	,InvoiceLine
	,InvoiceType -- bew field by Capgemani 20210622 /DZ
	,CreditMemo
	,PartNum
	,SellingShipQty
	,UnitPrice
	,UnitCost
	,DiscountAmount
	,TotalMiscChrg
	,WarehouseCode
	,Indexkey
	,[UnitCostEK02]
	,[DiscountPercent]
	,[SalesOfficeDescrip]
	,[SalesGroupCode]
	,[SalesGroupDescrip]
	,[ReturnNum]
	,[ReturnComment]
	,[ActualDeliveryDate]
from [prestage].[vCYE_ES_SOLine]

--Truncate table prestage.[CYE_ES_SOLine]

End
GO
PRINT N'Creating [stage].[CYE_ES_RLS]'
GO
CREATE TABLE [stage].[CYE_ES_RLS]
(
[EmailID] [nvarchar] (100) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[Name] [nvarchar] (50) NOT NULL,
[Email] [nvarchar] (50) NOT NULL
)
GO
PRINT N'Creating [stage].[vCYE_ES_RLS]'
GO



CREATE VIEW [stage].[vCYE_ES_RLS] AS

--WITH base as (
SELECT UPPER(CONCAT('CyESA', '-', TRIM(Email),'-' + [Name])) AS EmailID --,'-' + SalesPersonName , '-' + [All]
	,FORMAT(GETDATE(),'yyyy-MM-dd hh:mm:ss') AS PartitionKey
	,'CyESA' AS Company
	,[Email]
	,[Name]
	,'Department'	AS [RLSType]
--	,SalesPersonName
--	,[All]
FROM [stage].[CYE_ES_RLS]
  
--)

--  Testing out new logic for RLS Arkov to handle multiple RLS conditions for one user

--SELECT 
--	EmailID
--	,PartitionKey
--	,Company
--	,[Email]
--	,[Name]
--	FROM base
--	Where [Name] IS NOT NULL

--UNION ALL
--SELECT 
--	EmailID
--	,PartitionKey
--	,Company
--	,[Email]
--	,[Name]

--	FROM base
----	Where [All] = 1
GO
PRINT N'Creating [stage].[vFOR_SE_OpenBalance2017]'
GO
CREATE VIEW [stage].[vFOR_SE_OpenBalance2017] AS

SELECT [OpenBalanceID], [CompanyID], [AccountID], [CostUnitID], [CostBearerID], [ProjectID], [PartitionKey], [Company], [AccountNum], [CostUnitNum], [CostBearerNum], [ProjectNum], [JournalType], [JournalDate], [AccountingDate], [Description], [FiscalYear], [FiscalPeriod], [OpeningBalance], [Currency], [ExchangeRate], [OBRes1], [OBRes2], [OBRes3]
--the 2017 OB is inserted in the GeneralLedger. SB/DZ
  FROM [stage].[vFOR_SE_OpenBalance] where FiscalYear = 2017
GO
PRINT N'Creating [prestage].[TRA_FR_OLine]'
GO
CREATE TABLE [prestage].[TRA_FR_OLine]
(
[Prop_0] [nvarchar] (8) NOT NULL,
[Prop_1] [nvarchar] (100) NULL,
[Prop_2] [nvarchar] (50) NULL,
[Prop_3] [nvarchar] (50) NULL,
[Prop_4] [nvarchar] (50) NULL,
[Prop_5] [nvarchar] (50) NULL,
[Prop_6] [nvarchar] (50) NULL,
[Prop_7] [nvarchar] (50) NULL,
[Prop_8] [nvarchar] (50) NULL,
[Prop_9] [nvarchar] (50) NULL,
[Prop_10] [nvarchar] (50) NULL,
[Prop_11] [nvarchar] (50) NULL,
[Prop_12] [nvarchar] (50) NULL,
[Prop_13] [nvarchar] (50) NULL,
[Prop_14] [nvarchar] (50) NULL,
[Prop_15] [nvarchar] (50) NULL,
[Prop_16] [nvarchar] (50) NULL,
[Prop_17] [nvarchar] (50) NULL,
[Prop_18] [nvarchar] (50) NULL,
[Prop_19] [nvarchar] (50) NULL,
[Prop_20] [nvarchar] (50) NULL,
[Prop_21] [nvarchar] (50) NULL,
[Prop_22] [nvarchar] (50) NULL,
[Prop_23] [nvarchar] (50) NULL,
[Prop_24] [nvarchar] (50) NULL,
[Prop_25] [nvarchar] (50) NULL,
[Prop_26] [nvarchar] (50) NULL,
[Prop_27] [nvarchar] (50) NULL,
[Prop_28] [nvarchar] (50) NULL,
[Prop_29] [nvarchar] (50) NULL,
[Prop_30] [nvarchar] (50) NULL,
[Prop_31] [nvarchar] (50) NULL,
[Prop_32] [nvarchar] (50) NULL,
[Prop_33] [nvarchar] (50) NULL,
[Prop_34] [nvarchar] (50) NULL,
[Prop_35] [nvarchar] (50) NULL,
[Prop_36] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [prestage].[vTRA_FR_OLine]'
GO
CREATE VIEW [prestage].[vTRA_FR_OLine] AS

SELECT 
	CONCAT(CONVERT (date, SYSDATETIME()), ' 00:00:00') AS [PartitionKey]
	,Prop_0 AS [Company]
	,Prop_1 AS [CustomerNum]
	,Prop_2 AS [SalesOrderNum]
	,Prop_3 AS [SalesOrderLine]
	,Prop_4 AS [SalesOrderSubLine]
	,Prop_5 AS [SalesOrderType]
	,Prop_6 AS [SalesOrderCategory]
	,Prop_7 AS [SalesOrderStatus]
	,CONVERT(date, CONCAT(SUBSTRING(Prop_8, 7,4), SUBSTRING(Prop_8, 4,2), SUBSTRING(Prop_8, 1,2))) AS [SalesOrderDate]
	,CONVERT(date, CONCAT(SUBSTRING(Prop_9, 7,4), SUBSTRING(Prop_9, 4,2), SUBSTRING(Prop_9, 1,2))) AS [NeedbyDate]
	,CONVERT(date, CONCAT(SUBSTRING(Prop_10, 7,4), SUBSTRING(Prop_10, 4,2), SUBSTRING(Prop_10, 1,2))) AS [ExpDelivDate]
	,CONVERT(date, CONCAT(SUBSTRING(Prop_11, 7,4), SUBSTRING(Prop_11, 4,2), SUBSTRING(Prop_11, 1,2))) AS [ActualDelivDate]
	,Prop_12 AS [SalesInvoiceNum]
	,TRY_CONVERT(decimal(18, 2), Prop_13) AS [SalesOrderQty]
	,TRY_CONVERT(decimal(18, 2), Prop_14) AS [DelivQty]
	,TRY_CONVERT(decimal(18, 2), Prop_15) AS [RemainingQty]
	,Prop_16 AS [UoM]
	,TRY_CONVERT(decimal(18, 2), Prop_17) AS [UnitPrice]
	,TRY_CONVERT(decimal(18, 2), Prop_18) AS [UnitCost]
	,Prop_19 AS [Currency]
	,TRY_CONVERT(decimal(18, 2), Prop_20) AS [ExchangeRate]
	,TRY_CONVERT(decimal(18, 2), Prop_21) AS [DiscountPercent]
	,TRY_CONVERT(decimal(18, 2), Prop_22) AS [DiscountAmount]
	,Prop_23 AS [PartNum]
	,Prop_24 AS [PartType]
	,Prop_25 AS [PartStatus]
	,Prop_26 AS [SalesPersonName]
	,Prop_27 AS [WarehouseCode]
	,Prop_28 AS [SalesChannel]
	,Prop_29 AS [Department]
	,Prop_30 AS [ProjectNum]
	,Prop_31 AS [Cancellation]
	,Prop_32 AS [IndexKey]
	,Prop_33 AS [SORes1]
	,Prop_34 AS [SORes2]
	,Prop_35 AS [SORes3]

FROM [prestage].[TRA_FR_OLine]
GO
PRINT N'Creating [stage].[MEN_NL_PurchaseInvoice]'
GO
CREATE TABLE [stage].[MEN_NL_PurchaseInvoice]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[ID] [nvarchar] (50) NULL,
[Period] [nvarchar] (50) NULL,
[SysDate] [date] NULL,
[SysTime] [time] NULL,
[SupplierCode] [nvarchar] (50) NULL,
[InvoiceNumber] [nvarchar] (50) NOT NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[PurchaseOrderNumber] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[Quantity] [decimal] (18, 8) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[Price] [decimal] (18, 8) NULL,
[Amount] [decimal] (18, 8) NULL,
[CrediteurKey] [nvarchar] (50) NULL,
[ProductKey] [nvarchar] (50) NULL,
[DW_TimeStamp] [date] NULL
)
GO
PRINT N'Creating [stage].[vMEN_NL_PurchaseInvoice]'
GO
CREATE VIEW [stage].[vMEN_NL_PurchaseInvoice] AS
WITH CTE AS (
SELECT CASE WHEN Company = '14' THEN  CONCAT(N'MENBE',Company) 
			ELSE  CONCAT(N'MENNL',Company)  END AS CompanyCode		--Doing this to have the company code in nvarchar and don't need to repeat CAST(CONCAT('MEN-',Company) AS nvarchar(50)) everywhere /SM
	  ,[PartitionKey], [Company], [ID], [Period], [SysDate], [SysTime], [SupplierCode], [InvoiceNumber], [InvoiceLine], [InvoiceDate], [PurchaseOrderNumber], [PurchaseOrderLine], [PartNum], [Quantity], [CurrencyCode], [Price], [Amount], [CrediteurKey], [ProductKey], [DW_TimeStamp]
  FROM [stage].[MEN_NL_PurchaseInvoice] --where  [InvoiceNumber] IN ('221312703155771', '9675424')
  )


SELECT 
	--ADD TRIM() UPPER() INTO WarehouseID 23-01-12 VA
	--ADD TRIM() INTO SupplierID 23-01-24 VA
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(CompanyCode, ID))) AS PurchaseInvoiceID --'#', PurchaseOrderType 
	,CONCAT(CompanyCode,'#',InvoiceNumber, '#',InvoiceLine) AS PurchaseInvoiceCode
	,CONCAT(CompanyCode,'#',PurchaseOrderNumber) AS PurchaseOrderNumCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(CompanyCode, '#', PurchaseOrderNumber))) AS PurchaseOrderNumID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(CompanyCode,'#',PurchaseOrderNumber,'#',PurchaseOrderLine))) AS PurchaseOrderID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(CompanyCode),'#',TRIM([SupplierCode]))))) AS SupplierID  --previous CONCAT(CompanyCode,'#',CrediteurKey)))
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(CompanyCode,'#',UPPER(TRIM([SupplierCode]))))) AS SupplierID  --previous CONCAT(CompanyCode,'#',CrediteurKey)))
    ,CONVERT([binary](32),HASHBYTES('SHA2_256',CompanyCode))	AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(CompanyCode,'#',PartNum)))	AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(CompanyCode),'#',''))))					AS WarehouseID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(CompanyCode,'#','')))					AS WarehouseID
--	,CONVERT(int, replace(InvoiceDate,'-','')) AS PurchaseInvoiceDateID
	,CONVERT(int, REPLACE([InvoiceDate],'-','')) AS PurchaseInvoiceDateID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(CompanyCode,'#', SupplierCode, '#', InvoiceNumber,'#',PurchaseOrderNumber))) AS PurchaseLedgerID --match PurchaseLedgerID in [vSCM_FI_PurchaseLedger]
	,CONCAT(CompanyCode,'#',SupplierCode,'#',PurchaseOrderNumber) AS PurchaseOrderCode
	  ,[PartitionKey]

      ,[CompanyCode]				AS Company	
	  ,[PurchaseOrderNumber]		AS PurchaseOrderNum
      ,[PurchaseOrderLine]			
	  ,NULL							AS PurchaseOrderSubLine
	  ,NULL							AS PurchaseOrderType	
      ,[InvoiceNumber]				AS PurchaseInvoiceNum
      ,[InvoiceLine]				AS PurchaseInvoiceLine
	  ,NULL							AS PurchaseInvoiceType
	  ,[InvoiceDate]				AS PurchaseInvoiceDate
--	  ,SysDate						AS PurchaseInvoiceDate
      ,'1900-01-01'					AS ActualDelivDate
	  ,UPPER([SupplierCode])		AS SupplierNum
      ,[PartNum]
      ,[Quantity]					AS PurchaseInvoiceQty
	  ,NULL							AS UoM
      ,[Price]						AS UnitPrice
	  ,NULL							AS DiscountPercent
	  ,0							AS DiscountAmount
	  ,NULL							AS TotalMiscChrg
	  ,NULL							AS VATAmount
	  ,COALESCE(UPPER([CurrencyCode]),'EUR')		AS Currency
      ,1							AS ExchangeRate
      ,NULL							AS CreditMemo
	  ,NULL							AS PurchaserName
	  ,NULL							AS WarehouseCode
	  ,NULL							AS PurchaseChannel
--    ,[Amount]
	  ,NULL							AS Comment
	  ,NULL							AS PIRes1
	  ,NULL							AS PIRes2
	  ,NULL							AS PIRes3
  FROM CTE
 --WHERE CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(CompanyCode, ID))) NOT IN (0xFFCC77044BD9E4089468F961AF97EFF33DC5E2E9D3808BB4CC24657749E11FB1/*2020-01-17*/, 0x9F040B22308B210E1EB5D9C0342438E1C95B3A36962BC42EDCD8686CB8197B0F/*2022-04-29*/) 
  --ORDER BY PurchaseInvoiceDate
GO
PRINT N'Creating [dm_FH].[dimCustomerAgreement]'
GO
CREATE VIEW [dm_FH].[dimCustomerAgreement] AS
SELECT ca.[CompanyID]
,ca.[CustomerID]
,ca.[PartID]
,ca.[CurrencyID]
,ca.[Company]
,ca.[CustomerNum]
,ca.[PartNum]
,ca.[AgreementCode]
,ca.[AgreementDescription]
,ca.[DiscountPercent]
,ca.[UnitPrice]
,ca.[AgreementQty]
,ca.[Currency]
,ca.[DelivTime]
,ca.[AgreementStart]
,ca.[AgreementEnd]
,ca.[CustomerTerms]
,ca.[FulfilledQty]
,ca.[RemainingQty]
,ca.[UoM]
,ca.[PartitionKey]
,ca.[ExchangeRate]
FROM [dm].[DimCustomerAgreement] ca
LEFT JOIN dbo.Company com ON ca.Company = com.Company
WHERE com.BusinessArea = 'Fluid Handling Solutions' AND com.[Status] = 'Active'
GO
PRINT N'Creating [stage].[AXL_AU_OLine]'
GO
CREATE TABLE [stage].[AXL_AU_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[NeedbyDate] [date] NULL,
[ExpDelivDate] [date] NULL,
[EDCExpDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (10) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[SalesPerson] [nvarchar] (50) NULL,
[WareHouseCode] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[BusinessChain] [nvarchar] (50) NULL,
[SalesOrderCategory] [nvarchar] (100) NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL,
[PartDesc] [nvarchar] (max) NULL,
[APV_Cost_EUR] [nvarchar] (50) NULL,
[APV_Item] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXL_AU_OLine]'
GO




CREATE VIEW [stage].[vAXL_AU_OLine] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(PartDesc))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum), '#', (IIF(TRIM([PartNum]) LIKE 'IACO%' , 'MISC. CHARGES', TRIM(PartDesc) )) )))) AS PartID
	,CONVERT(int, replace(convert(date, OrderDate), '-', '')) AS SalesOrderDateID
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine))) AS SalesOrderCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(CustNum) AS CustomerNum 
	,TRIM(OrderNum) AS [SalesOrderNum]
	,TRIM(OrderLine) AS [SalesOrderLine]
	,TRIM(OrderSubLine) AS [SalesOrderSubLine]
	,CONVERT(nvarchar(50), TRIM(OrderType)) AS [SalesOrderType]
	,TRIM([SalesOrderCategory]) AS [SalesOrderCategory]
	,OrderDate AS [SalesOrderDate]
	,NeedbyDate
	,ExpDelivDate AS [ExpDelivDate]
	,EDCExpDelivDate
	,ActualDelivDate
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,OrderQty AS [SalesOrderQty]
	,DelivQty
	,RemainingQty
	,Unit AS [UoM]
	,UnitPrice
	,UnitCost
	,LEFT(TRIM(Currency), 3) AS Currency
	,ExchangeRate
	,LEFT(TRIM(OpenRelease), 1) AS OpenRelease
	,DiscountAmount
	,DiscountPercent
	,NULL AS CashDiscOffered
	,NULL AS CashDiscUsed
	,TRIM(PartNum) AS PartNum
	,UPPER(PartDesc) AS PartDesc
	,'' AS [PartType]
	,CONVERT(nvarchar(50), PartStatus) AS PartStatus
	,TRIM(SalesPerson) AS [SalesPersonName]
	,TRIM(WareHouseCode) AS WarehouseCode
	,'' AS IndexKey
	,TRIM(SalesChannel) AS SalesChannel
	,TRIM(BusinessChain) AS [Department]
	,Res3 AS [ProjectNum] -- = FreeOfCharge: Y = yes, N = no
	,'' AS Cancellation
	,Res1 AS SORes1
	,Res2 AS SORes2
	,Res3 AS SORes3
FROM stage.AXL_AU_OLine
WHERE OrderDate >= '2015-01-01'
GO
PRINT N'Creating [stage].[CER_EE_OLine]'
GO
CREATE TABLE [stage].[CER_EE_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderRelNum] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[DelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[SumUnitCost] [decimal] (18, 4) NULL,
[SumUnitPrice] [decimal] (18, 4) NULL,
[CurrExchRate] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[OpenRelease] [nvarchar] (50) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[NeedbyDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (50) NULL,
[SalesReturnOrderNum] [nvarchar] (50) NULL,
[SalesReturnInvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_EE_OLine]'
GO

CREATE VIEW [stage].[vCER_EE_OLine] AS
--COMMENT EMPTY FIELDS / ADJUST PartID,CustomerID,WarehouseID 2022-12-15 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', OrderNum, '#', OrderLine, '#', OrderSubLine, '#', InvoiceNum))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) as CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum))))) AS PartID 
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) ))))) AS PartID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company),'#',TRIM(WarehouseCode))))) AS WarehouseID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', WarehouseCode))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum)))) AS SalesOrderNumID
	,CONCAT(Company, '#', OrderNum, '#', PartNum, '#', InvoiceNum) as SalesOrderCode
	,CONVERT(int, replace(convert(date, OrderDate),'-','')) AS SalesOrderDateID   --Redundant?
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT( Company, '#', '') ))	AS ProjectID
	,PartitionKey 

	,UPPER(TRIM(Company)) AS Company 
	,UPPER(TRIM(CustNum)) AS CustomerNum   
	,TRIM(OrderNum) AS SalesOrderNum
	,TRIM(OrderLine) AS SalesOrderLine
	,TRIM(OrderSubLine)	AS SalesOrderSubLine
	,TRIM(OrderType) AS SalesOrderType
	--,'' AS SalesOrderCategory
	,TRIM(OrderRelNum) AS SalesOrderRelNum
	,OrderDate AS SalesOrderDate
	,NeedbyDate
	,DelivDate AS ExpDelivDate
	,CAST('1900-01-01' AS date) AS ActualDelivDate
	,CAST('1900-01-01' AS date) AS ConfirmedDelivDate
	,TRIM(InvoiceNum) AS SalesInvoiceNum
	,OrderQty AS SalesOrderQty
	,DelivQty		
	,RemainingQty
	--,NULL AS SalesInvoiceQty
	--,'' AS UoM
	,UnitPrice
	,UnitCost
	,CurrencyCode AS Currency
	,CurrExChRate AS ExchangeRate
	,OpenRelease
	,DiscountAmount
	,DiscountPercent
	,UPPER(TRIM(PartNum)) AS PartNum
	,IIF(OrderSubLine = '000000', 'Main', 'Sub' ) AS PartType
	,PartStatus
	,TRIM(SalesPerson) AS SalesPersonName
	,TRIM(WarehouseCode) as WarehouseCode
	,IIF(LEFT(TRIM(OrderNum), 5) = '00004', 'Webshop', 'Normal Order Handling') AS SalesChannel
	,IIF(LEFT(TRIM(OrderNum), 5) = '00004', 'Webshop', 'Normal Order Handling') AS AxInterSalesChannel
	--,'' AS Department
	--,'' AS ProjectNum
	--,'' AS IndexKey
	--,'0' AS Cancellation
	--,'' AS SORes1
	--,'' AS SORes2
	--,'' AS SORes3
	--,NULL AS [TotalMiscChrg]
FROM stage.CER_EE_OLine
GO
PRINT N'Creating [prestage].[TRA_FR_StockBalance]'
GO
CREATE TABLE [prestage].[TRA_FR_StockBalance]
(
[Prop_0] [nvarchar] (8) NOT NULL,
[Prop_1] [nvarchar] (100) NULL,
[Prop_2] [nvarchar] (50) NULL,
[Prop_3] [nvarchar] (50) NULL,
[Prop_4] [nvarchar] (50) NULL,
[Prop_5] [nvarchar] (50) NULL,
[Prop_6] [nvarchar] (50) NULL,
[Prop_7] [nvarchar] (50) NULL,
[Prop_8] [nvarchar] (50) NULL,
[Prop_9] [nvarchar] (50) NULL,
[Prop_10] [nvarchar] (50) NULL,
[Prop_11] [nvarchar] (50) NULL,
[Prop_12] [nvarchar] (50) NULL,
[Prop_13] [nvarchar] (50) NULL,
[Prop_14] [nvarchar] (50) NULL,
[Prop_15] [nvarchar] (50) NULL,
[Prop_16] [nvarchar] (50) NULL,
[Prop_17] [nvarchar] (50) NULL,
[Prop_18] [nvarchar] (50) NULL,
[Prop_19] [nvarchar] (50) NULL,
[Prop_20] [nvarchar] (50) NULL,
[Prop_21] [nvarchar] (50) NULL,
[Prop_22] [nvarchar] (50) NULL,
[Prop_23] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [prestage].[vTRA_FR_StockBalance]'
GO


CREATE VIEW [prestage].[vTRA_FR_StockBalance] AS

SELECT 
	CONCAT(CONVERT (date, SYSDATETIME()), ' 00:00:00') AS [PartitionKey]
	,Prop_0 AS [Company]
	,Prop_1 AS [WarehouseCode]
	,Prop_2 AS [Currency]
	,Prop_3 AS [BinNum]
	,Prop_4 AS [BatchNum]
	,Prop_5 AS [SupplierNum]
	,Prop_6 AS [PartNum]
	,Prop_7 AS [DelivTime]
	,CONVERT(date, CONCAT(SUBSTRING(Prop_8, 7,4), SUBSTRING(Prop_8, 4,2), SUBSTRING(Prop_8, 1,2))) AS [LastStockTakeDate]
	,CONVERT(date, CONCAT(SUBSTRING(Prop_9, 7,4), SUBSTRING(Prop_9, 4,2), SUBSTRING(Prop_9, 1,2))) AS [LastStdCostCalDat]
	,Prop_10 AS [MaxStockQty]
	,Prop_11 AS [StockBalance]
	,Prop_12 AS [StockValue]
	,Prop_13 AS [ReserveQty]
	,Prop_14 AS [BackOrderQty]
	,Prop_15 AS [OrderQty]
	,Prop_16 AS [StockTakeDiff]
	,Prop_17 AS [ReOrderLevel]
	,Prop_18 AS [SafetyStock]
	,Prop_19 AS [OptimalOrderQty]
	,Prop_20 AS [AvgCost]
	,Prop_21 AS [SBRes1]
	,Prop_22 AS [SBRes2]
	,Prop_23 AS [SBRes3]
FROM [prestage].[TRA_FR_StockBalance]
GO
PRINT N'Creating [stage].[TRA_FR_StockBalance]'
GO
CREATE TABLE [stage].[TRA_FR_StockBalance]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[PartNum] [nvarchar] (50) NOT NULL,
[DelivTime] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[StockBalance] [nvarchar] (50) NULL,
[StockValue] [nvarchar] (50) NULL,
[ReservedQty] [nvarchar] (50) NULL,
[BackOrderQty] [nvarchar] (50) NULL,
[OrderQty] [nvarchar] (50) NULL,
[StockTakeDiff] [nvarchar] (50) NULL,
[ReOrderLevel] [nvarchar] (50) NULL,
[OptimalOrderQty] [nvarchar] (50) NULL,
[BinNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[LastStockTakeDate] [date] NULL,
[LastStdCostCalDat] [date] NULL,
[BatchNum] [nvarchar] (50) NULL,
[AvgCost] [nvarchar] (50) NULL,
[MaxStockQty] [nvarchar] (50) NULL,
[ReserveQty] [nvarchar] (50) NULL,
[Currency] [nvarchar] (10) NULL,
[SafetyStock] [nvarchar] (50) NULL,
[SBRes1] [nvarchar] (50) NULL,
[SBRes2] [nvarchar] (50) NULL,
[SBRes3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [prestage].[TRA_FR_StockBalance_Load]'
GO
CREATE PROCEDURE [prestage].[TRA_FR_StockBalance_Load] AS
BEGIN

Truncate table stage.[TRA_FR_StockBalance]

INSERT INTO 
	stage.TRA_FR_StockBalance 
	(PartitionKey, Company, PartNum, [WarehouseCode], Currency, BinNum, BatchNum, SupplierNum, DelivTime, LastStockTakeDate, LastStdCostCalDat, MaxStockQty, StockBalance, StockValue, ReserveQty, BackOrderQty, OrderQty, StockTakeDiff, ReOrderLevel, SafetyStock, OptimalOrderQty, AvgCost, SBRes1, SBRes2, SBRes3)
SELECT 
	PartitionKey, Company, PartNum, [WarehouseCode], Currency, BinNum, BatchNum, SupplierNum, DelivTime, LastStockTakeDate, LastStdCostCalDat, MaxStockQty, StockBalance, StockValue, ReserveQty, BackOrderQty, OrderQty, StockTakeDiff, ReOrderLevel, SafetyStock, OptimalOrderQty, AvgCost, SBRes1, SBRes2, SBRes3
FROM 
	[prestage].[vTRA_FR_StockBalance]

--Truncate table prestage.[TRA_FR_StockBalance]

End
GO
PRINT N'Creating [stage].[vCYE_ES_Part]'
GO
CREATE VIEW [stage].[vCYE_ES_Part] AS
--COMMENT EMPTY FIELDS // ADD TRIM() INTO PartID 23-01-03 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([PartNum]))))) AS PartID
--	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company], '#', TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,UPPER(CONCAT([Company], '#', TRIM([PartNum]))) AS PartCode
	,PartitionKey

	,UPPER([Company]) AS [Company]
	,UPPER(TRIM([PartNum])) AS [PartNum]
	--,'' AS [PartName]
	,[PartDescription]
	,[PartDescription2]
	,CASE WHEN LEFT(PartNum, 2) = 'Y9' THEN 'Service'
		WHEN PartNum in ('YPCB', 'YPCD', 'YTAC', 'YTCD') THEN 'Assembled Product' --20210525 /DZ+ET
		ELSE NULL END AS [PartDescription3]
	--,NULL AS MainSupplier
	--,NULL AS AlternativeSupplier
	,[ProductGroup2] AS [ProductGroup]
	,[ProductGroup] AS [ProductGroup2]
	--,'' AS [ProductGroup3]
	--,'' AS [ProductGroup4]
	--,'' AS [Brand]
	,[CommodityCode]
	--,'' AS PartReplacementNum
	--,'' AS PartStatus
	,[CountryOfOrigin]
	,[NetWeight]
	--,'' AS UoM
	--,'' AS [Material]
	--,'' AS [Barcode]
	--,NULL AS ReOrderLevel
	--,'' AS PartResponsible
	--,'' AS [StartDate]
	--,'' AS [EndDate]
	--,0 AS [Volume]
	--,'' AS ItemStatus
FROM [stage].[CYE_ES_Part]
GO
PRINT N'Creating [stage].[CER_LT_OLine]'
GO
CREATE TABLE [stage].[CER_LT_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderRelNum] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[DelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[UnitPrice] [numeric] (18, 4) NULL,
[UnitCost] [numeric] (18, 4) NULL,
[SumUnitCost] [numeric] (18, 4) NULL,
[SumUnitPrice] [numeric] (18, 4) NULL,
[CurrExchRate] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (50) NULL,
[OpenRelease] [nvarchar] (10) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [numeric] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[NeedbyDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (500) NULL,
[SalesReturnOrderNum] [nvarchar] (100) NULL,
[SalesReturnInvoiceNum] [nvarchar] (100) NULL,
[WarehouseCode] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_LT_OLine]'
GO
CREATE VIEW [stage].[vCER_LT_OLine] AS
--COMMENT EMPTY FIELDS / ADD UPPER()TRIM() INTO PartID,CustomerID,WarehouseID 2022-12-14 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', OrderNum, '#', OrderLine, '#', OrderSubLine, '#', OrderRelNum, '#', MAX(InvoiceNum), '#', SalesReturnOrderNum))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ) ))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) )))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', WarehouseCode))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum)))) AS SalesOrderNumID
	,CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) )) AS SalesOrderCode
	,CONVERT(int, replace(convert(date, OrderDate),'-','')) AS SalesOrderDateID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey 

	,TRIM(Company) AS Company
	,TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ) AS CustomerNum 
	,TRIM(OrderNum) AS SalesOrderNum
	,TRIM(OrderLine) AS SalesOrderLine
	,TRIM(OrderSubLine) AS SalesOrderSubLine
	,TRIM(OrderType) AS SalesOrderType
	--,'' AS SalesOrderCategory
	,OrderDate AS SalesOrderDate
	,NeedbyDate
	,DelivDate AS ExpDelivDate
	,CAST('1900-01-01' AS date) AS ActualDelivDate
	,CAST('1900-01-01' AS date) AS ConfirmedDelivDate
	,MAX(InvoiceNum) AS SalesInvoiceNum
	,OrderQty AS SalesOrderQty
	,DelivQty
	,RemainingQty
	--,NULL AS SalesInvoiceQty
	--,'' AS UoM
	,UnitPrice
	,UnitCost
	,CurrencyCode AS Currency
	,CurrExChRate AS ExchangeRate
	,OpenRelease
	,DiscountAmount
	,DiscountPercent
	,TRIM(IIF(PartNum IS NULL OR PartNum = '', 'MISSINGPART',  PartNum) ) AS PartNum
	,IIF(OrderSubLine = '000000', 'Main', 'Sub' ) AS PartType
	,PartStatus
	,TRIM(SalesPerson) AS SalesPersonName
	,CASE WHEN WarehouseCode = '' OR WarehouseCode is NULL THEN 'Other' ELSE WarehouseCode END AS WarehouseCode
	,'' AS SalesChannel
	,CASE WHEN left(OrderNum, 4) = '7000' THEN 'Webshop' -- incl. very little RFQ orders
		ELSE 'Normal Order Handling' END AS AxInterSalesChannel
	--,'' AS Department
	--,'' AS ProjectNum
	--,'' AS IndexKey
	--,'0' AS Cancellation
	--,'' AS SORes1
	--,'' AS SORes2
	--,'' AS SORes3
	,ReturnComment
	,SalesReturnOrderNum
	--,'' AS SalesReturnInvoiceNum
	--,NULL AS [TotalMiscChrg]
FROM stage.CER_LT_OLine lto
--	LEFT JOIN dw.Customer ltc ON Company = ltc.Company AND CustNum = ltc.CustomerNum
GROUP BY
	PartitionKey, CustNum, OrderNum, OrderLine, OrderSubLine, OrderType, OrderRelNum, OrderDate, NeedbyDate, DelivDate, OrderQty, DelivQty, RemainingQty, UnitPrice, UnitCost, CurrExChRate, Company, OpenRelease, DiscountAmount, DiscountPercent, PartNum, PartStatus, SalesPerson, ReturnComment, SalesReturnOrderNum, WarehouseCode,CurrencyCode
GO
PRINT N'Creating [dm_FH].[fctStockBalance]'
GO
CREATE VIEW [dm_FH].[fctStockBalance] AS

SELECT 
 sb.[StockBalanceID]
,sb.[CompanyID]
,sb.[SupplierID]
,sb.[PartID]
,sb.[WarehouseID]
,sb.[CurrencyMonthKey]
,sb.[Company]
,sb.[Currency]
,sb.[BinNum]
,sb.[BatchNum]
,sb.[SupplierNum]
,sb.[PartNum]
,sb.[DelivTime]
,sb.[LastStockTakeDate]
,sb.[LastStdCostCalDate]
,sb.[SafetyStock]
,sb.[MaxStockQty]
,sb.[StockBalance]
,sb.[StockValue]
,sb.[AvgCost]
,sb.[ReserveQty]
,sb.[BackOrderQty]
,sb.[OrderQty]
,sb.[StockTakeDiff]
,sb.[ReOrderLevel]
,sb.[OptimalOrderQty]
,sb.[WarehouseCode]
,sb.[SBRes1]
,sb.[SBRes2]
,sb.[SBRes3]
FROM dm.FactStockBalance sb
LEFT JOIN dbo.Company com ON sb.Company = com.Company
WHERE com.BusinessArea = 'Fluid Handling Solutions' AND com.[Status] = 'Active'
GO
PRINT N'Creating [stage].[NOM_SEIND_Warehouse]'
GO
CREATE TABLE [stage].[NOM_SEIND_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[WarehouseCode] [nvarchar] (10) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vNOM_SEIND_Warehouse]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vNOM_SEIND_Warehouse] AS

SELECT 
	
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey
	,TRIM([Company]) AS Company
	,TRIM([WarehouseCode]) AS [WarehouseCode]
	,TRIM([WarehouseName]) AS [WarehouseName]
	--,'' AS WarehouseDistrict
	--,'' AS WarehouseAddress
	--,'' AS WarehouseDescription
	--,'' AS WarehouseType
	--,'' AS WarehouseCountry
	--,'' AS WarehouseSite
FROM [stage].[NOM_SEIND_Warehouse]
GO
PRINT N'Creating [stage].[vTRA_FR_StockBalance]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE VIEW [stage].[vTRA_FR_StockBalance] AS
--ADD TRIM()INTO PartID 22-12-29 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT([Company],'#',TRIM([PartNum]),'#',TRIM([BatchNum]),'#',TRIM([WarehouseCode]))))) AS ItemWarehouseID
	,TRIM(WarehouseCode) AS WarehouseCode
	,UPPER(CONCAT([Company],'#',TRIM([PartNum]),'#',TRIM([WarehouseCode]))) AS ItemWarehouseCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER([Company]))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT([Company],'#',TRIM([SupplierNum]))))) AS SupplierID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT([Company],'#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey

	,UPPER(Company) AS Company
	,CASE WHEN TRIM(BinNum) like '' OR BinNum like ' ' THEN NULL ELSE TRIM(BinNum) END AS BinNum
	,TRIM(BatchNum) AS BatchNum
	,UPPER(TRIM(SupplierNum)) AS SupplierNum
	,UPPER(TRIM(PartNum)) AS PartNum
	,[DelivTime]-- convert to days
	,IIF(LastStockTakeDate = '', '1900-01-01', CONVERT(date, LastStockTakeDate)) AS LastStockTakeDate
	,IIF(LastStdCostCalDat = '',  '1900-01-01', CONVERT(date, LastStdCostCalDat)) AS LastStdCostCalDate
	,TRIM(Currency) AS Currency
	,SafetyStock
	,MaxStockQty
	,StockBalance
	,StockValue
	,AvgCost
	,ReserveQty
	,BackOrderQty
	,OrderQty
	,StockTakeDiff
	,ReOrderLevel
	,OptimalOrderQty
	,SBRes1
	,SBRes2
	,SBRes3
FROM 
	[stage].[TRA_FR_StockBalance]
GO
PRINT N'Creating [prestage].[TRA_FR_Oline_Load]'
GO

CREATE PROCEDURE [prestage].[TRA_FR_Oline_Load] AS
BEGIN

Truncate table stage.[TRA_FR_Oline]

INSERT INTO 
	stage.TRA_FR_Oline 
	(PartitionKey, Company, PartNum, [SalesPersonName], [CustomerNum], [PartType], [SalesOrderNum], [SalesOrderLine], [SalesOrderSubLine], [SalesOrderType], [SalesOrderCategory], [SalesOrderStatus], [SalesOrderDate], [NeedbyDate], [ExpDelivDate], [ActualDelivDate], [SalesInvoiceNum],[SalesOrderQty], [DelivQty], [RemainingQty], [UoM], [UnitPrice], [UnitCost], [Currency], [ExchangeRate], [DiscountPercent], [DiscountAmount], [WarehouseCode], [IndexKey])
SELECT 
	PartitionKey, Company, PartNum, [SalesPersonName], [CustomerNum], [PartType], [SalesOrderNum], [SalesOrderLine], [SalesOrderSubLine], [SalesOrderType], [SalesOrderCategory], [SalesOrderStatus], [SalesOrderDate], [NeedbyDate], [ExpDelivDate], [ActualDelivDate], [SalesInvoiceNum],[SalesOrderQty], [DelivQty], [RemainingQty], [UoM], [UnitPrice], [UnitCost], [Currency], [ExchangeRate], [DiscountPercent], [DiscountAmount], [WarehouseCode], [IndexKey]
FROM 
	[prestage].[vTRA_FR_Oline]

--Truncate table prestage.[TRA_FR_Oline]

End
GO
PRINT N'Creating [axbus].[IOW_PL_SalesPerson]'
GO
CREATE TABLE [axbus].[IOW_PL_SalesPerson]
(
[Company] [nvarchar] (50) NULL,
[SalesPersonCode] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[RoleType] [nvarchar] (50) NULL,
[SalesDistrict] [nvarchar] (50) NULL,
[SalesPersonResponsibleCode] [nvarchar] (50) NULL,
[SalesPersonResponsibleName] [nvarchar] (50) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL,
[IsActiveRecord] [bit] NULL,
[STRes1] [nvarchar] (50) NULL,
[STRes2] [nvarchar] (50) NULL,
[STRes3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vIOW_PL_SalesPerson]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vIOW_PL_SalesPerson] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', (SalesPersonCode))))) AS SalesPersonID
	,UPPER(CONCAT(Company, '#', TRIM(SalesPersonCode))) AS SalesPersonCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,getdate() AS PartitionKey

	,TRIM(Company) AS Company
	,(SalesPersonCode) AS SalesPersonName
	,TRIM(RoleType) AS RoleType
	,TRIM(SalesDistrict) AS SalesDistrict
	,TRIM(SalesPersonResponsibleCode) AS SalesPersonResponsibleCode
	,TRIM(SalesPersonResponsibleName) AS SalesPersonResponsibleName
	,TRIM(CreatedTimeStamp) AS CreatedTimeStamp
	,TRIM(ModifiedTimeStamp) AS ModifiedTimeStamp
	,IsActiveRecord
	,STRes1
	,STRes2
	,STRes3
FROM [axbus].[IOW_PL_SalesPerson]
GO
PRINT N'Creating [stage].[WID_FI_Warehouse]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[WID_FI_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseID] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL,
[WarehouseDistrict] [nvarchar] (50) NULL,
[WarehouseAddress] [nvarchar] (100) NULL,
[WarehouseDescription] [nvarchar] (max) NULL,
[WarehouseType] [nvarchar] (50) NULL,
[WarehouseCountry] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vWID_FI_Warehouse]'
GO

CREATE VIEW [stage].[vWID_FI_Warehouse] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey

	,[Company]
	,TRIM([WarehouseCode]) AS [WarehouseCode]
	,[WarehouseName]
	,[WarehouseDistrict]
	,[WarehouseAddress]
	,[WarehouseDescription]
	,[WarehouseType]
	,[WarehouseCountry]
	--,'' AS [WarehouseSite]
FROM [stage].[WID_FI_Warehouse]
GO
PRINT N'Creating [dm_FH].[fctSalesOrderLog]'
GO
CREATE VIEW [dm_FH].[fctSalesOrderLog] AS

SELECT sol.[SalesOrderLogID]
,sol.[CompanyID]
,sol.[CustomerID]
,sol.[PartID]
,sol.[WarehouseID]
,sol.[SalesPersonNameID]
,sol.[SalesOrderDateID]
,sol.[PartitionKey]
,sol.[Company]
,sol.[CustomerNum]
,sol.[SalesOrderNum]
,sol.[SalesOrderLine]
,sol.[SalesOrderSubLine]
,sol.[SalesOrderType]
,sol.[SalesOrderLogType]
,sol.[SalesOrderDate]
,sol.[SalesOrderLogDate]
,sol.[SalesInvoiceNum]
,sol.[SalesOrderQty]
,sol.[UoM]
,sol.[UnitPrice]
,sol.[UnitCost]
,sol.[Currency]
,sol.[ExchangeRate]
,sol.[OpenRelease]
,sol.[DiscountPercent]
,sol.[DiscountAmount]
,sol.[PartNum]
,sol.[PartType]
,sol.[SalesPersonName]
,sol.[Department]
,sol.[WarehouseCode]
FROM [dm].[FactSalesOrderLog] sol
LEFT JOIN dbo.Company com ON sol.Company = com.Company
WHERE com.BusinessArea = 'Fluid Handling Solutions' AND com.[Status] = 'Active'
GO
PRINT N'Creating [stage].[CER_NO_BC_PurchaseInvoice]'
GO
CREATE TABLE [stage].[CER_NO_BC_PurchaseInvoice]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (100) NOT NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[PurchaseInvoiceLine] [nvarchar] (50) NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseInvoiceDate] [nvarchar] (50) NULL,
[ActualDelivDate] [nvarchar] (50) NULL,
[IsInvoiceClosed] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PurchaseInvoiceQty] [nvarchar] (50) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [nvarchar] (50) NULL,
[DiscountPercent] [nvarchar] (50) NULL,
[DiscountAmount] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[PurchaserName] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[PurchaseInvoiceType] [nvarchar] (50) NULL,
[ActualShipDate] [nvarchar] (50) NULL,
[IsActiveRecord] [nvarchar] (50) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL,
[ExchangeRate] [nvarchar] (50) NULL,
[VATAmount] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_NO_BC_PurchaseInvoice]'
GO




CREATE VIEW [stage].[vCER_NO_BC_PurchaseInvoice] AS

SELECT 

	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierNum), '#', TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine), '#', TRIM(PurchaseInvoiceNum), '#', TRIM(PurchaseInvoiceLine), '#',TRIM(PartNum), '#', TRIM(WarehouseCode))))) AS PurchaseInvoiceID
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseInvoiceNum), '#', TRIM(PurchaseInvoiceLine), '#', PartNum)) AS PurchaseInvoiceCode
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum))) AS PurchaseOrderNumCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum),'#',TRIM(PurchaseOrderLine))))) AS PurchaseOrderID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum))))) AS SupplierID
    ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(WarehouseCode))))) AS WarehouseID
	,CONVERT(int, replace(convert(date,PurchaseInvoiceDate),'-','')) AS PurchaseInvoiceDateID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#', TRIM(SupplierNum), '#', TRIM(PurchaseInvoiceNum))))) AS PurchaseLedgerID 
	,UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum),'#',TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine))) AS PurchaseOrderCode
	,PartitionKey

	,UPPER(TRIM([Company])) AS [Company]
    ,UPPER(TRIM([PurchaseInvoiceNum])) as PurchaseInvoiceNum
    ,UPPER(TRIM([PurchaseInvoiceLine]))as PurchaseInvoiceLine
    ,UPPER(TRIM([PurchaseOrderNum]))as PurchaseOrderNum
    ,UPPER(TRIM([PurchaseOrderLine]))as PurchaseOrderLine
    ,cast([PurchaseInvoiceDate] as date )as PurchaseInvoiceDate
    ,cast([ActualDelivDate] as date ) as ActualDelivDate
    ,[IsInvoiceClosed]
    ,UPPER(TRIM([SupplierNum])) as [SupplierNum]
    ,UPPER(TRIM([PartNum])) as [PartNum]
    ,[PurchaseInvoiceQty]
    ,[UoM]
    ,[UnitPrice]
    ,[DiscountPercent]
    ,[DiscountAmount]
    ,[Currency]
	,[ExchangeRate]
    ,[PurchaserName]
    ,[WarehouseCode]
	,[PurchaseInvoiceType]
   -- ,[ActualShipDate]
    ,[IsActiveRecord]


FROM [stage].[CER_NO_BC_PurchaseInvoice]
GO
PRINT N'Creating [stage].[Nom_All_PartBudget]'
GO
CREATE TABLE [stage].[Nom_All_PartBudget]
(
[﻿Company] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartDescription] [nvarchar] (50) NULL,
[PartDescription2] [nvarchar] (50) NULL,
[PartDescription3] [nvarchar] (50) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[ProductGroup2] [nvarchar] (50) NULL,
[ProductGroup3] [nvarchar] (50) NULL,
[ProductGroup4] [nvarchar] (50) NULL,
[CommodityCode] [nvarchar] (50) NULL,
[CountryOfOrigin] [nvarchar] (50) NULL,
[NetWeight] [nvarchar] (50) NULL,
[PartResponsible] [nvarchar] (50) NULL,
[ParentSupplier] [nvarchar] (50) NULL,
[ReorderLevel] [nvarchar] (50) NULL,
[DiscountGroup] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vNOM_ALL_PartBudget]'
GO

CREATE VIEW [stage].[vNOM_ALL_PartBudget] AS

SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(vp.[Company]),'#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM(vp.[Company])))) AS CompanyID
	,UPPER(CONCAT(TRIM(vp.[Company]),'#',TRIM([PartNum]))) AS PartCode
	,'2022-01-01' AS PartitionKey

	,UPPER(TRIM(vp.[Company])) AS Company
	,UPPER(TRIM([PartNum])) AS PartNum
	,UPPER(TRIM([PartNum])) AS [PartName]
	,[PartDescription]
	,[PartDescription2]
	,[PartDescription3]
	,CONCAT(TRIM(vp.ParentSupplier), '-', TRIM(vs.SupplierName)) AS MainSupplier
	,ParentSupplier AS AlternativeSupplier
	,[ProductGroup]
	,[ProductGroup2]
	,[ProductGroup3]
	,[ProductGroup4]
	,'' AS [Brand]
	,[CommodityCode]
	,'' AS PartReplacementNum
	,'' AS PartStatus
	,[CountryOfOrigin]
	,null AS [NetWeight]
	,'' AS [UoM]
	,'' AS [Material]
	,'' AS [Barcode]
	,null AS [ReOrderLevel]
	,PartResponsible
	,'' AS [StartDate]
	,'' AS [EndDate]
FROM [stage].[NOM_ALL_PartBudget] vp
LEFT JOIN  [dw].[vAll_Supplier] vs ON vp.Company = vs.Company AND vp.ParentSupplier = vs.SupplierNum
--GROUP BY
--	PartitionKey, vp.Company, PartNum, PartDescription, PartDescription2, ProductGroup, ProductGroup2, ProductGroup3, ProductGroup4, CommodityCode, CountryOfOrigin, NetWeight, ReorderLevel, PartResponsible, DiscountGroup, SupplierCode
GO
PRINT N'Creating [prestage].[TRA_FR_Part_Load]'
GO

CREATE PROCEDURE [prestage].[TRA_FR_Part_Load] AS
BEGIN

Truncate table stage.[TRA_FR_Part]

INSERT INTO 
	stage.TRA_FR_Part 
	(PartitionKey, Company, PartNum, PartName, PartDescription, PartDescription2, PartDescription3, ProductGroup, ProductGroup2, ProductGroup3, ProductGroup4, Brand, CommodityCode, PartReplacementNum, PartStatus, CountryOfOrigin, NetWeight, UoM, MainSupplier, AlternativeSupplier)
SELECT 
	PartitionKey, Company, PartNum, PartName, PartDescription, PartDescription2, PartDescription3, ProductGroup, ProductGroup2, ProductGroup3, ProductGroup4, Brand, CommodityCode, PartReplacementNum, PartStatus, CountryOfOrigin, NetWeight, UoM, MainSupplier, AlternativeSupplier
FROM 
	[prestage].[vTRA_FR_Part]

--Truncate table prestage.[TRA_FR_Part]

End
GO
PRINT N'Creating [stage].[JEN_NB_SalesLedger]'
GO
CREATE TABLE [stage].[JEN_NB_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL
)
GO
PRINT N'Creating [stage].[vJEN_NB_SalesLedger]'
GO
CREATE VIEW [stage].[vJEN_NB_SalesLedger] AS
--COMMENT EMPTY FIELDS // ADD TRIM() INTO CustomerID 23-01-03 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company,'#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ), '#', InvoiceNum)))) AS SalesLedgerID,
	--CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ), '#', InvoiceNum)))) AS SalesLedgerID
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID,
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID,
	--CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ))))) AS CustomerID,
	CONCAT(Company,'#', TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) ), '#', InvoiceNum) AS SalesLedgerCode,
	PartitionKey,

	UPPER(Company) AS Company,
	UPPER(TRIM(IIF(CustNum IS NULL OR CustNum = '', 'MISSINGCUSTOMER', CustNum) )) AS CustomerNum,
	TRIM(InvoiceNum) AS SalesInvoiceNum,
	CONVERT(date, InvoiceDate) AS SalesInvoiceDate,
	CONVERT(date, DueDate) AS SalesDueDate,
	CONVERT(date, LastPaymentDate) AS SalesLastPaymentDate,
	--NULL AS InvoiceAmount,
	--NULL AS PaidInvoiceAmount,
	--NULL AS RemainingInvoiceAmount,
	1 AS ExchangeRate,
	'NOK' AS Currency
	--NULL AS VATAmount,
	--'' AS VATCode,
	--'' AS PayToName,
	--'' AS PayToCity,
	--'' AS PayToContact,
	--'' AS PaymentTerms,
	--'' AS SLRes1,
	--'' AS SLRes2,
	--'' AS SLRes3
	--,'' AS AccountingDate
	--,'' AS AgingPeriod
	--,'' AS AgingSort
	--,'' AS VATCodeDesc
	--,'' AS LinkToOriginalInvoice
FROM 
	stage.JEN_NB_SalesLedger
GO
PRINT N'Creating [stage].[OCS_SE_OLine]'
GO
CREATE TABLE [stage].[OCS_SE_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[NeedByDate] [date] NULL,
[DelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (1) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[SalesPerson_Rsp] [nvarchar] (50) NULL,
[SalesPerson_Seller] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[BusinessChain] [nvarchar] (50) NULL,
[ProjectNum] [nvarchar] (50) NULL,
[Res1_PriceGroup] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vOCS_SE_OLine]'
GO
CREATE VIEW [stage].[vOCS_SE_OLine] AS
--COMMENT EMPTY FIELDS // ADD UPPER()TRIM() INTO PartID,CustomerID 2022-12-21 VA
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', OrderNum, '#', OrderLine, '#', InvoiceNum))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(CustNum)))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(PartNum)))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', WarehouseCode))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum)))) AS SalesOrderNumID
	,CONVERT(int, replace(convert(date, OrderDate), '-', '')) AS SalesOrderDateID  --redundent?
	,CONCAT(Company, '#', OrderNum, '#', OrderLine, '#', InvoiceNum) AS SalesOrderCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#',[ProjectNum]) ))	AS ProjectID
	,PartitionKey

	,Company
	,TRIM(CustNum) AS CustomerNum
	,OrderNum AS SalesOrderNum
	,OrderLine AS SalesOrderLine
	,OrderSubLine AS SalesOrderSubLine
	,CONVERT(nvarchar(50), OrderType) AS SalesOrderType
	,Res1_PriceGroup AS [SalesOrderCategory]
	,OrderDate AS SalesOrderDate
	,NeedByDate AS NeedbyDate
	,DelivDate AS ExpDelivDate
	,CAST('1900-01-01' AS date) AS ActualDelivDate
	,CAST('1900-01-01' AS date) AS ConfirmedDelivDate
	,InvoiceNum AS SalesInvoiceNum
	,OrderQty AS SalesOrderQty
	,DelivQty
	,RemainingQty
	--,NULL AS SalesInvoiceQty
	,Unit AS UoM
	,UnitPrice
	,UnitCost
	,Currency
	,ExchangeRate
	,OpenRelease
	,DiscountAmount
	,DiscountPercent
	,TRIM(PartNum) AS PartNum
	--,'' AS PartType
	,PartStatus
	,SalesPerson_Seller AS SalesPersonName
	,TRIM(WarehouseCode) AS WarehouseCode
	,SalesChannel
	,'Normal Order Handling' AS AxInterSalesChannel
	,BusinessChain AS Department
	,[ProjectNum]
	--,'' AS [IndexKey]
	--,'0' AS Cancellation
	,[SalesPerson_Seller] AS SORes1
	--,'' AS SORes2
	--,'' AS SORes3
	--,NULL AS [TotalMiscChrg]
FROM stage.OCS_SE_OLine
GO
PRINT N'Creating [dm_FH].[fctPurchaseOrder]'
GO
CREATE VIEW [dm_FH].[fctPurchaseOrder] AS

SELECT 
 po.[PurchaseOrderID]
,po.[PurchaseOrderNumID]
,po.[PurchaseInvoiceID]
,po.[CompanyID]
,po.[SupplierID]
,po.[CustomerID]
,po.[PartID]
,po.[WarehouseID]
,po.[CurrencyID]
,po.[PurchaseOrderDateID]
,po.[PurchaseInvoiceDateID]
,po.[Company]
,po.[PurchaseOrderNum]
,po.[PurchaseOrderLine]
,po.[PurchaseOrderSubLine]
,po.[PurchaseOrderType]
,po.[PurchaseOrderDate]
,po.[PurchaseOrderStatus]
,po.[OrgReqDelivDate]
,po.[CommittedDelivDate]
,po.[CommittedShipDate]
,po.[ActualDelivDate]
,po.[ReqDelivDate]
,po.[PurchaseInvoiceNum]
,po.[PartNum]
,po.[SupplierNum]
,po.[SupplierPartNum]
,po.[SupplierInvoiceNum]
,po.[DelivCustomerNum]
,po.[PartStatus]
,po.[OrderQty]
,po.[ReceiveQty]
,po.[InvoiceQty]
,po.[MinOrderQty]
,po.[UoM]
,po.[UnitPrice]
,po.[DiscountPercent]
,po.[DiscountAmount]
,po.[ExchangeRate]
,po.[Currency]
,po.[PurchaserName]
,po.[WarehouseCode]
,po.[ReceivingNum]
,po.[DelivTime]
,po.[PurchaseChannel]
,po.[Documents]
,po.[Comments]
,po.[PORes1]
,po.[PORes2]
,po.[PORes3]
,po.[InvoiceStatus]
,po.[DaysSinceOrder]
,po.[OrgCommittedDelivDate]
,po.[IsOrderClosed]

FROM [dm].[FactPurchaseOrder] po
LEFT JOIN dbo.Company com ON po.Company = com.Company
WHERE com.BusinessArea = 'Fluid Handling Solutions' AND com.[Status] = 'Active'
GO
PRINT N'Creating [stage].[vCER_NO_BC_SalesInvoice]'
GO



CREATE VIEW [stage].[vCER_NO_BC_SalesInvoice] AS 
SELECT 
	CONVERT(binary(32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine), '#', TRIM(PartNum),'#',UPPER(type))))) AS SalesInvoiceID,
	CONVERT(binary(32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID,
	CONVERT(binary(32), HASHBYTES('SHA2_256', CONCAT(Company, '#', OrderNum, '#', OrderLine, '#', CustNum))) AS SalesOrderID, -- SB add 2022-12-08
	CONVERT(int, replace(convert(date,InvoiceDate),'-','')) AS SalesInvoiceDateID,  -- SB added 2023-02-01
	CONVERT(binary(32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID, -- SB add 2022-11-15
	CONVERT(binary(32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID, -- SB add 2022-11-15
	CONVERT(binary(32), HASHBYTES('SHA2_256', TRIM(Company))) AS CompanyID,
	CONCAT(Company, '#', OrderNum, '#', OrderLine, '#', CustNum) as SalesOrderCode,
	
	PartitionKey,
	Company,
	cast(InvoiceDate as Date) as SalesInvoiceDate,
	cast(ActualDeliveryDate as Date) as ActualDelivDate,
	nullif(TRIM(SalesPersonName),'') AS SalesPersonName,
	nullif(trim(CustNum),'') as CustomerNum,
	nullif(trim(OrderNum),'') as SalesOrderNum,
	nullif(trim(OrderLine),'') as SalesOrderLine,
	nullif(trim(InvoiceNum),'') as SalesInvoiceNum,
	nullif(trim(InvoiceLine),'') as SalesInvoiceLine,
	nullif(trim(PartNum),'') as PartNum,
	cast(SalesInvoiceQty as decimal(9,2)) as SalesInvoiceQty,
	cast(UnitPrice as decimal(9,2)) as UnitPrice,
	cast(UnitCost as decimal(9,2)) as UnitCost,
	cast(VAT as decimal(9,2)) as VATAmount,
	nullif(trim(Currency),'') as Currency,
	cast(ExchangeRate as decimal(9,6)) as ExchangeRate,
	--nullif(trim(WarehouseCode),'') as WarehouseCode,
	case when TRIM(Department) = '110584' then 'SERV'
		else nullif(trim(WarehouseCode),'') 
	end as WarehouseCode,
	nullif(trim(ReturnNum),'') as ReturnNum,
	nullif(trim(ReturnComment),'') as ReturnComment,
	case when trim(Type) = 'Credit invoice' then 1 else 0 end as CreditMemo,
	trim(type) as SalesInvoiceType,
	Department,
	CAST(DiscountAmount as decimal(18,4)) as DiscountAmount,
	WarehouseCodeLines as SIRes1
    --,systemCreatedAt
	--,systemModifiedAt
FROM 
	 stage.CER_NO_BC_SalesInvoice
where Cancelled != 'True'
	--where InvoiceNum = '5000674' and InvoiceLine = '60000'
GO
PRINT N'Creating [stage].[NOM_FI_StockTransaction]'
GO
CREATE TABLE [stage].[NOM_FI_StockTransaction]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[IndexKey] [nvarchar] (50) NOT NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[TransactionCode] [nvarchar] (50) NULL,
[TransactionDescription] [varchar] (100) NULL,
[TransactionType] [nvarchar] (50) NULL,
[IssuerReceiverNum] [nvarchar] (50) NULL,
[OrderNum] [nchar] (50) NULL,
[OrderLine] [nchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[BinNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[TransactionDate] [date] NULL,
[TransactionTime] [nvarchar] (10) NULL,
[CreateDate] [date] NULL,
[FIFOBatchID] [nvarchar] (50) NULL,
[SupplierBatchID] [nvarchar] (50) NULL,
[TransactionQty] [decimal] (18, 4) NULL,
[TransactionValue] [decimal] (18, 4) NULL,
[CostPrice] [decimal] (18, 4) NULL,
[SalesUnitPrice] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (10) NULL,
[Reference] [nvarchar] (50) NULL,
[AdjustmentDate] [date] NULL,
[InternalExternal] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vNOM_FI_StockTransaction]'
GO

CREATE VIEW [stage].[vNOM_FI_StockTransaction] AS 
--ADD TRIM()UPPER() INTRO PartID,CustomerID 2022-12-15 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company], '#', TRIM(IndexKey)))) AS StockTransactionID
	,UPPER([Company]) AS [Company]
	,UPPER(TRIM([WarehouseCode])) AS WarehouseCode
	,TransactionCode
	,TransactionType AS TransactionDescription
	,IIF(TRIM(IssuerReceiverNum)='', NULL,TRIM(IssuerReceiverNum)) AS IssuerReceiverNum
	,IIF(TRIM([OrderNum])='', NULL,TRIM(OrderNum)) AS OrderNum
	,OrderLine
	,IIF(TRIM([InvoiceNum])='', NULL,TRIM(InvoiceNum)) AS InvoiceNum
	,InvoiceLine
	,UPPER(TRIM([PartNum])) AS [PartNum]
	,IIF(TRIM([BinNum])='', NULL,TRIM(BinNum)) AS BinNum
	,IIF(TRIM([BatchNum])='', NULL,TRIM(BatchNum)) AS BatchNum
	,CONVERT(date, TransactionDate) AS TransactionDate
	,TransactionTime
	,TransactionQty
	,TransactionValue
	,[CostPrice]
	,SalesUnitPrice
	,IIF(TRIM([Currency])='', NULL,TRIM(Currency)) AS Currency
	,[Reference]
	,CONVERT(date, AdjustmentDate) AS AdjustmentDate
	,IIF(InternalExternal = 'I', 'Internal', 'External') AS InternalExternal
	,CreateDate AS STRes1
	,FIFOBatchID AS STRes2
	,TransactionDescription AS STRes3

	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
    --,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT([Company],'#',TRIM([PartNum]))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,IIF(TransactionCode in ('930', '931', '936', '907', '912', '913'), CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM([InvoiceNum])))), NULL) AS PurchaseInvoiceID

	,IIF(TransactionCode in ('930', '931', '936', '907', '912', '913'), CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company],'#',TRIM([OrderNum]))))), NULL) AS PurchaseOrderNumID
	,IIF(TransactionCode in ('800', '801', '815'), CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company],'#',TRIM([OrderNum]))))), NULL) AS SalesOrderNumID
	,IIF(TransactionCode in ('800', '801', '815'), CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company],'#',TRIM([InvoiceNum]))))), NULL) AS SalesInvoiceID
	--,IIF(TransactionCode in ('800', '801', '815'), CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT([Company],'#',TRIM(IssuerReceiverNum)))), NULL) AS CustomerID
	,IIF(TransactionCode in ('800', '801', '815'), CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT([Company],'#',TRIM(IssuerReceiverNum))))), NULL) AS CustomerID
	,IIF(TransactionCode in ('930', '931', '936', '907', '912', '913'), CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT([Company],'#',TRIM(IssuerReceiverNum)))), NULL) AS SupplierID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Currency])))) AS CurrencyID
	,PartitionKey
	,IndexKey

FROM [stage].[NOM_FI_StockTransaction]
GO
PRINT N'Creating [dbo].[AzureSQLMaintenanceLog]'
GO
CREATE TABLE [dbo].[AzureSQLMaintenanceLog]
(
[id] [bigint] NOT NULL IDENTITY(1, 1),
[OperationTime] [datetime2] NULL,
[command] [varchar] (4000) NULL,
[ExtraInfo] [varchar] (4000) NULL,
[StartTime] [datetime2] NULL,
[EndTime] [datetime2] NULL,
[StatusMessage] [varchar] (1000) NULL
)
GO
PRINT N'Creating primary key [PK__AzureSQL__3213E83F1D80957F] on [dbo].[AzureSQLMaintenanceLog]'
GO
ALTER TABLE [dbo].[AzureSQLMaintenanceLog] ADD CONSTRAINT [PK__AzureSQL__3213E83F1D80957F] PRIMARY KEY CLUSTERED ([id])
GO
PRINT N'Creating [dbo].[AzureSQLMaintenance]'
GO
CREATE Procedure [dbo].[AzureSQLMaintenance]
	(
		@operation nvarchar(10) = null,
		@mode nvarchar(10) = 'smart',
		@ResumableIndexRebuild bit = 0,
		@RebuildHeaps bit = 0,
		@LogToTable bit = 0,
		@debug nvarchar = 'none'
	)
as
begin
	set nocount on;
	
	---------------------------------------------
	--- Varialbles and pre conditions check
	---------------------------------------------

	set quoted_identifier on;
	declare @idxIdentifierBegin char(1), @idxIdentifierEnd char(1);
	declare @statsIdentifierBegin char(1), @statsIdentifierEnd char(1);
	
	declare @msg nvarchar(max);
	declare @minPageCountForIndex int = 40;
	declare @OperationTime datetime2 = sysdatetime();
	declare @KeepXOperationInLog int =3;
	declare @ScriptHasAnError int = 0; 
	declare @ResumableIndexRebuildSupported int;
	declare @indexStatsMode sysname;

	/* make sure parameters selected correctly */
	set @operation = lower(@operation)
	set @mode = lower(@mode)
	set @debug = lower(@debug) /* any value at this time will produce the temp tables as permanent tables */
	
	if @mode not in ('smart','dummy')
		set @mode = 'smart'

	---------------------------------------------
	--- Begin
	---------------------------------------------

	if @operation not in ('index','statistics','all') or @operation is null
	begin
		raiserror('@operation (varchar(10)) [mandatory]',0,0)
		raiserror(' Select operation to perform:',0,0)
		raiserror('     "index" to perform index maintenance',0,0)
		raiserror('     "statistics" to perform statistics maintenance',0,0)
		raiserror('     "all" to perform indexes and statistics maintenance',0,0)
		raiserror(' ',0,0)
		raiserror('@mode(varchar(10)) [optional]',0,0)
		raiserror(' optionaly you can supply second parameter for operation mode: ',0,0)
		raiserror('     "smart" (Default) using smart decision about what index or stats should be touched.',0,0)
		raiserror('     "dummy" going through all indexes and statistics regardless thier modifications or fragmentation.',0,0)
		raiserror(' ',0,0)
		raiserror('@ResumableIndexRebuild(bit) [optional]',0,0)
		raiserror(' optionaly you can choose to rebuild indexes as resumable operation: ',0,0)
		raiserror('     "0" (Default) using non resumable index rebuild.',0,0)
		raiserror('     "1" using resumable index rebuild when it is supported.',0,0)
		raiserror(' ',0,0)
		raiserror('@RebuildHeaps(bit) [optional]',0,0)
		raiserror(' Logging option: @LogToTable(bit)',0,0)
		raiserror('     0 - (Default) do not log operation to table',0,0)
		raiserror('     1 - log operation to table',0,0)
		raiserror('		for logging option only 3 last execution will be kept by default. this can be changed by easily in the procedure body.',0,0)
		raiserror('		Log table will be created automatically if not exists.',0,0)
		raiserror(' ',0,0)
		raiserror('@LogToTable(bit) [optional]',0,0)
		raiserror(' Rebuild HEAPS to fix forwarded records issue on tables with no clustered index',0,0)
		raiserror('     0 - (Default) do not rebuild heaps',0,0)
		raiserror('     1 - Rebuild heaps based on @mode parameter, @mode=dummy will rebuild all heaps',0,0)
		raiserror(' ',0,0)
		raiserror('Example:',0,0)
		raiserror('		exec  AzureSQLMaintenance ''all'', @LogToTable=1',0,0)

	end
	else 
	begin
		
		---------------------------------------------
		--- Prepare log table
		---------------------------------------------

		/* Prepare Log Table */
		if object_id('AzureSQLMaintenanceLog') is null and @LogToTable=1
		begin
			create table AzureSQLMaintenanceLog (id bigint primary key identity(1,1), OperationTime datetime2, command varchar(4000),ExtraInfo varchar(4000), StartTime datetime2, EndTime datetime2, StatusMessage varchar(1000));
		end

		---------------------------------------------
		--- Resume operation
		---------------------------------------------

		/*Check is there is operation to resume*/
		if OBJECT_ID('AzureSQLMaintenanceCMDQueue') is not null 
		begin
			if 
				/*resume information exists*/ exists(select * from AzureSQLMaintenanceCMDQueue where ID=-1) 
			begin
				/*resume operation confirmed*/
				set @operation='resume' -- set operation to resume, this can only be done by the proc, cannot get this value as parameter

				-- restore operation parameters 
				select top 1
				@LogToTable = JSON_VALUE(ExtraInfo,'$.LogToTable')
				,@mode = JSON_VALUE(ExtraInfo,'$.mode')
				,@ResumableIndexRebuild = JSON_VALUE(ExtraInfo,'$.ResumableIndexRebuild')
				from AzureSQLMaintenanceCMDQueue 
				where ID=-1
				
				raiserror('-----------------------',0,0)
				set @msg = 'Resuming previous operation'
				raiserror(@msg,0,0)
				raiserror('-----------------------',0,0)
			end
			else
				begin
					-- table [AzureSQLMaintenanceCMDQueue] exist but resume information does not exists
					-- this might happen in case execution intrupted between collecting index & ststistics information and executing commands.
					-- to fix that we drop the table now, it will be recreated later 
					DROP TABLE [AzureSQLMaintenanceCMDQueue];
				end
		end


		---------------------------------------------
		--- Report operation parameters
		---------------------------------------------
		
		/*Write operation parameters*/
		raiserror('-----------------------',0,0)
		set @msg = 'set operation = ' + @operation;
		raiserror(@msg,0,0)
		set @msg = 'set mode = ' + @mode;
		raiserror(@msg,0,0)
		set @msg = 'set ResumableIndexRebuild = ' + cast(@ResumableIndexRebuild as varchar(1));
		raiserror(@msg,0,0)
		set @msg = 'set RebuildHeaps = ' + cast(@RebuildHeaps as varchar(1));
		raiserror(@msg,0,0)
		set @msg = 'set LogToTable = ' + cast(@LogToTable as varchar(1));
		raiserror(@msg,0,0)
		raiserror('-----------------------',0,0)
	end

	if @LogToTable=1 insert into AzureSQLMaintenanceLog values(@OperationTime,null,null,sysdatetime(),sysdatetime(),'Starting operation: Operation=' +@operation + ' Mode=' + @mode + ' Keep log for last ' + cast(@KeepXOperationInLog as varchar(10)) + ' operations' )	

	-- create command queue table, if there table exits then we resume operation in earlier stage.
	if @operation!='resume'
		create table AzureSQLMaintenanceCMDQueue (ID int identity primary key,txtCMD nvarchar(max),ExtraInfo varchar(max))

	---------------------------------------------
	--- Check if engine support resumable index operation
	---------------------------------------------
	if @ResumableIndexRebuild=1 
	begin
		if cast(SERVERPROPERTY('EngineEdition')as int)>=5 or cast(SERVERPROPERTY('ProductMajorVersion')as int)>=14
		begin
			set @ResumableIndexRebuildSupported=1;
		end
		else
		begin 
				set @ResumableIndexRebuildSupported=0;
				set @msg = 'Resumable index rebuild is not supported on this database'
				raiserror(@msg,0,0)
				if @LogToTable=1 insert into AzureSQLMaintenanceLog values(@OperationTime,null,null,sysdatetime(),sysdatetime(),@msg)	
		end
	end


	---------------------------------------------
	--- Index maintenance
	---------------------------------------------
	if @operation in('index','all')
	begin
		/**/
		if @mode='smart' and @RebuildHeaps=1 
			set @indexStatsMode = 'SAMPLED'
		else
			set @indexStatsMode = 'LIMITED'
	
		raiserror('Get index information...(wait)',0,0) with nowait;
		/* Get Index Information */
		select 
			idxs.[object_id]
			,ObjectSchema = OBJECT_SCHEMA_NAME(idxs.object_id)
			,ObjectName = object_name(idxs.object_id) 
			,IndexName = idxs.name
			,idxs.type
			,idxs.type_desc
			,i.avg_fragmentation_in_percent
			,i.page_count
			,i.index_id
			,i.partition_number
			,i.avg_page_space_used_in_percent
			,i.record_count
			,i.ghost_record_count
			,i.forwarded_record_count
			,null as OnlineOpIsNotSupported
			,null as ObjectDoesNotSupportResumableOperation
			,0 as SkipIndex
			,replicate('',128) as SkipReason
		into #idxBefore
		from sys.indexes idxs
		left join sys.dm_db_index_physical_stats(DB_ID(),NULL, NULL, NULL ,@indexStatsMode) i  on i.object_id = idxs.object_id and i.index_id = idxs.index_id
		where idxs.type in (0 /*HEAP*/,1/*CLUSTERED*/,2/*NONCLUSTERED*/,5/*CLUSTERED COLUMNSTORE*/,6/*NONCLUSTERED COLUMNSTORE*/) 
		and (alloc_unit_type_desc = 'IN_ROW_DATA' /*avoid LOB_DATA or ROW_OVERFLOW_DATA*/ or alloc_unit_type_desc is null /*for ColumnStore indexes*/)
		and OBJECT_SCHEMA_NAME(idxs.object_id) != 'sys'
		and idxs.is_disabled=0
		order by i.avg_fragmentation_in_percent desc, i.page_count desc
				
		-- mark indexes XML,spatial and columnstore not to run online update 
		update #idxBefore set OnlineOpIsNotSupported=1 where [object_id] in (select [object_id] from #idxBefore where [type]=3 /*XML Indexes*/)

		-- mark clustered indexes for tables with 'text','ntext','image' to rebuild offline
		update #idxBefore set OnlineOpIsNotSupported=1 
		where index_id=1 /*clustered*/ and [object_id] in (
			select object_id
			from sys.columns c join sys.types t on c.user_type_id = t.user_type_id
			where t.name in ('text','ntext','image')
		)
	
		-- do all as offline for box edition that does not support online
		update #idxBefore set OnlineOpIsNotSupported=1  
			where /* Editions that does not support online operation in case this has been used with on-prem server */
				convert(varchar(100),serverproperty('Edition')) like '%Express%' 
				or convert(varchar(100),serverproperty('Edition')) like '%Standard%'
				or convert(varchar(100),serverproperty('Edition')) like '%Web%'
		
		-- Do non resumable operation when index contains computed column or timestamp data type
		update idx set ObjectDoesNotSupportResumableOperation=1
		from #idxBefore idx join sys.index_columns ic on idx.object_id = ic.object_id and idx.index_id=ic.index_id
		join sys.columns c on ic.object_id=c.object_id and ic.column_id=c.column_id
		where c.is_computed=1 or system_type_id=189 /*TimeStamp column*/
		
		-- set SkipIndex=1 if conditions for maintenance are not met
		-- this is used to idntify is stats need to be updated or not. 
		-- Check#1 - if table is too small
		update #idxBefore set SkipIndex=1,SkipReason='Maintenance is not needed as table is too small'
		where (
					/*Table is small*/
					(page_count<=@minPageCountForIndex)
				)
				and @mode != 'dummy' /*for Dummy mode we do not want to skip anything */
		
		-- Check#2 - if table is not small and fragmentation % is too low 
		update #idxBefore set SkipIndex=1,SkipReason='Maintenance is not needed as fragmentation % is low'
		where (
					/*Table is big enough - but fragmentation is less than 5%*/
					(page_count>@minPageCountForIndex and avg_fragmentation_in_percent<5)
				)
				and @mode != 'dummy' /*for Dummy mode we do not want to skip anything */
		
		-- Skip columnstore indexes
		update #idxBefore set SkipIndex=1,SkipReason='Columnstore index'
		where (
					type in (
								5/*Clustered columnstore index*/,
								6/*Nonclustered columnstore index*/
							)
				)
				and @mode != 'dummy' /*for Dummy mode we do not want to skip anything */

		raiserror('---------------------------------------',0,0) with nowait
		raiserror('Index Information:',0,0) with nowait
		raiserror('---------------------------------------',0,0) with nowait

		select @msg = count(*) from #idxBefore 
		set @msg = 'Total Indexes: ' + @msg
		raiserror(@msg,0,0) with nowait

		select @msg = avg(avg_fragmentation_in_percent) from #idxBefore where page_count>@minPageCountForIndex
		set @msg = 'Average Fragmentation: ' + @msg
		raiserror(@msg,0,0) with nowait

		select @msg = sum(iif(avg_fragmentation_in_percent>=5 and page_count>@minPageCountForIndex,1,0)) from #idxBefore 
		set @msg = 'Fragmented Indexes: ' + @msg
		raiserror(@msg,0,0) with nowait

				
		raiserror('---------------------------------------',0,0) with nowait


		/* Choose the identifier to be used based on existing object name 
			this came up from object that contains '[' within the object name
			such as "EPK[export].[win_sourceofwealthbpf]" as index name
			if we use '[' as identifier it will cause wrong identifier name	
		*/
		if exists(
			select 1
			from #idxBefore 
			where IndexName like '%[%' or IndexName like '%]%'
			or ObjectSchema like '%[%' or ObjectSchema like '%]%'
			or ObjectName like '%[%' or ObjectName like '%]%'
			)
		begin
			set @idxIdentifierBegin = '"'
			set @idxIdentifierEnd = '"'
		end
		else 
		begin
			set @idxIdentifierBegin = '['
			set @idxIdentifierEnd = ']'
		end

			
		/* create queue for indexes */
		insert into AzureSQLMaintenanceCMDQueue(txtCMD,ExtraInfo)
		select 
		txtCMD = 'ALTER INDEX ' + @idxIdentifierBegin + IndexName + @idxIdentifierEnd + ' ON '+ @idxIdentifierBegin + ObjectSchema + @idxIdentifierEnd +'.'+ @idxIdentifierBegin + ObjectName + @idxIdentifierEnd + ' ' +
		case when (
					avg_fragmentation_in_percent between 5 and 30 and @mode = 'smart')/* index fragmentation condition */ 
					or 
					(@mode='dummy' and type in (5,6)/* Columnstore indexes in dummy mode -> reorganize them */
				) then
			 'REORGANIZE;'
			when OnlineOpIsNotSupported=1 then
			'REBUILD WITH(ONLINE=OFF,MAXDOP=1);'
			when ObjectDoesNotSupportResumableOperation=1 or @ResumableIndexRebuildSupported=0 or @ResumableIndexRebuild=0 then
			'REBUILD WITH(ONLINE=ON,MAXDOP=1);'
			else
			'REBUILD WITH(ONLINE=ON,MAXDOP=1, RESUMABLE=ON);'
		end
		, ExtraInfo = 
			case when type in (5,6) then
				'Dummy mode, reorganize columnstore indexes'
			else 
				'Current fragmentation: ' + format(avg_fragmentation_in_percent/100,'p')+ ' with ' + cast(page_count as nvarchar(20)) + ' pages'
			end
		from #idxBefore
		where SkipIndex=0 and type != 0 /*Avoid HEAPS*/


		---------------------------------------------
		--- Index - Heaps 
		---------------------------------------------

		/* create queue for heaps */
		if @RebuildHeaps=1 
		begin
			insert into AzureSQLMaintenanceCMDQueue(txtCMD,ExtraInfo)
			select 
			txtCMD = 'ALTER TABLE ' + @idxIdentifierBegin + ObjectSchema + @idxIdentifierEnd +'.'+ @idxIdentifierBegin + ObjectName + @idxIdentifierEnd + ' REBUILD;' 
			, ExtraInfo = 'Rebuilding heap - forwarded records ' + cast(forwarded_record_count as varchar(100)) + ' out of ' + cast(record_count as varchar(100)) + ' record in the table'
			from #idxBefore
			where
				type = 0 /*heaps*/
				and 
					(
						@mode='dummy' 
						or 
						(forwarded_record_count/nullif(record_count,0)>0.3) /* 30% of record count */
						or
						(forwarded_record_count>105000) /* for tables with > 350K rows dont wait for 30%, just run yje maintenance once we reach the 100K forwarded records */
					)
		end /* create queue for heaps */
	end



	---------------------------------------------
	--- Statistics maintenance
	---------------------------------------------

	if @operation in('statistics','all')
	begin 
		/*Gets Stats for database*/
		raiserror('Get statistics information...',0,0) with nowait;
		select 
			ObjectSchema = OBJECT_SCHEMA_NAME(s.object_id)
			,ObjectName = object_name(s.object_id) 
			,s.object_id
			,s.stats_id
			,StatsName = s.name
			,sp.last_updated
			,sp.rows
			,sp.rows_sampled
			,sp.modification_counter
			, i.type
			, i.type_desc
			,0 as SkipStatistics
		into #statsBefore
		from sys.stats s cross apply sys.dm_db_stats_properties(s.object_id,s.stats_id) sp 
		left join sys.indexes i on sp.object_id = i.object_id and sp.stats_id = i.index_id
		where OBJECT_SCHEMA_NAME(s.object_id) != 'sys' and /*Modified stats or Dummy mode*/(isnull(sp.modification_counter,0)>0 or @mode='dummy')
		order by sp.last_updated asc

		/*Remove statistics if it is handled by index rebuild / reorginize 
		I am removing statistics based on existance on the index in the list because for indexes with <5% changes we do not apply
		any action - therefore we might decide to update statistics */
		if @operation= 'all'
		update _stats set SkipStatistics=1 
			from #statsBefore _stats
			join #idxBefore _idx
			on _idx.ObjectSchema = _stats.ObjectSchema
			and _idx.ObjectName = _stats.ObjectName
			and _idx.IndexName = _stats.StatsName 
			where _idx.SkipIndex=0

		/*Skip statistics for Columnstore indexes*/
		update #statsBefore set SkipStatistics=1
		where type in (5,6) /*Column store indexes*/

		/*Skip statistics if resumable operation is pause on the same object*/
		if @ResumableIndexRebuildSupported=1
		begin
			update _stats set SkipStatistics=1
			from #statsBefore _stats join sys.index_resumable_operations iro on _stats.object_id=iro.object_id and _stats.stats_id=iro.index_id
		end
		
		raiserror('---------------------------------------',0,0) with nowait
		raiserror('Statistics Information:',0,0) with nowait
		raiserror('---------------------------------------',0,0) with nowait

		select @msg = sum(modification_counter) from #statsBefore
		set @msg = 'Total Modifications: ' + @msg
		raiserror(@msg,0,0) with nowait
		
		select @msg = sum(iif(modification_counter>0,1,0)) from #statsBefore
		set @msg = 'Modified Statistics: ' + @msg
		raiserror(@msg,0,0) with nowait
				
		raiserror('---------------------------------------',0,0) with nowait

		/* Choose the identifier to be used based on existing object name */
		if exists(
			select 1
			from #statsBefore 
			where StatsName like '%[%' or StatsName like '%]%'
			or ObjectSchema like '%[%' or ObjectSchema like '%]%'
			or ObjectName like '%[%' or ObjectName like '%]%'
			)
		begin
			set @statsIdentifierBegin = '"'
			set @statsIdentifierEnd = '"'
		end
		else 
		begin
			set @statsIdentifierBegin = '['
			set @statsIdentifierEnd = ']'
		end
		
		/* create queue for update stats */
		insert into AzureSQLMaintenanceCMDQueue(txtCMD,ExtraInfo)
		select 
		txtCMD = 'UPDATE STATISTICS '+ @statsIdentifierBegin + ObjectSchema + +@statsIdentifierEnd + '.'+@statsIdentifierBegin + ObjectName + @statsIdentifierEnd +' (' + @statsIdentifierBegin + StatsName + @statsIdentifierEnd + ') WITH FULLSCAN;'
		, ExtraInfo = '#rows:' + cast([rows] as varchar(100)) + ' #modifications:' + cast(modification_counter as varchar(100)) + ' modification percent: ' + format((1.0 * modification_counter/ rows ),'p')
		from #statsBefore
		where SkipStatistics=0;
	end

	if @operation in('statistics','index','all','resume')
	begin

		declare @SQLCMD nvarchar(max);
		declare @ID int;
		declare @ExtraInfo nvarchar(max);
	
		/*Print debug information in case debug is activated */
		if @debug!='None'
		begin
			drop table if exists idxBefore
			drop table if exists statsBefore
			drop table if exists cmdQueue
			if object_id('tempdb..#idxBefore') is not null select * into idxBefore from #idxBefore
			if object_id('tempdb..#statsBefore') is not null select * into statsBefore from #statsBefore
			if object_id('tempdb..AzureSQLMaintenanceCMDQueue') is not null select * into cmdQueue from AzureSQLMaintenanceCMDQueue
		end

		/*Save current execution parameters in case resume is needed */
		if @operation!='resume'
		begin
			set @ExtraInfo = (select top 1 LogToTable = @LogToTable, operation=@operation, operationTime=@OperationTime, mode=@mode, ResumableIndexRebuild = @ResumableIndexRebuild from sys.tables for JSON path, WITHOUT_ARRAY_WRAPPER)
			set identity_insert AzureSQLMaintenanceCMDQueue on
			insert into AzureSQLMaintenanceCMDQueue(ID,txtCMD,ExtraInfo) values(-1,'parameters to be used by resume code path',@ExtraInfo)
			set identity_insert AzureSQLMaintenanceCMDQueue off
		end
	
		---------------------------------------------
		--- Executing commands
		---------------------------------------------
		/*
		needed to rebuild indexes on comuted columns
		if ANSI_WARNINGS is set to OFF we might get the followin exception:
			Msg 1934, Level 16, State 1, Line 2
			ALTER INDEX failed because the following SET options have incorrect settings: 'ANSI_WARNINGS'. Verify that SET options are correct for use with indexed views and/or indexes on computed columns and/or filtered indexes and/or query notifications and/or XML data type methods and/or spatial index operations.
		*/
		SET ANSI_WARNINGS ON;

		raiserror('Start executing commands...',0,0) with nowait
		declare @T table(ID int, txtCMD nvarchar(max),ExtraInfo nvarchar(max));
		while exists(select * from AzureSQLMaintenanceCMDQueue where ID>0)
		begin
			update top (1) AzureSQLMaintenanceCMDQueue set txtCMD=txtCMD output deleted.* into @T where ID>0;
			select top (1) @ID = ID, @SQLCMD = txtCMD, @ExtraInfo=ExtraInfo from @T
			raiserror(@SQLCMD,0,0) with nowait
			if @LogToTable=1 insert into AzureSQLMaintenanceLog values(@OperationTime,@SQLCMD,@ExtraInfo,sysdatetime(),null,'Started')
			begin try
				exec(@SQLCMD)	
				if @LogToTable=1 update AzureSQLMaintenanceLog set EndTime = sysdatetime(), StatusMessage = 'Succeeded' where id=SCOPE_IDENTITY()
			end try
			begin catch
				set @ScriptHasAnError=1;
				set @msg = 'FAILED : ' + CAST(ERROR_NUMBER() AS VARCHAR(50)) + ERROR_MESSAGE();
				raiserror(@msg,0,0) with nowait
				if @LogToTable=1 update AzureSQLMaintenanceLog set EndTime = sysdatetime(), StatusMessage = @msg where id=SCOPE_IDENTITY()
			end catch
			delete from AzureSQLMaintenanceCMDQueue where ID = @ID;
			delete from @T
		end
		drop table AzureSQLMaintenanceCMDQueue;
	end
	
	---------------------------------------------
	--- Clean old records from log table
	---------------------------------------------
	if @LogToTable=1
	begin
		delete from AzureSQLMaintenanceLog 
		from 
			AzureSQLMaintenanceLog L join 
			(select distinct OperationTime from AzureSQLMaintenanceLog order by OperationTime desc offset @KeepXOperationInLog rows) F
				ON L.OperationTime = F.OperationTime
		insert into AzureSQLMaintenanceLog values(@OperationTime,null,cast(@@rowcount as varchar(100))+ ' rows purged from log table because number of operations to keep is set to: ' + cast( @KeepXOperationInLog as varchar(100)),sysdatetime(),sysdatetime(),'Cleanup Log Table')
	end

	if @ScriptHasAnError=0 	raiserror('Done',0,0)
	if @LogToTable=1 insert into AzureSQLMaintenanceLog values(@OperationTime,null,null,sysdatetime(),sysdatetime(),'End of operation')
	if @ScriptHasAnError=1 	raiserror('Script has errors - please review the log.',16,1)
end
GO
PRINT N'Creating [stage].[AXL_SY_OLine]'
GO
CREATE TABLE [stage].[AXL_SY_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderType] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[NeedbyDate] [date] NULL,
[ExpDelivDate] [date] NULL,
[EDCExpDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (10) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[SalesPerson] [nvarchar] (50) NULL,
[WareHouseCode] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[BusinessChain] [nvarchar] (50) NULL,
[SalesOrderCategory] [nvarchar] (100) NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL,
[PartDesc] [nvarchar] (max) NULL,
[APV_Cost_EUR] [nvarchar] (50) NULL,
[APV_Item] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXL_SY_OLine]'
GO

CREATE VIEW [stage].[vAXL_SY_OLine] AS

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(PartDesc))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum), '#', (IIF(TRIM([PartNum]) LIKE 'IACO%' , 'MISC. CHARGES', TRIM(PartDesc) )) )))) AS PartID
	,CONVERT(int, replace(convert(date, OrderDate), '-', '')) AS SalesOrderDateID
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine))) AS SalesOrderCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(CustNum) AS CustomerNum 
	,TRIM(OrderNum) AS [SalesOrderNum]
	,TRIM(OrderLine) AS [SalesOrderLine]
	,TRIM(OrderSubLine) AS [SalesOrderSubLine]
	,CONVERT(nvarchar(50), TRIM(OrderType)) AS [SalesOrderType]
	,TRIM([SalesOrderCategory]) AS [SalesOrderCategory]
	,OrderDate AS [SalesOrderDate]
	,NeedbyDate
	,ExpDelivDate AS [ExpDelivDate]
	,EDCExpDelivDate
	,ActualDelivDate
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,OrderQty AS [SalesOrderQty]
	,DelivQty
	,RemainingQty
	,Unit AS [UoM]
	,UnitPrice
	,UnitCost
	,LEFT(TRIM(Currency), 3) AS Currency
	,ExchangeRate
	,LEFT(TRIM(OpenRelease), 1) AS OpenRelease
	,DiscountAmount
	,DiscountPercent
	,NULL AS CashDiscOffered
	,NULL AS CashDiscUsed
	,TRIM(PartNum) AS PartNum
	,UPPER(PartDesc) AS PartDesc
	,'' AS [PartType]
	,CONVERT(nvarchar(50), PartStatus) AS PartStatus
	,TRIM(SalesPerson) AS [SalesPersonName]
	,TRIM(WareHouseCode) AS WarehouseCode
	,'' AS IndexKey
	,TRIM(SalesChannel) AS SalesChannel
	,TRIM(BusinessChain) AS [Department]
	,Res3 AS [ProjectNum] -- = FreeOfCharge: Y = yes, N = no
	,'' AS Cancellation
	,Res1 AS SORes1
	,Res2 AS SORes2
	,Res3 AS SORes3
FROM stage.AXL_SY_OLine
WHERE OrderDate >= '2015-01-01'
GO
PRINT N'Creating [stage].[OCS_SE_PurchaseOrder]'
GO
CREATE TABLE [stage].[OCS_SE_PurchaseOrder]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (50) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NOT NULL,
[PurchaseOrderLine] [nvarchar] (50) NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NULL,
[PurchaseInvoiceLine] [nvarchar] (50) NULL,
[PurchaseOrderType] [nvarchar] (50) NULL,
[PurchaseOrderDate] [nvarchar] (50) NULL,
[PurchaseOrderStatus] [nvarchar] (50) NULL,
[IsOrderClosed] [nvarchar] (50) NULL,
[OrgReqDelivDate] [nvarchar] (50) NULL,
[OrgCommittedDelivDate] [nvarchar] (50) NULL,
[CommittedDelivDate] [nvarchar] (50) NULL,
[ActualDelivDate] [nvarchar] (50) NULL,
[ActualShipDate] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[SupplierPartNum] [nvarchar] (50) NULL,
[SupplierInvoiceNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[PurchaseOrderQty] [nvarchar] (50) NULL,
[PurchaseReceiveQty] [nvarchar] (50) NULL,
[PurchaseInvoiceQty] [nvarchar] (50) NULL,
[UoM] [nvarchar] (50) NULL,
[UnitPrice] [nvarchar] (50) NULL,
[DiscountPercent] [nvarchar] (50) NULL,
[DiscountAmount] [nvarchar] (50) NULL,
[ExchangeRate] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[PurchaserName] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[DelivTime] [nvarchar] (50) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL,
[IsActiveRecord] [nvarchar] (50) NULL,
[PORes1] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vOCS_SE_PurchaseOrder]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vOCS_SE_PurchaseOrder]	AS 

SELECT 
-------------------------------------------- Keys/ IDs ---------------------------------------------
CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum),'#',TRIM(PurchaseOrderLine))))) AS PurchaseOrderID
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PurchaseInvoiceNum))))) AS PurchaseInvoiceID
--,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(DelivCustomerNum))))) AS CustomerID
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum))))) AS SupplierID
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(PartNum))))) AS PartID
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(WarehouseCode))))) AS WarehouseID
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(TRIM(Company)))) AS CompanyID
,CONVERT(binary(32),HASHBYTES('SHA2_256',UPPER(TRIM(Currency)))) AS CurrencyID
,UPPER(CONCAT(TRIM(Company),'#',TRIM(SupplierNum),'#',TRIM(PurchaseOrderNum), '#', TRIM(PurchaseOrderLine))) AS PurchaseOrderCode
,PartitionKey AS PartitionKey

--------------------------------------------- Regular Fields ---------------------------------------------
---Mandatory Fields ---
,UPPER(TRIM(Company)) AS Company
,UPPER(TRIM(PurchaseOrderNum)) AS PurchaseOrderNum
,UPPER(TRIM(PurchaseOrderLine)) AS PurchaseOrderLine
--,UPPER(TRIM(PurchaseOrderSubLine)) AS PurchaseOrderSubLine
,UPPER(TRIM(PartNum)) AS PartNum
,UPPER(TRIM(SupplierNum)) AS SupplierNum
,UPPER(TRIM(WarehouseCode)) AS WarehouseCode
,CASE WHEN PurchaseOrderDate = '' OR PurchaseOrderDate is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, PurchaseOrderDate) END AS PurchaseOrderDate
,CONVERT(decimal(18,4), Replace(PurchaseOrderQty, ',', '.')) AS PurchaseOrderQty
,CONVERT(decimal(18,4), Replace(PurchaseReceiveQty, ',', '.')) AS ReceiveQty
,CONVERT(decimal(18,4), Replace(PurchaseInvoiceQty, ',', '.')) AS InvoiceQty
,CONVERT(decimal(18,4), Replace(UnitPrice, ',', '.')) AS UnitPrice
,CONVERT(decimal(18,4), Replace(ExchangeRate, ',', '.')) AS ExchangeRate
,UPPER(TRIM(Currency)) AS Currency
,TRIM(IsOrderClosed) AS IsClosed

---Valuable Fields ---
,UPPER(TRIM(PurchaseOrderType)) AS PurchaseOrderType
,UPPER(TRIM(PurchaseOrderStatus)) AS PurchaseOrderStatus
--,CASE WHEN OrgCommittedShipDate = '' OR OrgCommittedShipDate is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, OrgCommittedShipDate) END AS OrgCommittedShipDate
--,CASE WHEN CommittedShipDate = '' OR CommittedShipDate is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, CommittedShipDate) END AS CommittedShipDate
,CASE WHEN ActualShipDate = '' OR ActualShipDate is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, ActualShipDate) END AS ActualShipDate
,CASE WHEN OrgReqDelivDate = '' OR OrgReqDelivDate is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, OrgReqDelivDate) END AS OrgReqDelivDate
,CASE WHEN OrgCommittedDelivDate = '' OR OrgCommittedDelivDate is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, OrgCommittedDelivDate) END AS OrgCommittedDelivDate
,CASE WHEN CommittedDelivDate = '' OR CommittedDelivDate is NULL THEN TRY_CONVERT(date,'1900-01-01') ELSE TRY_CONVERT(date, CommittedDelivDate) END AS CommittedDelivDate
,CASE WHEN ActualDelivDate = '' OR ActualDelivDate is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, ActualDelivDate) END AS ActualDelivDate
,CONVERT(decimal(18,4), Replace(DiscountPercent, ',', '.')) AS DiscountPercent
,CONVERT(decimal(18,4), Replace(DiscountAmount, ',', '.')) AS DiscountAmount
,UPPER(TRIM(PurchaserName)) AS PurchaserName
,TRIM(PartStatus) AS PartStatus

--- Good-to-have Fields ---
,UPPER(TRIM(PurchaseInvoiceNum)) AS PurchaseInvoiceNum
,UPPER(TRIM(SupplierPartNum)) AS SupplierPartNum
,UPPER(TRIM(SupplierInvoiceNum)) AS SupplierInvoiceNum
--,UPPER(TRIM(DelivCustomerNum)) AS DelivCustomerNum
--,CONVERT(decimal(18,4), Replace(MinOrderQty, ',', '.')) AS MinOrderQty
,UPPER(TRIM(UoM)) AS UoM
--,UPPER(TRIM(ReceivingNum)) AS ReceivingNum
,TRIM(DelivTime) AS DelivTime
--,UPPER(TRIM(PurchaseChannel)) AS PurchaseChannel
--,CONVERT(decimal(18,4), Replace(LandedCost, ',', '.')) AS LandedCost
--,UPPER(TRIM(Documents)) AS Documents
--,UPPER(TRIM(Comments)) AS Comments

--------------------------------------------- Meta Data ---------------------------------------------
,CONVERT(date, ModifiedTimeStamp) AS ModifiedTimeStamp
,CONVERT(date, CreatedTimeStamp) AS CreatedTimeStamp
,TRIM(IsActiveRecord) AS IsActiveRecord

--------------------------------------------- Extra Fields ---------------------------------------------
--,UPPER(TRIM(PORes1)) AS PORes1
--,UPPER(TRIM(PORes2)) AS PORes2
--,UPPER(TRIM(PORes3)) AS PORes3

FROM [stage].[OCS_SE_PurchaseOrder]
GO
PRINT N'Creating [dm_FH].[fctPurchaseLedger]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE VIEW [dm_FH].[fctPurchaseLedger] AS
SELECT 

 pl.[PurchaseLedgerID]
,pl.[Company]
,pl.[SupplierNum]
,pl.[PurchaseOrderNum]
,pl.[PurchaseInvoiceNum]
,pl.[PurchaseInvoiceDate]
,pl.[PurchaseDueDate]
,pl.[PurchaseLastPaymentDate]
,pl.[InvoiceAmount]
,pl.[ExchangeRate]
,pl.[Currency]
,pl.[VATAmount]
,pl.[VATCode]
,pl.[PayToName]
,pl.[PayToCity]
,pl.[PayToContact]
,pl.[PaymentTerms]
,pl.[PrePaymentNum]
,pl.[LastPaymentNum]
,pl.[PLRes1]
,pl.[PLRes2]
,pl.[PLRes3]
,pl.[PurchaseLedgerCode]
,pl.[CompanyID]
,pl.[SupplierID]
,pl.[PurchaseInvoiceID]
,pl.[PurchaseOrderNumID]
,pl.[CurrencyID]
,pl.[PurchaseInvoiceDateID]
,pl.[PartitionKey]
,pl.[PaidInvoiceAmount]
,pl.[RemainingInvoiceAmount]
,pl.[AccountingDate]
,pl.[AgingPeriod]
,pl.[AgingSort]
,pl.[VATCodeDesc]
,pl.[LinkToOriginalInvoice]
FROM [dm].[FactPurchaseLedger] pl
LEFT JOIN dbo.Company com ON pl.Company = com.Company
WHERE com.BusinessArea = 'Fluid Handling Solutions' AND com.[Status] = 'Active'
GO
PRINT N'Creating [stage].[NOM_Budget]'
GO
CREATE TABLE [stage].[NOM_Budget]
(
[Company] [nvarchar] (50) NOT NULL,
[Period] [nvarchar] (50) NOT NULL,
[CustomerNum] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[ProductGroup2] [nvarchar] (50) NULL,
[Sales] [decimal] (18, 10) NULL,
[Cost] [decimal] (18, 10) NULL
)
GO
PRINT N'Creating [stage].[vNOM_Budget]'
GO


/****** Script for SelectTopNRows command from SSMS  ******/

CREATE VIEW [stage].[vNOM_Budget] AS
WITH tmp AS (
SELECT 
	   CONVERT(varchar(50), getdate(), 112) AS PartitionKey --Temporary added
	  ,UPPER([Company]) AS Company
      ,DATEFROMPARTS( CAST(LEFT(TRIM([Period]),4)  AS int) --Year
					, CAST(RIGHT(TRIM([Period]),2) AS int) --Month
						, 1) AS PeriodDate
	  ,'Monthly' AS PeriodType
      ,COALESCE(NULLIF(TRIM([CustomerNum]),''), CONCAT('BUD','-' + NULLIF(TRIM(CustomerGroup),''),'-' + NULLIF(TRIM(SalesRepCode),''))) AS CustomerNum
	  ,IIF(NULLIF(TRIM(ProductGroup2),'') IS NOT NULL,  CONCAT('BUD','-' + NULLIF(TRIM(ProductGroup2),'')), '' ) AS PartNum
      ,[CustomerGroup]
      ,[SalesRepCode]
      ,[ProductGroup2]
      ,SUM([Sales]) AS Sales
      ,SUM([Cost]) AS Cost
	  
  FROM [stage].[NOM_Budget]
  GROUP BY Company, [Period],[CustomerNum], [CustomerGroup], [SalesRepCode], [ProductGroup2]
  )

SELECT
	 CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#', PeriodDate, '#', TRIM(CustomerNum), '#', TRIM(PartNum) )))) AS BudgetID
	 ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company),'#',TRIM(CustomerNum))))) AS CustomerID
	 ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(TRIM([Company])))) AS CompanyID
	 ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([PartNum]))))) AS PartID
	 ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#','')))) AS WarehouseID
	 ,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#','')))) AS ProjectID
	 ,PartitionKey
	 ,YEAR(PeriodDate)*10000 + MONTH(PeriodDate)*100 + DAY(PeriodDate)	AS BudgetPeriodDateID

 	  ,[Company]
      ,PeriodDate
	  ,PeriodType
      ,CustomerNum
	  ,PartNum
	  ,[ProductGroup2]
      ,[CustomerGroup]
      ,[SalesRepCode]	AS SalesPersonCode
	  ,'' AS SalesPersonName
	  ,'Budget' AS BudgetType
	  ,'' AS BudgetName
      --,[ProductGroup2]	
      ,[Sales] AS SalesInvoiceAmount
      ,[Cost]	AS CostInvoiceAmount
	  ,Sales - Cost AS GrossProfitInvoiced
	  ,(Sales - Cost)/NULLIF(Sales,0) AS GrossMarginInvoicedPercent
	  ,0 AS SalesOrderAmount
	  ,'' AS WarehouseCode
	  ,'' AS CostBearerNum
	  ,'' AS CostUnitNum
	  ,'' AS ProjectNum
	  FROM tmp
GO
PRINT N'Creating [stage].[ARK_CZ_StockBalance]'
GO
CREATE TABLE [stage].[ARK_CZ_StockBalance]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[Currency] [nvarchar] (50) NULL,
[BinNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NOT NULL,
[DelivTime] [int] NULL,
[LastStockTakeDate] [date] NULL,
[LastStdCostCalDate] [date] NULL,
[MaxStockQty] [decimal] (18, 4) NULL,
[StockBalance] [decimal] (18, 4) NULL,
[StockValue] [decimal] (18, 4) NULL,
[ReserveQty] [decimal] (18, 4) NULL,
[BackOrderQty] [decimal] (18, 4) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[StockTakeDiff] [decimal] (18, 4) NULL,
[ReOrderLevel] [decimal] (18, 4) NULL,
[SafetyStock] [decimal] (18, 4) NULL,
[OptimalOrderQty] [decimal] (18, 4) NULL,
[SBRes1] [nvarchar] (50) NULL,
[SBRes2] [nvarchar] (50) NULL,
[SBRes3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vARK_CZ_StockBalance]'
GO
CREATE VIEW [stage].[vARK_CZ_StockBalance] AS
--COMMENT EMPTY FIELDS // ADD TRIM() INTO PartID,WarehouseID 2022-12-16 VA
--ADD TRIM() INTO Supplier ID 23-01-23 VA
SELECT
	CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT([Company],'#',TRIM(UPPER([PartNum])),'#',TRIM([WarehouseCode]))))) AS ItemWarehouseID
	,UPPER(CONCAT([Company],'#',TRIM(UPPER([PartNum])),'#',TRIM([WarehouseCode]))) AS ItemWarehouseCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',TRIM([Company]))) AS CompanyID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([SupplierNum]))))) AS SupplierID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT([Company],'#',TRIM(UPPER([SupplierNum])))))) AS SupplierID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM(UPPER([PartNum])))))) AS PartID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT([Company],'#',TRIM(UPPER([PartNum])))))) AS PartID
	,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM([Company]),'#',TRIM([WarehouseCode]))))) AS WarehouseID
	--,CONVERT([binary](32),HASHBYTES('SHA2_256',UPPER(CONCAT([Company],'#',TRIM([WarehouseCode]))))) AS WarehouseID
	,[PartitionKey]

	,[Company]
	,TRIM([WarehouseCode]) AS WarehouseCode
	,Currency
	,[BinNum]
	,BatchNum
	,TRIM(UPPER([SupplierNum])) AS [SupplierNum]
	,TRIM(UPPER([PartNum])) AS PartNum
	,[DelivTime]
	,convert(date, SBRes1) AS LastStockTakeDate
	,convert(date, LastStdCostCalDate) AS LastStdCostCalDate
	,SafetyStock
	,MaxStockQty
	,[StockBalance]
	,StockValue
	,IIF([StockBalance] <> 0, StockValue/[StockBalance], 0) AS AvgCost --0, IIF added 20211108 efter Emil
	,ReserveQty
	,BackOrderQty
	,OrderQty
	,SBRes2 AS StockTakeDiff
	,[ReOrderLevel]
	,[OptimalOrderQty]
	--,'' AS SBRes1
	--,'' AS SBRes2
	,SBRes3
FROM 
	[stage].[ARK_CZ_StockBalance]
GO
PRINT N'Creating [stage].[STE_SE_Part]'
GO
CREATE TABLE [stage].[STE_SE_Part]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (100) NOT NULL,
[PartNum] [nvarchar] (100) NULL,
[PartDescription] [nvarchar] (100) NULL,
[PartDescription2] [nvarchar] (100) NULL,
[ProductGroup] [nvarchar] (100) NULL,
[ProductGroup2] [nvarchar] (100) NULL,
[CountryOfOriginCode] [nvarchar] (100) NULL,
[ModifiedTimeStamp] [nvarchar] (100) NULL,
[UoM] [nvarchar] (100) NULL,
[PrimarySupplier] [nvarchar] (100) NULL,
[CommodityCode] [nvarchar] (100) NULL,
[NetWeight] [nvarchar] (100) NULL,
[ReOrderLevel] [nvarchar] (100) NULL,
[CountryOfOriginname] [nvarchar] (100) NULL,
[Barcode] [nvarchar] (100) NULL,
[PartResponsible] [nvarchar] (100) NULL,
[PartStatus] [nvarchar] (100) NULL,
[PartStatusIsActiveRecord] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vSTE_SE_Part]'
GO
CREATE view [stage].[vSTE_SE_Part] as
Select
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]) ,'#', TRIM(PartNum))))) AS PartID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM([Company])))) AS CompanyID
	,[PartitionKey] 
	,UPPER(TRIM("Company")) AS [Company]
	,UPPER(TRIM("PartNum"))	AS [PartNum] 			
	,"PartDescription"		
	,"PartDescription2"		
	,"ProductGroup"			
	,"ProductGroup2"			
	,"CountryOfOriginCode"
	,"CountryOfOriginname"
	,"ModifiedTimeStamp"		
	,"UoM"					
	,"PrimarySupplier"	as	[MainSupplier]
	,"CommodityCode"			
	,"NetWeight"				
	,"ReOrderLevel"	
	,"Barcode"
	,"PartResponsible"
	,"PartStatus"
	,"PartStatusIsActiveRecord" as [IsActiveRecord]


from
	stage.STE_SE_Part
GO
PRINT N'Creating [stage].[AXL_AU_SOLine]'
GO
CREATE TABLE [stage].[AXL_AU_SOLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[InvoiceDate] [date] NULL,
[ActualDeliveryDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[InvoiceType] [nvarchar] (50) NULL,
[CreditMemo] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[SellingShipQty] [decimal] (18, 4) NULL,
[Unit] [nvarchar] (50) NULL,
[UnitPrice] [decimal] (22, 8) NULL,
[UnitCost] [decimal] (22, 8) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[TotalMiscChrg] [decimal] (18, 4) NULL,
[VAT] [decimal] (18, 4) NULL,
[CashDiscountOffered] [decimal] (18, 4) NULL,
[CashDiscountUsed] [decimal] (18, 4) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[OrderType] [nvarchar] (50) NULL,
[SalesChannel] [varchar] (10) NULL,
[BusinessChain] [varchar] (10) NULL,
[Res1] [varchar] (100) NULL,
[Res2] [varchar] (100) NULL,
[Res3] [varchar] (100) NULL,
[PartDesc] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [stage].[vAXL_AU_SOLine]'
GO
CREATE VIEW [stage].[vAXL_AU_SOLine] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine), '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(PartNum), '#', TRIM(PartDesc))))) AS SalesInvoiceID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine), '#', TRIM(PartDesc))))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum), '#', TRIM(InvoiceNum))))) AS SalesLedgerID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PartNum), '#', (IIF(TRIM([PartNum]) LIKE 'IACO%' , 'MISC. CHARGES', TRIM([PartDesc]))))))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(OrderNum))))) AS SalesOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT(int, IIF(InvoiceDate = '', 19900101, replace(convert(date, InvoiceDate), '-', ''))) AS SalesInvoiceDateID
	,UPPER(CONCAT(Company, '#', TRIM(InvoiceNum), '#', TRIM(InvoiceLine))) AS SalesInvoiceCode
	,UPPER(CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine), '#', TRIM(OrderSubLine))) AS SalesOrderCode
	,PartitionKey

	,UPPER(Company) AS Company
	,TRIM(SalesPerson) AS SalesPersonName
	,TRIM(CustNum) AS [CustomerNum]
	,TRIM(PartNum) AS PartNum
	,UPPER(PartDesc) AS PartDesc
	,'' AS [PartType]
	,TRIM(OrderNum) AS [SalesOrderNum]
	,CAST(OrderLine AS text) AS [SalesOrderLine]
	,TRIM(OrderSubLine) AS [SalesOrderSubLine]
	,TRIM(OrderType) AS [SalesOrderType]
	,TRIM(InvoiceNum) AS [SalesInvoiceNum]
	,TRIM(InvoiceLine) AS [SalesInvoiceLine]
	,TRIM(InvoiceType) AS [SalesInvoiceType]
	,CASE WHEN InvoiceDate = '' THEN '1900-01-01' ELSE CONVERT(date, InvoiceDate) END AS [SalesInvoiceDate]
	,ActualDeliveryDate AS [ActualDelivDate]
	,SellingShipQty AS [SalesInvoiceQty]
	,TRIM(Unit) AS [UoM]
	,UnitPrice
	,UnitCost
	,DiscountAmount
	,IIF(UnitPrice*SellingShipQty = 0, 0, DiscountAmount/UnitPrice*SellingShipQty) AS DiscountPercent
	,CONVERT(decimal(18,4), CashDiscountOffered) AS [CashDiscOffered] 
	,CONVERT(decimal(18,4), CashDiscountUsed) AS [CashDiscUsed] 
	,TotalMiscChrg
	,VAT AS [VATAmount]
	,Currency
	,ExchangeRate
	,TRIM(CreditMemo) AS CreditMemo
	,TRIM([SalesChannel]) AS [SalesChannel]
	,TRIM([BusinessChain]) AS [Department]
	,TRIM(WarehouseCode) AS WarehouseCode
	,NULL AS [CostBearerNum]
	,NULL AS [CostUnitNum]
	,NULL AS [ReturnComment]
	,NULL AS [ReturnNum]
	,NULL AS [ProjectNum]
	,'' AS [IndexKey]
	,Res1 AS SIRes1
	,Res2 AS SIRes2
	,Res3 AS SIRes3
FROM stage.AXL_AU_SOLine


	--,CASE WHEN OrderType = 'MD' THEN 1 
	--		WHEN OrderType = 'MT' THEN 2
	--		WHEN OrderType = 'MR' THEN 3
	--		WHEN OrderType = 'IV' THEN 4
	--		WHEN OrderType = 'Misc. Charges' THEN 5 --added after Ulf changes in the night /DZ
	--	ELSE OrderType END AS [SalesOrderType]

--GROUP BY
--	PartitionKey, Company, SalesPerson, CustNum, PartNum, PartDesc, OrderNum, OrderLine, OrderSubLine,OrderType, InvoiceNum, InvoiceLine, InvoiceDate, SellingShipQty, UnitPrice, UnitCost, DiscountAmount, TotalMiscChrg, WarehouseCode, CreditMemo, ActualDeliveryDate, Currency, ExchangeRate, InvoiceType, Res1, Res2, Res3, Unit, VAT, SalesChannel, BusinessChain, CashDiscountOffered, CashDiscountUsed
GO
PRINT N'Creating [dm_FH].[fctSalesOrder]'
GO
CREATE VIEW [dm_FH].[fctSalesOrder] AS

SELECT 
 so.[SalesOrderID]
,so.[SalesOrderNumID]
,so.[CustomerID]
,so.[CompanyID]
,so.[PartID]
,so.[WarehouseID]
,so.[ProjectID]
,so.[SalesPersonNameID]
,so.[DepartmentID]
,so.[SalesOrderDateID]
,so.[Company]
,so.[CustomerNum]
,so.[SalesOrderNum]
,so.[SalesOrderLine]
,so.[SalesOrderSubLine]
,so.[SalesOrderType]
,so.[SalesOrderCategory]
,so.[SalesOrderDate]
,so.[NeedbyDate]
,so.[ExpDelivDate]
,so.[ConfirmedDelivDate]
,so.[SalesInvoiceNum]
,so.[SalesOrderQty]
,so.[DelivQty]
,so.[RemainingQty]
,so.[UoM]
,so.[UnitPrice]
,so.[UnitCost]
,so.[Currency]
,so.[ExchangeRate]
,so.[OpenRelease]
,so.[OrderStatus]
,so.[DiscountAmount]
,so.[DiscountPercent]
,so.[PartNum]
,so.[PartType]
,so.[PartStatus]
,so.[SalesPersonName]
,so.[WarehouseCode]
,so.[SalesChannel]
,so.[AxInterSalesChannel]
,so.[Department]
,so.[ProjectNum]
,so.[ActualDelivDate]
,so.[SalesInvoiceQty]
,so.[TotalMiscChrg]
,so.[IsUpdatingStock]
,so.[SORes1]
,so.[SORes2]
,so.[SORes3]
,so.[SORes4]
,so.[SORes5]
,so.[SORes6]
FROM dm.FactSalesOrder so
LEFT JOIN dbo.Company com ON so.Company = com.Company
WHERE com.BusinessArea = 'Fluid Handling Solutions' AND com.[Status] = 'Active'
GO
PRINT N'Creating [stage].[AXI_HQ_RLS]'
GO
CREATE TABLE [stage].[AXI_HQ_RLS]
(
[Email] [nvarchar] (100) NULL,
[CostUnitNum] [nvarchar] (50) NULL,
[CostUnitName] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vAXI_HQ_RLS]'
GO







CREATE VIEW [stage].[vAXI_HQ_RLS] AS

SELECT
	CONCAT(N'AXISE', '-',Email, '-',CostUnitNum)	AS EmailID 
	,FORMAT(GETDATE(),'yyyy-MM-dd hh:mm:ss') AS PartitionKey
	,N'AXISE' AS Company
	,[Email]
	,CASE WHEN CostUnitNum = 'All' THEN 'All'
		 ELSE RIGHT('000000' + CostUnitNum, 6) END AS [Name]
	,'CostUnit'	AS [RLSType]
FROM [stage].[AXI_HQ_RLS]
WHERE Email IS NOT NULL
GO
PRINT N'Creating [stage].[CER_FI_ProductionOrder]'
GO
CREATE TABLE [stage].[CER_FI_ProductionOrder]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (30) NULL,
[OrderNum] [nvarchar] (30) NULL,
[OrderLine] [nvarchar] (30) NULL,
[OrderSubLine] [nvarchar] (30) NULL,
[OrderRelNum] [nvarchar] (30) NULL,
[OrderDate] [date] NULL,
[DelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (30) NULL,
[OrderQty] [decimal] (38, 8) NULL,
[DelivQty] [decimal] (38, 8) NULL,
[RemainingQty] [decimal] (38, 8) NULL,
[UnitPrice] [numeric] (28, 8) NULL,
[UnitCost] [numeric] (28, 8) NULL,
[SumUnitCost] [numeric] (38, 6) NULL,
[SumUnitPrice] [numeric] (38, 6) NULL,
[CurrExchRate] [decimal] (28, 8) NULL,
[CurrencyCode] [nvarchar] (30) NULL,
[OpenRelease] [nvarchar] (1) NULL,
[DiscountPercent] [decimal] (38, 6) NULL,
[DiscountAmount] [numeric] (38, 6) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [nvarchar] (50) NULL,
[NeedbyDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (50) NULL,
[SalesReturnOrderNum] [nvarchar] (30) NULL,
[SalesReturnInvoiceNum] [nvarchar] (30) NULL,
[WarehouseCode] [nvarchar] (30) NULL,
[OrderType] [nvarchar] (30) NULL,
[ConfirmedDelivDate] [date] NULL,
[ActualDelivDate] [date] NULL
)
GO
PRINT N'Creating [stage].[vCER_FI_ProductionOrder]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vCER_FI_ProductionOrder] AS
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(OrderNum), '#', TRIM([OrderLine]), '#', TRIM([OrderSubLine]), '#', TRIM(InvoiceNum), '#',TRIM(PartNum))))) AS [ProductionOrderID]
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(Company)))) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(OrderNum))))) AS SalesOrderNumID  
	,[PartitionKey]
	
	,UPPER(TRIM([Company])) AS Company                                  
	,UPPER(TRIM([OrderNum])) AS ProductionOrderNum                    
	,UPPER(TRIM([OrderLine])) AS ProductionOrderLineNum                 
	,UPPER(TRIM([PartNum])) AS PartNum                                 
	,'' AS [Uom]                                        
	,IIF(OrderSubLine = '000000', 'Assembly', 'Component') AS [PartType]
	,CONVERT(decimal(18,4), Replace([OrderQty], ',', '.')) AS OrderQuantity
	--,CONVERT(decimal(18,4), Replace([ScrappedQty Assembled Item], ',', '.')) AS ScrappedQty
	,CONVERT(decimal(18,4), Replace([DelivQty], ',', '.')) AS CompletedQuantity
	,CONVERT(decimal(18,4), Replace([RemainingQty], ',', '.')) AS RemainingQty                           
	,[OpenRelease] AS [Status] 
	,CASE WHEN [OrderDate] = '' OR [OrderDate] is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, [OrderDate]) END AS OrderCreateDate
	,CASE WHEN [NeedbyDate] = '' OR [NeedbyDate] is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, [NeedbyDate]) END AS RequestedEndDate
	--,CASE WHEN [StartDate] = '' OR [StartDate] is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, [StartDate]) END AS StartDate
	,CASE WHEN [ActualDelivDate] = '' OR [ActualDelivDate] is NULL THEN CONVERT(date,'1900-01-01') ELSE CONVERT(date, [ActualDelivDate]) END AS EndDate                              
	,TRIM([OrderType]) AS [OrderType]                             
	,UPPER(TRIM([WarehouseCode])) AS WarehouseCode                               
	,UPPER(TRIM([OrderNum])) AS SalesOrderNum                              
	,UPPER(TRIM([CustNum])) AS CustomerNum                          
	,[SalesPerson] AS ProductionOrderCreaterName
	,[OrderSubLine] AS [CurrentResourceGroup]
	,'EUR' AS [Currency]
	,1 AS [ExchangeRate]
	,WarehouseCode AS [BinNum]
	,'' AS [CostUnitNum]
	,[UnitPrice] AS [MaterialCost]
	,NULL AS TotalHoursPlanned		
	,NULL AS TotalHoursSpent
	,NULL AS LabourCost
	,CASE WHEN [OrderDate] = '' OR [OrderDate] is NULL THEN CONVERT(datetime,'1900-01-01') ELSE CONVERT(datetime, [OrderDate]) END AS CreatedTimeStamp
	,'' AS ModifiedTimeStamp
FROM [stage].[CER_FI_ProductionOrder]
GO
PRINT N'Creating [stage].[azureCostManagement]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [stage].[azureCostManagement]
(
[InvoiceSectionName] [varchar] (200) NULL,
[AccountName] [varchar] (200) NULL,
[AccountOwnerId] [varchar] (200) NULL,
[SubscriptionId] [varchar] (200) NULL,
[SubscriptionName] [varchar] (200) NULL,
[ResourceGroup] [varchar] (200) NULL,
[ResourceLocation] [varchar] (200) NULL,
[Date] [varchar] (200) NULL,
[ProductName] [varchar] (200) NULL,
[MeterCategory] [varchar] (200) NULL,
[MeterSubCategory] [varchar] (200) NULL,
[MeterId] [varchar] (200) NULL,
[MeterName] [varchar] (200) NULL,
[MeterRegion] [varchar] (200) NULL,
[UnitOfMeasure] [varchar] (200) NULL,
[Quantity] [varchar] (200) NULL,
[EffectivePrice] [varchar] (200) NULL,
[CostInBillingCurrency] [varchar] (200) NULL,
[CostCenter] [varchar] (200) NULL,
[ConsumedService] [varchar] (200) NULL,
[ResourceId] [varchar] (200) NULL,
[Tags] [varchar] (200) NULL,
[OfferId] [varchar] (200) NULL,
[AdditionalInfo] [varchar] (200) NULL,
[ServiceInfo1] [varchar] (200) NULL,
[ServiceInfo2] [varchar] (200) NULL,
[ResourceName] [varchar] (200) NULL,
[ReservationId] [varchar] (200) NULL,
[ReservationName] [varchar] (200) NULL,
[UnitPrice] [varchar] (200) NULL,
[ProductOrderId] [varchar] (200) NULL,
[ProductOrderName] [varchar] (200) NULL,
[Term] [varchar] (200) NULL,
[PublisherType] [varchar] (200) NULL,
[PublisherName] [varchar] (200) NULL,
[ChargeType] [varchar] (200) NULL,
[Frequency] [varchar] (200) NULL,
[PricingModel] [varchar] (200) NULL,
[AvailabilityZone] [varchar] (200) NULL,
[BillingAccountId] [varchar] (200) NULL,
[BillingAccountName] [varchar] (200) NULL,
[BillingCurrencyCode] [varchar] (200) NULL,
[BillingPeriodStartDate] [varchar] (200) NULL,
[BillingPeriodEndDate] [varchar] (200) NULL,
[BillingProfileId] [varchar] (200) NULL,
[BillingProfileName] [varchar] (200) NULL,
[InvoiceSectionId] [varchar] (200) NULL,
[IsAzureCreditEligible] [varchar] (200) NULL,
[PartNumber] [varchar] (200) NULL,
[PayGPrice] [varchar] (200) NULL,
[PlanName] [varchar] (200) NULL,
[ServiceFamily] [varchar] (200) NULL,
[CostAllocationRuleName] [varchar] (200) NULL,
[benefitId] [varchar] (200) NULL,
[benefitName] [varchar] (200) NULL
)
GO
PRINT N'Creating [dbo].[azureCostManagement]'
GO
CREATE TABLE [dbo].[azureCostManagement]
(
[InvoiceSectionName] [varchar] (50) NULL,
[AccountName] [varchar] (80) NULL,
[AccountOwnerId] [varchar] (80) NULL,
[SubscriptionId] [varchar] (100) NULL,
[SubscriptionName] [varchar] (50) NULL,
[ResourceGroup] [varchar] (50) NULL,
[ResourceLocation] [varchar] (30) NULL,
[Date] [date] NULL,
[ProductName] [varchar] (200) NULL,
[MeterCategory] [varchar] (50) NULL,
[MeterSubCategory] [nvarchar] (100) NULL,
[MeterId] [varchar] (100) NULL,
[MeterName] [varchar] (150) NULL,
[MeterRegion] [varchar] (40) NULL,
[UnitOfMeasure] [varchar] (50) NULL,
[Quantity] [decimal] (20, 15) NULL,
[EffectivePrice] [decimal] (20, 15) NULL,
[CostInBillingCurrency] [decimal] (20, 15) NULL,
[CostCenter] [varchar] (50) NULL,
[ConsumedService] [varchar] (80) NULL,
[ResourceId] [varchar] (200) NULL,
[Tags] [varchar] (200) NULL,
[OfferId] [varchar] (80) NULL,
[AdditionalInfo] [varchar] (200) NULL,
[ServiceInfo1] [varchar] (200) NULL,
[ServiceInfo2] [varchar] (200) NULL,
[ResourceName] [varchar] (80) NULL,
[ReservationId] [varchar] (200) NULL,
[ReservationName] [varchar] (200) NULL,
[UnitPrice] [decimal] (9, 2) NULL,
[ProductOrderId] [varchar] (200) NULL,
[ProductOrderName] [varchar] (200) NULL,
[Term] [varchar] (200) NULL,
[PublisherType] [varchar] (40) NULL,
[PublisherName] [varchar] (200) NULL,
[ChargeType] [varchar] (40) NULL,
[Frequency] [varchar] (40) NULL,
[PricingModel] [varchar] (40) NULL,
[AvailabilityZone] [varchar] (200) NULL,
[BillingAccountId] [int] NULL,
[BillingAccountName] [varchar] (100) NULL,
[BillingCurrencyCode] [varchar] (8) NULL,
[BillingPeriodStartDate] [date] NULL,
[BillingPeriodEndDate] [date] NULL,
[BillingProfileId] [int] NULL,
[BillingProfileName] [varchar] (80) NULL,
[InvoiceSectionId] [varchar] (200) NULL,
[IsAzureCreditEligible] [varchar] (15) NULL,
[PartNumber] [varchar] (12) NULL,
[PayGPrice] [varchar] (10) NULL,
[PlanName] [varchar] (200) NULL,
[ServiceFamily] [varchar] (60) NULL,
[CostAllocationRuleName] [varchar] (200) NULL,
[benefitId] [varchar] (200) NULL,
[benefitName] [varchar] (200) NULL
)
GO
PRINT N'Creating index [IDX_BillingPeriodStartDate_BillingPeriodEndDate] on [dbo].[azureCostManagement]'
GO
CREATE NONCLUSTERED INDEX [IDX_BillingPeriodStartDate_BillingPeriodEndDate] ON [dbo].[azureCostManagement] ([BillingPeriodStartDate], [BillingPeriodEndDate])
GO
PRINT N'Creating [dbo].[insertAzureCostManagement]'
GO


CREATE PROCEDURE [dbo].[insertAzureCostManagement]  as

DECLARE @startDate DATE;
DECLARE @endDate DATE;

SELECT DISTINCT @startDate = BillingPeriodStartDate
	,@endDate = BillingPeriodEndDate
FROM stage.azureCostManagement;

DELETE
FROM dbo.azureCostManagement
WHERE BillingPeriodStartDate >= @startDate
	AND BillingPeriodEndDate <= @endDate;

INSERT INTO dbo.azureCostManagement (
	InvoiceSectionName
	,AccountName
	,AccountOwnerId
	,SubscriptionId
	,SubscriptionName
	,ResourceGroup
	,ResourceLocation
	,DATE
	,ProductName
	,MeterCategory
	,MeterSubCategory
	,MeterId
	,MeterName
	,MeterRegion
	,UnitOfMeasure
	,Quantity
	,EffectivePrice
	,CostInBillingCurrency
	,CostCenter
	,ConsumedService
	,ResourceId
	,Tags
	,OfferId
	,AdditionalInfo
	,ServiceInfo1
	,ServiceInfo2
	,ResourceName
	,ReservationId
	,ReservationName
	,UnitPrice
	,ProductOrderId
	,ProductOrderName
	,Term
	,PublisherType
	,PublisherName
	,ChargeType
	,Frequency
	,PricingModel
	,AvailabilityZone
	,BillingAccountId
	,BillingAccountName
	,BillingCurrencyCode
	,BillingPeriodStartDate
	,BillingPeriodEndDate
	,BillingProfileId
	,BillingProfileName
	,InvoiceSectionId
	,IsAzureCreditEligible
	,PartNumber
	,PayGPrice
	,PlanName
	,ServiceFamily
	,CostAllocationRuleName
	,benefitId
	,benefitName
	)
SELECT InvoiceSectionName
	,AccountName
	,AccountOwnerId
	,SubscriptionId
	,SubscriptionName
	,ResourceGroup
	,ResourceLocation
	,cast(DATE AS DATE) AS DATE
	,ProductName
	,MeterCategory
	,MeterSubCategory
	,MeterId
	,MeterName
	,MeterRegion
	,UnitOfMeasure
	,TRY_CAST(Quantity AS DECIMAL(20, 15)) AS Quantity
	,TRY_CAST(EffectivePrice AS DECIMAL(20, 15)) AS EffectivePrice
	,TRY_CAST(CostInBillingCurrency AS DECIMAL(20, 15)) AS CostInBillingCurrency
	,CostCenter
	,ConsumedService
	,ResourceId
	,Tags
	,OfferId
	,AdditionalInfo
	,ServiceInfo1
	,ServiceInfo2
	,ResourceName
	,ReservationId
	,ReservationName
	,TRY_CAST(UnitPrice AS DECIMAL(9, 2)) AS UnitPrice
	,ProductOrderId
	,ProductOrderName
	,Term
	,PublisherType
	,PublisherName
	,ChargeType
	,Frequency
	,PricingModel
	,AvailabilityZone
	,TRY_CAST(BillingAccountId AS INT) AS BillingAccountId
	,BillingAccountName
	,BillingCurrencyCode
	,cast(BillingPeriodStartDate AS DATE) AS BillingPeriodStartDate
	,cast(BillingPeriodEndDate AS DATE) AS BillingPeriodEndDate
	,TRY_CAST(BillingProfileId AS INT) AS BillingProfileId
	,BillingProfileName
	,InvoiceSectionId
	,IsAzureCreditEligible
	,PartNumber
	,PayGPrice
	,PlanName
	,ServiceFamily
	,CostAllocationRuleName
	,benefitId
	,benefitName
FROM stage.azureCostManagement;
GO
PRINT N'Creating [stage].[HAK_FI_OLine]'
GO
CREATE TABLE [stage].[HAK_FI_OLine]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[OrderSubLine] [nvarchar] (50) NULL,
[OrderRelNum] [nvarchar] (50) NULL,
[OrderDate] [date] NULL,
[DelivDate] [date] NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[OrderQty] [decimal] (18, 4) NULL,
[DelivQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[UnitCost] [decimal] (18, 4) NULL,
[SumUnitCost] [decimal] (18, 4) NULL,
[SumUnitPrice] [decimal] (18, 4) NULL,
[CurrExchRate] [decimal] (18, 4) NULL,
[OpenRelease] [nvarchar] (1) NULL,
[DiscountPercent] [decimal] (18, 4) NULL,
[DiscountAmount] [decimal] (18, 4) NULL,
[Site] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[PartStatus] [int] NULL,
[NeedbyDate] [date] NULL,
[SalesPerson] [nvarchar] (50) NULL,
[ReturnComment] [nvarchar] (500) NULL,
[SalesReturnOrderNum] [nvarchar] (50) NULL,
[SalesReturnInvoiceNum] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vHAK_FI_OLine]'
GO


CREATE VIEW [stage].[vHAK_FI_OLine] AS
--COMMENT EMPTY FIELDS // ADD UPPER()TRIM() INTO WarehouseID,CustomerID,PartID 2022-12-21 VA
--CHANGE SALESORDERCODE  

SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(OrderNum), '#', TRIM(OrderLine) ))) AS SalesOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(CustNum))))) AS CustomerID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(UPPER(IIF(CustNum = '' OR CustNum IS NULL, 'MISSINGCUSTOMER', CustNum))) ))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', Company)) AS CompanyID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(PartNum))))) AS PartID 
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(UPPER(IIF(PartNum = '' OR PartNum IS NULL, 'MISSINGPART', PartNum))) ))) AS PartID  --, '#', TRIM(UPPER([Site]))
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(WarehouseCode))))) AS WarehouseID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(WarehouseCode)))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#', TRIM(UPPER(OrderNum)) ))) AS SalesOrderNumID
	,UPPER(CONCAT(TRIM(Company), '#', TRIM(OrderNum), '#', TRIM(PartNum))) AS SalesOrderCode
	--,CONCAT(Company, '#', TRIM(UPPER(OrderNum)), '#', TRIM(UPPER(IIF(PartNum = '' OR PartNum IS NULL, 'MissingPart', PartNum)))) AS SalesOrderCode
	,CONVERT(int, replace(convert(date, OrderDate),'-','')) AS SalesOrderDateID  
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT( Company,'#','') ))	AS ProjectID
	,PartitionKey 

	,TRIM(Company) AS Company
	,UPPER(TRIM(CustNum)) AS CustomerNum 
	,UPPER(TRIM(OrderNum)) AS SalesOrderNum
	,UPPER(TRIM(OrderLine)) AS SalesOrderLine
	,UPPER(TRIM(OrderSubLine)) AS SalesOrderSubLine
	--,'' AS SalesOrderType
	--,'' AS SalesOrderCategory
	,UPPER(TRIM(OrderRelNum)) AS SalesOrderRelNum
	,OrderDate AS SalesOrderDate
	,MAX(NeedbyDate) AS NeedbyDate
	,MAX(DelivDate) AS ExpDelivDate
	,CAST('1900-01-01' AS date) AS ActualDelivDate
	,CAST('1900-01-01' AS date) AS ConfirmedDelivDate
	,TRIM(UPPER(InvoiceNum)) AS SalesInvoiceNum
	,OrderQty AS SalesOrderQty
	,DelivQty
	,RemainingQty
	--,NULL AS SalesInvoiceQty
	--,'' AS UoM
	,UnitPrice
	,UnitCost
	,SumUnitPrice
	,SumUnitCost
	,'EUR' AS Currency
	,1 AS ExchangeRate
	,OpenRelease
	,DiscountAmount
	,DiscountPercent
	,UPPER(TRIM(PartNum)) AS PartNum
	--,'' AS PartType
	,PartStatus
	,SalesPerson AS SalesPersonName
	,MAX(TRIM(ReturnComment)) AS ReturnComment
	,TRIM(WarehouseCode) AS WarehouseCode
	--,'' AS SalesChannel
	,'Normal Order Handling' AS AxInterSalesChannel
	--,'' AS Department
	--,'' AS ProjectNum
	--,'' AS IndexKey
	--,'0' AS Cancellation
	--,'' AS SORes1
	--,'' AS SORes2
	--,'' AS SORes3
	,MAX(TRIM(SalesReturnOrderNum)) AS SalesReturnOrderNum
	,MAX(TRIM(SalesReturnInvoiceNum)) AS SalesReturnInvoiceNum
	--,NULL AS [TotalMiscChrg]
FROM 
	stage.HAK_FI_OLine
GROUP BY
	PartitionKey, Company, CustNum, OrderNum, OrderLine, OrderSubLine, OrderRelNum, OrderDate, InvoiceNum, OrderQty, DelivQty, DelivQty, RemainingQty, UnitPrice, UnitCost, SumUnitPrice, SumUnitCost, OpenRelease, DiscountAmount, DiscountPercent, PartNum, PartStatus, SalesPerson, WarehouseCode--, TRIM(UPPER([Site]))
GO
PRINT N'Creating [stage].[SPR_NL_Warehouse]'
GO
CREATE TABLE [stage].[SPR_NL_Warehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseID] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL,
[WarehouseDistrict] [nvarchar] (50) NULL,
[WarehouseAddress] [nvarchar] (100) NULL,
[WarehouseDescription] [nvarchar] (max) NULL,
[WarehouseType] [nvarchar] (50) NULL,
[WarehouseCountry] [nvarchar] (50) NULL,
[WarehouseSite] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vSPR_NL_Warehouse]'
GO


CREATE VIEW [stage].[vSPR_NL_Warehouse] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM([Company]), '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,PartitionKey

	,UPPER(TRIM([Company])) AS Company
	,UPPER(TRIM([WarehouseCode])) AS [WarehouseCode]
	,TRIM([WarehouseName]) AS [WarehouseName]
	,TRIM([WarehouseDistrict]) AS [WarehouseDistrict]
	,TRIM([WarehouseAddress]) AS [WarehouseAddress]
	,TRIM([WarehouseDescription]) AS [WarehouseDescription]
	,TRIM([WarehouseType]) AS [WarehouseType]
	,TRIM([WarehouseCountry]) AS [WarehouseCountry]
	,TRIM([WarehouseSite]) AS [WarehouseSite]
FROM [stage].[SPR_NL_Warehouse]

GROUP BY 
	PartitionKey,[Company],[WarehouseCode],[WarehouseName],[WarehouseDistrict],[WarehouseAddress],[WarehouseDescription],[WarehouseType],[WarehouseCountry], [WarehouseSite]
GO
PRINT N'Creating [dm_IN].[fctSalesOrderLog]'
GO


CREATE   VIEW [dm_IN].[fctSalesOrderLog] AS

SELECT sol.[SalesOrderLogID]
,sol.[CompanyID]
,sol.[CustomerID]
,sol.[PartID]
,sol.[WarehouseID]
,sol.[SalesPersonNameID]
,sol.[SalesOrderDateID]
,sol.[PartitionKey]
,sol.[Company]
,sol.[CustomerNum]
,sol.[SalesOrderNum]
,sol.[SalesOrderLine]
,sol.[SalesOrderSubLine]
,sol.[SalesOrderType]
,sol.[SalesOrderLogType]
,sol.[SalesOrderDate]
,sol.[SalesOrderLogDate]
,sol.[SalesInvoiceNum]
,sol.[SalesOrderQty]
,sol.[UoM]
,sol.[UnitPrice]
,sol.[UnitCost]
,sol.[Currency]
,sol.[ExchangeRate]
,sol.[OpenRelease]
,sol.[DiscountPercent]
,sol.[DiscountAmount]
,sol.[PartNum]
,sol.[PartType]
,sol.[SalesPersonName]
,sol.[Department]
,sol.[WarehouseCode]
  FROM [dm].[FactSalesOrderLog] as sol
WHERE sol.Company in ('OCSSE')
GO
PRINT N'Creating [stage].[JEN_NB_PurchaseLedger]'
GO
CREATE TABLE [stage].[JEN_NB_PurchaseLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierCode] [nvarchar] (50) NOT NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[InvoiceLCYAmount] [decimal] (18, 4) NOT NULL,
[InvoiceCurrAmount] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (10) NULL,
[VATPaid] [decimal] (18, 4) NULL,
[VATcode] [nvarchar] (10) NULL,
[PayToName] [nvarchar] (50) NULL,
[PaymentTermsCode] [nvarchar] (50) NULL,
[PrepaymentNum] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vJEN_NB_PurchaseLedger]'
GO
CREATE VIEW [stage].[vJEN_NB_PurchaseLedger] AS 
--COMMENT EMPTY FIELDS 23-01-03 VA
--ADD TRIM() INTO SupplierID 23-01-24 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(PurchaseInvoiceNum))))) AS PurchaseLedgerID -- shall = in Invoice
	,UPPER(CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(PurchaseInvoiceNum))) AS PurchaseLedgerCode 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(Company))) AS CompanyID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierCode))))) AS SupplierID 
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(SupplierCode))))) AS SupplierID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseInvoiceNum))))) AS PurchaseInvoiceID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(TRIM(CurrencyCode)))) AS CurrencyID 
	,CONVERT(int, replace(InvoiceDate, '-', '') ) AS PurchaseInvoiceDateID  
	,[PartitionKey]

	,UPPER(Company) AS [Company]
	,UPPER(TRIM(SupplierCode)) AS SupplierNum
	,[PurchaseOrderNum]
	,[PurchaseInvoiceNum]
	,[InvoiceDate] AS PurchaseInvoiceDate --CONVERT(date, 
	,[DueDate] AS PurchaseDueDate --CONVERT(date, 
	,[LastPaymentDate] AS PurchaseLastPaymentDate --CONVERT(date, 
	,[InvoiceLCYAmount] 
	,[InvoiceCurrAmount] AS InvoiceAmount
	,[ExchangeRate]
	,[CurrencyCode] AS Currency
	,[VATPaid]	AS VATAmount
	,[VATcode]	AS VATCode
	,[PayToName]
	--,'' AS [PayToCity]
	--,'' AS [PayToContact]
	,[PaymentTermsCode]	AS PaymentTerms
	,[PrepaymentNum]
	--,'' AS LastPaymentNum
	--,'' AS PLRES1
	--,'' AS PLRES2
	--,'' AS PLRES3
	--,NULL AS PaidInvoiceAmount
	--,NULL AS RemainingInvoiceAmount
	--,NULL AS LinkToOriginalInvoice
	--,'' AS AccountingDate
	--,NULL AS AgingPeriod
	--,NULL AS AgingSort
	--,NULL AS VATCodeDesc
FROM 
	[stage].[JEN_NB_PurchaseLedger]
GO
PRINT N'Creating [stage].[SKS_FI_PurchaseInvoice]'
GO
CREATE TABLE [stage].[SKS_FI_PurchaseInvoice]
(
[PartitionKey] [varchar] (50) NOT NULL,
[BUKRS] [nvarchar] (8) NULL,
[EKORG] [nvarchar] (50) NULL,
[PURCHASEORDERNUM] [nvarchar] (50) NULL,
[PURCHASEORDERLINE] [nvarchar] (50) NULL,
[ORDERTYPE] [nvarchar] (50) NULL,
[PURCHASEINVOICENUM] [nvarchar] (50) NULL,
[INVOICELINE] [nvarchar] (50) NULL,
[INVOICETYPE] [nvarchar] (50) NULL,
[INVOICEDATE] [nvarchar] (50) NULL,
[ACTUALDELIVDATE] [nvarchar] (50) NULL,
[SUPPLIERNUM] [nvarchar] (50) NULL,
[PARTNUM] [nvarchar] (50) NULL,
[PURCHASESHIPQTY] [decimal] (18, 4) NULL,
[UNIT] [nvarchar] (50) NULL,
[UNITPRICE] [decimal] (18, 4) NULL,
[DISCOUNTAMOUNT] [decimal] (18, 4) NULL,
[TOTALMISCCHRG] [nvarchar] (50) NULL,
[VAT] [nvarchar] (50) NULL,
[CURRENCY] [nvarchar] (50) NULL,
[EXCHANGERATE] [decimal] (18, 4) NULL,
[CREDITMEMO] [nvarchar] (50) NULL,
[PURCHASERNAME] [nvarchar] (100) NULL,
[WAREHOUSECODE] [nvarchar] (50) NULL,
[PURCHASECHANNEL] [nvarchar] (50) NULL,
[MANDT] [nvarchar] (50) NULL,
[GJAHR] [nvarchar] (50) NULL,
[ORDERDELIVLINENUM] [nvarchar] (50) NULL,
[DUEDATE] [nvarchar] (50) NULL,
[PIRES1] [nvarchar] (50) NULL,
[PIRES2] [nvarchar] (50) NULL,
[PIRES3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vSKS_FI_PurchaseInvoice]'
GO

CREATE VIEW [stage].[vSKS_FI_PurchaseInvoice] AS
--ADD TRIM()UPPER() INTO PartID,WarehouseID 2022-12-16 VA
--ADD TRIM() UPPER() INTO SupplierID 23-01-24 VA
SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(BUKRS, '#', TRIM(PURCHASEINVOICENUM), '#', TRIM(INVOICELINE)))) AS PurchaseInvoiceID 
	,CONCAT(BUKRS, '#', TRIM(PURCHASEINVOICENUM), '#', TRIM(PURCHASEORDERLINE), '#', TRIM(PARTNUM)) AS PurchaseInvoiceCode
	,CONCAT(BUKRS, '#', TRIM(PURCHASEORDERNUM)) AS PurchaseOrderNumCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(BUKRS, '#', TRIM(PURCHASEORDERNUM)))) AS PurchaseOrderNumID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(BUKRS, '#', TRIM(PURCHASEORDERNUM), '#', TRIM(PURCHASEORDERLINE)))) AS PurchaseOrderID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(BUKRS), '#', TRIM(SUPPLIERNUM), '#', TRIM(EKORG))))) AS SupplierID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(BUKRS, '#', TRIM(SUPPLIERNUM), '#', EKORG ))) AS SupplierID
    ,CONVERT([binary](32), HASHBYTES('SHA2_256', BUKRS)) AS CompanyID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(BUKRS, '#', TRIM(PARTNUM), '#', EKORG))) AS PartID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(TRIM(BUKRS), '#', TRIM(PARTNUM), '#', TRIM(EKORG))))) AS PartID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(BUKRS, '#', TRIM(WAREHOUSECODE)))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(BUKRS), '#', TRIM(WAREHOUSECODE))))) AS WarehouseID
	,CONVERT(int, replace(INVOICEDATE, '-', '')) AS PurchaseInvoiceDateID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(BUKRS, '#', TRIM(SUPPLIERNUM), '#', TRIM(PURCHASEINVOICENUM), '#', TRIM(PURCHASEORDERNUM)))) AS PurchaseLedgerID --match PurchaseLedgerID in [vSKS_FI_PurchaseLedger]
	,CONCAT(EKORG, '#', TRIM(SUPPLIERNUM) ,'#', PURCHASEORDERNUM, '#', PURCHASEORDERLINE, '#', TRIM(PURCHASEINVOICENUM)) AS PurchaseOrderCode
	,PartitionKey

--	,CASE WHEN BUKRS = 'SKSSWE' THEN 'JSESKSSW' WHEN EKORG = 'SE10' THEN 'JSESKSSW' ELSE BUKRS END  AS Company
	,BUKRS AS Company
	,TRIM(PURCHASEORDERNUM) AS PurchaseOrderNum
	,TRIM(PURCHASEORDERLINE) AS PurchaseOrderLine
	,ORDERDELIVLINENUM AS PurchaseOrderSubLine
	,[ORDERTYPE] AS PurchaseOrderType
	,TRIM(PURCHASEINVOICENUM) AS PurchaseInvoiceNum
	,TRIM(INVOICELINE) AS PurchaseInvoiceLine
	,INVOICETYPE AS PurchaseInvoiceType
	,IIF(INVOICEDATE = '00000000', '1900-01-01', CONVERT(date, INVOICEDATE)) AS PurchaseInvoiceDate 
	,IIF(ACTUALDELIVDATE = '00000000', '1900-01-01', CONVERT(date, ACTUALDELIVDATE)) AS ACTUALDELIVDATE
	,TRIM(SUPPLIERNUM) AS SupplierNum
	,IIF(ISNUMERIC([PARTNUM]) = 1,CAST(CAST(trim([PARTNUM]) AS int)as nvarchar(50)),(trim([PARTNUM]))) AS PartNum
	,iif(INVOICETYPE = '2',PURCHASESHIPQTY * -1,PURCHASESHIPQTY) AS PurchaseInvoiceQty
	,UNIT AS UoM
	,UNITPRICE + COALESCE(DISCOUNTAMOUNT/NULLIF(PURCHASESHIPQTY,0),0)	AS UNITPRICE
	,IIF(UnitPrice*PURCHASESHIPQTY = 0, 0, DISCOUNTAMOUNT/(UnitPrice*PURCHASESHIPQTY)) AS DiscountPercent
	,DISCOUNTAMOUNT
	,CONVERT(decimal(18,4), NULL) AS TOTALMISCCHRG
	,CONVERT(decimal(18,0), VAT) AS VATAmount
	,COALESCE(1/NULLIF(EXCHANGERATE,0),1) AS EXCHANGERATE
	,CURRENCY
	,CREDITMEMO
	,PURCHASERNAME
	,TRIM(WarehouseCode) AS WarehouseCode
	,PURCHASECHANNEL
	--,'' AS Comment
	,MANDT AS PIRES1
	,BUKRS AS PIRES2
	,GJAHR AS PIRES3
FROM stage.SKS_FI_PurchaseInvoice
WHERE EKORG NOT IN ('FI00','SE10')
GROUP BY
	PartitionKey, BUKRS, EKORG, PURCHASEORDERNUM, PURCHASEINVOICENUM, SUPPLIERNUM, PARTNUM, PURCHASEORDERLINE, PURCHASESHIPQTY, UNITPRICE, WAREHOUSECODE, PURCHASERNAME, INVOICELINE, INVOICETYPE, INVOICEDATE, ACTUALDELIVDATE, TOTALMISCCHRG, CREDITMEMO, [ORDERTYPE], DISCOUNTAMOUNT, CURRENCY, EXCHANGERATE, UNIT, VAT, PURCHASECHANNEL, ORDERDELIVLINENUM, MANDT, GJAHR
GO
PRINT N'Creating [stage].[AXL_DE_Warehouse]'
GO
CREATE TABLE [stage].[AXL_DE_Warehouse]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseID] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL,
[WarehouseDistrict] [nvarchar] (50) NULL,
[WarehouseAddress] [nvarchar] (100) NULL,
[WarehouseDescription] [nvarchar] (max) NULL,
[WarehouseType] [nvarchar] (50) NULL,
[WarehouseCountry] [nvarchar] (50) NULL,
[Site] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXL_DE_Warehouse]'
GO

CREATE VIEW [stage].[vAXL_DE_Warehouse] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM([WarehouseCode]))))) AS WarehouseID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,UPPER(CONCAT([Company],'#', TRIM([WarehouseCode]))) AS [WarehouseCode]
	,PartitionKey

	,UPPER([Company]) AS [Company]
	,TRIM([WarehouseName]) AS [WarehouseName]
	,TRIM([WarehouseDistrict]) AS [WarehouseDistrict]
	,TRIM([WarehouseAddress]) AS [WarehouseAddress]
	,TRIM([WarehouseDescription]) AS [WarehouseDescription]
	,TRIM([WarehouseType]) AS [WarehouseType]
	,TRIM([WarehouseCountry]) AS [WarehouseCountry]
	,TRIM([Site]) AS [WarehouseSite]

FROM [stage].[AXL_DE_Warehouse]
GO
PRINT N'Creating [stage].[AXI_HQ_Account_map_complement]'
GO
CREATE TABLE [stage].[AXI_HQ_Account_map_complement]
(
[Konto] [nvarchar] (50) NOT NULL,
[Beskrivning] [nvarchar] (100) NULL,
[Kontogrupp] [nvarchar] (100) NULL,
[Power_BI] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[AXI_HQ_Account]'
GO
CREATE TABLE [stage].[AXI_HQ_Account]
(
[Company] [nvarchar] (8) NULL,
[AccountNum] [nvarchar] (50) NOT NULL,
[AccountName] [nvarchar] (100) NULL,
[AccountStatus] [nvarchar] (50) NULL,
[BalanceAccount] [nvarchar] (100) NULL,
[TransactionAccount] [nvarchar] (100) NULL,
[Assets] [nvarchar] (100) NULL,
[Costs] [nvarchar] (100) NULL,
[LiabilitiesAndEquity] [nvarchar] (100) NULL,
[Revenue] [nvarchar] (100) NULL,
[CurrentAssets] [nvarchar] (100) NULL,
[CurrentLiabilities] [nvarchar] (100) NULL,
[Depreciation] [nvarchar] (100) NULL,
[Equity] [nvarchar] (100) NULL,
[AccountReceivables] [nvarchar] (100) NULL,
[CashAndEquivalents] [nvarchar] (100) NULL,
[AccountType] [nvarchar] (50) NULL,
[AccountType2] [nvarchar] (50) NULL,
[AccountType3] [nvarchar] (50) NULL,
[AccountType4] [nvarchar] (50) NULL,
[AccountType5] [nvarchar] (100) NULL,
[AccountType6] [nvarchar] (100) NULL,
[AccountType7] [nvarchar] (100) NULL,
[AccountType8] [nvarchar] (100) NULL,
[AccountType9] [nvarchar] (100) NULL,
[AccountType10] [nvarchar] (100) NULL,
[AccountGroupNum] [nvarchar] (50) NULL,
[AccountGroupName] [nvarchar] (50) NULL,
[AccountGroup] [nvarchar] (50) NULL,
[Statement] [nvarchar] (100) NULL,
[StatementNum] [int] NULL,
[AccRes1] [nvarchar] (100) NULL,
[AccRes2] [nvarchar] (100) NULL,
[AccRes3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[vAXI_HQ_Account]'
GO












/****** Script for SelectTopNRows command from SSMS  ******/

CREATE VIEW [stage].[vAXI_HQ_Account] AS

SELECT 
	CONVERT(binary(32), HASHBYTES('SHA2_256',CONCAT(Company, '#', [AccountNum]))) AS AccountID
	,CONVERT(binary(32), HASHBYTES('SHA2_256',Company)) AS CompanyID
	,CONCAT(Company, '#', [AccountNum]) AS AccountCode
	,CONVERT(varchar, GETDATE(), 23) AS PartitionKey
	,[Company]
	,[AccountNum]
	,[AccountName]
	,m.Beskrivning AS [AccountName2]
	,CONCAT(AccountNum,'-',AccountName) AS Account
	,[AccountStatus]
	,IIF([BalanceAccount] = 'True', '1', [BalanceAccount]) AS [BalanceAccount]
	,IIF([TransactionAccount] = 'True', '1', [TransactionAccount]) AS [TransactionAccount]
	,IIF([Assets] = 'True', '1', [Assets]) AS [Assets]
	,IIF([AccountNum] = '7817', '1' ,'') AS [Amortization]
	,CASE WHEN [Costs] = 'True' THEN '1'
		WHEN len(accountnum) = 5 and left(accountnum, 1) = '8' THEN '1' --83161 to 83173 different currencies, sub-account of 8311 
		ELSE '' END  AS [Costs]
	,IIF([LiabilitiesAndEquity] = 'True', '1', [LiabilitiesAndEquity]) AS [LiabilitiesAndEquity]
	,IIF([Revenue] = 'True', '1', [Revenue]) AS [Revenue]
	,IIF([CurrentAssets] = 'True', '1', [CurrentAssets]) AS [CurrentAssets]
	,IIF([CurrentLiabilities] = 'True', '1', [CurrentLiabilities]) AS [CurrentLiabilities]
	--,IIF([Depreciation] = 'True' AND AccountNum <> '7817', '1', [Depreciation]) AS [Deprecation]
	,CASE	WHEN AccountNum = '7817' THEN ''
			WHEN [Depreciation] = 'True' THEN '1'
			ELSE '' END AS [Deprecation] 
	,IIF([Equity] = 'True', '1', [Equity]) AS [Equity]
	,IIF([AccountReceivables] = 'True', '1', [AccountReceivables]) AS [AccountReceivables]
	,IIF([CashAndEquivalents] = 'True', '1', [CashAndEquivalents]) AS [CashAndEquivalents]
	,'' AS Liability
	,IIF([AccountNum] BETWEEN '8910' AND '8980','1','' ) AS Tax
	,IIF([AccountNum] BETWEEN '8300' AND '8319' 
			OR [AccountNum] BETWEEN '8360' AND '8369' 
			OR [AccountNum] = '8390'
			OR [AccountNum] BETWEEN '8400' AND '8429'
			OR [AccountNum] = '8440'
			OR [AccountNum] BETWEEN '8460' AND '8490', '1', '' ) AS Interest
	,'' AS Materials
	,'' AS Expenses
	,[AccountType]
	,[AccountType2]
	,[AccountType3]
	,[AccountType4]
	,[AccountType5]
	,[AccountType6]
	,[AccountType7]
	,[AccountType8]
	,[AccountType9]
	,[AccountType10]
	,[AccountGroupNum]
	,[AccountGroupName]
	,[AccountGroup]
	,m.Kontogrupp	AS [AccountGroup2]
	,m.Power_BI AS [AccountGroup3]
	,IIF(len(accountnum) = 5 and left(accountnum, 1) = '8', 'Cost',  [Statement]) AS [Statement] --83161 to 83173 different currencies, sub-account of 8311 also cost
	,[StatementNum]
	,[AccRes1]
	,[AccRes2]
	,[AccRes3]
  FROM [stage].[AXI_HQ_Account] AS A
  LEFT JOIN [stage].[AXI_HQ_Account_map_complement] AS m ON A.AccountNum = m.Konto
  where upper(A.Company) = 'AXISE'
  --where A.Company = 'AXISE'
GO
PRINT N'Creating [dm_IN].[dimCostUnit]'
GO

CREATE VIEW [dm_IN].[dimCostUnit] AS 

SELECT  cu.[CostUnitID]
,cu.[PartitionKey]
,cu.[CostUnitCode]
,cu.[CompanyID]
,cu.[Company]
,cu.[CostUnitNum]
,cu.[CostUnitName]
,cu.[CostUnitStatus]
,cu.[CostUnitGroup]
,cu.[CostUnitGroup2]
,cu.[CostUnitGroup3]
FROM [dm].[DimCostUnit] cu
LEFT JOIN dbo.Company com ON cu.Company = com.Company
WHERE com.BusinessArea = 'Industrial Solutions' AND com.[Status] = 'Active'

--WHERE [Company] in ('CNOCERT')
GO
PRINT N'Creating [stage].[AXL_IT_Customer]'
GO
CREATE TABLE [stage].[AXL_IT_Customer]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[MainCustomerName] [nvarchar] (100) NULL,
[CustomerName] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (50) NULL,
[AddressLine2] [nvarchar] (50) NULL,
[AddressLine3] [nvarchar] (50) NULL,
[AddressLine] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (20) NULL,
[TelephoneNumber2] [nvarchar] (20) NULL,
[Email] [nvarchar] (100) NULL,
[City] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[Division] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (50) NULL,
[CustomerIndustry] [nvarchar] (50) NULL,
[CustomerSubIndustry] [nvarchar] (50) NULL,
[SalesRepCode] [nvarchar] (50) NULL,
[VATRegNo] [nvarchar] (50) NULL,
[AccountString] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[CustomerABC] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[SalesPersonResponsible] [nvarchar] (50) NULL,
[CustomerType] [nvarchar] (50) NULL,
[Res1] [nvarchar] (50) NULL,
[Res2] [nvarchar] (50) NULL,
[Res3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vAXL_IT_Customer]'
GO


CREATE VIEW [stage].[vAXL_IT_Customer] AS

SELECT 
	CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER(CONCAT(Company, '#', TRIM(CustomerNum))) )) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256', UPPER([Company]))) AS CompanyID
	,UPPER(CONCAT([Company], '#', TRIM([CustomerNum]))) AS CustomerCode
	,PartitionKey

	,UPPER(Company) AS Company
	,UPPER(TRIM(CustomerNum)) AS [CustomerNum]
	,TRIM(MainCustomerName) AS MainCustomerName
	,TRIM(CustomerName) AS  [CustomerName]
	,TRIM([AddressLine1]) AS [AddressLine1]
	,TRIM([AddressLine2]) AS [AddressLine2]
	,TRIM([AddressLine3]) AS [AddressLine3]
	,TRIM([TelephoneNumber1]) AS [TelephoneNum1]
	,TRIM([TelephoneNumber2]) AS [TelephoneNum2]
	,TRIM([Email]) AS [Email]
	,TRIM([ZipCode]) AS [ZipCode]
	,TRIM([City]) AS [City]
	,TRIM([State]) AS [State]
	,TRIM([District]) AS [SalesDistrict]
	,TRIM(con.CountryName) AS CountryName
	,TRIM([ISOAlpha2Code]) AS [CountryCode]
	,TRIM([Division]) AS [Division]
	,TRIM([CustomerIndustry]) AS [CustomerIndustry]
	,TRIM([CustomerSubIndustry]) AS [CustomerSubIndustry]
	,TRIM([AddressLine3]) AS [AddressLine]
	,CONCAT(TRIM(con.CountryName), + ',  ' + TRIM([City]), + ',  ' + TRIM([ZipCode]), + ',  ' + TRIM(addressline3)) AS [FullAddressLine]
	,TRIM(CustomerGroup) AS [CustomerGroup]
	,TRIM(CustomerGroup) AS [CustomerSubGroup]
	,TRIM([SalesRepCode]) AS [SalesPersonCode]
	,TRIM(SalesPersonName) AS [SalesPersonName]
	,TRIM([SalesPersonResponsible]) AS [SalesPersonResponsible]
	,TRIM([VATRegNo]) AS [VATNum]
	,TRIM([AccountString]) AS [AccountNum]
	,TRIM([InternalExternal]) AS [InternalExternal]
	,TRIM([CustomerABC]) AS [CustomerScore]
	,TRIM([CustomerType]) AS [CustomerType]
FROM [stage].[AXL_IT_Customer] com
	LEFT JOIN dbo.Country con ON com.CountryName = con.[ISOAlpha2Code]

--GROUP BY
--	PartitionKey, Company, CustomerNum, CustomerName, MainCustomerName, [AddressLine1], [AddressLine2], [AddressLine3], [TelephoneNumber1], [TelephoneNumber2], [Email], [ZipCode], [City], [State], [District], [CountryName], [Division], [CustomerIndustry], [CustomerSubIndustry], CustomerGroup, [SalesRepCode], SalesPersonName, [SalesPersonResponsible], [VATRegNo], [AccountString], [InternalExternal], [CustomerABC], [CustomerType]

--	Stagetablename in ('AXL_AU_Customer', 'AXL_DC_Customer', 'AXL_HU_Customer', 'AXL_IE_Customer', 'AXL_PL_Customer', 'AXL_PT_Customer', 'AXL_UK_Customer')
GO
PRINT N'Creating [stage].[ARK_PI_SalesLedger]'
GO
CREATE TABLE [stage].[ARK_PI_SalesLedger]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (8) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[Res1] [nvarchar] (50) NULL,
[Res2] [nvarchar] (50) NULL,
[Res3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vARK_PI_SalesLedger]'
GO

CREATE VIEW [stage].[vARK_PI_SalesLedger] AS
--COMMENT EMPTY FIELDS // ADD UPPER()TRIM() INTO CustomerID
SELECT
	CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT(Company, '#', CustomerNum, '#', InvoiceNum))) AS SalesLedgerID
	,CONCAT(Company,'#',CustomerNum, '#', InvoiceNum) AS SalesLedgerCode
	,CONVERT([binary](32),HASHBYTES('SHA2_256',Company)) AS CompanyID
	--,CONVERT([binary](32), HASHBYTES('SHA2_256', CONCAT(Company, '#' ,TRIM(CustomerNum)))) AS CustomerID
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#' ,TRIM(CustomerNum))))) AS CustomerID
	,PartitionKey

	,Company
	,[CustomerNum]
	,InvoiceNum AS [SalesInvoiceNum]
	,[InvoiceDate] AS [SalesInvoiceDate]
	,CONVERT(date, DueDate) AS SalesDueDate
	,CONVERT(date, LastPaymentDate) AS SalesLastPaymentDate
	--,0 AS [InvoiceAmount]
	--,0 AS [RemainingInvoiceAmount]
	--,0 AS [ExchangeRate]
	--,0 AS [VATAmount]
	--,'' AS [Currency]
	--,'' AS [VATCode]
	--,'' AS [PayToName]
	--,'' AS [PayToCity]
	--,'' AS [PayToContact]
	--,'' AS [PaymentTerms]

	--,[Res1] AS SLRes1
	--,[Res2] AS SLRes2
	--,[Res3] AS SLRes3
	--,NULL			AS PaidInvoiceAmount
	,'1900-01-01' AS AccountingDate
	--,NULL AS AgingPeriod
	--,NULL AS AgingSort
	--,NULL AS VATCodeDesc
	--,NULL AS LinkToOriginalInvoice

FROM 
	stage.ARK_PI_SalesLedger
--WHERE [DueDate] >= DATEADD(year, -1, GETDATE()) --Added this where clause as semi-incremental load functinoality since it doesn't work easily on meta-param table. /SM 2021-10-01	
--GROUP BY
--	PartitionKey, Company, CustomerNum, InvoiceNum, DueDate, LastPaymentDate, [InvoiceDate], [Res1], [Res2], [Res3]
GO
PRINT N'Creating [stage].[CER_UK_PurchaseLedger]'
GO
CREATE TABLE [stage].[CER_UK_PurchaseLedger]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierCode] [nvarchar] (50) NOT NULL,
[PurchaseInvoiceNum] [nvarchar] (50) NOT NULL,
[PurchaseOrderNum] [nvarchar] (50) NULL,
[InvoiceDate] [date] NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[InvoiceLCYAmount] [decimal] (18, 4) NOT NULL,
[InvoiceCurrAmount] [decimal] (18, 4) NULL,
[ExchangeRate] [decimal] (18, 4) NULL,
[CurrencyCode] [nvarchar] (10) NULL,
[VATPaid] [decimal] (18, 4) NULL,
[VATcode] [nvarchar] (10) NULL,
[PayToName] [nvarchar] (50) NULL,
[PaymentTermsCode] [nvarchar] (50) NULL,
[PrepaymentNum] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[vCER_UK_PurchaseLedger]'
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
CREATE VIEW [stage].[vCER_UK_PurchaseLedger] AS 

SELECT 
	CONVERT([binary](32),HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(SupplierCode), '#', TRIM(PurchaseInvoiceNum)))) AS PurchaseLedgerID 
	,CONCAT(Company, '#', TRIM(SupplierCode), '#', TRIM(PurchaseInvoiceNum)) AS PurchaseLedgerCode
	,CONVERT([binary](32), HASHBYTES('SHA2_256',TRIM(Company))) AS CompanyID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(TRIM(Company), '#', TRIM(SupplierCode))))) AS SupplierID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256',CONCAT(Company,'#',TRIM(PurchaseInvoiceNum)))) AS PurchaseInvoiceID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(CONCAT(Company,'#',TRIM(PurchaseOrderNum))))) AS PurchaseOrderNumID 
	,CONVERT([binary](32), HASHBYTES('SHA2_256',UPPER(TRIM(CurrencyCode)))) AS CurrencyID 
	,CONVERT(int, replace(convert(date,InvoiceDate),'-','')) AS PurchaseInvoiceDateID  
	,[PartitionKey]

	,TRIM(UPPER([Company])) AS [Company]
	,TRIM(UPPER(SupplierCode)) AS SupplierNum
	,TRIM(UPPER([PurchaseOrderNum])) AS [PurchaseOrderNum]
	,TRIM(UPPER([PurchaseInvoiceNum])) AS [PurchaseInvoiceNum]
	,CONVERT(date, [InvoiceDate]) AS PurchaseInvoiceDate
	,CONVERT(date, [DueDate]) AS PurchaseDueDate
	,CONVERT(date, [LastPaymentDate]) AS PurchaseLastPaymentDate
	,[InvoiceLCYAmount] 
	,[InvoiceCurrAmount] AS InvoiceAmount
--	,IIF([InvoiceCurrAmount]=0, null, [InvoiceLCYAmount]/[InvoiceCurrAmount]) AS ExchangeRate
	,[ExchangeRate]
	,TRIM(UPPER([CurrencyCode])) AS Currency
	,[VATPaid]	AS VATAmount
	,[VATcode]	AS VATCode
	,[PayToName]
	--,'' AS [PayToCity]
	--,'' AS [PayToContact]
	,TRIM(UPPER([PaymentTermsCode])) AS PaymentTerms
	,[PrepaymentNum]
	--,'' AS LastPaymentNum
	--,'' AS PLRES1
	--,'' AS PLRES2
	--,'' AS PLRES3
	--,NULL AS PaidInvoiceAmount
	--,NULL AS RemainingInvoiceAmount
	--,NULL AS LinkToOriginalInvoice
	,'' AS AccountingDate
	--,NULL AS AgingPeriod
	--,NULL AS AgingSort
	--,NULL AS VATCodeDesc
FROM 
	[stage].[CER_UK_PurchaseLedger]
GO
PRINT N'Creating [dbo].[ISOyear]'
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO


CREATE FUNCTION [dbo].[ISOyear](@date DATETIME)
returns SMALLINT
AS
BEGIN
     DECLARE @isoyear SMALLINT = CASE
         WHEN Datepart(isowk, @date)=1
             AND Month(@date)=12 THEN Year(@date)+1
         WHEN Datepart(isowk, @date)=53
             AND Month(@date)=1 THEN Year(@date)-1
         WHEN Datepart(isowk, @date)=52
             AND Month(@date)=1 THEN Year(@date)-1             
         ELSE Year(@date)
        END;
     RETURN @isoyear;
END;
GO
PRINT N'Creating [dbo].[IsZero]'
GO
CREATE FUNCTION [dbo].[IsZero] (
    @Number FLOAT,
    @IsZeroNumber FLOAT
)
RETURNS FLOAT
AS
BEGIN

    IF (@Number = 0)
    BEGIN
        SET @Number = @IsZeroNumber
    END

    RETURN (@Number)

END
GO
PRINT N'Creating [dbo].[ReplaceExactWord]'
GO

create function [dbo].[ReplaceExactWord](
	@text nvarchar(max), 
	@find nvarchar(max), 
	@replace nvarchar(max))
returns nvarchar(max)
as
begin

	declare 
		@newText nvarchar(max) = '',
		@index bigint = 0,
		@currentWord nvarchar(max),
		@finder char(1)

	while @text <> ''
	begin	
		set @index = patindex('%[ ,'+char(10)+'('+char(13)+')'+char(9)+'.;|]%',@text)

		if @index>0 
		begin
			set @finder = substring(@text,@index,1)
		
			set @currentWord = CASE WHEN @index > 0 THEN substring(@text, 0, @index) ELSE @text END;
	
			if replace(replace(@currentWord,'[',''),']','') = @find
				SET @newText = @newText + @replace + @finder;
			else
				SET @newText = @newText + @currentWord + @finder;
	
			if @index = 0
				begin
					set @text = ''
				end
			else
				begin
					set @text = substring(@text, @index+1, len(@text)+2)
				end
		end
	end

	set @newText = rtrim(@newText)

	return @newText
END
;
GO
PRINT N'Creating [dbo].[Split]'
GO



-- select dbo.Split('AOK4A#2012-06-14#1#AOK#ARN#XXX#EU#1','#',2)
-- select dbo.Split('CPHXXXEU_100418_100418','_',1)

CREATE  FUNCTION [dbo].[Split] 
(@fullString varchar(200), @separator char(1),@wordNo int) 
RETURNS VARCHAR(200) -- return_data_type. 
AS 
BEGIN 
    declare @wordPart varchar(200),@sepPos int=0, @wordCount int = 1
while @wordCount <= @wordNo
begin
 
   if @fullString = ''
return null
   set @sepPos = CHARINDEX(@separator, @fullString) 
   if @sepPos = 0
       set @sepPos = len(@fullString)
  
   set @wordPart = SUBSTRING(@fullString, 1, @sepPos)
   set @fullString = SUBSTRING(@fullString, @sepPos+1, LEN(@fullString))

   set @wordCount = @wordCount +1
end
 
    RETURN replace(@wordPart,@separator,'') 
END
GO
PRINT N'Creating [dbo].[cleanStr]'
GO

CREATE FUNCTION [dbo].[cleanStr]
(
@textString varchar(100))
RETURNS varchar(100) AS
BEGIN
	-- Return the result of the function
	RETURN replace(
				replace(@textString, ' ', '') ,'–', '-') 
				
END
GO
PRINT N'Creating [dbo].[fn_Table_Structure]'
GO
CREATE FUNCTION [dbo].[fn_Table_Structure] (@InputSQL AS NVARCHAR(4000), @TableName AS NVARCHAR(128) = NULL) 
RETURNS NVARCHAR(4000)
AS
BEGIN

DECLARE @SQL AS NVARCHAR(4000)
DECLARE @name NVARCHAR(128)
DECLARE @is_nullable BIT 
DECLARE @system_type_name NVARCHAR(128)
DECLARE @collation_name NVARCHAR(128)
DECLARE @NewLine NVARCHAR(2) = CHAR(13) + CHAR(10) -- CRLF

DECLARE CUR_Table CURSOR LOCAL FAST_FORWARD
FOR
    SELECT  name ,
            is_nullable ,
            system_type_name ,
            collation_name
    FROM    sys.dm_exec_describe_first_result_set(@InputSQL, NULL, NULL)
    WHERE   is_hidden = 0
    ORDER BY column_ordinal ASC 

OPEN CUR_Table

FETCH NEXT FROM CUR_Table INTO @name, @is_nullable, @system_type_name,
    @collation_name

SET @SQL = 'CREATE TABLE [' + ISNULL(@TableName, 'TableName') + '] ('
    + @NewLine

WHILE @@FETCH_STATUS = 0
    BEGIN
        SET @SQL += @NewLine + '[' + @name + ']' + ' ' + @system_type_name
            + CASE WHEN @collation_name IS NOT NULL
                   THEN '  COLLATE ' + @collation_name + ' '
                   ELSE ''
              END + CASE WHEN @is_nullable = 0 THEN ' NOT NULL '
                         ELSE ''
                    END + ',' 
        FETCH NEXT FROM CUR_Table INTO @name, @is_nullable, @system_type_name,
            @collation_name
    END

SET @SQL = LEFT(@SQL, LEN(@SQL) - 1) + @NewLine + ')'

CLOSE CUR_Table
DEALLOCATE CUR_Table

RETURN @SQL
end
GO
PRINT N'Creating [dbo].[nulltrim]'
GO


CREATE FUNCTION [dbo].[nulltrim]
(
    @oldValue varchar(100)
)
RETURNS varchar(100)
AS
BEGIN
    DECLARE @Result varchar(100)
    -- do your custom manipulation here. this is just an example
    SELECT @Result = nullif(TRIM(@oldValue), '')
    RETURN @Result
END
GO
PRINT N'Creating [dbo].[removeAlphabetLetters]'
GO
create function [dbo].[removeAlphabetLetters](
	@inputString nvarchar(500))
returns nvarchar(500)
as
begin

	declare 
		@outputString nvarchar(500)

	SET @outputString = @inputString

	WHILE PATINDEX('%[a-zA-Z]%', @outputString) > 0
	BEGIN
	  SET @outputString = STUFF(@outputString, PATINDEX('%[a-zA-Z]%', @outputString), 1, '')
	END

	return @outputString
END
;
GO
PRINT N'Creating [dbo].[removeEmptyChar]'
GO


CREATE FUNCTION [dbo].[removeEmptyChar] (@str nvarchar(2000))
RETURNS nvarchar(2000)
AS
BEGIN
     DECLARE @ShowWhiteSpace nvarchar(2000);
	   SET @ShowWhiteSpace = @str
	   --SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(32), '[?]	')
	   --SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(13), '[CR]	')
	   --SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(10), '[LF]	')
	   --SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(9),  '[TAB]	')
	   --SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(1),  '[SOH]	')
	   --SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(2),  '[STX]	')
	   --SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(3),  '[ETX]	')
	   --SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(4),  '[EOT]	')
	   --SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(5),  '[ENQ]	')
	   --SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(6),  '[ACK]	')
	   --SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(7),  '[BEL]	')
	   --SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(8),  '[BS]	')
	   --SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(11), '[VT]	')
	   --SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(12), '[FF]	')
	   --SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(14), '[SO]	')
	   --SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(15), '[SI]	')
	   --SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(16), '[DLE]	')
	   --SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(17), '[DC1]	')
	   --SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(18), '[DC2]	')
	   --SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(19), '[DC3]	')
	   --SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(20), '[DC4]	')
	   --SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(21), '[NAK]	')
	   --SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(22), '[SYN]	')
	   --SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(23), '[ETB]	')
	   --SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(24), '[CAN]	')
	   --SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(25), '[EM]	')
	   --SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(26), '[SUB]	')
	   --SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(27), '[ESC]	')
	   --SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(28), '[FS]	')
	   --SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(29), '[GS]	')
	   --SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(30), '[RS]	')
	   --SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(31), '[US]	')
	   --SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(32), '') This is a normal space and there is no need to replace it

	   SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(13), '')
	   SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(10), '')
	   SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(9),  '')
	   SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(1),  '')
	   SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(2),  '')
	   SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(3),  '')
	   SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(4),  '')
	   SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(5),  '')
	   SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(6),  '')
	   SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(7),  '')
	   SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(8),  '')
	   SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(11), '')
	   SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(12), '')
	   SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(14), '')
	   SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(15), '')
	   SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(16), '')
	   SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(17), '')
	   SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(18), '')
	   SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(19), '')
	   SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(20), '')
	   SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(21), '')
	   SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(22), '')
	   SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(23), '')
	   SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(24), '')
	   SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(25), '')
	   SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(26), '')
	   SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(27), '')
	   SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(28), '')
	   SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(29), '')
	   SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(30), '')
	   SET @ShowWhiteSpace = REPLACE( @ShowWhiteSpace, CHAR(31), '')
     RETURN(@ShowWhiteSpace)
END
GO
PRINT N'Creating [dbo].[removeNonNumbers]'
GO
create function [dbo].[removeNonNumbers](
	@inputString nvarchar(500))
returns nvarchar(500)
as
begin

	declare 
		@outputString nvarchar(500)

	SET @outputString = @inputString

	WHILE PATINDEX('%[^0-9]%', @outputString) > 0
	BEGIN
		SET @outputString = REPLACE(@outputString, SUBSTRING(@outputString, PATINDEX('%[^0-9]%', @outputString), 1), '')
	END

	return @outputString
END
;
GO
PRINT N'Creating [dbo].[udf_EasterSundayByYear]'
GO
--Easter Sunday Calculator - Ian Fahlman-Morgan - Axinter 10th June 2020
CREATE FUNCTION [dbo].[udf_EasterSundayByYear] 
(@Year CHAR(4)) 
RETURNS SMALLDATETIME 
AS 
BEGIN 

   DECLARE 
       @c INT 
       , @n INT 
       , @k INT 
       , @i INT 
       , @j INT 
       , @l INT 
       , @m INT 
       , @d INT 
       , @Easter DATETIME 

   SET @c = (@Year / 100) 
   SET @n = @Year - 19 * (@Year / 19) 
   SET @k = (@c - 17) / 25 
   SET @i = @c - @c / 4 - ( @c - @k) / 3 + 19 * @n + 15 
   SET @i = @i - 30 * ( @i / 30 ) 
   SET @i = @i - (@i / 28) * (1 - (@i / 28) * (29 / (@i + 1)) * ((21 - @n) / 11)) 
   SET @j = @Year + @Year / 4 + @i + 2 - @c + @c / 4 
   SET @j = @j - 7 * (@j / 7) 
   SET @l = @i - @j 
   SET @m = 3 + (@l + 40) / 44 
   SET @d = @l + 28 - 31 * ( @m / 4 ) 

   SET @Easter = (SELECT RIGHT('0' + CONVERT(VARCHAR(2),@m),2) + '/' + RIGHT('0' + CONVERT(VARCHAR(2),@d),2) + '/' + CONVERT(CHAR(4),@Year)) 

   RETURN @Easter 
END
GO
PRINT N'Creating [dbo].[upper&trim]'
GO

CREATE FUNCTION [dbo].[upper&trim]
(
    @oldValue varchar(100)
)
RETURNS varchar(100)
AS
BEGIN
    DECLARE @Result varchar(100)
    -- do your custom manipulation here. this is just an example
    SELECT @Result = nullif(TRIM(UPPER(@oldValue)), '')
    RETURN @Result
END
GO
PRINT N'Creating [audit].[MasterPipelinesLog]'
GO
CREATE TABLE [audit].[MasterPipelinesLog]
(
[PipelineRunID] [varchar] (100) NULL,
[PipelineName] [varchar] (100) NULL,
[StartTime] [datetime] NULL,
[EndTime] [datetime] NULL,
[Status] [varchar] (25) NULL
)
GO
PRINT N'Creating [audit].[PipelinesActivitiesLog_dev]'
GO
CREATE TABLE [audit].[PipelinesActivitiesLog_dev]
(
[PipelineRunID] [varchar] (100) NULL,
[PipelineTriggerRunID] [varchar] (100) NULL,
[Company] [varchar] (25) NULL,
[TableName] [varchar] (25) NULL,
[Stage] [varchar] (25) NULL,
[StartTime] [datetime] NULL,
[EndTime] [datetime] NULL,
[Status] [varchar] (25) NULL,
[ErrorMessage] [varchar] (max) NULL
)
GO
PRINT N'Creating [dbo].[ALLSourceTables_OLine_dev]'
GO
CREATE TABLE [dbo].[ALLSourceTables_OLine_dev]
(
[SourceSystem] [nvarchar] (50) NULL,
[ServerName] [nvarchar] (100) NULL,
[DatabaseName] [nvarchar] (100) NULL,
[TableSchema] [nvarchar] (50) NULL,
[TableName] [nvarchar] (100) NULL,
[TableLoadOrder] [int] NULL,
[DeltaLoadStatement] [nvarchar] (500) NULL,
[DeltaLoadValue] [nvarchar] (500) NULL,
[DeltaLoadGetNewValue] [nvarchar] (50) NULL,
[IsActive] [int] NULL,
[SourceSelectStatement] [nvarchar] (max) NULL,
[blobfilepath] [nvarchar] (50) NULL,
[blobfilename] [nvarchar] (50) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[StoredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL,
[dwFilterColumnName] [varchar] (50) NULL,
[dwtablename_schema] [varchar] (8) NULL,
[Company] [varchar] (20) NULL
)
GO
PRINT N'Creating [dbo].[AXL_seg_Customer]'
GO
CREATE TABLE [dbo].[AXL_seg_Customer]
(
[CustomerSubIndustry] [nvarchar] (50) NULL,
[Segment] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [dbo].[AxInterFinansCustomer]'
GO
CREATE TABLE [dbo].[AxInterFinansCustomer]
(
[Prop0] [int] NULL,
[email] [nvarchar] (max) NULL,
[address1] [nvarchar] (max) NULL,
[address2] [nvarchar] (max) NULL,
[Land] [nvarchar] (50) NULL,
[OU] [nvarchar] (50) NULL,
[MD] [nvarchar] (50) NULL,
[Created] [date] NULL
)
GO
PRINT N'Creating [dbo].[AxInterSalesChannel_GroundTruth]'
GO
CREATE TABLE [dbo].[AxInterSalesChannel_GroundTruth]
(
[BusinessGroup] [nvarchar] (50) NULL,
[Company] [nvarchar] (50) NULL,
[CompanyName] [nvarchar] (50) NULL,
[SalesChannel] [nvarchar] (50) NULL,
[ChannelUsed] [nvarchar] (50) NULL,
[ChannelDataProcurable] [nvarchar] (50) NULL,
[ChannelValidationDate] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [dbo].[Calculations]'
GO
CREATE TABLE [dbo].[Calculations]
(
[Col1] [nvarchar] (max) NULL,
[Col2] [nvarchar] (max) NULL,
[Col3] [nvarchar] (max) NULL,
[Col4] [nvarchar] (max) NULL,
[Col5] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [dbo].[CurrencySelection]'
GO
CREATE TABLE [dbo].[CurrencySelection]
(
[TypeID] [int] NULL,
[CurrencySelector] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [dbo].[DSSourceTables_AMITBATZ_dev]'
GO
CREATE TABLE [dbo].[DSSourceTables_AMITBATZ_dev]
(
[SourceSystem] [nvarchar] (50) NULL,
[ServerName] [nvarchar] (50) NULL,
[DatabaseName] [nvarchar] (50) NULL,
[TableSchema] [nvarchar] (50) NULL,
[TableName] [nvarchar] (50) NULL,
[TableLoadOrder] [int] NULL,
[DeltaLoadStatement] [nvarchar] (max) NULL,
[DeltaLoadValue] [nvarchar] (50) NULL,
[DeltaLoadGetNewValue] [nvarchar] (max) NULL,
[IsActive] [int] NULL,
[SourceSelectStatement] [varchar] (max) NULL,
[blobfilepath] [nvarchar] (50) NULL,
[blobfilename] [nvarchar] (50) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[StoredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL,
[dwFilterColumnName] [varchar] (50) NULL,
[dwtablename_schema] [varchar] (8) NULL,
[Company] [varchar] (20) NULL,
[sourceFilterColumnName] [varchar] (20) NULL,
[dailyDatePart] [varchar] (20) NULL,
[weeklyDatePart] [varchar] (20) NULL,
[dailyNumber] [varchar] (20) NULL,
[weeklyNumber] [varchar] (20) NULL
)
GO
PRINT N'Creating [dbo].[DSSourceTables_IOWtr_dev]'
GO
CREATE TABLE [dbo].[DSSourceTables_IOWtr_dev]
(
[SourceSystem] [nvarchar] (50) NULL,
[ServerName] [nvarchar] (50) NULL,
[DatabaseName] [nvarchar] (50) NULL,
[TableSchema] [nvarchar] (50) NULL,
[TableName] [nvarchar] (50) NOT NULL,
[TableLoadOrder] [int] NULL,
[DeltaLoadStatement] [nvarchar] (50) NULL,
[DeltaLoadValue] [datetime] NULL,
[DeltaLoadGetNewValue] [datetime] NULL,
[IsActive] [int] NULL,
[SourceSelectStatement] [nvarchar] (2000) NULL,
[blobfilepath] [nvarchar] (50) NULL,
[blobfilename] [nvarchar] (50) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[StoredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL,
[dwFilterColumnName] [varchar] (50) NULL,
[dwtablename_schema] [nvarchar] (50) NULL,
[Company] [nchar] (10) NULL,
[sourceFilterColumnName] [varchar] (20) NULL,
[dailyDatePart] [varchar] (20) NULL,
[weeklyDatePart] [varchar] (20) NULL,
[dailyNumber] [varchar] (20) NULL,
[weeklyNumber] [varchar] (20) NULL
)
GO
PRINT N'Creating [dbo].[DSSourceTables_TRANSAUTO_dev]'
GO
CREATE TABLE [dbo].[DSSourceTables_TRANSAUTO_dev]
(
[SourceSystem] [nvarchar] (50) NULL,
[ServerName] [nvarchar] (50) NULL,
[DatabaseName] [nvarchar] (50) NULL,
[TableSchema] [nvarchar] (50) NULL,
[TableName] [nvarchar] (50) NULL,
[TableLoadOrder] [int] NULL,
[DeltaLoadStatement] [nvarchar] (max) NULL,
[DeltaLoadValue] [nvarchar] (50) NULL,
[DeltaLoadGetNewValue] [nvarchar] (max) NULL,
[IsActive] [int] NULL,
[SourceSelectStatement] [varchar] (max) NULL,
[blobfilepath] [nvarchar] (50) NULL,
[blobfilename] [nvarchar] (50) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[StoredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL,
[dwFilterColumnName] [varchar] (50) NULL,
[dwtablename_schema] [varchar] (8) NULL,
[Company] [varchar] (20) NULL,
[sourceFilterColumnName] [varchar] (20) NULL,
[dailyDatePart] [varchar] (20) NULL,
[weeklyDatePart] [varchar] (20) NULL,
[dailyNumber] [varchar] (20) NULL,
[weeklyNumber] [varchar] (20) NULL
)
GO
PRINT N'Creating [dbo].[DnB_Customer]'
GO
CREATE TABLE [dbo].[DnB_Customer]
(
[CustomerID] [binary] (32) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[MainCustomerName] [nvarchar] (100) NULL,
[CustomerName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[AddressLine3] [nvarchar] (100) NULL,
[TelephoneNum1] [nvarchar] (50) NULL,
[TelephoneNum2] [nvarchar] (50) NULL,
[Email] [nvarchar] (100) NULL,
[ZipCode] [nvarchar] (50) NULL,
[City] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[SalesDistrict] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[Division] [nvarchar] (50) NULL,
[CustomerIndustry] [nvarchar] (50) NULL,
[CustomerSubIndustry] [nvarchar] (50) NULL,
[AddressLine] [nvarchar] (250) NULL,
[FullAddressLine] [nvarchar] (500) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[CustomerSubGroup] [nvarchar] (50) NULL,
[SalesPersonCode] [nvarchar] (50) NULL,
[SalesPersonName] [varchar] (100) NULL,
[SalesPersonResponsible] [nvarchar] (100) NULL,
[VATNum] [nvarchar] (50) NULL,
[OrganizationNum] [nvarchar] (100) NULL,
[AccountNum] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[CustomerScore] [nvarchar] (20) NULL,
[CustomerType] [nvarchar] (50) NULL,
[inferred_member] [bit] NULL
)
GO
PRINT N'Creating primary key [PK_Customer] on [dbo].[DnB_Customer]'
GO
ALTER TABLE [dbo].[DnB_Customer] ADD CONSTRAINT [PK_Customer] PRIMARY KEY CLUSTERED ([CustomerID])
GO
PRINT N'Creating [dbo].[DnB_Supplier]'
GO
CREATE TABLE [dbo].[DnB_Supplier]
(
[SupplierID] [binary] (32) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[MainSupplierName] [nvarchar] (100) NULL,
[SupplierName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[AddressLine3] [nvarchar] (100) NULL,
[TelephoneNum] [nvarchar] (50) NULL,
[Email] [nvarchar] (200) NULL,
[ZipCode] [nvarchar] (50) NULL,
[City] [nvarchar] (50) NULL,
[District] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (200) NULL,
[Region] [nvarchar] (200) NULL,
[SupplierCategory] [nvarchar] (200) NULL,
[SupplierResponsible] [nvarchar] (100) NULL,
[AddressLine] [nvarchar] (250) NULL,
[FullAddressLine] [nvarchar] (500) NULL,
[AccountNum] [nvarchar] (50) NULL,
[VATNum] [nvarchar] (50) NULL,
[OrganizationNum] [nvarchar] (100) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[CodeOfConduct] [nvarchar] (20) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[SupplierScore] [nvarchar] (20) NULL,
[MinOrderQty] [decimal] (18, 4) NULL,
[MinOrderValue] [decimal] (18, 4) NULL,
[Website] [nvarchar] (100) NULL,
[Comments] [nvarchar] (max) NULL,
[SRes1] [nvarchar] (100) NULL,
[SRes2] [nvarchar] (100) NULL,
[SRes3] [nvarchar] (100) NULL,
[inferred_member] [bit] NULL
)
GO
PRINT N'Creating primary key [PK_Supplier] on [dbo].[DnB_Supplier]'
GO
ALTER TABLE [dbo].[DnB_Supplier] ADD CONSTRAINT [PK_Supplier] PRIMARY KEY NONCLUSTERED ([SupplierID])
GO
PRINT N'Creating [dbo].[FHSourceTables_AxFlow]'
GO
CREATE TABLE [dbo].[FHSourceTables_AxFlow]
(
[SourceSystem] [nvarchar] (50) NULL,
[ServerName] [nvarchar] (50) NULL,
[DatabaseName] [nvarchar] (50) NULL,
[TableSchema] [nvarchar] (50) NULL,
[TableName] [nvarchar] (50) NULL,
[TableLoadOrder] [int] NULL,
[DeltaLoadStatement] [nvarchar] (100) NULL,
[DeltaLoadValue] [nvarchar] (50) NULL,
[DeltaLoadGetNewValue] [nvarchar] (100) NULL,
[IsActive] [int] NULL,
[SourceSelectStatement] [nvarchar] (max) NULL,
[blobfilepath] [nvarchar] (50) NULL,
[blobfilename] [nvarchar] (50) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[StoredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL,
[dwFilterColumnName] [nvarchar] (50) NULL,
[dwtablename_schema] [nvarchar] (50) NULL,
[Company] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [dbo].[INSourceTables_OCSSE_dev]'
GO
CREATE TABLE [dbo].[INSourceTables_OCSSE_dev]
(
[SourceSystem] [nvarchar] (50) NULL,
[ServerName] [nvarchar] (50) NULL,
[DatabaseName] [nvarchar] (50) NULL,
[TableSchema] [nvarchar] (50) NULL,
[TableName] [nvarchar] (50) NULL,
[TableLoadOrder] [int] NULL,
[DeltaLoadStatement] [varchar] (500) NULL,
[DeltaLoadValue] [nvarchar] (50) NULL,
[DeltaLoadGetNewValue] [nvarchar] (50) NULL,
[IsActive] [int] NULL,
[SourceSelectStatement] [nvarchar] (800) NULL,
[blobfilepath] [nvarchar] (50) NULL,
[blobfilename] [nvarchar] (50) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[StoredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL,
[dwtablename_schema] [varchar] (8) NULL,
[dwFilterColumnName] [varchar] (50) NULL,
[Company] [varchar] (20) NULL,
[sourceFilterColumnName] [varchar] (20) NULL,
[dailyDatePart] [varchar] (20) NULL,
[weeklyDatePart] [varchar] (20) NULL,
[dailyNumber] [varchar] (20) NULL,
[weeklyNumber] [varchar] (20) NULL
)
GO
PRINT N'Creating [dbo].[LSSourceTables_AFISCM_dev]'
GO
CREATE TABLE [dbo].[LSSourceTables_AFISCM_dev]
(
[SourceSystem] [nvarchar] (50) NULL,
[ServerName] [nvarchar] (50) NULL,
[DatabaseName] [nvarchar] (50) NULL,
[TableSchema] [nvarchar] (50) NULL,
[TableName] [nvarchar] (50) NULL,
[TableLoadOrder] [int] NULL,
[DeltaLoadStatement] [nvarchar] (max) NULL,
[DeltaLoadValue] [nvarchar] (50) NULL,
[DeltaLoadGetNewValue] [nvarchar] (max) NULL,
[IsActive] [int] NULL,
[SourceSelectStatement] [nvarchar] (max) NULL,
[blobfilepath] [nvarchar] (50) NULL,
[blobfilename] [nvarchar] (50) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[StoredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL,
[dwFilterColumnName] [varchar] (50) NULL,
[dwtablename_schema] [varchar] (8) NULL,
[Company] [varchar] (20) NULL,
[sourceFilterColumnName] [varchar] (30) NULL,
[dailyDatePart] [varchar] (30) NULL,
[weeklyDatePart] [varchar] (30) NULL,
[dailyNumber] [varchar] (30) NULL,
[weeklyNumber] [varchar] (30) NULL
)
GO
PRINT N'Creating [dbo].[LSSourceTables_CERTEXDK_dev]'
GO
CREATE TABLE [dbo].[LSSourceTables_CERTEXDK_dev]
(
[SourceSystem] [nvarchar] (50) NULL,
[ServerName] [nvarchar] (50) NULL,
[DatabaseName] [nvarchar] (50) NULL,
[TableSchema] [nvarchar] (50) NULL,
[TableName] [nvarchar] (100) NULL,
[TableLoadOrder] [nvarchar] (50) NULL,
[DeltaLoadStatement] [nvarchar] (500) NULL,
[DeltaLoadValue] [nvarchar] (50) NULL,
[DeltaLoadGetNewValue] [nvarchar] (500) NULL,
[IsActive] [int] NULL,
[SourceSelectStatement] [nvarchar] (1000) NULL,
[blobfilepath] [nvarchar] (50) NULL,
[blobfilename] [nvarchar] (50) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[StoredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL,
[dwtablename_schema] [varchar] (8) NULL,
[dwFilterColumnName] [varchar] (50) NULL,
[Company] [varchar] (20) NULL,
[sourceFilterColumnName] [varchar] (30) NULL,
[dailyDatePart] [varchar] (30) NULL,
[weeklyDatePart] [varchar] (30) NULL,
[dailyNumber] [varchar] (30) NULL,
[weeklyNumber] [varchar] (30) NULL
)
GO
PRINT N'Creating [dbo].[LSSourceTables_CERTEXNO_dev]'
GO
CREATE TABLE [dbo].[LSSourceTables_CERTEXNO_dev]
(
[SourceSystem] [nvarchar] (50) NULL,
[ServerName] [nvarchar] (100) NULL,
[DatabaseName] [varchar] (50) NULL,
[TableSchema] [varchar] (50) NULL,
[TableName] [varchar] (100) NULL,
[TableLoadOrder] [int] NULL,
[DeltaLoadStatement] [varchar] (500) NULL,
[DeltaLoadValue] [varchar] (50) NULL,
[DeltaLoadGetNewValue] [varchar] (500) NULL,
[IsActive] [int] NULL,
[SourceSelectStatement] [varchar] (max) NULL,
[blobfilepath] [nvarchar] (50) NULL,
[blobfilename] [nvarchar] (50) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[StoredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL,
[dwFilterColumnName] [varchar] (50) NULL,
[dwtablename_schema] [varchar] (8) NULL,
[Company] [varchar] (20) NULL,
[sourceFilterColumnName] [varchar] (30) NULL,
[dailyDatePart] [varchar] (30) NULL,
[weeklyDatePart] [varchar] (30) NULL,
[dailyNumber] [varchar] (30) NULL,
[weeklyNumber] [varchar] (30) NULL
)
GO
PRINT N'Creating [dbo].[LSSourceTables_CERTEXNO_fnc]'
GO
CREATE TABLE [dbo].[LSSourceTables_CERTEXNO_fnc]
(
[SourceSystem] [nvarchar] (50) NULL,
[ServerName] [nvarchar] (100) NULL,
[DatabaseName] [varchar] (50) NULL,
[TableSchema] [varchar] (50) NULL,
[TableName] [varchar] (100) NULL,
[TableLoadOrder] [int] NULL,
[DeltaLoadStatement] [varchar] (500) NULL,
[DeltaLoadValue] [varchar] (50) NULL,
[DeltaLoadGetNewValue] [varchar] (500) NULL,
[IsActive] [int] NULL,
[SourceSelectStatement] [varchar] (max) NULL,
[blobfilepath] [nvarchar] (50) NULL,
[blobfilename] [nvarchar] (50) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[StoredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL,
[dwFilterColumnName] [varchar] (50) NULL,
[dwtablename_schema] [varchar] (8) NULL,
[Company] [varchar] (20) NULL,
[sourceFilterColumnName] [varchar] (30) NULL,
[dailyDatePart] [varchar] (30) NULL,
[weeklyDatePart] [varchar] (30) NULL,
[dailyNumber] [varchar] (30) NULL,
[weeklyNumber] [varchar] (30) NULL
)
GO
PRINT N'Creating [dbo].[LSSourceTables_CERTEX_DE]'
GO
CREATE TABLE [dbo].[LSSourceTables_CERTEX_DE]
(
[SourceSystem] [nvarchar] (50) NULL,
[ServerName] [nvarchar] (50) NULL,
[DatabaseName] [nvarchar] (50) NULL,
[TableSchema] [nvarchar] (50) NULL,
[TableName] [nvarchar] (50) NULL,
[TableLoadOrder] [int] NULL,
[DeltaLoadStatement] [nvarchar] (max) NULL,
[DeltaLoadValue] [nvarchar] (50) NULL,
[DeltaLoadGetNewValue] [nvarchar] (max) NULL,
[IsActive] [int] NULL,
[SourceSelectStatement] [nvarchar] (max) NULL,
[blobfilepath] [nvarchar] (100) NULL,
[blobfilename] [nvarchar] (50) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[StoredProcedureViewName] [nvarchar] (100) NULL,
[StoredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL,
[dwFilterColumnName] [varchar] (50) NULL,
[dwtablename_schema] [varchar] (8) NULL,
[Company] [varchar] (20) NULL,
[sourceFilterColumnName] [varchar] (30) NULL,
[dailyDatePart] [varchar] (30) NULL,
[weeklyDatePart] [varchar] (30) NULL,
[dailyNumber] [varchar] (30) NULL,
[weeklyNumber] [varchar] (30) NULL
)
GO
PRINT N'Creating [dbo].[LSSourceTables_CERTEX_NO_BC]'
GO
CREATE TABLE [dbo].[LSSourceTables_CERTEX_NO_BC]
(
[SourceSystem] [nvarchar] (50) NULL,
[ServerName] [nvarchar] (50) NULL,
[DatabaseName] [nvarchar] (50) NULL,
[TableSchema] [nvarchar] (50) NULL,
[TableName] [nvarchar] (50) NULL,
[TableLoadOrder] [int] NULL,
[DeltaLoadStatement] [nvarchar] (max) NULL,
[DeltaLoadValue] [nvarchar] (50) NULL,
[DeltaLoadGetNewValue] [nvarchar] (max) NULL,
[IsActive] [int] NULL,
[SourceSelectStatement] [nvarchar] (max) NULL,
[blobfilepath] [nvarchar] (100) NULL,
[blobfilename] [nvarchar] (50) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[StoredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL,
[dwFilterColumnName] [nvarchar] (50) NULL,
[dwtablename_schema] [nvarchar] (8) NULL,
[Company] [varchar] (20) NULL,
[sourceFilterColumnName] [varchar] (30) NULL,
[dailyDatePart] [varchar] (30) NULL,
[weeklyDatePart] [varchar] (30) NULL,
[dailyNumber] [varchar] (30) NULL,
[weeklyNumber] [varchar] (30) NULL
)
GO
PRINT N'Creating [dbo].[LSSourceTables_CERTEX_dev]'
GO
CREATE TABLE [dbo].[LSSourceTables_CERTEX_dev]
(
[SourceSystem] [nvarchar] (50) NULL,
[ServerName] [nvarchar] (50) NULL,
[DatabaseName] [nvarchar] (50) NULL,
[TableSchema] [nvarchar] (50) NULL,
[TableName] [nvarchar] (50) NULL,
[TableLoadOrder] [int] NULL,
[DeltaLoadStatement] [nvarchar] (max) NULL,
[DeltaLoadValue] [nvarchar] (50) NULL,
[DeltaLoadGetNewValue] [nvarchar] (max) NULL,
[IsActive] [int] NULL,
[SourceSelectStatement] [nvarchar] (max) NULL,
[blobfilepath] [nvarchar] (100) NULL,
[blobfilename] [nvarchar] (50) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[StoredProcedureViewName] [nvarchar] (100) NULL,
[StoredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL,
[dwFilterColumnName] [varchar] (50) NULL,
[dwtablename_schema] [varchar] (8) NULL
)
GO
PRINT N'Creating [dbo].[LSSourceTables_CERTEX_newiScala34_dev]'
GO
CREATE TABLE [dbo].[LSSourceTables_CERTEX_newiScala34_dev]
(
[SourceSystem] [nvarchar] (50) NULL,
[ServerName] [nvarchar] (50) NULL,
[DatabaseName] [nvarchar] (50) NULL,
[TableSchema] [nvarchar] (50) NULL,
[TableName] [nvarchar] (50) NULL,
[TableLoadOrder] [int] NULL,
[DeltaLoadStatement] [nvarchar] (max) NULL,
[DeltaLoadValue] [nvarchar] (50) NULL,
[DeltaLoadGetNewValue] [nvarchar] (max) NULL,
[IsActive] [int] NULL,
[SourceSelectStatement] [nvarchar] (max) NULL,
[blobfilepath] [nvarchar] (100) NULL,
[blobfilename] [nvarchar] (50) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[StoredProcedureViewName] [nvarchar] (100) NULL,
[StoredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL,
[Company] [nvarchar] (50) NULL,
[dwFilterColumnName] [varchar] (50) NULL,
[dwtablename_schema] [varchar] (8) NULL,
[sourceFilterColumnName] [varchar] (30) NULL,
[dailyDatePart] [varchar] (30) NULL,
[weeklyDatePart] [varchar] (30) NULL,
[dailyNumber] [varchar] (30) NULL,
[weeklyNumber] [varchar] (30) NULL
)
GO
PRINT N'Creating [dbo].[LSSourceTables_CYESA_dev]'
GO
CREATE TABLE [dbo].[LSSourceTables_CYESA_dev]
(
[FileName] [nvarchar] (50) NOT NULL,
[TableLoadOrder] [int] NULL,
[DeltaLoadStatement] [varchar] (500) NULL,
[DeltaLoadValue] [varchar] (50) NULL,
[DeltaLoadGetNewValue] [varchar] (500) NULL,
[IsActive] [int] NULL,
[SourceSelectStatement] [varchar] (max) NULL,
[blobfilepath] [nvarchar] (50) NULL,
[blobfilename] [nvarchar] (50) NULL,
[Pre_Stagetablename] [nvarchar] (50) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[StoredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL,
[dwFilterColumnName] [varchar] (50) NULL,
[dwtablename_schema] [varchar] (8) NULL,
[Company] [varchar] (20) NULL
)
GO
PRINT N'Creating [dbo].[LSSourceTables_HFIHAKLFI_dev]'
GO
CREATE TABLE [dbo].[LSSourceTables_HFIHAKLFI_dev]
(
[SourceSystem] [nvarchar] (50) NULL,
[ServerName] [nvarchar] (100) NULL,
[DatabaseName] [nvarchar] (50) NULL,
[TableSchema] [nvarchar] (50) NULL,
[TableName] [nvarchar] (100) NULL,
[TableLoadOrder] [int] NULL,
[DeltaLoadStatement] [nvarchar] (500) NULL,
[DeltaLoadValue] [nvarchar] (50) NULL,
[DeltaLoadGetNewValue] [nvarchar] (500) NULL,
[IsActive] [int] NULL,
[SourceSelectStatement] [nvarchar] (max) NULL,
[blobfilepath] [nvarchar] (50) NULL,
[blobfilename] [nvarchar] (50) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[StoredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL,
[dwFilterColumnName] [varchar] (50) NULL,
[dwtablename_schema] [varchar] (8) NULL,
[Company] [varchar] (20) NULL,
[sourceFilterColumnName] [varchar] (30) NULL,
[dailyDatePart] [varchar] (30) NULL,
[weeklyDatePart] [varchar] (30) NULL,
[dailyNumber] [varchar] (30) NULL,
[weeklyNumber] [varchar] (30) NULL
)
GO
PRINT N'Creating [dbo].[LSSourceTables_MENNENSNL_dev]'
GO
CREATE TABLE [dbo].[LSSourceTables_MENNENSNL_dev]
(
[SourceSystem] [nvarchar] (50) NULL,
[ServerName] [nvarchar] (50) NULL,
[DatabaseName] [nvarchar] (50) NULL,
[TableSchema] [nvarchar] (50) NULL,
[TableName] [nvarchar] (50) NULL,
[TableLoadOrder] [int] NULL,
[DeltaLoadStatement] [nvarchar] (max) NULL,
[DeltaLoadValue] [nvarchar] (50) NULL,
[DeltaLoadGetNewValue] [nvarchar] (max) NULL,
[IsActive] [int] NULL,
[SourceSelectStatement] [nvarchar] (max) NULL,
[blobfilepath] [nvarchar] (50) NULL,
[blobfilename] [nvarchar] (50) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[StoredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL,
[dwFilterColumnName] [varchar] (50) NULL,
[dwtablename_schema] [varchar] (8) NULL,
[Company] [varchar] (20) NULL,
[sourceFilterColumnName] [varchar] (30) NULL,
[dailyDatePart] [varchar] (30) NULL,
[weeklyDatePart] [varchar] (30) NULL,
[dailyNumber] [varchar] (30) NULL,
[weeklyNumber] [varchar] (30) NULL
)
GO
PRINT N'Creating [dbo].[LSSourceTables_TRACLEV_dev]'
GO
CREATE TABLE [dbo].[LSSourceTables_TRACLEV_dev]
(
[FileName] [nvarchar] (50) NOT NULL,
[TableLoadOrder] [int] NULL,
[DeltaLoadStatement] [varchar] (500) NULL,
[DeltaLoadValue] [varchar] (50) NULL,
[DeltaLoadGetNewValue] [varchar] (500) NULL,
[IsActive] [int] NULL,
[SourceSelectStatement] [varchar] (max) NULL,
[blobfilepath] [nvarchar] (50) NULL,
[blobfilename] [nvarchar] (50) NULL,
[Pre_Stagetablename] [nvarchar] (50) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[StoredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL,
[dwFilterColumnName] [varchar] (50) NULL,
[dwtablename_schema] [varchar] (8) NULL,
[Company] [varchar] (12) NULL,
[sourceFilterColumnName] [varchar] (30) NULL,
[dailyDatePart] [varchar] (30) NULL,
[weeklyDatePart] [varchar] (30) NULL,
[dailyNumber] [varchar] (30) NULL,
[weeklyNumber] [varchar] (30) NULL
)
GO
PRINT N'Creating [dbo].[MasterSourceTable]'
GO
CREATE TABLE [dbo].[MasterSourceTable]
(
[CompanyName] [nvarchar] (30) NULL,
[CompanyApiCode] [nvarchar] (100) NULL,
[ApiCall] [nvarchar] (50) NULL,
[SourceSystemName] [nvarchar] (50) NULL,
[SourceServerName] [nvarchar] (70) NULL,
[SourceDatabaseName] [nvarchar] (30) NULL,
[SourceSchemaName] [varchar] (12) NULL,
[SourceTableName] [varchar] (60) NULL,
[SourceSelectStatement] [nvarchar] (max) NULL,
[DeltaLoadStatement] [nvarchar] (max) NULL,
[IsActive] [bit] NULL,
[BlobContainerName] [varchar] (50) NULL,
[BlobFilePath] [varchar] (50) NULL,
[BlobFileName] [varchar] (50) NULL,
[StageDatabaseName] [nvarchar] (30) NULL,
[StageSchemaName] [varchar] (12) NULL,
[StageTableName] [varchar] (60) NULL,
[StageViewName] [varchar] (60) NULL,
[SinkDatabaseName] [nvarchar] (30) NULL,
[SinkSchemaName] [varchar] (12) NULL,
[SinkTableName] [varchar] (60) NULL,
[SinkTablePK] [varchar] (25) NULL,
[SinkDynamicMapping] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [dbo].[MeasureParameter]'
GO
CREATE TABLE [dbo].[MeasureParameter]
(
[TypeID] [int] NULL,
[SelectType] [nvarchar] (max) NULL,
[Purpose] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [dbo].[NoOfDays]'
GO
CREATE TABLE [dbo].[NoOfDays]
(
[NoOfDays] [int] NULL
)
GO
PRINT N'Creating [dbo].[PTSourceTables_ACORN_dev]'
GO
CREATE TABLE [dbo].[PTSourceTables_ACORN_dev]
(
[SourceSystem] [nvarchar] (50) NULL,
[ServerName] [nvarchar] (50) NULL,
[DatabaseName] [nvarchar] (50) NULL,
[TableSchema] [nvarchar] (50) NULL,
[TableName] [nvarchar] (50) NULL,
[TableLoadOrder] [int] NULL,
[DeltaLoadStatement] [nvarchar] (1000) NULL,
[DeltaLoadValue] [nvarchar] (50) NULL,
[DeltaLoadGetNewValue] [nvarchar] (50) NULL,
[IsActive] [int] NULL,
[SourceSelectStatement] [nvarchar] (1000) NOT NULL,
[blobfilepath] [nvarchar] (50) NULL,
[blobfilename] [nvarchar] (50) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[SToredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL,
[dwFilterColumnName] [varchar] (50) NULL,
[dwtablename_schema] [varchar] (8) NULL,
[Company] [varchar] (20) NULL,
[sourceFilterColumnName] [varchar] (20) NULL,
[dailyDatePart] [varchar] (20) NULL,
[weeklyDatePart] [varchar] (20) NULL,
[dailyNumber] [varchar] (20) NULL,
[weeklyNumber] [varchar] (20) NULL
)
GO
PRINT N'Creating [dbo].[PTSourceTables_ARKOV_dev]'
GO
CREATE TABLE [dbo].[PTSourceTables_ARKOV_dev]
(
[SourceSystem] [nvarchar] (50) NULL,
[ServerName] [nvarchar] (50) NULL,
[DatabaseName] [nvarchar] (50) NULL,
[TableSchema] [nvarchar] (50) NULL,
[TableName] [nvarchar] (50) NULL,
[TableLoadOrder] [int] NULL,
[DeltaLoadStatement] [nvarchar] (1000) NULL,
[DeltaLoadValue] [nvarchar] (50) NULL,
[DeltaLoadGetNewValue] [nvarchar] (500) NULL,
[IsActive] [int] NULL,
[SourceSelectStatement] [nvarchar] (max) NULL,
[blobfilepath] [nvarchar] (50) NULL,
[blobfilename] [nvarchar] (50) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[StoredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL,
[dwFilterColumnName] [varchar] (50) NULL,
[dwtablename_schema] [varchar] (8) NULL,
[Company] [nvarchar] (20) NULL,
[sourceFilterColumnName] [varchar] (30) NULL,
[dailyDatePart] [varchar] (20) NULL,
[weeklyDatePart] [varchar] (20) NULL,
[dailyNumber] [varchar] (20) NULL,
[weeklyNumber] [varchar] (20) NULL
)
GO
PRINT N'Creating [dbo].[PTSourceTables_BELL_dev]'
GO
CREATE TABLE [dbo].[PTSourceTables_BELL_dev]
(
[SourceSystem] [nvarchar] (50) NULL,
[ServerName] [nvarchar] (50) NULL,
[DatabaseName] [nvarchar] (50) NULL,
[TableSchema] [nvarchar] (50) NULL,
[TableName] [nvarchar] (50) NULL,
[TableLoadOrder] [nvarchar] (50) NULL,
[DeltaLoadStatement] [nvarchar] (max) NULL,
[DeltaLoadValue] [nvarchar] (50) NULL,
[DeltaLoadGetNewValue] [nvarchar] (500) NULL,
[IsActive] [int] NULL,
[SourceSelectStatement] [nvarchar] (max) NULL,
[blobfilepath] [nvarchar] (50) NULL,
[blobfilename] [nvarchar] (50) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[SToredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL,
[dwFilterColumnName] [varchar] (50) NULL,
[dwtablename_schema] [varchar] (8) NULL,
[Company] [nvarchar] (20) NULL,
[sourceFilterColumnName] [varchar] (20) NULL,
[dailyDatePart] [varchar] (20) NULL,
[weeklyDatePart] [varchar] (20) NULL,
[dailyNumber] [varchar] (20) NULL,
[weeklyNumber] [varchar] (20) NULL
)
GO
PRINT N'Creating [dbo].[PTSourceTables_JENSS_dev]'
GO
CREATE TABLE [dbo].[PTSourceTables_JENSS_dev]
(
[SourceSystem] [nvarchar] (50) NULL,
[ServerName] [nvarchar] (50) NULL,
[DatabaseName] [nvarchar] (50) NULL,
[TableSchema] [nvarchar] (50) NULL,
[TableName] [nvarchar] (50) NULL,
[TableLoadOrder] [int] NULL,
[DeltaLoadStatement] [nvarchar] (max) NULL,
[DeltaLoadValue] [nvarchar] (50) NULL,
[DeltaLoadGetNewValue] [nvarchar] (max) NULL,
[IsActive] [int] NULL,
[SourceSelectStatement] [nvarchar] (max) NULL,
[blobfilepath] [nvarchar] (50) NULL,
[blobfilename] [nvarchar] (50) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[StoredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL,
[Company] [nvarchar] (50) NULL,
[dwFilterColumnName] [varchar] (400) NULL,
[dwtablename_schema] [varchar] (8) NULL,
[sourceFilterColumnName] [varchar] (20) NULL,
[dailyDatePart] [varchar] (20) NULL,
[weeklyDatePart] [varchar] (20) NULL,
[dailyNumber] [varchar] (20) NULL,
[weeklyNumber] [varchar] (20) NULL
)
GO
PRINT N'Creating [dbo].[PTSourceTables_MAK_dev]'
GO
CREATE TABLE [dbo].[PTSourceTables_MAK_dev]
(
[SourceSystem] [nvarchar] (50) NULL,
[ServerName] [nvarchar] (50) NULL,
[DatabaseName] [nvarchar] (50) NULL,
[TableSchema] [nvarchar] (50) NULL,
[TableName] [nvarchar] (50) NULL,
[TableLoadOrder] [nvarchar] (50) NULL,
[DeltaLoadStatement] [nvarchar] (max) NULL,
[DeltaLoadValue] [nvarchar] (50) NULL,
[DeltaLoadGetNewValue] [nvarchar] (50) NULL,
[IsActive] [nvarchar] (50) NULL,
[SourceSelectStatement] [nvarchar] (1000) NULL,
[blobfilepath] [nvarchar] (50) NULL,
[blobfilename] [nvarchar] (50) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[StoredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL,
[dwFilterColumnName] [varchar] (50) NULL,
[dwtablename_schema] [varchar] (8) NULL,
[Company] [varchar] (20) NULL,
[sourceFilterColumnName] [varchar] (20) NULL,
[dailyDatePart] [varchar] (20) NULL,
[weeklyDatePart] [varchar] (20) NULL,
[dailyNumber] [varchar] (20) NULL,
[weeklyNumber] [varchar] (20) NULL
)
GO
PRINT N'Creating [dbo].[PTSourceTables_MAK_raw]'
GO
CREATE TABLE [dbo].[PTSourceTables_MAK_raw]
(
[SourceSystem] [nvarchar] (50) NULL,
[ServerName] [nvarchar] (50) NULL,
[DatabaseName] [nvarchar] (50) NULL,
[TableSchema] [nvarchar] (50) NULL,
[TableName] [nvarchar] (50) NULL,
[TableLoadOrder] [nvarchar] (50) NULL,
[SinkDatabaseName] [nvarchar] (50) NULL,
[DeltaLoadStatement] [nvarchar] (50) NULL,
[DeltaLoadValue] [nvarchar] (50) NULL,
[DeltaLoadGetNewValue] [nvarchar] (50) NULL,
[IsActive] [nvarchar] (50) NULL,
[SourceSelectStatement] [nvarchar] (50) NULL,
[blobfilepath] [nvarchar] (50) NULL,
[blobfilename] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [dbo].[PTSourceTables_NOMO_dev]'
GO
CREATE TABLE [dbo].[PTSourceTables_NOMO_dev]
(
[SourceSystem] [nvarchar] (50) NULL,
[SourceSelectStatement] [nvarchar] (max) NULL,
[blobfilepath] [nvarchar] (50) NULL,
[blobfilename] [nvarchar] (50) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[StoredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL,
[DeltaLoadStatement] [nvarchar] (max) NULL,
[DeltaLoadValue] [varchar] (50) NULL,
[DeltaLoadGetNewValue] [varchar] (max) NULL,
[isActive] [nvarchar] (50) NULL,
[dwFilterColumnName] [varchar] (50) NULL,
[dwtablename_schema] [varchar] (8) NULL,
[Company] [varchar] (20) NULL,
[sourceFilterColumnName] [nvarchar] (max) NULL,
[dailyDatePart] [varchar] (20) NULL,
[weeklyDatePart] [varchar] (20) NULL,
[dailyNumber] [varchar] (20) NULL,
[weeklyNumber] [varchar] (20) NULL
)
GO
PRINT N'Creating [dbo].[PTSourceTables_PASSEROTTI_dev]'
GO
CREATE TABLE [dbo].[PTSourceTables_PASSEROTTI_dev]
(
[SourceSystem] [nvarchar] (50) NULL,
[ServerName] [nvarchar] (50) NULL,
[DatabaseName] [nvarchar] (50) NULL,
[TableSchema] [nvarchar] (50) NULL,
[TableName] [nvarchar] (50) NULL,
[TableLoadOrder] [int] NULL,
[DeltaLoadStatement] [nvarchar] (200) NULL,
[DeltaLoadValue] [nvarchar] (50) NULL,
[DeltaLoadGetNewValue] [nvarchar] (50) NULL,
[IsActive] [int] NULL,
[SourceSelectStatement] [nvarchar] (500) NULL,
[blobfilepath] [nvarchar] (50) NULL,
[blobfilename] [nvarchar] (50) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[SToredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL,
[dwFilterColumnName] [varchar] (50) NULL,
[dwtablename_schema] [varchar] (8) NULL,
[Company] [varchar] (20) NULL,
[sourceFilterColumnName] [varchar] (20) NULL,
[dailyDatePart] [varchar] (20) NULL,
[weeklyDatePart] [varchar] (20) NULL,
[dailyNumber] [varchar] (20) NULL,
[weeklyNumber] [varchar] (20) NULL
)
GO
PRINT N'Creating [dbo].[PTSourceTables_SKS_dev]'
GO
CREATE TABLE [dbo].[PTSourceTables_SKS_dev]
(
[SourceSystem] [nvarchar] (50) NULL,
[ServerName] [nvarchar] (100) NULL,
[DatabaseName] [nvarchar] (50) NULL,
[TableSchema] [nvarchar] (50) NULL,
[TableName] [nvarchar] (100) NULL,
[TableLoadOrder] [int] NULL,
[DeltaLoadStatement] [nvarchar] (500) NULL,
[DeltaLoadValue] [nvarchar] (50) NULL,
[DeltaLoadGetNewValue] [nvarchar] (500) NULL,
[IsActive] [int] NULL,
[SourceSelectStatement] [nvarchar] (max) NULL,
[blobfilepath] [nvarchar] (50) NULL,
[blobfilename] [nvarchar] (50) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[StoredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL,
[dwFilterColumnName] [varchar] (50) NULL,
[dwtablename_schema] [varchar] (8) NULL,
[Company] [varchar] (20) NULL,
[sourceFilterColumnName] [varchar] (20) NULL,
[dailyDatePart] [varchar] (20) NULL,
[weeklyDatePart] [varchar] (20) NULL,
[dailyNumber] [varchar] (20) NULL,
[weeklyNumber] [varchar] (20) NULL,
[StageViewName] [varchar] (50) NULL
)
GO
PRINT N'Creating [dbo].[PTSourceTables_SPRUIT_dev]'
GO
CREATE TABLE [dbo].[PTSourceTables_SPRUIT_dev]
(
[SourceSystem] [nvarchar] (50) NULL,
[ServerName] [nvarchar] (50) NULL,
[DatabaseName] [nvarchar] (50) NULL,
[TableSchema] [nvarchar] (50) NULL,
[TableName] [nvarchar] (50) NULL,
[TableLoadOrder] [int] NULL,
[DeltaLoadStatement] [nvarchar] (max) NULL,
[DeltaLoadValue] [nvarchar] (50) NULL,
[DeltaLoadGetNewValue] [nvarchar] (50) NULL,
[IsActive] [int] NULL,
[SourceSelectStatement] [nvarchar] (1000) NULL,
[blobfilepath] [nvarchar] (50) NULL,
[blobfilename] [nvarchar] (50) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[StoredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL,
[dwFilterColumnName] [varchar] (50) NULL,
[dwtablename_schema] [varchar] (8) NULL,
[Company] [varchar] (20) NULL,
[sourceFilterColumnName] [nvarchar] (1000) NULL,
[dailyDatePart] [varchar] (20) NULL,
[weeklyDatePart] [varchar] (20) NULL,
[dailyNumber] [varchar] (20) NULL,
[weeklyNumber] [varchar] (20) NULL
)
GO
PRINT N'Creating [dbo].[PTSourceTables_SVERULL_dev]'
GO
CREATE TABLE [dbo].[PTSourceTables_SVERULL_dev]
(
[SourceSystem] [nvarchar] (50) NULL,
[ServerName] [nvarchar] (50) NULL,
[DatabaseName] [nvarchar] (50) NULL,
[TableSchema] [nvarchar] (50) NULL,
[TableName] [nvarchar] (50) NULL,
[TableLoadOrder] [int] NULL,
[DeltaLoadStatement] [nvarchar] (1000) NULL,
[DeltaLoadValue] [nvarchar] (50) NULL,
[DeltaLoadGetNewValue] [nvarchar] (50) NULL,
[IsActive] [int] NULL,
[SourceSelectStatement] [nvarchar] (max) NULL,
[blobfilepath] [nvarchar] (50) NULL,
[blobfilename] [nvarchar] (50) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[StoredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL,
[dwFilterColumnName] [varchar] (50) NULL,
[dwtablename_schema] [varchar] (8) NULL,
[Company] [varchar] (20) NULL,
[sourceFilterColumnName] [varchar] (20) NULL,
[dailyDatePart] [varchar] (20) NULL,
[weeklyDatePart] [varchar] (20) NULL,
[dailyNumber] [varchar] (20) NULL,
[weeklyNumber] [varchar] (20) NULL
)
GO
PRINT N'Creating [dbo].[SalesBudget_Nomo]'
GO
CREATE TABLE [dbo].[SalesBudget_Nomo]
(
[Company] [nvarchar] (50) NULL,
[YearMonth] [date] NULL,
[CustomerNum] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[ProjectNum] [nvarchar] (50) NULL,
[BudgetSales] [decimal] (18, 4) NULL,
[BudgetCost] [decimal] (18, 4) NULL,
[BudgetDescription] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [dbo].[SourceProducts]'
GO
CREATE TABLE [dbo].[SourceProducts]
(
[ProductID] [int] NOT NULL,
[ProductName] [varchar] (50) NULL,
[Price] [decimal] (9, 2) NULL,
[company] [varchar] (10) NULL,
[fecha] [date] NULL
)
GO
PRINT N'Creating primary key [PK__SourcePr__B40CC6ED051F24A4] on [dbo].[SourceProducts]'
GO
ALTER TABLE [dbo].[SourceProducts] ADD CONSTRAINT [PK__SourcePr__B40CC6ED051F24A4] PRIMARY KEY CLUSTERED ([ProductID])
GO
PRINT N'Creating [dbo].[SourceTables_AXI_HQ_dev]'
GO
CREATE TABLE [dbo].[SourceTables_AXI_HQ_dev]
(
[SourceSystem] [nvarchar] (50) NULL,
[ServerName] [nvarchar] (100) NULL,
[DatabaseName] [varchar] (50) NULL,
[TableSchema] [varchar] (50) NULL,
[TableName] [varchar] (100) NULL,
[TableLoadOrder] [int] NULL,
[DeltaLoadStatement] [varchar] (500) NULL,
[DeltaLoadValue] [varchar] (50) NULL,
[DeltaLoadGetNewValue] [varchar] (500) NULL,
[IsActive] [int] NULL,
[SourceSelectStatement] [varchar] (max) NULL,
[blobfilepath] [nvarchar] (50) NULL,
[blobfilename] [nvarchar] (50) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[StoredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL,
[dwFilterColumnName] [varchar] (50) NULL,
[dwtablename_schema] [varchar] (8) NULL,
[Company] [nvarchar] (20) NULL
)
GO
PRINT N'Creating [dbo].[SourceTables_BusinessCentral]'
GO
CREATE TABLE [dbo].[SourceTables_BusinessCentral]
(
[SourceSystem] [nvarchar] (50) NULL,
[CompanyAPICode] [nvarchar] (50) NULL,
[APICall] [nvarchar] (100) NULL,
[TableLoadOrder] [int] NULL,
[DeltaLoadStatement] [nvarchar] (max) NULL,
[DeltaLoadValue] [nvarchar] (50) NULL,
[DeltaLoadGetNewValue] [nvarchar] (max) NULL,
[IsActive] [int] NULL,
[blobcontainer] [nvarchar] (100) NULL,
[blobfilepath] [nvarchar] (100) NULL,
[blobfilename] [nvarchar] (100) NULL,
[SinkDatabase] [nvarchar] (100) NULL,
[SinkTableSchema] [nvarchar] (100) NULL,
[SinkTableName] [nvarchar] (100) NULL,
[SinkDynamicMapping] [varchar] (max) NULL,
[CompanyName] [varchar] (30) NULL
)
GO
PRINT N'Creating [dbo].[SourceTables_Company]'
GO
CREATE TABLE [dbo].[SourceTables_Company]
(
[SourceSystem] [nvarchar] (50) NULL,
[ServerName] [nvarchar] (100) NULL,
[DatabaseName] [varchar] (50) NULL,
[TableSchema] [varchar] (50) NULL,
[TableName] [varchar] (100) NULL,
[TableLoadOrder] [int] NULL,
[DeltaLoadStatement] [varchar] (500) NULL,
[DeltaLoadValue] [varchar] (50) NULL,
[DeltaLoadGetNewValue] [varchar] (500) NULL,
[IsActive] [int] NULL,
[SourceSelectStatement] [varchar] (max) NULL,
[blobfilepath] [nvarchar] (50) NULL,
[blobfilename] [nvarchar] (50) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[StoredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [dbo].[SourceTables_PIM_dev]'
GO
CREATE TABLE [dbo].[SourceTables_PIM_dev]
(
[FileName] [nvarchar] (50) NOT NULL,
[TableLoadOrder] [int] NULL,
[DeltaLoadStatement] [varchar] (500) NULL,
[DeltaLoadValue] [varchar] (50) NULL,
[DeltaLoadGetNewValue] [varchar] (500) NULL,
[IsActive] [int] NULL,
[SourceSelectStatement] [varchar] (max) NULL,
[blobfilepath] [nvarchar] (50) NULL,
[blobfilename] [nvarchar] (50) NULL,
[Pre_Stagetablename] [nvarchar] (50) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[StoredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL,
[dwFilterColumnName] [varchar] (50) NULL,
[dwtablename_schema] [varchar] (8) NULL
)
GO
PRINT N'Creating [dbo].[SourceTables_Sharepoint]'
GO
CREATE TABLE [dbo].[SourceTables_Sharepoint]
(
[Company] [nvarchar] (50) NULL,
[SP_relativepath] [nvarchar] (200) NULL,
[SP_filename] [nvarchar] (200) NULL,
[SP_filesheetname] [nvarchar] (200) NULL,
[TableLoadOrder] [int] NULL,
[IsActive] [int] NULL,
[DeltaLoadStatement] [nvarchar] (max) NULL,
[DeltaLoadValue] [nvarchar] (50) NULL,
[DeltaLoadGetNewValue] [nvarchar] (max) NULL,
[blobcontainer] [nvarchar] (200) NULL,
[blobfilepath] [nvarchar] (200) NULL,
[blobfilename] [nvarchar] (200) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[StoredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL,
[SetSource_SP] [nvarchar] (200) NULL,
[dwFilterColumnName] [varchar] (50) NULL,
[dwtablename_schema] [varchar] (8) NULL
)
GO
PRINT N'Creating [dbo].[TSSourceTables_ABKSE_dev]'
GO
CREATE TABLE [dbo].[TSSourceTables_ABKSE_dev]
(
[SourceSystem] [nvarchar] (50) NULL,
[ServerName] [nvarchar] (50) NULL,
[DatabaseName] [nvarchar] (50) NULL,
[TableSchema] [nvarchar] (50) NULL,
[TableName] [nvarchar] (50) NULL,
[TableLoadOrder] [int] NULL,
[DeltaLoadStatement] [nvarchar] (500) NULL,
[DeltaLoadValue] [nvarchar] (50) NULL,
[DeltaLoadGetNewValue] [nvarchar] (50) NULL,
[IsActive] [int] NULL,
[SourceSelectStatement] [nvarchar] (500) NULL,
[blobfilepath] [nvarchar] (50) NULL,
[blobfilename] [nvarchar] (50) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[StoredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL,
[dwtablename_schema] [varchar] (8) NULL,
[dwFilterColumnName] [varchar] (50) NULL,
[Company] [varchar] (20) NULL,
[sourceFilterColumnName] [varchar] (30) NULL,
[dailyDatePart] [varchar] (30) NULL,
[weeklyDatePart] [varchar] (30) NULL,
[dailyNumber] [varchar] (30) NULL,
[weeklyNumber] [varchar] (30) NULL
)
GO
PRINT N'Creating [dbo].[TSSourceTables_EIGENBRODT_dev]'
GO
CREATE TABLE [dbo].[TSSourceTables_EIGENBRODT_dev]
(
[SourceSystem] [nvarchar] (50) NULL,
[ServerName] [nvarchar] (100) NULL,
[DatabaseName] [nvarchar] (100) NULL,
[TableSchema] [nvarchar] (50) NULL,
[TableName] [nvarchar] (100) NULL,
[TableLoadOrder] [tinyint] NULL,
[DeltaLoadStatement] [nvarchar] (500) NULL,
[DeltaLoadValue] [nvarchar] (500) NULL,
[DeltaLoadGetNewValue] [nvarchar] (50) NULL,
[IsActive] [tinyint] NULL,
[SourceSelectStatement] [nvarchar] (max) NULL,
[blobfilepath] [nvarchar] (50) NULL,
[blobfilename] [nvarchar] (50) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[StoredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL,
[dwFilterColumnName] [varchar] (50) NULL,
[dwtablename_schema] [varchar] (8) NULL
)
GO
PRINT N'Creating [dbo].[TSSourceTables_FORANKRAES_dev]'
GO
CREATE TABLE [dbo].[TSSourceTables_FORANKRAES_dev]
(
[SourceSystem] [varchar] (50) NOT NULL,
[ServerName] [nvarchar] (100) NULL,
[DatabaseName] [varchar] (50) NULL,
[TableSchema] [varchar] (50) NOT NULL,
[TableName] [varchar] (100) NOT NULL,
[TableLoadOrder] [int] NULL,
[DeltaLoadStatement] [varchar] (500) NULL,
[DeltaLoadValue] [varchar] (50) NULL,
[DeltaLoadGetNewValue] [varchar] (500) NULL,
[IsActive] [int] NULL,
[SourceSelectStatement] [varchar] (max) NULL,
[blobfilepath] [nvarchar] (50) NULL,
[blobfilename] [nvarchar] (50) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[StoredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL,
[dwFilterColumnName] [varchar] (50) NULL,
[dwtablename_schema] [varchar] (8) NULL,
[Company] [varchar] (20) NULL,
[sourceFilterColumnName] [varchar] (30) NULL,
[dailyDatePart] [varchar] (30) NULL,
[weeklyDatePart] [varchar] (30) NULL,
[dailyNumber] [varchar] (30) NULL,
[weeklyNumber] [varchar] (30) NULL
)
GO
PRINT N'Creating [dbo].[TSSourceTables_FORANKRAFR_dev]'
GO
CREATE TABLE [dbo].[TSSourceTables_FORANKRAFR_dev]
(
[SourceSystem] [nvarchar] (50) NULL,
[ServerName] [nvarchar] (50) NULL,
[DatabaseName] [nvarchar] (50) NULL,
[TableSchema] [nvarchar] (50) NULL,
[TableName] [nvarchar] (50) NULL,
[TableLoadOrder] [int] NULL,
[DeltaLoadStatement] [nvarchar] (100) NULL,
[DeltaLoadValue] [nvarchar] (50) NULL,
[DeltaLoadGetNewValue] [nvarchar] (max) NULL,
[IsActive] [int] NULL,
[SourceSelectStatement] [nvarchar] (max) NULL,
[blobfilepath] [nvarchar] (50) NULL,
[blobfilename] [nvarchar] (50) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[StoredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL,
[dwFilterColumnName] [varchar] (50) NULL,
[dwtablename_schema] [varchar] (8) NULL,
[Company] [varchar] (20) NULL,
[sourceFilterColumnName] [varchar] (30) NULL,
[dailyDatePart] [varchar] (30) NULL,
[weeklyDatePart] [varchar] (30) NULL,
[dailyNumber] [varchar] (30) NULL,
[weeklyNumber] [varchar] (30) NULL
)
GO
PRINT N'Creating [dbo].[TSSourceTables_FORANKRAPL_dev]'
GO
CREATE TABLE [dbo].[TSSourceTables_FORANKRAPL_dev]
(
[SourceSystem] [varchar] (50) NOT NULL,
[ServerName] [nvarchar] (100) NULL,
[DatabaseName] [varchar] (50) NULL,
[TableSchema] [varchar] (50) NOT NULL,
[TableName] [varchar] (100) NOT NULL,
[TableLoadOrder] [int] NULL,
[DeltaLoadStatement] [varchar] (500) NULL,
[DeltaLoadValue] [varchar] (50) NULL,
[DeltaLoadGetNewValue] [varchar] (500) NULL,
[IsActive] [int] NULL,
[SourceSelectStatement] [varchar] (max) NULL,
[blobfilepath] [nvarchar] (50) NULL,
[blobfilename] [nvarchar] (50) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[StoredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL,
[dwFilterColumnName] [varchar] (50) NULL,
[dwtablename_schema] [varchar] (8) NULL,
[Company] [varchar] (15) NULL,
[sourceFilterColumnName] [varchar] (30) NULL,
[dailyDatePart] [varchar] (30) NULL,
[weeklyDatePart] [varchar] (30) NULL,
[dailyNumber] [varchar] (30) NULL,
[weeklyNumber] [varchar] (30) NULL
)
GO
PRINT N'Creating [dbo].[TSSourceTables_FORANKRASE_dev]'
GO
CREATE TABLE [dbo].[TSSourceTables_FORANKRASE_dev]
(
[SourceSystem] [varchar] (50) NOT NULL,
[ServerName] [nvarchar] (100) NULL,
[DatabaseName] [varchar] (50) NULL,
[TableSchema] [varchar] (50) NOT NULL,
[TableName] [varchar] (100) NOT NULL,
[TableLoadOrder] [int] NULL,
[DeltaLoadStatement] [varchar] (500) NULL,
[DeltaLoadValue] [varchar] (50) NULL,
[DeltaLoadGetNewValue] [varchar] (500) NULL,
[IsActive] [int] NULL,
[SourceSelectStatement] [varchar] (max) NULL,
[blobfilepath] [nvarchar] (50) NULL,
[blobfilename] [nvarchar] (50) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[StoredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL,
[dwFilterColumnName] [varchar] (50) NULL,
[dwtablename_schema] [varchar] (8) NULL,
[Company] [varchar] (20) NULL,
[sourceFilterColumnName] [varchar] (30) NULL,
[dailyDatePart] [varchar] (30) NULL,
[weeklyDatePart] [varchar] (30) NULL,
[dailyNumber] [varchar] (30) NULL,
[weeklyNumber] [varchar] (30) NULL
)
GO
PRINT N'Creating [dbo].[TSSourceTables_RORO_dev]'
GO
CREATE TABLE [dbo].[TSSourceTables_RORO_dev]
(
[SourceSystem] [nvarchar] (50) NULL,
[ServerName] [nvarchar] (50) NULL,
[DatabaseName] [nvarchar] (50) NULL,
[TableSchema] [nvarchar] (50) NULL,
[TableName] [nvarchar] (50) NOT NULL,
[TableLoadOrder] [int] NULL,
[DeltaLoadStatement] [varchar] (500) NULL,
[DeltaLoadValue] [varchar] (50) NULL,
[DeltaLoadGetNewValue] [varchar] (500) NULL,
[IsActive] [int] NULL,
[SourceSelectStatement] [varchar] (max) NULL,
[blobfilepath] [nvarchar] (50) NULL,
[blobfilename] [nvarchar] (50) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[StoredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL,
[dwFilterColumnName] [varchar] (50) NULL,
[dwtablename_schema] [varchar] (8) NULL,
[Company] [varchar] (20) NULL,
[sourceFilterColumnName] [varchar] (30) NULL,
[dailyDatePart] [varchar] (30) NULL,
[weeklyDatePart] [varchar] (30) NULL,
[dailyNumber] [varchar] (30) NULL,
[weeklyNumber] [varchar] (30) NULL
)
GO
PRINT N'Creating [dbo].[TSSourceTables_STE_SE_dev]'
GO
CREATE TABLE [dbo].[TSSourceTables_STE_SE_dev]
(
[SourceSystem] [nvarchar] (50) NULL,
[ServerName] [nvarchar] (50) NULL,
[DatabaseName] [nvarchar] (50) NULL,
[TableSchema] [nvarchar] (50) NULL,
[TableName] [nvarchar] (50) NULL,
[TableLoadOrder] [int] NULL,
[DeltaLoadStatement] [nvarchar] (50) NULL,
[DeltaLoadValue] [nvarchar] (50) NULL,
[DeltaLoadGetNewValue] [nvarchar] (50) NULL,
[IsActive] [int] NULL,
[SourceSelectStatement] [nvarchar] (max) NULL,
[blobfilepath] [nvarchar] (50) NULL,
[blobfilename] [nvarchar] (50) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[SToredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL,
[dwFilterColumnName] [varchar] (50) NULL,
[dwtablename_schema] [varchar] (8) NULL,
[Company] [varchar] (20) NULL,
[sourceFilterColumnName] [varchar] (30) NULL,
[dailyDatePart] [varchar] (30) NULL,
[weeklyDatePart] [varchar] (30) NULL,
[dailyNumber] [varchar] (30) NULL,
[weeklyNumber] [varchar] (30) NULL
)
GO
PRINT N'Creating [dbo].[TSSourceTables_TMTFI_dev]'
GO
CREATE TABLE [dbo].[TSSourceTables_TMTFI_dev]
(
[SourceSystem] [nvarchar] (50) NULL,
[URL] [nvarchar] (50) NULL,
[TableName] [nvarchar] (50) NULL,
[TableLoadOrder] [int] NULL,
[DeltaLoadStatement] [nvarchar] (50) NULL,
[DeltaLoadValue] [nvarchar] (50) NULL,
[DeltaLoadGetNewValue] [nvarchar] (max) NULL,
[IsActive] [int] NULL,
[SourceSelectStatement] [nvarchar] (max) NULL,
[blobfilepath] [nvarchar] (50) NULL,
[blobfilename] [nvarchar] (50) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[StoredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL,
[dwFilterColumnName] [varchar] (50) NULL,
[dwtablename_schema] [varchar] (8) NULL,
[Company] [varchar] (20) NULL,
[sourceFilterColumnName] [varchar] (30) NULL,
[dailyDatePart] [varchar] (30) NULL,
[weeklyDatePart] [varchar] (30) NULL,
[dailyNumber] [varchar] (30) NULL,
[weeklyNumber] [varchar] (30) NULL
)
GO
PRINT N'Creating [dbo].[TSSourceTables_WIDNI_dev]'
GO
CREATE TABLE [dbo].[TSSourceTables_WIDNI_dev]
(
[SourceSystem] [nvarchar] (50) NULL,
[ServerName] [nvarchar] (100) NULL,
[DatabaseName] [nvarchar] (100) NULL,
[TableSchema] [nvarchar] (50) NULL,
[TableName] [nvarchar] (100) NULL,
[TableLoadOrder] [int] NULL,
[DeltaLoadStatement] [nvarchar] (500) NULL,
[DeltaLoadValue] [nvarchar] (500) NULL,
[DeltaLoadGetNewValue] [nvarchar] (50) NULL,
[IsActive] [int] NULL,
[SourceSelectStatement] [nvarchar] (max) NULL,
[blobfilepath] [nvarchar] (50) NULL,
[blobfilename] [nvarchar] (50) NULL,
[Stagetablename] [nvarchar] (50) NULL,
[StoredProcedure] [nvarchar] (50) NULL,
[dwtablename] [nvarchar] (50) NULL,
[dwFilterColumnName] [varchar] (50) NULL,
[dwtablename_schema] [varchar] (8) NULL,
[Company] [varchar] (20) NULL,
[sourceFilterColumnName] [varchar] (20) NULL,
[dailyDatePart] [varchar] (20) NULL,
[weeklyDatePart] [varchar] (20) NULL,
[dailyNumber] [varchar] (20) NULL,
[weeklyNumber] [varchar] (20) NULL
)
GO
PRINT N'Creating [dbo].[TargetProducts]'
GO
CREATE TABLE [dbo].[TargetProducts]
(
[ProductID] [int] NOT NULL,
[ProductName] [varchar] (50) NULL,
[Price] [decimal] (9, 2) NULL,
[company] [varchar] (10) NULL,
[fecha] [date] NULL,
[ISACTIVE] [bit] NULL
)
GO
PRINT N'Creating primary key [PK__TargetPr__B40CC6ED5B82C752] on [dbo].[TargetProducts]'
GO
ALTER TABLE [dbo].[TargetProducts] ADD CONSTRAINT [PK__TargetPr__B40CC6ED5B82C752] PRIMARY KEY CLUSTERED ([ProductID])
GO
PRINT N'Creating [dbo].[ignoreTableColumns]'
GO
CREATE TABLE [dbo].[ignoreTableColumns]
(
[stageTableName] [varchar] (50) NOT NULL,
[columnName] [varchar] (50) NOT NULL
)
GO
PRINT N'Creating index [IX_Company_PurchaseInvoiceDate] on [dbo].[ignoreTableColumns]'
GO
CREATE NONCLUSTERED INDEX [IX_Company_PurchaseInvoiceDate] ON [dbo].[ignoreTableColumns] ([stageTableName])
GO
PRINT N'Creating [dbo].[images_url]'
GO
CREATE TABLE [dbo].[images_url]
(
[CompanyName] [varchar] (30) NULL,
[url] [varchar] (600) NULL
)
GO
PRINT N'Creating [dbo].[logError]'
GO
CREATE TABLE [dbo].[logError]
(
[id] [int] NOT NULL IDENTITY(1, 1),
[parent_id] [int] NOT NULL,
[pipelineName] [varchar] (100) NOT NULL,
[stepName] [varchar] (100) NOT NULL,
[errorName] [nvarchar] (max) NOT NULL
)
GO
PRINT N'Creating primary key [PK__logError__3213E83F3D8FDB7A] on [dbo].[logError]'
GO
ALTER TABLE [dbo].[logError] ADD CONSTRAINT [PK__logError__3213E83F3D8FDB7A] PRIMARY KEY CLUSTERED ([id])
GO
PRINT N'Creating [dbo].[logPipeline]'
GO
CREATE TABLE [dbo].[logPipeline]
(
[id] [int] NOT NULL IDENTITY(1, 1),
[pipelineName] [varchar] (100) NOT NULL,
[runDate] [date] NOT NULL,
[startDatetime] [datetime] NOT NULL,
[endDatetime] [datetime] NULL,
[error] [bit] NULL
)
GO
PRINT N'Creating primary key [PK__logPipel__3213E83FAFFE6FCB] on [dbo].[logPipeline]'
GO
ALTER TABLE [dbo].[logPipeline] ADD CONSTRAINT [PK__logPipel__3213E83FAFFE6FCB] PRIMARY KEY CLUSTERED ([id])
GO
PRINT N'Creating [dbo].[statsBefore]'
GO
CREATE TABLE [dbo].[statsBefore]
(
[ObjectSchema] [nvarchar] (128) NULL,
[ObjectName] [nvarchar] (128) NULL,
[object_id] [int] NOT NULL,
[stats_id] [int] NOT NULL,
[StatsName] [nvarchar] (128) NULL,
[last_updated] [datetime2] NULL,
[rows] [bigint] NULL,
[rows_sampled] [bigint] NULL,
[modification_counter] [bigint] NULL,
[type] [tinyint] NULL,
[type_desc] [nvarchar] (60) NULL,
[SkipStatistics] [int] NOT NULL
)
GO
PRINT N'Creating [dbo].[table_record]'
GO
CREATE TABLE [dbo].[table_record]
(
[name_table] [nvarchar] (32) NULL,
[type_table] [nvarchar] (32) NULL,
[inferred_status] [nvarchar] (32) NULL
)
GO
PRINT N'Creating [dbo].[test_fields]'
GO
CREATE TABLE [dbo].[test_fields]
(
[new_fields] [varchar] (50) NOT NULL,
[sourceFilterColumnName] [varchar] (20) NULL,
[dailyDatePart] [varchar] (20) NULL,
[weeklyDatePart] [varchar] (20) NULL,
[dailyNumber] [varchar] (20) NULL,
[weeklyNumber] [varchar] (20) NULL,
[is_inferred] [bit] NULL
)
GO
PRINT N'Creating [dbo].[test_to]'
GO
CREATE TABLE [dbo].[test_to]
(
[Id] [int] NOT NULL
)
GO
PRINT N'Creating primary key [PK__test_to__3214EC07ECC99638] on [dbo].[test_to]'
GO
ALTER TABLE [dbo].[test_to] ADD CONSTRAINT [PK__test_to__3214EC07ECC99638] PRIMARY KEY CLUSTERED ([Id])
GO
PRINT N'Creating [dbo].[test_tomas]'
GO
CREATE TABLE [dbo].[test_tomas]
(
[Id] [int] NOT NULL
)
GO
PRINT N'Creating primary key [PK__test_tom__3214EC072A2CCBF2] on [dbo].[test_tomas]'
GO
ALTER TABLE [dbo].[test_tomas] ADD CONSTRAINT [PK__test_tom__3214EC072A2CCBF2] PRIMARY KEY CLUSTERED ([Id])
GO
PRINT N'Creating [dbo].[test_valentin]'
GO
CREATE TABLE [dbo].[test_valentin]
(
[Id] [int] NOT NULL
)
GO
PRINT N'Creating primary key [PK__test_val__3214EC076DFFB730] on [dbo].[test_valentin]'
GO
ALTER TABLE [dbo].[test_valentin] ADD CONSTRAINT [PK__test_val__3214EC076DFFB730] PRIMARY KEY CLUSTERED ([Id])
GO
PRINT N'Creating [dbo].[think]'
GO
CREATE TABLE [dbo].[think]
(
[PartID] [binary] (32) NULL,
[CustomerID] [binary] (32) NULL,
[WarehouseID] [binary] (32) NULL,
[company] [nvarchar] (32) NULL,
[is_inferred] [bit] NULL,
[sourceFilterColumnName] [varchar] (20) NULL,
[dailyDatePart] [varchar] (20) NULL,
[weeklyDatePart] [varchar] (20) NULL,
[dailyNumber] [varchar] (20) NULL,
[weeklyNumber] [varchar] (20) NULL
)
GO
PRINT N'Creating [dnb].[FilesReferenceLog]'
GO
CREATE TABLE [dnb].[FilesReferenceLog]
(
[date_ref] [date] NULL,
[process] [nvarchar] (60) NULL,
[partitionKey] [bigint] NULL,
[info_in_dw] [bit] NULL
)
GO
PRINT N'Creating [dnb].[MultiLingualSearchNames]'
GO
CREATE TABLE [dnb].[MultiLingualSearchNames]
(
[duns] [int] NULL,
[organization.multiLingualSearchNames.name] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [dnb].[RegistrationNumbers]'
GO
CREATE TABLE [dnb].[RegistrationNumbers]
(
[duns] [int] NULL,
[organization.registrationNumbers.registrationNumber] [nvarchar] (100) NULL,
[organization.registrationNumbers.typeDescription] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [dnb].[TradeStyleNames]'
GO
CREATE TABLE [dnb].[TradeStyleNames]
(
[duns] [int] NULL,
[organization.tradeStyleNames.name] [nvarchar] (100) NULL,
[organization.tradeStyleNames.priority] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [dnb].[dimDUNSHierarchy]'
GO
CREATE TABLE [dnb].[dimDUNSHierarchy]
(
[duns] [int] NOT NULL,
[L1] [int] NULL,
[L2] [int] NULL,
[L3] [int] NULL,
[L4] [int] NULL,
[L5] [int] NULL,
[L6] [int] NULL,
[L7] [int] NULL,
[L8] [int] NULL,
[L9] [int] NULL,
[L10] [int] NULL,
[L11] [int] NULL,
[L12] [int] NULL,
[L13] [int] NULL,
[L14] [int] NULL,
[L15] [int] NULL,
[L16] [int] NULL,
[L17] [int] NULL,
[L18] [int] NULL,
[L19] [int] NULL,
[L20] [int] NULL,
[L21] [int] NULL,
[L22] [int] NULL,
[L23] [int] NULL,
[L24] [int] NULL,
[last_modified_date] [date] NULL
)
GO
PRINT N'Creating primary key [PK_duns] on [dnb].[dimDUNSHierarchy]'
GO
ALTER TABLE [dnb].[dimDUNSHierarchy] ADD CONSTRAINT [PK_duns] PRIMARY KEY CLUSTERED ([duns])
GO
PRINT N'Creating [dnb].[dimUnspsc]'
GO
CREATE TABLE [dnb].[dimUnspsc]
(
[code_2] [nvarchar] (2) NOT NULL,
[code_4] [nvarchar] (4) NOT NULL,
[code_6] [nvarchar] (6) NOT NULL,
[code_8] [nvarchar] (8) NOT NULL,
[description] [nvarchar] (1000) NOT NULL
)
GO
PRINT N'Creating [dnb].[duns_from_lars]'
GO
CREATE TABLE [dnb].[duns_from_lars]
(
[id] [nvarchar] (100) NOT NULL,
[is_customer] [nvarchar] (6) NOT NULL,
[duns] [int] NOT NULL,
[conf_code] [tinyint] NOT NULL,
[id_binary] [binary] (32) NULL
)
GO
PRINT N'Creating [dnb].[hierarchy_test]'
GO
CREATE TABLE [dnb].[hierarchy_test]
(
[Column1] [nvarchar] (100) NULL,
[Hierarchy_Name] [nvarchar] (100) NULL,
[Column2] [nvarchar] (100) NULL,
[Column3] [nvarchar] (100) NULL,
[Column4] [nvarchar] (100) NULL,
[Column5] [nvarchar] (100) NULL,
[Column6] [nvarchar] (100) NULL,
[Column7] [nvarchar] (100) NULL,
[Column8] [nvarchar] (100) NULL,
[Column9] [nvarchar] (100) NULL,
[Column10] [nvarchar] (100) NULL,
[Hierarchy_Level] [nvarchar] (100) NULL,
[Hierarchy_Node_desc] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [dw].[Cube_SPL_ALL]'
GO
CREATE TABLE [dw].[Cube_SPL_ALL]
(
[CubeName] [nvarchar] (100) NOT NULL,
[ProcessPost] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [dw].[Cubes_AX]'
GO
CREATE TABLE [dw].[Cubes_AX]
(
[CubeName] [nvarchar] (100) NOT NULL,
[ProcessPost] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [dw].[Cubes_DS]'
GO
CREATE TABLE [dw].[Cubes_DS]
(
[CubeName] [nvarchar] (100) NOT NULL,
[ProcessPost] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [dw].[Cubes_FH]'
GO
CREATE TABLE [dw].[Cubes_FH]
(
[CubeName] [nvarchar] (100) NOT NULL,
[ProcessPost] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [dw].[Cubes_LS]'
GO
CREATE TABLE [dw].[Cubes_LS]
(
[CubeName] [nvarchar] (100) NOT NULL,
[ProcessPost] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [dw].[Cubes_PT]'
GO
CREATE TABLE [dw].[Cubes_PT]
(
[CubeName] [nvarchar] (100) NOT NULL,
[ProcessPost] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [dw].[Cubes_PT_test]'
GO
CREATE TABLE [dw].[Cubes_PT_test]
(
[CubeName] [varchar] (40) NULL,
[ProcessPost] [varchar] (max) NULL
)
GO
PRINT N'Creating [dw].[Cubes_TS]'
GO
CREATE TABLE [dw].[Cubes_TS]
(
[CubeName] [nvarchar] (100) NOT NULL,
[ProcessPost] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [dw].[Cubes_Tmp]'
GO
CREATE TABLE [dw].[Cubes_Tmp]
(
[CubeName] [nvarchar] (100) NOT NULL,
[ProcessPost] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [dw].[Cubes_test]'
GO
CREATE TABLE [dw].[Cubes_test]
(
[CubeName] [nvarchar] (100) NOT NULL,
[ProcessPost] [nvarchar] (max) NULL
)
GO
PRINT N'Creating [dw].[PriceListPurchase]'
GO
CREATE TABLE [dw].[PriceListPurchase]
(
[PriceID] [binary] (32) NOT NULL,
[CompanyID] [binary] (32) NULL,
[CustomerID] [binary] (32) NULL,
[SupplierID] [binary] (32) NULL,
[PartID] [binary] (32) NULL,
[CustomerCode] [nvarchar] (100) NULL,
[SupplierCode] [nvarchar] (100) NULL,
[PartCode] [nvarchar] (100) NULL,
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (8) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[TargetMargin] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[Price] [nvarchar] (4000) NULL,
[DiscountPercent] [nvarchar] (4000) NULL,
[ValidFrom] [nvarchar] (50) NULL,
[ValidTo] [nvarchar] (50) NULL,
[DelivTime] [nvarchar] (50) NULL,
[DelivTimeUnit] [nvarchar] (50) NULL,
[Qty1] [nvarchar] (4000) NULL,
[Discount1] [nvarchar] (4000) NULL,
[Price1] [nvarchar] (4000) NULL,
[Qty2] [nvarchar] (4000) NULL,
[Discount2] [nvarchar] (4000) NULL,
[Price2] [nvarchar] (4000) NULL,
[CreatedDate] [date] NULL,
[Qty3] [nvarchar] (4000) NULL,
[Discount3] [nvarchar] (4000) NULL,
[Price3] [nvarchar] (4000) NULL,
[Qty4] [nvarchar] (4000) NULL,
[Discount4] [nvarchar] (4000) NULL,
[Price4] [nvarchar] (4000) NULL,
[Qty5] [nvarchar] (4000) NULL,
[Discount5] [nvarchar] (4000) NULL,
[Price5] [nvarchar] (4000) NULL,
[PriceType] [nvarchar] (50) NULL
)
GO
PRINT N'Creating primary key [PK_PriceListPurchase] on [dw].[PriceListPurchase]'
GO
ALTER TABLE [dw].[PriceListPurchase] ADD CONSTRAINT [PK_PriceListPurchase] PRIMARY KEY CLUSTERED ([PriceID])
GO
PRINT N'Creating [dw].[PriceList]'
GO
CREATE TABLE [dw].[PriceList]
(
[PriceID] [binary] (32) NOT NULL,
[CompanyID] [binary] (32) NULL,
[CustomerID] [binary] (32) NULL,
[SupplierID] [binary] (32) NULL,
[PartID] [binary] (32) NULL,
[CustomerCode] [nvarchar] (100) NULL,
[SupplierCode] [nvarchar] (100) NULL,
[PartCode] [nvarchar] (100) NULL,
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (8) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[SupplierNum] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[TargetMargin] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[Price] [nvarchar] (4000) NULL,
[DiscountPercent] [nvarchar] (4000) NULL,
[ValidFrom] [nvarchar] (50) NULL,
[ValidTo] [nvarchar] (50) NULL,
[DelivTime] [nvarchar] (50) NULL,
[DelivTimeUnit] [nvarchar] (50) NULL,
[Qty1] [nvarchar] (4000) NULL,
[Discount1] [nvarchar] (4000) NULL,
[Price1] [nvarchar] (4000) NULL,
[Qty2] [nvarchar] (4000) NULL,
[Discount2] [nvarchar] (4000) NULL,
[Price2] [nvarchar] (4000) NULL,
[CreatedDate] [date] NULL,
[Qty3] [nvarchar] (4000) NULL,
[Discount3] [nvarchar] (4000) NULL,
[Price3] [nvarchar] (4000) NULL,
[Qty4] [nvarchar] (4000) NULL,
[Discount4] [nvarchar] (4000) NULL,
[Price4] [nvarchar] (4000) NULL,
[Qty5] [nvarchar] (4000) NULL,
[Discount5] [nvarchar] (4000) NULL,
[Price5] [nvarchar] (4000) NULL,
[PriceType] [nvarchar] (50) NULL
)
GO
PRINT N'Creating primary key [PK_PriceList] on [dw].[PriceList]'
GO
ALTER TABLE [dw].[PriceList] ADD CONSTRAINT [PK_PriceList] PRIMARY KEY CLUSTERED ([PriceID])
GO
PRINT N'Creating [dw].[RowLevelSecurity]'
GO
CREATE TABLE [dw].[RowLevelSecurity]
(
[EmailID] [nvarchar] (200) NULL,
[PartitionKey] [nvarchar] (50) NULL,
[Company] [nvarchar] (8) NULL,
[Name] [nvarchar] (50) NULL,
[Email] [nvarchar] (100) NULL,
[RLSType] [nvarchar] (200) NULL
)
GO
PRINT N'Creating [dw].[SalesPerson]'
GO
CREATE TABLE [dw].[SalesPerson]
(
[Company] [nvarchar] (50) NULL,
[PartitionKey] [nvarchar] (50) NULL,
[SalesPersonCode] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[RoleType] [nvarchar] (50) NULL,
[SalesDistrict] [nvarchar] (50) NULL,
[SalesPersonResponsibleCode] [nvarchar] (50) NULL,
[SalesPersonResponsibleName] [nvarchar] (100) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL,
[IsActiveRecord] [bit] NULL,
[STRes1] [nvarchar] (100) NULL,
[STRes2] [nvarchar] (100) NULL,
[STRes3] [nvarchar] (100) NULL,
[SalesPersonID] [binary] (32) NOT NULL,
[CompanyID] [binary] (32) NOT NULL
)
GO
PRINT N'Creating [dw].[masterCubes]'
GO
CREATE TABLE [dw].[masterCubes]
(
[Report] [varchar] (25) NULL,
[CubeName] [varchar] (100) NULL,
[ProcessPost] [varchar] (2000) NULL,
[ReportOrder] [int] NULL,
[BusinessGroupOrder] [int] NULL
)
GO
PRINT N'Creating [stage].[ABK_SE_Project]'
GO
CREATE TABLE [stage].[ABK_SE_Project]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[MainProjectNum] [nvarchar] (50) NULL,
[ProjectNum] [nvarchar] (50) NULL,
[ProjectDescription] [nvarchar] (500) NULL,
[Organisation] [nvarchar] (50) NULL,
[ProjectStatus] [nvarchar] (50) NULL,
[ProjectCategory] [nvarchar] (50) NULL,
[WBSElement] [nvarchar] (50) NULL,
[ObjectNum] [nvarchar] (50) NULL,
[Level] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[ProjectResponsible] [nvarchar] (200) NULL,
[Comments] [nvarchar] (500) NULL,
[StartDate] [date] NULL,
[EndDate] [date] NULL,
[EstEndDate] [date] NULL
)
GO
PRINT N'Creating [stage].[AXI_HQ_CostBearer]'
GO
CREATE TABLE [stage].[AXI_HQ_CostBearer]
(
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (50) NOT NULL,
[CostBearerNum] [nvarchar] (50) NOT NULL,
[CostBearerName] [nvarchar] (100) NULL,
[CostBearerStatus] [nvarchar] (100) NULL,
[CostBearerGroup] [nvarchar] (100) NULL,
[CostBearerGroup2] [nvarchar] (100) NULL,
[CostBearerGroup3] [nvarchar] (100) NULL,
[CBRes1] [nvarchar] (100) NULL,
[CBRes2] [nvarchar] (100) NULL,
[CBRes3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[AXI_HQ_FinanceBudget_Manual]'
GO
CREATE TABLE [stage].[AXI_HQ_FinanceBudget_Manual]
(
[CostUnitNum] [nvarchar] (50) NULL,
[AccountGroup] [nvarchar] (50) NULL,
[BudgetYear] [nvarchar] (50) NOT NULL,
[BudgetFinance] [decimal] (18, 4) NOT NULL
)
GO
PRINT N'Creating [stage].[AXL_CZ_SalesLedger]'
GO
CREATE TABLE [stage].[AXL_CZ_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustNum] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceAmount] [decimal] (18, 4) NULL,
[RemainAmount] [decimal] (18, 4) NULL,
[DueDate] [date] NULL,
[LastPaymentDate] [date] NULL,
[Res1] [nvarchar] (100) NULL,
[Res2] [nvarchar] (100) NULL,
[Res3] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[BELL_SI_RLS]'
GO
CREATE TABLE [stage].[BELL_SI_RLS]
(
[EmailID] [nvarchar] (100) NULL,
[Company] [nvarchar] (50) NULL,
[Name] [nvarchar] (100) NULL,
[Email] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[BK_SE_SalesLedger]'
GO
CREATE TABLE [stage].[BK_SE_SalesLedger]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustomerID] [nvarchar] (50) NULL,
[InvoiceID] [nvarchar] (50) NULL,
[DueDate] [date] NULL,
[LastPayment] [date] NULL
)
GO
PRINT N'Creating [stage].[CER_FI_CustomerAgreement]'
GO
CREATE TABLE [stage].[CER_FI_CustomerAgreement]
(
[AgreementCode] [nvarchar] (50) NULL,
[AgreementDescription] [nvarchar] (50) NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[DiscountPercent1] [decimal] (18, 4) NULL,
[DiscountPercent2] [decimal] (18, 4) NULL,
[DiscountPercent3] [decimal] (18, 4) NULL,
[DiscountPercent4] [decimal] (18, 4) NULL,
[DiscountPercent5] [decimal] (18, 4) NULL,
[UnitPrice] [decimal] (18, 4) NULL,
[DelivTime ] [nvarchar] (10) NULL,
[Currency] [nvarchar] (10) NULL,
[AgreementStart] [date] NULL,
[AgreementEnd] [date] NULL,
[CustomerTerms] [nvarchar] (50) NULL,
[AgreementQty] [decimal] (18, 4) NULL,
[UoM] [nvarchar] (50) NULL,
[FulfilledQty] [decimal] (18, 4) NULL,
[RemainingQty] [decimal] (18, 4) NULL
)
GO
PRINT N'Creating [stage].[CurrencyRatesHist]'
GO
CREATE TABLE [stage].[CurrencyRatesHist]
(
[period] [nvarchar] (50) NULL,
[actuality] [nvarchar] (50) NULL,
[currency_code] [nvarchar] (50) NULL,
[currency_type] [nvarchar] (50) NULL,
[unit] [nvarchar] (50) NULL,
[currency_rate] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[FOR_FR_Quotation]'
GO
CREATE TABLE [stage].[FOR_FR_Quotation]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NULL,
[QuotationNum] [nvarchar] (50) NULL,
[QuotationLine] [nvarchar] (50) NULL,
[LogIndex] [nvarchar] (50) NULL,
[LogDate] [nvarchar] (50) NULL,
[LogTme] [nvarchar] (50) NULL,
[ProspectNum] [nvarchar] (50) NULL,
[ProspectName] [nvarchar] (50) NULL,
[QuotationDescription] [nvarchar] (500) NULL,
[QuotationType] [nvarchar] (50) NULL,
[QuotationStatus] [nvarchar] (50) NULL,
[QuotationInitiator] [nvarchar] (50) NULL,
[QuotationChannel] [nvarchar] (50) NULL,
[RelationalStatus] [nvarchar] (50) NULL,
[CustomerReference] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[Quantity] [nvarchar] (50) NULL,
[UnitPrice] [nvarchar] (50) NULL,
[DiscountPercent] [nvarchar] (50) NULL,
[DiscountAmount] [nvarchar] (50) NULL,
[QuotationHandler] [nvarchar] (50) NULL,
[QuotationResponsible] [nvarchar] (50) NULL,
[QuotationDate] [nvarchar] (50) NULL,
[StartDate] [nvarchar] (50) NULL,
[EndDate] [nvarchar] (50) NULL,
[QRes1] [nvarchar] (50) NULL,
[QRes2] [nvarchar] (50) NULL,
[QRes3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[GPI_FR_Budget]'
GO
CREATE TABLE [stage].[GPI_FR_Budget]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[BudgetPeriod] [nvarchar] (50) NULL,
[BudgetPeriodDate] [date] NULL,
[PeriodType] [nvarchar] (50) NULL,
[ProjectNum] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[SalesPersonCode] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[BudgetDescription] [nvarchar] (max) NULL,
[Currency] [nvarchar] (50) NULL,
[BudgetSales] [decimal] (18, 4) NULL,
[BudgetCost] [decimal] (18, 4) NULL,
[BRes1] [nvarchar] (50) NULL,
[BRes2] [nvarchar] (50) NULL,
[Bres3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[IOW_PL_Supplier]'
GO
CREATE TABLE [stage].[IOW_PL_Supplier]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[SupplierNum] [nvarchar] (50) NOT NULL,
[SupplierName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[AddressLine3] [nvarchar] (100) NULL,
[City] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[CountryCode] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[CodeOfConduct] [nvarchar] (50) NULL,
[SupplierGroup] [nvarchar] (50) NULL,
[SupplierIndustry] [nvarchar] (50) NULL,
[PrimaryPurchaser] [nvarchar] (50) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL,
[VATNum] [nvarchar] (50) NULL,
[OrgNum] [nvarchar] (50) NULL,
[TelephoneNumber1] [nvarchar] (50) NULL,
[TelephoneNumber2] [nvarchar] (50) NULL,
[Email] [nvarchar] (100) NULL,
[Website] [nvarchar] (500) NULL,
[MinOrderQty] [nvarchar] (50) NULL,
[IsAxInterInternal] [bit] NULL,
[SupplierScore] [nvarchar] (50) NULL,
[SupplierResponsible] [nvarchar] (50) NULL,
[RecordIsActive] [bit] NULL,
[IsMaterialSupplier] [bit] NULL,
[Comments] [nvarchar] (max) NULL,
[AccountNum] [nvarchar] (100) NULL,
[SRes1] [nvarchar] (500) NULL,
[SRes2] [nvarchar] (500) NULL,
[SRes3] [nvarchar] (500) NULL,
[SRes4] [nvarchar] (500) NULL,
[SRes5] [nvarchar] (500) NULL
)
GO
PRINT N'Creating [stage].[Jen_NO_StocktransactionOBPart120221017]'
GO
CREATE TABLE [stage].[Jen_NO_StocktransactionOBPart120221017]
(
[Company] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[TransactionCode] [nvarchar] (50) NULL,
[TransactionDescription] [nvarchar] (50) NULL,
[IssuerReceiverNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[BinNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[TransactionDate] [nvarchar] (50) NULL,
[TransactionTime] [nvarchar] (50) NULL,
[TransactionQty] [nvarchar] (50) NULL,
[TransactionValue] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[CostPrice] [nvarchar] (50) NULL,
[SalesUnitPrice] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[Reference] [nvarchar] (50) NULL,
[AdjustmentDate] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[LEX_FR_Budget]'
GO
CREATE TABLE [stage].[LEX_FR_Budget]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[CustomerNum] [nvarchar] (50) NOT NULL,
[BudgetPeriod] [nvarchar] (50) NULL,
[BudgetPeriodDate] [date] NULL,
[PeriodType] [nvarchar] (50) NULL,
[ProjectNum] [nvarchar] (50) NULL,
[CustomerGroup] [nvarchar] (50) NULL,
[ProductGroup] [nvarchar] (50) NULL,
[SalesPersonCode] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[BudgetDescription] [nvarchar] (max) NULL,
[Currency] [nvarchar] (50) NULL,
[BudgetSales] [decimal] (18, 4) NULL,
[BudgetCost] [decimal] (18, 4) NULL,
[BRes1] [nvarchar] (50) NULL,
[BRes2] [nvarchar] (50) NULL,
[Bres3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[Nom_DK_StockTransactionOB]'
GO
CREATE TABLE [stage].[Nom_DK_StockTransactionOB]
(
[Company] [nvarchar] (50) NULL,
[IndexKey] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[TransactionCode] [nvarchar] (50) NULL,
[TransactionDescription] [nvarchar] (50) NULL,
[IssuerReceiverNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[BinNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[TransactionDate] [nvarchar] (50) NULL,
[TransactionTime] [nvarchar] (50) NULL,
[TransactionQty] [nvarchar] (50) NULL,
[TransactionValue] [nvarchar] (50) NULL,
[CostPrice] [nvarchar] (50) NULL,
[SalesUnitPrice] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[Reference] [nvarchar] (50) NULL,
[AdjustmentDate] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[Nom_FI_StocktransactionOBHist20230203]'
GO
CREATE TABLE [stage].[Nom_FI_StocktransactionOBHist20230203]
(
[Company] [nvarchar] (50) NULL,
[IndexKey] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[TransactionCode] [nvarchar] (50) NULL,
[TransactionDescription] [nvarchar] (50) NULL,
[IssuerReceiverNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[BinNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[TransactionDate] [nvarchar] (50) NULL,
[TransactionTime] [nvarchar] (50) NULL,
[TransactionQty] [nvarchar] (50) NULL,
[TransactionValue] [nvarchar] (50) NULL,
[CostPrice] [nvarchar] (50) NULL,
[SalesUnitPrice] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[Reference] [nvarchar] (50) NULL,
[AdjustmentDate] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[Nom_FI_StocktransactionOB_Tobias1stPatch]'
GO
CREATE TABLE [stage].[Nom_FI_StocktransactionOB_Tobias1stPatch]
(
[Company] [nvarchar] (50) NULL,
[IndexKey] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[TransactionCode] [nvarchar] (50) NULL,
[TransactionDescription] [nvarchar] (50) NULL,
[IssuerReceiverNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[BinNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[TransactionDate] [nvarchar] (50) NULL,
[TransactionTime] [nvarchar] (50) NULL,
[TransactionQty] [nvarchar] (50) NULL,
[TransactionValue] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[CostPrice] [nvarchar] (50) NULL,
[SalesUnitPrice] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[Reference] [nvarchar] (50) NULL,
[AdjustmentDate] [nvarchar] (50) NULL,
[STRes1] [nvarchar] (50) NULL,
[STRes2] [nvarchar] (50) NULL,
[STRes3] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[Nom_FI_StocktransactionOBwithHist_20230203]'
GO
CREATE TABLE [stage].[Nom_FI_StocktransactionOBwithHist_20230203]
(
[Company] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[TransactionCode] [nvarchar] (50) NULL,
[TransactionDescription] [nvarchar] (50) NULL,
[IssuerReceiverNum] [nvarchar] (50) NULL,
[OrderNum] [nvarchar] (50) NULL,
[OrderLine] [nvarchar] (50) NULL,
[InvoiceNum] [nvarchar] (50) NULL,
[InvoiceLine] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[BinNum] [nvarchar] (50) NULL,
[BatchNum] [nvarchar] (50) NULL,
[TransactionDate] [nvarchar] (50) NULL,
[TransactionTime] [nvarchar] (50) NULL,
[TransactionQty] [nvarchar] (50) NULL,
[TransactionValue] [nvarchar] (50) NULL,
[CostPrice] [nvarchar] (50) NULL,
[SalesUnitPrice] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[Reference] [nvarchar] (50) NULL,
[AdjustmentDate] [nvarchar] (50) NULL,
[IndexKey] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[OCS_SE_OpenBalance]'
GO
CREATE TABLE [stage].[OCS_SE_OpenBalance]
(
[PartitionKey] [nvarchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[AccountNum] [nvarchar] (50) NOT NULL,
[AccountingDate] [nvarchar] (50) NOT NULL,
[Currency] [nvarchar] (50) NOT NULL,
[ExchangeRate] [nvarchar] (50) NULL,
[OpeningBalance] [nvarchar] (50) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[OCS_SE_SalesLedgerFin]'
GO
CREATE TABLE [stage].[OCS_SE_SalesLedgerFin]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[SalesInvoiceNum] [nvarchar] (50) NULL,
[SalesOrderNum] [nvarchar] (50) NULL,
[SalesInvoiceDate] [date] NULL,
[SalesInvoiceDueDate] [date] NULL,
[SalesInvoiceLastPaymentDate] [date] NULL,
[AccountingDate] [date] NULL,
[InvoiceAmount] [decimal] (18, 8) NULL,
[PaidInvoiceAmount] [decimal] (18, 8) NULL,
[RemainingInvoiceAmount] [decimal] (18, 8) NULL,
[VATAmount] [decimal] (18, 8) NULL,
[VATCode] [nvarchar] (50) NULL,
[VATCodeDesc] [nvarchar] (50) NULL,
[ProjectNum] [nvarchar] (50) NULL,
[PaymentEvents] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [decimal] (18, 8) NULL,
[IsInvoiceClosed] [nvarchar] (50) NULL,
[CreatedTimeStamp] [nvarchar] (50) NULL,
[ModifiedTimeStamp] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[RLS]'
GO
CREATE TABLE [stage].[RLS]
(
[Modify_datetime] [datetime] NULL CONSTRAINT [DF__RLS__Modify_date__064DE20A] DEFAULT (getdate()),
[Company] [nvarchar] (30) NULL,
[Email] [nvarchar] (50) NULL,
[RLSTable] [nvarchar] (40) NULL,
[RLSField] [nvarchar] (40) NULL,
[RLSValue] [nvarchar] (40) NULL,
[AccessType] [nvarchar] (50) NULL,
[SourceList] [nvarchar] (100) NULL,
[Author] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[ROR_SE_StockTransactionOB20180101]'
GO
CREATE TABLE [stage].[ROR_SE_StockTransactionOB20180101]
(
[﻿PartitionKey] [nvarchar] (50) NULL,
[Company] [nvarchar] (50) NULL,
[WarehouseCode] [nvarchar] (50) NULL,
[TransactionCode] [nvarchar] (50) NULL,
[TransactionCodeDescription] [nvarchar] (50) NULL,
[IsInternalTransaction] [nvarchar] (50) NULL,
[TransactionDate] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL,
[TransactionQty] [nvarchar] (50) NULL,
[TransactionValue] [nvarchar] (50) NULL,
[Currency] [nvarchar] (50) NULL,
[ExchangeRate] [nvarchar] (50) NULL,
[Reference] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[SKS_CustomerOldDev]'
GO
CREATE TABLE [stage].[SKS_CustomerOldDev]
(
[CustomerID] [nvarchar] (100) NULL,
[CustomerCode] [nvarchar] (50) NULL,
[CompanyID] [nvarchar] (100) NULL,
[PartitionKey] [varchar] (50) NULL,
[Company] [nvarchar] (100) NULL,
[CustomerNum] [nvarchar] (100) NULL,
[MainCustomerName] [nvarchar] (100) NULL,
[CustomerName] [nvarchar] (100) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[AddressLine3] [nvarchar] (100) NULL,
[TelephoneNumber1] [nvarchar] (100) NULL,
[TelephoneNumber2] [nvarchar] (100) NULL,
[Email] [nvarchar] (100) NULL,
[ZipCode] [nvarchar] (100) NULL,
[City] [nvarchar] (100) NULL,
[State] [nvarchar] (100) NULL,
[District] [nvarchar] (100) NULL,
[CountryName] [nvarchar] (100) NULL,
[Division] [nvarchar] (100) NULL,
[CustomerIndustry] [nvarchar] (100) NULL,
[CustomerSubIndustry] [nvarchar] (100) NULL,
[AddressLine] [nvarchar] (300) NULL,
[FullAddressLine] [nvarchar] (300) NULL,
[CustomerGroup] [nvarchar] (100) NULL,
[CustomerSubGroup] [nvarchar] (100) NULL,
[SalesRepCode] [nvarchar] (100) NULL,
[SalesPersonName] [nvarchar] (100) NULL,
[SalesPersonResponsible] [nvarchar] (100) NULL,
[VATRegNr] [nvarchar] (100) NULL,
[AccountString] [nvarchar] (100) NULL,
[InternalExternal] [nvarchar] (100) NULL,
[CustomerABC] [nvarchar] (100) NULL,
[CustomerType] [nvarchar] (100) NULL
)
GO
PRINT N'Creating [stage].[SKS_Customer_complement]'
GO
CREATE TABLE [stage].[SKS_Customer_complement]
(
[Company] [nvarchar] (50) NULL,
[CustomerNum] [nvarchar] (50) NULL,
[MainCustomerName] [nvarchar] (50) NULL,
[CustomerName] [nvarchar] (50) NULL,
[Customer] [nvarchar] (50) NULL,
[AddressLine1] [nvarchar] (100) NULL,
[AddressLine2] [nvarchar] (100) NULL,
[AddressLine3] [nvarchar] (100) NULL,
[TelephoneNum1] [nvarchar] (50) NULL,
[TelephoneNum2] [nvarchar] (50) NULL,
[Email] [nvarchar] (50) NULL,
[ZipCode] [nvarchar] (50) NULL,
[City] [nvarchar] (50) NULL,
[State] [nvarchar] (50) NULL,
[SalesDistrict] [nvarchar] (50) NULL,
[CountryName] [nvarchar] (50) NULL,
[Division] [nvarchar] (50) NULL,
[CustomerIndustry] [nvarchar] (50) NULL,
[CustomerSubIndustry] [nvarchar] (50) NULL,
[AddressLine] [nvarchar] (200) NULL,
[FullAddressLine] [nvarchar] (300) NULL,
[CustomerGroup] [nvarchar] (max) NULL,
[CustomerSubGroup] [nvarchar] (50) NULL,
[SalesPersonCode] [nvarchar] (50) NULL,
[SalesPersonName] [nvarchar] (50) NULL,
[SalesPersonResponsible] [nvarchar] (50) NULL,
[VATNum] [nvarchar] (50) NULL,
[AccountNum] [nvarchar] (50) NULL,
[InternalExternal] [nvarchar] (50) NULL,
[CustomerScore] [nvarchar] (50) NULL,
[CustomerType] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[SKS_FI_PlanValues]'
GO
CREATE TABLE [stage].[SKS_FI_PlanValues]
(
[PartitionKey] [varchar] (50) NULL,
[MANDT] [nvarchar] (50) NULL,
[COMPANY] [nvarchar] (50) NULL,
[LEDNR] [nvarchar] (50) NULL,
[BZOBJ] [nvarchar] (50) NULL,
[KALNR] [nvarchar] (50) NULL,
[KALKA] [nvarchar] (50) NULL,
[KADKY] [nvarchar] (50) NULL,
[TVERS] [nvarchar] (50) NULL,
[BWVAR] [nvarchar] (50) NULL,
[KKZMA] [nvarchar] (50) NULL,
[POSNR] [nvarchar] (50) NULL,
[KSTAR] [nvarchar] (50) NULL,
[PSPNR] [nvarchar] (50) NULL,
[WERTN] [decimal] (18, 8) NULL,
[WRTFW_POS] [decimal] (18, 8) NULL,
[FWAER] [nvarchar] (50) NULL,
[WERKS] [nvarchar] (50) NULL,
[BUKRS] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[SKS_Merx MT-selailu]'
GO
CREATE TABLE [stage].[SKS_Merx MT-selailu]
(
[Asiakas] [nvarchar] (50) NULL,
[Company] [nvarchar] (50) NULL,
[Asiakas1] [nvarchar] (4000) NULL,
[Projekti] [nvarchar] (50) NULL,
[As_tilausnro] [nvarchar] (4000) NULL,
[Tilauspvm] [nvarchar] (50) NULL,
[Til_tyyppi] [nvarchar] (50) NULL,
[MT] [nvarchar] (50) NULL,
[MT_rivi] [nvarchar] (50) NULL,
[Tila] [nvarchar] (50) NULL,
[Tuote] [nvarchar] (50) NULL,
[Kuvaus] [nvarchar] (4000) NULL,
[Tilattu_määrä] [decimal] (18, 8) NULL,
[Laskutettu_määrä] [decimal] (18, 8) NULL,
[Myyntiyks] [nvarchar] (50) NULL,
[Rivin_arvo] [decimal] (18, 8) NULL,
[Rivi_KEHH] [decimal] (18, 8) NULL,
[Kate] [decimal] (18, 8) NULL,
[RowText] [varchar] (max) NULL,
[OriginalFile] [varchar] (50) NULL
)
GO
PRINT N'Creating [stage].[SKS_Merx OT-selailu]'
GO
CREATE TABLE [stage].[SKS_Merx OT-selailu]
(
[Company] [nvarchar] (50) NULL,
[Toimittaja] [nvarchar] (50) NULL,
[Toimittaja1] [nvarchar] (4000) NULL,
[Projekti] [nvarchar] (50) NULL,
[Tilauspvm] [nvarchar] (50) NULL,
[Tilaustyyppi] [nvarchar] (50) NULL,
[Ostotilaus] [nvarchar] (50) NULL,
[Ostotilausrivi] [nvarchar] (50) NULL,
[Tuote] [nvarchar] (50) NULL,
[Kuvaus] [nvarchar] (4000) NULL,
[Tuotteen_myyntiyksikkö] [nvarchar] (50) NULL,
[Tilattu_määrä] [decimal] (18, 8) NULL,
[Tullut_määrä] [decimal] (18, 8) NULL,
[Tilattu] [decimal] (18, 8) NULL,
[Hankintahinta] [decimal] (18, 8) NULL,
[Hankintahinta_val] [decimal] (18, 8) NULL,
[Valuutta] [nvarchar] (50) NULL,
[Ale_1] [decimal] (18, 8) NULL,
[Ale_2] [decimal] (18, 8) NULL,
[Ale_3] [decimal] (18, 8) NULL,
[Kulukerroin] [decimal] (18, 8) NULL,
[Ostoyksikkö] [nvarchar] (50) NULL,
[Muuntokerroin] [decimal] (18, 8) NULL,
[RowText] [varchar] (max) NULL,
[OriginalFile] [varchar] (50) NULL
)
GO
PRINT N'Creating [stage].[SUM_UK_Werehouse]'
GO
CREATE TABLE [stage].[SUM_UK_Werehouse]
(
[PartitionKey] [varchar] (50) NOT NULL,
[Company] [nvarchar] (8) NOT NULL,
[WarehouseCode] [nvarchar] (50) NOT NULL,
[WarehouseName] [nvarchar] (100) NULL,
[WarehouseDistrict] [nvarchar] (50) NULL,
[WarehouseAddress] [nvarchar] (100) NULL,
[WarehouseDescription] [nvarchar] (100) NULL,
[WarehouseType] [nvarchar] (50) NULL,
[WarehouseCountry] [nvarchar] (50) NULL,
[Site] [nvarchar] (50) NULL,
[PartNum] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [stage].[SVE_SE_OFlag]'
GO
CREATE TABLE [stage].[SVE_SE_OFlag]
(
[PartitionKey] [nvarchar] (50) NULL,
[Company] [nvarchar] (8) NULL,
[SalesOrderNum] [nvarchar] (50) NULL,
[SalesOrderLine] [nvarchar] (50) NULL,
[SalesOrderDate] [nvarchar] (50) NULL,
[SalesOrderCategory] [nvarchar] (50) NULL
)
GO
PRINT N'Creating [dbo].[Exec_sp_deletedFlag]'
GO
CREATE PROCEDURE [dbo].[Exec_sp_deletedFlag] AS

execute sp.OLine_CYE_ES_deletedFlag
execute sp.OLine_ROR_SE_deletedFlag
execute sp.OLine_TMT_FI_deletedFlag
execute sp.OLine_TRA_FR_deletedFlag
execute sp.OLine_WID_EE_deletedFlag
execute sp.OLine_WID_FI_deletedFlag
execute sp.SOLine_WID_EE_deletedFlag
execute sp.SOLine_WID_FI_deletedFlag
GO
PRINT N'Creating [dbo].[SetSourceDelta]'
GO

CREATE  PROCEDURE [dbo].[SetSourceDelta] @ParamTable varchar(50), @LastModifiedtime varchar(20), @dwtablename varchar(50), @DeltaLoadGetNewValue varchar(250), @Partitionkey varchar(50)
AS
--DECLARE @LastModifiedtime datetime='2018-10-01 03:33:00'
--DECLARE @TableName nvarchar(50)='fh'
--DECLARE @partitionkey nvarchar(50)='20181002'
--DECLARE @SourceSystem nvarchar(50)='BIP_DE'
--DECLARE @DeltaLoadGetNewValue nvarchar(250)='case when max(rowcreateddt)<= coalesce(max(rowupdateddt),max(rowcreateddt)) then max(rowcreateddt) else max(rowupdateddt) end'

DECLARE @SQLString NVARCHAR(500) 
DECLARE @SQLString2 NVARCHAR(500) 

DECLARE @DWModifiedtime varchar(20)

BEGIN
SET NOCOUNT ON; 

--print charindex('_',@SourceSystem);

--SET @SourceSystem=substring(@SourceSystem,1,charindex('_',@SourceSystem)-1)

--print @SourceSystem;

--SET @SQLString = N'select @DWModifiedtime = ''' +  
--@DeltaLoadGetNewValue
--+ ' from stage.'+substring(@SourceSystem,1,charindex('_',@SourceSystem)-1)+'_'+ @TableName +' where sourcesystem='''+@SourceSystem+''''
--+ ''' from dw.'+ @dwtablename +' where  partitionkey='''+@partitionkey+''''
-- modify @dwtablename into {schema}.{dwtablename} - tomas comment

--print @SQLString;

--EXEC sp_executesql @SQLString 
--, N'@DWModifiedtime varchar(20) OUTPUT'
--, @DWModifiedtime OUTPUT;

--print @DWModifiedtime;
--print @LastModifiedtime;

--IF cast(@DWModifiedtime as datetime)>cast(@LastModifiedtime as datetime)
--begin
--print format(cast(@DWModifiedtime as datetime),'yyyy-MM-dd HH:mm:ss')
--UPDATE [dbo].[Sourcetables] SET [DeltaLoadValue] = format(cast(@DWModifiedtime as datetime),'yyyy-MM-dd HH:mm:ss') WHERE TableName = @dwTableName;
SET @SQLString2 = N'UPDATE dbo.' + @ParamTable 
+ ' SET [DeltaLoadValue] = format(cast(''' + @Partitionkey + ''' as datetime),''yyyy-MM-dd HH:mm:ss'') WHERE dwtablename =''' + @dwTableName+''''
--print @SQLString2
EXEC sp_executesql @SQLString2
--end 
--ELSE
--select 1;
--print convert(varchar(20),@DWModifiedtime, 120)
END
GO
PRINT N'Creating [dbo].[SetSourceDelta_Global]'
GO


CREATE  PROCEDURE [dbo].[SetSourceDelta_Global] @MetadataSourceTable varchar(50), @stageTableName varchar(50), @Partitionkey varchar(50)
AS

-- We use stageTableName because is a unique value within everything. If we use dwtablename as before, some companies, like Jenss has 
-- more than one value for that filter.

-- I dont see the purpose of the old procedure. Another disadvantage is that we are querying the dw schema tables that are the biggest ones.
-- I think the purpose of this procedure is to show the last updated timestamp that we have on each table and thats why i changed everything

BEGIN TRY

	DECLARE @transactionName varchar(400);
	SET @transactionName = 'UPDATE SourceTable: ' + @MetadataSourceTable;

	BEGIN TRAN @transactionName;

		DECLARE @SqlStatement nvarchar(max)
		SET @SqlStatement = 'UPDATE ' + @MetadataSourceTable + ' SET DeltaLoadValue = ' + '''' + @Partitionkey + '''' + ' WHERE Stagetablename = ' + '''' + @stageTableName + ''''

		EXEC(@SqlStatement)

	COMMIT TRAN @transactionName;

END TRY

BEGIN CATCH
	IF @@ROWCOUNT > 0
		ROLLBACK;

END CATCH
GO
PRINT N'Creating [dbo].[sp_BlitzLock]'
GO

CREATE PROCEDURE [dbo].[sp_BlitzLock]
(
    @Top INT = 2147483647, 
	@DatabaseName NVARCHAR(256) = NULL,
	@StartDate DATETIME = '19000101', 
	@EndDate DATETIME = '99991231', 
	@ObjectName NVARCHAR(1000) = NULL,
	@StoredProcName NVARCHAR(1000) = NULL,
	@AppName NVARCHAR(256) = NULL,
	@HostName NVARCHAR(256) = NULL,
	@LoginName NVARCHAR(256) = NULL,
	@EventSessionPath VARCHAR(256) = 'system_health*.xel', 
	@Debug BIT = 0, 
	@Help BIT = 0,
	@VersionDate DATETIME = NULL OUTPUT
)
AS
BEGIN

SET NOCOUNT ON;
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

DECLARE @Version VARCHAR(30);
SET @Version = '1.0';
SET @VersionDate = '20171201';


	IF @Help = 1 PRINT '
	/*
	sp_BlitzLock from http://FirstResponderKit.org
	
	This script checks for and analyzes deadlocks from the system health session or a custom extended event path
	Variables you can use:
		@Top: Use if you want to limit the number of deadlocks to return.
			  This is ordered by event date ascending
		@DatabaseName: If you want to filter to a specific database
		@StartDate: The date you want to start searching on.
		@EndDate: The date you want to stop searching on.
		@ObjectName: If you want to filter to a specific able. 
					 The object name has to be fully qualified ''Database.Schema.Table''
		@StoredProcName: If you want to search for a single stored proc
					 The proc name has to be fully qualified ''Database.Schema.Sproc''
		
		@AppName: If you want to filter to a specific application
		
		@HostName: If you want to filter to a specific host
		
		@LoginName: If you want to filter to a specific login
		@EventSessionPath: If you want to point this at an XE session rather than the system health session.
	
	
	
	To learn more, visit http://FirstResponderKit.org where you can download new
	versions for free, watch training videos on how it works, get more info on
	the findings, contribute your own code, and more.
	Unknown limitations of this version:
	 - None.  (If we knew them, they would be known. Duh.)
     Changes - for the full list of improvements and fixes in this version, see:
     https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/
    MIT License
	   
	All other copyright for sp_BlitzLock are held by Brent Ozar Unlimited, 2017.
	Copyright (c) 2017 Brent Ozar Unlimited
	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:
	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
	*/';


        DECLARE @ProductVersion NVARCHAR(128);
        DECLARE @ProductVersionMajor FLOAT;
        DECLARE @ProductVersionMinor INT;

        SET @ProductVersion = CAST(SERVERPROPERTY('ProductVersion') AS NVARCHAR(128));

        SELECT @ProductVersionMajor = SUBSTRING(@ProductVersion, 1, CHARINDEX('.', @ProductVersion) + 1),
               @ProductVersionMinor = PARSENAME(CONVERT(VARCHAR(32), @ProductVersion), 2);


        IF @ProductVersionMajor < 11.0
            BEGIN
                RAISERROR(
                    'sp_BlitzLock will throw a bunch of angry errors on versions of SQL Server earlier than 2012.',
                    0,
                    1) WITH NOWAIT;
                RETURN;
            END;

		IF @Top IS NULL
			SET @Top = 2147483647;

		IF @StartDate IS NULL
			SET @StartDate = '19000101';

		IF @EndDate IS NULL
			SET @EndDate = '99991231';
		

        IF OBJECT_ID('tempdb..#deadlock_data') IS NOT NULL
            DROP TABLE #deadlock_data;

        IF OBJECT_ID('tempdb..#deadlock_process') IS NOT NULL
            DROP TABLE #deadlock_process;

        IF OBJECT_ID('tempdb..#deadlock_stack') IS NOT NULL
            DROP TABLE #deadlock_stack;

        IF OBJECT_ID('tempdb..#deadlock_resource') IS NOT NULL
            DROP TABLE #deadlock_resource;

        IF OBJECT_ID('tempdb..#deadlock_owner_waiter') IS NOT NULL
            DROP TABLE #deadlock_owner_waiter;

        IF OBJECT_ID('tempdb..#deadlock_findings') IS NOT NULL
            DROP TABLE #deadlock_findings;

		CREATE TABLE #deadlock_findings
		(
		    id INT IDENTITY(1, 1) PRIMARY KEY CLUSTERED,
		    check_id INT NOT NULL,
			database_name NVARCHAR(256),
			object_name NVARCHAR(1000),
			finding_group NVARCHAR(100),
			finding NVARCHAR(4000)
		);


		/*Grab the initial set of XML to parse*/
        WITH xml
        AS ( SELECT CONVERT(XML, event_data) AS deadlock_xml
             FROM   sys.fn_xe_file_target_read_file(@EventSessionPath, NULL, NULL, NULL) )
        SELECT TOP ( @Top ) xml.deadlock_xml
        INTO   #deadlock_data
        FROM   xml
        WHERE  xml.deadlock_xml.value('(/event/@name)[1]', 'VARCHAR(256)') = 'xml_deadlock_report'
               AND xml.deadlock_xml.value('(/event/@timestamp)[1]', 'datetime') >= @StartDate
               AND xml.deadlock_xml.value('(/event/@timestamp)[1]', 'datetime') < @EndDate
			   ORDER BY xml.deadlock_xml.value('(/event/@timestamp)[1]', 'datetime')
			   OPTION ( RECOMPILE );

		

		/*Parse process and input buffer XML*/
        SELECT      dd.deadlock_xml.value('(event/@timestamp)[1]', 'DATETIME2') AS event_date,
					dd.deadlock_xml.value('(//deadlock/victim-list/victimProcess/@id)[1]', 'NVARCHAR(256)') AS victim_id,
					ca.dp.value('@id', 'NVARCHAR(256)') AS id,
                    ca.dp.value('@currentdb', 'BIGINT') AS database_id,
                    ca.dp.value('@logused', 'BIGINT') AS log_used,
                    ca.dp.value('@waitresource', 'NVARCHAR(256)') AS wait_resource,
                    ca.dp.value('@waittime', 'BIGINT') AS wait_time,
                    ca.dp.value('@transactionname', 'NVARCHAR(256)') AS transaction_name,
                    ca.dp.value('@lasttranstarted', 'DATETIME2(7)') AS last_tran_started,
                    ca.dp.value('@lastbatchstarted', 'DATETIME2(7)') AS last_batch_started,
                    ca.dp.value('@lastbatchcompleted', 'DATETIME2(7)') AS last_batch_completed,
                    ca.dp.value('@lockMode', 'NVARCHAR(256)') AS lock_mode,
                    ca.dp.value('@trancount', 'BIGINT') AS transaction_count,
                    ca.dp.value('@clientapp', 'NVARCHAR(256)') AS client_app,
                    ca.dp.value('@hostname', 'NVARCHAR(256)') AS host_name,
                    ca.dp.value('@loginname', 'NVARCHAR(256)') AS login_name,
                    ca.dp.value('@isolationlevel', 'NVARCHAR(256)') AS isolation_level,
                    ca2.ib.query('.') AS input_buffer,
                    ca.dp.query('.') AS process_xml
        INTO        #deadlock_process
        FROM        #deadlock_data AS dd
        CROSS APPLY dd.deadlock_xml.nodes('//deadlock/process-list/process') AS ca(dp)
        CROSS APPLY dd.deadlock_xml.nodes('//deadlock/process-list/process/inputbuf') AS ca2(ib)
		WHERE (ca.dp.value('@currentdb', 'BIGINT') = DB_ID(@DatabaseName) OR @DatabaseName IS NULL)
		AND   (ca.dp.value('@clientapp', 'NVARCHAR(256)') = @AppName OR @AppName IS NULL)
		AND   (ca.dp.value('@hostname', 'NVARCHAR(256)') = @HostName OR @HostName IS NULL)
		AND   (ca.dp.value('@loginname', 'NVARCHAR(256)') = @LoginName OR @LoginName IS NULL)
		OPTION ( RECOMPILE );



		/*Parse execution stack XML*/
        SELECT      dp.id,
					dp.event_date,
                    ca.dp.value('@procname', 'NVARCHAR(1000)') AS proc_name,
                    ca.dp.value('@sqlhandle', 'NVARCHAR(128)') AS sql_handle
        INTO        #deadlock_stack
        FROM        #deadlock_process AS dp
        CROSS APPLY dp.process_xml.nodes('//executionStack/frame') AS ca(dp)
		WHERE (ca.dp.value('@procname', 'NVARCHAR(256)') = @StoredProcName OR @StoredProcName IS NULL)
		OPTION ( RECOMPILE );



		/*Grab the full resource list*/
        SELECT      dd.deadlock_xml.value('(event/@timestamp)[1]', 'DATETIME2') AS event_date,
					dd.deadlock_xml.value('(//deadlock/victim-list/victimProcess/@id)[1]', 'NVARCHAR(256)') AS victim_id,
					ca.dp.query('.') AS resource_xml
        INTO        #deadlock_resource
        FROM        #deadlock_data AS dd
        CROSS APPLY dd.deadlock_xml.nodes('//deadlock/resource-list') AS ca(dp)
		OPTION ( RECOMPILE );


		/*This parses object locks*/
        SELECT      dr.event_date,
					ca.dr.value('@dbid', 'BIGINT') AS database_id,
                    ca.dr.value('@objectname', 'NVARCHAR(1000)') AS object_name,
                    ca.dr.value('@mode', 'NVARCHAR(256)') AS lock_mode,
                    w.l.value('@id', 'NVARCHAR(256)') AS waiter_id,
                    w.l.value('@mode', 'NVARCHAR(256)') AS waiter_mode,
                    o.l.value('@id', 'NVARCHAR(256)') AS owner_id,
                    o.l.value('@mode', 'NVARCHAR(256)') AS owner_mode
        INTO        #deadlock_owner_waiter
        FROM        #deadlock_resource AS dr
        CROSS APPLY dr.resource_xml.nodes('//resource-list/objectlock') AS ca(dr)
        CROSS APPLY ca.dr.nodes('//waiter-list/waiter') AS w(l)
        CROSS APPLY ca.dr.nodes('//owner-list/owner') AS o(l)
		WHERE (ca.dr.value('@objectname', 'NVARCHAR(1000)') = @ObjectName OR @ObjectName IS NULL)
		OPTION ( RECOMPILE );



		/*This parses page locks*/
        INSERT #deadlock_owner_waiter
        SELECT      dr.event_date,
					ca.dr.value('@dbid', 'BIGINT') AS database_id,
                    ca.dr.value('@objectname', 'NVARCHAR(256)') AS object_name,
                    ca.dr.value('@mode', 'NVARCHAR(256)') AS lock_mode,
                    w.l.value('@id', 'NVARCHAR(256)') AS waiter_id,
                    w.l.value('@mode', 'NVARCHAR(256)') AS waiter_mode,
                    o.l.value('@id', 'NVARCHAR(256)') AS owner_id,
                    o.l.value('@mode', 'NVARCHAR(256)') AS owner_mode
        FROM        #deadlock_resource AS dr
        CROSS APPLY dr.resource_xml.nodes('//resource-list/pagelock') AS ca(dr)
        CROSS APPLY ca.dr.nodes('//waiter-list/waiter') AS w(l)
        CROSS APPLY ca.dr.nodes('//owner-list/owner') AS o(l)
		OPTION ( RECOMPILE );


		/*This parses key locks*/
        INSERT #deadlock_owner_waiter
        SELECT      dr.event_date,     
					ca.dr.value('@dbid', 'BIGINT') AS database_id,
                    ca.dr.value('@objectname', 'NVARCHAR(256)') AS object_name,
                    ca.dr.value('@mode', 'NVARCHAR(256)') AS lock_mode,
                    w.l.value('@id', 'NVARCHAR(256)') AS waiter_id,
                    w.l.value('@mode', 'NVARCHAR(256)') AS waiter_mode,
                    o.l.value('@id', 'NVARCHAR(256)') AS owner_id,
                    o.l.value('@mode', 'NVARCHAR(256)') AS owner_mode
        FROM        #deadlock_resource AS dr
        CROSS APPLY dr.resource_xml.nodes('//resource-list/keylock') AS ca(dr)
        CROSS APPLY ca.dr.nodes('//waiter-list/waiter') AS w(l)
        CROSS APPLY ca.dr.nodes('//owner-list/owner') AS o(l)
		OPTION ( RECOMPILE );


		/*This parses rid locks*/
        INSERT #deadlock_owner_waiter
        SELECT      dr.event_date,
					ca.dr.value('@dbid', 'BIGINT') AS database_id,
                    ca.dr.value('@objectname', 'NVARCHAR(256)') AS object_name,
                    ca.dr.value('@mode', 'NVARCHAR(256)') AS lock_mode,
                    w.l.value('@id', 'NVARCHAR(256)') AS waiter_id,
                    w.l.value('@mode', 'NVARCHAR(256)') AS waiter_mode,
                    o.l.value('@id', 'NVARCHAR(256)') AS owner_id,
                    o.l.value('@mode', 'NVARCHAR(256)') AS owner_mode
        FROM        #deadlock_resource AS dr
        CROSS APPLY dr.resource_xml.nodes('//resource-list/ridlock') AS ca(dr)
        CROSS APPLY ca.dr.nodes('//waiter-list/waiter') AS w(l)
        CROSS APPLY ca.dr.nodes('//owner-list/owner') AS o(l)
		OPTION ( RECOMPILE );

		/*Get rid of nonsense*/
		DELETE dow
		FROM #deadlock_owner_waiter AS dow
		WHERE dow.owner_id = dow.waiter_id;

		/*Add some nonsense*/
		ALTER TABLE #deadlock_process
		ADD waiter_mode	NVARCHAR(256),
			owner_mode NVARCHAR(256),
			is_victim AS CONVERT(BIT, CASE WHEN id = victim_id THEN 1 ELSE 0 END);

		/*Update some nonsense*/
		UPDATE dp
		SET dp.owner_mode = dow.owner_mode
		FROM #deadlock_process AS dp
		JOIN #deadlock_owner_waiter AS dow
		ON dp.id = dow.owner_id
		AND dp.event_date = dow.event_date
		WHERE dp.is_victim = 0;

		UPDATE dp
		SET dp.waiter_mode = dow.waiter_mode
		FROM #deadlock_process AS dp
		JOIN #deadlock_owner_waiter AS dow
		ON dp.victim_id = dow.waiter_id
		AND dp.event_date = dow.event_date
		WHERE dp.is_victim = 1;


		/*Begin checks based on parsed values*/

		/*Check 1 is deadlocks by database*/
		INSERT #deadlock_findings ( check_id, database_name, object_name, finding_group, finding ) 	
		SELECT 1 AS check_id, 
			   DB_NAME(dp.database_id) AS database_name, 
			   '-' AS object_name,
			   'Total database locks' AS finding_group,
			   'This database had ' 
				+ CONVERT(NVARCHAR(20), COUNT_BIG(DISTINCT dp.event_date)) 
				+ ' deadlocks.'
        FROM   #deadlock_process AS dp
		GROUP BY DB_NAME(dp.database_id)
		OPTION ( RECOMPILE );

		/*Check 2 is deadlocks by object*/

		INSERT #deadlock_findings ( check_id, database_name, object_name, finding_group, finding ) 	
		SELECT 2 AS check_id, 
			   DB_NAME(dow.database_id) AS database_name, 
			   dow.object_name AS object_name,
			   'Total object deadlocks' AS finding_group,
			   'This object was involved in ' 
				+ CONVERT(NVARCHAR(20), COUNT_BIG(DISTINCT dow.object_name))
				+ ' deadlock(s).'
        FROM   #deadlock_owner_waiter AS dow
		GROUP BY DB_NAME(dow.database_id), dow.object_name
		OPTION ( RECOMPILE );
		

		/*Check 3 looks for Serializable locking*/
		INSERT #deadlock_findings ( check_id, database_name, object_name, finding_group, finding ) 
		SELECT 3 AS check_id,
			   DB_NAME(dp.database_id) AS database_name,
			   '-' AS object_name,
			   'Serializable locking' AS finding_group,
			   'This database has had ' + 
			   CONVERT(NVARCHAR(20), COUNT_BIG(*)) +
			   ' instances of serializable deadlocks.'
			   AS finding
		FROM #deadlock_process AS dp
		WHERE dp.isolation_level LIKE 'serializable%'
		GROUP BY DB_NAME(dp.database_id)
		OPTION ( RECOMPILE );


		/*Check 4 looks for Repeatable Read locking*/
		INSERT #deadlock_findings ( check_id, database_name, object_name, finding_group, finding ) 
		SELECT 4 AS check_id,
			   DB_NAME(dp.database_id) AS database_name,
			   '-' AS object_name,
			   'Repeatable Read locking' AS finding_group,
			   'This database has had ' + 
			   CONVERT(NVARCHAR(20), COUNT_BIG(*)) +
			   ' instances of repeatable read deadlocks.'
			   AS finding
		FROM #deadlock_process AS dp
		WHERE dp.isolation_level LIKE 'repeatable read%'
		GROUP BY DB_NAME(dp.database_id)
		OPTION ( RECOMPILE );


		/*Check 5 breaks down app, host, and login information*/
		INSERT #deadlock_findings ( check_id, database_name, object_name, finding_group, finding ) 
		SELECT 5 AS check_id,
			   DB_NAME(dp.database_id) AS database_name,
			   '-' AS object_name,
			   'Login, App, and Host locking' AS finding_group,
			   'This database has had ' + 
			   CONVERT(NVARCHAR(20), COUNT_BIG(DISTINCT dp.event_date)) +
			   ' instances of deadlocks involving the login ' +
			   ISNULL(dp.login_name, 'UNKNOWN') + 
			   ' from the application ' + 
			   ISNULL(dp.client_app, 'UNKNOWN') + 
			   ' on host ' + 
			   ISNULL(dp.host_name, 'UNKNOWN')
			   AS finding
		FROM #deadlock_process AS dp
		GROUP BY DB_NAME(dp.database_id), dp.login_name, dp.client_app, dp.host_name
		OPTION ( RECOMPILE );


		/*Check 6 breaks down the types of locks (object, page, key, etc.)*/
		WITH lock_types AS (
				SELECT DB_NAME(dp.database_id) AS database_name,
					   dow.object_name, 
					   SUBSTRING(dp.wait_resource, 1, CHARINDEX(':', dp.wait_resource) -1) AS lock,
					   CONVERT(NVARCHAR(20), COUNT_BIG(DISTINCT dp.id)) AS lock_count
				FROM #deadlock_process AS dp 
				JOIN #deadlock_owner_waiter AS dow
				ON dp.id = dow.owner_id
				AND dp.event_date = dow.event_date
				GROUP BY DB_NAME(dp.database_id), SUBSTRING(dp.wait_resource, 1, CHARINDEX(':', dp.wait_resource) - 1), dow.object_name
							)	
		INSERT #deadlock_findings ( check_id, database_name, object_name, finding_group, finding ) 
		SELECT DISTINCT 6 AS check_id,
			   lt.database_name,
			   lt.object_name,
			   'Types of locks by object' AS finding_group,
			   'This object has had ' +
			   STUFF((SELECT DISTINCT N', ' + lt2.lock_count + ' ' + lt2.lock
									FROM lock_types AS lt2
									WHERE lt2.database_name = lt.database_name
									AND lt2.object_name = lt.object_name
									FOR XML PATH(N''), TYPE).value(N'.[1]', N'NVARCHAR(MAX)'), 1, 1, N'')
			   + ' locks'
		FROM lock_types AS lt
		OPTION ( RECOMPILE );


		/*Check 7 gives you more info queries for sp_BlitzCache & BlitzQueryStore*/
		WITH deadlock_stack AS (
			SELECT  DISTINCT
					ds.id,
					ds.proc_name,
					ds.event_date,
					PARSENAME(ds.proc_name, 3) AS database_name,
					PARSENAME(ds.proc_name, 2) AS schema_name,
					PARSENAME(ds.proc_name, 1) AS proc_only_name,
					'''' + STUFF((SELECT DISTINCT N',' + ds2.sql_handle
									FROM #deadlock_stack AS ds2
									WHERE ds2.id = ds.id
									AND ds2.event_date = ds.event_date
					FOR XML PATH(N''), TYPE).value(N'.[1]', N'NVARCHAR(MAX)'), 1, 1, N'') + '''' AS sql_handle_csv
			FROM #deadlock_stack AS ds
			GROUP BY PARSENAME(ds.proc_name, 3),
                     PARSENAME(ds.proc_name, 2),
                     PARSENAME(ds.proc_name, 1),
                     ds.id,
                     ds.proc_name,
                     ds.event_date
					)
		INSERT #deadlock_findings ( check_id, database_name, object_name, finding_group, finding ) 
		SELECT DISTINCT 7 AS check_id,
			   DB_NAME(dow.database_id) AS database_name,
			   ds.proc_name AS object_name,
			   'More Info - Query' AS finding_group,
			   'EXEC sp_BlitzCache ' +
					CASE WHEN ds.proc_name = 'adhoc'
						 THEN ' @OnlySqlHandles = ' + sql_handle_csv
						 ELSE '@StoredProcName = ' + 
						       QUOTENAME(ds.proc_only_name, '''')
					END +
					';' AS finding
		FROM deadlock_stack AS ds
		JOIN #deadlock_owner_waiter AS dow
		ON dow.owner_id = ds.id
		AND dow.event_date = ds.event_date
		OPTION ( RECOMPILE );

		IF @ProductVersionMajor >= 13
		BEGIN
		
		WITH deadlock_stack AS (
			SELECT  DISTINCT
					ds.id,
					ds.sql_handle,
					ds.proc_name,
					ds.event_date,
					PARSENAME(ds.proc_name, 3) AS database_name,
					PARSENAME(ds.proc_name, 2) AS schema_name,
					PARSENAME(ds.proc_name, 1) AS proc_only_name
			FROM #deadlock_stack AS ds	
					)
		INSERT #deadlock_findings ( check_id, database_name, object_name, finding_group, finding ) 
		SELECT DISTINCT 7 AS check_id,
			   DB_NAME(dow.database_id) AS database_name,
			   ds.proc_name AS object_name,
			   'More Info - Query' AS finding_group,
			   'EXEC sp_BlitzQueryStore ' 
			   + '@DatabaseName = ' 
			   + QUOTENAME(ds.database_name, '''')
			   + ', '
			   + '@StoredProcName = ' 
			   + QUOTENAME(ds.proc_only_name, '''')
			   + ';' AS finding
		FROM deadlock_stack AS ds
		JOIN #deadlock_owner_waiter AS dow
		ON dow.owner_id = ds.id
		AND dow.event_date = ds.event_date
		WHERE ds.proc_name <> 'adhoc'
		OPTION ( RECOMPILE );
		END;
		

		/*Check 8 gives you stored proc deadlock counts*/
		INSERT #deadlock_findings ( check_id, database_name, object_name, finding_group, finding )
		SELECT 8 AS check_id,
			   DB_NAME(dp.database_id) AS database_name,
			   ds.proc_name, 
			   'Stored Procedure Deadlocks',
			   'The stored procedure ' 
			   + PARSENAME(ds.proc_name, 2)
			   + '.'
			   + PARSENAME(ds.proc_name, 1)
			   + ' has been involved in '
			   + CONVERT(NVARCHAR(10), COUNT_BIG(DISTINCT ds.id))
			   + ' deadlocks.'
		FROM #deadlock_stack AS ds
		JOIN #deadlock_process AS dp
		ON dp.id = ds.id
		AND ds.event_date = dp.event_date
		WHERE ds.proc_name <> 'adhoc'
		GROUP BY DB_NAME(dp.database_id), ds.proc_name
		OPTION(RECOMPILE);


		/*Check 9 gives you more info queries for sp_BlitzIndex */
		WITH bi AS (
				SELECT  DISTINCT
						dow.object_name,
						PARSENAME(dow.object_name, 3) AS database_name,
						PARSENAME(dow.object_name, 2) AS schema_name,
						PARSENAME(dow.object_name, 1) AS table_name
				FROM #deadlock_owner_waiter AS dow
					)
		INSERT #deadlock_findings ( check_id, database_name, object_name, finding_group, finding ) 
		SELECT 9 AS check_id,	
				bi.database_name,
				bi.schema_name + '.' + bi.table_name,
				'More Info - Table' AS finding_group,
				'EXEC sp_BlitzIndex ' + 
				'@DatabaseName = ' + QUOTENAME(bi.database_name, '''') + 
				', @SchemaName = ' + QUOTENAME(bi.schema_name, '''') + 
				', @TableName = ' + QUOTENAME(bi.table_name, '''') +
				';'	 AS finding
		FROM bi
		OPTION ( RECOMPILE );

		/*Check 10 gets total deadlock wait time per object*/
		WITH chopsuey AS (
				SELECT DISTINCT
				PARSENAME(dow.object_name, 3) AS database_name,
				dow.object_name,
				CONVERT(VARCHAR(10), (SUM(DISTINCT dp.wait_time) / 1000) / 86400) AS wait_days,
				CONVERT(VARCHAR(20), DATEADD(SECOND, (SUM(DISTINCT dp.wait_time) / 1000), 0), 108) AS wait_time_hms
				FROM #deadlock_owner_waiter AS dow
				JOIN #deadlock_process AS dp
				ON (dp.id = dow.owner_id OR dp.victim_id = dow.waiter_id)
					AND dp.event_date = dow.event_date
				GROUP BY PARSENAME(dow.object_name, 3), dow.object_name
						)
				INSERT #deadlock_findings ( check_id, database_name, object_name, finding_group, finding ) 
				SELECT 10 AS check_id,
						cs.database_name,
						cs.object_name,
						'Total object deadlock wait time' AS finding_group,
						'This object has had ' 
						+ CONVERT(VARCHAR(10), cs.wait_days) 
						+ ':' + CONVERT(VARCHAR(20), cs.wait_time_hms, 108)
						+ ' [d/h/m/s] of deadlock wait time.' AS finding
				FROM chopsuey AS cs
				WHERE cs.object_name IS NOT NULL
				OPTION ( RECOMPILE );

		/*Check 11 gets total deadlock wait time per database*/
		WITH wait_time AS (
						SELECT DB_NAME(dp.database_id) AS database_name,
							   SUM(CONVERT(BIGINT, dp.wait_time)) AS total_wait_time_ms
						FROM #deadlock_process AS dp
						GROUP BY DB_NAME(dp.database_id)
						  )
		INSERT #deadlock_findings ( check_id, database_name, object_name, finding_group, finding ) 
		SELECT 11 AS check_id,
				wt.database_name,
				'-' AS object_name,
				'Total database deadlock wait time' AS finding_group,
				'This database has had ' 
				+ CONVERT(VARCHAR(10), (SUM(DISTINCT wt.total_wait_time_ms) / 1000) / 86400) 
				+ ':' + CONVERT(VARCHAR(20), DATEADD(SECOND, (SUM(DISTINCT wt.total_wait_time_ms) / 1000), 0), 108)
				+ ' [d/h/m/s] of deadlock wait time.'
		FROM wait_time AS wt
		GROUP BY wt.database_name
		OPTION ( RECOMPILE );


		/*Thank you goodnight*/
		INSERT #deadlock_findings ( check_id, database_name, object_name, finding_group, finding ) 
		VALUES ( -1, 
				 N'sp_BlitzLock ' + CAST(CONVERT(DATETIME, @VersionDate, 102) AS VARCHAR(100)), 
				 N'SQL Server First Responder Kit', 
				 N'http://FirstResponderKit.org/', 
				 N'To get help or add your own contributions, join us at http://FirstResponderKit.org.');

		


		/*Results*/
		WITH deadlocks
		AS ( SELECT dp.event_date,
		            dp.id,
					dp.victim_id,
		            dp.database_id,
		            dp.log_used,
		            dp.wait_resource,
		            CONVERT(
		                XML,
		                STUFF((   SELECT DISTINCT NCHAR(10) 
										+ N' <object>' 
										+ ISNULL(c.object_name, N'') 
										+ N'</object> ' AS object_name
		                        FROM   #deadlock_owner_waiter AS c
		                        WHERE  (dp.id = c.owner_id
								OR		dp.victim_id = c.waiter_id)
								AND	    dp.event_date = c.event_date
		                        FOR XML PATH(N''), TYPE ).value(N'.[1]', N'NVARCHAR(4000)'),
		                    1, 1, N'')) AS object_names,
		            dp.wait_time,
		            dp.transaction_name,
		            dp.last_tran_started,
		            dp.last_batch_started,
		            dp.last_batch_completed,
		            dp.lock_mode,
		            dp.transaction_count,
		            dp.client_app,
		            dp.host_name,
		            dp.login_name,
		            dp.isolation_level,
		            dp.process_xml.value('(//process/inputbuf/text())[1]', 'NVARCHAR(MAX)') AS inputbuf,
		            ROW_NUMBER() OVER ( PARTITION BY dp.event_date, dp.id ORDER BY dp.event_date ) AS dn,
					DENSE_RANK() OVER ( ORDER BY dp.event_date ) AS en,
					ROW_NUMBER() OVER ( PARTITION BY dp.event_date ORDER BY dp.event_date ) -1 AS qn,
					dp.is_victim,
					ISNULL(dp.owner_mode, '-') AS owner_mode,
					ISNULL(dp.waiter_mode, '-') AS waiter_mode
		     FROM   #deadlock_process AS dp )
		SELECT d.event_date,
			   DB_NAME(d.database_id) AS database_name,
		       'Deadlock #' 
			   + CONVERT(NVARCHAR(10), d.en)
			   + ', Query #' 
			   + CASE WHEN d.qn = 0 THEN N'1' ELSE CONVERT(NVARCHAR(10), d.qn) END 
			   + CASE WHEN d.is_victim = 1 THEN ' - VICTIM' ELSE '' END
			   AS deadlock_group, 
		       CONVERT(XML, N'<inputbuf>' + d.inputbuf + N'</inputbuf>') AS query,
		       d.object_names,
		       d.isolation_level,
			   d.owner_mode,
			   d.waiter_mode,
		       d.transaction_count,
		       d.login_name,
		       d.host_name,
		       d.client_app,
		       d.wait_time,
			   d.log_used,
		       d.last_tran_started,
		       d.last_batch_started,
		       d.last_batch_completed,
		       d.transaction_name
		FROM   deadlocks AS d
		WHERE  d.dn = 1
		ORDER BY d.event_date, is_victim DESC;



		SELECT df.check_id, df.database_name, df.object_name, df.finding_group, df.finding
		FROM #deadlock_findings AS df
		ORDER BY df.check_id
		OPTION ( RECOMPILE );


        IF @Debug = 1
            BEGIN

                SELECT '#deadlock_data' AS table_name, *
                FROM   #deadlock_data AS dd
				OPTION ( RECOMPILE );

                SELECT '#deadlock_resource' AS table_name, *
                FROM   #deadlock_resource AS dr
				OPTION ( RECOMPILE );

                SELECT '#deadlock_owner_waiter' AS table_name, *
                FROM   #deadlock_owner_waiter AS dow
				OPTION ( RECOMPILE );

                SELECT '#deadlock_process' AS table_name, *
                FROM   #deadlock_process AS dp
				OPTION ( RECOMPILE );

                SELECT '#deadlock_stack' AS table_name, *
                FROM   #deadlock_stack AS ds
				OPTION ( RECOMPILE );
				
            END; -- End debug

    END; --Final End
GO
PRINT N'Creating [dbo].[sp_FindStringInTable_with_flag]'
GO
CREATE PROCEDURE [dbo].[sp_FindStringInTable_with_flag] @stringToFind VARCHAR(max), @schema sysname, @table sysname 
AS

SET NOCOUNT ON

BEGIN TRY
   DECLARE @sqlCommand varchar(max) = 'SELECT ' 

   SELECT @sqlCommand = @sqlCommand + 'case when [' + COLUMN_NAME + '] LIKE ''' + @stringToFind + ''' then 1 else 0 end as ' + COLUMN_NAME + '_found, ' 
   FROM INFORMATION_SCHEMA.COLUMNS 
   WHERE TABLE_SCHEMA = @schema
   AND TABLE_NAME = @table 
   AND DATA_TYPE IN ('char','nchar','ntext','nvarchar','text','varchar')

   SELECT @sqlCommand = @sqlCommand + ' * FROM [' + @schema + '].[' + @table + '] WHERE '
	   
   SELECT @sqlCommand = @sqlCommand + '[' + COLUMN_NAME + '] LIKE ''' + @stringToFind + ''' OR '
   FROM INFORMATION_SCHEMA.COLUMNS 
   WHERE TABLE_SCHEMA = @schema
   AND TABLE_NAME = @table 
   AND DATA_TYPE IN ('char','nchar','ntext','nvarchar','text','varchar')

   SET @sqlCommand = left(@sqlCommand,len(@sqlCommand)-3)
   EXEC (@sqlCommand)
   PRINT @sqlCommand
END TRY

BEGIN CATCH 
   PRINT 'There was an error. Check to make sure object exists.'
   PRINT error_message()
END CATCH
GO
PRINT N'Creating [dbo].[sp_WhoIsActive]'
GO

/*********************************************************************************************
Who Is Active? v11.32 (2018-07-03)
(C) 2007-2018, Adam Machanic

Feedback: mailto:adam@dataeducation.com
Updates: http://whoisactive.com
Blog: http://dataeducation.com

License: 
	Who is Active? is free to download and use for personal, educational, and internal 
	corporate purposes, provided that this header is preserved. Redistribution or sale 
	of Who is Active?, in whole or in part, is prohibited without the author's express 
	written consent.
*********************************************************************************************/
CREATE PROC [dbo].[sp_WhoIsActive]
(
--~
	--Filters--Both inclusive and exclusive
	--Set either filter to '' to disable
	--Valid filter types are: session, program, database, login, and host
	--Session is a session ID, and either 0 or '' can be used to indicate "all" sessions
	--All other filter types support % or _ as wildcards
	@filter sysname = '',
	@filter_type VARCHAR(10) = 'session',
	@not_filter sysname = '',
	@not_filter_type VARCHAR(10) = 'session',

	--Retrieve data about the calling session?
	@show_own_spid BIT = 0,

	--Retrieve data about system sessions?
	@show_system_spids BIT = 0,

	--Controls how sleeping SPIDs are handled, based on the idea of levels of interest
	--0 does not pull any sleeping SPIDs
	--1 pulls only those sleeping SPIDs that also have an open transaction
	--2 pulls all sleeping SPIDs
	@show_sleeping_spids TINYINT = 1,

	--If 1, gets the full stored procedure or running batch, when available
	--If 0, gets only the actual statement that is currently running in the batch or procedure
	@get_full_inner_text BIT = 0,

	--Get associated query plans for running tasks, if available
	--If @get_plans = 1, gets the plan based on the request's statement offset
	--If @get_plans = 2, gets the entire plan based on the request's plan_handle
	@get_plans TINYINT = 0,

	--Get the associated outer ad hoc query or stored procedure call, if available
	@get_outer_command BIT = 0,

	--Enables pulling transaction log write info and transaction duration
	@get_transaction_info BIT = 0,

	--Get information on active tasks, based on three interest levels
	--Level 0 does not pull any task-related information
	--Level 1 is a lightweight mode that pulls the top non-CXPACKET wait, giving preference to blockers
	--Level 2 pulls all available task-based metrics, including: 
	--number of active tasks, current wait stats, physical I/O, context switches, and blocker information
	@get_task_info TINYINT = 1,

	--Gets associated locks for each request, aggregated in an XML format
	@get_locks BIT = 0,

	--Get average time for past runs of an active query
	--(based on the combination of plan handle, sql handle, and offset)
	@get_avg_time BIT = 0,

	--Get additional non-performance-related information about the session or request
	--text_size, language, date_format, date_first, quoted_identifier, arithabort, ansi_null_dflt_on, 
	--ansi_defaults, ansi_warnings, ansi_padding, ansi_nulls, concat_null_yields_null, 
	--transaction_isolation_level, lock_timeout, deadlock_priority, row_count, command_type
	--
	--If a SQL Agent job is running, an subnode called agent_info will be populated with some or all of
	--the following: job_id, job_name, step_id, step_name, msdb_query_error (in the event of an error)
	--
	--If @get_task_info is set to 2 and a lock wait is detected, a subnode called block_info will be
	--populated with some or all of the following: lock_type, database_name, object_id, file_id, hobt_id, 
	--applock_hash, metadata_resource, metadata_class_id, object_name, schema_name
	@get_additional_info BIT = 0,

	--Walk the blocking chain and count the number of 
	--total SPIDs blocked all the way down by a given session
	--Also enables task_info Level 1, if @get_task_info is set to 0
	@find_block_leaders BIT = 0,

	--Pull deltas on various metrics
	--Interval in seconds to wait before doing the second data pull
	@delta_interval TINYINT = 0,

	--List of desired output columns, in desired order
	--Note that the final output will be the intersection of all enabled features and all 
	--columns in the list. Therefore, only columns associated with enabled features will 
	--actually appear in the output. Likewise, removing columns from this list may effectively
	--disable features, even if they are turned on
	--
	--Each element in this list must be one of the valid output column names. Names must be
	--delimited by square brackets. White space, formatting, and additional characters are
	--allowed, as long as the list contains exact matches of delimited valid column names.
	@output_column_list VARCHAR(8000) = '[dd%][session_id][sql_text][sql_command][login_name][wait_info][tasks][tran_log%][cpu%][temp%][block%][reads%][writes%][context%][physical%][query_plan][locks][%]',

	--Column(s) by which to sort output, optionally with sort directions. 
		--Valid column choices:
		--session_id, physical_io, reads, physical_reads, writes, tempdb_allocations, 
		--tempdb_current, CPU, context_switches, used_memory, physical_io_delta, reads_delta, 
		--physical_reads_delta, writes_delta, tempdb_allocations_delta, tempdb_current_delta, 
		--CPU_delta, context_switches_delta, used_memory_delta, tasks, tran_start_time, 
		--open_tran_count, blocking_session_id, blocked_session_count, percent_complete, 
		--host_name, login_name, database_name, start_time, login_time, program_name
		--
		--Note that column names in the list must be bracket-delimited. Commas and/or white
		--space are not required. 
	@sort_order VARCHAR(500) = '[start_time] ASC',

	--Formats some of the output columns in a more "human readable" form
	--0 disables outfput format
	--1 formats the output for variable-width fonts
	--2 formats the output for fixed-width fonts
	@format_output TINYINT = 1,

	--If set to a non-blank value, the script will attempt to insert into the specified 
	--destination table. Please note that the script will not verify that the table exists, 
	--or that it has the correct schema, before doing the insert.
	--Table can be specified in one, two, or three-part format
	@destination_table VARCHAR(4000) = '',

	--If set to 1, no data collection will happen and no result set will be returned; instead,
	--a CREATE TABLE statement will be returned via the @schema parameter, which will match 
	--the schema of the result set that would be returned by using the same collection of the
	--rest of the parameters. The CREATE TABLE statement will have a placeholder token of 
	--<table_name> in place of an actual table name.
	@return_schema BIT = 0,
	@schema VARCHAR(MAX) = NULL OUTPUT,

	--Help! What do I do?
	@help BIT = 0
--~
)
/*
OUTPUT COLUMNS
--------------
Formatted/Non:	[session_id] [smallint] NOT NULL
	Session ID (a.k.a. SPID)

Formatted:		[dd hh:mm:ss.mss] [varchar](15) NULL
Non-Formatted:	<not returned>
	For an active request, time the query has been running
	For a sleeping session, time since the last batch completed

Formatted:		[dd hh:mm:ss.mss (avg)] [varchar](15) NULL
Non-Formatted:	[avg_elapsed_time] [int] NULL
	(Requires @get_avg_time option)
	How much time has the active portion of the query taken in the past, on average?

Formatted:		[physical_io] [varchar](30) NULL
Non-Formatted:	[physical_io] [bigint] NULL
	Shows the number of physical I/Os, for active requests

Formatted:		[reads] [varchar](30) NULL
Non-Formatted:	[reads] [bigint] NULL
	For an active request, number of reads done for the current query
	For a sleeping session, total number of reads done over the lifetime of the session

Formatted:		[physical_reads] [varchar](30) NULL
Non-Formatted:	[physical_reads] [bigint] NULL
	For an active request, number of physical reads done for the current query
	For a sleeping session, total number of physical reads done over the lifetime of the session

Formatted:		[writes] [varchar](30) NULL
Non-Formatted:	[writes] [bigint] NULL
	For an active request, number of writes done for the current query
	For a sleeping session, total number of writes done over the lifetime of the session

Formatted:		[tempdb_allocations] [varchar](30) NULL
Non-Formatted:	[tempdb_allocations] [bigint] NULL
	For an active request, number of TempDB writes done for the current query
	For a sleeping session, total number of TempDB writes done over the lifetime of the session

Formatted:		[tempdb_current] [varchar](30) NULL
Non-Formatted:	[tempdb_current] [bigint] NULL
	For an active request, number of TempDB pages currently allocated for the query
	For a sleeping session, number of TempDB pages currently allocated for the session

Formatted:		[CPU] [varchar](30) NULL
Non-Formatted:	[CPU] [int] NULL
	For an active request, total CPU time consumed by the current query
	For a sleeping session, total CPU time consumed over the lifetime of the session

Formatted:		[context_switches] [varchar](30) NULL
Non-Formatted:	[context_switches] [bigint] NULL
	Shows the number of context switches, for active requests

Formatted:		[used_memory] [varchar](30) NOT NULL
Non-Formatted:	[used_memory] [bigint] NOT NULL
	For an active request, total memory consumption for the current query
	For a sleeping session, total current memory consumption

Formatted:		[physical_io_delta] [varchar](30) NULL
Non-Formatted:	[physical_io_delta] [bigint] NULL
	(Requires @delta_interval option)
	Difference between the number of physical I/Os reported on the first and second collections. 
	If the request started after the first collection, the value will be NULL

Formatted:		[reads_delta] [varchar](30) NULL
Non-Formatted:	[reads_delta] [bigint] NULL
	(Requires @delta_interval option)
	Difference between the number of reads reported on the first and second collections. 
	If the request started after the first collection, the value will be NULL

Formatted:		[physical_reads_delta] [varchar](30) NULL
Non-Formatted:	[physical_reads_delta] [bigint] NULL
	(Requires @delta_interval option)
	Difference between the number of physical reads reported on the first and second collections. 
	If the request started after the first collection, the value will be NULL

Formatted:		[writes_delta] [varchar](30) NULL
Non-Formatted:	[writes_delta] [bigint] NULL
	(Requires @delta_interval option)
	Difference between the number of writes reported on the first and second collections. 
	If the request started after the first collection, the value will be NULL

Formatted:		[tempdb_allocations_delta] [varchar](30) NULL
Non-Formatted:	[tempdb_allocations_delta] [bigint] NULL
	(Requires @delta_interval option)
	Difference between the number of TempDB writes reported on the first and second collections. 
	If the request started after the first collection, the value will be NULL

Formatted:		[tempdb_current_delta] [varchar](30) NULL
Non-Formatted:	[tempdb_current_delta] [bigint] NULL
	(Requires @delta_interval option)
	Difference between the number of allocated TempDB pages reported on the first and second 
	collections. If the request started after the first collection, the value will be NULL

Formatted:		[CPU_delta] [varchar](30) NULL
Non-Formatted:	[CPU_delta] [int] NULL
	(Requires @delta_interval option)
	Difference between the CPU time reported on the first and second collections. 
	If the request started after the first collection, the value will be NULL

Formatted:		[context_switches_delta] [varchar](30) NULL
Non-Formatted:	[context_switches_delta] [bigint] NULL
	(Requires @delta_interval option)
	Difference between the context switches count reported on the first and second collections
	If the request started after the first collection, the value will be NULL

Formatted:		[used_memory_delta] [varchar](30) NULL
Non-Formatted:	[used_memory_delta] [bigint] NULL
	Difference between the memory usage reported on the first and second collections
	If the request started after the first collection, the value will be NULL

Formatted:		[tasks] [varchar](30) NULL
Non-Formatted:	[tasks] [smallint] NULL
	Number of worker tasks currently allocated, for active requests

Formatted/Non:	[status] [varchar](30) NOT NULL
	Activity status for the session (running, sleeping, etc)

Formatted/Non:	[wait_info] [nvarchar](4000) NULL
	Aggregates wait information, in the following format:
		(Ax: Bms/Cms/Dms)E
	A is the number of waiting tasks currently waiting on resource type E. B/C/D are wait
	times, in milliseconds. If only one thread is waiting, its wait time will be shown as B.
	If two tasks are waiting, each of their wait times will be shown (B/C). If three or more 
	tasks are waiting, the minimum, average, and maximum wait times will be shown (B/C/D).
	If wait type E is a page latch wait and the page is of a "special" type (e.g. PFS, GAM, SGAM), 
	the page type will be identified.
	If wait type E is CXPACKET, the nodeId from the query plan will be identified

Formatted/Non:	[locks] [xml] NULL
	(Requires @get_locks option)
	Aggregates lock information, in XML format.
	The lock XML includes the lock mode, locked object, and aggregates the number of requests. 
	Attempts are made to identify locked objects by name

Formatted/Non:	[tran_start_time] [datetime] NULL
	(Requires @get_transaction_info option)
	Date and time that the first transaction opened by a session caused a transaction log 
	write to occur.

Formatted/Non:	[tran_log_writes] [nvarchar](4000) NULL
	(Requires @get_transaction_info option)
	Aggregates transaction log write information, in the following format:
	A:wB (C kB)
	A is a database that has been touched by an active transaction
	B is the number of log writes that have been made in the database as a result of the transaction
	C is the number of log kilobytes consumed by the log records

Formatted:		[open_tran_count] [varchar](30) NULL
Non-Formatted:	[open_tran_count] [smallint] NULL
	Shows the number of open transactions the session has open

Formatted:		[sql_command] [xml] NULL
Non-Formatted:	[sql_command] [nvarchar](max) NULL
	(Requires @get_outer_command option)
	Shows the "outer" SQL command, i.e. the text of the batch or RPC sent to the server, 
	if available

Formatted:		[sql_text] [xml] NULL
Non-Formatted:	[sql_text] [nvarchar](max) NULL
	Shows the SQL text for active requests or the last statement executed
	for sleeping sessions, if available in either case.
	If @get_full_inner_text option is set, shows the full text of the batch.
	Otherwise, shows only the active statement within the batch.
	If the query text is locked, a special timeout message will be sent, in the following format:
		<timeout_exceeded />
	If an error occurs, an error message will be sent, in the following format:
		<error message="message" />

Formatted/Non:	[query_plan] [xml] NULL
	(Requires @get_plans option)
	Shows the query plan for the request, if available.
	If the plan is locked, a special timeout message will be sent, in the following format:
		<timeout_exceeded />
	If an error occurs, an error message will be sent, in the following format:
		<error message="message" />

Formatted/Non:	[blocking_session_id] [smallint] NULL
	When applicable, shows the blocking SPID

Formatted:		[blocked_session_count] [varchar](30) NULL
Non-Formatted:	[blocked_session_count] [smallint] NULL
	(Requires @find_block_leaders option)
	The total number of SPIDs blocked by this session,
	all the way down the blocking chain.

Formatted:		[percent_complete] [varchar](30) NULL
Non-Formatted:	[percent_complete] [real] NULL
	When applicable, shows the percent complete (e.g. for backups, restores, and some rollbacks)

Formatted/Non:	[host_name] [sysname] NOT NULL
	Shows the host name for the connection

Formatted/Non:	[login_name] [sysname] NOT NULL
	Shows the login name for the connection

Formatted/Non:	[database_name] [sysname] NULL
	Shows the connected database

Formatted/Non:	[program_name] [sysname] NULL
	Shows the reported program/application name

Formatted/Non:	[additional_info] [xml] NULL
	(Requires @get_additional_info option)
	Returns additional non-performance-related session/request information
	If the script finds a SQL Agent job running, the name of the job and job step will be reported
	If @get_task_info = 2 and the script finds a lock wait, the locked object will be reported

Formatted/Non:	[start_time] [datetime] NOT NULL
	For active requests, shows the time the request started
	For sleeping sessions, shows the time the last batch completed

Formatted/Non:	[login_time] [datetime] NOT NULL
	Shows the time that the session connected

Formatted/Non:	[request_id] [int] NULL
	For active requests, shows the request_id
	Should be 0 unless MARS is being used

Formatted/Non:	[collection_time] [datetime] NOT NULL
	Time that this script's final SELECT ran
*/
AS
BEGIN;
	SET NOCOUNT ON; 
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	SET QUOTED_IDENTIFIER ON;
	SET ANSI_PADDING ON;
	SET CONCAT_NULL_YIELDS_NULL ON;
	SET ANSI_WARNINGS ON;
	SET NUMERIC_ROUNDABORT OFF;
	SET ARITHABORT ON;

	IF
		@filter IS NULL
		OR @filter_type IS NULL
		OR @not_filter IS NULL
		OR @not_filter_type IS NULL
		OR @show_own_spid IS NULL
		OR @show_system_spids IS NULL
		OR @show_sleeping_spids IS NULL
		OR @get_full_inner_text IS NULL
		OR @get_plans IS NULL
		OR @get_outer_command IS NULL
		OR @get_transaction_info IS NULL
		OR @get_task_info IS NULL
		OR @get_locks IS NULL
		OR @get_avg_time IS NULL
		OR @get_additional_info IS NULL
		OR @find_block_leaders IS NULL
		OR @delta_interval IS NULL
		OR @format_output IS NULL
		OR @output_column_list IS NULL
		OR @sort_order IS NULL
		OR @return_schema IS NULL
		OR @destination_table IS NULL
		OR @help IS NULL
	BEGIN;
		RAISERROR('Input parameters cannot be NULL', 16, 1);
		RETURN;
	END;
	
	IF @filter_type NOT IN ('session', 'program', 'database', 'login', 'host')
	BEGIN;
		RAISERROR('Valid filter types are: session, program, database, login, host', 16, 1);
		RETURN;
	END;
	
	IF @filter_type = 'session' AND @filter LIKE '%[^0123456789]%'
	BEGIN;
		RAISERROR('Session filters must be valid integers', 16, 1);
		RETURN;
	END;
	
	IF @not_filter_type NOT IN ('session', 'program', 'database', 'login', 'host')
	BEGIN;
		RAISERROR('Valid filter types are: session, program, database, login, host', 16, 1);
		RETURN;
	END;
	
	IF @not_filter_type = 'session' AND @not_filter LIKE '%[^0123456789]%'
	BEGIN;
		RAISERROR('Session filters must be valid integers', 16, 1);
		RETURN;
	END;
	
	IF @show_sleeping_spids NOT IN (0, 1, 2)
	BEGIN;
		RAISERROR('Valid values for @show_sleeping_spids are: 0, 1, or 2', 16, 1);
		RETURN;
	END;
	
	IF @get_plans NOT IN (0, 1, 2)
	BEGIN;
		RAISERROR('Valid values for @get_plans are: 0, 1, or 2', 16, 1);
		RETURN;
	END;

	IF @get_task_info NOT IN (0, 1, 2)
	BEGIN;
		RAISERROR('Valid values for @get_task_info are: 0, 1, or 2', 16, 1);
		RETURN;
	END;

	IF @format_output NOT IN (0, 1, 2)
	BEGIN;
		RAISERROR('Valid values for @format_output are: 0, 1, or 2', 16, 1);
		RETURN;
	END;
	
	IF @help = 1
	BEGIN;
		DECLARE 
			@header VARCHAR(MAX),
			@params VARCHAR(MAX),
			@outputs VARCHAR(MAX);

		SELECT 
			@header =
				REPLACE
				(
					REPLACE
					(
						CONVERT
						(
							VARCHAR(MAX),
							SUBSTRING
							(
								t.text, 
								CHARINDEX('/' + REPLICATE('*', 93), t.text) + 94,
								CHARINDEX(REPLICATE('*', 93) + '/', t.text) - (CHARINDEX('/' + REPLICATE('*', 93), t.text) + 94)
							)
						),
						CHAR(13)+CHAR(10),
						CHAR(13)
					),
					'	',
					''
				),
			@params =
				CHAR(13) +
					REPLACE
					(
						REPLACE
						(
							CONVERT
							(
								VARCHAR(MAX),
								SUBSTRING
								(
									t.text, 
									CHARINDEX('--~', t.text) + 5, 
									CHARINDEX('--~', t.text, CHARINDEX('--~', t.text) + 5) - (CHARINDEX('--~', t.text) + 5)
								)
							),
							CHAR(13)+CHAR(10),
							CHAR(13)
						),
						'	',
						''
					),
				@outputs = 
					CHAR(13) +
						REPLACE
						(
							REPLACE
							(
								REPLACE
								(
									CONVERT
									(
										VARCHAR(MAX),
										SUBSTRING
										(
											t.text, 
											CHARINDEX('OUTPUT COLUMNS'+CHAR(13)+CHAR(10)+'--------------', t.text) + 32,
											CHARINDEX('*/', t.text, CHARINDEX('OUTPUT COLUMNS'+CHAR(13)+CHAR(10)+'--------------', t.text) + 32) - (CHARINDEX('OUTPUT COLUMNS'+CHAR(13)+CHAR(10)+'--------------', t.text) + 32)
										)
									),
									CHAR(9),
									CHAR(255)
								),
								CHAR(13)+CHAR(10),
								CHAR(13)
							),
							'	',
							''
						) +
						CHAR(13)
		FROM sys.dm_exec_requests AS r
		CROSS APPLY sys.dm_exec_sql_text(r.sql_handle) AS t
		WHERE
			r.session_id = @@SPID;

		WITH
		a0 AS
		(SELECT 1 AS n UNION ALL SELECT 1),
		a1 AS
		(SELECT 1 AS n FROM a0 AS a, a0 AS b),
		a2 AS
		(SELECT 1 AS n FROM a1 AS a, a1 AS b),
		a3 AS
		(SELECT 1 AS n FROM a2 AS a, a2 AS b),
		a4 AS
		(SELECT 1 AS n FROM a3 AS a, a3 AS b),
		numbers AS
		(
			SELECT TOP(LEN(@header) - 1)
				ROW_NUMBER() OVER
				(
					ORDER BY (SELECT NULL)
				) AS number
			FROM a4
			ORDER BY
				number
		)
		SELECT
			RTRIM(LTRIM(
				SUBSTRING
				(
					@header,
					number + 1,
					CHARINDEX(CHAR(13), @header, number + 1) - number - 1
				)
			)) AS [------header---------------------------------------------------------------------------------------------------------------]
		FROM numbers
		WHERE
			SUBSTRING(@header, number, 1) = CHAR(13);

		WITH
		a0 AS
		(SELECT 1 AS n UNION ALL SELECT 1),
		a1 AS
		(SELECT 1 AS n FROM a0 AS a, a0 AS b),
		a2 AS
		(SELECT 1 AS n FROM a1 AS a, a1 AS b),
		a3 AS
		(SELECT 1 AS n FROM a2 AS a, a2 AS b),
		a4 AS
		(SELECT 1 AS n FROM a3 AS a, a3 AS b),
		numbers AS
		(
			SELECT TOP(LEN(@params) - 1)
				ROW_NUMBER() OVER
				(
					ORDER BY (SELECT NULL)
				) AS number
			FROM a4
			ORDER BY
				number
		),
		tokens AS
		(
			SELECT 
				RTRIM(LTRIM(
					SUBSTRING
					(
						@params,
						number + 1,
						CHARINDEX(CHAR(13), @params, number + 1) - number - 1
					)
				)) AS token,
				number,
				CASE
					WHEN SUBSTRING(@params, number + 1, 1) = CHAR(13) THEN number
					ELSE COALESCE(NULLIF(CHARINDEX(',' + CHAR(13) + CHAR(13), @params, number), 0), LEN(@params)) 
				END AS param_group,
				ROW_NUMBER() OVER
				(
					PARTITION BY
						CHARINDEX(',' + CHAR(13) + CHAR(13), @params, number),
						SUBSTRING(@params, number+1, 1)
					ORDER BY 
						number
				) AS group_order
			FROM numbers
			WHERE
				SUBSTRING(@params, number, 1) = CHAR(13)
		),
		parsed_tokens AS
		(
			SELECT
				MIN
				(
					CASE
						WHEN token LIKE '@%' THEN token
						ELSE NULL
					END
				) AS parameter,
				MIN
				(
					CASE
						WHEN token LIKE '--%' THEN RIGHT(token, LEN(token) - 2)
						ELSE NULL
					END
				) AS description,
				param_group,
				group_order
			FROM tokens
			WHERE
				NOT 
				(
					token = '' 
					AND group_order > 1
				)
			GROUP BY
				param_group,
				group_order
		)
		SELECT
			CASE
				WHEN description IS NULL AND parameter IS NULL THEN '-------------------------------------------------------------------------'
				WHEN param_group = MAX(param_group) OVER() THEN parameter
				ELSE COALESCE(LEFT(parameter, LEN(parameter) - 1), '')
			END AS [------parameter----------------------------------------------------------],
			CASE
				WHEN description IS NULL AND parameter IS NULL THEN '----------------------------------------------------------------------------------------------------------------------'
				ELSE COALESCE(description, '')
			END AS [------description-----------------------------------------------------------------------------------------------------]
		FROM parsed_tokens
		ORDER BY
			param_group, 
			group_order;
		
		WITH
		a0 AS
		(SELECT 1 AS n UNION ALL SELECT 1),
		a1 AS
		(SELECT 1 AS n FROM a0 AS a, a0 AS b),
		a2 AS
		(SELECT 1 AS n FROM a1 AS a, a1 AS b),
		a3 AS
		(SELECT 1 AS n FROM a2 AS a, a2 AS b),
		a4 AS
		(SELECT 1 AS n FROM a3 AS a, a3 AS b),
		numbers AS
		(
			SELECT TOP(LEN(@outputs) - 1)
				ROW_NUMBER() OVER
				(
					ORDER BY (SELECT NULL)
				) AS number
			FROM a4
			ORDER BY
				number
		),
		tokens AS
		(
			SELECT 
				RTRIM(LTRIM(
					SUBSTRING
					(
						@outputs,
						number + 1,
						CASE
							WHEN 
								COALESCE(NULLIF(CHARINDEX(CHAR(13) + 'Formatted', @outputs, number + 1), 0), LEN(@outputs)) < 
								COALESCE(NULLIF(CHARINDEX(CHAR(13) + CHAR(255) COLLATE Latin1_General_Bin2, @outputs, number + 1), 0), LEN(@outputs))
								THEN COALESCE(NULLIF(CHARINDEX(CHAR(13) + 'Formatted', @outputs, number + 1), 0), LEN(@outputs)) - number - 1
							ELSE
								COALESCE(NULLIF(CHARINDEX(CHAR(13) + CHAR(255) COLLATE Latin1_General_Bin2, @outputs, number + 1), 0), LEN(@outputs)) - number - 1
						END
					)
				)) AS token,
				number,
				COALESCE(NULLIF(CHARINDEX(CHAR(13) + 'Formatted', @outputs, number + 1), 0), LEN(@outputs)) AS output_group,
				ROW_NUMBER() OVER
				(
					PARTITION BY 
						COALESCE(NULLIF(CHARINDEX(CHAR(13) + 'Formatted', @outputs, number + 1), 0), LEN(@outputs))
					ORDER BY
						number
				) AS output_group_order
			FROM numbers
			WHERE
				SUBSTRING(@outputs, number, 10) = CHAR(13) + 'Formatted'
				OR SUBSTRING(@outputs, number, 2) = CHAR(13) + CHAR(255) COLLATE Latin1_General_Bin2
		),
		output_tokens AS
		(
			SELECT 
				*,
				CASE output_group_order
					WHEN 2 THEN MAX(CASE output_group_order WHEN 1 THEN token ELSE NULL END) OVER (PARTITION BY output_group)
					ELSE ''
				END COLLATE Latin1_General_Bin2 AS column_info
			FROM tokens
		)
		SELECT
			CASE output_group_order
				WHEN 1 THEN '-----------------------------------'
				WHEN 2 THEN 
					CASE
						WHEN CHARINDEX('Formatted/Non:', column_info) = 1 THEN
							SUBSTRING(column_info, CHARINDEX(CHAR(255) COLLATE Latin1_General_Bin2, column_info)+1, CHARINDEX(']', column_info, CHARINDEX(CHAR(255) COLLATE Latin1_General_Bin2, column_info)+2) - CHARINDEX(CHAR(255) COLLATE Latin1_General_Bin2, column_info))
						ELSE
							SUBSTRING(column_info, CHARINDEX(CHAR(255) COLLATE Latin1_General_Bin2, column_info)+2, CHARINDEX(']', column_info, CHARINDEX(CHAR(255) COLLATE Latin1_General_Bin2, column_info)+2) - CHARINDEX(CHAR(255) COLLATE Latin1_General_Bin2, column_info)-1)
					END
				ELSE ''
			END AS formatted_column_name,
			CASE output_group_order
				WHEN 1 THEN '-----------------------------------'
				WHEN 2 THEN 
					CASE
						WHEN CHARINDEX('Formatted/Non:', column_info) = 1 THEN
							SUBSTRING(column_info, CHARINDEX(']', column_info)+2, LEN(column_info))
						ELSE
							SUBSTRING(column_info, CHARINDEX(']', column_info)+2, CHARINDEX('Non-Formatted:', column_info, CHARINDEX(']', column_info)+2) - CHARINDEX(']', column_info)-3)
					END
				ELSE ''
			END AS formatted_column_type,
			CASE output_group_order
				WHEN 1 THEN '---------------------------------------'
				WHEN 2 THEN 
					CASE
						WHEN CHARINDEX('Formatted/Non:', column_info) = 1 THEN ''
						ELSE
							CASE
								WHEN SUBSTRING(column_info, CHARINDEX(CHAR(255) COLLATE Latin1_General_Bin2, column_info, CHARINDEX('Non-Formatted:', column_info))+1, 1) = '<' THEN
									SUBSTRING(column_info, CHARINDEX(CHAR(255) COLLATE Latin1_General_Bin2, column_info, CHARINDEX('Non-Formatted:', column_info))+1, CHARINDEX('>', column_info, CHARINDEX(CHAR(255) COLLATE Latin1_General_Bin2, column_info, CHARINDEX('Non-Formatted:', column_info))+1) - CHARINDEX(CHAR(255) COLLATE Latin1_General_Bin2, column_info, CHARINDEX('Non-Formatted:', column_info)))
								ELSE
									SUBSTRING(column_info, CHARINDEX(CHAR(255) COLLATE Latin1_General_Bin2, column_info, CHARINDEX('Non-Formatted:', column_info))+1, CHARINDEX(']', column_info, CHARINDEX(CHAR(255) COLLATE Latin1_General_Bin2, column_info, CHARINDEX('Non-Formatted:', column_info))+1) - CHARINDEX(CHAR(255) COLLATE Latin1_General_Bin2, column_info, CHARINDEX('Non-Formatted:', column_info)))
							END
					END
				ELSE ''
			END AS unformatted_column_name,
			CASE output_group_order
				WHEN 1 THEN '---------------------------------------'
				WHEN 2 THEN 
					CASE
						WHEN CHARINDEX('Formatted/Non:', column_info) = 1 THEN ''
						ELSE
							CASE
								WHEN SUBSTRING(column_info, CHARINDEX(CHAR(255) COLLATE Latin1_General_Bin2, column_info, CHARINDEX('Non-Formatted:', column_info))+1, 1) = '<' THEN ''
								ELSE
									SUBSTRING(column_info, CHARINDEX(']', column_info, CHARINDEX('Non-Formatted:', column_info))+2, CHARINDEX('Non-Formatted:', column_info, CHARINDEX(']', column_info)+2) - CHARINDEX(']', column_info)-3)
							END
					END
				ELSE ''
			END AS unformatted_column_type,
			CASE output_group_order
				WHEN 1 THEN '----------------------------------------------------------------------------------------------------------------------'
				ELSE REPLACE(token, CHAR(255) COLLATE Latin1_General_Bin2, '')
			END AS [------description-----------------------------------------------------------------------------------------------------]
		FROM output_tokens
		WHERE
			NOT 
			(
				output_group_order = 1 
				AND output_group = LEN(@outputs)
			)
		ORDER BY
			output_group,
			CASE output_group_order
				WHEN 1 THEN 99
				ELSE output_group_order
			END;

		RETURN;
	END;

	WITH
	a0 AS
	(SELECT 1 AS n UNION ALL SELECT 1),
	a1 AS
	(SELECT 1 AS n FROM a0 AS a, a0 AS b),
	a2 AS
	(SELECT 1 AS n FROM a1 AS a, a1 AS b),
	a3 AS
	(SELECT 1 AS n FROM a2 AS a, a2 AS b),
	a4 AS
	(SELECT 1 AS n FROM a3 AS a, a3 AS b),
	numbers AS
	(
		SELECT TOP(LEN(@output_column_list))
			ROW_NUMBER() OVER
			(
				ORDER BY (SELECT NULL)
			) AS number
		FROM a4
		ORDER BY
			number
	),
	tokens AS
	(
		SELECT 
			'|[' +
				SUBSTRING
				(
					@output_column_list,
					number + 1,
					CHARINDEX(']', @output_column_list, number) - number - 1
				) + '|]' AS token,
			number
		FROM numbers
		WHERE
			SUBSTRING(@output_column_list, number, 1) = '['
	),
	ordered_columns AS
	(
		SELECT
			x.column_name,
			ROW_NUMBER() OVER
			(
				PARTITION BY
					x.column_name
				ORDER BY
					tokens.number,
					x.default_order
			) AS r,
			ROW_NUMBER() OVER
			(
				ORDER BY
					tokens.number,
					x.default_order
			) AS s
		FROM tokens
		JOIN
		(
			SELECT '[session_id]' AS column_name, 1 AS default_order
			UNION ALL
			SELECT '[dd hh:mm:ss.mss]', 2
			WHERE
				@format_output IN (1, 2)
			UNION ALL
			SELECT '[dd hh:mm:ss.mss (avg)]', 3
			WHERE
				@format_output IN (1, 2)
				AND @get_avg_time = 1
			UNION ALL
			SELECT '[avg_elapsed_time]', 4
			WHERE
				@format_output = 0
				AND @get_avg_time = 1
			UNION ALL
			SELECT '[physical_io]', 5
			WHERE
				@get_task_info = 2
			UNION ALL
			SELECT '[reads]', 6
			UNION ALL
			SELECT '[physical_reads]', 7
			UNION ALL
			SELECT '[writes]', 8
			UNION ALL
			SELECT '[tempdb_allocations]', 9
			UNION ALL
			SELECT '[tempdb_current]', 10
			UNION ALL
			SELECT '[CPU]', 11
			UNION ALL
			SELECT '[context_switches]', 12
			WHERE
				@get_task_info = 2
			UNION ALL
			SELECT '[used_memory]', 13
			UNION ALL
			SELECT '[physical_io_delta]', 14
			WHERE
				@delta_interval > 0	
				AND @get_task_info = 2
			UNION ALL
			SELECT '[reads_delta]', 15
			WHERE
				@delta_interval > 0
			UNION ALL
			SELECT '[physical_reads_delta]', 16
			WHERE
				@delta_interval > 0
			UNION ALL
			SELECT '[writes_delta]', 17
			WHERE
				@delta_interval > 0
			UNION ALL
			SELECT '[tempdb_allocations_delta]', 18
			WHERE
				@delta_interval > 0
			UNION ALL
			SELECT '[tempdb_current_delta]', 19
			WHERE
				@delta_interval > 0
			UNION ALL
			SELECT '[CPU_delta]', 20
			WHERE
				@delta_interval > 0
			UNION ALL
			SELECT '[context_switches_delta]', 21
			WHERE
				@delta_interval > 0
				AND @get_task_info = 2
			UNION ALL
			SELECT '[used_memory_delta]', 22
			WHERE
				@delta_interval > 0
			UNION ALL
			SELECT '[tasks]', 23
			WHERE
				@get_task_info = 2
			UNION ALL
			SELECT '[status]', 24
			UNION ALL
			SELECT '[wait_info]', 25
			WHERE
				@get_task_info > 0
				OR @find_block_leaders = 1
			UNION ALL
			SELECT '[locks]', 26
			WHERE
				@get_locks = 1
			UNION ALL
			SELECT '[tran_start_time]', 27
			WHERE
				@get_transaction_info = 1
			UNION ALL
			SELECT '[tran_log_writes]', 28
			WHERE
				@get_transaction_info = 1
			UNION ALL
			SELECT '[open_tran_count]', 29
			UNION ALL
			SELECT '[sql_command]', 30
			WHERE
				@get_outer_command = 1
			UNION ALL
			SELECT '[sql_text]', 31
			UNION ALL
			SELECT '[query_plan]', 32
			WHERE
				@get_plans >= 1
			UNION ALL
			SELECT '[blocking_session_id]', 33
			WHERE
				@get_task_info > 0
				OR @find_block_leaders = 1
			UNION ALL
			SELECT '[blocked_session_count]', 34
			WHERE
				@find_block_leaders = 1
			UNION ALL
			SELECT '[percent_complete]', 35
			UNION ALL
			SELECT '[host_name]', 36
			UNION ALL
			SELECT '[login_name]', 37
			UNION ALL
			SELECT '[database_name]', 38
			UNION ALL
			SELECT '[program_name]', 39
			UNION ALL
			SELECT '[additional_info]', 40
			WHERE
				@get_additional_info = 1
			UNION ALL
			SELECT '[start_time]', 41
			UNION ALL
			SELECT '[login_time]', 42
			UNION ALL
			SELECT '[request_id]', 43
			UNION ALL
			SELECT '[collection_time]', 44
		) AS x ON 
			x.column_name LIKE token ESCAPE '|'
	)
	SELECT
		@output_column_list =
			STUFF
			(
				(
					SELECT
						',' + column_name as [text()]
					FROM ordered_columns
					WHERE
						r = 1
					ORDER BY
						s
					FOR XML
						PATH('')
				),
				1,
				1,
				''
			);
	
	IF COALESCE(RTRIM(@output_column_list), '') = ''
	BEGIN;
		RAISERROR('No valid column matches found in @output_column_list or no columns remain due to selected options.', 16, 1);
		RETURN;
	END;
	
	IF @destination_table <> ''
	BEGIN;
		SET @destination_table = 
			--database
			COALESCE(QUOTENAME(PARSENAME(@destination_table, 3)) + '.', '') +
			--schema
			COALESCE(QUOTENAME(PARSENAME(@destination_table, 2)) + '.', '') +
			--table
			COALESCE(QUOTENAME(PARSENAME(@destination_table, 1)), '');
			
		IF COALESCE(RTRIM(@destination_table), '') = ''
		BEGIN;
			RAISERROR('Destination table not properly formatted.', 16, 1);
			RETURN;
		END;
	END;

	WITH
	a0 AS
	(SELECT 1 AS n UNION ALL SELECT 1),
	a1 AS
	(SELECT 1 AS n FROM a0 AS a, a0 AS b),
	a2 AS
	(SELECT 1 AS n FROM a1 AS a, a1 AS b),
	a3 AS
	(SELECT 1 AS n FROM a2 AS a, a2 AS b),
	a4 AS
	(SELECT 1 AS n FROM a3 AS a, a3 AS b),
	numbers AS
	(
		SELECT TOP(LEN(@sort_order))
			ROW_NUMBER() OVER
			(
				ORDER BY (SELECT NULL)
			) AS number
		FROM a4
		ORDER BY
			number
	),
	tokens AS
	(
		SELECT 
			'|[' +
				SUBSTRING
				(
					@sort_order,
					number + 1,
					CHARINDEX(']', @sort_order, number) - number - 1
				) + '|]' AS token,
			SUBSTRING
			(
				@sort_order,
				CHARINDEX(']', @sort_order, number) + 1,
				COALESCE(NULLIF(CHARINDEX('[', @sort_order, CHARINDEX(']', @sort_order, number)), 0), LEN(@sort_order)) - CHARINDEX(']', @sort_order, number)
			) AS next_chunk,
			number
		FROM numbers
		WHERE
			SUBSTRING(@sort_order, number, 1) = '['
	),
	ordered_columns AS
	(
		SELECT
			x.column_name +
				CASE
					WHEN tokens.next_chunk LIKE '%asc%' THEN ' ASC'
					WHEN tokens.next_chunk LIKE '%desc%' THEN ' DESC'
					ELSE ''
				END AS column_name,
			ROW_NUMBER() OVER
			(
				PARTITION BY
					x.column_name
				ORDER BY
					tokens.number
			) AS r,
			tokens.number
		FROM tokens
		JOIN
		(
			SELECT '[session_id]' AS column_name
			UNION ALL
			SELECT '[physical_io]'
			UNION ALL
			SELECT '[reads]'
			UNION ALL
			SELECT '[physical_reads]'
			UNION ALL
			SELECT '[writes]'
			UNION ALL
			SELECT '[tempdb_allocations]'
			UNION ALL
			SELECT '[tempdb_current]'
			UNION ALL
			SELECT '[CPU]'
			UNION ALL
			SELECT '[context_switches]'
			UNION ALL
			SELECT '[used_memory]'
			UNION ALL
			SELECT '[physical_io_delta]'
			UNION ALL
			SELECT '[reads_delta]'
			UNION ALL
			SELECT '[physical_reads_delta]'
			UNION ALL
			SELECT '[writes_delta]'
			UNION ALL
			SELECT '[tempdb_allocations_delta]'
			UNION ALL
			SELECT '[tempdb_current_delta]'
			UNION ALL
			SELECT '[CPU_delta]'
			UNION ALL
			SELECT '[context_switches_delta]'
			UNION ALL
			SELECT '[used_memory_delta]'
			UNION ALL
			SELECT '[tasks]'
			UNION ALL
			SELECT '[tran_start_time]'
			UNION ALL
			SELECT '[open_tran_count]'
			UNION ALL
			SELECT '[blocking_session_id]'
			UNION ALL
			SELECT '[blocked_session_count]'
			UNION ALL
			SELECT '[percent_complete]'
			UNION ALL
			SELECT '[host_name]'
			UNION ALL
			SELECT '[login_name]'
			UNION ALL
			SELECT '[database_name]'
			UNION ALL
			SELECT '[start_time]'
			UNION ALL
			SELECT '[login_time]'
			UNION ALL
			SELECT '[program_name]'
		) AS x ON 
			x.column_name LIKE token ESCAPE '|'
	)
	SELECT
		@sort_order = COALESCE(z.sort_order, '')
	FROM
	(
		SELECT
			STUFF
			(
				(
					SELECT
						',' + column_name as [text()]
					FROM ordered_columns
					WHERE
						r = 1
					ORDER BY
						number
					FOR XML
						PATH('')
				),
				1,
				1,
				''
			) AS sort_order
	) AS z;

	CREATE TABLE #sessions
	(
		recursion SMALLINT NOT NULL,
		session_id SMALLINT NOT NULL,
		request_id INT NOT NULL,
		session_number INT NOT NULL,
		elapsed_time INT NOT NULL,
		avg_elapsed_time INT NULL,
		physical_io BIGINT NULL,
		reads BIGINT NULL,
		physical_reads BIGINT NULL,
		writes BIGINT NULL,
		tempdb_allocations BIGINT NULL,
		tempdb_current BIGINT NULL,
		CPU INT NULL,
		thread_CPU_snapshot BIGINT NULL,
		context_switches BIGINT NULL,
		used_memory BIGINT NOT NULL, 
		tasks SMALLINT NULL,
		status VARCHAR(30) NOT NULL,
		wait_info NVARCHAR(4000) NULL,
		locks XML NULL,
		transaction_id BIGINT NULL,
		tran_start_time DATETIME NULL,
		tran_log_writes NVARCHAR(4000) NULL,
		open_tran_count SMALLINT NULL,
		sql_command XML NULL,
		sql_handle VARBINARY(64) NULL,
		statement_start_offset INT NULL,
		statement_end_offset INT NULL,
		sql_text XML NULL,
		plan_handle VARBINARY(64) NULL,
		query_plan XML NULL,
		blocking_session_id SMALLINT NULL,
		blocked_session_count SMALLINT NULL,
		percent_complete REAL NULL,
		host_name sysname NULL,
		login_name sysname NOT NULL,
		database_name sysname NULL,
		program_name sysname NULL,
		additional_info XML NULL,
		start_time DATETIME NOT NULL,
		login_time DATETIME NULL,
		last_request_start_time DATETIME NULL,
		PRIMARY KEY CLUSTERED (session_id, request_id, recursion) WITH (IGNORE_DUP_KEY = ON),
		UNIQUE NONCLUSTERED (transaction_id, session_id, request_id, recursion) WITH (IGNORE_DUP_KEY = ON)
	);

	IF @return_schema = 0
	BEGIN;
		--Disable unnecessary autostats on the table
		CREATE STATISTICS s_session_id ON #sessions (session_id)
		WITH SAMPLE 0 ROWS, NORECOMPUTE;
		CREATE STATISTICS s_request_id ON #sessions (request_id)
		WITH SAMPLE 0 ROWS, NORECOMPUTE;
		CREATE STATISTICS s_transaction_id ON #sessions (transaction_id)
		WITH SAMPLE 0 ROWS, NORECOMPUTE;
		CREATE STATISTICS s_session_number ON #sessions (session_number)
		WITH SAMPLE 0 ROWS, NORECOMPUTE;
		CREATE STATISTICS s_status ON #sessions (status)
		WITH SAMPLE 0 ROWS, NORECOMPUTE;
		CREATE STATISTICS s_start_time ON #sessions (start_time)
		WITH SAMPLE 0 ROWS, NORECOMPUTE;
		CREATE STATISTICS s_last_request_start_time ON #sessions (last_request_start_time)
		WITH SAMPLE 0 ROWS, NORECOMPUTE;
		CREATE STATISTICS s_recursion ON #sessions (recursion)
		WITH SAMPLE 0 ROWS, NORECOMPUTE;

		DECLARE @recursion SMALLINT;
		SET @recursion = 
			CASE @delta_interval
				WHEN 0 THEN 1
				ELSE -1
			END;

		DECLARE @first_collection_ms_ticks BIGINT;
		DECLARE @last_collection_start DATETIME;
		DECLARE @sys_info BIT;
		SET @sys_info = ISNULL(CONVERT(BIT, SIGN(OBJECT_ID('sys.dm_os_sys_info'))), 0);

		--Used for the delta pull
		REDO:;
		
		IF 
			@get_locks = 1 
			AND @recursion = 1
			AND @output_column_list LIKE '%|[locks|]%' ESCAPE '|'
		BEGIN;
			SELECT
				y.resource_type,
				y.database_name,
				y.object_id,
				y.file_id,
				y.page_type,
				y.hobt_id,
				y.allocation_unit_id,
				y.index_id,
				y.schema_id,
				y.principal_id,
				y.request_mode,
				y.request_status,
				y.session_id,
				y.resource_description,
				y.request_count,
				s.request_id,
				s.start_time,
				CONVERT(sysname, NULL) AS object_name,
				CONVERT(sysname, NULL) AS index_name,
				CONVERT(sysname, NULL) AS schema_name,
				CONVERT(sysname, NULL) AS principal_name,
				CONVERT(NVARCHAR(2048), NULL) AS query_error
			INTO #locks
			FROM
			(
				SELECT
					sp.spid AS session_id,
					CASE sp.status
						WHEN 'sleeping' THEN CONVERT(INT, 0)
						ELSE sp.request_id
					END AS request_id,
					CASE sp.status
						WHEN 'sleeping' THEN sp.last_batch
						ELSE COALESCE(req.start_time, sp.last_batch)
					END AS start_time,
					sp.dbid
				FROM sys.sysprocesses AS sp
				OUTER APPLY
				(
					SELECT TOP(1)
						CASE
							WHEN 
							(
								sp.hostprocess > ''
								OR r.total_elapsed_time < 0
							) THEN
								r.start_time
							ELSE
								DATEADD
								(
									ms, 
									1000 * (DATEPART(ms, DATEADD(second, -(r.total_elapsed_time / 1000), GETDATE())) / 500) - DATEPART(ms, DATEADD(second, -(r.total_elapsed_time / 1000), GETDATE())), 
									DATEADD(second, -(r.total_elapsed_time / 1000), GETDATE())
								)
						END AS start_time
					FROM sys.dm_exec_requests AS r
					WHERE
						r.session_id = sp.spid
						AND r.request_id = sp.request_id
				) AS req
				WHERE
					--Process inclusive filter
					1 =
						CASE
							WHEN @filter <> '' THEN
								CASE @filter_type
									WHEN 'session' THEN
										CASE
											WHEN
												CONVERT(SMALLINT, @filter) = 0
												OR sp.spid = CONVERT(SMALLINT, @filter)
													THEN 1
											ELSE 0
										END
									WHEN 'program' THEN
										CASE
											WHEN sp.program_name LIKE @filter THEN 1
											ELSE 0
										END
									WHEN 'login' THEN
										CASE
											WHEN sp.loginame LIKE @filter THEN 1
											ELSE 0
										END
									WHEN 'host' THEN
										CASE
											WHEN sp.hostname LIKE @filter THEN 1
											ELSE 0
										END
									WHEN 'database' THEN
										CASE
											WHEN DB_NAME(sp.dbid) LIKE @filter THEN 1
											ELSE 0
										END
									ELSE 0
								END
							ELSE 1
						END
					--Process exclusive filter
					AND 0 =
						CASE
							WHEN @not_filter <> '' THEN
								CASE @not_filter_type
									WHEN 'session' THEN
										CASE
											WHEN sp.spid = CONVERT(SMALLINT, @not_filter) THEN 1
											ELSE 0
										END
									WHEN 'program' THEN
										CASE
											WHEN sp.program_name LIKE @not_filter THEN 1
											ELSE 0
										END
									WHEN 'login' THEN
										CASE
											WHEN sp.loginame LIKE @not_filter THEN 1
											ELSE 0
										END
									WHEN 'host' THEN
										CASE
											WHEN sp.hostname LIKE @not_filter THEN 1
											ELSE 0
										END
									WHEN 'database' THEN
										CASE
											WHEN DB_NAME(sp.dbid) LIKE @not_filter THEN 1
											ELSE 0
										END
									ELSE 0
								END
							ELSE 0
						END
					AND 
					(
						@show_own_spid = 1
						OR sp.spid <> @@SPID
					)
					AND 
					(
						@show_system_spids = 1
						OR sp.hostprocess > ''
					)
					AND sp.ecid = 0
			) AS s
			INNER HASH JOIN
			(
				SELECT
					x.resource_type,
					x.database_name,
					x.object_id,
					x.file_id,
					CASE
						WHEN x.page_no = 1 OR x.page_no % 8088 = 0 THEN 'PFS'
						WHEN x.page_no = 2 OR x.page_no % 511232 = 0 THEN 'GAM'
						WHEN x.page_no = 3 OR (x.page_no - 1) % 511232 = 0 THEN 'SGAM'
						WHEN x.page_no = 6 OR (x.page_no - 6) % 511232 = 0 THEN 'DCM'
						WHEN x.page_no = 7 OR (x.page_no - 7) % 511232 = 0 THEN 'BCM'
						WHEN x.page_no IS NOT NULL THEN '*'
						ELSE NULL
					END AS page_type,
					x.hobt_id,
					x.allocation_unit_id,
					x.index_id,
					x.schema_id,
					x.principal_id,
					x.request_mode,
					x.request_status,
					x.session_id,
					x.request_id,
					CASE
						WHEN COALESCE(x.object_id, x.file_id, x.hobt_id, x.allocation_unit_id, x.index_id, x.schema_id, x.principal_id) IS NULL THEN NULLIF(resource_description, '')
						ELSE NULL
					END AS resource_description,
					COUNT(*) AS request_count
				FROM
				(
					SELECT
						tl.resource_type +
							CASE
								WHEN tl.resource_subtype = '' THEN ''
								ELSE '.' + tl.resource_subtype
							END AS resource_type,
						COALESCE(DB_NAME(tl.resource_database_id), N'(null)') AS database_name,
						CONVERT
						(
							INT,
							CASE
								WHEN tl.resource_type = 'OBJECT' THEN tl.resource_associated_entity_id
								WHEN tl.resource_description LIKE '%object_id = %' THEN
									(
										SUBSTRING
										(
											tl.resource_description, 
											(CHARINDEX('object_id = ', tl.resource_description) + 12), 
											COALESCE
											(
												NULLIF
												(
													CHARINDEX(',', tl.resource_description, CHARINDEX('object_id = ', tl.resource_description) + 12),
													0
												), 
												DATALENGTH(tl.resource_description)+1
											) - (CHARINDEX('object_id = ', tl.resource_description) + 12)
										)
									)
								ELSE NULL
							END
						) AS object_id,
						CONVERT
						(
							INT,
							CASE 
								WHEN tl.resource_type = 'FILE' THEN CONVERT(INT, tl.resource_description)
								WHEN tl.resource_type IN ('PAGE', 'EXTENT', 'RID') THEN LEFT(tl.resource_description, CHARINDEX(':', tl.resource_description)-1)
								ELSE NULL
							END
						) AS file_id,
						CONVERT
						(
							INT,
							CASE
								WHEN tl.resource_type IN ('PAGE', 'EXTENT', 'RID') THEN 
									SUBSTRING
									(
										tl.resource_description, 
										CHARINDEX(':', tl.resource_description) + 1, 
										COALESCE
										(
											NULLIF
											(
												CHARINDEX(':', tl.resource_description, CHARINDEX(':', tl.resource_description) + 1), 
												0
											), 
											DATALENGTH(tl.resource_description)+1
										) - (CHARINDEX(':', tl.resource_description) + 1)
									)
								ELSE NULL
							END
						) AS page_no,
						CASE
							WHEN tl.resource_type IN ('PAGE', 'KEY', 'RID', 'HOBT') THEN tl.resource_associated_entity_id
							ELSE NULL
						END AS hobt_id,
						CASE
							WHEN tl.resource_type = 'ALLOCATION_UNIT' THEN tl.resource_associated_entity_id
							ELSE NULL
						END AS allocation_unit_id,
						CONVERT
						(
							INT,
							CASE
								WHEN
									/*TODO: Deal with server principals*/ 
									tl.resource_subtype <> 'SERVER_PRINCIPAL' 
									AND tl.resource_description LIKE '%index_id or stats_id = %' THEN
									(
										SUBSTRING
										(
											tl.resource_description, 
											(CHARINDEX('index_id or stats_id = ', tl.resource_description) + 23), 
											COALESCE
											(
												NULLIF
												(
													CHARINDEX(',', tl.resource_description, CHARINDEX('index_id or stats_id = ', tl.resource_description) + 23), 
													0
												), 
												DATALENGTH(tl.resource_description)+1
											) - (CHARINDEX('index_id or stats_id = ', tl.resource_description) + 23)
										)
									)
								ELSE NULL
							END 
						) AS index_id,
						CONVERT
						(
							INT,
							CASE
								WHEN tl.resource_description LIKE '%schema_id = %' THEN
									(
										SUBSTRING
										(
											tl.resource_description, 
											(CHARINDEX('schema_id = ', tl.resource_description) + 12), 
											COALESCE
											(
												NULLIF
												(
													CHARINDEX(',', tl.resource_description, CHARINDEX('schema_id = ', tl.resource_description) + 12), 
													0
												), 
												DATALENGTH(tl.resource_description)+1
											) - (CHARINDEX('schema_id = ', tl.resource_description) + 12)
										)
									)
								ELSE NULL
							END 
						) AS schema_id,
						CONVERT
						(
							INT,
							CASE
								WHEN tl.resource_description LIKE '%principal_id = %' THEN
									(
										SUBSTRING
										(
											tl.resource_description, 
											(CHARINDEX('principal_id = ', tl.resource_description) + 15), 
											COALESCE
											(
												NULLIF
												(
													CHARINDEX(',', tl.resource_description, CHARINDEX('principal_id = ', tl.resource_description) + 15), 
													0
												), 
												DATALENGTH(tl.resource_description)+1
											) - (CHARINDEX('principal_id = ', tl.resource_description) + 15)
										)
									)
								ELSE NULL
							END
						) AS principal_id,
						tl.request_mode,
						tl.request_status,
						tl.request_session_id AS session_id,
						tl.request_request_id AS request_id,

						/*TODO: Applocks, other resource_descriptions*/
						RTRIM(tl.resource_description) AS resource_description,
						tl.resource_associated_entity_id
						/*********************************************/
					FROM 
					(
						SELECT 
							request_session_id,
							CONVERT(VARCHAR(120), resource_type) COLLATE Latin1_General_Bin2 AS resource_type,
							CONVERT(VARCHAR(120), resource_subtype) COLLATE Latin1_General_Bin2 AS resource_subtype,
							resource_database_id,
							CONVERT(VARCHAR(512), resource_description) COLLATE Latin1_General_Bin2 AS resource_description,
							resource_associated_entity_id,
							CONVERT(VARCHAR(120), request_mode) COLLATE Latin1_General_Bin2 AS request_mode,
							CONVERT(VARCHAR(120), request_status) COLLATE Latin1_General_Bin2 AS request_status,
							request_request_id
						FROM sys.dm_tran_locks
					) AS tl
				) AS x
				GROUP BY
					x.resource_type,
					x.database_name,
					x.object_id,
					x.file_id,
					CASE
						WHEN x.page_no = 1 OR x.page_no % 8088 = 0 THEN 'PFS'
						WHEN x.page_no = 2 OR x.page_no % 511232 = 0 THEN 'GAM'
						WHEN x.page_no = 3 OR (x.page_no - 1) % 511232 = 0 THEN 'SGAM'
						WHEN x.page_no = 6 OR (x.page_no - 6) % 511232 = 0 THEN 'DCM'
						WHEN x.page_no = 7 OR (x.page_no - 7) % 511232 = 0 THEN 'BCM'
						WHEN x.page_no IS NOT NULL THEN '*'
						ELSE NULL
					END,
					x.hobt_id,
					x.allocation_unit_id,
					x.index_id,
					x.schema_id,
					x.principal_id,
					x.request_mode,
					x.request_status,
					x.session_id,
					x.request_id,
					CASE
						WHEN COALESCE(x.object_id, x.file_id, x.hobt_id, x.allocation_unit_id, x.index_id, x.schema_id, x.principal_id) IS NULL THEN NULLIF(resource_description, '')
						ELSE NULL
					END
			) AS y ON
				y.session_id = s.session_id
				AND y.request_id = s.request_id
			OPTION (HASH GROUP);

			--Disable unnecessary autostats on the table
			CREATE STATISTICS s_database_name ON #locks (database_name)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_object_id ON #locks (object_id)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_hobt_id ON #locks (hobt_id)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_allocation_unit_id ON #locks (allocation_unit_id)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_index_id ON #locks (index_id)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_schema_id ON #locks (schema_id)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_principal_id ON #locks (principal_id)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_request_id ON #locks (request_id)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_start_time ON #locks (start_time)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_resource_type ON #locks (resource_type)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_object_name ON #locks (object_name)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_schema_name ON #locks (schema_name)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_page_type ON #locks (page_type)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_request_mode ON #locks (request_mode)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_request_status ON #locks (request_status)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_resource_description ON #locks (resource_description)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_index_name ON #locks (index_name)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_principal_name ON #locks (principal_name)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
		END;
		
		DECLARE 
			@sql VARCHAR(MAX), 
			@sql_n NVARCHAR(MAX);

		SET @sql = 
			CONVERT(VARCHAR(MAX), '') +
			'DECLARE @blocker BIT;
			SET @blocker = 0;
			DECLARE @i INT;
			SET @i = 2147483647;

			DECLARE @sessions TABLE
			(
				session_id SMALLINT NOT NULL,
				request_id INT NOT NULL,
				login_time DATETIME,
				last_request_end_time DATETIME,
				status VARCHAR(30),
				statement_start_offset INT,
				statement_end_offset INT,
				sql_handle BINARY(20),
				host_name NVARCHAR(128),
				login_name NVARCHAR(128),
				program_name NVARCHAR(128),
				database_id SMALLINT,
				memory_usage INT,
				open_tran_count SMALLINT, 
				' +
				CASE
					WHEN 
					(
						@get_task_info <> 0 
						OR @find_block_leaders = 1 
					) THEN
						'wait_type NVARCHAR(32),
						wait_resource NVARCHAR(256),
						wait_time BIGINT, 
						'
					ELSE 
						''
				END +
				'blocked SMALLINT,
				is_user_process BIT,
				cmd VARCHAR(32),
				PRIMARY KEY CLUSTERED (session_id, request_id) WITH (IGNORE_DUP_KEY = ON)
			);

			DECLARE @blockers TABLE
			(
				session_id INT NOT NULL PRIMARY KEY WITH (IGNORE_DUP_KEY = ON)
			);

			BLOCKERS:;

			INSERT @sessions
			(
				session_id,
				request_id,
				login_time,
				last_request_end_time,
				status,
				statement_start_offset,
				statement_end_offset,
				sql_handle,
				host_name,
				login_name,
				program_name,
				database_id,
				memory_usage,
				open_tran_count, 
				' +
				CASE
					WHEN 
					(
						@get_task_info <> 0
						OR @find_block_leaders = 1 
					) THEN
						'wait_type,
						wait_resource,
						wait_time, 
						'
					ELSE
						''
				END +
				'blocked,
				is_user_process,
				cmd 
			)
			SELECT TOP(@i)
				spy.session_id,
				spy.request_id,
				spy.login_time,
				spy.last_request_end_time,
				spy.status,
				spy.statement_start_offset,
				spy.statement_end_offset,
				spy.sql_handle,
				spy.host_name,
				spy.login_name,
				spy.program_name,
				spy.database_id,
				spy.memory_usage,
				spy.open_tran_count,
				' +
				CASE
					WHEN 
					(
						@get_task_info <> 0  
						OR @find_block_leaders = 1 
					) THEN
						'spy.wait_type,
						CASE
							WHEN
								spy.wait_type LIKE N''PAGE%LATCH_%''
								OR spy.wait_type = N''CXPACKET''
								OR spy.wait_type LIKE N''LATCH[_]%''
								OR spy.wait_type = N''OLEDB'' THEN
									spy.wait_resource
							ELSE
								NULL
						END AS wait_resource,
						spy.wait_time, 
						'
					ELSE
						''
				END +
				'spy.blocked,
				spy.is_user_process,
				spy.cmd
			FROM
			(
				SELECT TOP(@i)
					spx.*, 
					' +
					CASE
						WHEN 
						(
							@get_task_info <> 0 
							OR @find_block_leaders = 1 
						) THEN
							'ROW_NUMBER() OVER
							(
								PARTITION BY
									spx.session_id,
									spx.request_id
								ORDER BY
									CASE
										WHEN spx.wait_type LIKE N''LCK[_]%'' THEN 
											1
										ELSE
											99
									END,
									spx.wait_time DESC,
									spx.blocked DESC
							) AS r 
							'
						ELSE 
							'1 AS r 
							'
					END +
				'FROM
				(
					SELECT TOP(@i)
						sp0.session_id,
						sp0.request_id,
						sp0.login_time,
						sp0.last_request_end_time,
						LOWER(sp0.status) AS status,
						CASE
							WHEN sp0.cmd = ''CREATE INDEX'' THEN
								0
							ELSE
								sp0.stmt_start
						END AS statement_start_offset,
						CASE
							WHEN sp0.cmd = N''CREATE INDEX'' THEN
								-1
							ELSE
								COALESCE(NULLIF(sp0.stmt_end, 0), -1)
						END AS statement_end_offset,
						sp0.sql_handle,
						sp0.host_name,
						sp0.login_name,
						sp0.program_name,
						sp0.database_id,
						sp0.memory_usage,
						sp0.open_tran_count, 
						' +
						CASE
							WHEN 
							(
								@get_task_info <> 0 
								OR @find_block_leaders = 1 
							) THEN
								'CASE
									WHEN sp0.wait_time > 0 AND sp0.wait_type <> N''CXPACKET'' THEN
										sp0.wait_type
									ELSE
										NULL
								END AS wait_type,
								CASE
									WHEN sp0.wait_time > 0 AND sp0.wait_type <> N''CXPACKET'' THEN 
										sp0.wait_resource
									ELSE
										NULL
								END AS wait_resource,
								CASE
									WHEN sp0.wait_type <> N''CXPACKET'' THEN
										sp0.wait_time
									ELSE
										0
								END AS wait_time, 
								'
							ELSE
								''
						END +
						'sp0.blocked,
						sp0.is_user_process,
						sp0.cmd
					FROM
					(
						SELECT TOP(@i)
							sp1.session_id,
							sp1.request_id,
							sp1.login_time,
							sp1.last_request_end_time,
							sp1.status,
							sp1.cmd,
							sp1.stmt_start,
							sp1.stmt_end,
							MAX(NULLIF(sp1.sql_handle, 0x00)) OVER (PARTITION BY sp1.session_id, sp1.request_id) AS sql_handle,
							sp1.host_name,
							MAX(sp1.login_name) OVER (PARTITION BY sp1.session_id, sp1.request_id) AS login_name,
							sp1.program_name,
							sp1.database_id,
							MAX(sp1.memory_usage)  OVER (PARTITION BY sp1.session_id, sp1.request_id) AS memory_usage,
							MAX(sp1.open_tran_count)  OVER (PARTITION BY sp1.session_id, sp1.request_id) AS open_tran_count,
							sp1.wait_type,
							sp1.wait_resource,
							sp1.wait_time,
							sp1.blocked,
							sp1.hostprocess,
							sp1.is_user_process
						FROM
						(
							SELECT TOP(@i)
								sp2.spid AS session_id,
								CASE sp2.status
									WHEN ''sleeping'' THEN
										CONVERT(INT, 0)
									ELSE
										sp2.request_id
								END AS request_id,
								MAX(sp2.login_time) AS login_time,
								MAX(sp2.last_batch) AS last_request_end_time,
								MAX(CONVERT(VARCHAR(30), RTRIM(sp2.status)) COLLATE Latin1_General_Bin2) AS status,
								MAX(CONVERT(VARCHAR(32), RTRIM(sp2.cmd)) COLLATE Latin1_General_Bin2) AS cmd,
								MAX(sp2.stmt_start) AS stmt_start,
								MAX(sp2.stmt_end) AS stmt_end,
								MAX(sp2.sql_handle) AS sql_handle,
								MAX(CONVERT(sysname, RTRIM(sp2.hostname)) COLLATE SQL_Latin1_General_CP1_CI_AS) AS host_name,
								MAX(CONVERT(sysname, RTRIM(sp2.loginame)) COLLATE SQL_Latin1_General_CP1_CI_AS) AS login_name,
								MAX
								(
									CASE
										WHEN blk.queue_id IS NOT NULL THEN
											N''Service Broker
												database_id: '' + CONVERT(NVARCHAR, blk.database_id) +
												N'' queue_id: '' + CONVERT(NVARCHAR, blk.queue_id)
										ELSE
											CONVERT
											(
												sysname,
												RTRIM(sp2.program_name)
											)
									END COLLATE SQL_Latin1_General_CP1_CI_AS
								) AS program_name,
								MAX(sp2.dbid) AS database_id,
								MAX(sp2.memusage) AS memory_usage,
								MAX(sp2.open_tran) AS open_tran_count,
								RTRIM(sp2.lastwaittype) AS wait_type,
								RTRIM(sp2.waitresource) AS wait_resource,
								MAX(sp2.waittime) AS wait_time,
								COALESCE(NULLIF(sp2.blocked, sp2.spid), 0) AS blocked,
								MAX
								(
									CASE
										WHEN blk.session_id = sp2.spid THEN
											''blocker''
										ELSE
											RTRIM(sp2.hostprocess)
									END
								) AS hostprocess,
								CONVERT
								(
									BIT,
									MAX
									(
										CASE
											WHEN sp2.hostprocess > '''' THEN
												1
											ELSE
												0
										END
									)
								) AS is_user_process
							FROM
							(
								SELECT TOP(@i)
									session_id,
									CONVERT(INT, NULL) AS queue_id,
									CONVERT(INT, NULL) AS database_id
								FROM @blockers

								UNION ALL

								SELECT TOP(@i)
									CONVERT(SMALLINT, 0),
									CONVERT(INT, NULL) AS queue_id,
									CONVERT(INT, NULL) AS database_id
								WHERE
									@blocker = 0

								UNION ALL

								SELECT TOP(@i)
									CONVERT(SMALLINT, spid),
									queue_id,
									database_id
								FROM sys.dm_broker_activated_tasks
								WHERE
									@blocker = 0
							) AS blk
							INNER JOIN sys.sysprocesses AS sp2 ON
								sp2.spid = blk.session_id
								OR
								(
									blk.session_id = 0
									AND @blocker = 0
								)
							' +
							CASE 
								WHEN 
								(
									@get_task_info = 0 
									AND @find_block_leaders = 0
								) THEN
									'WHERE
										sp2.ecid = 0 
									' 
								ELSE
									''
							END +
							'GROUP BY
								sp2.spid,
								CASE sp2.status
									WHEN ''sleeping'' THEN
										CONVERT(INT, 0)
									ELSE
										sp2.request_id
								END,
								RTRIM(sp2.lastwaittype),
								RTRIM(sp2.waitresource),
								COALESCE(NULLIF(sp2.blocked, sp2.spid), 0)
						) AS sp1
					) AS sp0
					WHERE
						@blocker = 1
						OR
						(1=1 
						' +
							--inclusive filter
							CASE
								WHEN @filter <> '' THEN
									CASE @filter_type
										WHEN 'session' THEN
											CASE
												WHEN CONVERT(SMALLINT, @filter) <> 0 THEN
													'AND sp0.session_id = CONVERT(SMALLINT, @filter) 
													'
												ELSE
													''
											END
										WHEN 'program' THEN
											'AND sp0.program_name LIKE @filter 
											'
										WHEN 'login' THEN
											'AND sp0.login_name LIKE @filter 
											'
										WHEN 'host' THEN
											'AND sp0.host_name LIKE @filter 
											'
										WHEN 'database' THEN
											'AND DB_NAME(sp0.database_id) LIKE @filter 
											'
										ELSE
											''
									END
								ELSE
									''
							END +
							--exclusive filter
							CASE
								WHEN @not_filter <> '' THEN
									CASE @not_filter_type
										WHEN 'session' THEN
											CASE
												WHEN CONVERT(SMALLINT, @not_filter) <> 0 THEN
													'AND sp0.session_id <> CONVERT(SMALLINT, @not_filter) 
													'
												ELSE
													''
											END
										WHEN 'program' THEN
											'AND sp0.program_name NOT LIKE @not_filter 
											'
										WHEN 'login' THEN
											'AND sp0.login_name NOT LIKE @not_filter 
											'
										WHEN 'host' THEN
											'AND sp0.host_name NOT LIKE @not_filter 
											'
										WHEN 'database' THEN
											'AND DB_NAME(sp0.database_id) NOT LIKE @not_filter 
											'
										ELSE
											''
									END
								ELSE
									''
							END +
							CASE @show_own_spid
								WHEN 1 THEN
									''
								ELSE
									'AND sp0.session_id <> @@spid 
									'
							END +
							CASE 
								WHEN @show_system_spids = 0 THEN
									'AND sp0.hostprocess > '''' 
									' 
								ELSE
									''
							END +
							CASE @show_sleeping_spids
								WHEN 0 THEN
									'AND sp0.status <> ''sleeping'' 
									'
								WHEN 1 THEN
									'AND
									(
										sp0.status <> ''sleeping''
										OR sp0.open_tran_count > 0
									)
									'
								ELSE
									''
							END +
						')
				) AS spx
			) AS spy
			WHERE
				spy.r = 1; 
			' + 
			CASE @recursion
				WHEN 1 THEN 
					'IF @@ROWCOUNT > 0
					BEGIN;
						INSERT @blockers
						(
							session_id
						)
						SELECT TOP(@i)
							blocked
						FROM @sessions
						WHERE
							NULLIF(blocked, 0) IS NOT NULL

						EXCEPT

						SELECT TOP(@i)
							session_id
						FROM @sessions; 
						' +

						CASE
							WHEN
							(
								@get_task_info > 0
								OR @find_block_leaders = 1
							) THEN
								'IF @@ROWCOUNT > 0
								BEGIN;
									SET @blocker = 1;
									GOTO BLOCKERS;
								END; 
								'
							ELSE 
								''
						END +
					'END; 
					'
				ELSE 
					''
			END +
			'SELECT TOP(@i)
				@recursion AS recursion,
				x.session_id,
				x.request_id,
				DENSE_RANK() OVER
				(
					ORDER BY
						x.session_id
				) AS session_number,
				' +
				CASE
					WHEN @output_column_list LIKE '%|[dd hh:mm:ss.mss|]%' ESCAPE '|' THEN 
						'x.elapsed_time '
					ELSE 
						'0 '
				END + 
					'AS elapsed_time, 
					' +
				CASE
					WHEN
						(
							@output_column_list LIKE '%|[dd hh:mm:ss.mss (avg)|]%' ESCAPE '|' OR 
							@output_column_list LIKE '%|[avg_elapsed_time|]%' ESCAPE '|'
						)
						AND @recursion = 1
							THEN 
								'x.avg_elapsed_time / 1000 '
					ELSE 
						'NULL '
				END + 
					'AS avg_elapsed_time, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[physical_io|]%' ESCAPE '|'
						OR @output_column_list LIKE '%|[physical_io_delta|]%' ESCAPE '|'
							THEN 
								'x.physical_io '
					ELSE 
						'NULL '
				END + 
					'AS physical_io, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[reads|]%' ESCAPE '|'
						OR @output_column_list LIKE '%|[reads_delta|]%' ESCAPE '|'
							THEN 
								'x.reads '
					ELSE 
						'0 '
				END + 
					'AS reads, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[physical_reads|]%' ESCAPE '|'
						OR @output_column_list LIKE '%|[physical_reads_delta|]%' ESCAPE '|'
							THEN 
								'x.physical_reads '
					ELSE 
						'0 '
				END + 
					'AS physical_reads, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[writes|]%' ESCAPE '|'
						OR @output_column_list LIKE '%|[writes_delta|]%' ESCAPE '|'
							THEN 
								'x.writes '
					ELSE 
						'0 '
				END + 
					'AS writes, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[tempdb_allocations|]%' ESCAPE '|'
						OR @output_column_list LIKE '%|[tempdb_allocations_delta|]%' ESCAPE '|'
							THEN 
								'x.tempdb_allocations '
					ELSE 
						'0 '
				END + 
					'AS tempdb_allocations, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[tempdb_current|]%' ESCAPE '|'
						OR @output_column_list LIKE '%|[tempdb_current_delta|]%' ESCAPE '|'
							THEN 
								'x.tempdb_current '
					ELSE 
						'0 '
				END + 
					'AS tempdb_current, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[CPU|]%' ESCAPE '|'
						OR @output_column_list LIKE '%|[CPU_delta|]%' ESCAPE '|'
							THEN
								'x.CPU '
					ELSE
						'0 '
				END + 
					'AS CPU, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[CPU_delta|]%' ESCAPE '|'
						AND @get_task_info = 2
						AND @sys_info = 1
							THEN 
								'x.thread_CPU_snapshot '
					ELSE 
						'0 '
				END + 
					'AS thread_CPU_snapshot, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[context_switches|]%' ESCAPE '|'
						OR @output_column_list LIKE '%|[context_switches_delta|]%' ESCAPE '|'
							THEN 
								'x.context_switches '
					ELSE 
						'NULL '
				END + 
					'AS context_switches, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[used_memory|]%' ESCAPE '|'
						OR @output_column_list LIKE '%|[used_memory_delta|]%' ESCAPE '|'
							THEN 
								'x.used_memory '
					ELSE 
						'0 '
				END + 
					'AS used_memory, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[tasks|]%' ESCAPE '|'
						AND @recursion = 1
							THEN 
								'x.tasks '
					ELSE 
						'NULL '
				END + 
					'AS tasks, 
					' +
				CASE
					WHEN 
						(
							@output_column_list LIKE '%|[status|]%' ESCAPE '|' 
							OR @output_column_list LIKE '%|[sql_command|]%' ESCAPE '|'
						)
						AND @recursion = 1
							THEN 
								'x.status '
					ELSE 
						''''' '
				END + 
					'AS status, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[wait_info|]%' ESCAPE '|' 
						AND @recursion = 1
							THEN 
								CASE @get_task_info
									WHEN 2 THEN
										'COALESCE(x.task_wait_info, x.sys_wait_info) '
									ELSE
										'x.sys_wait_info '
								END
					ELSE 
						'NULL '
				END + 
					'AS wait_info, 
					' +
				CASE
					WHEN 
						(
							@output_column_list LIKE '%|[tran_start_time|]%' ESCAPE '|' 
							OR @output_column_list LIKE '%|[tran_log_writes|]%' ESCAPE '|' 
						)
						AND @recursion = 1
							THEN 
								'x.transaction_id '
					ELSE 
						'NULL '
				END + 
					'AS transaction_id, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[open_tran_count|]%' ESCAPE '|' 
						AND @recursion = 1
							THEN 
								'x.open_tran_count '
					ELSE 
						'NULL '
				END + 
					'AS open_tran_count, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[sql_text|]%' ESCAPE '|' 
						AND @recursion = 1
							THEN 
								'x.sql_handle '
					ELSE 
						'NULL '
				END + 
					'AS sql_handle, 
					' +
				CASE
					WHEN 
						(
							@output_column_list LIKE '%|[sql_text|]%' ESCAPE '|' 
							OR @output_column_list LIKE '%|[query_plan|]%' ESCAPE '|' 
						)
						AND @recursion = 1
							THEN 
								'x.statement_start_offset '
					ELSE 
						'NULL '
				END + 
					'AS statement_start_offset, 
					' +
				CASE
					WHEN 
						(
							@output_column_list LIKE '%|[sql_text|]%' ESCAPE '|' 
							OR @output_column_list LIKE '%|[query_plan|]%' ESCAPE '|' 
						)
						AND @recursion = 1
							THEN 
								'x.statement_end_offset '
					ELSE 
						'NULL '
				END + 
					'AS statement_end_offset, 
					' +
				'NULL AS sql_text, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[query_plan|]%' ESCAPE '|' 
						AND @recursion = 1
							THEN 
								'x.plan_handle '
					ELSE 
						'NULL '
				END + 
					'AS plan_handle, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[blocking_session_id|]%' ESCAPE '|' 
						AND @recursion = 1
							THEN 
								'NULLIF(x.blocking_session_id, 0) '
					ELSE 
						'NULL '
				END + 
					'AS blocking_session_id, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[percent_complete|]%' ESCAPE '|'
						AND @recursion = 1
							THEN 
								'x.percent_complete '
					ELSE 
						'NULL '
				END + 
					'AS percent_complete, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[host_name|]%' ESCAPE '|' 
						AND @recursion = 1
							THEN 
								'x.host_name '
					ELSE 
						''''' '
				END + 
					'AS host_name, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[login_name|]%' ESCAPE '|' 
						AND @recursion = 1
							THEN 
								'x.login_name '
					ELSE 
						''''' '
				END + 
					'AS login_name, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[database_name|]%' ESCAPE '|' 
						AND @recursion = 1
							THEN 
								'DB_NAME(x.database_id) '
					ELSE 
						'NULL '
				END + 
					'AS database_name, 
					' +
				CASE
					WHEN 
						@output_column_list LIKE '%|[program_name|]%' ESCAPE '|' 
						AND @recursion = 1
							THEN 
								'x.program_name '
					ELSE 
						''''' '
				END + 
					'AS program_name, 
					' +
				CASE
					WHEN
						@output_column_list LIKE '%|[additional_info|]%' ESCAPE '|'
						AND @recursion = 1
							THEN
								'(
									SELECT TOP(@i)
										x.text_size,
										x.language,
										x.date_format,
										x.date_first,
										CASE x.quoted_identifier
											WHEN 0 THEN ''OFF''
											WHEN 1 THEN ''ON''
										END AS quoted_identifier,
										CASE x.arithabort
											WHEN 0 THEN ''OFF''
											WHEN 1 THEN ''ON''
										END AS arithabort,
										CASE x.ansi_null_dflt_on
											WHEN 0 THEN ''OFF''
											WHEN 1 THEN ''ON''
										END AS ansi_null_dflt_on,
										CASE x.ansi_defaults
											WHEN 0 THEN ''OFF''
											WHEN 1 THEN ''ON''
										END AS ansi_defaults,
										CASE x.ansi_warnings
											WHEN 0 THEN ''OFF''
											WHEN 1 THEN ''ON''
										END AS ansi_warnings,
										CASE x.ansi_padding
											WHEN 0 THEN ''OFF''
											WHEN 1 THEN ''ON''
										END AS ansi_padding,
										CASE ansi_nulls
											WHEN 0 THEN ''OFF''
											WHEN 1 THEN ''ON''
										END AS ansi_nulls,
										CASE x.concat_null_yields_null
											WHEN 0 THEN ''OFF''
											WHEN 1 THEN ''ON''
										END AS concat_null_yields_null,
										CASE x.transaction_isolation_level
											WHEN 0 THEN ''Unspecified''
											WHEN 1 THEN ''ReadUncomitted''
											WHEN 2 THEN ''ReadCommitted''
											WHEN 3 THEN ''Repeatable''
											WHEN 4 THEN ''Serializable''
											WHEN 5 THEN ''Snapshot''
										END AS transaction_isolation_level,
										x.lock_timeout,
										x.deadlock_priority,
										x.row_count,
										x.command_type, 
										' +
										CASE
											WHEN OBJECT_ID('master.dbo.fn_varbintohexstr') IS NOT NULL THEN
												'master.dbo.fn_varbintohexstr(x.sql_handle) AS sql_handle,
												master.dbo.fn_varbintohexstr(x.plan_handle) AS plan_handle,'
											ELSE
												'CONVERT(VARCHAR(256), x.sql_handle, 1) AS sql_handle,
												CONVERT(VARCHAR(256), x.plan_handle, 1) AS plan_handle,'
										END +
										'
										x.statement_start_offset,
										x.statement_end_offset,
										' +
										CASE
											WHEN @output_column_list LIKE '%|[program_name|]%' ESCAPE '|' THEN
												'(
													SELECT TOP(1)
														CONVERT(uniqueidentifier, CONVERT(XML, '''').value(''xs:hexBinary( substring(sql:column("agent_info.job_id_string"), 0) )'', ''binary(16)'')) AS job_id,
														agent_info.step_id,
														(
															SELECT TOP(1)
																NULL
															FOR XML
																PATH(''job_name''),
																TYPE
														),
														(
															SELECT TOP(1)
																NULL
															FOR XML
																PATH(''step_name''),
																TYPE
														)
													FROM
													(
														SELECT TOP(1)
															SUBSTRING(x.program_name, CHARINDEX(''0x'', x.program_name) + 2, 32) AS job_id_string,
															SUBSTRING(x.program_name, CHARINDEX('': Step '', x.program_name) + 7, CHARINDEX('')'', x.program_name, CHARINDEX('': Step '', x.program_name)) - (CHARINDEX('': Step '', x.program_name) + 7)) AS step_id
														WHERE
															x.program_name LIKE N''SQLAgent - TSQL JobStep (Job 0x%''
													) AS agent_info
													FOR XML
														PATH(''agent_job_info''),
														TYPE
												),
												'
											ELSE ''
										END +
										CASE
											WHEN @get_task_info = 2 THEN
												'CONVERT(XML, x.block_info) AS block_info, 
												'
											ELSE
												''
										END + '
										x.host_process_id,
										x.group_id
									FOR XML
										PATH(''additional_info''),
										TYPE
								) '
					ELSE
						'NULL '
				END + 
					'AS additional_info, 
				x.start_time, 
					' +
				CASE
					WHEN
						@output_column_list LIKE '%|[login_time|]%' ESCAPE '|'
						AND @recursion = 1
							THEN
								'x.login_time '
					ELSE 
						'NULL '
				END + 
					'AS login_time, 
				x.last_request_start_time
			FROM
			(
				SELECT TOP(@i)
					y.*,
					CASE
						WHEN DATEDIFF(hour, y.start_time, GETDATE()) > 576 THEN
							DATEDIFF(second, GETDATE(), y.start_time)
						ELSE DATEDIFF(ms, y.start_time, GETDATE())
					END AS elapsed_time,
					COALESCE(tempdb_info.tempdb_allocations, 0) AS tempdb_allocations,
					COALESCE
					(
						CASE
							WHEN tempdb_info.tempdb_current < 0 THEN 0
							ELSE tempdb_info.tempdb_current
						END,
						0
					) AS tempdb_current, 
					' +
					CASE
						WHEN 
							(
								@get_task_info <> 0
								OR @find_block_leaders = 1
							) THEN
								'N''('' + CONVERT(NVARCHAR, y.wait_duration_ms) + N''ms)'' +
									y.wait_type +
										CASE
											WHEN y.wait_type LIKE N''PAGE%LATCH_%'' THEN
												N'':'' +
												COALESCE(DB_NAME(CONVERT(INT, LEFT(y.resource_description, CHARINDEX(N'':'', y.resource_description) - 1))), N''(null)'') +
												N'':'' +
												SUBSTRING(y.resource_description, CHARINDEX(N'':'', y.resource_description) + 1, LEN(y.resource_description) - CHARINDEX(N'':'', REVERSE(y.resource_description)) - CHARINDEX(N'':'', y.resource_description)) +
												N''('' +
													CASE
														WHEN
															CONVERT(INT, RIGHT(y.resource_description, CHARINDEX(N'':'', REVERSE(y.resource_description)) - 1)) = 1 OR
															CONVERT(INT, RIGHT(y.resource_description, CHARINDEX(N'':'', REVERSE(y.resource_description)) - 1)) % 8088 = 0
																THEN 
																	N''PFS''
														WHEN
															CONVERT(INT, RIGHT(y.resource_description, CHARINDEX(N'':'', REVERSE(y.resource_description)) - 1)) = 2 OR
															CONVERT(INT, RIGHT(y.resource_description, CHARINDEX(N'':'', REVERSE(y.resource_description)) - 1)) % 511232 = 0
																THEN 
																	N''GAM''
														WHEN
															CONVERT(INT, RIGHT(y.resource_description, CHARINDEX(N'':'', REVERSE(y.resource_description)) - 1)) = 3 OR
															(CONVERT(INT, RIGHT(y.resource_description, CHARINDEX(N'':'', REVERSE(y.resource_description)) - 1)) - 1) % 511232 = 0
																THEN
																	N''SGAM''
														WHEN
															CONVERT(INT, RIGHT(y.resource_description, CHARINDEX(N'':'', REVERSE(y.resource_description)) - 1)) = 6 OR
															(CONVERT(INT, RIGHT(y.resource_description, CHARINDEX(N'':'', REVERSE(y.resource_description)) - 1)) - 6) % 511232 = 0 
																THEN 
																	N''DCM''
														WHEN
															CONVERT(INT, RIGHT(y.resource_description, CHARINDEX(N'':'', REVERSE(y.resource_description)) - 1)) = 7 OR
															(CONVERT(INT, RIGHT(y.resource_description, CHARINDEX(N'':'', REVERSE(y.resource_description)) - 1)) - 7) % 511232 = 0 
																THEN 
																	N''BCM''
														ELSE 
															N''*''
													END +
												N'')''
											WHEN y.wait_type = N''CXPACKET'' THEN
												N'':'' + SUBSTRING(y.resource_description, CHARINDEX(N''nodeId'', y.resource_description) + 7, 4)
											WHEN y.wait_type LIKE N''LATCH[_]%'' THEN
												N'' ['' + LEFT(y.resource_description, COALESCE(NULLIF(CHARINDEX(N'' '', y.resource_description), 0), LEN(y.resource_description) + 1) - 1) + N'']''
											WHEN
												y.wait_type = N''OLEDB''
												AND y.resource_description LIKE N''%(SPID=%)'' THEN
													N''['' + LEFT(y.resource_description, CHARINDEX(N''(SPID='', y.resource_description) - 2) +
														N'':'' + SUBSTRING(y.resource_description, CHARINDEX(N''(SPID='', y.resource_description) + 6, CHARINDEX(N'')'', y.resource_description, (CHARINDEX(N''(SPID='', y.resource_description) + 6)) - (CHARINDEX(N''(SPID='', y.resource_description) + 6)) + '']''
											ELSE
												N''''
										END COLLATE Latin1_General_Bin2 AS sys_wait_info, 
										'
							ELSE
								''
						END +
						CASE
							WHEN @get_task_info = 2 THEN
								'tasks.physical_io,
								tasks.context_switches,
								tasks.tasks,
								tasks.block_info,
								tasks.wait_info AS task_wait_info,
								tasks.thread_CPU_snapshot,
								'
							ELSE
								'' 
					END +
					CASE 
						WHEN NOT (@get_avg_time = 1 AND @recursion = 1) THEN
							'CONVERT(INT, NULL) '
						ELSE 
							'qs.total_elapsed_time / qs.execution_count '
					END + 
						'AS avg_elapsed_time 
				FROM
				(
					SELECT TOP(@i)
						sp.session_id,
						sp.request_id,
						COALESCE(r.logical_reads, s.logical_reads) AS reads,
						COALESCE(r.reads, s.reads) AS physical_reads,
						COALESCE(r.writes, s.writes) AS writes,
						COALESCE(r.CPU_time, s.CPU_time) AS CPU,
						sp.memory_usage + COALESCE(r.granted_query_memory, 0) AS used_memory,
						LOWER(sp.status) AS status,
						COALESCE(r.sql_handle, sp.sql_handle) AS sql_handle,
						COALESCE(r.statement_start_offset, sp.statement_start_offset) AS statement_start_offset,
						COALESCE(r.statement_end_offset, sp.statement_end_offset) AS statement_end_offset,
						' +
						CASE
							WHEN 
							(
								@get_task_info <> 0
								OR @find_block_leaders = 1 
							) THEN
								'sp.wait_type COLLATE Latin1_General_Bin2 AS wait_type,
								sp.wait_resource COLLATE Latin1_General_Bin2 AS resource_description,
								sp.wait_time AS wait_duration_ms, 
								'
							ELSE
								''
						END +
						'NULLIF(sp.blocked, 0) AS blocking_session_id,
						r.plan_handle,
						NULLIF(r.percent_complete, 0) AS percent_complete,
						sp.host_name,
						sp.login_name,
						sp.program_name,
						s.host_process_id,
						COALESCE(r.text_size, s.text_size) AS text_size,
						COALESCE(r.language, s.language) AS language,
						COALESCE(r.date_format, s.date_format) AS date_format,
						COALESCE(r.date_first, s.date_first) AS date_first,
						COALESCE(r.quoted_identifier, s.quoted_identifier) AS quoted_identifier,
						COALESCE(r.arithabort, s.arithabort) AS arithabort,
						COALESCE(r.ansi_null_dflt_on, s.ansi_null_dflt_on) AS ansi_null_dflt_on,
						COALESCE(r.ansi_defaults, s.ansi_defaults) AS ansi_defaults,
						COALESCE(r.ansi_warnings, s.ansi_warnings) AS ansi_warnings,
						COALESCE(r.ansi_padding, s.ansi_padding) AS ansi_padding,
						COALESCE(r.ansi_nulls, s.ansi_nulls) AS ansi_nulls,
						COALESCE(r.concat_null_yields_null, s.concat_null_yields_null) AS concat_null_yields_null,
						COALESCE(r.transaction_isolation_level, s.transaction_isolation_level) AS transaction_isolation_level,
						COALESCE(r.lock_timeout, s.lock_timeout) AS lock_timeout,
						COALESCE(r.deadlock_priority, s.deadlock_priority) AS deadlock_priority,
						COALESCE(r.row_count, s.row_count) AS row_count,
						COALESCE(r.command, sp.cmd) AS command_type,
						COALESCE
						(
							CASE
								WHEN
								(
									s.is_user_process = 0
									AND r.total_elapsed_time >= 0
								) THEN
									DATEADD
									(
										ms,
										1000 * (DATEPART(ms, DATEADD(second, -(r.total_elapsed_time / 1000), GETDATE())) / 500) - DATEPART(ms, DATEADD(second, -(r.total_elapsed_time / 1000), GETDATE())),
										DATEADD(second, -(r.total_elapsed_time / 1000), GETDATE())
									)
							END,
							NULLIF(COALESCE(r.start_time, sp.last_request_end_time), CONVERT(DATETIME, ''19000101'', 112)),
							sp.login_time
						) AS start_time,
						sp.login_time,
						CASE
							WHEN s.is_user_process = 1 THEN
								s.last_request_start_time
							ELSE
								COALESCE
								(
									DATEADD
									(
										ms,
										1000 * (DATEPART(ms, DATEADD(second, -(r.total_elapsed_time / 1000), GETDATE())) / 500) - DATEPART(ms, DATEADD(second, -(r.total_elapsed_time / 1000), GETDATE())),
										DATEADD(second, -(r.total_elapsed_time / 1000), GETDATE())
									),
									s.last_request_start_time
								)
						END AS last_request_start_time,
						r.transaction_id,
						sp.database_id,
						sp.open_tran_count,
						' +
							CASE
								WHEN EXISTS
								(
									SELECT
										*
									FROM sys.all_columns AS ac
									WHERE
										ac.object_id = OBJECT_ID('sys.dm_exec_sessions')
										AND ac.name = 'group_id'
								)
									THEN 's.group_id'
								ELSE 'CONVERT(INT, NULL) AS group_id'
							END + '
					FROM @sessions AS sp
					LEFT OUTER LOOP JOIN sys.dm_exec_sessions AS s ON
						s.session_id = sp.session_id
						AND s.login_time = sp.login_time
					LEFT OUTER LOOP JOIN sys.dm_exec_requests AS r ON
						sp.status <> ''sleeping''
						AND r.session_id = sp.session_id
						AND r.request_id = sp.request_id
						AND
						(
							(
								s.is_user_process = 0
								AND sp.is_user_process = 0
							)
							OR
							(
								r.start_time = s.last_request_start_time
								AND s.last_request_end_time <= sp.last_request_end_time
							)
						)
				) AS y
				' + 
				CASE 
					WHEN @get_task_info = 2 THEN
						CONVERT(VARCHAR(MAX), '') +
						'LEFT OUTER HASH JOIN
						(
							SELECT TOP(@i)
								task_nodes.task_node.value(''(session_id/text())[1]'', ''SMALLINT'') AS session_id,
								task_nodes.task_node.value(''(request_id/text())[1]'', ''INT'') AS request_id,
								task_nodes.task_node.value(''(physical_io/text())[1]'', ''BIGINT'') AS physical_io,
								task_nodes.task_node.value(''(context_switches/text())[1]'', ''BIGINT'') AS context_switches,
								task_nodes.task_node.value(''(tasks/text())[1]'', ''INT'') AS tasks,
								task_nodes.task_node.value(''(block_info/text())[1]'', ''NVARCHAR(4000)'') AS block_info,
								task_nodes.task_node.value(''(waits/text())[1]'', ''NVARCHAR(4000)'') AS wait_info,
								task_nodes.task_node.value(''(thread_CPU_snapshot/text())[1]'', ''BIGINT'') AS thread_CPU_snapshot
							FROM
							(
								SELECT TOP(@i)
									CONVERT
									(
										XML,
										REPLACE
										(
											CONVERT(NVARCHAR(MAX), tasks_raw.task_xml_raw) COLLATE Latin1_General_Bin2,
											N''</waits></tasks><tasks><waits>'',
											N'', ''
										)
									) AS task_xml
								FROM
								(
									SELECT TOP(@i)
										CASE waits.r
											WHEN 1 THEN
												waits.session_id
											ELSE
												NULL
										END AS [session_id],
										CASE waits.r
											WHEN 1 THEN
												waits.request_id
											ELSE
												NULL
										END AS [request_id],											
										CASE waits.r
											WHEN 1 THEN
												waits.physical_io
											ELSE
												NULL
										END AS [physical_io],
										CASE waits.r
											WHEN 1 THEN
												waits.context_switches
											ELSE
												NULL
										END AS [context_switches],
										CASE waits.r
											WHEN 1 THEN
												waits.thread_CPU_snapshot
											ELSE
												NULL
										END AS [thread_CPU_snapshot],
										CASE waits.r
											WHEN 1 THEN
												waits.tasks
											ELSE
												NULL
										END AS [tasks],
										CASE waits.r
											WHEN 1 THEN
												waits.block_info
											ELSE
												NULL
										END AS [block_info],
										REPLACE
										(
											REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
											REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
											REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
												CONVERT
												(
													NVARCHAR(MAX),
													N''('' +
														CONVERT(NVARCHAR, num_waits) + N''x: '' +
														CASE num_waits
															WHEN 1 THEN
																CONVERT(NVARCHAR, min_wait_time) + N''ms''
															WHEN 2 THEN
																CASE
																	WHEN min_wait_time <> max_wait_time THEN
																		CONVERT(NVARCHAR, min_wait_time) + N''/'' + CONVERT(NVARCHAR, max_wait_time) + N''ms''
																	ELSE
																		CONVERT(NVARCHAR, max_wait_time) + N''ms''
																END
															ELSE
																CASE
																	WHEN min_wait_time <> max_wait_time THEN
																		CONVERT(NVARCHAR, min_wait_time) + N''/'' + CONVERT(NVARCHAR, avg_wait_time) + N''/'' + CONVERT(NVARCHAR, max_wait_time) + N''ms''
																	ELSE 
																		CONVERT(NVARCHAR, max_wait_time) + N''ms''
																END
														END +
													N'')'' + wait_type COLLATE Latin1_General_Bin2
												),
												NCHAR(31),N''?''),NCHAR(30),N''?''),NCHAR(29),N''?''),NCHAR(28),N''?''),NCHAR(27),N''?''),NCHAR(26),N''?''),NCHAR(25),N''?''),NCHAR(24),N''?''),NCHAR(23),N''?''),NCHAR(22),N''?''),
												NCHAR(21),N''?''),NCHAR(20),N''?''),NCHAR(19),N''?''),NCHAR(18),N''?''),NCHAR(17),N''?''),NCHAR(16),N''?''),NCHAR(15),N''?''),NCHAR(14),N''?''),NCHAR(12),N''?''),
												NCHAR(11),N''?''),NCHAR(8),N''?''),NCHAR(7),N''?''),NCHAR(6),N''?''),NCHAR(5),N''?''),NCHAR(4),N''?''),NCHAR(3),N''?''),NCHAR(2),N''?''),NCHAR(1),N''?''),
											NCHAR(0),
											N''''
										) AS [waits]
									FROM
									(
										SELECT TOP(@i)
											w1.*,
											ROW_NUMBER() OVER
											(
												PARTITION BY
													w1.session_id,
													w1.request_id
												ORDER BY
													w1.block_info DESC,
													w1.num_waits DESC,
													w1.wait_type
											) AS r
										FROM
										(
											SELECT TOP(@i)
												task_info.session_id,
												task_info.request_id,
												task_info.physical_io,
												task_info.context_switches,
												task_info.thread_CPU_snapshot,
												task_info.num_tasks AS tasks,
												CASE
													WHEN task_info.runnable_time IS NOT NULL THEN
														''RUNNABLE''
													ELSE
														wt2.wait_type
												END AS wait_type,
												NULLIF(COUNT(COALESCE(task_info.runnable_time, wt2.waiting_task_address)), 0) AS num_waits,
												MIN(COALESCE(task_info.runnable_time, wt2.wait_duration_ms)) AS min_wait_time,
												AVG(COALESCE(task_info.runnable_time, wt2.wait_duration_ms)) AS avg_wait_time,
												MAX(COALESCE(task_info.runnable_time, wt2.wait_duration_ms)) AS max_wait_time,
												MAX(wt2.block_info) AS block_info
											FROM
											(
												SELECT TOP(@i)
													t.session_id,
													t.request_id,
													SUM(CONVERT(BIGINT, t.pending_io_count)) OVER (PARTITION BY t.session_id, t.request_id) AS physical_io,
													SUM(CONVERT(BIGINT, t.context_switches_count)) OVER (PARTITION BY t.session_id, t.request_id) AS context_switches, 
													' +
													CASE
														WHEN 
															@output_column_list LIKE '%|[CPU_delta|]%' ESCAPE '|'
															AND @sys_info = 1
															THEN
																'SUM(tr.usermode_time + tr.kernel_time) OVER (PARTITION BY t.session_id, t.request_id) '
														ELSE
															'CONVERT(BIGINT, NULL) '
													END + 
														' AS thread_CPU_snapshot, 
													COUNT(*) OVER (PARTITION BY t.session_id, t.request_id) AS num_tasks,
													t.task_address,
													t.task_state,
													CASE
														WHEN
															t.task_state = ''RUNNABLE''
															AND w.runnable_time > 0 THEN
																w.runnable_time
														ELSE
															NULL
													END AS runnable_time
												FROM sys.dm_os_tasks AS t
												CROSS APPLY
												(
													SELECT TOP(1)
														sp2.session_id
													FROM @sessions AS sp2
													WHERE
														sp2.session_id = t.session_id
														AND sp2.request_id = t.request_id
														AND sp2.status <> ''sleeping''
												) AS sp20
												LEFT OUTER HASH JOIN
												( 
												' +
													CASE
														WHEN @sys_info = 1 THEN
															'SELECT TOP(@i)
																(
																	SELECT TOP(@i)
																		ms_ticks
																	FROM sys.dm_os_sys_info
																) -
																	w0.wait_resumed_ms_ticks AS runnable_time,
																w0.worker_address,
																w0.thread_address,
																w0.task_bound_ms_ticks
															FROM sys.dm_os_workers AS w0
															WHERE
																w0.state = ''RUNNABLE''
																OR @first_collection_ms_ticks >= w0.task_bound_ms_ticks'
														ELSE
															'SELECT
																CONVERT(BIGINT, NULL) AS runnable_time,
																CONVERT(VARBINARY(8), NULL) AS worker_address,
																CONVERT(VARBINARY(8), NULL) AS thread_address,
																CONVERT(BIGINT, NULL) AS task_bound_ms_ticks
															WHERE
																1 = 0'
														END +
												'
												) AS w ON
													w.worker_address = t.worker_address 
												' +
												CASE
													WHEN
														@output_column_list LIKE '%|[CPU_delta|]%' ESCAPE '|'
														AND @sys_info = 1
														THEN
															'LEFT OUTER HASH JOIN sys.dm_os_threads AS tr ON
																tr.thread_address = w.thread_address
																AND @first_collection_ms_ticks >= w.task_bound_ms_ticks
															'
													ELSE
														''
												END +
											') AS task_info
											LEFT OUTER HASH JOIN
											(
												SELECT TOP(@i)
													wt1.wait_type,
													wt1.waiting_task_address,
													MAX(wt1.wait_duration_ms) AS wait_duration_ms,
													MAX(wt1.block_info) AS block_info
												FROM
												(
													SELECT DISTINCT TOP(@i)
														wt.wait_type +
															CASE
																WHEN wt.wait_type LIKE N''PAGE%LATCH_%'' THEN
																	'':'' +
																	COALESCE(DB_NAME(CONVERT(INT, LEFT(wt.resource_description, CHARINDEX(N'':'', wt.resource_description) - 1))), N''(null)'') +
																	N'':'' +
																	SUBSTRING(wt.resource_description, CHARINDEX(N'':'', wt.resource_description) + 1, LEN(wt.resource_description) - CHARINDEX(N'':'', REVERSE(wt.resource_description)) - CHARINDEX(N'':'', wt.resource_description)) +
																	N''('' +
																		CASE
																			WHEN
																				CONVERT(INT, RIGHT(wt.resource_description, CHARINDEX(N'':'', REVERSE(wt.resource_description)) - 1)) = 1 OR
																				CONVERT(INT, RIGHT(wt.resource_description, CHARINDEX(N'':'', REVERSE(wt.resource_description)) - 1)) % 8088 = 0
																					THEN 
																						N''PFS''
																			WHEN
																				CONVERT(INT, RIGHT(wt.resource_description, CHARINDEX(N'':'', REVERSE(wt.resource_description)) - 1)) = 2 OR
																				CONVERT(INT, RIGHT(wt.resource_description, CHARINDEX(N'':'', REVERSE(wt.resource_description)) - 1)) % 511232 = 0 
																					THEN 
																						N''GAM''
																			WHEN
																				CONVERT(INT, RIGHT(wt.resource_description, CHARINDEX(N'':'', REVERSE(wt.resource_description)) - 1)) = 3 OR
																				(CONVERT(INT, RIGHT(wt.resource_description, CHARINDEX(N'':'', REVERSE(wt.resource_description)) - 1)) - 1) % 511232 = 0 
																					THEN 
																						N''SGAM''
																			WHEN
																				CONVERT(INT, RIGHT(wt.resource_description, CHARINDEX(N'':'', REVERSE(wt.resource_description)) - 1)) = 6 OR
																				(CONVERT(INT, RIGHT(wt.resource_description, CHARINDEX(N'':'', REVERSE(wt.resource_description)) - 1)) - 6) % 511232 = 0 
																					THEN 
																						N''DCM''
																			WHEN
																				CONVERT(INT, RIGHT(wt.resource_description, CHARINDEX(N'':'', REVERSE(wt.resource_description)) - 1)) = 7 OR
																				(CONVERT(INT, RIGHT(wt.resource_description, CHARINDEX(N'':'', REVERSE(wt.resource_description)) - 1)) - 7) % 511232 = 0
																					THEN 
																						N''BCM''
																			ELSE
																				N''*''
																		END +
																	N'')''
																WHEN wt.wait_type = N''CXPACKET'' THEN
																	N'':'' + SUBSTRING(wt.resource_description, CHARINDEX(N''nodeId'', wt.resource_description) + 7, 4)
																WHEN wt.wait_type LIKE N''LATCH[_]%'' THEN
																	N'' ['' + LEFT(wt.resource_description, COALESCE(NULLIF(CHARINDEX(N'' '', wt.resource_description), 0), LEN(wt.resource_description) + 1) - 1) + N'']''
																ELSE 
																	N''''
															END COLLATE Latin1_General_Bin2 AS wait_type,
														CASE
															WHEN
															(
																wt.blocking_session_id IS NOT NULL
																AND wt.wait_type LIKE N''LCK[_]%''
															) THEN
																(
																	SELECT TOP(@i)
																		x.lock_type,
																		REPLACE
																		(
																			REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
																			REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
																			REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
																				DB_NAME
																				(
																					CONVERT
																					(
																						INT,
																						SUBSTRING(wt.resource_description, NULLIF(CHARINDEX(N''dbid='', wt.resource_description), 0) + 5, COALESCE(NULLIF(CHARINDEX(N'' '', wt.resource_description, CHARINDEX(N''dbid='', wt.resource_description) + 5), 0), LEN(wt.resource_description) + 1) - CHARINDEX(N''dbid='', wt.resource_description) - 5)
																					)
																				),
																				NCHAR(31),N''?''),NCHAR(30),N''?''),NCHAR(29),N''?''),NCHAR(28),N''?''),NCHAR(27),N''?''),NCHAR(26),N''?''),NCHAR(25),N''?''),NCHAR(24),N''?''),NCHAR(23),N''?''),NCHAR(22),N''?''),
																				NCHAR(21),N''?''),NCHAR(20),N''?''),NCHAR(19),N''?''),NCHAR(18),N''?''),NCHAR(17),N''?''),NCHAR(16),N''?''),NCHAR(15),N''?''),NCHAR(14),N''?''),NCHAR(12),N''?''),
																				NCHAR(11),N''?''),NCHAR(8),N''?''),NCHAR(7),N''?''),NCHAR(6),N''?''),NCHAR(5),N''?''),NCHAR(4),N''?''),NCHAR(3),N''?''),NCHAR(2),N''?''),NCHAR(1),N''?''),
																			NCHAR(0),
																			N''''
																		) AS database_name,
																		CASE x.lock_type
																			WHEN N''objectlock'' THEN
																				SUBSTRING(wt.resource_description, NULLIF(CHARINDEX(N''objid='', wt.resource_description), 0) + 6, COALESCE(NULLIF(CHARINDEX(N'' '', wt.resource_description, CHARINDEX(N''objid='', wt.resource_description) + 6), 0), LEN(wt.resource_description) + 1) - CHARINDEX(N''objid='', wt.resource_description) - 6)
																			ELSE
																				NULL
																		END AS object_id,
																		CASE x.lock_type
																			WHEN N''filelock'' THEN
																				SUBSTRING(wt.resource_description, NULLIF(CHARINDEX(N''fileid='', wt.resource_description), 0) + 7, COALESCE(NULLIF(CHARINDEX(N'' '', wt.resource_description, CHARINDEX(N''fileid='', wt.resource_description) + 7), 0), LEN(wt.resource_description) + 1) - CHARINDEX(N''fileid='', wt.resource_description) - 7)
																			ELSE
																				NULL
																		END AS file_id,
																		CASE
																			WHEN x.lock_type in (N''pagelock'', N''extentlock'', N''ridlock'') THEN
																				SUBSTRING(wt.resource_description, NULLIF(CHARINDEX(N''associatedObjectId='', wt.resource_description), 0) + 19, COALESCE(NULLIF(CHARINDEX(N'' '', wt.resource_description, CHARINDEX(N''associatedObjectId='', wt.resource_description) + 19), 0), LEN(wt.resource_description) + 1) - CHARINDEX(N''associatedObjectId='', wt.resource_description) - 19)
																			WHEN x.lock_type in (N''keylock'', N''hobtlock'', N''allocunitlock'') THEN
																				SUBSTRING(wt.resource_description, NULLIF(CHARINDEX(N''hobtid='', wt.resource_description), 0) + 7, COALESCE(NULLIF(CHARINDEX(N'' '', wt.resource_description, CHARINDEX(N''hobtid='', wt.resource_description) + 7), 0), LEN(wt.resource_description) + 1) - CHARINDEX(N''hobtid='', wt.resource_description) - 7)
																			ELSE
																				NULL
																		END AS hobt_id,
																		CASE x.lock_type
																			WHEN N''applicationlock'' THEN
																				SUBSTRING(wt.resource_description, NULLIF(CHARINDEX(N''hash='', wt.resource_description), 0) + 5, COALESCE(NULLIF(CHARINDEX(N'' '', wt.resource_description, CHARINDEX(N''hash='', wt.resource_description) + 5), 0), LEN(wt.resource_description) + 1) - CHARINDEX(N''hash='', wt.resource_description) - 5)
																			ELSE
																				NULL
																		END AS applock_hash,
																		CASE x.lock_type
																			WHEN N''metadatalock'' THEN
																				SUBSTRING(wt.resource_description, NULLIF(CHARINDEX(N''subresource='', wt.resource_description), 0) + 12, COALESCE(NULLIF(CHARINDEX(N'' '', wt.resource_description, CHARINDEX(N''subresource='', wt.resource_description) + 12), 0), LEN(wt.resource_description) + 1) - CHARINDEX(N''subresource='', wt.resource_description) - 12)
																			ELSE
																				NULL
																		END AS metadata_resource,
																		CASE x.lock_type
																			WHEN N''metadatalock'' THEN
																				SUBSTRING(wt.resource_description, NULLIF(CHARINDEX(N''classid='', wt.resource_description), 0) + 8, COALESCE(NULLIF(CHARINDEX(N'' dbid='', wt.resource_description) - CHARINDEX(N''classid='', wt.resource_description), 0), LEN(wt.resource_description) + 1) - 8)
																			ELSE
																				NULL
																		END AS metadata_class_id
																	FROM
																	(
																		SELECT TOP(1)
																			LEFT(wt.resource_description, CHARINDEX(N'' '', wt.resource_description) - 1) COLLATE Latin1_General_Bin2 AS lock_type
																	) AS x
																	FOR XML
																		PATH('''')
																)
															ELSE NULL
														END AS block_info,
														wt.wait_duration_ms,
														wt.waiting_task_address
													FROM
													(
														SELECT TOP(@i)
															wt0.wait_type COLLATE Latin1_General_Bin2 AS wait_type,
															wt0.resource_description COLLATE Latin1_General_Bin2 AS resource_description,
															wt0.wait_duration_ms,
															wt0.waiting_task_address,
															CASE
																WHEN wt0.blocking_session_id = p.blocked THEN
																	wt0.blocking_session_id
																ELSE
																	NULL
															END AS blocking_session_id
														FROM sys.dm_os_waiting_tasks AS wt0
														CROSS APPLY
														(
															SELECT TOP(1)
																s0.blocked
															FROM @sessions AS s0
															WHERE
																s0.session_id = wt0.session_id
																AND COALESCE(s0.wait_type, N'''') <> N''OLEDB''
																AND wt0.wait_type <> N''OLEDB''
														) AS p
													) AS wt
												) AS wt1
												GROUP BY
													wt1.wait_type,
													wt1.waiting_task_address
											) AS wt2 ON
												wt2.waiting_task_address = task_info.task_address
												AND wt2.wait_duration_ms > 0
												AND task_info.runnable_time IS NULL
											GROUP BY
												task_info.session_id,
												task_info.request_id,
												task_info.physical_io,
												task_info.context_switches,
												task_info.thread_CPU_snapshot,
												task_info.num_tasks,
												CASE
													WHEN task_info.runnable_time IS NOT NULL THEN
														''RUNNABLE''
													ELSE
														wt2.wait_type
												END
										) AS w1
									) AS waits
									ORDER BY
										waits.session_id,
										waits.request_id,
										waits.r
									FOR XML
										PATH(N''tasks''),
										TYPE
								) AS tasks_raw (task_xml_raw)
							) AS tasks_final
							CROSS APPLY tasks_final.task_xml.nodes(N''/tasks'') AS task_nodes (task_node)
							WHERE
								task_nodes.task_node.exist(N''session_id'') = 1
						) AS tasks ON
							tasks.session_id = y.session_id
							AND tasks.request_id = y.request_id 
						'
					ELSE
						''
				END +
				'LEFT OUTER HASH JOIN
				(
					SELECT TOP(@i)
						t_info.session_id,
						COALESCE(t_info.request_id, -1) AS request_id,
						SUM(t_info.tempdb_allocations) AS tempdb_allocations,
						SUM(t_info.tempdb_current) AS tempdb_current
					FROM
					(
						SELECT TOP(@i)
							tsu.session_id,
							tsu.request_id,
							tsu.user_objects_alloc_page_count +
								tsu.internal_objects_alloc_page_count AS tempdb_allocations,
							tsu.user_objects_alloc_page_count +
								tsu.internal_objects_alloc_page_count -
								tsu.user_objects_dealloc_page_count -
								tsu.internal_objects_dealloc_page_count AS tempdb_current
						FROM sys.dm_db_task_space_usage AS tsu
						CROSS APPLY
						(
							SELECT TOP(1)
								s0.session_id
							FROM @sessions AS s0
							WHERE
								s0.session_id = tsu.session_id
						) AS p

						UNION ALL

						SELECT TOP(@i)
							ssu.session_id,
							NULL AS request_id,
							ssu.user_objects_alloc_page_count +
								ssu.internal_objects_alloc_page_count AS tempdb_allocations,
							ssu.user_objects_alloc_page_count +
								ssu.internal_objects_alloc_page_count -
								ssu.user_objects_dealloc_page_count -
								ssu.internal_objects_dealloc_page_count AS tempdb_current
						FROM sys.dm_db_session_space_usage AS ssu
						CROSS APPLY
						(
							SELECT TOP(1)
								s0.session_id
							FROM @sessions AS s0
							WHERE
								s0.session_id = ssu.session_id
						) AS p
					) AS t_info
					GROUP BY
						t_info.session_id,
						COALESCE(t_info.request_id, -1)
				) AS tempdb_info ON
					tempdb_info.session_id = y.session_id
					AND tempdb_info.request_id =
						CASE
							WHEN y.status = N''sleeping'' THEN
								-1
							ELSE
								y.request_id
						END
				' +
				CASE 
					WHEN 
						NOT 
						(
							@get_avg_time = 1 
							AND @recursion = 1
						) THEN 
							''
					ELSE
						'LEFT OUTER HASH JOIN
						(
							SELECT TOP(@i)
								*
							FROM sys.dm_exec_query_stats
						) AS qs ON
							qs.sql_handle = y.sql_handle
							AND qs.plan_handle = y.plan_handle
							AND qs.statement_start_offset = y.statement_start_offset
							AND qs.statement_end_offset = y.statement_end_offset
						'
				END + 
			') AS x
			OPTION (KEEPFIXED PLAN, OPTIMIZE FOR (@i = 1)); ';

		SET @sql_n = CONVERT(NVARCHAR(MAX), @sql);

		SET @last_collection_start = GETDATE();

		IF 
			@recursion = -1
			AND @sys_info = 1
		BEGIN;
			SELECT
				@first_collection_ms_ticks = ms_ticks
			FROM sys.dm_os_sys_info;
		END;

		INSERT #sessions
		(
			recursion,
			session_id,
			request_id,
			session_number,
			elapsed_time,
			avg_elapsed_time,
			physical_io,
			reads,
			physical_reads,
			writes,
			tempdb_allocations,
			tempdb_current,
			CPU,
			thread_CPU_snapshot,
			context_switches,
			used_memory,
			tasks,
			status,
			wait_info,
			transaction_id,
			open_tran_count,
			sql_handle,
			statement_start_offset,
			statement_end_offset,		
			sql_text,
			plan_handle,
			blocking_session_id,
			percent_complete,
			host_name,
			login_name,
			database_name,
			program_name,
			additional_info,
			start_time,
			login_time,
			last_request_start_time
		)
		EXEC sp_executesql 
			@sql_n,
			N'@recursion SMALLINT, @filter sysname, @not_filter sysname, @first_collection_ms_ticks BIGINT',
			@recursion, @filter, @not_filter, @first_collection_ms_ticks;

		--Collect transaction information?
		IF
			@recursion = 1
			AND
			(
				@output_column_list LIKE '%|[tran_start_time|]%' ESCAPE '|'
				OR @output_column_list LIKE '%|[tran_log_writes|]%' ESCAPE '|' 
			)
		BEGIN;	
			DECLARE @i INT;
			SET @i = 2147483647;

			UPDATE s
			SET
				tran_start_time =
					CONVERT
					(
						DATETIME,
						LEFT
						(
							x.trans_info,
							NULLIF(CHARINDEX(NCHAR(254) COLLATE Latin1_General_Bin2, x.trans_info) - 1, -1)
						),
						121
					),
				tran_log_writes =
					RIGHT
					(
						x.trans_info,
						LEN(x.trans_info) - CHARINDEX(NCHAR(254) COLLATE Latin1_General_Bin2, x.trans_info)
					)
			FROM
			(
				SELECT TOP(@i)
					trans_nodes.trans_node.value('(session_id/text())[1]', 'SMALLINT') AS session_id,
					COALESCE(trans_nodes.trans_node.value('(request_id/text())[1]', 'INT'), 0) AS request_id,
					trans_nodes.trans_node.value('(trans_info/text())[1]', 'NVARCHAR(4000)') AS trans_info				
				FROM
				(
					SELECT TOP(@i)
						CONVERT
						(
							XML,
							REPLACE
							(
								CONVERT(NVARCHAR(MAX), trans_raw.trans_xml_raw) COLLATE Latin1_General_Bin2, 
								N'</trans_info></trans><trans><trans_info>', N''
							)
						)
					FROM
					(
						SELECT TOP(@i)
							CASE u_trans.r
								WHEN 1 THEN u_trans.session_id
								ELSE NULL
							END AS [session_id],
							CASE u_trans.r
								WHEN 1 THEN u_trans.request_id
								ELSE NULL
							END AS [request_id],
							CONVERT
							(
								NVARCHAR(MAX),
								CASE
									WHEN u_trans.database_id IS NOT NULL THEN
										CASE u_trans.r
											WHEN 1 THEN COALESCE(CONVERT(NVARCHAR, u_trans.transaction_start_time, 121) + NCHAR(254), N'')
											ELSE N''
										END + 
											REPLACE
											(
												REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
												REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
												REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
													CONVERT(VARCHAR(128), COALESCE(DB_NAME(u_trans.database_id), N'(null)')),
													NCHAR(31),N'?'),NCHAR(30),N'?'),NCHAR(29),N'?'),NCHAR(28),N'?'),NCHAR(27),N'?'),NCHAR(26),N'?'),NCHAR(25),N'?'),NCHAR(24),N'?'),NCHAR(23),N'?'),NCHAR(22),N'?'),
													NCHAR(21),N'?'),NCHAR(20),N'?'),NCHAR(19),N'?'),NCHAR(18),N'?'),NCHAR(17),N'?'),NCHAR(16),N'?'),NCHAR(15),N'?'),NCHAR(14),N'?'),NCHAR(12),N'?'),
													NCHAR(11),N'?'),NCHAR(8),N'?'),NCHAR(7),N'?'),NCHAR(6),N'?'),NCHAR(5),N'?'),NCHAR(4),N'?'),NCHAR(3),N'?'),NCHAR(2),N'?'),NCHAR(1),N'?'),
												NCHAR(0),
												N'?'
											) +
											N': ' +
										CONVERT(NVARCHAR, u_trans.log_record_count) + N' (' + CONVERT(NVARCHAR, u_trans.log_kb_used) + N' kB)' +
										N','
									ELSE
										N'N/A,'
								END COLLATE Latin1_General_Bin2
							) AS [trans_info]
						FROM
						(
							SELECT TOP(@i)
								trans.*,
								ROW_NUMBER() OVER
								(
									PARTITION BY
										trans.session_id,
										trans.request_id
									ORDER BY
										trans.transaction_start_time DESC
								) AS r
							FROM
							(
								SELECT TOP(@i)
									session_tran_map.session_id,
									session_tran_map.request_id,
									s_tran.database_id,
									COALESCE(SUM(s_tran.database_transaction_log_record_count), 0) AS log_record_count,
									COALESCE(SUM(s_tran.database_transaction_log_bytes_used), 0) / 1024 AS log_kb_used,
									MIN(s_tran.database_transaction_begin_time) AS transaction_start_time
								FROM
								(
									SELECT TOP(@i)
										*
									FROM sys.dm_tran_active_transactions
									WHERE
										transaction_begin_time <= @last_collection_start
								) AS a_tran
								INNER HASH JOIN
								(
									SELECT TOP(@i)
										*
									FROM sys.dm_tran_database_transactions
									WHERE
										database_id < 32767
								) AS s_tran ON
									s_tran.transaction_id = a_tran.transaction_id
								LEFT OUTER HASH JOIN
								(
									SELECT TOP(@i)
										*
									FROM sys.dm_tran_session_transactions
								) AS tst ON
									s_tran.transaction_id = tst.transaction_id
								CROSS APPLY
								(
									SELECT TOP(1)
										s3.session_id,
										s3.request_id
									FROM
									(
										SELECT TOP(1)
											s1.session_id,
											s1.request_id
										FROM #sessions AS s1
										WHERE
											s1.transaction_id = s_tran.transaction_id
											AND s1.recursion = 1
											
										UNION ALL
									
										SELECT TOP(1)
											s2.session_id,
											s2.request_id
										FROM #sessions AS s2
										WHERE
											s2.session_id = tst.session_id
											AND s2.recursion = 1
									) AS s3
									ORDER BY
										s3.request_id
								) AS session_tran_map
								GROUP BY
									session_tran_map.session_id,
									session_tran_map.request_id,
									s_tran.database_id
							) AS trans
						) AS u_trans
						FOR XML
							PATH('trans'),
							TYPE
					) AS trans_raw (trans_xml_raw)
				) AS trans_final (trans_xml)
				CROSS APPLY trans_final.trans_xml.nodes('/trans') AS trans_nodes (trans_node)
			) AS x
			INNER HASH JOIN #sessions AS s ON
				s.session_id = x.session_id
				AND s.request_id = x.request_id
			OPTION (OPTIMIZE FOR (@i = 1));
		END;

		--Variables for text and plan collection
		DECLARE	
			@session_id SMALLINT,
			@request_id INT,
			@sql_handle VARBINARY(64),
			@plan_handle VARBINARY(64),
			@statement_start_offset INT,
			@statement_end_offset INT,
			@start_time DATETIME,
			@database_name sysname;

		IF 
			@recursion = 1
			AND @output_column_list LIKE '%|[sql_text|]%' ESCAPE '|'
		BEGIN;
			DECLARE sql_cursor
			CURSOR LOCAL FAST_FORWARD
			FOR 
				SELECT 
					session_id,
					request_id,
					sql_handle,
					statement_start_offset,
					statement_end_offset
				FROM #sessions
				WHERE
					recursion = 1
					AND sql_handle IS NOT NULL
			OPTION (KEEPFIXED PLAN);

			OPEN sql_cursor;

			FETCH NEXT FROM sql_cursor
			INTO 
				@session_id,
				@request_id,
				@sql_handle,
				@statement_start_offset,
				@statement_end_offset;

			--Wait up to 5 ms for the SQL text, then give up
			SET LOCK_TIMEOUT 5;

			WHILE @@FETCH_STATUS = 0
			BEGIN;
				BEGIN TRY;
					UPDATE s
					SET
						s.sql_text =
						(
							SELECT
								REPLACE
								(
									REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
									REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
									REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
										N'--' + NCHAR(13) + NCHAR(10) +
										CASE 
											WHEN @get_full_inner_text = 1 THEN est.text
											WHEN LEN(est.text) < (@statement_end_offset / 2) + 1 THEN est.text
											WHEN SUBSTRING(est.text, (@statement_start_offset/2), 2) LIKE N'[a-zA-Z0-9][a-zA-Z0-9]' THEN est.text
											ELSE
												CASE
													WHEN @statement_start_offset > 0 THEN
														SUBSTRING
														(
															est.text,
															((@statement_start_offset/2) + 1),
															(
																CASE
																	WHEN @statement_end_offset = -1 THEN 2147483647
																	ELSE ((@statement_end_offset - @statement_start_offset)/2) + 1
																END
															)
														)
													ELSE RTRIM(LTRIM(est.text))
												END
										END +
										NCHAR(13) + NCHAR(10) + N'--' COLLATE Latin1_General_Bin2,
										NCHAR(31),N'?'),NCHAR(30),N'?'),NCHAR(29),N'?'),NCHAR(28),N'?'),NCHAR(27),N'?'),NCHAR(26),N'?'),NCHAR(25),N'?'),NCHAR(24),N'?'),NCHAR(23),N'?'),NCHAR(22),N'?'),
										NCHAR(21),N'?'),NCHAR(20),N'?'),NCHAR(19),N'?'),NCHAR(18),N'?'),NCHAR(17),N'?'),NCHAR(16),N'?'),NCHAR(15),N'?'),NCHAR(14),N'?'),NCHAR(12),N'?'),
										NCHAR(11),N'?'),NCHAR(8),N'?'),NCHAR(7),N'?'),NCHAR(6),N'?'),NCHAR(5),N'?'),NCHAR(4),N'?'),NCHAR(3),N'?'),NCHAR(2),N'?'),NCHAR(1),N'?'),
									NCHAR(0),
									N''
								) AS [processing-instruction(query)]
							FOR XML
								PATH(''),
								TYPE
						),
						s.statement_start_offset = 
							CASE 
								WHEN LEN(est.text) < (@statement_end_offset / 2) + 1 THEN 0
								WHEN SUBSTRING(CONVERT(VARCHAR(MAX), est.text), (@statement_start_offset/2), 2) LIKE '[a-zA-Z0-9][a-zA-Z0-9]' THEN 0
								ELSE @statement_start_offset
							END,
						s.statement_end_offset = 
							CASE 
								WHEN LEN(est.text) < (@statement_end_offset / 2) + 1 THEN -1
								WHEN SUBSTRING(CONVERT(VARCHAR(MAX), est.text), (@statement_start_offset/2), 2) LIKE '[a-zA-Z0-9][a-zA-Z0-9]' THEN -1
								ELSE @statement_end_offset
							END
					FROM 
						#sessions AS s,
						(
							SELECT TOP(1)
								text
							FROM
							(
								SELECT 
									text, 
									0 AS row_num
								FROM sys.dm_exec_sql_text(@sql_handle)
								
								UNION ALL
								
								SELECT 
									NULL,
									1 AS row_num
							) AS est0
							ORDER BY
								row_num
						) AS est
					WHERE 
						s.session_id = @session_id
						AND s.request_id = @request_id
						AND s.recursion = 1
					OPTION (KEEPFIXED PLAN);
				END TRY
				BEGIN CATCH;
					UPDATE s
					SET
						s.sql_text = 
							CASE ERROR_NUMBER() 
								WHEN 1222 THEN '<timeout_exceeded />'
								ELSE '<error message="' + ERROR_MESSAGE() + '" />'
							END
					FROM #sessions AS s
					WHERE 
						s.session_id = @session_id
						AND s.request_id = @request_id
						AND s.recursion = 1
					OPTION (KEEPFIXED PLAN);
				END CATCH;

				FETCH NEXT FROM sql_cursor
				INTO
					@session_id,
					@request_id,
					@sql_handle,
					@statement_start_offset,
					@statement_end_offset;
			END;

			--Return this to the default
			SET LOCK_TIMEOUT -1;

			CLOSE sql_cursor;
			DEALLOCATE sql_cursor;
		END;

		IF 
			@get_outer_command = 1 
			AND @recursion = 1
			AND @output_column_list LIKE '%|[sql_command|]%' ESCAPE '|'
		BEGIN;
			DECLARE @buffer_results TABLE
			(
				EventType VARCHAR(30),
				Parameters INT,
				EventInfo NVARCHAR(4000),
				start_time DATETIME,
				session_number INT IDENTITY(1,1) NOT NULL PRIMARY KEY
			);

			DECLARE buffer_cursor
			CURSOR LOCAL FAST_FORWARD
			FOR 
				SELECT 
					session_id,
					MAX(start_time) AS start_time
				FROM #sessions
				WHERE
					recursion = 1
				GROUP BY
					session_id
				ORDER BY
					session_id
				OPTION (KEEPFIXED PLAN);

			OPEN buffer_cursor;

			FETCH NEXT FROM buffer_cursor
			INTO 
				@session_id,
				@start_time;

			WHILE @@FETCH_STATUS = 0
			BEGIN;
				BEGIN TRY;
					--In SQL Server 2008, DBCC INPUTBUFFER will throw 
					--an exception if the session no longer exists
					INSERT @buffer_results
					(
						EventType,
						Parameters,
						EventInfo
					)
					EXEC sp_executesql
						N'DBCC INPUTBUFFER(@session_id) WITH NO_INFOMSGS;',
						N'@session_id SMALLINT',
						@session_id;

					UPDATE br
					SET
						br.start_time = @start_time
					FROM @buffer_results AS br
					WHERE
						br.session_number = 
						(
							SELECT MAX(br2.session_number)
							FROM @buffer_results br2
						);
				END TRY
				BEGIN CATCH
				END CATCH;

				FETCH NEXT FROM buffer_cursor
				INTO 
					@session_id,
					@start_time;
			END;

			UPDATE s
			SET
				sql_command = 
				(
					SELECT 
						REPLACE
						(
							REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
							REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
							REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
								CONVERT
								(
									NVARCHAR(MAX),
									N'--' + NCHAR(13) + NCHAR(10) + br.EventInfo + NCHAR(13) + NCHAR(10) + N'--' COLLATE Latin1_General_Bin2
								),
								NCHAR(31),N'?'),NCHAR(30),N'?'),NCHAR(29),N'?'),NCHAR(28),N'?'),NCHAR(27),N'?'),NCHAR(26),N'?'),NCHAR(25),N'?'),NCHAR(24),N'?'),NCHAR(23),N'?'),NCHAR(22),N'?'),
								NCHAR(21),N'?'),NCHAR(20),N'?'),NCHAR(19),N'?'),NCHAR(18),N'?'),NCHAR(17),N'?'),NCHAR(16),N'?'),NCHAR(15),N'?'),NCHAR(14),N'?'),NCHAR(12),N'?'),
								NCHAR(11),N'?'),NCHAR(8),N'?'),NCHAR(7),N'?'),NCHAR(6),N'?'),NCHAR(5),N'?'),NCHAR(4),N'?'),NCHAR(3),N'?'),NCHAR(2),N'?'),NCHAR(1),N'?'),
							NCHAR(0),
							N''
						) AS [processing-instruction(query)]
					FROM @buffer_results AS br
					WHERE 
						br.session_number = s.session_number
						AND br.start_time = s.start_time
						AND 
						(
							(
								s.start_time = s.last_request_start_time
								AND EXISTS
								(
									SELECT *
									FROM sys.dm_exec_requests r2
									WHERE
										r2.session_id = s.session_id
										AND r2.request_id = s.request_id
										AND r2.start_time = s.start_time
								)
							)
							OR 
							(
								s.request_id = 0
								AND EXISTS
								(
									SELECT *
									FROM sys.dm_exec_sessions s2
									WHERE
										s2.session_id = s.session_id
										AND s2.last_request_start_time = s.last_request_start_time
								)
							)
						)
					FOR XML
						PATH(''),
						TYPE
				)
			FROM #sessions AS s
			WHERE
				recursion = 1
			OPTION (KEEPFIXED PLAN);

			CLOSE buffer_cursor;
			DEALLOCATE buffer_cursor;
		END;

		IF 
			@get_plans >= 1 
			AND @recursion = 1
			AND @output_column_list LIKE '%|[query_plan|]%' ESCAPE '|'
		BEGIN;
			DECLARE @live_plan BIT;
			SET @live_plan = ISNULL(CONVERT(BIT, SIGN(OBJECT_ID('sys.dm_exec_query_statistics_xml'))), 0)

			DECLARE plan_cursor
			CURSOR LOCAL FAST_FORWARD
			FOR 
				SELECT
					session_id,
					request_id,
					plan_handle,
					statement_start_offset,
					statement_end_offset
				FROM #sessions
				WHERE
					recursion = 1
					AND plan_handle IS NOT NULL
			OPTION (KEEPFIXED PLAN);

			OPEN plan_cursor;

			FETCH NEXT FROM plan_cursor
			INTO 
				@session_id,
				@request_id,
				@plan_handle,
				@statement_start_offset,
				@statement_end_offset;

			--Wait up to 5 ms for a query plan, then give up
			SET LOCK_TIMEOUT 5;

			WHILE @@FETCH_STATUS = 0
			BEGIN;
				DECLARE @query_plan XML;
				SET @query_plan = NULL;

				IF @live_plan = 1
				BEGIN;
					BEGIN TRY;
						SELECT
							@query_plan = x.query_plan
						FROM sys.dm_exec_query_statistics_xml(@session_id) AS x;

						IF 
							@query_plan IS NOT NULL
							AND EXISTS
							(
								SELECT
									*
								FROM sys.dm_exec_requests AS r
								WHERE
									r.session_id = @session_id
									AND r.request_id = @request_id
									AND r.plan_handle = @plan_handle
									AND r.statement_start_offset = @statement_start_offset
									AND r.statement_end_offset = @statement_end_offset
							)
						BEGIN;
							UPDATE s
							SET
								s.query_plan = @query_plan
							FROM #sessions AS s
							WHERE 
								s.session_id = @session_id
								AND s.request_id = @request_id
								AND s.recursion = 1
							OPTION (KEEPFIXED PLAN);
						END;
					END TRY
					BEGIN CATCH;
						SET @query_plan = NULL;
					END CATCH;
				END;

				IF @query_plan IS NULL
				BEGIN;
					BEGIN TRY;
						UPDATE s
						SET
							s.query_plan =
							(
								SELECT
									CONVERT(xml, query_plan)
								FROM sys.dm_exec_text_query_plan
								(
									@plan_handle, 
									CASE @get_plans
										WHEN 1 THEN
											@statement_start_offset
										ELSE
											0
									END, 
									CASE @get_plans
										WHEN 1 THEN
											@statement_end_offset
										ELSE
											-1
									END
								)
							)
						FROM #sessions AS s
						WHERE 
							s.session_id = @session_id
							AND s.request_id = @request_id
							AND s.recursion = 1
						OPTION (KEEPFIXED PLAN);
					END TRY
					BEGIN CATCH;
						IF ERROR_NUMBER() = 6335
						BEGIN;
							UPDATE s
							SET
								s.query_plan =
								(
									SELECT
										N'--' + NCHAR(13) + NCHAR(10) + 
										N'-- Could not render showplan due to XML data type limitations. ' + NCHAR(13) + NCHAR(10) + 
										N'-- To see the graphical plan save the XML below as a .SQLPLAN file and re-open in SSMS.' + NCHAR(13) + NCHAR(10) +
										N'--' + NCHAR(13) + NCHAR(10) +
											REPLACE(qp.query_plan, N'<RelOp', NCHAR(13)+NCHAR(10)+N'<RelOp') + 
											NCHAR(13) + NCHAR(10) + N'--' COLLATE Latin1_General_Bin2 AS [processing-instruction(query_plan)]
									FROM sys.dm_exec_text_query_plan
									(
										@plan_handle, 
										CASE @get_plans
											WHEN 1 THEN
												@statement_start_offset
											ELSE
												0
										END, 
										CASE @get_plans
											WHEN 1 THEN
												@statement_end_offset
											ELSE
												-1
										END
									) AS qp
									FOR XML
										PATH(''),
										TYPE
								)
							FROM #sessions AS s
							WHERE 
								s.session_id = @session_id
								AND s.request_id = @request_id
								AND s.recursion = 1
							OPTION (KEEPFIXED PLAN);
						END;
						ELSE
						BEGIN;
							UPDATE s
							SET
								s.query_plan = 
									CASE ERROR_NUMBER() 
										WHEN 1222 THEN '<timeout_exceeded />'
										ELSE '<error message="' + ERROR_MESSAGE() + '" />'
									END
							FROM #sessions AS s
							WHERE 
								s.session_id = @session_id
								AND s.request_id = @request_id
								AND s.recursion = 1
							OPTION (KEEPFIXED PLAN);
						END;
					END CATCH;
				END;

				FETCH NEXT FROM plan_cursor
				INTO
					@session_id,
					@request_id,
					@plan_handle,
					@statement_start_offset,
					@statement_end_offset;
			END;

			--Return this to the default
			SET LOCK_TIMEOUT -1;

			CLOSE plan_cursor;
			DEALLOCATE plan_cursor;
		END;

		IF 
			@get_locks = 1 
			AND @recursion = 1
			AND @output_column_list LIKE '%|[locks|]%' ESCAPE '|'
		BEGIN;
			DECLARE locks_cursor
			CURSOR LOCAL FAST_FORWARD
			FOR 
				SELECT DISTINCT
					database_name
				FROM #locks
				WHERE
					EXISTS
					(
						SELECT *
						FROM #sessions AS s
						WHERE
							s.session_id = #locks.session_id
							AND recursion = 1
					)
					AND database_name <> '(null)'
				OPTION (KEEPFIXED PLAN);

			OPEN locks_cursor;

			FETCH NEXT FROM locks_cursor
			INTO 
				@database_name;

			WHILE @@FETCH_STATUS = 0
			BEGIN;
				BEGIN TRY;
					SET @sql_n = CONVERT(NVARCHAR(MAX), '') +
						'UPDATE l ' +
						'SET ' +
							'object_name = ' +
								'REPLACE ' +
								'( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
										'o.name COLLATE Latin1_General_Bin2, ' +
										'NCHAR(31),N''?''),NCHAR(30),N''?''),NCHAR(29),N''?''),NCHAR(28),N''?''),NCHAR(27),N''?''),NCHAR(26),N''?''),NCHAR(25),N''?''),NCHAR(24),N''?''),NCHAR(23),N''?''),NCHAR(22),N''?''), ' +
										'NCHAR(21),N''?''),NCHAR(20),N''?''),NCHAR(19),N''?''),NCHAR(18),N''?''),NCHAR(17),N''?''),NCHAR(16),N''?''),NCHAR(15),N''?''),NCHAR(14),N''?''),NCHAR(12),N''?''), ' +
										'NCHAR(11),N''?''),NCHAR(8),N''?''),NCHAR(7),N''?''),NCHAR(6),N''?''),NCHAR(5),N''?''),NCHAR(4),N''?''),NCHAR(3),N''?''),NCHAR(2),N''?''),NCHAR(1),N''?''), ' +
									'NCHAR(0), ' +
									N''''' ' +
								'), ' +
							'index_name = ' +
								'REPLACE ' +
								'( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
										'i.name COLLATE Latin1_General_Bin2, ' +
										'NCHAR(31),N''?''),NCHAR(30),N''?''),NCHAR(29),N''?''),NCHAR(28),N''?''),NCHAR(27),N''?''),NCHAR(26),N''?''),NCHAR(25),N''?''),NCHAR(24),N''?''),NCHAR(23),N''?''),NCHAR(22),N''?''), ' +
										'NCHAR(21),N''?''),NCHAR(20),N''?''),NCHAR(19),N''?''),NCHAR(18),N''?''),NCHAR(17),N''?''),NCHAR(16),N''?''),NCHAR(15),N''?''),NCHAR(14),N''?''),NCHAR(12),N''?''), ' +
										'NCHAR(11),N''?''),NCHAR(8),N''?''),NCHAR(7),N''?''),NCHAR(6),N''?''),NCHAR(5),N''?''),NCHAR(4),N''?''),NCHAR(3),N''?''),NCHAR(2),N''?''),NCHAR(1),N''?''), ' +
									'NCHAR(0), ' +
									N''''' ' +
								'), ' +
							'schema_name = ' +
								'REPLACE ' +
								'( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
										's.name COLLATE Latin1_General_Bin2, ' +
										'NCHAR(31),N''?''),NCHAR(30),N''?''),NCHAR(29),N''?''),NCHAR(28),N''?''),NCHAR(27),N''?''),NCHAR(26),N''?''),NCHAR(25),N''?''),NCHAR(24),N''?''),NCHAR(23),N''?''),NCHAR(22),N''?''), ' +
										'NCHAR(21),N''?''),NCHAR(20),N''?''),NCHAR(19),N''?''),NCHAR(18),N''?''),NCHAR(17),N''?''),NCHAR(16),N''?''),NCHAR(15),N''?''),NCHAR(14),N''?''),NCHAR(12),N''?''), ' +
										'NCHAR(11),N''?''),NCHAR(8),N''?''),NCHAR(7),N''?''),NCHAR(6),N''?''),NCHAR(5),N''?''),NCHAR(4),N''?''),NCHAR(3),N''?''),NCHAR(2),N''?''),NCHAR(1),N''?''), ' +
									'NCHAR(0), ' +
									N''''' ' +
								'), ' +
							'principal_name = ' + 
								'REPLACE ' +
								'( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
										'dp.name COLLATE Latin1_General_Bin2, ' +
										'NCHAR(31),N''?''),NCHAR(30),N''?''),NCHAR(29),N''?''),NCHAR(28),N''?''),NCHAR(27),N''?''),NCHAR(26),N''?''),NCHAR(25),N''?''),NCHAR(24),N''?''),NCHAR(23),N''?''),NCHAR(22),N''?''), ' +
										'NCHAR(21),N''?''),NCHAR(20),N''?''),NCHAR(19),N''?''),NCHAR(18),N''?''),NCHAR(17),N''?''),NCHAR(16),N''?''),NCHAR(15),N''?''),NCHAR(14),N''?''),NCHAR(12),N''?''), ' +
										'NCHAR(11),N''?''),NCHAR(8),N''?''),NCHAR(7),N''?''),NCHAR(6),N''?''),NCHAR(5),N''?''),NCHAR(4),N''?''),NCHAR(3),N''?''),NCHAR(2),N''?''),NCHAR(1),N''?''), ' +
									'NCHAR(0), ' +
									N''''' ' +
								') ' +
						'FROM #locks AS l ' +
						'LEFT OUTER JOIN ' + QUOTENAME(@database_name) + '.sys.allocation_units AS au ON ' +
							'au.allocation_unit_id = l.allocation_unit_id ' +
						'LEFT OUTER JOIN ' + QUOTENAME(@database_name) + '.sys.partitions AS p ON ' +
							'p.hobt_id = ' +
								'COALESCE ' +
								'( ' +
									'l.hobt_id, ' +
									'CASE ' +
										'WHEN au.type IN (1, 3) THEN au.container_id ' +
										'ELSE NULL ' +
									'END ' +
								') ' +
						'LEFT OUTER JOIN ' + QUOTENAME(@database_name) + '.sys.partitions AS p1 ON ' +
							'l.hobt_id IS NULL ' +
							'AND au.type = 2 ' +
							'AND p1.partition_id = au.container_id ' +
						'LEFT OUTER JOIN ' + QUOTENAME(@database_name) + '.sys.objects AS o ON ' +
							'o.object_id = COALESCE(l.object_id, p.object_id, p1.object_id) ' +
						'LEFT OUTER JOIN ' + QUOTENAME(@database_name) + '.sys.indexes AS i ON ' +
							'i.object_id = COALESCE(l.object_id, p.object_id, p1.object_id) ' +
							'AND i.index_id = COALESCE(l.index_id, p.index_id, p1.index_id) ' +
						'LEFT OUTER JOIN ' + QUOTENAME(@database_name) + '.sys.schemas AS s ON ' +
							's.schema_id = COALESCE(l.schema_id, o.schema_id) ' +
						'LEFT OUTER JOIN ' + QUOTENAME(@database_name) + '.sys.database_principals AS dp ON ' +
							'dp.principal_id = l.principal_id ' +
						'WHERE ' +
							'l.database_name = @database_name ' +
						'OPTION (KEEPFIXED PLAN); ';
					
					EXEC sp_executesql
						@sql_n,
						N'@database_name sysname',
						@database_name;
				END TRY
				BEGIN CATCH;
					UPDATE #locks
					SET
						query_error = 
							REPLACE
							(
								REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
								REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
								REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
									CONVERT
									(
										NVARCHAR(MAX), 
										ERROR_MESSAGE() COLLATE Latin1_General_Bin2
									),
									NCHAR(31),N'?'),NCHAR(30),N'?'),NCHAR(29),N'?'),NCHAR(28),N'?'),NCHAR(27),N'?'),NCHAR(26),N'?'),NCHAR(25),N'?'),NCHAR(24),N'?'),NCHAR(23),N'?'),NCHAR(22),N'?'),
									NCHAR(21),N'?'),NCHAR(20),N'?'),NCHAR(19),N'?'),NCHAR(18),N'?'),NCHAR(17),N'?'),NCHAR(16),N'?'),NCHAR(15),N'?'),NCHAR(14),N'?'),NCHAR(12),N'?'),
									NCHAR(11),N'?'),NCHAR(8),N'?'),NCHAR(7),N'?'),NCHAR(6),N'?'),NCHAR(5),N'?'),NCHAR(4),N'?'),NCHAR(3),N'?'),NCHAR(2),N'?'),NCHAR(1),N'?'),
								NCHAR(0),
								N''
							)
					WHERE 
						database_name = @database_name
					OPTION (KEEPFIXED PLAN);
				END CATCH;

				FETCH NEXT FROM locks_cursor
				INTO
					@database_name;
			END;

			CLOSE locks_cursor;
			DEALLOCATE locks_cursor;

			CREATE CLUSTERED INDEX IX_SRD ON #locks (session_id, request_id, database_name);

			UPDATE s
			SET 
				s.locks =
				(
					SELECT 
						REPLACE
						(
							REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
							REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
							REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
								CONVERT
								(
									NVARCHAR(MAX), 
									l1.database_name COLLATE Latin1_General_Bin2
								),
								NCHAR(31),N'?'),NCHAR(30),N'?'),NCHAR(29),N'?'),NCHAR(28),N'?'),NCHAR(27),N'?'),NCHAR(26),N'?'),NCHAR(25),N'?'),NCHAR(24),N'?'),NCHAR(23),N'?'),NCHAR(22),N'?'),
								NCHAR(21),N'?'),NCHAR(20),N'?'),NCHAR(19),N'?'),NCHAR(18),N'?'),NCHAR(17),N'?'),NCHAR(16),N'?'),NCHAR(15),N'?'),NCHAR(14),N'?'),NCHAR(12),N'?'),
								NCHAR(11),N'?'),NCHAR(8),N'?'),NCHAR(7),N'?'),NCHAR(6),N'?'),NCHAR(5),N'?'),NCHAR(4),N'?'),NCHAR(3),N'?'),NCHAR(2),N'?'),NCHAR(1),N'?'),
							NCHAR(0),
							N''
						) AS [Database/@name],
						MIN(l1.query_error) AS [Database/@query_error],
						(
							SELECT 
								l2.request_mode AS [Lock/@request_mode],
								l2.request_status AS [Lock/@request_status],
								COUNT(*) AS [Lock/@request_count]
							FROM #locks AS l2
							WHERE 
								l1.session_id = l2.session_id
								AND l1.request_id = l2.request_id
								AND l2.database_name = l1.database_name
								AND l2.resource_type = 'DATABASE'
							GROUP BY
								l2.request_mode,
								l2.request_status
							FOR XML
								PATH(''),
								TYPE
						) AS [Database/Locks],
						(
							SELECT
								COALESCE(l3.object_name, '(null)') AS [Object/@name],
								l3.schema_name AS [Object/@schema_name],
								(
									SELECT
										l4.resource_type AS [Lock/@resource_type],
										l4.page_type AS [Lock/@page_type],
										l4.index_name AS [Lock/@index_name],
										CASE 
											WHEN l4.object_name IS NULL THEN l4.schema_name
											ELSE NULL
										END AS [Lock/@schema_name],
										l4.principal_name AS [Lock/@principal_name],
										l4.resource_description AS [Lock/@resource_description],
										l4.request_mode AS [Lock/@request_mode],
										l4.request_status AS [Lock/@request_status],
										SUM(l4.request_count) AS [Lock/@request_count]
									FROM #locks AS l4
									WHERE 
										l4.session_id = l3.session_id
										AND l4.request_id = l3.request_id
										AND l3.database_name = l4.database_name
										AND COALESCE(l3.object_name, '(null)') = COALESCE(l4.object_name, '(null)')
										AND COALESCE(l3.schema_name, '') = COALESCE(l4.schema_name, '')
										AND l4.resource_type <> 'DATABASE'
									GROUP BY
										l4.resource_type,
										l4.page_type,
										l4.index_name,
										CASE 
											WHEN l4.object_name IS NULL THEN l4.schema_name
											ELSE NULL
										END,
										l4.principal_name,
										l4.resource_description,
										l4.request_mode,
										l4.request_status
									FOR XML
										PATH(''),
										TYPE
								) AS [Object/Locks]
							FROM #locks AS l3
							WHERE 
								l3.session_id = l1.session_id
								AND l3.request_id = l1.request_id
								AND l3.database_name = l1.database_name
								AND l3.resource_type <> 'DATABASE'
							GROUP BY 
								l3.session_id,
								l3.request_id,
								l3.database_name,
								COALESCE(l3.object_name, '(null)'),
								l3.schema_name
							FOR XML
								PATH(''),
								TYPE
						) AS [Database/Objects]
					FROM #locks AS l1
					WHERE
						l1.session_id = s.session_id
						AND l1.request_id = s.request_id
						AND l1.start_time IN (s.start_time, s.last_request_start_time)
						AND s.recursion = 1
					GROUP BY 
						l1.session_id,
						l1.request_id,
						l1.database_name
					FOR XML
						PATH(''),
						TYPE
				)
			FROM #sessions s
			OPTION (KEEPFIXED PLAN);
		END;

		IF 
			@find_block_leaders = 1
			AND @recursion = 1
			AND @output_column_list LIKE '%|[blocked_session_count|]%' ESCAPE '|'
		BEGIN;
			WITH
			blockers AS
			(
				SELECT
					session_id,
					session_id AS top_level_session_id,
					CONVERT(VARCHAR(8000), '.' + CONVERT(VARCHAR(8000), session_id) + '.') AS the_path
				FROM #sessions
				WHERE
					recursion = 1

				UNION ALL

				SELECT
					s.session_id,
					b.top_level_session_id,
					CONVERT(VARCHAR(8000), b.the_path + CONVERT(VARCHAR(8000), s.session_id) + '.') AS the_path
				FROM blockers AS b
				JOIN #sessions AS s ON
					s.blocking_session_id = b.session_id
					AND s.recursion = 1
					AND b.the_path NOT LIKE '%.' + CONVERT(VARCHAR(8000), s.session_id) + '.%' COLLATE Latin1_General_Bin2
			)
			UPDATE s
			SET
				s.blocked_session_count = x.blocked_session_count
			FROM #sessions AS s
			JOIN
			(
				SELECT
					b.top_level_session_id AS session_id,
					COUNT(*) - 1 AS blocked_session_count
				FROM blockers AS b
				GROUP BY
					b.top_level_session_id
			) x ON
				s.session_id = x.session_id
			WHERE
				s.recursion = 1;
		END;

		IF
			@get_task_info = 2
			AND @output_column_list LIKE '%|[additional_info|]%' ESCAPE '|'
			AND @recursion = 1
		BEGIN;
			CREATE TABLE #blocked_requests
			(
				session_id SMALLINT NOT NULL,
				request_id INT NOT NULL,
				database_name sysname NOT NULL,
				object_id INT,
				hobt_id BIGINT,
				schema_id INT,
				schema_name sysname NULL,
				object_name sysname NULL,
				query_error NVARCHAR(2048),
				PRIMARY KEY (database_name, session_id, request_id)
			);

			CREATE STATISTICS s_database_name ON #blocked_requests (database_name)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_schema_name ON #blocked_requests (schema_name)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_object_name ON #blocked_requests (object_name)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
			CREATE STATISTICS s_query_error ON #blocked_requests (query_error)
			WITH SAMPLE 0 ROWS, NORECOMPUTE;
		
			INSERT #blocked_requests
			(
				session_id,
				request_id,
				database_name,
				object_id,
				hobt_id,
				schema_id
			)
			SELECT
				session_id,
				request_id,
				database_name,
				object_id,
				hobt_id,
				CONVERT(INT, SUBSTRING(schema_node, CHARINDEX(' = ', schema_node) + 3, LEN(schema_node))) AS schema_id
			FROM
			(
				SELECT
					session_id,
					request_id,
					agent_nodes.agent_node.value('(database_name/text())[1]', 'sysname') AS database_name,
					agent_nodes.agent_node.value('(object_id/text())[1]', 'int') AS object_id,
					agent_nodes.agent_node.value('(hobt_id/text())[1]', 'bigint') AS hobt_id,
					agent_nodes.agent_node.value('(metadata_resource/text()[.="SCHEMA"]/../../metadata_class_id/text())[1]', 'varchar(100)') AS schema_node
				FROM #sessions AS s
				CROSS APPLY s.additional_info.nodes('//block_info') AS agent_nodes (agent_node)
				WHERE
					s.recursion = 1
			) AS t
			WHERE
				t.database_name IS NOT NULL
				AND
				(
					t.object_id IS NOT NULL
					OR t.hobt_id IS NOT NULL
					OR t.schema_node IS NOT NULL
				);
			
			DECLARE blocks_cursor
			CURSOR LOCAL FAST_FORWARD
			FOR
				SELECT DISTINCT
					database_name
				FROM #blocked_requests;
				
			OPEN blocks_cursor;
			
			FETCH NEXT FROM blocks_cursor
			INTO 
				@database_name;
			
			WHILE @@FETCH_STATUS = 0
			BEGIN;
				BEGIN TRY;
					SET @sql_n = 
						CONVERT(NVARCHAR(MAX), '') +
						'UPDATE b ' +
						'SET ' +
							'b.schema_name = ' +
								'REPLACE ' +
								'( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
										's.name COLLATE Latin1_General_Bin2, ' +
										'NCHAR(31),N''?''),NCHAR(30),N''?''),NCHAR(29),N''?''),NCHAR(28),N''?''),NCHAR(27),N''?''),NCHAR(26),N''?''),NCHAR(25),N''?''),NCHAR(24),N''?''),NCHAR(23),N''?''),NCHAR(22),N''?''), ' +
										'NCHAR(21),N''?''),NCHAR(20),N''?''),NCHAR(19),N''?''),NCHAR(18),N''?''),NCHAR(17),N''?''),NCHAR(16),N''?''),NCHAR(15),N''?''),NCHAR(14),N''?''),NCHAR(12),N''?''), ' +
										'NCHAR(11),N''?''),NCHAR(8),N''?''),NCHAR(7),N''?''),NCHAR(6),N''?''),NCHAR(5),N''?''),NCHAR(4),N''?''),NCHAR(3),N''?''),NCHAR(2),N''?''),NCHAR(1),N''?''), ' +
									'NCHAR(0), ' +
									N''''' ' +
								'), ' +
							'b.object_name = ' +
								'REPLACE ' +
								'( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
									'REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE( ' +
										'o.name COLLATE Latin1_General_Bin2, ' +
										'NCHAR(31),N''?''),NCHAR(30),N''?''),NCHAR(29),N''?''),NCHAR(28),N''?''),NCHAR(27),N''?''),NCHAR(26),N''?''),NCHAR(25),N''?''),NCHAR(24),N''?''),NCHAR(23),N''?''),NCHAR(22),N''?''), ' +
										'NCHAR(21),N''?''),NCHAR(20),N''?''),NCHAR(19),N''?''),NCHAR(18),N''?''),NCHAR(17),N''?''),NCHAR(16),N''?''),NCHAR(15),N''?''),NCHAR(14),N''?''),NCHAR(12),N''?''), ' +
										'NCHAR(11),N''?''),NCHAR(8),N''?''),NCHAR(7),N''?''),NCHAR(6),N''?''),NCHAR(5),N''?''),NCHAR(4),N''?''),NCHAR(3),N''?''),NCHAR(2),N''?''),NCHAR(1),N''?''), ' +
									'NCHAR(0), ' +
									N''''' ' +
								') ' +
						'FROM #blocked_requests AS b ' +
						'LEFT OUTER JOIN ' + QUOTENAME(@database_name) + '.sys.partitions AS p ON ' +
							'p.hobt_id = b.hobt_id ' +
						'LEFT OUTER JOIN ' + QUOTENAME(@database_name) + '.sys.objects AS o ON ' +
							'o.object_id = COALESCE(p.object_id, b.object_id) ' +
						'LEFT OUTER JOIN ' + QUOTENAME(@database_name) + '.sys.schemas AS s ON ' +
							's.schema_id = COALESCE(o.schema_id, b.schema_id) ' +
						'WHERE ' +
							'b.database_name = @database_name; ';
					
					EXEC sp_executesql
						@sql_n,
						N'@database_name sysname',
						@database_name;
				END TRY
				BEGIN CATCH;
					UPDATE #blocked_requests
					SET
						query_error = 
							REPLACE
							(
								REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
								REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
								REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
									CONVERT
									(
										NVARCHAR(MAX), 
										ERROR_MESSAGE() COLLATE Latin1_General_Bin2
									),
									NCHAR(31),N'?'),NCHAR(30),N'?'),NCHAR(29),N'?'),NCHAR(28),N'?'),NCHAR(27),N'?'),NCHAR(26),N'?'),NCHAR(25),N'?'),NCHAR(24),N'?'),NCHAR(23),N'?'),NCHAR(22),N'?'),
									NCHAR(21),N'?'),NCHAR(20),N'?'),NCHAR(19),N'?'),NCHAR(18),N'?'),NCHAR(17),N'?'),NCHAR(16),N'?'),NCHAR(15),N'?'),NCHAR(14),N'?'),NCHAR(12),N'?'),
									NCHAR(11),N'?'),NCHAR(8),N'?'),NCHAR(7),N'?'),NCHAR(6),N'?'),NCHAR(5),N'?'),NCHAR(4),N'?'),NCHAR(3),N'?'),NCHAR(2),N'?'),NCHAR(1),N'?'),
								NCHAR(0),
								N''
							)
					WHERE
						database_name = @database_name;
				END CATCH;

				FETCH NEXT FROM blocks_cursor
				INTO
					@database_name;
			END;
			
			CLOSE blocks_cursor;
			DEALLOCATE blocks_cursor;
			
			UPDATE s
			SET
				additional_info.modify
				('
					insert <schema_name>{sql:column("b.schema_name")}</schema_name>
					as last
					into (/additional_info/block_info)[1]
				')
			FROM #sessions AS s
			INNER JOIN #blocked_requests AS b ON
				b.session_id = s.session_id
				AND b.request_id = s.request_id
				AND s.recursion = 1
			WHERE
				b.schema_name IS NOT NULL;

			UPDATE s
			SET
				additional_info.modify
				('
					insert <object_name>{sql:column("b.object_name")}</object_name>
					as last
					into (/additional_info/block_info)[1]
				')
			FROM #sessions AS s
			INNER JOIN #blocked_requests AS b ON
				b.session_id = s.session_id
				AND b.request_id = s.request_id
				AND s.recursion = 1
			WHERE
				b.object_name IS NOT NULL;

			UPDATE s
			SET
				additional_info.modify
				('
					insert <query_error>{sql:column("b.query_error")}</query_error>
					as last
					into (/additional_info/block_info)[1]
				')
			FROM #sessions AS s
			INNER JOIN #blocked_requests AS b ON
				b.session_id = s.session_id
				AND b.request_id = s.request_id
				AND s.recursion = 1
			WHERE
				b.query_error IS NOT NULL;
		END;

		IF
			@output_column_list LIKE '%|[program_name|]%' ESCAPE '|'
			AND @output_column_list LIKE '%|[additional_info|]%' ESCAPE '|'
			AND @recursion = 1
			AND DB_ID('msdb') IS NOT NULL
		BEGIN;
			SET @sql_n =
				N'BEGIN TRY;
					DECLARE @job_name sysname;
					SET @job_name = NULL;
					DECLARE @step_name sysname;
					SET @step_name = NULL;

					SELECT
						@job_name = 
							REPLACE
							(
								REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
								REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
								REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
									j.name,
									NCHAR(31),N''?''),NCHAR(30),N''?''),NCHAR(29),N''?''),NCHAR(28),N''?''),NCHAR(27),N''?''),NCHAR(26),N''?''),NCHAR(25),N''?''),NCHAR(24),N''?''),NCHAR(23),N''?''),NCHAR(22),N''?''),
									NCHAR(21),N''?''),NCHAR(20),N''?''),NCHAR(19),N''?''),NCHAR(18),N''?''),NCHAR(17),N''?''),NCHAR(16),N''?''),NCHAR(15),N''?''),NCHAR(14),N''?''),NCHAR(12),N''?''),
									NCHAR(11),N''?''),NCHAR(8),N''?''),NCHAR(7),N''?''),NCHAR(6),N''?''),NCHAR(5),N''?''),NCHAR(4),N''?''),NCHAR(3),N''?''),NCHAR(2),N''?''),NCHAR(1),N''?''),
								NCHAR(0),
								N''?''
							),
						@step_name = 
							REPLACE
							(
								REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
								REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
								REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
									s.step_name,
									NCHAR(31),N''?''),NCHAR(30),N''?''),NCHAR(29),N''?''),NCHAR(28),N''?''),NCHAR(27),N''?''),NCHAR(26),N''?''),NCHAR(25),N''?''),NCHAR(24),N''?''),NCHAR(23),N''?''),NCHAR(22),N''?''),
									NCHAR(21),N''?''),NCHAR(20),N''?''),NCHAR(19),N''?''),NCHAR(18),N''?''),NCHAR(17),N''?''),NCHAR(16),N''?''),NCHAR(15),N''?''),NCHAR(14),N''?''),NCHAR(12),N''?''),
									NCHAR(11),N''?''),NCHAR(8),N''?''),NCHAR(7),N''?''),NCHAR(6),N''?''),NCHAR(5),N''?''),NCHAR(4),N''?''),NCHAR(3),N''?''),NCHAR(2),N''?''),NCHAR(1),N''?''),
								NCHAR(0),
								N''?''
							)
					FROM msdb.dbo.sysjobs AS j
					INNER JOIN msdb.dbo.sysjobsteps AS s ON
						j.job_id = s.job_id
					WHERE
						j.job_id = @job_id
						AND s.step_id = @step_id;

					IF @job_name IS NOT NULL
					BEGIN;
						UPDATE s
						SET
							additional_info.modify
							(''
								insert text{sql:variable("@job_name")}
								into (/additional_info/agent_job_info/job_name)[1]
							'')
						FROM #sessions AS s
						WHERE 
							s.session_id = @session_id
							AND s.recursion = 1
						OPTION (KEEPFIXED PLAN);
						
						UPDATE s
						SET
							additional_info.modify
							(''
								insert text{sql:variable("@step_name")}
								into (/additional_info/agent_job_info/step_name)[1]
							'')
						FROM #sessions AS s
						WHERE 
							s.session_id = @session_id
							AND s.recursion = 1
						OPTION (KEEPFIXED PLAN);
					END;
				END TRY
				BEGIN CATCH;
					DECLARE @msdb_error_message NVARCHAR(256);
					SET @msdb_error_message = ERROR_MESSAGE();
				
					UPDATE s
					SET
						additional_info.modify
						(''
							insert <msdb_query_error>{sql:variable("@msdb_error_message")}</msdb_query_error>
							as last
							into (/additional_info/agent_job_info)[1]
						'')
					FROM #sessions AS s
					WHERE 
						s.session_id = @session_id
						AND s.recursion = 1
					OPTION (KEEPFIXED PLAN);
				END CATCH;'

			DECLARE @job_id UNIQUEIDENTIFIER;
			DECLARE @step_id INT;

			DECLARE agent_cursor
			CURSOR LOCAL FAST_FORWARD
			FOR 
				SELECT
					s.session_id,
					agent_nodes.agent_node.value('(job_id/text())[1]', 'uniqueidentifier') AS job_id,
					agent_nodes.agent_node.value('(step_id/text())[1]', 'int') AS step_id
				FROM #sessions AS s
				CROSS APPLY s.additional_info.nodes('//agent_job_info') AS agent_nodes (agent_node)
				WHERE
					s.recursion = 1
			OPTION (KEEPFIXED PLAN);
			
			OPEN agent_cursor;

			FETCH NEXT FROM agent_cursor
			INTO 
				@session_id,
				@job_id,
				@step_id;

			WHILE @@FETCH_STATUS = 0
			BEGIN;
				EXEC sp_executesql
					@sql_n,
					N'@job_id UNIQUEIDENTIFIER, @step_id INT, @session_id SMALLINT',
					@job_id, @step_id, @session_id

				FETCH NEXT FROM agent_cursor
				INTO 
					@session_id,
					@job_id,
					@step_id;
			END;

			CLOSE agent_cursor;
			DEALLOCATE agent_cursor;
		END; 
		
		IF 
			@delta_interval > 0 
			AND @recursion <> 1
		BEGIN;
			SET @recursion = 1;

			DECLARE @delay_time CHAR(12);
			SET @delay_time = CONVERT(VARCHAR, DATEADD(second, @delta_interval, 0), 114);
			WAITFOR DELAY @delay_time;

			GOTO REDO;
		END;
	END;

	SET @sql = 
		--Outer column list
		CONVERT
		(
			VARCHAR(MAX),
			CASE
				WHEN 
					@destination_table <> '' 
					AND @return_schema = 0 
						THEN 'INSERT ' + @destination_table + ' '
				ELSE ''
			END +
			'SELECT ' +
				@output_column_list + ' ' +
			CASE @return_schema
				WHEN 1 THEN 'INTO #session_schema '
				ELSE ''
			END
		--End outer column list
		) + 
		--Inner column list
		CONVERT
		(
			VARCHAR(MAX),
			'FROM ' +
			'( ' +
				'SELECT ' +
					'session_id, ' +
					--[dd hh:mm:ss.mss]
					CASE
						WHEN @format_output IN (1, 2) THEN
							'CASE ' +
								'WHEN elapsed_time < 0 THEN ' +
									'RIGHT ' +
									'( ' +
										'REPLICATE(''0'', max_elapsed_length) + CONVERT(VARCHAR, (-1 * elapsed_time) / 86400), ' +
										'max_elapsed_length ' +
									') + ' +
										'RIGHT ' +
										'( ' +
											'CONVERT(VARCHAR, DATEADD(second, (-1 * elapsed_time), 0), 120), ' +
											'9 ' +
										') + ' +
										'''.000'' ' +
								'ELSE ' +
									'RIGHT ' +
									'( ' +
										'REPLICATE(''0'', max_elapsed_length) + CONVERT(VARCHAR, elapsed_time / 86400000), ' +
										'max_elapsed_length ' +
									') + ' +
										'RIGHT ' +
										'( ' +
											'CONVERT(VARCHAR, DATEADD(second, elapsed_time / 1000, 0), 120), ' +
											'9 ' +
										') + ' +
										'''.'' + ' + 
										'RIGHT(''000'' + CONVERT(VARCHAR, elapsed_time % 1000), 3) ' +
							'END AS [dd hh:mm:ss.mss], '
						ELSE
							''
					END +
					--[dd hh:mm:ss.mss (avg)] / avg_elapsed_time
					CASE 
						WHEN  @format_output IN (1, 2) THEN 
							'RIGHT ' +
							'( ' +
								'''00'' + CONVERT(VARCHAR, avg_elapsed_time / 86400000), ' +
								'2 ' +
							') + ' +
								'RIGHT ' +
								'( ' +
									'CONVERT(VARCHAR, DATEADD(second, avg_elapsed_time / 1000, 0), 120), ' +
									'9 ' +
								') + ' +
								'''.'' + ' +
								'RIGHT(''000'' + CONVERT(VARCHAR, avg_elapsed_time % 1000), 3) AS [dd hh:mm:ss.mss (avg)], '
						ELSE
							'avg_elapsed_time, '
					END +
					--physical_io
					CASE @format_output
						WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, physical_io))) OVER() - LEN(CONVERT(VARCHAR, physical_io))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, physical_io), 1), 19)) AS '
						WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, physical_io), 1), 19)) AS '
						ELSE ''
					END + 'physical_io, ' +
					--reads
					CASE @format_output
						WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, reads))) OVER() - LEN(CONVERT(VARCHAR, reads))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, reads), 1), 19)) AS '
						WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, reads), 1), 19)) AS '
						ELSE ''
					END + 'reads, ' +
					--physical_reads
					CASE @format_output
						WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, physical_reads))) OVER() - LEN(CONVERT(VARCHAR, physical_reads))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, physical_reads), 1), 19)) AS '
						WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, physical_reads), 1), 19)) AS '
						ELSE ''
					END + 'physical_reads, ' +
					--writes
					CASE @format_output
						WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, writes))) OVER() - LEN(CONVERT(VARCHAR, writes))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, writes), 1), 19)) AS '
						WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, writes), 1), 19)) AS '
						ELSE ''
					END + 'writes, ' +
					--tempdb_allocations
					CASE @format_output
						WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, tempdb_allocations))) OVER() - LEN(CONVERT(VARCHAR, tempdb_allocations))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, tempdb_allocations), 1), 19)) AS '
						WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, tempdb_allocations), 1), 19)) AS '
						ELSE ''
					END + 'tempdb_allocations, ' +
					--tempdb_current
					CASE @format_output
						WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, tempdb_current))) OVER() - LEN(CONVERT(VARCHAR, tempdb_current))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, tempdb_current), 1), 19)) AS '
						WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, tempdb_current), 1), 19)) AS '
						ELSE ''
					END + 'tempdb_current, ' +
					--CPU
					CASE @format_output
						WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, CPU))) OVER() - LEN(CONVERT(VARCHAR, CPU))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, CPU), 1), 19)) AS '
						WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, CPU), 1), 19)) AS '
						ELSE ''
					END + 'CPU, ' +
					--context_switches
					CASE @format_output
						WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, context_switches))) OVER() - LEN(CONVERT(VARCHAR, context_switches))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, context_switches), 1), 19)) AS '
						WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, context_switches), 1), 19)) AS '
						ELSE ''
					END + 'context_switches, ' +
					--used_memory
					CASE @format_output
						WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, used_memory))) OVER() - LEN(CONVERT(VARCHAR, used_memory))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, used_memory), 1), 19)) AS '
						WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, used_memory), 1), 19)) AS '
						ELSE ''
					END + 'used_memory, ' +
					CASE
						WHEN @output_column_list LIKE '%|_delta|]%' ESCAPE '|' THEN
							--physical_io_delta			
							'CASE ' +
								'WHEN ' +
									'first_request_start_time = last_request_start_time ' + 
									'AND num_events = 2 ' +
									'AND physical_io_delta >= 0 ' +
										'THEN ' +
										CASE @format_output
											WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, physical_io_delta))) OVER() - LEN(CONVERT(VARCHAR, physical_io_delta))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, physical_io_delta), 1), 19)) ' 
											WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, physical_io_delta), 1), 19)) '
											ELSE 'physical_io_delta '
										END +
								'ELSE NULL ' +
							'END AS physical_io_delta, ' +
							--reads_delta
							'CASE ' +
								'WHEN ' +
									'first_request_start_time = last_request_start_time ' + 
									'AND num_events = 2 ' +
									'AND reads_delta >= 0 ' +
										'THEN ' +
										CASE @format_output
											WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, reads_delta))) OVER() - LEN(CONVERT(VARCHAR, reads_delta))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, reads_delta), 1), 19)) '
											WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, reads_delta), 1), 19)) '
											ELSE 'reads_delta '
										END +
								'ELSE NULL ' +
							'END AS reads_delta, ' +
							--physical_reads_delta
							'CASE ' +
								'WHEN ' +
									'first_request_start_time = last_request_start_time ' + 
									'AND num_events = 2 ' +
									'AND physical_reads_delta >= 0 ' +
										'THEN ' +
										CASE @format_output
											WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, physical_reads_delta))) OVER() - LEN(CONVERT(VARCHAR, physical_reads_delta))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, physical_reads_delta), 1), 19)) '
											WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, physical_reads_delta), 1), 19)) '
											ELSE 'physical_reads_delta '
										END + 
								'ELSE NULL ' +
							'END AS physical_reads_delta, ' +
							--writes_delta
							'CASE ' +
								'WHEN ' +
									'first_request_start_time = last_request_start_time ' + 
									'AND num_events = 2 ' +
									'AND writes_delta >= 0 ' +
										'THEN ' +
										CASE @format_output
											WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, writes_delta))) OVER() - LEN(CONVERT(VARCHAR, writes_delta))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, writes_delta), 1), 19)) '
											WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, writes_delta), 1), 19)) '
											ELSE 'writes_delta '
										END + 
								'ELSE NULL ' +
							'END AS writes_delta, ' +
							--tempdb_allocations_delta
							'CASE ' +
								'WHEN ' +
									'first_request_start_time = last_request_start_time ' + 
									'AND num_events = 2 ' +
									'AND tempdb_allocations_delta >= 0 ' +
										'THEN ' +
										CASE @format_output
											WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, tempdb_allocations_delta))) OVER() - LEN(CONVERT(VARCHAR, tempdb_allocations_delta))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, tempdb_allocations_delta), 1), 19)) '
											WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, tempdb_allocations_delta), 1), 19)) '
											ELSE 'tempdb_allocations_delta '
										END + 
								'ELSE NULL ' +
							'END AS tempdb_allocations_delta, ' +
							--tempdb_current_delta
							--this is the only one that can (legitimately) go negative 
							'CASE ' +
								'WHEN ' +
									'first_request_start_time = last_request_start_time ' + 
									'AND num_events = 2 ' +
										'THEN ' +
										CASE @format_output
											WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, tempdb_current_delta))) OVER() - LEN(CONVERT(VARCHAR, tempdb_current_delta))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, tempdb_current_delta), 1), 19)) '
											WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, tempdb_current_delta), 1), 19)) '
											ELSE 'tempdb_current_delta '
										END + 
								'ELSE NULL ' +
							'END AS tempdb_current_delta, ' +
							--CPU_delta
							'CASE ' +
								'WHEN ' +
									'first_request_start_time = last_request_start_time ' + 
									'AND num_events = 2 ' +
										'THEN ' +
											'CASE ' +
												'WHEN ' +
													'thread_CPU_delta > CPU_delta ' +
													'AND thread_CPU_delta > 0 ' +
														'THEN ' +
															CASE @format_output
																WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, thread_CPU_delta + CPU_delta))) OVER() - LEN(CONVERT(VARCHAR, thread_CPU_delta))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, thread_CPU_delta), 1), 19)) '
																WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, thread_CPU_delta), 1), 19)) '
																ELSE 'thread_CPU_delta '
															END + 
												'WHEN CPU_delta >= 0 THEN ' +
													CASE @format_output
														WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, thread_CPU_delta + CPU_delta))) OVER() - LEN(CONVERT(VARCHAR, CPU_delta))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, CPU_delta), 1), 19)) '
														WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, CPU_delta), 1), 19)) '
														ELSE 'CPU_delta '
													END + 
												'ELSE NULL ' +
											'END ' +
								'ELSE ' +
									'NULL ' +
							'END AS CPU_delta, ' +
							--context_switches_delta
							'CASE ' +
								'WHEN ' +
									'first_request_start_time = last_request_start_time ' + 
									'AND num_events = 2 ' +
									'AND context_switches_delta >= 0 ' +
										'THEN ' +
										CASE @format_output
											WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, context_switches_delta))) OVER() - LEN(CONVERT(VARCHAR, context_switches_delta))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, context_switches_delta), 1), 19)) '
											WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, context_switches_delta), 1), 19)) '
											ELSE 'context_switches_delta '
										END + 
								'ELSE NULL ' +
							'END AS context_switches_delta, ' +
							--used_memory_delta
							'CASE ' +
								'WHEN ' +
									'first_request_start_time = last_request_start_time ' + 
									'AND num_events = 2 ' +
									'AND used_memory_delta >= 0 ' +
										'THEN ' +
										CASE @format_output
											WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, used_memory_delta))) OVER() - LEN(CONVERT(VARCHAR, used_memory_delta))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, used_memory_delta), 1), 19)) '
											WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, used_memory_delta), 1), 19)) '
											ELSE 'used_memory_delta '
										END + 
								'ELSE NULL ' +
							'END AS used_memory_delta, '
						ELSE ''
					END +
					--tasks
					CASE @format_output
						WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, tasks))) OVER() - LEN(CONVERT(VARCHAR, tasks))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, tasks), 1), 19)) AS '
						WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, tasks), 1), 19)) '
						ELSE ''
					END + 'tasks, ' +
					'status, ' +
					'wait_info, ' +
					'locks, ' +
					'tran_start_time, ' +
					'LEFT(tran_log_writes, LEN(tran_log_writes) - 1) AS tran_log_writes, ' +
					--open_tran_count
					CASE @format_output
						WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, open_tran_count))) OVER() - LEN(CONVERT(VARCHAR, open_tran_count))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, open_tran_count), 1), 19)) AS '
						WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, open_tran_count), 1), 19)) AS '
						ELSE ''
					END + 'open_tran_count, ' +
					--sql_command
					CASE @format_output 
						WHEN 0 THEN 'REPLACE(REPLACE(CONVERT(NVARCHAR(MAX), sql_command), ''<?query --''+CHAR(13)+CHAR(10), ''''), CHAR(13)+CHAR(10)+''--?>'', '''') AS '
						ELSE ''
					END + 'sql_command, ' +
					--sql_text
					CASE @format_output 
						WHEN 0 THEN 'REPLACE(REPLACE(CONVERT(NVARCHAR(MAX), sql_text), ''<?query --''+CHAR(13)+CHAR(10), ''''), CHAR(13)+CHAR(10)+''--?>'', '''') AS '
						ELSE ''
					END + 'sql_text, ' +
					'query_plan, ' +
					'blocking_session_id, ' +
					--blocked_session_count
					CASE @format_output
						WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, blocked_session_count))) OVER() - LEN(CONVERT(VARCHAR, blocked_session_count))) + LEFT(CONVERT(CHAR(22), CONVERT(MONEY, blocked_session_count), 1), 19)) AS '
						WHEN 2 THEN 'CONVERT(VARCHAR, LEFT(CONVERT(CHAR(22), CONVERT(MONEY, blocked_session_count), 1), 19)) AS '
						ELSE ''
					END + 'blocked_session_count, ' +
					--percent_complete
					CASE @format_output
						WHEN 1 THEN 'CONVERT(VARCHAR, SPACE(MAX(LEN(CONVERT(VARCHAR, CONVERT(MONEY, percent_complete), 2))) OVER() - LEN(CONVERT(VARCHAR, CONVERT(MONEY, percent_complete), 2))) + CONVERT(CHAR(22), CONVERT(MONEY, percent_complete), 2)) AS '
						WHEN 2 THEN 'CONVERT(VARCHAR, CONVERT(CHAR(22), CONVERT(MONEY, blocked_session_count), 1)) AS '
						ELSE ''
					END + 'percent_complete, ' +
					'host_name, ' +
					'login_name, ' +
					'database_name, ' +
					'program_name, ' +
					'additional_info, ' +
					'start_time, ' +
					'login_time, ' +
					'CASE ' +
						'WHEN status = N''sleeping'' THEN NULL ' +
						'ELSE request_id ' +
					'END AS request_id, ' +
					'GETDATE() AS collection_time '
		--End inner column list
		) +
		--Derived table and INSERT specification
		CONVERT
		(
			VARCHAR(MAX),
				'FROM ' +
				'( ' +
					'SELECT TOP(2147483647) ' +
						'*, ' +
						'CASE ' +
							'MAX ' +
							'( ' +
								'LEN ' +
								'( ' +
									'CONVERT ' +
									'( ' +
										'VARCHAR, ' +
										'CASE ' +
											'WHEN elapsed_time < 0 THEN ' +
												'(-1 * elapsed_time) / 86400 ' +
											'ELSE ' +
												'elapsed_time / 86400000 ' +
										'END ' +
									') ' +
								') ' +
							') OVER () ' +
								'WHEN 1 THEN 2 ' +
								'ELSE ' +
									'MAX ' +
									'( ' +
										'LEN ' +
										'( ' +
											'CONVERT ' +
											'( ' +
												'VARCHAR, ' +
												'CASE ' +
													'WHEN elapsed_time < 0 THEN ' +
														'(-1 * elapsed_time) / 86400 ' +
													'ELSE ' +
														'elapsed_time / 86400000 ' +
												'END ' +
											') ' +
										') ' +
									') OVER () ' +
						'END AS max_elapsed_length, ' +
						CASE
							WHEN @output_column_list LIKE '%|_delta|]%' ESCAPE '|' THEN
								'MAX(physical_io * recursion) OVER (PARTITION BY session_id, request_id) + ' +
									'MIN(physical_io * recursion) OVER (PARTITION BY session_id, request_id) AS physical_io_delta, ' +
								'MAX(reads * recursion) OVER (PARTITION BY session_id, request_id) + ' +
									'MIN(reads * recursion) OVER (PARTITION BY session_id, request_id) AS reads_delta, ' +
								'MAX(physical_reads * recursion) OVER (PARTITION BY session_id, request_id) + ' +
									'MIN(physical_reads * recursion) OVER (PARTITION BY session_id, request_id) AS physical_reads_delta, ' +
								'MAX(writes * recursion) OVER (PARTITION BY session_id, request_id) + ' +
									'MIN(writes * recursion) OVER (PARTITION BY session_id, request_id) AS writes_delta, ' +
								'MAX(tempdb_allocations * recursion) OVER (PARTITION BY session_id, request_id) + ' +
									'MIN(tempdb_allocations * recursion) OVER (PARTITION BY session_id, request_id) AS tempdb_allocations_delta, ' +
								'MAX(tempdb_current * recursion) OVER (PARTITION BY session_id, request_id) + ' +
									'MIN(tempdb_current * recursion) OVER (PARTITION BY session_id, request_id) AS tempdb_current_delta, ' +
								'MAX(CPU * recursion) OVER (PARTITION BY session_id, request_id) + ' +
									'MIN(CPU * recursion) OVER (PARTITION BY session_id, request_id) AS CPU_delta, ' +
								'MAX(thread_CPU_snapshot * recursion) OVER (PARTITION BY session_id, request_id) + ' +
									'MIN(thread_CPU_snapshot * recursion) OVER (PARTITION BY session_id, request_id) AS thread_CPU_delta, ' +
								'MAX(context_switches * recursion) OVER (PARTITION BY session_id, request_id) + ' +
									'MIN(context_switches * recursion) OVER (PARTITION BY session_id, request_id) AS context_switches_delta, ' +
								'MAX(used_memory * recursion) OVER (PARTITION BY session_id, request_id) + ' +
									'MIN(used_memory * recursion) OVER (PARTITION BY session_id, request_id) AS used_memory_delta, ' +
								'MIN(last_request_start_time) OVER (PARTITION BY session_id, request_id) AS first_request_start_time, '
							ELSE ''
						END +
						'COUNT(*) OVER (PARTITION BY session_id, request_id) AS num_events ' +
					'FROM #sessions AS s1 ' +
					CASE 
						WHEN @sort_order = '' THEN ''
						ELSE
							'ORDER BY ' +
								@sort_order
					END +
				') AS s ' +
				'WHERE ' +
					's.recursion = 1 ' +
			') x ' +
			'OPTION (KEEPFIXED PLAN); ' +
			'' +
			CASE @return_schema
				WHEN 1 THEN
					'SET @schema = ' +
						'''CREATE TABLE <table_name> ( '' + ' +
							'STUFF ' +
							'( ' +
								'( ' +
									'SELECT ' +
										''','' + ' +
										'QUOTENAME(COLUMN_NAME) + '' '' + ' +
										'DATA_TYPE + ' + 
										'CASE ' +
											'WHEN DATA_TYPE LIKE ''%char'' THEN ''('' + COALESCE(NULLIF(CONVERT(VARCHAR, CHARACTER_MAXIMUM_LENGTH), ''-1''), ''max'') + '') '' ' +
											'ELSE '' '' ' +
										'END + ' +
										'CASE IS_NULLABLE ' +
											'WHEN ''NO'' THEN ''NOT '' ' +
											'ELSE '''' ' +
										'END + ''NULL'' AS [text()] ' +
									'FROM tempdb.INFORMATION_SCHEMA.COLUMNS ' +
									'WHERE ' +
										'TABLE_NAME = (SELECT name FROM tempdb.sys.objects WHERE object_id = OBJECT_ID(''tempdb..#session_schema'')) ' +
										'ORDER BY ' +
											'ORDINAL_POSITION ' +
									'FOR XML ' +
										'PATH('''') ' +
								'), + ' +
								'1, ' +
								'1, ' +
								''''' ' +
							') + ' +
						''')''; ' 
				ELSE ''
			END
		--End derived table and INSERT specification
		);

	SET @sql_n = CONVERT(NVARCHAR(MAX), @sql);

	EXEC sp_executesql
		@sql_n,
		N'@schema VARCHAR(MAX) OUTPUT',
		@schema OUTPUT;
END;
GO
PRINT N'Creating [dbo].[tab_cols]'
GO



create procedure [dbo].[tab_cols] (@tab nvarchar(255))
as
begin

    declare     @col_count  nvarchar(max) = ''
               ,@col        nvarchar(max) = ''

    select      @col_count += case ORDINAL_POSITION when 1 then '' else ',' end + 'count(' +  QUOTENAME(COLUMN_NAME,']') + ') as ' + QUOTENAME(COLUMN_NAME,']')
               ,@col       += case ORDINAL_POSITION when 1 then '' else ',' end + QUOTENAME(COLUMN_NAME,']')
    from        INFORMATION_SCHEMA.COLUMNS
    where       TABLE_NAME = @tab
    order by    ORDINAL_POSITION

    declare     @stmt nvarchar(max) = 'select * from (select ' + @col_count + ' from ' + @tab + ') t unpivot (val for col in (' + @col + ')) u'

    exec sp_executesql @stmt
end
GO
PRINT N'Creating [dbo].[update_dboCompany]'
GO
CREATE procedure [dbo].[update_dboCompany] @sqlQuery nvarchar(500) as
begin try
	EXEC (@sqlQuery)
end try
begin catch
	IF @@TRANCOUNT > 0
		ROLLBACK;
	Raiserror('Error. Image might been named wrong',16,1);
end catch
GO
REVOKE CONNECT TO [AxBusServiceAccount]
REVOKE CONNECT TO [Joan_Ruiz]
REVOKE CONNECT TO [JoelBjorck]
REVOKE CONNECT TO [PowerbiServiceAccount]
REVOKE CONNECT TO [RebeckaNystrom]
REVOKE CONNECT TO [joel_bjorck]
REVOKE CONNECT TO [servicewriteuser_bri]
REVOKE CONNECT TO [sql-admin-ALL]
REVOKE CONNECT TO [sql-admin-AX]
REVOKE CONNECT TO [sql-admin-DEMO]
REVOKE CONNECT TO [sql-admin-DS]
REVOKE CONNECT TO [sql-admin-FH]
REVOKE CONNECT TO [sql-admin-IN]
REVOKE CONNECT TO [sql-admin-LS]
REVOKE CONNECT TO [sql-admin-PT]
REVOKE CONNECT TO [sql-admin-TS]
